/*! For license information please see login.bundle.js.LICENSE.txt */
(()=>{var e={9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var s=[],o=Object.getPrototypeOf,a=s.slice,c=s.flat?function(e){return s.flat.call(e)}:function(e){return s.concat.apply([],e)},u=s.push,l=s.indexOf,h={},d=h.toString,f=h.hasOwnProperty,p=f.toString,g=p.call(Object),m={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},w=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function T(e,t,n){var r,i,s=(n=n||w).createElement("script");if(s.text=e,t)for(r in b)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&s.setAttribute(r,i);n.head.appendChild(s).parentNode.removeChild(s)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[d.call(e)]||"object":typeof e}var I="3.6.1",_=function(e,t){return new _.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!y(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}_.fn=_.prototype={jquery:I,constructor:_,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=_.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return _.each(this,e)},map:function(e){return this.pushStack(_.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:s.sort,splice:s.splice},_.extend=_.fn.extend=function(){var e,t,n,r,i,s,o=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===c&&(o=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(u&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=o[t],s=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,o[t]=_.extend(u,s,r)):void 0!==r&&(o[t]=r));return o},_.extend({expando:"jQuery"+(I+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=o(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||p.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){T(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?_.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,s=e.length,o=!n;i<s;i++)!t(e[i],i)!==o&&r.push(e[i]);return r},map:function(e,t,n){var r,i,s=0,o=[];if(C(e))for(r=e.length;s<r;s++)null!=(i=t(e[s],s,n))&&o.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&o.push(i);return c(o)},guid:1,support:m}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=s[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var k=function(e){var t,n,r,i,s,o,a,c,u,l,h,d,f,p,g,m,y,v,w,b="sizzle"+1*new Date,T=e.document,E=0,I=0,_=ce(),C=ce(),k=ce(),S=ce(),A=function(e,t){return e===t&&(h=!0),0},x={}.hasOwnProperty,N=[],D=N.pop,R=N.push,O=N.push,L=N.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",U="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\[[\\x20\\t\\r\\n\\f]*("+F+")(?:"+U+"*([*^$|!~]?=)"+U+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+U+"*\\]",j=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",q=new RegExp(U+"+","g"),B=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),H=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),z=new RegExp(U+"|>"),W=new RegExp(j),K=new RegExp("^"+F+"$"),G={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){d()},oe=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(N=L.call(T.childNodes),T.childNodes),N[T.childNodes.length].nodeType}catch(e){O={apply:N.length?function(e,t){R.apply(e,L.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,i){var s,a,u,l,h,p,y,v=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&(d(t),t=t||f,g)){if(11!==T&&(h=Z.exec(e)))if(s=h[1]){if(9===T){if(!(u=t.getElementById(s)))return r;if(u.id===s)return r.push(u),r}else if(v&&(u=v.getElementById(s))&&w(t,u)&&u.id===s)return r.push(u),r}else{if(h[2])return O.apply(r,t.getElementsByTagName(e)),r;if((s=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(s)),r}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))&&(1!==T||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===T&&(z.test(e)||$.test(e))){for((v=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,ie):t.setAttribute("id",l=b)),a=(p=o(e)).length;a--;)p[a]=(l?"#"+l:":scope")+" "+we(p[a]);y=p.join(",")}try{return O.apply(r,v.querySelectorAll(y)),r}catch(t){S(e,!0)}finally{l===b&&t.removeAttribute("id")}}}return c(e.replace(B,"$1"),t,r,i)}function ce(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[b]=!0,e}function le(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function he(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,s=e([],n.length,t),o=s.length;o--;)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},s=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},d=ae.setDocument=function(e){var t,i,o=e?e.ownerDocument||e:T;return o!=f&&9===o.nodeType&&o.documentElement?(p=(f=o).documentElement,g=!s(f),T!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",se,!1):i.attachEvent&&i.attachEvent("onunload",se)),n.scope=le((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=le((function(e){return p.appendChild(e).id=b,!f.getElementsByName||!f.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(i=t.getElementsByName(e),r=0;s=i[r++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[i++];)1===n.nodeType&&r.push(n);return r}return s},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(le((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+M+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&le((function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",j)})),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=J.test(p.compareDocumentPosition),w=t||J.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return h=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==T&&w(T,e)?-1:t==f||t.ownerDocument==T&&w(T,t)?1:l?P(l,e)-P(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,r=0,i=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!i||!s)return e==f?-1:t==f?1:i?-1:s?1:l?P(l,e)-P(l,t):0;if(i===s)return de(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;o[r]===a[r];)r++;return r?de(o[r],a[r]):o[r]==T?-1:a[r]==T?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&g&&!S[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&d(e),w(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&d(e);var i=r.attrHandle[t.toLowerCase()],s=i&&x.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==s?s:n.attributes||!g?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ae.escape=function(e){return(e+"").replace(re,ie)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],i=0,s=0;if(h=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(A),h){for(;t=e[s++];)t===e[s]&&(i=r.push(s));for(;i--;)e.splice(r[i],1)}return l=null,e},i=ae.getText=function(e){var t,n="",r=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},r=ae.selectors={cacheLength:50,createPseudo:ue,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+U+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=ae.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var u,l,h,d,f,p,g=s!==o?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),v=!c&&!a,w=!1;if(m){if(s){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?m.firstChild:m.lastChild],o&&v){for(w=(f=(u=(l=(h=(d=m)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===E&&u[1])&&u[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(w=f=0)||p.pop();)if(1===d.nodeType&&++w&&d===t){l[e]=[E,f,w];break}}else if(v&&(w=f=(u=(l=(h=(d=t)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===E&&u[1]),!1===w)for(;(d=++f&&d&&d[g]||(w=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++w||(v&&((l=(h=d[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]=[E,w]),d!==t)););return(w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,s=i(e,t),o=s.length;o--;)e[r=P(e,s[o])]=!(n[r]=s[o])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=a(e.replace(B,"$1"));return r[b]?ue((function(e,t,n,i){for(var s,o=r(e,null,i,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))})):function(e,i,s){return t[0]=e,r(t,null,s,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return ae(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return K.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ve(){}function we(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,s=i||r,o=n&&"parentNode"===s,a=I++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i);return!1}:function(t,n,c){var u,l,h,d=[E,a];if(c){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(l=(h=t[b]||(t[b]={}))[t.uniqueID]||(h[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[s])&&u[0]===E&&u[1]===a)return d[2]=u[2];if(l[s]=d,d[2]=e(t,n,c))return!0}return!1}}function Te(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,i){for(var s,o=[],a=0,c=e.length,u=null!=t;a<c;a++)(s=e[a])&&(n&&!n(s,r,i)||(o.push(s),u&&t.push(a)));return o}function Ie(e,t,n,r,i,s){return r&&!r[b]&&(r=Ie(r)),i&&!i[b]&&(i=Ie(i,s)),ue((function(s,o,a,c){var u,l,h,d=[],f=[],p=o.length,g=s||function(e,t,n){for(var r=0,i=t.length;r<i;r++)ae(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!s&&t?g:Ee(g,d,e,a,c),y=n?i||(s?e:p||r)?[]:o:m;if(n&&n(m,y,a,c),r)for(u=Ee(y,f),r(u,[],a,c),l=u.length;l--;)(h=u[l])&&(y[f[l]]=!(m[f[l]]=h));if(s){if(i||e){if(i){for(u=[],l=y.length;l--;)(h=y[l])&&u.push(m[l]=h);i(null,y=[],u,c)}for(l=y.length;l--;)(h=y[l])&&(u=i?P(s,h):d[l])>-1&&(s[u]=!(o[u]=h))}}else y=Ee(y===o?y.splice(p,y.length):y),i?i(null,o,y,c):O.apply(o,y)}))}function _e(e){for(var t,n,i,s=e.length,o=r.relative[e[0].type],a=o||r.relative[" "],c=o?1:0,l=be((function(e){return e===t}),a,!0),h=be((function(e){return P(t,e)>-1}),a,!0),d=[function(e,n,r){var i=!o&&(r||n!==u)||((t=n).nodeType?l(e,n,r):h(e,n,r));return t=null,i}];c<s;c++)if(n=r.relative[e[c].type])d=[be(Te(d),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[b]){for(i=++c;i<s&&!r.relative[e[i].type];i++);return Ie(c>1&&Te(d),c>1&&we(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(B,"$1"),n,c<i&&_e(e.slice(c,i)),i<s&&_e(e=e.slice(i)),i<s&&we(e))}d.push(n)}return Te(d)}return ve.prototype=r.filters=r.pseudos,r.setFilters=new ve,o=ae.tokenize=function(e,t){var n,i,s,o,a,c,u,l=C[e+" "];if(l)return t?0:l.slice(0);for(a=e,c=[],u=r.preFilter;a;){for(o in n&&!(i=H.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(s=[])),n=!1,(i=$.exec(a))&&(n=i.shift(),s.push({value:n,type:i[0].replace(B," ")}),a=a.slice(n.length)),r.filter)!(i=G[o].exec(a))||u[o]&&!(i=u[o](i))||(n=i.shift(),s.push({value:n,type:o,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):C(e,c).slice(0)},a=ae.compile=function(e,t){var n,i=[],s=[],a=k[e+" "];if(!a){for(t||(t=o(e)),n=t.length;n--;)(a=_e(t[n]))[b]?i.push(a):s.push(a);a=k(e,function(e,t){var n=t.length>0,i=e.length>0,s=function(s,o,a,c,l){var h,p,m,y=0,v="0",w=s&&[],b=[],T=u,I=s||i&&r.find.TAG("*",l),_=E+=null==T?1:Math.random()||.1,C=I.length;for(l&&(u=o==f||o||l);v!==C&&null!=(h=I[v]);v++){if(i&&h){for(p=0,o||h.ownerDocument==f||(d(h),a=!g);m=e[p++];)if(m(h,o||f,a)){c.push(h);break}l&&(E=_)}n&&((h=!m&&h)&&y--,s&&w.push(h))}if(y+=v,n&&v!==y){for(p=0;m=t[p++];)m(w,b,o,a);if(s){if(y>0)for(;v--;)w[v]||b[v]||(b[v]=D.call(c));b=Ee(b)}O.apply(c,b),l&&!s&&b.length>0&&y+t.length>1&&ae.uniqueSort(c)}return l&&(E=_,u=T),w};return n?ue(s):s}(s,i)),a.selector=e}return a},c=ae.select=function(e,t,n,i){var s,c,u,l,h,d="function"==typeof e&&e,f=!i&&o(e=d.selector||e);if(n=n||[],1===f.length){if((c=f[0]=f[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===t.nodeType&&g&&r.relative[c[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(s=G.needsContext.test(e)?0:c.length;s--&&(u=c[s],!r.relative[l=u.type]);)if((h=r.find[l])&&(i=h(u.matches[0].replace(te,ne),ee.test(c[0].type)&&ye(t.parentNode)||t))){if(c.splice(s,1),!(e=i.length&&we(c)))return O.apply(n,i),n;break}}return(d||a(e,f))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=b.split("").sort(A).join("")===b,n.detectDuplicates=!!h,d(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||he("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||he("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||he(M,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ae}(r);_.find=k,_.expr=k.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=k.uniqueSort,_.text=k.getText,_.isXMLDoc=k.isXML,_.contains=k.contains,_.escapeSelector=k.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&_(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},x=_.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(e,t,n){return y(t)?_.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?_.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?_.grep(e,(function(e){return l.call(t,e)>-1!==n})):_.filter(t,e,n)}_.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?_.find.matchesSelector(r,e)?[r]:[]:_.find.matches(e,_.grep(t,(function(e){return 1===e.nodeType})))},_.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(_(e).filter((function(){for(t=0;t<r;t++)if(_.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)_.find(e,i[t],n);return r>1?_.uniqueSort(n):n},filter:function(e){return this.pushStack(R(this,e||[],!1))},not:function(e){return this.pushStack(R(this,e||[],!0))},is:function(e){return!!R(this,"string"==typeof e&&x.test(e)?_(e):e||[],!1).length}});var O,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof _?t[0]:t,_.merge(this,_.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),D.test(r[1])&&_.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(_):_.makeArray(e,this)}).prototype=_.fn,O=_(w);var P=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function U(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}_.fn.extend({has:function(e){var t=_(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(_.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,s=[],o="string"!=typeof e&&_(e);if(!x.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?_.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?l.call(_(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),_.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return U(e,"nextSibling")},prev:function(e){return U(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(N(e,"template")&&(e=e.content||e),_.merge([],e.childNodes))}},(function(e,t){_.fn[e]=function(n,r){var i=_.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(M[e]||_.uniqueSort(i),P.test(e)&&i.reverse()),this.pushStack(i)}}));var F=/[^\x20\t\r\n\f]+/g;function V(e){return e}function j(e){throw e}function q(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}_.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return _.each(e.match(F)||[],(function(e,n){t[n]=!0})),t}(e):_.extend({},e);var t,n,r,i,s=[],o=[],a=-1,c=function(){for(i=i||e.once,r=t=!0;o.length;a=-1)for(n=o.shift();++a<s.length;)!1===s[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=s.length,n=!1);e.memory||(n=!1),t=!1,i&&(s=n?[]:"")},u={add:function(){return s&&(n&&!t&&(a=s.length-1,o.push(n)),function t(n){_.each(n,(function(n,r){y(r)?e.unique&&u.has(r)||s.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&c()),this},remove:function(){return _.each(arguments,(function(e,t){for(var n;(n=_.inArray(t,s,n))>-1;)s.splice(n,1),n<=a&&a--})),this},has:function(e){return e?_.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return i=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return i=o=[],n||t||(s=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var t=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return _.Deferred((function(n){_.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];s[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var s=0;function o(e,t,n,i){return function(){var a=this,c=arguments,u=function(){var r,u;if(!(e<s)){if((r=n.apply(a,c))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,y(u)?i?u.call(r,o(s,t,V,i),o(s,t,j,i)):(s++,u.call(r,o(s,t,V,i),o(s,t,j,i),o(s,t,V,t.notifyWith))):(n!==V&&(a=void 0,c=[r]),(i||t.resolveWith)(a,c))}},l=i?u:function(){try{u()}catch(r){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(r,l.stackTrace),e+1>=s&&(n!==j&&(a=void 0,c=[r]),t.rejectWith(a,c))}};e?l():(_.Deferred.getStackHook&&(l.stackTrace=_.Deferred.getStackHook()),r.setTimeout(l))}}return _.Deferred((function(r){t[0][3].add(o(0,r,y(i)?i:V,r.notifyWith)),t[1][3].add(o(0,r,y(e)?e:V)),t[2][3].add(o(0,r,y(n)?n:j))})).promise()},promise:function(e){return null!=e?_.extend(e,i):i}},s={};return _.each(t,(function(e,r){var o=r[2],a=r[5];i[r[1]]=o.add,a&&o.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(r[3].fire),s[r[0]]=function(){return s[r[0]+"With"](this===s?void 0:this,arguments),this},s[r[0]+"With"]=o.fireWith})),i.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,r=Array(n),i=a.call(arguments),s=_.Deferred(),o=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?a.call(arguments):n,--t||s.resolveWith(r,i)}};if(t<=1&&(q(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||y(i[n]&&i[n].then)))return s.then();for(;n--;)q(i[n],o(n),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&B.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},_.readyException=function(e){r.setTimeout((function(){throw e}))};var H=_.Deferred();function $(){w.removeEventListener("DOMContentLoaded",$),r.removeEventListener("load",$),_.ready()}_.fn.ready=function(e){return H.then(e).catch((function(e){_.readyException(e)})),this},_.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==e&&--_.readyWait>0||H.resolveWith(w,[_]))}}),_.ready.then=H.then,"complete"===w.readyState||"loading"!==w.readyState&&!w.documentElement.doScroll?r.setTimeout(_.ready):(w.addEventListener("DOMContentLoaded",$),r.addEventListener("load",$));var z=function(e,t,n,r,i,s,o){var a=0,c=e.length,u=null==n;if("object"===E(n))for(a in i=!0,n)z(e,t,a,n[a],!0,s,o);else if(void 0!==r&&(i=!0,y(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(_(e),n)})),t))for(;a<c;a++)t(e[a],n,o?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):c?t(e[0],n):s},W=/^-ms-/,K=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function Q(e){return e.replace(W,"ms-").replace(K,G)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=_.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Q(t)]=n;else for(r in t)i[Q(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Q):(t=Q(t))in r?[t]:t.match(F)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||_.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!_.isEmptyObject(t)}};var J=new Y,Z=new Y,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}_.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),_.fn.extend({data:function(e,t){var n,r,i,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(i=Z.get(s),1===s.nodeType&&!J.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=Q(r.slice(5)),ne(s,r,i[r]));J.set(s,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):z(this,(function(t){var n;if(s&&void 0===t)return void 0!==(n=Z.get(s,e))||void 0!==(n=ne(s,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),_.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=_.queue(e,t),r=n.length,i=n.shift(),s=_._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete s.stop,i.call(e,(function(){_.dequeue(e,t)}),s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:_.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),_.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?_.queue(this[0],e):void 0===t?this:this.each((function(){var n=_.queue(this,e,t);_._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&_.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){_.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=_.Deferred(),s=this,o=this.length,a=function(){--r||i.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=J.get(s[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),se=["Top","Right","Bottom","Left"],oe=w.documentElement,ae=function(e){return _.contains(e.ownerDocument,e)},ce={composed:!0};oe.getRootNode&&(ae=function(e){return _.contains(e.ownerDocument,e)||e.getRootNode(ce)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===_.css(e,"display")};function le(e,t,n,r){var i,s,o=20,a=r?function(){return r.cur()}:function(){return _.css(e,t,"")},c=a(),u=n&&n[3]||(_.cssNumber[t]?"":"px"),l=e.nodeType&&(_.cssNumber[t]||"px"!==u&&+c)&&ie.exec(_.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;o--;)_.style(e,t,l+u),(1-s)*(1-(s=a()/c||.5))<=0&&(o=0),l/=s;l*=2,_.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=i)),i}var he={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,i=he[r];return i||(t=n.body.appendChild(n.createElement(r)),i=_.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),he[r]=i,i)}function fe(e,t){for(var n,r,i=[],s=0,o=e.length;s<o;s++)(r=e[s]).style&&(n=r.style.display,t?("none"===n&&(i[s]=J.get(r,"display")||null,i[s]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[s]=de(r))):"none"!==n&&(i[s]="none",J.set(r,"display",n)));for(s=0;s<o;s++)null!=i[s]&&(e[s].style.display=i[s]);return e}_.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?_(this).show():_(this).hide()}))}});var pe,ge,me=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=w.createDocumentFragment().appendChild(w.createElement("div")),(ge=w.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),m.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",m.option=!!pe.lastChild;var we={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?_.merge([e],n):n}function Te(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}we.tbody=we.tfoot=we.colgroup=we.caption=we.thead,we.th=we.td,m.option||(we.optgroup=we.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function Ie(e,t,n,r,i){for(var s,o,a,c,u,l,h=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((s=e[f])||0===s)if("object"===E(s))_.merge(d,s.nodeType?[s]:s);else if(Ee.test(s)){for(o=o||h.appendChild(t.createElement("div")),a=(ye.exec(s)||["",""])[1].toLowerCase(),c=we[a]||we._default,o.innerHTML=c[1]+_.htmlPrefilter(s)+c[2],l=c[0];l--;)o=o.lastChild;_.merge(d,o.childNodes),(o=h.firstChild).textContent=""}else d.push(t.createTextNode(s));for(h.textContent="",f=0;s=d[f++];)if(r&&_.inArray(s,r)>-1)i&&i.push(s);else if(u=ae(s),o=be(h.appendChild(s),"script"),u&&Te(o),n)for(l=0;s=o[l++];)ve.test(s.type||"")&&n.push(s);return h}var _e=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function ke(){return!1}function Se(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,a,n,r,t[a],s);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===s&&(o=i,i=function(e){return _().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=_.guid++)),e.each((function(){_.event.add(this,t,i,r,n)}))}function xe(e,t,n){n?(J.set(e,t,!1),_.event.add(e,t,{namespace:!1,handler:function(e){var r,i,s=J.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(_.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=a.call(arguments),J.set(this,t,s),r=n(this,t),this[t](),s!==(i=J.get(this,t))||r?J.set(this,t,!1):i={},s!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else s.length&&(J.set(this,t,{value:_.event.trigger(_.extend(s[0],_.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&_.event.add(e,t,Ce)}_.event={global:{},add:function(e,t,n,r,i){var s,o,a,c,u,l,h,d,f,p,g,m=J.get(e);if(X(e))for(n.handler&&(n=(s=n).handler,i=s.selector),i&&_.find.matchesSelector(oe,i),n.guid||(n.guid=_.guid++),(c=m.events)||(c=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(t){return void 0!==_&&_.event.triggered!==t.type?_.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(F)||[""]).length;u--;)f=g=(a=_e.exec(t[u])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=_.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,h=_.event.special[f]||{},l=_.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},s),(d=c[f])||((d=c[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,r,p,o)||e.addEventListener&&e.addEventListener(f,o)),h.add&&(h.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),_.event.global[f]=!0)},remove:function(e,t,n,r,i){var s,o,a,c,u,l,h,d,f,p,g,m=J.hasData(e)&&J.get(e);if(m&&(c=m.events)){for(u=(t=(t||"").match(F)||[""]).length;u--;)if(f=g=(a=_e.exec(t[u])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=_.event.special[f]||{},d=c[f=(r?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)l=d[s],!i&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(s,1),l.selector&&d.delegateCount--,h.remove&&h.remove.call(e,l));o&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,p,m.handle)||_.removeEvent(e,f,m.handle),delete c[f])}else for(f in c)_.event.remove(e,f+t[u],n,r,!0);_.isEmptyObject(c)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,s,o,a=new Array(arguments.length),c=_.event.fix(e),u=(J.get(this,"events")||Object.create(null))[c.type]||[],l=_.event.special[c.type]||{};for(a[0]=c,t=1;t<arguments.length;t++)a[t]=arguments[t];if(c.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,c)){for(o=_.event.handlers.call(this,c,u),t=0;(i=o[t++])&&!c.isPropagationStopped();)for(c.currentTarget=i.elem,n=0;(s=i.handlers[n++])&&!c.isImmediatePropagationStopped();)c.rnamespace&&!1!==s.namespace&&!c.rnamespace.test(s.namespace)||(c.handleObj=s,c.data=s.data,void 0!==(r=((_.event.special[s.origType]||{}).handle||s.handler).apply(i.elem,a))&&!1===(c.result=r)&&(c.preventDefault(),c.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,c),c.result}},handlers:function(e,t){var n,r,i,s,o,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],o={},n=0;n<c;n++)void 0===o[i=(r=t[n]).selector+" "]&&(o[i]=r.needsContext?_(i,this).index(u)>-1:_.find(i,this,null,[u]).length),o[i]&&s.push(r);s.length&&a.push({elem:u,handlers:s})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(_.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[_.expando]?e:new _.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&xe(t,"click",Ce),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&xe(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&N(t,"input")&&J.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},_.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},_.Event=function(e,t){if(!(this instanceof _.Event))return new _.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&_.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(e,t){_.event.special[e]={setup:function(){return xe(this,e,Se),!1},trigger:function(){return xe(this,e),!0},_default:function(t){return J.get(t.target,e)},delegateType:t}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){_.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj;return i&&(i===r||_.contains(r,i))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}})),_.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,_(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each((function(){_.event.remove(this,e,n,t)}))}});var Ne=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Oe(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&_(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,s,o,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(i in J.remove(t,"handle events"),a)for(n=0,r=a[i].length;n<r;n++)_.event.add(t,i,a[i][n]);Z.hasData(e)&&(s=Z.access(e),o=_.extend({},s),Z.set(t,o))}}function Ue(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,r){t=c(t);var i,s,o,a,u,l,h=0,d=e.length,f=d-1,p=t[0],g=y(p);if(g||d>1&&"string"==typeof p&&!m.checkClone&&De.test(p))return e.each((function(i){var s=e.eq(i);g&&(t[0]=p.call(this,i,s.html())),Fe(s,t,n,r)}));if(d&&(s=(i=Ie(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=s),s||r)){for(a=(o=_.map(be(i,"script"),Le)).length;h<d;h++)u=i,h!==f&&(u=_.clone(u,!0,!0),a&&_.merge(o,be(u,"script"))),n.call(e[h],u,h);if(a)for(l=o[o.length-1].ownerDocument,_.map(o,Pe),h=0;h<a;h++)u=o[h],ve.test(u.type||"")&&!J.access(u,"globalEval")&&_.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&!u.noModule&&_._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):T(u.textContent.replace(Re,""),u,l))}return e}function Ve(e,t,n){for(var r,i=t?_.filter(t,e):e,s=0;null!=(r=i[s]);s++)n||1!==r.nodeType||_.cleanData(be(r)),r.parentNode&&(n&&ae(r)&&Te(be(r,"script")),r.parentNode.removeChild(r));return e}_.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,s,o,a=e.cloneNode(!0),c=ae(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||_.isXMLDoc(e)))for(o=be(a),r=0,i=(s=be(e)).length;r<i;r++)Ue(s[r],o[r]);if(t)if(n)for(s=s||be(e),o=o||be(a),r=0,i=s.length;r<i;r++)Me(s[r],o[r]);else Me(e,a);return(o=be(a,"script")).length>0&&Te(o,!c&&be(e,"script")),a},cleanData:function(e){for(var t,n,r,i=_.event.special,s=0;void 0!==(n=e[s]);s++)if(X(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),_.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return z(this,(function(e){return void 0===e?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(_.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return _.clone(this,e,t)}))},html:function(e){return z(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!we[(ye.exec(e)||["",""])[1].toLowerCase()]){e=_.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(_.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;_.inArray(this,e)<0&&(_.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){_.fn[e]=function(e){for(var n,r=[],i=_(e),s=i.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),_(i[o])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var je=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=/^--/,Be=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},He=function(e,t,n){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=s[i];return r},$e=new RegExp(se.join("|"),"i"),ze=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g");function We(e,t,n){var r,i,s,o,a=qe.test(t),c=e.style;return(n=n||Be(e))&&(o=n.getPropertyValue(t)||n[t],a&&(o=o.replace(ze,"$1")),""!==o||ae(e)||(o=_.style(e,t)),!m.pixelBoxStyles()&&je.test(o)&&$e.test(t)&&(r=c.width,i=c.minWidth,s=c.maxWidth,c.minWidth=c.maxWidth=c.width=o,o=n.width,c.width=r,c.minWidth=i,c.maxWidth=s)),void 0!==o?o+"":o}function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(l);var e=r.getComputedStyle(l);n="1%"!==e.top,c=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),i=36===t(e.width),l.style.position="absolute",s=12===t(l.offsetWidth/3),oe.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,i,s,o,a,c,u=w.createElement("div"),l=w.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,_.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,t,n,i;return null==a&&(e=w.createElement("table"),t=w.createElement("tr"),n=w.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",oe.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),a=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,oe.removeChild(e)),a}}))}();var Ge=["Webkit","Moz","ms"],Qe=w.createElement("div").style,Xe={};function Ye(e){return _.cssProps[e]||Xe[e]||(e in Qe?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Qe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,s){var o="width"===t?1:0,a=0,c=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(c+=_.css(e,n+se[o],!0,i)),r?("content"===n&&(c-=_.css(e,"padding"+se[o],!0,i)),"margin"!==n&&(c-=_.css(e,"border"+se[o]+"Width",!0,i))):(c+=_.css(e,"padding"+se[o],!0,i),"padding"!==n?c+=_.css(e,"border"+se[o]+"Width",!0,i):a+=_.css(e,"border"+se[o]+"Width",!0,i));return!r&&s>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-c-a-.5))||0),c}function rt(e,t,n){var r=Be(e),i=(!m.boxSizingReliable()||n)&&"border-box"===_.css(e,"boxSizing",!1,r),s=i,o=We(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(je.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&N(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===_.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===_.css(e,"boxSizing",!1,r),(s=a in e)&&(o=e[a])),(o=parseFloat(o)||0)+nt(e,t,n||(i?"border":"content"),s,r,o)+"px"}function it(e,t,n,r,i){return new it.prototype.init(e,t,n,r,i)}_.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,s,o,a=Q(t),c=qe.test(t),u=e.style;if(c||(t=Ye(a)),o=_.cssHooks[t]||_.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:u[t];"string"==(s=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=le(e,t,i),s="number"),null!=n&&n==n&&("number"!==s||c||(n+=i&&i[3]||(_.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,s,o,a=Q(t);return qe.test(t)||(t=Ye(a)),(o=_.cssHooks[t]||_.cssHooks[a])&&"get"in o&&(i=o.get(e,!0,n)),void 0===i&&(i=We(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(s=parseFloat(i),!0===n||isFinite(s)?s||0:i):i}}),_.each(["height","width"],(function(e,t){_.cssHooks[t]={get:function(e,n,r){if(n)return!Je.test(_.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):He(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,s=Be(e),o=!m.scrollboxSize()&&"absolute"===s.position,a=(o||r)&&"border-box"===_.css(e,"boxSizing",!1,s),c=r?nt(e,t,r,a,s):0;return a&&o&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-nt(e,t,"border",!1,s)-.5)),c&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=_.css(e,t)),tt(0,n,c)}}})),_.cssHooks.marginLeft=Ke(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(e,t){_.cssHooks[e+t]={expand:function(n){for(var r=0,i={},s="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+se[r]+t]=s[r]||s[r-2]||s[0];return i}},"margin"!==e&&(_.cssHooks[e+t].set=tt)})),_.fn.extend({css:function(e,t){return z(this,(function(e,t,n){var r,i,s={},o=0;if(Array.isArray(t)){for(r=Be(e),i=t.length;o<i;o++)s[t[o]]=_.css(e,t[o],!1,r);return s}return void 0!==n?_.style(e,t,n):_.css(e,t)}),e,t,arguments.length>1)}}),_.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||_.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(_.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=_.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=_.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){_.fx.step[e.prop]?_.fx.step[e.prop](e):1!==e.elem.nodeType||!_.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:_.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},_.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},_.fx=it.prototype.init,_.fx.step={};var st,ot,at=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ut(){ot&&(!1===w.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ut):r.setTimeout(ut,_.fx.interval),_.fx.tick())}function lt(){return r.setTimeout((function(){st=void 0})),st=Date.now()}function ht(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=se[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),s=0,o=i.length;s<o;s++)if(r=i[s].call(n,t,e))return r}function ft(e,t,n){var r,i,s=0,o=ft.prefilters.length,a=_.Deferred().always((function(){delete c.elem})),c=function(){if(i)return!1;for(var t=st||lt(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),s=0,o=u.tweens.length;s<o;s++)u.tweens[s].run(r);return a.notifyWith(e,[u,r,n]),r<1&&o?n:(o||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:_.extend({},t),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=_.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(function(e,t){var n,r,i,s,o;for(n in e)if(i=t[r=Q(n)],s=e[n],Array.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),(o=_.cssHooks[r])&&"expand"in o)for(n in s=o.expand(s),delete e[r],s)n in e||(e[n]=s[n],t[n]=i);else t[r]=i}(l,u.opts.specialEasing);s<o;s++)if(r=ft.prefilters[s].call(u,e,l,u.opts))return y(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(l,dt,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(F);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,s,o,a,c,u,l,h="width"in t||"height"in t,d=this,f={},p=e.style,g=e.nodeType&&ue(e),m=J.get(e,"fxshow");for(r in n.queue||(null==(o=_._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,_.queue(e,"fx").length||o.empty.fire()}))}))),t)if(i=t[r],at.test(i)){if(delete t[r],s=s||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}f[r]=m&&m[r]||_.style(e,r)}if((c=!_.isEmptyObject(t))||!_.isEmptyObject(f))for(r in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=m&&m.display)&&(u=J.get(e,"display")),"none"===(l=_.css(e,"display"))&&(u?l=u:(fe([e],!0),u=e.style.display||u,l=_.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===_.css(e,"float")&&(c||(d.done((function(){p.display=u})),null==u&&(l=p.display,u="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),c=!1,f)c||(m?"hidden"in m&&(g=m.hidden):m=J.access(e,"fxshow",{display:u}),s&&(m.hidden=!g),g&&fe([e],!0),d.done((function(){for(r in g||fe([e]),J.remove(e,"fxshow"),f)_.style(e,r,f[r])}))),c=dt(g?m[r]:0,r,d),r in m||(m[r]=c.start,g&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),_.speed=function(e,t,n){var r=e&&"object"==typeof e?_.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=_.isEmptyObject(e),s=_.speed(t,n,r),o=function(){var t=ft(this,_.extend({},e),s);(i||J.get(this,"finish"))&&t.stop(!0)};return o.finish=o,i||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",s=_.timers,o=J.get(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&ct.test(i)&&r(o[i]);for(i=s.length;i--;)s[i].elem!==this||null!=e&&s[i].queue!==e||(s[i].anim.stop(n),t=!1,s.splice(i,1));!t&&n||_.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],s=_.timers,o=r?r.length:0;for(n.finish=!0,_.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(e,t){var n=_.fn[t];_.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ht(t,!0),e,r,i)}})),_.each({slideDown:ht("show"),slideUp:ht("hide"),slideToggle:ht("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){_.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),_.timers=[],_.fx.tick=function(){var e,t=0,n=_.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||_.fx.stop(),st=void 0},_.fx.timer=function(e){_.timers.push(e),_.fx.start()},_.fx.interval=13,_.fx.start=function(){ot||(ot=!0,ut())},_.fx.stop=function(){ot=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,t){return e=_.fx&&_.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=w.createElement("input"),t=w.createElement("select").appendChild(w.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=w.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var pt,gt=_.expr.attrHandle;_.fn.extend({attr:function(e,t){return z(this,_.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){_.removeAttr(this,e)}))}}),_.extend({attr:function(e,t,n){var r,i,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?_.prop(e,t,n):(1===s&&_.isXMLDoc(e)||(i=_.attrHooks[t.toLowerCase()]||(_.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void _.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=_.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(F);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?_.removeAttr(e,n):e.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||_.find.attr;gt[t]=function(e,t,r){var i,s,o=t.toLowerCase();return r||(s=gt[o],gt[o]=i,i=null!=n(e,t,r)?o:null,gt[o]=s),i}}));var mt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function vt(e){return(e.match(F)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}_.fn.extend({prop:function(e,t){return z(this,_.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[_.propFix[e]||e]}))}}),_.extend({prop:function(e,t,n){var r,i,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&_.isXMLDoc(e)||(t=_.propFix[t]||t,i=_.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=_.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(_.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(e){var t,n,r,i,s,o;return y(e)?this.each((function(t){_(this).addClass(e.call(this,t,wt(this)))})):(t=bt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+vt(r)+" "){for(s=0;s<t.length;s++)i=t[s],n.indexOf(" "+i+" ")<0&&(n+=i+" ");o=vt(n),r!==o&&this.setAttribute("class",o)}})):this},removeClass:function(e){var t,n,r,i,s,o;return y(e)?this.each((function(t){_(this).removeClass(e.call(this,t,wt(this)))})):arguments.length?(t=bt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+vt(r)+" "){for(s=0;s<t.length;s++)for(i=t[s];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");o=vt(n),r!==o&&this.setAttribute("class",o)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,r,i,s,o=typeof e,a="string"===o||Array.isArray(e);return y(e)?this.each((function(n){_(this).toggleClass(e.call(this,n,wt(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=bt(e),this.each((function(){if(a)for(s=_(this),i=0;i<n.length;i++)r=n[i],s.hasClass(r)?s.removeClass(r):s.addClass(r);else void 0!==e&&"boolean"!==o||((r=wt(this))&&J.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===e?"":J.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Tt=/\r/g;_.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,_(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(e){return null==e?"":e+""}))),(t=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Tt,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(e){var t=_.find.attr(e,"value");return null!=t?t:vt(_.text(e))}},select:{get:function(e){var t,n,r,i=e.options,s=e.selectedIndex,o="select-one"===e.type,a=o?null:[],c=o?s+1:i.length;for(r=s<0?c:o?s:0;r<c;r++)if(((n=i[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=_(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,s=_.makeArray(t),o=i.length;o--;)((r=i[o]).selected=_.inArray(_.valHooks.option.get(r),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=_.inArray(_(e).val(),t)>-1}},m.checkOn||(_.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var Et=/^(?:focusinfocus|focusoutblur)$/,It=function(e){e.stopPropagation()};_.extend(_.event,{trigger:function(e,t,n,i){var s,o,a,c,u,l,h,d,p=[n||w],g=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!Et.test(g+_.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[_.expando]?e:new _.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:_.makeArray(t,[e]),h=_.event.special[g]||{},i||!h.trigger||!1!==h.trigger.apply(n,t))){if(!i&&!h.noBubble&&!v(n)){for(c=h.delegateType||g,Et.test(c+g)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||w)&&p.push(a.defaultView||a.parentWindow||r)}for(s=0;(o=p[s++])&&!e.isPropagationStopped();)d=o,e.type=s>1?c:h.bindType||g,(l=(J.get(o,"events")||Object.create(null))[e.type]&&J.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!X(n)||u&&y(n[g])&&!v(n)&&((a=n[u])&&(n[u]=null),_.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,It),n[g](),e.isPropagationStopped()&&d.removeEventListener(g,It),_.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=_.extend(new _.Event,n,{type:e,isSimulated:!0});_.event.trigger(r,null,t)}}),_.fn.extend({trigger:function(e,t){return this.each((function(){_.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return _.event.trigger(e,t,n,!0)}}),m.focusin||_.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){_.event.simulate(t,e.target,_.event.fix(e))};_.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var _t=r.location,Ct={guid:Date.now()},kt=/\?/;_.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||_.error("Invalid XML: "+(n?_.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var St=/\[\]$/,At=/\r?\n/g,xt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var i;if(Array.isArray(t))_.each(t,(function(t,i){n||St.test(e)?r(e,i):Dt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(i in t)Dt(e+"["+i+"]",t[i],n,r)}_.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!_.isPlainObject(e))_.each(e,(function(){i(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=_.prop(this,"elements");return e?_.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!_(this).is(":disabled")&&Nt.test(this.nodeName)&&!xt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(e){return{name:t.name,value:e.replace(At,"\r\n")}})):{name:t.name,value:n.replace(At,"\r\n")}})).get()}});var Rt=/%20/g,Ot=/#.*$/,Lt=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Ft={},Vt={},jt="*/".concat("*"),qt=w.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,s=t.toLowerCase().match(F)||[];if(y(n))for(;r=s[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ht(e,t,n,r){var i={},s=e===Vt;function o(a){var c;return i[a]=!0,_.each(e[a]||[],(function(e,a){var u=a(t,n,r);return"string"!=typeof u||s||i[u]?s?!(c=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),c}return o(t.dataTypes[0])||!i["*"]&&o("*")}function $t(e,t){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&_.extend(!0,e,r),e}qt.href=_t.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,_.ajaxSettings),t):$t(_.ajaxSettings,e)},ajaxPrefilter:Bt(Ft),ajaxTransport:Bt(Vt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,s,o,a,c,u,l,h,d,f=_.ajaxSetup({},t),p=f.context||f,g=f.context&&(p.nodeType||p.jquery)?_(p):_.event,m=_.Deferred(),y=_.Callbacks("once memory"),v=f.statusCode||{},b={},T={},E="canceled",I={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Pt.exec(s);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)I.always(e[I.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),C(0,t),this}};if(m.promise(I),f.url=((e||f.url||_t.href)+"").replace(Ut,_t.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(F)||[""],null==f.crossDomain){c=w.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=qt.protocol+"//"+qt.host!=c.protocol+"//"+c.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=_.param(f.data,f.traditional)),Ht(Ft,f,t,I),u)return I;for(h in(l=_.event&&f.global)&&0==_.active++&&_.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Mt.test(f.type),i=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Rt,"+")):(d=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(kt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Lt,"$1"),d=(kt.test(i)?"&":"?")+"_="+Ct.guid+++d),f.url=i+d),f.ifModified&&(_.lastModified[i]&&I.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&I.setRequestHeader("If-None-Match",_.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&I.setRequestHeader("Content-Type",f.contentType),I.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+jt+"; q=0.01":""):f.accepts["*"]),f.headers)I.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,I,f)||u))return I.abort();if(E="abort",y.add(f.complete),I.done(f.success),I.fail(f.error),n=Ht(Vt,f,t,I)){if(I.readyState=1,l&&g.trigger("ajaxSend",[I,f]),u)return I;f.async&&f.timeout>0&&(a=r.setTimeout((function(){I.abort("timeout")}),f.timeout));try{u=!1,n.send(b,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,o,c){var h,d,w,b,T,E=t;u||(u=!0,a&&r.clearTimeout(a),n=void 0,s=c||"",I.readyState=e>0?4:0,h=e>=200&&e<300||304===e,o&&(b=function(e,t,n){for(var r,i,s,o,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in n)s=c[0];else{for(i in n){if(!c[0]||e.converters[i+" "+c[0]]){s=i;break}o||(o=i)}s=s||o}if(s)return s!==c[0]&&c.unshift(s),n[s]}(f,I,o)),!h&&_.inArray("script",f.dataTypes)>-1&&_.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),b=function(e,t,n,r){var i,s,o,a,c,u={},l=e.dataTypes.slice();if(l[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=l.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=s,s=l.shift())if("*"===s)s=c;else if("*"!==c&&c!==s){if(!(o=u[c+" "+s]||u["* "+s]))for(i in u)if((a=i.split(" "))[1]===s&&(o=u[c+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[i]:!0!==u[i]&&(s=a[0],l.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+c+" to "+s}}}return{state:"success",data:t}}(f,b,I,h),h?(f.ifModified&&((T=I.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=T),(T=I.getResponseHeader("etag"))&&(_.etag[i]=T)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=b.state,d=b.data,h=!(w=b.error))):(w=E,!e&&E||(E="error",e<0&&(e=0))),I.status=e,I.statusText=(t||E)+"",h?m.resolveWith(p,[d,E,I]):m.rejectWith(p,[I,E,w]),I.statusCode(v),v=void 0,l&&g.trigger(h?"ajaxSuccess":"ajaxError",[I,f,h?d:w]),y.fireWith(p,[I,E]),l&&(g.trigger("ajaxComplete",[I,f]),--_.active||_.event.trigger("ajaxStop")))}return I},getJSON:function(e,t,n){return _.get(e,t,n,"json")},getScript:function(e,t){return _.get(e,void 0,t,"script")}}),_.each(["get","post"],(function(e,t){_[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:e,type:t,dataType:i,data:n,success:r},_.isPlainObject(e)&&e))}})),_.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),_._evalUrl=function(e,t,n){return _.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){_.globalEval(e,t,n)}})},_.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=_(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){_(this).wrapInner(e.call(this,t))})):this.each((function(){var t=_(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){_(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(e){return!_.expr.pseudos.visible(e)},_.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},Wt=_.ajaxSettings.xhr();m.cors=!!Wt&&"withCredentials"in Wt,m.ajax=Wt=!!Wt,_.ajaxTransport((function(e){var t,n;if(m.cors||Wt&&!e.crossDomain)return{send:function(i,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(o,i[o]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(zt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),_.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return _.globalEval(e),e}}}),_.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),_.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=_("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),w.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Kt,Gt=[],Qt=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||_.expando+"_"+Ct.guid++;return this[e]=!0,e}}),_.ajaxPrefilter("json jsonp",(function(e,t,n){var i,s,o,a=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Qt,"$1"+i):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||_.error(i+" was not called"),o[0]},e.dataTypes[0]="json",s=r[i],r[i]=function(){o=arguments},n.always((function(){void 0===s?_(r).removeProp(i):r[i]=s,e[i]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(i)),o&&y(s)&&s(o[0]),o=s=void 0})),"script"})),m.createHTMLDocument=((Kt=w.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Kt.childNodes.length),_.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument("")).createElement("base")).href=w.location.href,t.head.appendChild(r)):t=w),s=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=Ie([e],t,s),s&&s.length&&_(s).remove(),_.merge([],i.childNodes)));var r,i,s},_.fn.load=function(e,t,n){var r,i,s,o=this,a=e.indexOf(" ");return a>-1&&(r=vt(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&_.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){s=arguments,o.html(r?_("<div>").append(_.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,s||[e.responseText,t,e])}))}),this},_.expr.pseudos.animated=function(e){return _.grep(_.timers,(function(t){return e===t.elem})).length},_.offset={setOffset:function(e,t,n){var r,i,s,o,a,c,u=_.css(e,"position"),l=_(e),h={};"static"===u&&(e.style.position="relative"),a=l.offset(),s=_.css(e,"top"),c=_.css(e,"left"),("absolute"===u||"fixed"===u)&&(s+c).indexOf("auto")>-1?(o=(r=l.position()).top,i=r.left):(o=parseFloat(s)||0,i=parseFloat(c)||0),y(t)&&(t=t.call(e,n,_.extend({},a))),null!=t.top&&(h.top=t.top-a.top+o),null!=t.left&&(h.left=t.left-a.left+i),"using"in t?t.using.call(e,h):l.css(h)}},_.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){_.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===_.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=_(e).offset()).top+=_.css(e,"borderTopWidth",!0),i.left+=_.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-_.css(r,"marginTop",!0),left:t.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===_.css(e,"position");)e=e.offsetParent;return e||oe}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;_.fn[e]=function(r){return z(this,(function(e,r,i){var s;if(v(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===i)return s?s[t]:e[r];s?s.scrollTo(n?s.pageXOffset:i,n?i:s.pageYOffset):e[r]=i}),e,r,arguments.length)}})),_.each(["top","left"],(function(e,t){_.cssHooks[t]=Ke(m.pixelPosition,(function(e,n){if(n)return n=We(e,t),je.test(n)?_(e).position()[t]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(e,t){_.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){_.fn[r]=function(i,s){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===s?"margin":"border");return z(this,(function(t,n,i){var s;return v(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===i?_.css(t,n,a):_.style(t,n,i,a)}),t,o?i:void 0,o)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){_.fn[t]=function(e){return this.on(t,e)}})),_.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){_.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=a.call(arguments,2),i=function(){return e.apply(t||this,r.concat(a.call(arguments)))},i.guid=e.guid=e.guid||_.guid++,i},_.holdReady=function(e){e?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=N,_.isFunction=y,_.isWindow=v,_.camelCase=Q,_.type=E,_.now=Date.now,_.isNumeric=function(e){var t=_.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},_.trim=function(e){return null==e?"":(e+"").replace(Xt,"$1")},void 0===(n=function(){return _}.apply(t,[]))||(e.exports=n);var Yt=r.jQuery,Jt=r.$;return _.noConflict=function(e){return r.$===_&&(r.$=Jt),e&&r.jQuery===_&&(r.jQuery=Yt),_},void 0===i&&(r.jQuery=r.$=_),_}))}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";const e=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const i=e[t],s=t+1<e.length,o=s?e[t+1]:0,a=t+2<e.length,c=a?e[t+2]:0,u=i>>2,l=(3&i)<<4|o>>4;let h=(15&o)<<2|c>>6,d=63&c;a||(d=64,s||(h=64)),r.push(n[u],n[l],n[h],n[d])}return r.join("")},encodeString(t,n){return this.HAS_NATIVE_SUPPORT&&!n?btoa(t):this.encodeByteArray(e(t),n)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){const s=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){const s=((7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(s>>10)),t[r++]=String.fromCharCode(56320+(1023&s))}else{const s=e[n++],o=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const i=n[e.charAt(t++)],s=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==i||null==s||null==o||null==a)throw Error();const c=i<<2|s>>4;if(r.push(c),64!==o){const e=s<<4&240|o>>2;if(r.push(e),64!==a){const e=o<<6&192|a;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},r=function(n){return function(n){const r=e(n);return t.encodeByteArray(r,!0)}(n).replace(/\./g,"")},i=function(e){try{return t.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function s(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}const o=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&i(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},a=e=>{var t,n;return null===(n=null===(t=o())||void 0===t?void 0:t.emulatorHosts)||void 0===n?void 0:n[e]},c=e=>{const t=a(e);if(!t)return;const n=t.lastIndexOf(":");if(n<=0||n+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const r=parseInt(t.substring(n+1),10);return"["===t[0]?[t.substring(1,n-1),r]:[t.substring(0,n),r]},u=e=>{var t;return null===(t=o())||void 0===t?void 0:t[`_${e}`]};class l{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function h(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=t||"demo-project",i=e.iat||0,s=e.sub||e.user_id;if(!s)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const o=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:i,exp:i+3600,auth_time:i,sub:s,user_id:s,firebase:{sign_in_provider:"custom",identities:{}}},e);return[r(JSON.stringify({alg:"none",type:"JWT"})),r(JSON.stringify(o)),""].join(".")}class d extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,d.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,f.prototype.create)}}class f{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,i=this.errors[e],s=i?function(e,t){return e.replace(p,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${s} (${r}).`;return new d(r,o,n)}}const p=/\{\$([^}]+)}/g;function g(e,t){if(e===t)return!0;const n=Object.keys(e),r=Object.keys(t);for(const i of n){if(!r.includes(i))return!1;const n=e[i],s=t[i];if(m(n)&&m(s)){if(!g(n,s))return!1}else if(n!==s)return!1}for(const e of r)if(!n.includes(e))return!1;return!0}function m(e){return null!==e&&"object"==typeof e}function y(e){const t=[];for(const[n,r]of Object.entries(e))Array.isArray(r)?r.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));return t.length?"&"+t.join("&"):""}function v(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,r]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(r)}})),t}function w(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}class b{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let r;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");r=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===r.next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?r.error(this.finalError):r.complete()}catch(e){}})),this.observers.push(r),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function T(){}function E(e){return e&&e._delegate?e._delegate:e}class I{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const _="[DEFAULT]";class C{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new l;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:_})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(r);return r}onInit(e,t){var n;const r=this.normalizeInstanceIdentifier(t),i=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;i.add(e),this.onInitCallbacks.set(r,i);const s=this.instances.get(r);return s&&e(s,r),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const r of n)try{r(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(r=e,r===_?void 0:r),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var r;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:_:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class k{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new C(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const S=[];var A,x;(x=A||(A={}))[x.DEBUG=0]="DEBUG",x[x.VERBOSE=1]="VERBOSE",x[x.INFO=2]="INFO",x[x.WARN=3]="WARN",x[x.ERROR=4]="ERROR",x[x.SILENT=5]="SILENT";const N={debug:A.DEBUG,verbose:A.VERBOSE,info:A.INFO,warn:A.WARN,error:A.ERROR,silent:A.SILENT},D=A.INFO,R={[A.DEBUG]:"log",[A.VERBOSE]:"log",[A.INFO]:"info",[A.WARN]:"warn",[A.ERROR]:"error"},O=(e,t,...n)=>{if(t<e.logLevel)return;const r=(new Date).toISOString(),i=R[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${r}]  ${e.name}:`,...n)};class L{constructor(e){this.name=e,this._logLevel=D,this._logHandler=O,this._userLogHandler=null,S.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in A))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?N[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,A.DEBUG,...e),this._logHandler(this,A.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,A.VERBOSE,...e),this._logHandler(this,A.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,A.INFO,...e),this._logHandler(this,A.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,A.WARN,...e),this._logHandler(this,A.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,A.ERROR,...e),this._logHandler(this,A.ERROR,...e)}}let P,M;const U=new WeakMap,F=new WeakMap,V=new WeakMap,j=new WeakMap,q=new WeakMap;let B={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return F.get(e);if("objectStoreNames"===t)return e.objectStoreNames||V.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return $(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function H(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(M||(M=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(z(this),e),$(U.get(this))}:function(...e){return $(t.apply(z(this),e))}:function(e,...n){const r=t.call(z(this),e,...n);return V.set(r,e.sort?e.sort():[e]),$(r)}:(e instanceof IDBTransaction&&function(e){if(F.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));F.set(e,t)}(e),n=e,(P||(P=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,B):e);var t,n}function $(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t($(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&U.set(t,e)})).catch((()=>{})),q.set(t,e),t}(e);if(j.has(e))return j.get(e);const t=H(e);return t!==e&&(j.set(e,t),q.set(t,e)),t}const z=e=>q.get(e),W=["get","getKey","getAll","getAllKeys","count"],K=["put","add","delete","clear"],G=new Map;function Q(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(G.get(t))return G.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=K.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!W.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let o=s.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&s.done]))[0]};return G.set(t,s),s}var X;X=B,B={...X,get:(e,t,n)=>Q(e,t)||X.get(e,t,n),has:(e,t)=>!!Q(e,t)||X.has(e,t)};class Y{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const J="@firebase/app",Z="0.8.2",ee=new L("@firebase/app"),te="[DEFAULT]",ne={[J]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},re=new Map,ie=new Map;function se(e,t){try{e.container.addComponent(t)}catch(n){ee.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function oe(e){const t=e.name;if(ie.has(t))return ee.debug(`There were multiple attempts to register component ${t}.`),!1;ie.set(t,e);for(const t of re.values())se(t,e);return!0}function ae(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const ce=new f("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class ue{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new I("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw ce.create("app-deleted",{appName:this._name})}}const le="9.12.1";function he(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const r=Object.assign({name:te,automaticDataCollectionEnabled:!1},t),i=r.name;if("string"!=typeof i||!i)throw ce.create("bad-app-name",{appName:String(i)});if(n||(n=(()=>{var e;return null===(e=o())||void 0===e?void 0:e.config})()),!n)throw ce.create("no-options");const s=re.get(i);if(s){if(g(n,s.options)&&g(r,s.config))return s;throw ce.create("duplicate-app",{appName:i})}const a=new k(i);for(const e of ie.values())a.addComponent(e);const c=new ue(n,r,a);return re.set(i,c),c}function de(e="[DEFAULT]"){const t=re.get(e);if(!t&&e===te)return he();if(!t)throw ce.create("no-app",{appName:e});return t}function fe(e,t,n){var r;let i=null!==(r=ne[e])&&void 0!==r?r:e;n&&(i+=`-${n}`);const s=i.match(/\s|\//),o=t.match(/\s|\//);if(s||o){const e=[`Unable to register library "${i}" with version "${t}":`];return s&&e.push(`library name "${i}" contains illegal characters (whitespace or "/")`),s&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void ee.warn(e.join(" "))}oe(new I(`${i}-version`,(()=>({library:i,version:t})),"VERSION"))}const pe="firebase-heartbeat-store";let ge=null;function me(){return ge||(ge=function(e,t,{blocked:n,upgrade:r,blocking:i,terminated:s}={}){const o=indexedDB.open(e,t),a=$(o);return r&&o.addEventListener("upgradeneeded",(e=>{r($(o.result),e.oldVersion,e.newVersion,$(o.transaction))})),n&&o.addEventListener("blocked",(()=>n())),a.then((e=>{s&&e.addEventListener("close",(()=>s())),i&&e.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),a}("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(pe)}}).catch((e=>{throw ce.create("idb-open",{originalErrorMessage:e.message})}))),ge}async function ye(e,t){var n;try{const n=(await me()).transaction(pe,"readwrite"),r=n.objectStore(pe);return await r.put(t,ve(e)),n.done}catch(e){if(e instanceof d)ee.warn(e.message);else{const t=ce.create("idb-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message});ee.warn(t.message)}}}function ve(e){return`${e.name}!${e.options.appId}`}class we{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Te(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=be();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=be(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let r=e.slice();for(const i of e){const e=n.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),Ee(n)>t){e.dates.pop();break}}else if(n.push({agent:i.agent,dates:[i.date]}),Ee(n)>t){n.pop();break}r=r.slice(1)}return{heartbeatsToSend:n,unsentEntries:r}}(this._heartbeatsCache.heartbeats),i=r(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function be(){return(new Date).toISOString().substring(0,10)}class Te{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return"object"==typeof indexedDB&&new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(r);i.onsuccess=()=>{i.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},i.onupgradeneeded=()=>{n=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){var t;try{return(await me()).transaction(pe).objectStore(pe).get(ve(e))}catch(e){if(e instanceof d)ee.warn(e.message);else{const n=ce.create("idb-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message});ee.warn(n.message)}}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return ye(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return ye(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Ee(e){return r(JSON.stringify({version:2,heartbeats:e})).length}function Ie(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}oe(new I("platform-logger",(e=>new Y(e)),"PRIVATE")),oe(new I("heartbeat",(e=>new we(e)),"PRIVATE")),fe(J,Z,""),fe(J,Z,"esm2017"),fe("fire-js",""),fe("firebase","9.12.1","app"),Object.create,Object.create;const _e=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},Ce=new f("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),ke=new L("@firebase/auth");function Se(e,...t){ke.logLevel<=A.ERROR&&ke.error(`Auth (9.12.1): ${e}`,...t)}function Ae(e,...t){throw Ne(e,...t)}function xe(e,...t){return Ne(e,...t)}function Ne(e,...t){if("string"!=typeof e){const n=t[0],r=[...t.slice(1)];return r[0]&&(r[0].appName=e.name),e._errorFactory.create(n,...r)}return Ce.create(e,...t)}function De(e,t,...n){if(!e)throw Ne(t,...n)}function Re(e){const t="INTERNAL ASSERTION FAILED: "+e;throw Se(t),new Error(t)}function Oe(e,t){e||Re(t)}const Le=new Map;function Pe(e){Oe(e instanceof Function,"Expected a class definition");let t=Le.get(e);return t?(Oe(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,Le.set(e,t),t)}function Me(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function Ue(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}function Fe(){return!("undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===Ue()||"https:"===Ue()||function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()||"connection"in navigator))||navigator.onLine}class Ve{constructor(e,t){this.shortDelay=e,this.longDelay=t,Oe(t>e,"Short delay should be less than long delay!"),this.isMobile="undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(s())||"object"==typeof navigator&&"ReactNative"===navigator.product}get(){return Fe()?this.isMobile?this.longDelay:this.shortDelay:Math.min(5e3,this.shortDelay)}}function je(e,t){Oe(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class qe{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void Re("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void Re("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void Re("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const Be={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error"},He=new Ve(3e4,6e4);function $e(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function ze(e,t,n,r,i={}){return We(e,i,(async()=>{let i={},s={};r&&("GET"===t?s=r:i={body:JSON.stringify(r)});const o=y(Object.assign({key:e.config.apiKey},s)).slice(1),a=await e._getAdditionalHeaders();return a["Content-Type"]="application/json",e.languageCode&&(a["X-Firebase-Locale"]=e.languageCode),qe.fetch()(Ge(e,e.config.apiHost,n,o),Object.assign({method:t,headers:a,referrerPolicy:"no-referrer"},i))}))}async function We(e,t,n){e._canInitEmulator=!1;const r=Object.assign(Object.assign({},Be),t);try{const t=new Qe(e),i=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const s=await i.json();if("needConfirmation"in s)throw Xe(e,"account-exists-with-different-credential",s);if(i.ok&&!("errorMessage"in s))return s;{const t=i.ok?s.errorMessage:s.error.message,[n,o]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw Xe(e,"credential-already-in-use",s);if("EMAIL_EXISTS"===n)throw Xe(e,"email-already-in-use",s);if("USER_DISABLED"===n)throw Xe(e,"user-disabled",s);const a=r[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(o)throw function(e,t,n){const r=Object.assign(Object.assign({},_e()),{[t]:n});return new f("auth","Firebase",r).create(t,{appName:e.name})}(e,a,o);Ae(e,a)}}catch(t){if(t instanceof d)throw t;Ae(e,"network-request-failed")}}async function Ke(e,t,n,r,i={}){const s=await ze(e,t,n,r,i);return"mfaPendingCredential"in s&&Ae(e,"multi-factor-auth-required",{_serverResponse:s}),s}function Ge(e,t,n,r){const i=`${t}${n}?${r}`;return e.config.emulator?je(e.config,i):`${e.config.apiScheme}://${i}`}class Qe{constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(xe(this.auth,"network-request-failed"))),He.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function Xe(e,t,n){const r={appName:e.name};n.email&&(r.email=n.email),n.phoneNumber&&(r.phoneNumber=n.phoneNumber);const i=xe(e,t,r);return i.customData._tokenResponse=n,i}function Ye(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function Je(e){return 1e3*Number(e)}function Ze(e){var t;const[n,r,s]=e.split(".");if(void 0===n||void 0===r||void 0===s)return Se("JWT malformed, contained fewer than 3 sections"),null;try{const e=i(r);return e?JSON.parse(e):(Se("Failed to decode base64 JWT payload"),null)}catch(e){return Se("Caught error parsing JWT payload as JSON",null===(t=e)||void 0===t?void 0:t.toString()),null}}async function et(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof d&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class tt{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){var e;try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===(null===(e=t)||void 0===e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class nt{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=Ye(this.lastLoginAt),this.creationTime=Ye(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function rt(e){var t;const n=e.auth,r=await e.getIdToken(),i=await et(e,async function(e,t){return ze(e,"POST","/v1/accounts:lookup",t)}(n,{idToken:r}));De(null==i?void 0:i.users.length,n,"internal-error");const s=i.users[0];e._notifyReloadListener(s);const o=(null===(t=s.providerUserInfo)||void 0===t?void 0:t.length)?s.providerUserInfo.map((e=>{var{providerId:t}=e,n=Ie(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],a=(c=e.providerData,u=o,[...c.filter((e=>!u.some((t=>t.providerId===e.providerId)))),...u]);var c,u;const l=e.isAnonymous,h=!(e.email&&s.passwordHash||(null==a?void 0:a.length)),d=!!l&&h,f={uid:s.localId,displayName:s.displayName||null,photoURL:s.photoUrl||null,email:s.email||null,emailVerified:s.emailVerified||!1,phoneNumber:s.phoneNumber||null,tenantId:s.tenantId||null,providerData:a,metadata:new nt(s.createdAt,s.lastLoginAt),isAnonymous:d};Object.assign(e,f)}class it{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){De(e.idToken,"internal-error"),De(void 0!==e.idToken,"internal-error"),De(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):function(e){const t=Ze(e);return De(t,"internal-error"),De(void 0!==t.exp,"internal-error"),De(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}async getToken(e,t=!1){return De(!this.accessToken||this.refreshToken,e,"user-token-expired"),t||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:r,expiresIn:i}=await async function(e,t){const n=await We(e,{},(async()=>{const n=y({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:r,apiKey:i}=e.config,s=Ge(e,r,"/v1/token",`key=${i}`),o=await e._getAdditionalHeaders();return o["Content-Type"]="application/x-www-form-urlencoded",qe.fetch()(s,{method:"POST",headers:o,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,r,Number(i))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:r,expirationTime:i}=t,s=new it;return n&&(De("string"==typeof n,"internal-error",{appName:e}),s.refreshToken=n),r&&(De("string"==typeof r,"internal-error",{appName:e}),s.accessToken=r),i&&(De("number"==typeof i,"internal-error",{appName:e}),s.expirationTime=i),s}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new it,this.toJSON())}_performRefresh(){return Re("not implemented")}}function st(e,t){De("string"==typeof e||void 0===e,"internal-error",{appName:t})}class ot{constructor(e){var{uid:t,auth:n,stsTokenManager:r}=e,i=Ie(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new tt(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.providerData=i.providerData?[...i.providerData]:[],this.metadata=new nt(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(e){const t=await et(this,this.stsTokenManager.getToken(this.auth,e));return De(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=E(e),r=await n.getIdToken(t),i=Ze(r);De(i&&i.exp&&i.auth_time&&i.iat,n.auth,"internal-error");const s="object"==typeof i.firebase?i.firebase:void 0,o=null==s?void 0:s.sign_in_provider;return{claims:i,token:r,authTime:Ye(Je(i.auth_time)),issuedAtTime:Ye(Je(i.iat)),expirationTime:Ye(Je(i.exp)),signInProvider:o||null,signInSecondFactor:(null==s?void 0:s.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=E(e);await rt(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(De(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){return new ot(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(e){De(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await rt(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const e=await this.getIdToken();return await et(this,async function(e,t){return ze(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,r,i,s,o,a,c,u;const l=null!==(n=t.displayName)&&void 0!==n?n:void 0,h=null!==(r=t.email)&&void 0!==r?r:void 0,d=null!==(i=t.phoneNumber)&&void 0!==i?i:void 0,f=null!==(s=t.photoURL)&&void 0!==s?s:void 0,p=null!==(o=t.tenantId)&&void 0!==o?o:void 0,g=null!==(a=t._redirectEventId)&&void 0!==a?a:void 0,m=null!==(c=t.createdAt)&&void 0!==c?c:void 0,y=null!==(u=t.lastLoginAt)&&void 0!==u?u:void 0,{uid:v,emailVerified:w,isAnonymous:b,providerData:T,stsTokenManager:E}=t;De(v&&E,e,"internal-error");const I=it.fromJSON(this.name,E);De("string"==typeof v,e,"internal-error"),st(l,e.name),st(h,e.name),De("boolean"==typeof w,e,"internal-error"),De("boolean"==typeof b,e,"internal-error"),st(d,e.name),st(f,e.name),st(p,e.name),st(g,e.name),st(m,e.name),st(y,e.name);const _=new ot({uid:v,auth:e,email:h,emailVerified:w,displayName:l,isAnonymous:b,photoURL:f,phoneNumber:d,tenantId:p,stsTokenManager:I,createdAt:m,lastLoginAt:y});return T&&Array.isArray(T)&&(_.providerData=T.map((e=>Object.assign({},e)))),g&&(_._redirectEventId=g),_}static async _fromIdTokenResponse(e,t,n=!1){const r=new it;r.updateFromServerResponse(t);const i=new ot({uid:t.localId,auth:e,stsTokenManager:r,isAnonymous:n});return await rt(i),i}}class at{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}at.type="NONE";const ct=at;function ut(e,t,n){return`firebase:${e}:${t}:${n}`}class lt{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:r,name:i}=this.auth;this.fullUserKey=ut(this.userKey,r.apiKey,i),this.fullPersistenceKey=ut("persistence",r.apiKey,i),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);return e?ot._fromJSON(this.auth,e):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new lt(Pe(ct),e,n);const r=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let i=r[0]||Pe(ct);const s=ut(n,e.config.apiKey,e.name);let o=null;for(const n of t)try{const t=await n._get(s);if(t){const r=ot._fromJSON(e,t);n!==i&&(o=r),i=n;break}}catch(e){}const a=r.filter((e=>e._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(s,o.toJSON()),await Promise.all(t.map((async e=>{if(e!==i)try{await e._remove(s)}catch(e){}}))),new lt(i,e,n)):new lt(i,e,n)}}function ht(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if(gt(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(dt(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(yt(t))return"Blackberry";if(vt(t))return"Webos";if(ft(t))return"Safari";if((t.includes("chrome/")||pt(t))&&!t.includes("edge/"))return"Chrome";if(mt(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function dt(e=s()){return/firefox\//i.test(e)}function ft(e=s()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function pt(e=s()){return/crios\//i.test(e)}function gt(e=s()){return/iemobile/i.test(e)}function mt(e=s()){return/android/i.test(e)}function yt(e=s()){return/blackberry/i.test(e)}function vt(e=s()){return/webos/i.test(e)}function wt(e=s()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function bt(e=s()){return wt(e)||mt(e)||vt(e)||yt(e)||/windows phone/i.test(e)||gt(e)}function Tt(e,t=[]){let n;switch(e){case"Browser":n=ht(s());break;case"Worker":n=`${ht(s())}-${e}`;break;default:n=e}return`${n}/JsCore/9.12.1/${t.length?t.join(","):"FirebaseCore-web"}`}class Et{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,t){const n=t=>new Promise(((n,r)=>{try{n(e(t))}catch(e){r(e)}}));n.onAbort=t,this.queue.push(n);const r=this.queue.length-1;return()=>{this.queue[r]=()=>Promise.resolve()}}async runMiddleware(e){var t;if(this.auth.currentUser===e)return;const n=[];try{for(const t of this.queue)await t(e),t.onAbort&&n.push(t.onAbort)}catch(e){n.reverse();for(const e of n)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null===(t=e)||void 0===t?void 0:t.message})}}}class It{constructor(e,t,n){this.app=e,this.heartbeatServiceProvider=t,this.config=n,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new Ct(this),this.idTokenSubscription=new Ct(this),this.beforeStateQueue=new Et(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=Ce,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=n.sdkClientVersion}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=Pe(t)),this._initializationPromise=this.queue((async()=>{var n,r;if(!this._deleted&&(this.persistenceManager=await lt.create(this,e),!this._deleted)){if(null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(r=this.currentUser)||void 0===r?void 0:r.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUser(e){var t;const n=await this.assertedPersistence.getCurrentUser();let r=n,i=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const n=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,s=null==r?void 0:r._redirectEventId,o=await this.tryRedirectSignIn(e);n&&n!==s||!(null==o?void 0:o.user)||(r=o.user,i=!0)}if(!r)return this.directlySetCurrentUser(null);if(!r._redirectEventId){if(i)try{await this.beforeStateQueue.runMiddleware(r)}catch(e){r=n,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return r?this.reloadAndSetCurrentUserOrClear(r):this.directlySetCurrentUser(null)}return De(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===r._redirectEventId?this.directlySetCurrentUser(r):this.reloadAndSetCurrentUserOrClear(r)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){var t;try{await rt(e)}catch(e){if("auth/network-request-failed"!==(null===(t=e)||void 0===t?void 0:t.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){const t=e?E(e):null;return t&&De(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e,t=!1){if(!this._deleted)return e&&De(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),t||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0)}setPersistence(e){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Pe(e))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(e){this._errorFactory=new f("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}beforeAuthStateChanged(e,t){return this.beforeStateQueue.pushCallback(e,t)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&Pe(e)||this._popupRedirectResolver;De(t,this,"argument-error"),this.redirectPersistenceManager=await lt.create(this,[Pe(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,r){if(this._deleted)return()=>{};const i="function"==typeof t?t:t.next.bind(t),s=this._isInitialized?Promise.resolve():this._initializationPromise;return De(s,this,"internal-error"),s.then((()=>i(this.currentUser))),"function"==typeof t?e.addObserver(t,n,r):e.addObserver(t)}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh(),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return De(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=Tt(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());return n&&(t["X-Firebase-Client"]=n),t}}function _t(e){return E(e)}class Ct{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e,t){const n=new b(e,void 0);return n.subscribe.bind(n)}((e=>this.observer=e))}get next(){return De(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}function kt(e){const t=e.indexOf(":");return t<0?"":e.substr(0,t+1)}function St(e){if(!e)return null;const t=Number(e);return isNaN(t)?null:t}class At{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return Re("not implemented")}_getIdTokenResponse(e){return Re("not implemented")}_linkToIdToken(e,t){return Re("not implemented")}_getReauthenticationResolver(e){return Re("not implemented")}}class xt extends At{constructor(e,t,n,r=null){super("password",n),this._email=e,this._password=t,this._tenantId=r}static _fromEmailAndPassword(e,t){return new xt(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new xt(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return async function(e,t){return Ke(e,"POST","/v1/accounts:signInWithPassword",$e(e,t))}(e,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return Ke(e,"POST","/v1/accounts:signInWithEmailLink",$e(e,t))}(e,{email:this._email,oobCode:this._password});default:Ae(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return async function(e,t){return ze(e,"POST","/v1/accounts:update",t)}(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return Ke(e,"POST","/v1/accounts:signInWithEmailLink",$e(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:Ae(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function Nt(e,t){return Ke(e,"POST","/v1/accounts:signInWithIdp",$e(e,t))}class Dt extends At{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new Dt(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):Ae("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:r}=t,i=Ie(t,["providerId","signInMethod"]);if(!n||!r)return null;const s=new Dt(n,r);return s.idToken=i.idToken||void 0,s.accessToken=i.accessToken||void 0,s.secret=i.secret,s.nonce=i.nonce,s.pendingToken=i.pendingToken||null,s}_getIdTokenResponse(e){return Nt(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,Nt(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,Nt(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=y(t)}return e}}const Rt={USER_NOT_FOUND:"user-not-found"};class Ot extends At{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new Ot({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new Ot({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return Ke(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await Ke(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,t));if(n.temporaryProof)throw Xe(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return Ke(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),Rt)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:r}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:r}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:i}=e;return n||t||r||i?new Ot({verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:i}):null}}class Lt{constructor(e){var t,n,r,i,s,o;const a=v(w(e)),c=null!==(t=a.apiKey)&&void 0!==t?t:null,u=null!==(n=a.oobCode)&&void 0!==n?n:null,l=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(r=a.mode)&&void 0!==r?r:null);De(c&&u&&l,"argument-error"),this.apiKey=c,this.operation=l,this.code=u,this.continueUrl=null!==(i=a.continueUrl)&&void 0!==i?i:null,this.languageCode=null!==(s=a.languageCode)&&void 0!==s?s:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(e){const t=function(e){const t=v(w(e)).link,n=t?v(w(t)).deep_link_id:null,r=v(w(e)).deep_link_id;return(r?v(w(r)).link:null)||r||n||t||e}(e);try{return new Lt(t)}catch(e){return null}}}class Pt{constructor(){this.providerId=Pt.PROVIDER_ID}static credential(e,t){return xt._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=Lt.parseLink(t);return De(n,"argument-error"),xt._fromEmailAndCode(e,n.code,n.tenantId)}}Pt.PROVIDER_ID="password",Pt.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Pt.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Mt{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class Ut extends Mt{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class Ft extends Ut{constructor(){super("facebook.com")}static credential(e){return Dt._fromParams({providerId:Ft.PROVIDER_ID,signInMethod:Ft.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Ft.credentialFromTaggedObject(e)}static credentialFromError(e){return Ft.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Ft.credential(e.oauthAccessToken)}catch(e){return null}}}Ft.FACEBOOK_SIGN_IN_METHOD="facebook.com",Ft.PROVIDER_ID="facebook.com";class Vt extends Ut{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return Dt._fromParams({providerId:Vt.PROVIDER_ID,signInMethod:Vt.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return Vt.credentialFromTaggedObject(e)}static credentialFromError(e){return Vt.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return Vt.credential(t,n)}catch(e){return null}}}Vt.GOOGLE_SIGN_IN_METHOD="google.com",Vt.PROVIDER_ID="google.com";class jt extends Ut{constructor(){super("github.com")}static credential(e){return Dt._fromParams({providerId:jt.PROVIDER_ID,signInMethod:jt.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return jt.credentialFromTaggedObject(e)}static credentialFromError(e){return jt.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return jt.credential(e.oauthAccessToken)}catch(e){return null}}}jt.GITHUB_SIGN_IN_METHOD="github.com",jt.PROVIDER_ID="github.com";class qt extends Ut{constructor(){super("twitter.com")}static credential(e,t){return Dt._fromParams({providerId:qt.PROVIDER_ID,signInMethod:qt.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return qt.credentialFromTaggedObject(e)}static credentialFromError(e){return qt.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return qt.credential(t,n)}catch(e){return null}}}qt.TWITTER_SIGN_IN_METHOD="twitter.com",qt.PROVIDER_ID="twitter.com";class Bt{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,r=!1){const i=await ot._fromIdTokenResponse(e,n,r),s=Ht(n);return new Bt({user:i,providerId:s,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const r=Ht(n);return new Bt({user:e,providerId:r,_tokenResponse:n,operationType:t})}}function Ht(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class $t extends d{constructor(e,t,n,r){var i;super(t.code,t.message),this.operationType=n,this.user=r,Object.setPrototypeOf(this,$t.prototype),this.customData={appName:e.name,tenantId:null!==(i=e.tenantId)&&void 0!==i?i:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,r){return new $t(e,t,n,r)}}function zt(e,t,n,r){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw $t._fromErrorAndOperation(e,n,t,r);throw n}))}async function Wt(e,t,n=!1){const r="signIn",i=await zt(e,r,t),s=await Bt._fromIdTokenResponse(e,r,i);return n||await e._updateCurrentUser(s.user),s}new WeakMap;const Kt="__sak";class Gt{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem(Kt,"1"),this.storage.removeItem(Kt),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class Qt extends Gt{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const e=s();return ft(e)||wt(e)}()&&function(){try{return!(!window||window===window.top)}catch(e){return!1}}(),this.fallbackToPolling=bt(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),r=this.localCache[t];n!==r&&e(t,r,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;if(t?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const r=this.storage.getItem(n);if(e.newValue!==r)null!==e.newValue?this.storage.setItem(n,e.newValue):this.storage.removeItem(n);else if(this.localCache[n]===e.newValue&&!t)return}const r=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},i=this.storage.getItem(n);!function(){const e=s();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}()||10!==document.documentMode||i===e.newValue||e.newValue===e.oldValue?r():setTimeout(r,10)}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}Qt.type="LOCAL";const Xt=Qt;class Yt extends Gt{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}Yt.type="SESSION";const Jt=Yt;class Zt{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Zt(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:r,data:i}=t.data,s=this.handlersMap[r];if(!(null==s?void 0:s.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:r});const o=Array.from(s).map((async e=>e(t.origin,i))),a=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(o);t.ports[0].postMessage({status:"done",eventId:n,eventType:r,response:a})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function en(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Zt.receivers=[];class tn{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const r="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!r)throw new Error("connection_unavailable");let i,s;return new Promise(((o,a)=>{const c=en("",20);r.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);s={messageChannel:r,onMessage(e){const t=e;if(t.data.eventId===c)switch(t.data.status){case"ack":clearTimeout(u),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(t.data.response);break;default:clearTimeout(u),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(s),r.port1.addEventListener("message",s.onMessage),this.target.postMessage({eventType:e,eventId:c,data:t},[r.port2])})).finally((()=>{s&&this.removeMessageHandler(s)}))}}function nn(){return window}function rn(){return void 0!==nn().WorkerGlobalScope&&"function"==typeof nn().importScripts}const sn="firebaseLocalStorageDb",on="firebaseLocalStorage",an="fbase_key";class cn{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function un(e,t){return e.transaction([on],t?"readwrite":"readonly").objectStore(on)}function ln(){const e=indexedDB.open(sn,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore(on,{keyPath:an})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains(on)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(sn);return new cn(e).toPromise()}(),t(await ln()))}))}))}async function hn(e,t,n){const r=un(e,!0).put({[an]:t,value:n});return new cn(r).toPromise()}function dn(e,t){const n=un(e,!0).delete(t);return new cn(n).toPromise()}class fn{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await ln()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return rn()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Zt._getInstance(rn()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new tn(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){if(this.sender&&this.activeServiceWorker&&function(){var e;return(null===(e=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===e?void 0:e.controller)||null}()===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(e){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await ln();return await hn(e,Kt,"1"),await dn(e,Kt),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>hn(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=un(e,!1).get(t),r=await new cn(n).toPromise();return void 0===r?null:r.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>dn(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=un(e,!1).getAll();return new cn(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;for(const{fbase_key:r,value:i}of e)n.add(r),JSON.stringify(this.localCache[r])!==JSON.stringify(i)&&(this.notifyListeners(r,i),t.push(r));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}fn.type="LOCAL";const pn=fn;function gn(e){return`__${e}${Math.floor(1e6*Math.random())}`}gn("rcb"),new Ve(3e4,6e4);class mn{constructor(e){this.providerId=mn.PROVIDER_ID,this.auth=_t(e)}verifyPhoneNumber(e,t){return async function(e,t,n){var r;const i=await n.verify();try{let s;if(De("string"==typeof i,e,"argument-error"),De("recaptcha"===n.type,e,"argument-error"),s="string"==typeof t?{phoneNumber:t}:t,"session"in s){const t=s.session;if("phoneNumber"in s){De("enroll"===t.type,e,"internal-error");const n=await function(e,t){return ze(e,"POST","/v2/accounts/mfaEnrollment:start",$e(e,t))}(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{De("signin"===t.type,e,"internal-error");const n=(null===(r=s.multiFactorHint)||void 0===r?void 0:r.uid)||s.multiFactorUid;De(n,e,"missing-multi-factor-info");const o=await function(e,t){return ze(e,"POST","/v2/accounts/mfaSignIn:start",$e(e,t))}(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:t}=await async function(e,t){return ze(e,"POST","/v1/accounts:sendVerificationCode",$e(e,t))}(e,{phoneNumber:s.phoneNumber,recaptchaToken:i});return t}}finally{n._reset()}}(this.auth,e,E(t))}static credential(e,t){return Ot._fromVerification(e,t)}static credentialFromResult(e){const t=e;return mn.credentialFromTaggedObject(t)}static credentialFromError(e){return mn.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?Ot._fromTokenResponse(t,n):null}}mn.PROVIDER_ID="phone",mn.PHONE_SIGN_IN_METHOD="phone";class yn extends At{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return Nt(e,this._buildIdpRequest())}_linkToIdToken(e,t){return Nt(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return Nt(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function vn(e){return Wt(e.auth,new yn(e),e.bypassAuthState)}function wn(e){const{auth:t,user:n}=e;return De(n,t,"internal-error"),async function(e,t,n=!1){var r;const{auth:i}=e,s="reauthenticate";try{const r=await et(e,zt(i,s,t,e),n);De(r.idToken,i,"internal-error");const o=Ze(r.idToken);De(o,i,"internal-error");const{sub:a}=o;return De(e.uid===a,i,"user-mismatch"),Bt._forOperation(e,s,r)}catch(e){throw"auth/user-not-found"===(null===(r=e)||void 0===r?void 0:r.code)&&Ae(i,"user-mismatch"),e}}(n,new yn(e),e.bypassAuthState)}async function bn(e){const{auth:t,user:n}=e;return De(n,t,"internal-error"),async function(e,t,n=!1){const r=await et(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return Bt._forOperation(e,"link",r)}(n,new yn(e),e.bypassAuthState)}class Tn{constructor(e,t,n,r,i=!1){this.auth=e,this.resolver=n,this.user=r,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:r,tenantId:i,error:s,type:o}=e;if(s)return void this.reject(s);const a={auth:this.auth,requestUri:t,sessionId:n,tenantId:i||void 0,postBody:r||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return vn;case"linkViaPopup":case"linkViaRedirect":return bn;case"reauthViaPopup":case"reauthViaRedirect":return wn;default:Ae(this.auth,"internal-error")}}resolve(e){Oe(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){Oe(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const En=new Ve(2e3,1e4);class In extends Tn{constructor(e,t,n,r,i){super(e,t,r,i),this.provider=n,this.authWindow=null,this.pollId=null,In.currentPopupAction&&In.currentPopupAction.cancel(),In.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return De(e,this.auth,"internal-error"),e}async onExecution(){Oe(1===this.filter.length,"Popup operations only handle one event");const e=en();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(xe(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(xe(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,In.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(xe(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(e,En.get())};e()}}In.currentPopupAction=null;const _n=new Map;class Cn extends Tn{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=_n.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return ut("pendingRedirect",e.config.apiKey,e.name)}(t),r=function(e){return Pe(e._redirectPersistence)}(e);if(!await r._isAvailable())return!1;const i="true"===await r._get(n);return await r._remove(n),i}(this.resolver,this.auth)?await super.execute():null;e=()=>Promise.resolve(t)}catch(t){e=()=>Promise.reject(t)}_n.set(this.auth._key(),e)}return this.bypassAuthState||_n.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function kn(e,t){_n.set(e._key(),t)}async function Sn(e,t,n=!1){const r=_t(e),i=function(e,t){return t?Pe(t):(De(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}(r,t),s=new Cn(r,i,n),o=await s.execute();return o&&!n&&(delete o.user._redirectEventId,await r._persistUserIfCurrent(o.user),await r._setRedirectUser(null,t)),o}class An{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return Nn(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!Nn(e)){const r=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(xe(this.auth,r))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(xn(e))}saveEventToCache(e){this.cachedEventUids.add(xn(e)),this.lastProcessedEventTime=Date.now()}}function xn(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function Nn({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const Dn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Rn=/^https?/;function On(e){const t=Me(),{protocol:n,hostname:r}=new URL(t);if(e.startsWith("chrome-extension://")){const i=new URL(e);return""===i.hostname&&""===r?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===r}if(!Rn.test(n))return!1;if(Dn.test(e))return r===e;const i=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(r)}const Ln=new Ve(3e4,6e4);function Pn(){const e=nn().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}let Mn=null;function Un(e){return Mn=Mn||function(e){return new Promise(((t,n)=>{var r,i,s,o;function a(){Pn(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{Pn(),n(xe(e,"network-request-failed"))},timeout:Ln.get()})}if(null===(i=null===(r=nn().gapi)||void 0===r?void 0:r.iframes)||void 0===i?void 0:i.Iframe)t(gapi.iframes.getContext());else{if(!(null===(s=nn().gapi)||void 0===s?void 0:s.load)){const t=gn("iframefcb");return nn()[t]=()=>{gapi.load?a():n(xe(e,"network-request-failed"))},(o=`https://apis.google.com/js/api.js?onload=${t}`,new Promise(((e,t)=>{const n=document.createElement("script");n.setAttribute("src",o),n.onload=e,n.onerror=e=>{const n=xe("internal-error");n.customData=e,t(n)},n.type="text/javascript",n.charset="UTF-8",function(){var e,t;return null!==(t=null===(e=document.getElementsByTagName("head"))||void 0===e?void 0:e[0])&&void 0!==t?t:document}().appendChild(n)}))).catch((e=>n(e)))}a()}})).catch((e=>{throw Mn=null,e}))}(e),Mn}const Fn=new Ve(5e3,15e3),Vn={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},jn=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function qn(e){const t=e.config;De(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?je(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,r={apiKey:t.apiKey,appName:e.name,v:le},i=jn.get(e.config.apiHost);i&&(r.eid=i);const s=e._getFrameworks();return s.length&&(r.fw=s.join(",")),`${n}?${y(r).slice(1)}`}const Bn={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class Hn{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}function $n(e,t,n,r,i,s){De(e.config.authDomain,e,"auth-domain-config-required"),De(e.config.apiKey,e,"invalid-api-key");const o={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:r,v:le,eventId:i};if(t instanceof Mt){t.setDefaultLanguage(e.languageCode),o.providerId=t.providerId||"",function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}(t.getCustomParameters())||(o.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(s||{}))o[e]=t}if(t instanceof Ut){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(o.scopes=e.join(","))}e.tenantId&&(o.tid=e.tenantId);const a=o;for(const e of Object.keys(a))void 0===a[e]&&delete a[e];return`${function({config:e}){return e.emulator?je(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${y(a).slice(1)}`}const zn="webStorageSupport",Wn=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Jt,this._completeRedirectFn=Sn,this._overrideRedirectResult=kn}async _openPopup(e,t,n,r){var i;return Oe(null===(i=this.eventManagers[e._key()])||void 0===i?void 0:i.manager,"_initialize() not called before _openPopup()"),function(e,t,n,r=500,i=600){const o=Math.max((window.screen.availHeight-i)/2,0).toString(),a=Math.max((window.screen.availWidth-r)/2,0).toString();let c="";const u=Object.assign(Object.assign({},Bn),{width:r.toString(),height:i.toString(),top:o,left:a}),l=s().toLowerCase();n&&(c=pt(l)?"_blank":n),dt(l)&&(t=t||"http://localhost",u.scrollbars="yes");const h=Object.entries(u).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=s()){var t;return wt(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(l)&&"_self"!==c)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const r=document.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(r)}(t||"",c),new Hn(null);const d=window.open(t||"",c,h);De(d,e,"popup-blocked");try{d.focus()}catch(e){}return new Hn(d)}(e,$n(e,t,n,Me(),r),en())}async _openRedirect(e,t,n,r){var i;return await this._originValidation(e),i=$n(e,t,n,Me(),r),nn().location.href=i,new Promise((()=>{}))}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(Oe(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await Un(e),n=nn().gapi;return De(n,e,"internal-error"),t.open({where:document.body,url:qn(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:Vn,dontclear:!0},(t=>new Promise((async(n,r)=>{await t.restyle({setHideOnLeave:!1});const i=xe(e,"network-request-failed"),s=nn().setTimeout((()=>{r(i)}),Fn.get());function o(){nn().clearTimeout(s),n(t)}t.ping(o).then(o,(()=>{r(i)}))}))))}(e),n=new An(e);return t.register("authEvent",(t=>(De(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(zn,{type:zn},(n=>{var r;const i=null===(r=null==n?void 0:n[0])||void 0===r?void 0:r.webStorageSupport;void 0!==i&&t(!!i),Ae(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return ze(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(On(e))return}catch(e){}Ae(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return bt()||ft()||wt()}};var Kn="@firebase/auth",Gn="0.20.10";class Qn{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{var n;e((null===(n=t)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){De(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}const Xn=u("authIdTokenMaxAge")||300;let Yn=null;function Jn(e=de()){const t=ae(e,"auth");if(t.isInitialized())return t.getImmediate();const n=function(e,t){const n=ae(e,"auth");if(n.isInitialized()){const e=n.getImmediate();if(g(n.getOptions(),null!=t?t:{}))return e;Ae(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:Wn,persistence:[pn,Xt,Jt]}),r=u("authTokenSyncURL");if(r){const e=(i=r,async e=>{const t=e&&await e.getIdTokenResult(),n=t&&((new Date).getTime()-Date.parse(t.issuedAtTime))/1e3;if(n&&n>Xn)return;const r=null==t?void 0:t.token;Yn!==r&&(Yn=r,await fetch(i,{method:r?"POST":"DELETE",headers:r?{Authorization:`Bearer ${r}`}:{}}))});!function(e,t,n){E(e).beforeAuthStateChanged(t,n)}(n,e,(()=>e(n.currentUser))),function(t,n,r,i){E(t).onIdTokenChanged((t=>e(t)),void 0,void 0)}(n)}var i;const s=a("auth");return s&&function(e,t,n){const r=_t(e);De(r._canInitEmulator,r,"emulator-config-failed"),De(/^https?:\/\//.test(t),r,"invalid-emulator-scheme");const i=!!(null==n?void 0:n.disableWarnings),s=kt(t),{host:o,port:a}=function(e){const t=kt(e),n=/(\/\/)?([^?#/]+)/.exec(e.substr(t.length));if(!n)return{host:"",port:null};const r=n[2].split("@").pop()||"",i=/^(\[[^\]]+\])(:|$)/.exec(r);if(i){const e=i[1];return{host:e,port:St(r.substr(e.length+1))}}{const[e,t]=r.split(":");return{host:e,port:St(t)}}}(t),c=null===a?"":`:${a}`;r.config.emulator={url:`${s}//${o}${c}/`},r.settings.appVerificationDisabledForTesting=!0,r.emulatorConfig=Object.freeze({host:o,port:a,protocol:s.replace(":",""),options:Object.freeze({disableWarnings:i})}),i||function(){function e(){const e=document.createElement("p"),t=e.style;e.innerText="Running in emulator mode. Do not use with production credentials.",t.position="fixed",t.width="100%",t.backgroundColor="#ffffff",t.border=".1em solid #000000",t.color="#b50000",t.bottom="0px",t.left="0px",t.margin="0px",t.zIndex="10000",t.textAlign="center",e.classList.add("firebase-emulator-warning"),document.body.appendChild(e)}"undefined"!=typeof console&&"function"==typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),"undefined"!=typeof window&&"undefined"!=typeof document&&("loading"===document.readyState?window.addEventListener("DOMContentLoaded",e):e())}()}(n,`http://${s}`),n}var Zn;Zn="Browser",oe(new I("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),r=e.getProvider("heartbeat"),{apiKey:i,authDomain:s}=n.options;return((e,n)=>{De(i&&!i.includes(":"),"invalid-api-key",{appName:e.name}),De(!(null==s?void 0:s.includes(":")),"argument-error",{appName:e.name});const r={apiKey:i,authDomain:s,clientPlatform:Zn,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:Tt(Zn)},o=new It(e,n,r);return function(e,t){const n=(null==t?void 0:t.persistence)||[],r=(Array.isArray(n)?n:[n]).map(Pe);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(r,null==t?void 0:t.popupRedirectResolver)}(o,t),o})(n,r)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),oe(new I("auth-internal",(e=>{return t=_t(e.getProvider("auth").getImmediate()),new Qn(t);var t}),"PRIVATE").setInstantiationMode("EXPLICIT")),fe(Kn,Gn,void 0),fe(Kn,Gn,"esm2017");var er,tr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},nr={},rr=rr||{},ir=tr||self;function sr(){}function or(e){var t=typeof e;return"array"==(t="object"!=t?t:e?Array.isArray(e)?"array":t:"null")||"object"==t&&"number"==typeof e.length}function ar(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var cr="closure_uid_"+(1e9*Math.random()>>>0),ur=0;function lr(e,t,n){return e.call.apply(e.bind,arguments)}function hr(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function dr(e,t,n){return(dr=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?lr:hr).apply(null,arguments)}function fr(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}function pr(e,t){function n(){}n.prototype=t.prototype,e.X=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.Wb=function(e,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return t.prototype[n].apply(e,i)}}function gr(){this.s=this.s,this.o=this.o}var mr={};gr.prototype.s=!1,gr.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var e=function(e){return Object.prototype.hasOwnProperty.call(e,cr)&&e[cr]||(e[cr]=++ur)}(this);delete mr[e]}},gr.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const yr=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(let n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1};function vr(e){const t=e.length;if(0<t){const n=Array(t);for(let r=0;r<t;r++)n[r]=e[r];return n}return[]}function wr(e,t){for(let t=1;t<arguments.length;t++){const n=arguments[t];if(or(n)){const t=e.length||0,r=n.length||0;e.length=t+r;for(let i=0;i<r;i++)e[t+i]=n[i]}else e.push(n)}}function br(e,t){this.type=e,this.g=this.target=t,this.defaultPrevented=!1}br.prototype.h=function(){this.defaultPrevented=!0};var Tr=function(){if(!ir.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{ir.addEventListener("test",sr,t),ir.removeEventListener("test",sr,t)}catch(e){}return e}();function Er(e){return/^[\s\xa0]*$/.test(e)}var Ir=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function _r(e,t){return e<t?-1:e>t?1:0}function Cr(){var e=ir.navigator;return e&&(e=e.userAgent)?e:""}function kr(e){return-1!=Cr().indexOf(e)}function Sr(e){return Sr[" "](e),e}Sr[" "]=sr;var Ar,xr,Nr=kr("Opera"),Dr=kr("Trident")||kr("MSIE"),Rr=kr("Edge"),Or=Rr||Dr,Lr=kr("Gecko")&&!(-1!=Cr().toLowerCase().indexOf("webkit")&&!kr("Edge"))&&!(kr("Trident")||kr("MSIE"))&&!kr("Edge"),Pr=-1!=Cr().toLowerCase().indexOf("webkit")&&!kr("Edge");function Mr(){var e=ir.document;return e?e.documentMode:void 0}e:{var Ur="",Fr=(xr=Cr(),Lr?/rv:([^\);]+)(\)|;)/.exec(xr):Rr?/Edge\/([\d\.]+)/.exec(xr):Dr?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(xr):Pr?/WebKit\/(\S+)/.exec(xr):Nr?/(?:Version)[ \/]?(\S+)/.exec(xr):void 0);if(Fr&&(Ur=Fr?Fr[1]:""),Dr){var Vr=Mr();if(null!=Vr&&Vr>parseFloat(Ur)){Ar=String(Vr);break e}}Ar=Ur}var jr,qr={};function Br(){return function(e){var t=qr;return Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){let e=0;const t=Ir(String(Ar)).split("."),n=Ir("9").split("."),r=Math.max(t.length,n.length);for(let o=0;0==e&&o<r;o++){var i=t[o]||"",s=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==i[0].length&&0==s[0].length)break;e=_r(0==i[1].length?0:parseInt(i[1],10),0==s[1].length?0:parseInt(s[1],10))||_r(0==i[2].length,0==s[2].length)||_r(i[2],s[2]),i=i[3],s=s[3]}while(0==e)}return 0<=e}()}()}ir.document&&Dr?jr=Mr()||parseInt(Ar,10)||void 0:jr=void 0;var Hr=jr;function $r(e,t){if(br.call(this,e?e.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.g=t,t=e.relatedTarget){if(Lr){e:{try{Sr(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:zr[e.pointerType]||"",this.state=e.state,this.i=e,e.defaultPrevented&&$r.X.h.call(this)}}pr($r,br);var zr={2:"touch",3:"pen",4:"mouse"};$r.prototype.h=function(){$r.X.h.call(this);var e=this.i;e.preventDefault?e.preventDefault():e.returnValue=!1};var Wr="closure_listenable_"+(1e6*Math.random()|0),Kr=0;function Gr(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.ha=i,this.key=++Kr,this.ba=this.ea=!1}function Qr(e){e.ba=!0,e.listener=null,e.proxy=null,e.src=null,e.ha=null}function Xr(e,t,n){for(const r in e)t.call(n,e[r],r,e)}function Yr(e){const t={};for(const n in e)t[n]=e[n];return t}const Jr="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Zr(e,t){let n,r;for(let t=1;t<arguments.length;t++){for(n in r=arguments[t],r)e[n]=r[n];for(let t=0;t<Jr.length;t++)n=Jr[t],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function ei(e){this.src=e,this.g={},this.h=0}function ti(e,t){var n=t.type;if(n in e.g){var r,i=e.g[n],s=yr(i,t);(r=0<=s)&&Array.prototype.splice.call(i,s,1),r&&(Qr(t),0==e.g[n].length&&(delete e.g[n],e.h--))}}function ni(e,t,n,r){for(var i=0;i<e.length;++i){var s=e[i];if(!s.ba&&s.listener==t&&s.capture==!!n&&s.ha==r)return i}return-1}ei.prototype.add=function(e,t,n,r,i){var s=e.toString();(e=this.g[s])||(e=this.g[s]=[],this.h++);var o=ni(e,t,r,i);return-1<o?(t=e[o],n||(t.ea=!1)):((t=new Gr(t,this.src,s,!!r,i)).ea=n,e.push(t)),t};var ri="closure_lm_"+(1e6*Math.random()|0),ii={};function si(e,t,n,r,i){if(r&&r.once)return ai(e,t,n,r,i);if(Array.isArray(t)){for(var s=0;s<t.length;s++)si(e,t[s],n,r,i);return null}return n=pi(n),e&&e[Wr]?e.N(t,n,ar(r)?!!r.capture:!!r,i):oi(e,t,n,!1,r,i)}function oi(e,t,n,r,i,s){if(!t)throw Error("Invalid event type");var o=ar(i)?!!i.capture:!!i,a=di(e);if(a||(e[ri]=a=new ei(e)),(n=a.add(t,n,r,o,s)).proxy)return n;if(r=function(){const e=hi;return function t(n){return e.call(t.src,t.listener,n)}}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)Tr||(i=o),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(li(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}return n}function ai(e,t,n,r,i){if(Array.isArray(t)){for(var s=0;s<t.length;s++)ai(e,t[s],n,r,i);return null}return n=pi(n),e&&e[Wr]?e.O(t,n,ar(r)?!!r.capture:!!r,i):oi(e,t,n,!0,r,i)}function ci(e,t,n,r,i){if(Array.isArray(t))for(var s=0;s<t.length;s++)ci(e,t[s],n,r,i);else r=ar(r)?!!r.capture:!!r,n=pi(n),e&&e[Wr]?(e=e.i,(t=String(t).toString())in e.g&&-1<(n=ni(s=e.g[t],n,r,i))&&(Qr(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete e.g[t],e.h--))):e&&(e=di(e))&&(t=e.g[t.toString()],e=-1,t&&(e=ni(t,n,r,i)),(n=-1<e?t[e]:null)&&ui(n))}function ui(e){if("number"!=typeof e&&e&&!e.ba){var t=e.src;if(t&&t[Wr])ti(t.i,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(li(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=di(t))?(ti(n,e),0==n.h&&(n.src=null,t[ri]=null)):Qr(e)}}}function li(e){return e in ii?ii[e]:ii[e]="on"+e}function hi(e,t){if(e.ba)e=!0;else{t=new $r(t,this);var n=e.listener,r=e.ha||e.src;e.ea&&ui(e),e=n.call(r,t)}return e}function di(e){return(e=e[ri])instanceof ei?e:null}var fi="__closure_events_fn_"+(1e9*Math.random()>>>0);function pi(e){return"function"==typeof e?e:(e[fi]||(e[fi]=function(t){return e.handleEvent(t)}),e[fi])}function gi(){gr.call(this),this.i=new ei(this),this.P=this,this.I=null}function mi(e,t){var n,r=e.I;if(r)for(n=[];r;r=r.I)n.push(r);if(e=e.P,r=t.type||t,"string"==typeof t)t=new br(t,e);else if(t instanceof br)t.target=t.target||e;else{var i=t;Zr(t=new br(r,e),i)}if(i=!0,n)for(var s=n.length-1;0<=s;s--){var o=t.g=n[s];i=yi(o,r,!0,t)&&i}if(i=yi(o=t.g=e,r,!0,t)&&i,i=yi(o,r,!1,t)&&i,n)for(s=0;s<n.length;s++)i=yi(o=t.g=n[s],r,!1,t)&&i}function yi(e,t,n,r){if(!(t=e.i.g[String(t)]))return!0;t=t.concat();for(var i=!0,s=0;s<t.length;++s){var o=t[s];if(o&&!o.ba&&o.capture==n){var a=o.listener,c=o.ha||o.src;o.ea&&ti(e.i,o),i=!1!==a.call(c,r)&&i}}return i&&!r.defaultPrevented}pr(gi,gr),gi.prototype[Wr]=!0,gi.prototype.removeEventListener=function(e,t,n,r){ci(this,e,t,n,r)},gi.prototype.M=function(){if(gi.X.M.call(this),this.i){var e,t=this.i;for(e in t.g){for(var n=t.g[e],r=0;r<n.length;r++)Qr(n[r]);delete t.g[e],t.h--}}this.I=null},gi.prototype.N=function(e,t,n,r){return this.i.add(String(e),t,!1,n,r)},gi.prototype.O=function(e,t,n,r){return this.i.add(String(e),t,!0,n,r)};var vi=ir.JSON.stringify;function wi(){var e=ki;let t=null;return e.g&&(t=e.g,e.g=e.g.next,e.g||(e.h=null),t.next=null),t}var bi,Ti=new class{constructor(e,t){this.i=e,this.j=t,this.h=0,this.g=null}get(){let e;return 0<this.h?(this.h--,e=this.g,this.g=e.next,e.next=null):e=this.i(),e}}((()=>new Ei),(e=>e.reset()));class Ei{constructor(){this.next=this.g=this.h=null}set(e,t){this.h=e,this.g=t,this.next=null}reset(){this.next=this.g=this.h=null}}function Ii(e){ir.setTimeout((()=>{throw e}),0)}function _i(e,t){bi||function(){var e=ir.Promise.resolve(void 0);bi=function(){e.then(Si)}}(),Ci||(bi(),Ci=!0),ki.add(e,t)}var Ci=!1,ki=new class{constructor(){this.h=this.g=null}add(e,t){const n=Ti.get();n.set(e,t),this.h?this.h.next=n:this.g=n,this.h=n}};function Si(){for(var e;e=wi();){try{e.h.call(e.g)}catch(e){Ii(e)}var t=Ti;t.j(e),100>t.h&&(t.h++,e.next=t.g,t.g=e)}Ci=!1}function Ai(e,t){gi.call(this),this.h=e||1,this.g=t||ir,this.j=dr(this.lb,this),this.l=Date.now()}function xi(e){e.ca=!1,e.R&&(e.g.clearTimeout(e.R),e.R=null)}function Ni(e,t,n){if("function"==typeof e)n&&(e=dr(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=dr(e.handleEvent,e)}return 2147483647<Number(t)?-1:ir.setTimeout(e,t||0)}function Di(e){e.g=Ni((()=>{e.g=null,e.i&&(e.i=!1,Di(e))}),e.j);const t=e.h;e.h=null,e.m.apply(null,t)}pr(Ai,gi),(er=Ai.prototype).ca=!1,er.R=null,er.lb=function(){if(this.ca){var e=Date.now()-this.l;0<e&&e<.8*this.h?this.R=this.g.setTimeout(this.j,this.h-e):(this.R&&(this.g.clearTimeout(this.R),this.R=null),mi(this,"tick"),this.ca&&(xi(this),this.start()))}},er.start=function(){this.ca=!0,this.R||(this.R=this.g.setTimeout(this.j,this.h),this.l=Date.now())},er.M=function(){Ai.X.M.call(this),xi(this),delete this.g};class Ri extends gr{constructor(e,t){super(),this.m=e,this.j=t,this.h=null,this.i=!1,this.g=null}l(e){this.h=arguments,this.g?this.i=!0:Di(this)}M(){super.M(),this.g&&(ir.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function Oi(e){gr.call(this),this.h=e,this.g={}}pr(Oi,gr);var Li=[];function Pi(e,t,n,r){Array.isArray(n)||(n&&(Li[0]=n.toString()),n=Li);for(var i=0;i<n.length;i++){var s=si(t,n[i],r||e.handleEvent,!1,e.h||e);if(!s)break;e.g[s.key]=s}}function Mi(e){Xr(e.g,(function(e,t){this.g.hasOwnProperty(t)&&ui(e)}),e),e.g={}}function Ui(){this.g=!0}function Fi(e,t,n,r){e.info((function(){return"XMLHTTP TEXT ("+t+"): "+function(e,t){if(!e.g)return t;if(!t)return null;try{var n=JSON.parse(t);if(n)for(e=0;e<n.length;e++)if(Array.isArray(n[e])){var r=n[e];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var s=i[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<i.length;o++)i[o]=""}}}return vi(n)}catch(e){return t}}(e,n)+(r?" "+r:"")}))}Oi.prototype.M=function(){Oi.X.M.call(this),Mi(this)},Oi.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Ui.prototype.Aa=function(){this.g=!1},Ui.prototype.info=function(){};var Vi={},ji=null;function qi(){return ji=ji||new gi}function Bi(e){br.call(this,Vi.Pa,e)}function Hi(e){const t=qi();mi(t,new Bi(t,e))}function $i(e,t){br.call(this,Vi.STAT_EVENT,e),this.stat=t}function zi(e){const t=qi();mi(t,new $i(t,e))}function Wi(e,t){br.call(this,Vi.Qa,e),this.size=t}function Ki(e,t){if("function"!=typeof e)throw Error("Fn must not be null and must be a function");return ir.setTimeout((function(){e()}),t)}Vi.Pa="serverreachability",pr(Bi,br),Vi.STAT_EVENT="statevent",pr($i,br),Vi.Qa="timingevent",pr(Wi,br);var Gi={NO_ERROR:0,mb:1,zb:2,yb:3,tb:4,xb:5,Ab:6,Ma:7,TIMEOUT:8,Db:9},Qi={rb:"complete",Nb:"success",Na:"error",Ma:"abort",Fb:"ready",Gb:"readystatechange",TIMEOUT:"timeout",Bb:"incrementaldata",Eb:"progress",ub:"downloadprogress",Vb:"uploadprogress"};function Xi(){}function Yi(e){return e.h||(e.h=e.i())}function Ji(){}Xi.prototype.h=null;var Zi,es={OPEN:"a",qb:"b",Na:"c",Cb:"d"};function ts(){br.call(this,"d")}function ns(){br.call(this,"c")}function rs(){}function is(e,t,n,r){this.l=e,this.j=t,this.m=n,this.U=r||1,this.S=new Oi(this),this.O=os,e=Or?125:void 0,this.T=new Ai(e),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.V=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.Y=-1,this.I=!1,this.N=0,this.L=null,this.$=this.J=this.Z=this.P=!1,this.h=new ss}function ss(){this.i=null,this.g="",this.h=!1}pr(ts,br),pr(ns,br),pr(rs,Xi),rs.prototype.g=function(){return new XMLHttpRequest},rs.prototype.i=function(){return{}},Zi=new rs;var os=45e3,as={},cs={};function us(e,t,n){e.K=1,e.v=As(Is(t)),e.s=n,e.P=!0,ls(e,null)}function ls(e,t){e.F=Date.now(),ps(e),e.A=Is(e.v);var n=e.A,r=e.U;Array.isArray(r)||(r=[String(r)]),qs(n.i,"t",r),e.C=0,n=e.l.H,e.h=new ss,e.g=qo(e.l,n?t:null,!e.s),0<e.N&&(e.L=new Ri(dr(e.La,e,e.g),e.N)),Pi(e.S,e.g,"readystatechange",e.ib),t=e.H?Yr(e.H):{},e.s?(e.u||(e.u="POST"),t["Content-Type"]="application/x-www-form-urlencoded",e.g.da(e.A,e.u,e.s,t)):(e.u="GET",e.g.da(e.A,e.u,null,t)),Hi(1),function(e,t,n,r,i,s){e.info((function(){if(e.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+t+"\n"+n+"\n"+o}))}(e.j,e.u,e.A,e.m,e.U,e.s)}function hs(e){return!!e.g&&"GET"==e.u&&2!=e.K&&e.l.Da}function ds(e,t,n){let r,i=!0;for(;!e.I&&e.C<n.length;){if(r=fs(e,n),r==cs){4==t&&(e.o=4,zi(14),i=!1),Fi(e.j,e.m,null,"[Incomplete Response]");break}if(r==as){e.o=4,zi(15),Fi(e.j,e.m,n,"[Invalid Chunk]"),i=!1;break}Fi(e.j,e.m,r,null),ws(e,r)}hs(e)&&r!=cs&&r!=as&&(e.h.g="",e.C=0),4!=t||0!=n.length||e.h.h||(e.o=1,zi(16),i=!1),e.i=e.i&&i,i?0<n.length&&!e.$&&(e.$=!0,(t=e.l).g==e&&t.$&&!t.K&&(t.j.info("Great, no buffering proxy detected. Bytes received: "+n.length),Oo(t),t.K=!0,zi(11))):(Fi(e.j,e.m,n,"[Invalid Chunked Response]"),vs(e),ys(e))}function fs(e,t){var n=e.C,r=t.indexOf("\n",n);return-1==r?cs:(n=Number(t.substring(n,r)),isNaN(n)?as:(r+=1)+n>t.length?cs:(t=t.substr(r,n),e.C=r+n,t))}function ps(e){e.V=Date.now()+e.O,gs(e,e.O)}function gs(e,t){if(null!=e.B)throw Error("WatchDog timer not null");e.B=Ki(dr(e.gb,e),t)}function ms(e){e.B&&(ir.clearTimeout(e.B),e.B=null)}function ys(e){0==e.l.G||e.I||Mo(e.l,e)}function vs(e){ms(e);var t=e.L;t&&"function"==typeof t.na&&t.na(),e.L=null,xi(e.T),Mi(e.S),e.g&&(t=e.g,e.g=null,t.abort(),t.na())}function ws(e,t){try{var n=e.l;if(0!=n.G&&(n.g==e||Ks(n.h,e)))if(!e.J&&Ks(n.h,e)&&3==n.G){try{var r=n.Fa.g.parse(t)}catch(e){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){e:if(!n.u){if(n.g){if(!(n.g.F+3e3<e.F))break e;Po(n),Co(n)}Ro(n),zi(18)}}else n.Ba=i[1],0<n.Ba-n.T&&37500>i[2]&&n.L&&0==n.A&&!n.v&&(n.v=Ki(dr(n.cb,n),6e3));if(1>=Ws(n.h)&&n.ja){try{n.ja()}catch(e){}n.ja=void 0}}else Fo(n,11)}else if((e.J||n.g==e)&&Po(n),!Er(t))for(i=n.Fa.g.parse(t),t=0;t<i.length;t++){let u=i[t];if(n.T=u[0],u=u[1],2==n.G)if("c"==u[0]){n.I=u[1],n.ka=u[2];const t=u[3];null!=t&&(n.ma=t,n.j.info("VER="+n.ma));const i=u[4];null!=i&&(n.Ca=i,n.j.info("SVER="+n.Ca));const l=u[5];null!=l&&"number"==typeof l&&0<l&&(r=1.5*l,n.J=r,n.j.info("backChannelRequestTimeoutMs_="+r)),r=n;const h=e.g;if(h){const e=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(e){var s=r.h;s.g||-1==e.indexOf("spdy")&&-1==e.indexOf("quic")&&-1==e.indexOf("h2")||(s.j=s.l,s.g=new Set,s.h&&(Gs(s,s.h),s.h=null))}if(r.D){const e=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;e&&(r.za=e,Ss(r.F,r.D,e))}}n.G=3,n.l&&n.l.xa(),n.$&&(n.P=Date.now()-e.F,n.j.info("Handshake RTT: "+n.P+"ms"));var o=e;if((r=n).sa=jo(r,r.H?r.ka:null,r.V),o.J){Qs(r.h,o);var a=o,c=r.J;c&&a.setTimeout(c),a.B&&(ms(a),ps(a)),r.g=o}else Do(r);0<n.i.length&&So(n)}else"stop"!=u[0]&&"close"!=u[0]||Fo(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?Fo(n,7):_o(n):"noop"!=u[0]&&n.l&&n.l.wa(u),n.A=0)}Hi(4)}catch(e){}}function bs(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(or(e)||"string"==typeof e)Array.prototype.forEach.call(e,t,void 0);else for(var n=function(e){if(e.oa&&"function"==typeof e.oa)return e.oa();if(!e.W||"function"!=typeof e.W){if("undefined"!=typeof Map&&e instanceof Map)return Array.from(e.keys());if(!("undefined"!=typeof Set&&e instanceof Set)){if(or(e)||"string"==typeof e){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}t=[],n=0;for(const r in e)t[n++]=r;return t}}}(e),r=function(e){if(e.W&&"function"==typeof e.W)return e.W();if("undefined"!=typeof Map&&e instanceof Map||"undefined"!=typeof Set&&e instanceof Set)return Array.from(e.values());if("string"==typeof e)return e.split("");if(or(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}(e),i=r.length,s=0;s<i;s++)t.call(void 0,r[s],n&&n[s],e)}(er=is.prototype).setTimeout=function(e){this.O=e},er.ib=function(e){e=e.target;const t=this.L;t&&3==vo(e)?t.l():this.La(e)},er.La=function(e){try{if(e==this.g)e:{const l=vo(this.g);var t=this.g.Ea();const h=this.g.aa();if(!(3>l)&&(3!=l||Or||this.g&&(this.h.h||this.g.fa()||wo(this.g)))){this.I||4!=l||7==t||Hi(8==t||0>=h?3:2),ms(this);var n=this.g.aa();this.Y=n;t:if(hs(this)){var r=wo(this.g);e="";var i=r.length,s=4==vo(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){vs(this),ys(this);var o="";break t}this.h.i=new ir.TextDecoder}for(t=0;t<i;t++)this.h.h=!0,e+=this.h.i.decode(r[t],{stream:s&&t==i-1});r.splice(0,i),this.h.g+=e,this.C=0,o=this.h.g}else o=this.g.fa();if(this.i=200==n,function(e,t,n,r,i,s,o){e.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+t+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.U,l,n),this.i){if(this.Z&&!this.J){t:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Er(a)){var u=a;break t}}u=null}if(!(n=u)){this.i=!1,this.o=3,zi(12),vs(this),ys(this);break e}Fi(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,ws(this,n)}this.P?(ds(this,l,o),Or&&this.i&&3==l&&(Pi(this.S,this.T,"tick",this.hb),this.T.start())):(Fi(this.j,this.m,o,null),ws(this,o)),4==l&&vs(this),this.i&&!this.I&&(4==l?Mo(this.l,this):(this.i=!1,ps(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,zi(12)):(this.o=0,zi(13)),vs(this),ys(this)}}}catch(e){}},er.hb=function(){if(this.g){var e=vo(this.g),t=this.g.fa();this.C<t.length&&(ms(this),ds(this,e,t),this.i&&4!=e&&ps(this))}},er.cancel=function(){this.I=!0,vs(this)},er.gb=function(){this.B=null;const e=Date.now();0<=e-this.V?(function(e,t){e.info((function(){return"TIMEOUT: "+t}))}(this.j,this.A),2!=this.K&&(Hi(3),zi(17)),vs(this),this.o=2,ys(this)):gs(this,this.V-e)};var Ts=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");function Es(e,t){if(this.g=this.s=this.j="",this.m=null,this.o=this.l="",this.h=!1,e instanceof Es){this.h=void 0!==t?t:e.h,_s(this,e.j),this.s=e.s,this.g=e.g,Cs(this,e.m),this.l=e.l,t=e.i;var n=new Us;n.i=t.i,t.g&&(n.g=new Map(t.g),n.h=t.h),ks(this,n),this.o=e.o}else e&&(n=String(e).match(Ts))?(this.h=!!t,_s(this,n[1]||"",!0),this.s=xs(n[2]||""),this.g=xs(n[3]||"",!0),Cs(this,n[4]),this.l=xs(n[5]||"",!0),ks(this,n[6]||"",!0),this.o=xs(n[7]||"")):(this.h=!!t,this.i=new Us(null,this.h))}function Is(e){return new Es(e)}function _s(e,t,n){e.j=n?xs(t,!0):t,e.j&&(e.j=e.j.replace(/:$/,""))}function Cs(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.m=t}else e.m=null}function ks(e,t,n){t instanceof Us?(e.i=t,function(e,t){t&&!e.j&&(Fs(e),e.i=null,e.g.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(Vs(this,t),qs(this,n,e))}),e)),e.j=t}(e.i,e.h)):(n||(t=Ns(t,Ps)),e.i=new Us(t,e.h))}function Ss(e,t,n){e.i.set(t,n)}function As(e){return Ss(e,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),e}function xs(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Ns(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,Ds),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function Ds(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Es.prototype.toString=function(){var e=[],t=this.j;t&&e.push(Ns(t,Rs,!0),":");var n=this.g;return(n||"file"==t)&&(e.push("//"),(t=this.s)&&e.push(Ns(t,Rs,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&e.push(":",String(n))),(n=this.l)&&(this.g&&"/"!=n.charAt(0)&&e.push("/"),e.push(Ns(n,"/"==n.charAt(0)?Ls:Os,!0))),(n=this.i.toString())&&e.push("?",n),(n=this.o)&&e.push("#",Ns(n,Ms)),e.join("")};var Rs=/[#\/\?@]/g,Os=/[#\?:]/g,Ls=/[#\?]/g,Ps=/[#\?@]/g,Ms=/#/g;function Us(e,t){this.h=this.g=null,this.i=e||null,this.j=!!t}function Fs(e){e.g||(e.g=new Map,e.h=0,e.i&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var s=e[n].substring(0,r);i=e[n].substring(r+1)}else s=e[n];t(s,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.i,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function Vs(e,t){Fs(e),t=Bs(e,t),e.g.has(t)&&(e.i=null,e.h-=e.g.get(t).length,e.g.delete(t))}function js(e,t){return Fs(e),t=Bs(e,t),e.g.has(t)}function qs(e,t,n){Vs(e,t),0<n.length&&(e.i=null,e.g.set(Bs(e,t),vr(n)),e.h+=n.length)}function Bs(e,t){return t=String(t),e.j&&(t=t.toLowerCase()),t}function Hs(e){this.l=e||$s,e=ir.PerformanceNavigationTiming?0<(e=ir.performance.getEntriesByType("navigation")).length&&("hq"==e[0].nextHopProtocol||"h2"==e[0].nextHopProtocol):!!(ir.g&&ir.g.Ga&&ir.g.Ga()&&ir.g.Ga().$b),this.j=e?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(er=Us.prototype).add=function(e,t){Fs(this),this.i=null,e=Bs(this,e);var n=this.g.get(e);return n||this.g.set(e,n=[]),n.push(t),this.h+=1,this},er.forEach=function(e,t){Fs(this),this.g.forEach((function(n,r){n.forEach((function(n){e.call(t,n,r,this)}),this)}),this)},er.oa=function(){Fs(this);const e=Array.from(this.g.values()),t=Array.from(this.g.keys()),n=[];for(let r=0;r<t.length;r++){const i=e[r];for(let e=0;e<i.length;e++)n.push(t[r])}return n},er.W=function(e){Fs(this);let t=[];if("string"==typeof e)js(this,e)&&(t=t.concat(this.g.get(Bs(this,e))));else{e=Array.from(this.g.values());for(let n=0;n<e.length;n++)t=t.concat(e[n])}return t},er.set=function(e,t){return Fs(this),this.i=null,js(this,e=Bs(this,e))&&(this.h-=this.g.get(e).length),this.g.set(e,[t]),this.h+=1,this},er.get=function(e,t){return e&&0<(e=this.W(e)).length?String(e[0]):t},er.toString=function(){if(this.i)return this.i;if(!this.g)return"";const e=[],t=Array.from(this.g.keys());for(var n=0;n<t.length;n++){var r=t[n];const s=encodeURIComponent(String(r)),o=this.W(r);for(r=0;r<o.length;r++){var i=s;""!==o[r]&&(i+="="+encodeURIComponent(String(o[r]))),e.push(i)}}return this.i=e.join("&")};var $s=10;function zs(e){return!!e.h||!!e.g&&e.g.size>=e.j}function Ws(e){return e.h?1:e.g?e.g.size:0}function Ks(e,t){return e.h?e.h==t:!!e.g&&e.g.has(t)}function Gs(e,t){e.g?e.g.add(t):e.h=t}function Qs(e,t){e.h&&e.h==t?e.h=null:e.g&&e.g.has(t)&&e.g.delete(t)}function Xs(e){if(null!=e.h)return e.i.concat(e.h.D);if(null!=e.g&&0!==e.g.size){let t=e.i;for(const n of e.g.values())t=t.concat(n.D);return t}return vr(e.i)}function Ys(){}function Js(){this.g=new Ys}function Zs(e,t,n){const r=n||"";try{bs(e,(function(e,n){let i=e;ar(e)&&(i=vi(e)),t.push(r+n+"="+encodeURIComponent(i))}))}catch(e){throw t.push(r+"type="+encodeURIComponent("_badmap")),e}}function eo(e,t,n,r,i){try{t.onload=null,t.onerror=null,t.onabort=null,t.ontimeout=null,i(r)}catch(e){}}function to(e){this.l=e.ac||null,this.j=e.jb||!1}function no(e,t){gi.call(this),this.D=e,this.u=t,this.m=void 0,this.readyState=ro,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}Hs.prototype.cancel=function(){if(this.i=Xs(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const e of this.g.values())e.cancel();this.g.clear()}},Ys.prototype.stringify=function(e){return ir.JSON.stringify(e,void 0)},Ys.prototype.parse=function(e){return ir.JSON.parse(e,void 0)},pr(to,Xi),to.prototype.g=function(){return new no(this.l,this.j)},to.prototype.i=function(e){return function(){return e}}({}),pr(no,gi);var ro=0;function io(e){e.j.read().then(e.Ta.bind(e)).catch(e.ga.bind(e))}function so(e){e.readyState=4,e.l=null,e.j=null,e.A=null,oo(e)}function oo(e){e.onreadystatechange&&e.onreadystatechange.call(e)}(er=no.prototype).open=function(e,t){if(this.readyState!=ro)throw this.abort(),Error("Error reopening a connection");this.C=e,this.B=t,this.readyState=1,oo(this)},er.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const t={headers:this.v,method:this.C,credentials:this.m,cache:void 0};e&&(t.body=e),(this.D||ir).fetch(new Request(this.B,t)).then(this.Wa.bind(this),this.ga.bind(this))},er.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted.").catch((()=>{})),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,so(this)),this.readyState=ro},er.Wa=function(e){if(this.g&&(this.l=e,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=e.headers,this.readyState=2,oo(this)),this.g&&(this.readyState=3,oo(this),this.g)))if("arraybuffer"===this.responseType)e.arrayBuffer().then(this.Ua.bind(this),this.ga.bind(this));else if(void 0!==ir.ReadableStream&&"body"in e){if(this.j=e.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;io(this)}else e.text().then(this.Va.bind(this),this.ga.bind(this))},er.Ta=function(e){if(this.g){if(this.u&&e.value)this.response.push(e.value);else if(!this.u){var t=e.value?e.value:new Uint8Array(0);(t=this.A.decode(t,{stream:!e.done}))&&(this.response=this.responseText+=t)}e.done?so(this):oo(this),3==this.readyState&&io(this)}},er.Va=function(e){this.g&&(this.response=this.responseText=e,so(this))},er.Ua=function(e){this.g&&(this.response=e,so(this))},er.ga=function(){this.g&&so(this)},er.setRequestHeader=function(e,t){this.v.append(e,t)},er.getResponseHeader=function(e){return this.h&&this.h.get(e.toLowerCase())||""},er.getAllResponseHeaders=function(){if(!this.h)return"";const e=[],t=this.h.entries();for(var n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(no.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(e){this.m=e?"include":"same-origin"}});var ao=ir.JSON.parse;function co(e){gi.call(this),this.headers=new Map,this.u=e||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=uo,this.K=this.L=!1}pr(co,gi);var uo="",lo=/^https?$/i,ho=["POST","PUT"];function fo(e,t){e.h=!1,e.g&&(e.l=!0,e.g.abort(),e.l=!1),e.j=t,e.m=5,po(e),mo(e)}function po(e){e.D||(e.D=!0,mi(e,"complete"),mi(e,"error"))}function go(e){if(e.h&&void 0!==rr&&(!e.C[1]||4!=vo(e)||2!=e.aa()))if(e.v&&4==vo(e))Ni(e.Ha,0,e);else if(mi(e,"readystatechange"),4==vo(e)){e.h=!1;try{const a=e.aa();e:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var t=!0;break e;default:t=!1}var n;if(!(n=t)){var r;if(r=0===a){var i=String(e.H).match(Ts)[1]||null;if(!i&&ir.self&&ir.self.location){var s=ir.self.location.protocol;i=s.substr(0,s.length-1)}r=!lo.test(i?i.toLowerCase():"")}n=r}if(n)mi(e,"complete"),mi(e,"success");else{e.m=6;try{var o=2<vo(e)?e.g.statusText:""}catch(e){o=""}e.j=o+" ["+e.aa()+"]",po(e)}}finally{mo(e)}}}function mo(e,t){if(e.g){yo(e);const n=e.g,r=e.C[0]?sr:null;e.g=null,e.C=null,t||mi(e,"ready");try{n.onreadystatechange=r}catch(e){}}}function yo(e){e.g&&e.K&&(e.g.ontimeout=null),e.A&&(ir.clearTimeout(e.A),e.A=null)}function vo(e){return e.g?e.g.readyState:0}function wo(e){try{if(!e.g)return null;if("response"in e.g)return e.g.response;switch(e.J){case uo:case"text":return e.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in e.g)return e.g.mozResponseArrayBuffer}return null}catch(e){return null}}function bo(e){let t="";return Xr(e,(function(e,n){t+=n,t+=":",t+=e,t+="\r\n"})),t}function To(e,t,n){e:{for(r in n){var r=!1;break e}r=!0}r||(n=bo(n),"string"==typeof e?null!=n&&encodeURIComponent(String(n)):Ss(e,t,n))}function Eo(e,t,n){return n&&n.internalChannelParams&&n.internalChannelParams[e]||t}function Io(e){this.Ca=0,this.i=[],this.j=new Ui,this.ka=this.sa=this.F=this.V=this.g=this.za=this.D=this.ia=this.o=this.S=this.s=null,this.ab=this.U=0,this.Za=Eo("failFast",!1,e),this.L=this.v=this.u=this.m=this.l=null,this.Y=!0,this.pa=this.Ba=this.T=-1,this.Z=this.A=this.C=0,this.Xa=Eo("baseRetryDelayMs",5e3,e),this.bb=Eo("retryDelaySeedMs",1e4,e),this.$a=Eo("forwardChannelMaxRetries",2,e),this.ta=Eo("forwardChannelRequestTimeoutMs",2e4,e),this.ra=e&&e.xmlHttpFactory||void 0,this.Da=e&&e.Zb||!1,this.J=void 0,this.H=e&&e.supportsCrossDomainXhr||!1,this.I="",this.h=new Hs(e&&e.concurrentRequestLimit),this.Fa=new Js,this.O=e&&e.fastHandshake||!1,this.N=e&&e.encodeInitMessageHeaders||!1,this.O&&this.N&&(this.N=!1),this.Ya=e&&e.Xb||!1,e&&e.Aa&&this.j.Aa(),e&&e.forceLongPolling&&(this.Y=!1),this.$=!this.O&&this.Y&&e&&e.detectBufferingProxy||!1,this.ja=void 0,this.P=0,this.K=!1,this.la=this.B=null}function _o(e){if(ko(e),3==e.G){var t=e.U++,n=Is(e.F);Ss(n,"SID",e.I),Ss(n,"RID",t),Ss(n,"TYPE","terminate"),xo(e,n),(t=new is(e,e.j,t,void 0)).K=2,t.v=As(Is(n)),n=!1,ir.navigator&&ir.navigator.sendBeacon&&(n=ir.navigator.sendBeacon(t.v.toString(),"")),!n&&ir.Image&&((new Image).src=t.v,n=!0),n||(t.g=qo(t.l,null),t.g.da(t.v)),t.F=Date.now(),ps(t)}Vo(e)}function Co(e){e.g&&(Oo(e),e.g.cancel(),e.g=null)}function ko(e){Co(e),e.u&&(ir.clearTimeout(e.u),e.u=null),Po(e),e.h.cancel(),e.m&&("number"==typeof e.m&&ir.clearTimeout(e.m),e.m=null)}function So(e){zs(e.h)||e.m||(e.m=!0,_i(e.Ja,e),e.C=0)}function Ao(e,t){var n;n=t?t.m:e.U++;const r=Is(e.F);Ss(r,"SID",e.I),Ss(r,"RID",n),Ss(r,"AID",e.T),xo(e,r),e.o&&e.s&&To(r,e.o,e.s),n=new is(e,e.j,n,e.C+1),null===e.o&&(n.H=e.s),t&&(e.i=t.D.concat(e.i)),t=No(e,n,1e3),n.setTimeout(Math.round(.5*e.ta)+Math.round(.5*e.ta*Math.random())),Gs(e.h,n),us(n,r,t)}function xo(e,t){e.ia&&Xr(e.ia,(function(e,n){Ss(t,n,e)})),e.l&&bs({},(function(e,n){Ss(t,n,e)}))}function No(e,t,n){n=Math.min(e.i.length,n);var r=e.l?dr(e.l.Ra,e.l,e):null;e:{var i=e.i;let t=-1;for(;;){const e=["count="+n];-1==t?0<n?(t=i[0].h,e.push("ofs="+t)):t=0:e.push("ofs="+t);let s=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=t,0>n)t=Math.max(0,i[o].h-100),s=!1;else try{Zs(a,e,"req"+n+"_")}catch(e){r&&r(a)}}if(s){r=e.join("&");break e}}}return e=e.i.splice(0,n),t.D=e,r}function Do(e){e.g||e.u||(e.Z=1,_i(e.Ia,e),e.A=0)}function Ro(e){return!(e.g||e.u||3<=e.A||(e.Z++,e.u=Ki(dr(e.Ia,e),Uo(e,e.A)),e.A++,0))}function Oo(e){null!=e.B&&(ir.clearTimeout(e.B),e.B=null)}function Lo(e){e.g=new is(e,e.j,"rpc",e.Z),null===e.o&&(e.g.H=e.s),e.g.N=0;var t=Is(e.sa);Ss(t,"RID","rpc"),Ss(t,"SID",e.I),Ss(t,"CI",e.L?"0":"1"),Ss(t,"AID",e.T),Ss(t,"TYPE","xmlhttp"),xo(e,t),e.o&&e.s&&To(t,e.o,e.s),e.J&&e.g.setTimeout(e.J);var n=e.g;e=e.ka,n.K=1,n.v=As(Is(t)),n.s=null,n.P=!0,ls(n,e)}function Po(e){null!=e.v&&(ir.clearTimeout(e.v),e.v=null)}function Mo(e,t){var n=null;if(e.g==t){Po(e),Oo(e),e.g=null;var r=2}else{if(!Ks(e.h,t))return;n=t.D,Qs(e.h,t),r=1}if(0!=e.G)if(e.pa=t.Y,t.i)if(1==r){n=t.s?t.s.length:0,t=Date.now()-t.F;var i=e.C;mi(r=qi(),new Wi(r,n,t,i)),So(e)}else Do(e);else if(3==(i=t.o)||0==i&&0<e.pa||!(1==r&&function(e,t){return!(Ws(e.h)>=e.h.j-(e.m?1:0)||(e.m?(e.i=t.D.concat(e.i),0):1==e.G||2==e.G||e.C>=(e.Za?0:e.$a)||(e.m=Ki(dr(e.Ja,e,t),Uo(e,e.C)),e.C++,0)))}(e,t)||2==r&&Ro(e)))switch(n&&0<n.length&&(t=e.h,t.i=t.i.concat(n)),i){case 1:Fo(e,5);break;case 4:Fo(e,10);break;case 3:Fo(e,6);break;default:Fo(e,2)}}function Uo(e,t){let n=e.Xa+Math.floor(Math.random()*e.bb);return e.l||(n*=2),n*t}function Fo(e,t){if(e.j.info("Error code "+t),2==t){var n=null;e.l&&(n=null);var r=dr(e.kb,e);n||(n=new Es("//www.google.com/images/cleardot.gif"),ir.location&&"http"==ir.location.protocol||_s(n,"https"),As(n)),function(e,t){const n=new Ui;if(ir.Image){const r=new Image;r.onload=fr(eo,n,r,"TestLoadImage: loaded",!0,t),r.onerror=fr(eo,n,r,"TestLoadImage: error",!1,t),r.onabort=fr(eo,n,r,"TestLoadImage: abort",!1,t),r.ontimeout=fr(eo,n,r,"TestLoadImage: timeout",!1,t),ir.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=e}else t(!1)}(n.toString(),r)}else zi(2);e.G=0,e.l&&e.l.va(t),Vo(e),ko(e)}function Vo(e){if(e.G=0,e.la=[],e.l){const t=Xs(e.h);0==t.length&&0==e.i.length||(wr(e.la,t),wr(e.la,e.i),e.h.i.length=0,vr(e.i),e.i.length=0),e.l.ua()}}function jo(e,t,n){var r=n instanceof Es?Is(n):new Es(n,void 0);if(""!=r.g)t&&(r.g=t+"."+r.g),Cs(r,r.m);else{var i=ir.location;r=i.protocol,t=t?t+"."+i.hostname:i.hostname,i=+i.port;var s=new Es(null,void 0);r&&_s(s,r),t&&(s.g=t),i&&Cs(s,i),n&&(s.l=n),r=s}return n=e.D,t=e.za,n&&t&&Ss(r,n,t),Ss(r,"VER",e.ma),xo(e,r),r}function qo(e,t,n){if(t&&!e.H)throw Error("Can't create secondary domain capable XhrIo object.");return(t=n&&e.Da&&!e.ra?new co(new to({jb:!0})):new co(e.ra)).Ka(e.H),t}function Bo(){}function Ho(){if(Dr&&!(10<=Number(Hr)))throw Error("Environmental error: no available transport.")}function $o(e,t){gi.call(this),this.g=new Io(t),this.l=e,this.h=t&&t.messageUrlParams||null,e=t&&t.messageHeaders||null,t&&t.clientProtocolHeaderRequired&&(e?e["X-Client-Protocol"]="webchannel":e={"X-Client-Protocol":"webchannel"}),this.g.s=e,e=t&&t.initMessageHeaders||null,t&&t.messageContentType&&(e?e["X-WebChannel-Content-Type"]=t.messageContentType:e={"X-WebChannel-Content-Type":t.messageContentType}),t&&t.ya&&(e?e["X-WebChannel-Client-Profile"]=t.ya:e={"X-WebChannel-Client-Profile":t.ya}),this.g.S=e,(e=t&&t.Yb)&&!Er(e)&&(this.g.o=e),this.A=t&&t.supportsCrossDomainXhr||!1,this.v=t&&t.sendRawJson||!1,(t=t&&t.httpSessionIdParam)&&!Er(t)&&(this.g.D=t,null!==(e=this.h)&&t in e&&t in(e=this.h)&&delete e[t]),this.j=new Ko(this)}function zo(e){ts.call(this);var t=e.__sm__;if(t){e:{for(const n in t){e=n;break e}e=void 0}(this.i=e)&&(e=this.i,t=null!==t&&e in t?t[e]:void 0),this.data=t}else this.data=e}function Wo(){ns.call(this),this.status=1}function Ko(e){this.g=e}(er=co.prototype).Ka=function(e){this.L=e},er.da=function(e,t,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+e);t=t?t.toUpperCase():"GET",this.H=e,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():Zi.g(),this.C=this.u?Yi(this.u):Yi(Zi),this.g.onreadystatechange=dr(this.Ha,this);try{this.F=!0,this.g.open(t,String(e),!0),this.F=!1}catch(e){return void fo(this,e)}if(e=n||"",n=new Map(this.headers),r)if(Object.getPrototypeOf(r)===Object.prototype)for(var i in r)n.set(i,r[i]);else{if("function"!=typeof r.keys||"function"!=typeof r.get)throw Error("Unknown input type for opt_headers: "+String(r));for(const e of r.keys())n.set(e,r.get(e))}r=Array.from(n.keys()).find((e=>"content-type"==e.toLowerCase())),i=ir.FormData&&e instanceof ir.FormData,!(0<=yr(ho,t))||r||i||n.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");for(const[e,t]of n)this.g.setRequestHeader(e,t);this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{yo(this),0<this.B&&((this.K=function(e){return Dr&&Br()&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=dr(this.qa,this)):this.A=Ni(this.qa,this.B,this)),this.v=!0,this.g.send(e),this.v=!1}catch(e){fo(this,e)}},er.qa=function(){void 0!==rr&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,mi(this,"timeout"),this.abort(8))},er.abort=function(e){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=e||7,mi(this,"complete"),mi(this,"abort"),mo(this))},er.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),mo(this,!0)),co.X.M.call(this)},er.Ha=function(){this.s||(this.F||this.v||this.l?go(this):this.fb())},er.fb=function(){go(this)},er.aa=function(){try{return 2<vo(this)?this.g.status:-1}catch(e){return-1}},er.fa=function(){try{return this.g?this.g.responseText:""}catch(e){return""}},er.Sa=function(e){if(this.g){var t=this.g.responseText;return e&&0==t.indexOf(e)&&(t=t.substring(e.length)),ao(t)}},er.Ea=function(){return this.m},er.Oa=function(){return"string"==typeof this.j?this.j:String(this.j)},(er=Io.prototype).ma=8,er.G=1,er.Ja=function(e){if(this.m)if(this.m=null,1==this.G){if(!e){this.U=Math.floor(1e5*Math.random()),e=this.U++;const i=new is(this,this.j,e,void 0);let s=this.s;if(this.S&&(s?(s=Yr(s),Zr(s,this.S)):s=this.S),null!==this.o||this.N||(i.H=s,s=null),this.O)e:{for(var t=0,n=0;n<this.i.length;n++){var r=this.i[n];if(void 0===(r="__data__"in r.g&&"string"==typeof(r=r.g.__data__)?r.length:void 0))break;if(4096<(t+=r)){t=n;break e}if(4096===t||n===this.i.length-1){t=n+1;break e}}t=1e3}else t=1e3;t=No(this,i,t),Ss(n=Is(this.F),"RID",e),Ss(n,"CVER",22),this.D&&Ss(n,"X-HTTP-Session-Id",this.D),xo(this,n),s&&(this.N?t="headers="+encodeURIComponent(String(bo(s)))+"&"+t:this.o&&To(n,this.o,s)),Gs(this.h,i),this.Ya&&Ss(n,"TYPE","init"),this.O?(Ss(n,"$req",t),Ss(n,"SID","null"),i.Z=!0,us(i,n,null)):us(i,n,t),this.G=2}}else 3==this.G&&(e?Ao(this,e):0==this.i.length||zs(this.h)||Ao(this))},er.Ia=function(){if(this.u=null,Lo(this),this.$&&!(this.K||null==this.g||0>=this.P)){var e=2*this.P;this.j.info("BP detection timer enabled: "+e),this.B=Ki(dr(this.eb,this),e)}},er.eb=function(){this.B&&(this.B=null,this.j.info("BP detection timeout reached."),this.j.info("Buffering proxy detected and switch to long-polling!"),this.L=!1,this.K=!0,zi(10),Co(this),Lo(this))},er.cb=function(){null!=this.v&&(this.v=null,Co(this),Ro(this),zi(19))},er.kb=function(e){e?(this.j.info("Successfully pinged google.com"),zi(2)):(this.j.info("Failed to ping google.com"),zi(1))},(er=Bo.prototype).xa=function(){},er.wa=function(){},er.va=function(){},er.ua=function(){},er.Ra=function(){},Ho.prototype.g=function(e,t){return new $o(e,t)},pr($o,gi),$o.prototype.m=function(){this.g.l=this.j,this.A&&(this.g.H=!0);var e=this.g,t=this.l,n=this.h||void 0;zi(0),e.V=t,e.ia=n||{},e.L=e.Y,e.F=jo(e,null,e.V),So(e)},$o.prototype.close=function(){_o(this.g)},$o.prototype.u=function(e){var t=this.g;if("string"==typeof e){var n={};n.__data__=e,e=n}else this.v&&((n={}).__data__=vi(e),e=n);t.i.push(new class{constructor(e,t){this.h=e,this.g=t}}(t.ab++,e)),3==t.G&&So(t)},$o.prototype.M=function(){this.g.l=null,delete this.j,_o(this.g),delete this.g,$o.X.M.call(this)},pr(zo,ts),pr(Wo,ns),pr(Ko,Bo),Ko.prototype.xa=function(){mi(this.g,"a")},Ko.prototype.wa=function(e){mi(this.g,new zo(e))},Ko.prototype.va=function(e){mi(this.g,new Wo(e))},Ko.prototype.ua=function(){mi(this.g,"b")},Ho.prototype.createWebChannel=Ho.prototype.g,$o.prototype.send=$o.prototype.u,$o.prototype.open=$o.prototype.m,$o.prototype.close=$o.prototype.close,Gi.NO_ERROR=0,Gi.TIMEOUT=8,Gi.HTTP_ERROR=6,Qi.COMPLETE="complete",Ji.EventType=es,es.OPEN="a",es.CLOSE="b",es.ERROR="c",es.MESSAGE="d",gi.prototype.listen=gi.prototype.N,co.prototype.listenOnce=co.prototype.O,co.prototype.getLastError=co.prototype.Oa,co.prototype.getLastErrorCode=co.prototype.Ea,co.prototype.getStatus=co.prototype.aa,co.prototype.getResponseJson=co.prototype.Sa,co.prototype.getResponseText=co.prototype.fa,co.prototype.send=co.prototype.da,co.prototype.setWithCredentials=co.prototype.Ka;var Go=nr.createWebChannelTransport=function(){return new Ho},Qo=nr.getStatEventTarget=function(){return qi()},Xo=nr.ErrorCode=Gi,Yo=nr.EventType=Qi,Jo=nr.Event=Vi,Zo=nr.Stat={sb:0,vb:1,wb:2,Pb:3,Ub:4,Rb:5,Sb:6,Qb:7,Ob:8,Tb:9,PROXY:10,NOPROXY:11,Mb:12,Ib:13,Jb:14,Hb:15,Kb:16,Lb:17,ob:18,nb:19,pb:20},ea=nr.FetchXmlHttpFactory=to,ta=nr.WebChannel=Ji,na=nr.XhrIo=co;const ra="@firebase/firestore";class ia{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}ia.UNAUTHENTICATED=new ia(null),ia.GOOGLE_CREDENTIALS=new ia("google-credentials-uid"),ia.FIRST_PARTY=new ia("first-party-uid"),ia.MOCK_USER=new ia("mock-user");let sa="9.12.1";const oa=new L("@firebase/firestore");function aa(){return oa.logLevel}function ca(e,...t){if(oa.logLevel<=A.DEBUG){const n=t.map(ha);oa.debug(`Firestore (${sa}): ${e}`,...n)}}function ua(e,...t){if(oa.logLevel<=A.ERROR){const n=t.map(ha);oa.error(`Firestore (${sa}): ${e}`,...n)}}function la(e,...t){if(oa.logLevel<=A.WARN){const n=t.map(ha);oa.warn(`Firestore (${sa}): ${e}`,...n)}}function ha(e){if("string"==typeof e)return e;try{return t=e,JSON.stringify(t)}catch(t){return e}var t}function da(e="Unexpected state"){const t=`FIRESTORE (${sa}) INTERNAL ASSERTION FAILED: `+e;throw ua(t),new Error(t)}function fa(e,t){e||da()}function pa(e,t){return e}const ga={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class ma extends d{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class ya{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}class va{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class wa{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(ia.UNAUTHENTICATED)))}shutdown(){}}class ba{constructor(e){this.token=e,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(e,t){this.changeListener=t,e.enqueueRetryable((()=>t(this.token.user)))}shutdown(){this.changeListener=null}}class Ta{constructor(e){this.t=e,this.currentUser=ia.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(e,t){let n=this.i;const r=e=>this.i!==n?(n=this.i,t(e)):Promise.resolve();let i=new ya;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new ya,e.enqueueRetryable((()=>r(this.currentUser)))};const s=()=>{const t=i;e.enqueueRetryable((async()=>{await t.promise,await r(this.currentUser)}))},o=e=>{ca("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),s()};this.t.onInit((e=>o(e))),setTimeout((()=>{if(!this.auth){const e=this.t.getImmediate({optional:!0});e?o(e):(ca("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new ya)}}),0),s()}getToken(){const e=this.i,t=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(t).then((t=>this.i!==e?(ca("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):t?(fa("string"==typeof t.accessToken),new va(t.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const e=this.auth&&this.auth.getUid();return fa(null===e||"string"==typeof e),new ia(e)}}class Ea{constructor(e,t,n,r){this.h=e,this.l=t,this.m=n,this.g=r,this.type="FirstParty",this.user=ia.FIRST_PARTY,this.p=new Map}I(){return this.g?this.g():(fa(!("object"!=typeof this.h||null===this.h||!this.h.auth||!this.h.auth.getAuthHeaderValueForFirstParty)),this.h.auth.getAuthHeaderValueForFirstParty([]))}get headers(){this.p.set("X-Goog-AuthUser",this.l);const e=this.I();return e&&this.p.set("Authorization",e),this.m&&this.p.set("X-Goog-Iam-Authorization-Token",this.m),this.p}}class Ia{constructor(e,t,n,r){this.h=e,this.l=t,this.m=n,this.g=r}getToken(){return Promise.resolve(new Ea(this.h,this.l,this.m,this.g))}start(e,t){e.enqueueRetryable((()=>t(ia.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class _a{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class Ca{constructor(e){this.T=e,this.forceRefresh=!1,this.appCheck=null,this.A=null}start(e,t){const n=e=>{null!=e.error&&ca("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);const n=e.token!==this.A;return this.A=e.token,ca("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?t(e.token):Promise.resolve()};this.o=t=>{e.enqueueRetryable((()=>n(t)))};const r=e=>{ca("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=e,this.appCheck.addTokenListener(this.o)};this.T.onInit((e=>r(e))),setTimeout((()=>{if(!this.appCheck){const e=this.T.getImmediate({optional:!0});e?r(e):ca("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const e=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(e).then((e=>e?(fa("string"==typeof e.token),this.A=e.token,new _a(e.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function ka(e){const t="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(e);if(t&&"function"==typeof t.getRandomValues)t.getRandomValues(n);else for(let t=0;t<e;t++)n[t]=Math.floor(256*Math.random());return n}class Sa{static R(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=Math.floor(256/e.length)*e.length;let n="";for(;n.length<20;){const r=ka(40);for(let i=0;i<r.length;++i)n.length<20&&r[i]<t&&(n+=e.charAt(r[i]%e.length))}return n}}function Aa(e,t){return e<t?-1:e>t?1:0}function xa(e,t,n){return e.length===t.length&&e.every(((e,r)=>n(e,t[r])))}class Na{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new ma(ga.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new ma(ga.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new ma(ga.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new ma(ga.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e)}static now(){return Na.fromMillis(Date.now())}static fromDate(e){return Na.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new Na(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?Aa(this.nanoseconds,e.nanoseconds):Aa(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Da{constructor(e){this.timestamp=e}static fromTimestamp(e){return new Da(e)}static min(){return new Da(new Na(0,0))}static max(){return new Da(new Na(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class Ra{constructor(e,t,n){void 0===t?t=0:t>e.length&&da(),void 0===n?n=e.length-t:n>e.length-t&&da(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===Ra.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof Ra?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let r=0;r<n;r++){const n=e.get(r),i=t.get(r);if(n<i)return-1;if(n>i)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class Oa extends Ra{construct(e,t,n){return new Oa(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new ma(ga.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new Oa(t)}static emptyPath(){return new Oa([])}}const La=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Pa extends Ra{construct(e,t,n){return new Pa(e,t,n)}static isValidIdentifier(e){return La.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Pa.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Pa(["__name__"])}static fromServerFormat(e){const t=[];let n="",r=0;const i=()=>{if(0===n.length)throw new ma(ga.INVALID_ARGUMENT,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let s=!1;for(;r<e.length;){const t=e[r];if("\\"===t){if(r+1===e.length)throw new ma(ga.INVALID_ARGUMENT,"Path has trailing escape character: "+e);const t=e[r+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new ma(ga.INVALID_ARGUMENT,"Path has invalid escape sequence: "+e);n+=t,r+=2}else"`"===t?(s=!s,r++):"."!==t||s?(n+=t,r++):(i(),r++)}if(i(),s)throw new ma(ga.INVALID_ARGUMENT,"Unterminated ` in path: "+e);return new Pa(t)}static emptyPath(){return new Pa([])}}class Ma{constructor(e){this.path=e}static fromPath(e){return new Ma(Oa.fromString(e))}static fromName(e){return new Ma(Oa.fromString(e).popFirst(5))}static empty(){return new Ma(Oa.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===Oa.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return Oa.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new Ma(new Oa(e.slice()))}}function Ua(e){return new Fa(e.readTime,e.key,-1)}class Fa{constructor(e,t,n){this.readTime=e,this.documentKey=t,this.largestBatchId=n}static min(){return new Fa(Da.min(),Ma.empty(),-1)}static max(){return new Fa(Da.max(),Ma.empty(),-1)}}function Va(e,t){let n=e.readTime.compareTo(t.readTime);return 0!==n?n:(n=Ma.comparator(e.documentKey,t.documentKey),0!==n?n:Aa(e.largestBatchId,t.largestBatchId))}class ja{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(e){this.onCommittedListeners.push(e)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((e=>e()))}}async function qa(e){if(e.code!==ga.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==e.message)throw e;ca("LocalStore","Unexpectedly lost primary lease")}class Ba{constructor(e){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,e((e=>{this.isDone=!0,this.result=e,this.nextCallback&&this.nextCallback(e)}),(e=>{this.isDone=!0,this.error=e,this.catchCallback&&this.catchCallback(e)}))}catch(e){return this.next(void 0,e)}next(e,t){return this.callbackAttached&&da(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(t,this.error):this.wrapSuccess(e,this.result):new Ba(((n,r)=>{this.nextCallback=t=>{this.wrapSuccess(e,t).next(n,r)},this.catchCallback=e=>{this.wrapFailure(t,e).next(n,r)}}))}toPromise(){return new Promise(((e,t)=>{this.next(e,t)}))}wrapUserFunction(e){try{const t=e();return t instanceof Ba?t:Ba.resolve(t)}catch(e){return Ba.reject(e)}}wrapSuccess(e,t){return e?this.wrapUserFunction((()=>e(t))):Ba.resolve(t)}wrapFailure(e,t){return e?this.wrapUserFunction((()=>e(t))):Ba.reject(t)}static resolve(e){return new Ba(((t,n)=>{t(e)}))}static reject(e){return new Ba(((t,n)=>{n(e)}))}static waitFor(e){return new Ba(((t,n)=>{let r=0,i=0,s=!1;e.forEach((e=>{++r,e.next((()=>{++i,s&&i===r&&t()}),(e=>n(e)))})),s=!0,i===r&&t()}))}static or(e){let t=Ba.resolve(!1);for(const n of e)t=t.next((e=>e?Ba.resolve(e):n()));return t}static forEach(e,t){const n=[];return e.forEach(((e,r)=>{n.push(t.call(this,e,r))})),this.waitFor(n)}static mapArray(e,t){return new Ba(((n,r)=>{const i=e.length,s=new Array(i);let o=0;for(let a=0;a<i;a++){const c=a;t(e[c]).next((e=>{s[c]=e,++o,o===i&&n(s)}),(e=>r(e)))}}))}static doWhile(e,t){return new Ba(((n,r)=>{const i=()=>{!0===e()?t().next((()=>{i()}),r):n()};i()}))}}function Ha(e){return"IndexedDbTransactionError"===e.name}class $a{constructor(e,t){this.previousValue=e,t&&(t.sequenceNumberHandler=e=>this.ut(e),this.ct=e=>t.writeSequenceNumber(e))}ut(e){return this.previousValue=Math.max(e,this.previousValue),this.previousValue}next(){const e=++this.previousValue;return this.ct&&this.ct(e),e}}function za(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function Wa(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function Ka(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}$a.at=-1;class Ga{constructor(e,t){this.comparator=e,this.root=t||Xa.EMPTY}insert(e,t){return new Ga(this.comparator,this.root.insert(e,t,this.comparator).copy(null,null,Xa.BLACK,null,null))}remove(e){return new Ga(this.comparator,this.root.remove(e,this.comparator).copy(null,null,Xa.BLACK,null,null))}get(e){let t=this.root;for(;!t.isEmpty();){const n=this.comparator(e,t.key);if(0===n)return t.value;n<0?t=t.left:n>0&&(t=t.right)}return null}indexOf(e){let t=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(e,n.key);if(0===r)return t+n.left.size;r<0?n=n.left:(t+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(e){return this.root.inorderTraversal(e)}forEach(e){this.inorderTraversal(((t,n)=>(e(t,n),!1)))}toString(){const e=[];return this.inorderTraversal(((t,n)=>(e.push(`${t}:${n}`),!1))),`{${e.join(", ")}}`}reverseTraversal(e){return this.root.reverseTraversal(e)}getIterator(){return new Qa(this.root,null,this.comparator,!1)}getIteratorFrom(e){return new Qa(this.root,e,this.comparator,!1)}getReverseIterator(){return new Qa(this.root,null,this.comparator,!0)}getReverseIteratorFrom(e){return new Qa(this.root,e,this.comparator,!0)}}class Qa{constructor(e,t,n,r){this.isReverse=r,this.nodeStack=[];let i=1;for(;!e.isEmpty();)if(i=t?n(e.key,t):1,t&&r&&(i*=-1),i<0)e=this.isReverse?e.left:e.right;else{if(0===i){this.nodeStack.push(e);break}this.nodeStack.push(e),e=this.isReverse?e.right:e.left}}getNext(){let e=this.nodeStack.pop();const t={key:e.key,value:e.value};if(this.isReverse)for(e=e.left;!e.isEmpty();)this.nodeStack.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack.push(e),e=e.left;return t}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const e=this.nodeStack[this.nodeStack.length-1];return{key:e.key,value:e.value}}}class Xa{constructor(e,t,n,r,i){this.key=e,this.value=t,this.color=null!=n?n:Xa.RED,this.left=null!=r?r:Xa.EMPTY,this.right=null!=i?i:Xa.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,r,i){return new Xa(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let r=this;const i=n(e,r.key);return r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return Xa.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,r=this;if(t(e,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(e,t),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===t(e,r.key)){if(r.right.isEmpty())return Xa.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(e,t))}return r.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,Xa.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,Xa.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw da();if(this.right.isRed())throw da();const e=this.left.check();if(e!==this.right.check())throw da();return e+(this.isRed()?0:1)}}Xa.EMPTY=null,Xa.RED=!0,Xa.BLACK=!1,Xa.EMPTY=new class{constructor(){this.size=0}get key(){throw da()}get value(){throw da()}get color(){throw da()}get left(){throw da()}get right(){throw da()}copy(e,t,n,r,i){return this}insert(e,t,n){return new Xa(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class Ya{constructor(e){this.comparator=e,this.data=new Ga(this.comparator)}has(e){return null!==this.data.get(e)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(e){return this.data.indexOf(e)}forEach(e){this.data.inorderTraversal(((t,n)=>(e(t),!1)))}forEachInRange(e,t){const n=this.data.getIteratorFrom(e[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,e[1])>=0)return;t(r.key)}}forEachWhile(e,t){let n;for(n=void 0!==t?this.data.getIteratorFrom(t):this.data.getIterator();n.hasNext();)if(!e(n.getNext().key))return}firstAfterOrEqual(e){const t=this.data.getIteratorFrom(e);return t.hasNext()?t.getNext().key:null}getIterator(){return new Ja(this.data.getIterator())}getIteratorFrom(e){return new Ja(this.data.getIteratorFrom(e))}add(e){return this.copy(this.data.remove(e).insert(e,!0))}delete(e){return this.has(e)?this.copy(this.data.remove(e)):this}isEmpty(){return this.data.isEmpty()}unionWith(e){let t=this;return t.size<e.size&&(t=e,e=this),e.forEach((e=>{t=t.add(e)})),t}isEqual(e){if(!(e instanceof Ya))return!1;if(this.size!==e.size)return!1;const t=this.data.getIterator(),n=e.data.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(0!==this.comparator(e,r))return!1}return!0}toArray(){const e=[];return this.forEach((t=>{e.push(t)})),e}toString(){const e=[];return this.forEach((t=>e.push(t))),"SortedSet("+e.toString()+")"}copy(e){const t=new Ya(this.comparator);return t.data=e,t}}class Ja{constructor(e){this.iter=e}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}class Za{constructor(e){this.fields=e,e.sort(Pa.comparator)}static empty(){return new Za([])}unionWith(e){let t=new Ya(Pa.comparator);for(const e of this.fields)t=t.add(e);for(const n of e)t=t.add(n);return new Za(t.toArray())}covers(e){for(const t of this.fields)if(t.isPrefixOf(e))return!0;return!1}isEqual(e){return xa(this.fields,e.fields,((e,t)=>e.isEqual(t)))}}class ec{constructor(e){this.binaryString=e}static fromBase64String(e){const t=atob(e);return new ec(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new ec(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return Aa(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}ec.EMPTY_BYTE_STRING=new ec("");const tc=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function nc(e){if(fa(!!e),"string"==typeof e){let t=0;const n=tc.exec(e);if(fa(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const r=new Date(e);return{seconds:Math.floor(r.getTime()/1e3),nanos:t}}return{seconds:rc(e.seconds),nanos:rc(e.nanos)}}function rc(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function ic(e){return"string"==typeof e?ec.fromBase64String(e):ec.fromUint8Array(e)}function sc(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function oc(e){const t=e.mapValue.fields.__previous_value__;return sc(t)?oc(t):t}function ac(e){const t=nc(e.mapValue.fields.__local_write_time__.timestampValue);return new Na(t.seconds,t.nanos)}class cc{constructor(e,t,n,r,i,s,o,a){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=r,this.ssl=i,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class uc{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new uc("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof uc&&e.projectId===this.projectId&&e.database===this.database}}function lc(e){return null==e}function hc(e){return 0===e&&1/e==-1/0}const dc={fields:{__type__:{stringValue:"__max__"}}};function fc(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?sc(e)?4:Sc(e)?9007199254740991:10:da()}function pc(e,t){if(e===t)return!0;const n=fc(e);if(n!==fc(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return ac(e).isEqual(ac(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=nc(e.timestampValue),r=nc(t.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return ic(e.bytesValue).isEqual(ic(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return rc(e.geoPointValue.latitude)===rc(t.geoPointValue.latitude)&&rc(e.geoPointValue.longitude)===rc(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return rc(e.integerValue)===rc(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=rc(e.doubleValue),r=rc(t.doubleValue);return n===r?hc(n)===hc(r):isNaN(n)&&isNaN(r)}return!1}(e,t);case 9:return xa(e.arrayValue.values||[],t.arrayValue.values||[],pc);case 10:return function(e,t){const n=e.mapValue.fields||{},r=t.mapValue.fields||{};if(za(n)!==za(r))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===r[e]||!pc(n[e],r[e])))return!1;return!0}(e,t);default:return da()}}function gc(e,t){return void 0!==(e.values||[]).find((e=>pc(e,t)))}function mc(e,t){if(e===t)return 0;const n=fc(e),r=fc(t);if(n!==r)return Aa(n,r);switch(n){case 0:case 9007199254740991:return 0;case 1:return Aa(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=rc(e.integerValue||e.doubleValue),r=rc(t.integerValue||t.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(e,t);case 3:return yc(e.timestampValue,t.timestampValue);case 4:return yc(ac(e),ac(t));case 5:return Aa(e.stringValue,t.stringValue);case 6:return function(e,t){const n=ic(e),r=ic(t);return n.compareTo(r)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),r=t.split("/");for(let e=0;e<n.length&&e<r.length;e++){const t=Aa(n[e],r[e]);if(0!==t)return t}return Aa(n.length,r.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=Aa(rc(e.latitude),rc(t.latitude));return 0!==n?n:Aa(rc(e.longitude),rc(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],r=t.values||[];for(let e=0;e<n.length&&e<r.length;++e){const t=mc(n[e],r[e]);if(t)return t}return Aa(n.length,r.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){if(e===dc&&t===dc)return 0;if(e===dc)return 1;if(t===dc)return-1;const n=e.fields||{},r=Object.keys(n),i=t.fields||{},s=Object.keys(i);r.sort(),s.sort();for(let e=0;e<r.length&&e<s.length;++e){const t=Aa(r[e],s[e]);if(0!==t)return t;const o=mc(n[r[e]],i[s[e]]);if(0!==o)return o}return Aa(r.length,s.length)}(e.mapValue,t.mapValue);default:throw da()}}function yc(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return Aa(e,t);const n=nc(e),r=nc(t),i=Aa(n.seconds,r.seconds);return 0!==i?i:Aa(n.nanos,r.nanos)}function vc(e){return wc(e)}function wc(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(e){const t=nc(e);return`time(${t.seconds},${t.nanos})`}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?ic(e.bytesValue).toBase64():"referenceValue"in e?(n=e.referenceValue,Ma.fromName(n).toString()):"geoPointValue"in e?`geo(${(t=e.geoPointValue).latitude},${t.longitude})`:"arrayValue"in e?function(e){let t="[",n=!0;for(const r of e.values||[])n?n=!1:t+=",",t+=wc(r);return t+"]"}(e.arrayValue):"mapValue"in e?function(e){const t=Object.keys(e.fields||{}).sort();let n="{",r=!0;for(const i of t)r?r=!1:n+=",",n+=`${i}:${wc(e.fields[i])}`;return n+"}"}(e.mapValue):da();var t,n}function bc(e,t){return{referenceValue:`projects/${e.projectId}/databases/${e.database}/documents/${t.path.canonicalString()}`}}function Tc(e){return!!e&&"integerValue"in e}function Ec(e){return!!e&&"arrayValue"in e}function Ic(e){return!!e&&"nullValue"in e}function _c(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function Cc(e){return!!e&&"mapValue"in e}function kc(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return Wa(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=kc(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=kc(e.arrayValue.values[n]);return t}return Object.assign({},e)}function Sc(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}class Ac{constructor(e){this.value=e}static empty(){return new Ac({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!Cc(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=kc(t)}setAll(e){let t=Pa.emptyPath(),n={},r=[];e.forEach(((e,i)=>{if(!t.isImmediateParentOf(i)){const e=this.getFieldsMap(t);this.applyChanges(e,n,r),n={},r=[],t=i.popLast()}e?n[i.lastSegment()]=kc(e):r.push(i.lastSegment())}));const i=this.getFieldsMap(t);this.applyChanges(i,n,r)}delete(e){const t=this.field(e.popLast());Cc(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return pc(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let r=t.mapValue.fields[e.get(n)];Cc(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=r),t=r}return t.mapValue.fields}applyChanges(e,t,n){Wa(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new Ac(kc(this.value))}}function xc(e){const t=[];return Wa(e.fields,((e,n)=>{const r=new Pa([e]);if(Cc(n)){const e=xc(n.mapValue).fields;if(0===e.length)t.push(r);else for(const n of e)t.push(r.child(n))}else t.push(r)})),new Za(t)}class Nc{constructor(e,t,n,r,i,s){this.key=e,this.documentType=t,this.version=n,this.readTime=r,this.data=i,this.documentState=s}static newInvalidDocument(e){return new Nc(e,0,Da.min(),Da.min(),Ac.empty(),0)}static newFoundDocument(e,t,n){return new Nc(e,1,t,Da.min(),n,0)}static newNoDocument(e,t){return new Nc(e,2,t,Da.min(),Ac.empty(),0)}static newUnknownDocument(e,t){return new Nc(e,3,t,Da.min(),Ac.empty(),2)}convertToFoundDocument(e,t){return this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=Ac.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=Ac.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=Da.min(),this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof Nc&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new Nc(this.key,this.documentType,this.version,this.readTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Dc{constructor(e,t=null,n=[],r=[],i=null,s=null,o=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=s,this.endAt=o,this.ht=null}}function Rc(e,t=null,n=[],r=[],i=null,s=null,o=null){return new Dc(e,t,n,r,i,s,o)}function Oc(e){const t=pa(e);if(null===t.ht){let e=t.path.canonicalString();null!==t.collectionGroup&&(e+="|cg:"+t.collectionGroup),e+="|f:",e+=t.filters.map((e=>{return(t=e).field.canonicalString()+t.op.toString()+vc(t.value);var t})).join(","),e+="|ob:",e+=t.orderBy.map((e=>function(e){return e.field.canonicalString()+e.dir}(e))).join(","),lc(t.limit)||(e+="|l:",e+=t.limit),t.startAt&&(e+="|lb:",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((e=>vc(e))).join(",")),t.endAt&&(e+="|ub:",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((e=>vc(e))).join(",")),t.ht=e}return t.ht}function Lc(e,t){if(e.limit!==t.limit)return!1;if(e.orderBy.length!==t.orderBy.length)return!1;for(let n=0;n<e.orderBy.length;n++)if(!Kc(e.orderBy[n],t.orderBy[n]))return!1;if(e.filters.length!==t.filters.length)return!1;for(let i=0;i<e.filters.length;i++)if(n=e.filters[i],r=t.filters[i],n.op!==r.op||!n.field.isEqual(r.field)||!pc(n.value,r.value))return!1;var n,r;return e.collectionGroup===t.collectionGroup&&!!e.path.isEqual(t.path)&&!!Qc(e.startAt,t.startAt)&&Qc(e.endAt,t.endAt)}function Pc(e){return Ma.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}class Mc extends class{}{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.lt(e,t,n):new Uc(e,t,n):"array-contains"===t?new qc(e,n):"in"===t?new Bc(e,n):"not-in"===t?new Hc(e,n):"array-contains-any"===t?new $c(e,n):new Mc(e,t,n)}static lt(e,t,n){return"in"===t?new Fc(e,n):new Vc(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.ft(mc(t,this.value)):null!==t&&fc(this.value)===fc(t)&&this.ft(mc(t,this.value))}ft(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return da()}}dt(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class Uc extends Mc{constructor(e,t,n){super(e,t,n),this.key=Ma.fromName(n.referenceValue)}matches(e){const t=Ma.comparator(e.key,this.key);return this.ft(t)}}class Fc extends Mc{constructor(e,t){super(e,"in",t),this.keys=jc(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class Vc extends Mc{constructor(e,t){super(e,"not-in",t),this.keys=jc(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function jc(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>Ma.fromName(e.referenceValue)))}class qc extends Mc{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return Ec(t)&&gc(t.arrayValue,this.value)}}class Bc extends Mc{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&gc(this.value.arrayValue,t)}}class Hc extends Mc{constructor(e,t){super(e,"not-in",t)}matches(e){if(gc(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!gc(this.value.arrayValue,t)}}class $c extends Mc{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!Ec(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>gc(this.value.arrayValue,e)))}}class zc{constructor(e,t){this.position=e,this.inclusive=t}}class Wc{constructor(e,t="asc"){this.field=e,this.dir=t}}function Kc(e,t){return e.dir===t.dir&&e.field.isEqual(t.field)}function Gc(e,t,n){let r=0;for(let i=0;i<e.position.length;i++){const s=t[i],o=e.position[i];if(r=s.field.isKeyField()?Ma.comparator(Ma.fromName(o.referenceValue),n.key):mc(o,n.data.field(s.field)),"desc"===s.dir&&(r*=-1),0!==r)break}return r}function Qc(e,t){if(null===e)return null===t;if(null===t)return!1;if(e.inclusive!==t.inclusive||e.position.length!==t.position.length)return!1;for(let n=0;n<e.position.length;n++)if(!pc(e.position[n],t.position[n]))return!1;return!0}class Xc{constructor(e,t=null,n=[],r=[],i=null,s="F",o=null,a=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=r,this.limit=i,this.limitType=s,this.startAt=o,this.endAt=a,this._t=null,this.wt=null,this.startAt,this.endAt}}function Yc(e){return new Xc(e)}function Jc(e){return 0===e.filters.length&&null===e.limit&&null==e.startAt&&null==e.endAt&&(0===e.explicitOrderBy.length||1===e.explicitOrderBy.length&&e.explicitOrderBy[0].field.isKeyField())}function Zc(e){return null!==e.collectionGroup}function eu(e){const t=pa(e);if(null===t._t){t._t=[];const e=function(e){for(const t of e.filters)if(t.dt())return t.field;return null}(t),n=function(e){return e.explicitOrderBy.length>0?e.explicitOrderBy[0].field:null}(t);if(null!==e&&null===n)e.isKeyField()||t._t.push(new Wc(e)),t._t.push(new Wc(Pa.keyField(),"asc"));else{let e=!1;for(const n of t.explicitOrderBy)t._t.push(n),n.field.isKeyField()&&(e=!0);if(!e){const e=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc";t._t.push(new Wc(Pa.keyField(),e))}}}return t._t}function tu(e){const t=pa(e);if(!t.wt)if("F"===t.limitType)t.wt=Rc(t.path,t.collectionGroup,eu(t),t.filters,t.limit,t.startAt,t.endAt);else{const e=[];for(const n of eu(t)){const t="desc"===n.dir?"asc":"desc";e.push(new Wc(n.field,t))}const n=t.endAt?new zc(t.endAt.position,t.endAt.inclusive):null,r=t.startAt?new zc(t.startAt.position,t.startAt.inclusive):null;t.wt=Rc(t.path,t.collectionGroup,e,t.filters,t.limit,n,r)}return t.wt}function nu(e,t,n){return new Xc(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),t,n,e.startAt,e.endAt)}function ru(e,t){return Lc(tu(e),tu(t))&&e.limitType===t.limitType}function iu(e){return`${Oc(tu(e))}|lt:${e.limitType}`}function su(e){return`Query(target=${function(e){let t=e.path.canonicalString();return null!==e.collectionGroup&&(t+=" collectionGroup="+e.collectionGroup),e.filters.length>0&&(t+=`, filters: [${e.filters.map((e=>{return`${(t=e).field.canonicalString()} ${t.op} ${vc(t.value)}`;var t})).join(", ")}]`),lc(e.limit)||(t+=", limit: "+e.limit),e.orderBy.length>0&&(t+=`, orderBy: [${e.orderBy.map((e=>function(e){return`${e.field.canonicalString()} (${e.dir})`}(e))).join(", ")}]`),e.startAt&&(t+=", startAt: ",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((e=>vc(e))).join(",")),e.endAt&&(t+=", endAt: ",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((e=>vc(e))).join(",")),`Target(${t})`}(tu(e))}; limitType=${e.limitType})`}function ou(e,t){return t.isFoundDocument()&&function(e,t){const n=t.key.path;return null!==e.collectionGroup?t.key.hasCollectionId(e.collectionGroup)&&e.path.isPrefixOf(n):Ma.isDocumentKey(e.path)?e.path.isEqual(n):e.path.isImmediateParentOf(n)}(e,t)&&function(e,t){for(const n of e.explicitOrderBy)if(!n.field.isKeyField()&&null===t.data.field(n.field))return!1;return!0}(e,t)&&function(e,t){for(const n of e.filters)if(!n.matches(t))return!1;return!0}(e,t)&&function(e,t){return!(e.startAt&&!function(e,t,n){const r=Gc(e,t,n);return e.inclusive?r<=0:r<0}(e.startAt,eu(e),t)||e.endAt&&!function(e,t,n){const r=Gc(e,t,n);return e.inclusive?r>=0:r>0}(e.endAt,eu(e),t))}(e,t)}function au(e){return(t,n)=>{let r=!1;for(const i of eu(e)){const e=cu(i,t,n);if(0!==e)return e;r=r||i.field.isKeyField()}return 0}}function cu(e,t,n){const r=e.field.isKeyField()?Ma.comparator(t.key,n.key):function(e,t,n){const r=t.data.field(e),i=n.data.field(e);return null!==r&&null!==i?mc(r,i):da()}(e.field,t,n);switch(e.dir){case"asc":return r;case"desc":return-1*r;default:return da()}}function uu(e,t){if(e.gt){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:hc(t)?"-0":t}}function lu(e){return{integerValue:""+e}}function hu(e,t){return function(e){return"number"==typeof e&&Number.isInteger(e)&&!hc(e)&&e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER}(t)?lu(t):uu(e,t)}class du{constructor(){this._=void 0}}function fu(e,t,n){return e instanceof mu?function(e,t){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:e.seconds,nanos:e.nanoseconds}}}};return t&&(n.fields.__previous_value__=t),{mapValue:n}}(n,t):e instanceof yu?vu(e,t):e instanceof wu?bu(e,t):function(e,t){const n=gu(e,t),r=Eu(n)+Eu(e.yt);return Tc(n)&&Tc(e.yt)?lu(r):uu(e.It,r)}(e,t)}function pu(e,t,n){return e instanceof yu?vu(e,t):e instanceof wu?bu(e,t):n}function gu(e,t){return e instanceof Tu?Tc(n=t)||function(e){return!!e&&"doubleValue"in e}(n)?t:{integerValue:0}:null;var n}class mu extends du{}class yu extends du{constructor(e){super(),this.elements=e}}function vu(e,t){const n=Iu(t);for(const t of e.elements)n.some((e=>pc(e,t)))||n.push(t);return{arrayValue:{values:n}}}class wu extends du{constructor(e){super(),this.elements=e}}function bu(e,t){let n=Iu(t);for(const t of e.elements)n=n.filter((e=>!pc(e,t)));return{arrayValue:{values:n}}}class Tu extends du{constructor(e,t){super(),this.It=e,this.yt=t}}function Eu(e){return rc(e.integerValue||e.doubleValue)}function Iu(e){return Ec(e)&&e.arrayValue.values?e.arrayValue.values.slice():[]}class _u{constructor(e,t){this.version=e,this.transformResults=t}}class Cu{constructor(e,t){this.updateTime=e,this.exists=t}static none(){return new Cu}static exists(e){return new Cu(void 0,e)}static updateTime(e){return new Cu(e)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(e){return this.exists===e.exists&&(this.updateTime?!!e.updateTime&&this.updateTime.isEqual(e.updateTime):!e.updateTime)}}function ku(e,t){return void 0!==e.updateTime?t.isFoundDocument()&&t.version.isEqual(e.updateTime):void 0===e.exists||e.exists===t.isFoundDocument()}class Su{}function Au(e,t){if(!e.hasLocalMutations||t&&0===t.fields.length)return null;if(null===t)return e.isNoDocument()?new Fu(e.key,Cu.none()):new Ou(e.key,e.data,Cu.none());{const n=e.data,r=Ac.empty();let i=new Ya(Pa.comparator);for(let e of t.fields)if(!i.has(e)){let t=n.field(e);null===t&&e.length>1&&(e=e.popLast(),t=n.field(e)),null===t?r.delete(e):r.set(e,t),i=i.add(e)}return new Lu(e.key,r,new Za(i.toArray()),Cu.none())}}function xu(e,t,n){e instanceof Ou?function(e,t,n){const r=e.value.clone(),i=Mu(e.fieldTransforms,t,n.transformResults);r.setAll(i),t.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(e,t,n):e instanceof Lu?function(e,t,n){if(!ku(e.precondition,t))return void t.convertToUnknownDocument(n.version);const r=Mu(e.fieldTransforms,t,n.transformResults),i=t.data;i.setAll(Pu(e)),i.setAll(r),t.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(e,t,n):function(e,t,n){t.convertToNoDocument(n.version).setHasCommittedMutations()}(0,t,n)}function Nu(e,t,n,r){return e instanceof Ou?function(e,t,n,r){if(!ku(e.precondition,t))return n;const i=e.value.clone(),s=Uu(e.fieldTransforms,r,t);return i.setAll(s),t.convertToFoundDocument(t.version,i).setHasLocalMutations(),null}(e,t,n,r):e instanceof Lu?function(e,t,n,r){if(!ku(e.precondition,t))return n;const i=Uu(e.fieldTransforms,r,t),s=t.data;return s.setAll(Pu(e)),s.setAll(i),t.convertToFoundDocument(t.version,s).setHasLocalMutations(),null===n?null:n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map((e=>e.field)))}(e,t,n,r):function(e,t,n){return ku(e.precondition,t)?(t.convertToNoDocument(t.version).setHasLocalMutations(),null):n}(e,t,n)}function Du(e,t){let n=null;for(const r of e.fieldTransforms){const e=t.data.field(r.field),i=gu(r.transform,e||null);null!=i&&(null===n&&(n=Ac.empty()),n.set(r.field,i))}return n||null}function Ru(e,t){return e.type===t.type&&!!e.key.isEqual(t.key)&&!!e.precondition.isEqual(t.precondition)&&!!function(e,t){return void 0===e&&void 0===t||!(!e||!t)&&xa(e,t,((e,t)=>function(e,t){return e.field.isEqual(t.field)&&function(e,t){return e instanceof yu&&t instanceof yu||e instanceof wu&&t instanceof wu?xa(e.elements,t.elements,pc):e instanceof Tu&&t instanceof Tu?pc(e.yt,t.yt):e instanceof mu&&t instanceof mu}(e.transform,t.transform)}(e,t)))}(e.fieldTransforms,t.fieldTransforms)&&(0===e.type?e.value.isEqual(t.value):1!==e.type||e.data.isEqual(t.data)&&e.fieldMask.isEqual(t.fieldMask))}class Ou extends Su{constructor(e,t,n,r=[]){super(),this.key=e,this.value=t,this.precondition=n,this.fieldTransforms=r,this.type=0}getFieldMask(){return null}}class Lu extends Su{constructor(e,t,n,r,i=[]){super(),this.key=e,this.data=t,this.fieldMask=n,this.precondition=r,this.fieldTransforms=i,this.type=1}getFieldMask(){return this.fieldMask}}function Pu(e){const t=new Map;return e.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=e.data.field(n);t.set(n,r)}})),t}function Mu(e,t,n){const r=new Map;fa(e.length===n.length);for(let i=0;i<n.length;i++){const s=e[i],o=s.transform,a=t.data.field(s.field);r.set(s.field,pu(o,a,n[i]))}return r}function Uu(e,t,n){const r=new Map;for(const i of e){const e=i.transform,s=n.data.field(i.field);r.set(i.field,fu(e,s,t))}return r}class Fu extends Su{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Vu extends Su{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class ju{constructor(e){this.count=e}}var qu,Bu;function Hu(e){if(void 0===e)return ua("GRPC error has no .code"),ga.UNKNOWN;switch(e){case qu.OK:return ga.OK;case qu.CANCELLED:return ga.CANCELLED;case qu.UNKNOWN:return ga.UNKNOWN;case qu.DEADLINE_EXCEEDED:return ga.DEADLINE_EXCEEDED;case qu.RESOURCE_EXHAUSTED:return ga.RESOURCE_EXHAUSTED;case qu.INTERNAL:return ga.INTERNAL;case qu.UNAVAILABLE:return ga.UNAVAILABLE;case qu.UNAUTHENTICATED:return ga.UNAUTHENTICATED;case qu.INVALID_ARGUMENT:return ga.INVALID_ARGUMENT;case qu.NOT_FOUND:return ga.NOT_FOUND;case qu.ALREADY_EXISTS:return ga.ALREADY_EXISTS;case qu.PERMISSION_DENIED:return ga.PERMISSION_DENIED;case qu.FAILED_PRECONDITION:return ga.FAILED_PRECONDITION;case qu.ABORTED:return ga.ABORTED;case qu.OUT_OF_RANGE:return ga.OUT_OF_RANGE;case qu.UNIMPLEMENTED:return ga.UNIMPLEMENTED;case qu.DATA_LOSS:return ga.DATA_LOSS;default:return da()}}(Bu=qu||(qu={}))[Bu.OK=0]="OK",Bu[Bu.CANCELLED=1]="CANCELLED",Bu[Bu.UNKNOWN=2]="UNKNOWN",Bu[Bu.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Bu[Bu.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Bu[Bu.NOT_FOUND=5]="NOT_FOUND",Bu[Bu.ALREADY_EXISTS=6]="ALREADY_EXISTS",Bu[Bu.PERMISSION_DENIED=7]="PERMISSION_DENIED",Bu[Bu.UNAUTHENTICATED=16]="UNAUTHENTICATED",Bu[Bu.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Bu[Bu.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Bu[Bu.ABORTED=10]="ABORTED",Bu[Bu.OUT_OF_RANGE=11]="OUT_OF_RANGE",Bu[Bu.UNIMPLEMENTED=12]="UNIMPLEMENTED",Bu[Bu.INTERNAL=13]="INTERNAL",Bu[Bu.UNAVAILABLE=14]="UNAVAILABLE",Bu[Bu.DATA_LOSS=15]="DATA_LOSS";class $u{constructor(e,t){this.mapKeyFn=e,this.equalsFn=t,this.inner={},this.innerSize=0}get(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0!==n)for(const[t,r]of n)if(this.equalsFn(t,e))return r}has(e){return void 0!==this.get(e)}set(e,t){const n=this.mapKeyFn(e),r=this.inner[n];if(void 0===r)return this.inner[n]=[[e,t]],void this.innerSize++;for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],e))return void(r[n]=[e,t]);r.push([e,t]),this.innerSize++}delete(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],e))return 1===n.length?delete this.inner[t]:n.splice(r,1),this.innerSize--,!0;return!1}forEach(e){Wa(this.inner,((t,n)=>{for(const[t,r]of n)e(t,r)}))}isEmpty(){return Ka(this.inner)}size(){return this.innerSize}}const zu=new Ga(Ma.comparator);function Wu(){return zu}const Ku=new Ga(Ma.comparator);function Gu(...e){let t=Ku;for(const n of e)t=t.insert(n.key,n);return t}function Qu(e){let t=Ku;return e.forEach(((e,n)=>t=t.insert(e,n.overlayedDocument))),t}function Xu(){return Ju()}function Yu(){return Ju()}function Ju(){return new $u((e=>e.toString()),((e,t)=>e.isEqual(t)))}const Zu=new Ga(Ma.comparator),el=new Ya(Ma.comparator);function tl(...e){let t=el;for(const n of e)t=t.add(n);return t}const nl=new Ya(Aa);function rl(){return nl}class il{constructor(e,t,n,r,i){this.snapshotVersion=e,this.targetChanges=t,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(e,t,n){const r=new Map;return r.set(e,sl.createSynthesizedTargetChangeForCurrentChange(e,t,n)),new il(Da.min(),r,rl(),Wu(),tl())}}class sl{constructor(e,t,n,r,i){this.resumeToken=e,this.current=t,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(e,t,n){return new sl(n,t,tl(),tl(),tl())}}class ol{constructor(e,t,n,r){this.Tt=e,this.removedTargetIds=t,this.key=n,this.Et=r}}class al{constructor(e,t){this.targetId=e,this.At=t}}class cl{constructor(e,t,n=ec.EMPTY_BYTE_STRING,r=null){this.state=e,this.targetIds=t,this.resumeToken=n,this.cause=r}}class ul{constructor(){this.Rt=0,this.bt=dl(),this.Pt=ec.EMPTY_BYTE_STRING,this.vt=!1,this.Vt=!0}get current(){return this.vt}get resumeToken(){return this.Pt}get St(){return 0!==this.Rt}get Dt(){return this.Vt}Ct(e){e.approximateByteSize()>0&&(this.Vt=!0,this.Pt=e)}xt(){let e=tl(),t=tl(),n=tl();return this.bt.forEach(((r,i)=>{switch(i){case 0:e=e.add(r);break;case 2:t=t.add(r);break;case 1:n=n.add(r);break;default:da()}})),new sl(this.Pt,this.vt,e,t,n)}Nt(){this.Vt=!1,this.bt=dl()}kt(e,t){this.Vt=!0,this.bt=this.bt.insert(e,t)}Ot(e){this.Vt=!0,this.bt=this.bt.remove(e)}Mt(){this.Rt+=1}Ft(){this.Rt-=1}$t(){this.Vt=!0,this.vt=!0}}class ll{constructor(e){this.Bt=e,this.Lt=new Map,this.Ut=Wu(),this.qt=hl(),this.Kt=new Ya(Aa)}Gt(e){for(const t of e.Tt)e.Et&&e.Et.isFoundDocument()?this.Qt(t,e.Et):this.jt(t,e.key,e.Et);for(const t of e.removedTargetIds)this.jt(t,e.key,e.Et)}Wt(e){this.forEachTarget(e,(t=>{const n=this.zt(t);switch(e.state){case 0:this.Ht(t)&&n.Ct(e.resumeToken);break;case 1:n.Ft(),n.St||n.Nt(),n.Ct(e.resumeToken);break;case 2:n.Ft(),n.St||this.removeTarget(t);break;case 3:this.Ht(t)&&(n.$t(),n.Ct(e.resumeToken));break;case 4:this.Ht(t)&&(this.Jt(t),n.Ct(e.resumeToken));break;default:da()}}))}forEachTarget(e,t){e.targetIds.length>0?e.targetIds.forEach(t):this.Lt.forEach(((e,n)=>{this.Ht(n)&&t(n)}))}Yt(e){const t=e.targetId,n=e.At.count,r=this.Xt(t);if(r){const e=r.target;if(Pc(e))if(0===n){const n=new Ma(e.path);this.jt(t,n,Nc.newNoDocument(n,Da.min()))}else fa(1===n);else this.Zt(t)!==n&&(this.Jt(t),this.Kt=this.Kt.add(t))}}te(e){const t=new Map;this.Lt.forEach(((n,r)=>{const i=this.Xt(r);if(i){if(n.current&&Pc(i.target)){const t=new Ma(i.target.path);null!==this.Ut.get(t)||this.ee(r,t)||this.jt(r,t,Nc.newNoDocument(t,e))}n.Dt&&(t.set(r,n.xt()),n.Nt())}}));let n=tl();this.qt.forEach(((e,t)=>{let r=!0;t.forEachWhile((e=>{const t=this.Xt(e);return!t||2===t.purpose||(r=!1,!1)})),r&&(n=n.add(e))})),this.Ut.forEach(((t,n)=>n.setReadTime(e)));const r=new il(e,t,this.Kt,this.Ut,n);return this.Ut=Wu(),this.qt=hl(),this.Kt=new Ya(Aa),r}Qt(e,t){if(!this.Ht(e))return;const n=this.ee(e,t.key)?2:0;this.zt(e).kt(t.key,n),this.Ut=this.Ut.insert(t.key,t),this.qt=this.qt.insert(t.key,this.ne(t.key).add(e))}jt(e,t,n){if(!this.Ht(e))return;const r=this.zt(e);this.ee(e,t)?r.kt(t,1):r.Ot(t),this.qt=this.qt.insert(t,this.ne(t).delete(e)),n&&(this.Ut=this.Ut.insert(t,n))}removeTarget(e){this.Lt.delete(e)}Zt(e){const t=this.zt(e).xt();return this.Bt.getRemoteKeysForTarget(e).size+t.addedDocuments.size-t.removedDocuments.size}Mt(e){this.zt(e).Mt()}zt(e){let t=this.Lt.get(e);return t||(t=new ul,this.Lt.set(e,t)),t}ne(e){let t=this.qt.get(e);return t||(t=new Ya(Aa),this.qt=this.qt.insert(e,t)),t}Ht(e){const t=null!==this.Xt(e);return t||ca("WatchChangeAggregator","Detected inactive target",e),t}Xt(e){const t=this.Lt.get(e);return t&&t.St?null:this.Bt.se(e)}Jt(e){this.Lt.set(e,new ul),this.Bt.getRemoteKeysForTarget(e).forEach((t=>{this.jt(e,t,null)}))}ee(e,t){return this.Bt.getRemoteKeysForTarget(e).has(t)}}function hl(){return new Ga(Ma.comparator)}function dl(){return new Ga(Ma.comparator)}const fl={asc:"ASCENDING",desc:"DESCENDING"},pl={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class gl{constructor(e,t){this.databaseId=e,this.gt=t}}function ml(e,t){return e.gt?`${new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+t.nanoseconds).slice(-9)}Z`:{seconds:""+t.seconds,nanos:t.nanoseconds}}function yl(e,t){return e.gt?t.toBase64():t.toUint8Array()}function vl(e,t){return ml(e,t.toTimestamp())}function wl(e){return fa(!!e),Da.fromTimestamp(function(e){const t=nc(e);return new Na(t.seconds,t.nanos)}(e))}function bl(e,t){return function(e){return new Oa(["projects",e.projectId,"databases",e.database])}(e).child("documents").child(t).canonicalString()}function Tl(e){const t=Oa.fromString(e);return fa(Vl(t)),t}function El(e,t){return bl(e.databaseId,t.path)}function Il(e,t){const n=Tl(t);if(n.get(1)!==e.databaseId.projectId)throw new ma(ga.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new ma(ga.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new Ma(kl(n))}function _l(e,t){return bl(e.databaseId,t)}function Cl(e){return new Oa(["projects",e.databaseId.projectId,"databases",e.databaseId.database]).canonicalString()}function kl(e){return fa(e.length>4&&"documents"===e.get(4)),e.popFirst(5)}function Sl(e,t,n){return{name:El(e,t),fields:n.value.mapValue.fields}}function Al(e,t){return{documents:[_l(e,t.path)]}}function xl(e,t){const n={structuredQuery:{}},r=t.path;null!==t.collectionGroup?(n.parent=_l(e,r),n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(n.parent=_l(e,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const i=function(e){if(0===e.length)return;const t=e.map((e=>function(e){if("=="===e.op){if(_c(e.value))return{unaryFilter:{field:Ll(e.field),op:"IS_NAN"}};if(Ic(e.value))return{unaryFilter:{field:Ll(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(_c(e.value))return{unaryFilter:{field:Ll(e.field),op:"IS_NOT_NAN"}};if(Ic(e.value))return{unaryFilter:{field:Ll(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Ll(e.field),op:Ol(e.op),value:e.value}}}(e)));return 1===t.length?t[0]:{compositeFilter:{op:"AND",filters:t}}}(t.filters);i&&(n.structuredQuery.where=i);const s=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:Ll(e.field),direction:Rl(e.dir)}}(e)))}(t.orderBy);s&&(n.structuredQuery.orderBy=s);const o=function(e,t){return e.gt||lc(t)?t:{value:t}}(e,t.limit);var a;return null!==o&&(n.structuredQuery.limit=o),t.startAt&&(n.structuredQuery.startAt={before:(a=t.startAt).inclusive,values:a.position}),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),n}function Nl(e){let t=function(e){const t=Tl(e);return 4===t.length?Oa.emptyPath():kl(t)}(e.parent);const n=e.structuredQuery,r=n.from?n.from.length:0;let i=null;if(r>0){fa(1===r);const e=n.from[0];e.allDescendants?i=e.collectionId:t=t.child(e.collectionId)}let s=[];n.where&&(s=Dl(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((e=>function(e){return new Wc(Pl(e.field),function(e){switch(e){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(e.direction))}(e))));let a=null;n.limit&&(a=function(e){let t;return t="object"==typeof e?e.value:e,lc(t)?null:t}(n.limit));let c=null;n.startAt&&(c=function(e){const t=!!e.before,n=e.values||[];return new zc(n,t)}(n.startAt));let u=null;return n.endAt&&(u=function(e){const t=!e.before,n=e.values||[];return new zc(n,t)}(n.endAt)),function(e,t,n,r,i,s,o,a){return new Xc(e,t,n,r,i,s,o,a)}(t,i,o,s,a,"F",c,u)}function Dl(e){return e?void 0!==e.unaryFilter?[Ul(e)]:void 0!==e.fieldFilter?[Ml(e)]:void 0!==e.compositeFilter?e.compositeFilter.filters.map((e=>Dl(e))).reduce(((e,t)=>e.concat(t))):da():[]}function Rl(e){return fl[e]}function Ol(e){return pl[e]}function Ll(e){return{fieldPath:e.canonicalString()}}function Pl(e){return Pa.fromServerFormat(e.fieldPath)}function Ml(e){return Mc.create(Pl(e.fieldFilter.field),function(e){switch(e){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return da()}}(e.fieldFilter.op),e.fieldFilter.value)}function Ul(e){switch(e.unaryFilter.op){case"IS_NAN":const t=Pl(e.unaryFilter.field);return Mc.create(t,"==",{doubleValue:NaN});case"IS_NULL":const n=Pl(e.unaryFilter.field);return Mc.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=Pl(e.unaryFilter.field);return Mc.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=Pl(e.unaryFilter.field);return Mc.create(i,"!=",{nullValue:"NULL_VALUE"});default:return da()}}function Fl(e){const t=[];return e.fields.forEach((e=>t.push(e.canonicalString()))),{fieldPaths:t}}function Vl(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class jl{constructor(e,t,n,r){this.batchId=e,this.localWriteTime=t,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(e,t){const n=t.mutationResults;for(let t=0;t<this.mutations.length;t++){const r=this.mutations[t];r.key.isEqual(e.key)&&xu(r,e,n[t])}}applyToLocalView(e,t){for(const n of this.baseMutations)n.key.isEqual(e.key)&&(t=Nu(n,e,t,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(e.key)&&(t=Nu(n,e,t,this.localWriteTime));return t}applyToLocalDocumentSet(e,t){const n=Yu();return this.mutations.forEach((r=>{const i=e.get(r.key),s=i.overlayedDocument;let o=this.applyToLocalView(s,i.mutatedFields);o=t.has(r.key)?null:o;const a=Au(s,o);null!==a&&n.set(r.key,a),s.isValidDocument()||s.convertToNoDocument(Da.min())})),n}keys(){return this.mutations.reduce(((e,t)=>e.add(t.key)),tl())}isEqual(e){return this.batchId===e.batchId&&xa(this.mutations,e.mutations,((e,t)=>Ru(e,t)))&&xa(this.baseMutations,e.baseMutations,((e,t)=>Ru(e,t)))}}class ql{constructor(e,t,n,r){this.batch=e,this.commitVersion=t,this.mutationResults=n,this.docVersions=r}static from(e,t,n){fa(e.mutations.length===n.length);let r=Zu;const i=e.mutations;for(let e=0;e<i.length;e++)r=r.insert(i[e].key,n[e].version);return new ql(e,t,n,r)}}class Bl{constructor(e,t){this.largestBatchId=e,this.mutation=t}getKey(){return this.mutation.key}isEqual(e){return null!==e&&this.mutation===e.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class Hl{constructor(e,t,n,r,i=Da.min(),s=Da.min(),o=ec.EMPTY_BYTE_STRING){this.target=e,this.targetId=t,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=s,this.resumeToken=o}withSequenceNumber(e){return new Hl(this.target,this.targetId,this.purpose,e,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(e,t){return new Hl(this.target,this.targetId,this.purpose,this.sequenceNumber,t,this.lastLimboFreeSnapshotVersion,e)}withLastLimboFreeSnapshotVersion(e){return new Hl(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,e,this.resumeToken)}}class $l{constructor(e){this.re=e}}function zl(e){const t=Nl({parent:e.parent,structuredQuery:e.structuredQuery});return"LAST"===e.limitType?nu(t,t.limit,"L"):t}class Wl{constructor(){}ce(e,t){this.ae(e,t),t.he()}ae(e,t){if("nullValue"in e)this.le(t,5);else if("booleanValue"in e)this.le(t,10),t.fe(e.booleanValue?1:0);else if("integerValue"in e)this.le(t,15),t.fe(rc(e.integerValue));else if("doubleValue"in e){const n=rc(e.doubleValue);isNaN(n)?this.le(t,13):(this.le(t,15),hc(n)?t.fe(0):t.fe(n))}else if("timestampValue"in e){const n=e.timestampValue;this.le(t,20),"string"==typeof n?t.de(n):(t.de(`${n.seconds||""}`),t.fe(n.nanos||0))}else if("stringValue"in e)this._e(e.stringValue,t),this.we(t);else if("bytesValue"in e)this.le(t,30),t.me(ic(e.bytesValue)),this.we(t);else if("referenceValue"in e)this.ge(e.referenceValue,t);else if("geoPointValue"in e){const n=e.geoPointValue;this.le(t,45),t.fe(n.latitude||0),t.fe(n.longitude||0)}else"mapValue"in e?Sc(e)?this.le(t,Number.MAX_SAFE_INTEGER):(this.ye(e.mapValue,t),this.we(t)):"arrayValue"in e?(this.pe(e.arrayValue,t),this.we(t)):da()}_e(e,t){this.le(t,25),this.Ie(e,t)}Ie(e,t){t.de(e)}ye(e,t){const n=e.fields||{};this.le(t,55);for(const e of Object.keys(n))this._e(e,t),this.ae(n[e],t)}pe(e,t){const n=e.values||[];this.le(t,50);for(const e of n)this.ae(e,t)}ge(e,t){this.le(t,37),Ma.fromName(e).path.forEach((e=>{this.le(t,60),this.Ie(e,t)}))}le(e,t){e.fe(t)}we(e){e.fe(2)}}Wl.Te=new Wl;class Kl{constructor(){this.Ye=new Gl}addToCollectionParentIndex(e,t){return this.Ye.add(t),Ba.resolve()}getCollectionParents(e,t){return Ba.resolve(this.Ye.getEntries(t))}addFieldIndex(e,t){return Ba.resolve()}deleteFieldIndex(e,t){return Ba.resolve()}getDocumentsMatchingTarget(e,t){return Ba.resolve(null)}getIndexType(e,t){return Ba.resolve(0)}getFieldIndexes(e,t){return Ba.resolve([])}getNextCollectionGroupToUpdate(e){return Ba.resolve(null)}getMinOffset(e,t){return Ba.resolve(Fa.min())}getMinOffsetFromCollectionGroup(e,t){return Ba.resolve(Fa.min())}updateCollectionGroup(e,t,n){return Ba.resolve()}updateIndexEntries(e,t){return Ba.resolve()}}class Gl{constructor(){this.index={}}add(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t]||new Ya(Oa.comparator),i=!r.has(n);return this.index[t]=r.add(n),i}has(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t];return r&&r.has(n)}getEntries(e){return(this.index[e]||new Ya(Oa.comparator)).toArray()}}new Uint8Array(0);class Ql{constructor(e,t,n){this.cacheSizeCollectionThreshold=e,this.percentileToCollect=t,this.maximumSequenceNumbersToCollect=n}static withCacheSize(e){return new Ql(e,Ql.DEFAULT_COLLECTION_PERCENTILE,Ql.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}Ql.DEFAULT_COLLECTION_PERCENTILE=10,Ql.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,Ql.DEFAULT=new Ql(41943040,Ql.DEFAULT_COLLECTION_PERCENTILE,Ql.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),Ql.DISABLED=new Ql(-1,0,0);class Xl{constructor(e){this.bn=e}next(){return this.bn+=2,this.bn}static Pn(){return new Xl(0)}static vn(){return new Xl(-1)}}class Yl{constructor(){this.changes=new $u((e=>e.toString()),((e,t)=>e.isEqual(t))),this.changesApplied=!1}addEntry(e){this.assertNotApplied(),this.changes.set(e.key,e)}removeEntry(e,t){this.assertNotApplied(),this.changes.set(e,Nc.newInvalidDocument(e).setReadTime(t))}getEntry(e,t){this.assertNotApplied();const n=this.changes.get(t);return void 0!==n?Ba.resolve(n):this.getFromCache(e,t)}getEntries(e,t){return this.getAllFromCache(e,t)}apply(e){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(e)}assertNotApplied(){}}class Jl{constructor(e,t){this.overlayedDocument=e,this.mutatedFields=t}}class Zl{constructor(e,t,n,r){this.remoteDocumentCache=e,this.mutationQueue=t,this.documentOverlayCache=n,this.indexManager=r}getDocument(e,t){let n=null;return this.documentOverlayCache.getOverlay(e,t).next((r=>(n=r,this.getBaseDocument(e,t,n)))).next((e=>(null!==n&&Nu(n.mutation,e,Za.empty(),Na.now()),e)))}getDocuments(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.getLocalViewOfDocuments(e,t,tl()).next((()=>t))))}getLocalViewOfDocuments(e,t,n=tl()){const r=Xu();return this.populateOverlays(e,r,t).next((()=>this.computeViews(e,t,r,n).next((e=>{let t=Gu();return e.forEach(((e,n)=>{t=t.insert(e,n.overlayedDocument)})),t}))))}getOverlayedDocuments(e,t){const n=Xu();return this.populateOverlays(e,n,t).next((()=>this.computeViews(e,t,n,tl())))}populateOverlays(e,t,n){const r=[];return n.forEach((e=>{t.has(e)||r.push(e)})),this.documentOverlayCache.getOverlays(e,r).next((e=>{e.forEach(((e,n)=>{t.set(e,n)}))}))}computeViews(e,t,n,r){let i=Wu();const s=Ju(),o=Ju();return t.forEach(((e,t)=>{const o=n.get(t.key);r.has(t.key)&&(void 0===o||o.mutation instanceof Lu)?i=i.insert(t.key,t):void 0!==o&&(s.set(t.key,o.mutation.getFieldMask()),Nu(o.mutation,t,o.mutation.getFieldMask(),Na.now()))})),this.recalculateAndSaveOverlays(e,i).next((e=>(e.forEach(((e,t)=>s.set(e,t))),t.forEach(((e,t)=>{var n;return o.set(e,new Jl(t,null!==(n=s.get(e))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(e,t){const n=Ju();let r=new Ga(((e,t)=>e-t)),i=tl();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e,t).next((e=>{for(const i of e)i.keys().forEach((e=>{const s=t.get(e);if(null===s)return;let o=n.get(e)||Za.empty();o=i.applyToLocalView(s,o),n.set(e,o);const a=(r.get(i.batchId)||tl()).add(e);r=r.insert(i.batchId,a)}))})).next((()=>{const s=[],o=r.getReverseIterator();for(;o.hasNext();){const r=o.getNext(),a=r.key,c=r.value,u=Yu();c.forEach((e=>{if(!i.has(e)){const r=Au(t.get(e),n.get(e));null!==r&&u.set(e,r),i=i.add(e)}})),s.push(this.documentOverlayCache.saveOverlays(e,a,u))}return Ba.waitFor(s)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.recalculateAndSaveOverlays(e,t)))}getDocumentsMatchingQuery(e,t,n){return function(e){return Ma.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}(t)?this.getDocumentsMatchingDocumentQuery(e,t.path):Zc(t)?this.getDocumentsMatchingCollectionGroupQuery(e,t,n):this.getDocumentsMatchingCollectionQuery(e,t,n)}getNextDocuments(e,t,n,r){return this.remoteDocumentCache.getAllFromCollectionGroup(e,t,n,r).next((i=>{const s=r-i.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(e,t,n.largestBatchId,r-i.size):Ba.resolve(Xu());let o=-1,a=i;return s.next((t=>Ba.forEach(t,((t,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),i.get(t)?Ba.resolve():this.getBaseDocument(e,t,n).next((e=>{a=a.insert(t,e)}))))).next((()=>this.populateOverlays(e,t,i))).next((()=>this.computeViews(e,a,t,tl()))).next((e=>({batchId:o,changes:Qu(e)})))))}))}getDocumentsMatchingDocumentQuery(e,t){return this.getDocument(e,new Ma(t)).next((e=>{let t=Gu();return e.isFoundDocument()&&(t=t.insert(e.key,e)),t}))}getDocumentsMatchingCollectionGroupQuery(e,t,n){const r=t.collectionGroup;let i=Gu();return this.indexManager.getCollectionParents(e,r).next((s=>Ba.forEach(s,(s=>{const o=function(e,t){return new Xc(t,null,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(t,s.child(r));return this.getDocumentsMatchingCollectionQuery(e,o,n).next((e=>{e.forEach(((e,t)=>{i=i.insert(e,t)}))}))})).next((()=>i))))}getDocumentsMatchingCollectionQuery(e,t,n){let r;return this.remoteDocumentCache.getAllFromCollection(e,t.path,n).next((i=>(r=i,this.documentOverlayCache.getOverlaysForCollection(e,t.path,n.largestBatchId)))).next((e=>{e.forEach(((e,t)=>{const n=t.getKey();null===r.get(n)&&(r=r.insert(n,Nc.newInvalidDocument(n)))}));let n=Gu();return r.forEach(((r,i)=>{const s=e.get(r);void 0!==s&&Nu(s.mutation,i,Za.empty(),Na.now()),ou(t,i)&&(n=n.insert(r,i))})),n}))}getBaseDocument(e,t,n){return null===n||1===n.mutation.type?this.remoteDocumentCache.getEntry(e,t):Ba.resolve(Nc.newInvalidDocument(t))}}class eh{constructor(e){this.It=e,this.Zn=new Map,this.ts=new Map}getBundleMetadata(e,t){return Ba.resolve(this.Zn.get(t))}saveBundleMetadata(e,t){var n;return this.Zn.set(t.id,{id:(n=t).id,version:n.version,createTime:wl(n.createTime)}),Ba.resolve()}getNamedQuery(e,t){return Ba.resolve(this.ts.get(t))}saveNamedQuery(e,t){return this.ts.set(t.name,function(e){return{name:e.name,query:zl(e.bundledQuery),readTime:wl(e.readTime)}}(t)),Ba.resolve()}}class th{constructor(){this.overlays=new Ga(Ma.comparator),this.es=new Map}getOverlay(e,t){return Ba.resolve(this.overlays.get(t))}getOverlays(e,t){const n=Xu();return Ba.forEach(t,(t=>this.getOverlay(e,t).next((e=>{null!==e&&n.set(t,e)})))).next((()=>n))}saveOverlays(e,t,n){return n.forEach(((n,r)=>{this.ue(e,t,r)})),Ba.resolve()}removeOverlaysForBatchId(e,t,n){const r=this.es.get(n);return void 0!==r&&(r.forEach((e=>this.overlays=this.overlays.remove(e))),this.es.delete(n)),Ba.resolve()}getOverlaysForCollection(e,t,n){const r=Xu(),i=t.length+1,s=new Ma(t.child("")),o=this.overlays.getIteratorFrom(s);for(;o.hasNext();){const e=o.getNext().value,s=e.getKey();if(!t.isPrefixOf(s.path))break;s.path.length===i&&e.largestBatchId>n&&r.set(e.getKey(),e)}return Ba.resolve(r)}getOverlaysForCollectionGroup(e,t,n,r){let i=new Ga(((e,t)=>e-t));const s=this.overlays.getIterator();for(;s.hasNext();){const e=s.getNext().value;if(e.getKey().getCollectionGroup()===t&&e.largestBatchId>n){let t=i.get(e.largestBatchId);null===t&&(t=Xu(),i=i.insert(e.largestBatchId,t)),t.set(e.getKey(),e)}}const o=Xu(),a=i.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((e,t)=>o.set(e,t))),!(o.size()>=r)););return Ba.resolve(o)}ue(e,t,n){const r=this.overlays.get(n.key);if(null!==r){const e=this.es.get(r.largestBatchId).delete(n.key);this.es.set(r.largestBatchId,e)}this.overlays=this.overlays.insert(n.key,new Bl(t,n));let i=this.es.get(t);void 0===i&&(i=tl(),this.es.set(t,i)),this.es.set(t,i.add(n.key))}}class nh{constructor(){this.ns=new Ya(rh.ss),this.rs=new Ya(rh.os)}isEmpty(){return this.ns.isEmpty()}addReference(e,t){const n=new rh(e,t);this.ns=this.ns.add(n),this.rs=this.rs.add(n)}us(e,t){e.forEach((e=>this.addReference(e,t)))}removeReference(e,t){this.cs(new rh(e,t))}hs(e,t){e.forEach((e=>this.removeReference(e,t)))}ls(e){const t=new Ma(new Oa([])),n=new rh(t,e),r=new rh(t,e+1),i=[];return this.rs.forEachInRange([n,r],(e=>{this.cs(e),i.push(e.key)})),i}fs(){this.ns.forEach((e=>this.cs(e)))}cs(e){this.ns=this.ns.delete(e),this.rs=this.rs.delete(e)}ds(e){const t=new Ma(new Oa([])),n=new rh(t,e),r=new rh(t,e+1);let i=tl();return this.rs.forEachInRange([n,r],(e=>{i=i.add(e.key)})),i}containsKey(e){const t=new rh(e,0),n=this.ns.firstAfterOrEqual(t);return null!==n&&e.isEqual(n.key)}}class rh{constructor(e,t){this.key=e,this._s=t}static ss(e,t){return Ma.comparator(e.key,t.key)||Aa(e._s,t._s)}static os(e,t){return Aa(e._s,t._s)||Ma.comparator(e.key,t.key)}}class ih{constructor(e,t){this.indexManager=e,this.referenceDelegate=t,this.mutationQueue=[],this.ws=1,this.gs=new Ya(rh.ss)}checkEmpty(e){return Ba.resolve(0===this.mutationQueue.length)}addMutationBatch(e,t,n,r){const i=this.ws;this.ws++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const s=new jl(i,t,n,r);this.mutationQueue.push(s);for(const t of r)this.gs=this.gs.add(new rh(t.key,i)),this.indexManager.addToCollectionParentIndex(e,t.key.path.popLast());return Ba.resolve(s)}lookupMutationBatch(e,t){return Ba.resolve(this.ys(t))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,r=this.ps(n),i=r<0?0:r;return Ba.resolve(this.mutationQueue.length>i?this.mutationQueue[i]:null)}getHighestUnacknowledgedBatchId(){return Ba.resolve(0===this.mutationQueue.length?-1:this.ws-1)}getAllMutationBatches(e){return Ba.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(e,t){const n=new rh(t,0),r=new rh(t,Number.POSITIVE_INFINITY),i=[];return this.gs.forEachInRange([n,r],(e=>{const t=this.ys(e._s);i.push(t)})),Ba.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new Ya(Aa);return t.forEach((e=>{const t=new rh(e,0),r=new rh(e,Number.POSITIVE_INFINITY);this.gs.forEachInRange([t,r],(e=>{n=n.add(e._s)}))})),Ba.resolve(this.Is(n))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,r=n.length+1;let i=n;Ma.isDocumentKey(i)||(i=i.child(""));const s=new rh(new Ma(i),0);let o=new Ya(Aa);return this.gs.forEachWhile((e=>{const t=e.key.path;return!!n.isPrefixOf(t)&&(t.length===r&&(o=o.add(e._s)),!0)}),s),Ba.resolve(this.Is(o))}Is(e){const t=[];return e.forEach((e=>{const n=this.ys(e);null!==n&&t.push(n)})),t}removeMutationBatch(e,t){fa(0===this.Ts(t.batchId,"removed")),this.mutationQueue.shift();let n=this.gs;return Ba.forEach(t.mutations,(r=>{const i=new rh(r.key,t.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(e,r.key)})).next((()=>{this.gs=n}))}An(e){}containsKey(e,t){const n=new rh(t,0),r=this.gs.firstAfterOrEqual(n);return Ba.resolve(t.isEqual(r&&r.key))}performConsistencyCheck(e){return this.mutationQueue.length,Ba.resolve()}Ts(e,t){return this.ps(e)}ps(e){return 0===this.mutationQueue.length?0:e-this.mutationQueue[0].batchId}ys(e){const t=this.ps(e);return t<0||t>=this.mutationQueue.length?null:this.mutationQueue[t]}}class sh{constructor(e){this.Es=e,this.docs=new Ga(Ma.comparator),this.size=0}setIndexManager(e){this.indexManager=e}addEntry(e,t){const n=t.key,r=this.docs.get(n),i=r?r.size:0,s=this.Es(t);return this.docs=this.docs.insert(n,{document:t.mutableCopy(),size:s}),this.size+=s-i,this.indexManager.addToCollectionParentIndex(e,n.path.popLast())}removeEntry(e){const t=this.docs.get(e);t&&(this.docs=this.docs.remove(e),this.size-=t.size)}getEntry(e,t){const n=this.docs.get(t);return Ba.resolve(n?n.document.mutableCopy():Nc.newInvalidDocument(t))}getEntries(e,t){let n=Wu();return t.forEach((e=>{const t=this.docs.get(e);n=n.insert(e,t?t.document.mutableCopy():Nc.newInvalidDocument(e))})),Ba.resolve(n)}getAllFromCollection(e,t,n){let r=Wu();const i=new Ma(t.child("")),s=this.docs.getIteratorFrom(i);for(;s.hasNext();){const{key:e,value:{document:i}}=s.getNext();if(!t.isPrefixOf(e.path))break;e.path.length>t.length+1||Va(Ua(i),n)<=0||(r=r.insert(i.key,i.mutableCopy()))}return Ba.resolve(r)}getAllFromCollectionGroup(e,t,n,r){da()}As(e,t){return Ba.forEach(this.docs,(e=>t(e)))}newChangeBuffer(e){return new oh(this)}getSize(e){return Ba.resolve(this.size)}}class oh extends Yl{constructor(e){super(),this.Yn=e}applyChanges(e){const t=[];return this.changes.forEach(((n,r)=>{r.isValidDocument()?t.push(this.Yn.addEntry(e,r)):this.Yn.removeEntry(n)})),Ba.waitFor(t)}getFromCache(e,t){return this.Yn.getEntry(e,t)}getAllFromCache(e,t){return this.Yn.getEntries(e,t)}}class ah{constructor(e){this.persistence=e,this.Rs=new $u((e=>Oc(e)),Lc),this.lastRemoteSnapshotVersion=Da.min(),this.highestTargetId=0,this.bs=0,this.Ps=new nh,this.targetCount=0,this.vs=Xl.Pn()}forEachTarget(e,t){return this.Rs.forEach(((e,n)=>t(n))),Ba.resolve()}getLastRemoteSnapshotVersion(e){return Ba.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(e){return Ba.resolve(this.bs)}allocateTargetId(e){return this.highestTargetId=this.vs.next(),Ba.resolve(this.highestTargetId)}setTargetsMetadata(e,t,n){return n&&(this.lastRemoteSnapshotVersion=n),t>this.bs&&(this.bs=t),Ba.resolve()}Dn(e){this.Rs.set(e.target,e);const t=e.targetId;t>this.highestTargetId&&(this.vs=new Xl(t),this.highestTargetId=t),e.sequenceNumber>this.bs&&(this.bs=e.sequenceNumber)}addTargetData(e,t){return this.Dn(t),this.targetCount+=1,Ba.resolve()}updateTargetData(e,t){return this.Dn(t),Ba.resolve()}removeTargetData(e,t){return this.Rs.delete(t.target),this.Ps.ls(t.targetId),this.targetCount-=1,Ba.resolve()}removeTargets(e,t,n){let r=0;const i=[];return this.Rs.forEach(((s,o)=>{o.sequenceNumber<=t&&null===n.get(o.targetId)&&(this.Rs.delete(s),i.push(this.removeMatchingKeysForTargetId(e,o.targetId)),r++)})),Ba.waitFor(i).next((()=>r))}getTargetCount(e){return Ba.resolve(this.targetCount)}getTargetData(e,t){const n=this.Rs.get(t)||null;return Ba.resolve(n)}addMatchingKeys(e,t,n){return this.Ps.us(t,n),Ba.resolve()}removeMatchingKeys(e,t,n){this.Ps.hs(t,n);const r=this.persistence.referenceDelegate,i=[];return r&&t.forEach((t=>{i.push(r.markPotentiallyOrphaned(e,t))})),Ba.waitFor(i)}removeMatchingKeysForTargetId(e,t){return this.Ps.ls(t),Ba.resolve()}getMatchingKeysForTargetId(e,t){const n=this.Ps.ds(t);return Ba.resolve(n)}containsKey(e,t){return Ba.resolve(this.Ps.containsKey(t))}}class ch{constructor(e,t){this.Vs={},this.overlays={},this.Ss=new $a(0),this.Ds=!1,this.Ds=!0,this.referenceDelegate=e(this),this.Cs=new ah(this),this.indexManager=new Kl,this.remoteDocumentCache=function(e){return new sh(e)}((e=>this.referenceDelegate.xs(e))),this.It=new $l(t),this.Ns=new eh(this.It)}start(){return Promise.resolve()}shutdown(){return this.Ds=!1,Promise.resolve()}get started(){return this.Ds}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(e){return this.indexManager}getDocumentOverlayCache(e){let t=this.overlays[e.toKey()];return t||(t=new th,this.overlays[e.toKey()]=t),t}getMutationQueue(e,t){let n=this.Vs[e.toKey()];return n||(n=new ih(t,this.referenceDelegate),this.Vs[e.toKey()]=n),n}getTargetCache(){return this.Cs}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.Ns}runTransaction(e,t,n){ca("MemoryPersistence","Starting transaction:",e);const r=new uh(this.Ss.next());return this.referenceDelegate.ks(),n(r).next((e=>this.referenceDelegate.Os(r).next((()=>e)))).toPromise().then((e=>(r.raiseOnCommittedEvent(),e)))}Ms(e,t){return Ba.or(Object.values(this.Vs).map((n=>()=>n.containsKey(e,t))))}}class uh extends ja{constructor(e){super(),this.currentSequenceNumber=e}}class lh{constructor(e){this.persistence=e,this.Fs=new nh,this.$s=null}static Bs(e){return new lh(e)}get Ls(){if(this.$s)return this.$s;throw da()}addReference(e,t,n){return this.Fs.addReference(n,t),this.Ls.delete(n.toString()),Ba.resolve()}removeReference(e,t,n){return this.Fs.removeReference(n,t),this.Ls.add(n.toString()),Ba.resolve()}markPotentiallyOrphaned(e,t){return this.Ls.add(t.toString()),Ba.resolve()}removeTarget(e,t){this.Fs.ls(t.targetId).forEach((e=>this.Ls.add(e.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(e,t.targetId).next((e=>{e.forEach((e=>this.Ls.add(e.toString())))})).next((()=>n.removeTargetData(e,t)))}ks(){this.$s=new Set}Os(e){const t=this.persistence.getRemoteDocumentCache().newChangeBuffer();return Ba.forEach(this.Ls,(n=>{const r=Ma.fromPath(n);return this.Us(e,r).next((e=>{e||t.removeEntry(r,Da.min())}))})).next((()=>(this.$s=null,t.apply(e))))}updateLimboDocument(e,t){return this.Us(e,t).next((e=>{e?this.Ls.delete(t.toString()):this.Ls.add(t.toString())}))}xs(e){return 0}Us(e,t){return Ba.or([()=>Ba.resolve(this.Fs.containsKey(t)),()=>this.persistence.getTargetCache().containsKey(e,t),()=>this.persistence.Ms(e,t)])}}class hh{constructor(e,t,n,r){this.targetId=e,this.fromCache=t,this.Si=n,this.Di=r}static Ci(e,t){let n=tl(),r=tl();for(const e of t.docChanges)switch(e.type){case 0:n=n.add(e.doc.key);break;case 1:r=r.add(e.doc.key)}return new hh(e,t.fromCache,n,r)}}class dh{constructor(){this.xi=!1}initialize(e,t){this.Ni=e,this.indexManager=t,this.xi=!0}getDocumentsMatchingQuery(e,t,n,r){return this.ki(e,t).next((i=>i||this.Oi(e,t,r,n))).next((n=>n||this.Mi(e,t)))}ki(e,t){if(Jc(t))return Ba.resolve(null);let n=tu(t);return this.indexManager.getIndexType(e,n).next((r=>0===r?null:(null!==t.limit&&1===r&&(t=nu(t,null,"F"),n=tu(t)),this.indexManager.getDocumentsMatchingTarget(e,n).next((r=>{const i=tl(...r);return this.Ni.getDocuments(e,i).next((r=>this.indexManager.getMinOffset(e,n).next((n=>{const s=this.Fi(t,r);return this.$i(t,s,i,n.readTime)?this.ki(e,nu(t,null,"F")):this.Bi(e,s,t,n)}))))})))))}Oi(e,t,n,r){return Jc(t)||r.isEqual(Da.min())?this.Mi(e,t):this.Ni.getDocuments(e,n).next((i=>{const s=this.Fi(t,i);return this.$i(t,s,n,r)?this.Mi(e,t):(aa()<=A.DEBUG&&ca("QueryEngine","Re-using previous result from %s to execute query: %s",r.toString(),su(t)),this.Bi(e,s,t,function(e,t){const n=e.toTimestamp().seconds,r=e.toTimestamp().nanoseconds+1,i=Da.fromTimestamp(1e9===r?new Na(n+1,0):new Na(n,r));return new Fa(i,Ma.empty(),t)}(r,-1)))}))}Fi(e,t){let n=new Ya(au(e));return t.forEach(((t,r)=>{ou(e,r)&&(n=n.add(r))})),n}$i(e,t,n,r){if(null===e.limit)return!1;if(n.size!==t.size)return!0;const i="F"===e.limitType?t.last():t.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(r)>0)}Mi(e,t){return aa()<=A.DEBUG&&ca("QueryEngine","Using full collection scan to execute query:",su(t)),this.Ni.getDocumentsMatchingQuery(e,t,Fa.min())}Bi(e,t,n,r){return this.Ni.getDocumentsMatchingQuery(e,n,r).next((e=>(t.forEach((t=>{e=e.insert(t.key,t)})),e)))}}class fh{constructor(e,t,n,r){this.persistence=e,this.Li=t,this.It=r,this.Ui=new Ga(Aa),this.qi=new $u((e=>Oc(e)),Lc),this.Ki=new Map,this.Gi=e.getRemoteDocumentCache(),this.Cs=e.getTargetCache(),this.Ns=e.getBundleCache(),this.Qi(n)}Qi(e){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(e),this.indexManager=this.persistence.getIndexManager(e),this.mutationQueue=this.persistence.getMutationQueue(e,this.indexManager),this.localDocuments=new Zl(this.Gi,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.Gi.setIndexManager(this.indexManager),this.Li.initialize(this.localDocuments,this.indexManager)}collectGarbage(e){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(t=>e.collect(t,this.Ui)))}}async function ph(e,t){const n=pa(e);return await n.persistence.runTransaction("Handle user change","readonly",(e=>{let r;return n.mutationQueue.getAllMutationBatches(e).next((i=>(r=i,n.Qi(t),n.mutationQueue.getAllMutationBatches(e)))).next((t=>{const i=[],s=[];let o=tl();for(const e of r){i.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}for(const e of t){s.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}return n.localDocuments.getDocuments(e,o).next((e=>({ji:e,removedBatchIds:i,addedBatchIds:s})))}))}))}function gh(e){const t=pa(e);return t.persistence.runTransaction("Get last remote snapshot version","readonly",(e=>t.Cs.getLastRemoteSnapshotVersion(e)))}function mh(e,t){const n=pa(e);return n.persistence.runTransaction("Get next mutation batch","readonly",(e=>(void 0===t&&(t=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(e,t))))}async function yh(e,t,n){const r=pa(e),i=r.Ui.get(t),s=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",s,(e=>r.persistence.referenceDelegate.removeTarget(e,i)))}catch(e){if(!Ha(e))throw e;ca("LocalStore",`Failed to update sequence numbers for target ${t}: ${e}`)}r.Ui=r.Ui.remove(t),r.qi.delete(i.target)}function vh(e,t,n){const r=pa(e);let i=Da.min(),s=tl();return r.persistence.runTransaction("Execute query","readonly",(e=>function(e,t,n){const r=pa(e),i=r.qi.get(n);return void 0!==i?Ba.resolve(r.Ui.get(i)):r.Cs.getTargetData(t,n)}(r,e,tu(t)).next((t=>{if(t)return i=t.lastLimboFreeSnapshotVersion,r.Cs.getMatchingKeysForTargetId(e,t.targetId).next((e=>{s=e}))})).next((()=>r.Li.getDocumentsMatchingQuery(e,t,n?i:Da.min(),n?s:tl()))).next((e=>(function(e,t,n){let r=e.Ki.get(t)||Da.min();n.forEach(((e,t)=>{t.readTime.compareTo(r)>0&&(r=t.readTime)})),e.Ki.set(t,r)}(r,function(e){return e.collectionGroup||(e.path.length%2==1?e.path.lastSegment():e.path.get(e.path.length-2))}(t),e),{documents:e,Hi:s})))))}class wh{constructor(){this.activeTargetIds=rl()}er(e){this.activeTargetIds=this.activeTargetIds.add(e)}nr(e){this.activeTargetIds=this.activeTargetIds.delete(e)}tr(){const e={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(e)}}class bh{constructor(){this.Lr=new wh,this.Ur={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(e){}updateMutationState(e,t,n){}addLocalQueryTarget(e){return this.Lr.er(e),this.Ur[e]||"not-current"}updateQueryState(e,t,n){this.Ur[e]=t}removeLocalQueryTarget(e){this.Lr.nr(e)}isLocalQueryTarget(e){return this.Lr.activeTargetIds.has(e)}clearQueryState(e){delete this.Ur[e]}getAllActiveQueryTargets(){return this.Lr.activeTargetIds}isActiveQueryTarget(e){return this.Lr.activeTargetIds.has(e)}start(){return this.Lr=new wh,Promise.resolve()}handleUserChange(e,t,n){}setOnlineState(e){}shutdown(){}writeSequenceNumber(e){}notifyBundleLoaded(e){}}class Th{qr(e){}shutdown(){}}class Eh{constructor(){this.Kr=()=>this.Gr(),this.Qr=()=>this.jr(),this.Wr=[],this.zr()}qr(e){this.Wr.push(e)}shutdown(){window.removeEventListener("online",this.Kr),window.removeEventListener("offline",this.Qr)}zr(){window.addEventListener("online",this.Kr),window.addEventListener("offline",this.Qr)}Gr(){ca("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const e of this.Wr)e(0)}jr(){ca("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const e of this.Wr)e(1)}static C(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Ih={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery",RunAggregationQuery:"runAggregationQuery"};class _h{constructor(e){this.Hr=e.Hr,this.Jr=e.Jr}Yr(e){this.Xr=e}Zr(e){this.eo=e}onMessage(e){this.no=e}close(){this.Jr()}send(e){this.Hr(e)}so(){this.Xr()}io(e){this.eo(e)}ro(e){this.no(e)}}class Ch extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http";this.oo=t+"://"+e.host,this.uo="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}get co(){return!1}ao(e,t,n,r,i){const s=this.ho(e,t);ca("RestConnection","Sending: ",s,n);const o={};return this.lo(o,r,i),this.fo(e,s,o,n).then((e=>(ca("RestConnection","Received: ",e),e)),(t=>{throw la("RestConnection",`${e} failed with error: `,t,"url: ",s,"request:",n),t}))}_o(e,t,n,r,i,s){return this.ao(e,t,n,r,i)}lo(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+sa,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}ho(e,t){const n=Ih[e];return`${this.oo}/v1/${t}:${n}`}}{constructor(e){super(e),this.forceLongPolling=e.forceLongPolling,this.autoDetectLongPolling=e.autoDetectLongPolling,this.useFetchStreams=e.useFetchStreams}fo(e,t,n,r){return new Promise(((i,s)=>{const o=new na;o.setWithCredentials(!0),o.listenOnce(Yo.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case Xo.NO_ERROR:const t=o.getResponseJson();ca("Connection","XHR received:",JSON.stringify(t)),i(t);break;case Xo.TIMEOUT:ca("Connection",'RPC "'+e+'" timed out'),s(new ma(ga.DEADLINE_EXCEEDED,"Request time out"));break;case Xo.HTTP_ERROR:const n=o.getStatus();if(ca("Connection",'RPC "'+e+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const e=o.getResponseJson().error;if(e&&e.status&&e.message){const t=function(e){const t=e.toLowerCase().replace(/_/g,"-");return Object.values(ga).indexOf(t)>=0?t:ga.UNKNOWN}(e.status);s(new ma(t,e.message))}else s(new ma(ga.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new ma(ga.UNAVAILABLE,"Connection failed."));break;default:da()}}finally{ca("Connection",'RPC "'+e+'" completed.')}}));const a=JSON.stringify(r);o.send(t,"POST",a,n,15)}))}wo(e,t,n){const r=[this.oo,"/","google.firestore.v1.Firestore","/",e,"/channel"],i=Go(),s=Qo(),o={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(o.xmlHttpFactory=new ea({})),this.lo(o.initMessageHeaders,t,n),o.encodeInitMessageHeaders=!0;const a=r.join("");ca("Connection","Creating WebChannel: "+a,o);const c=i.createWebChannel(a,o);let u=!1,l=!1;const h=new _h({Hr:e=>{l?ca("Connection","Not sending because WebChannel is closed:",e):(u||(ca("Connection","Opening WebChannel transport."),c.open(),u=!0),ca("Connection","WebChannel sending:",e),c.send(e))},Jr:()=>c.close()}),d=(e,t,n)=>{e.listen(t,(e=>{try{n(e)}catch(e){setTimeout((()=>{throw e}),0)}}))};return d(c,ta.EventType.OPEN,(()=>{l||ca("Connection","WebChannel transport opened.")})),d(c,ta.EventType.CLOSE,(()=>{l||(l=!0,ca("Connection","WebChannel transport closed"),h.io())})),d(c,ta.EventType.ERROR,(e=>{l||(l=!0,la("Connection","WebChannel transport errored:",e),h.io(new ma(ga.UNAVAILABLE,"The operation could not be completed")))})),d(c,ta.EventType.MESSAGE,(e=>{var t;if(!l){const n=e.data[0];fa(!!n);const r=n,i=r.error||(null===(t=r[0])||void 0===t?void 0:t.error);if(i){ca("Connection","WebChannel received error:",i);const e=i.status;let t=function(e){const t=qu[e];if(void 0!==t)return Hu(t)}(e),n=i.message;void 0===t&&(t=ga.INTERNAL,n="Unknown error status: "+e+" with message "+i.message),l=!0,h.io(new ma(t,n)),c.close()}else ca("Connection","WebChannel received:",n),h.ro(n)}})),d(s,Jo.STAT_EVENT,(e=>{e.stat===Zo.PROXY?ca("Connection","Detected buffering proxy"):e.stat===Zo.NOPROXY&&ca("Connection","Detected no buffering proxy")})),setTimeout((()=>{h.so()}),0),h}}function kh(){return"undefined"!=typeof document?document:null}function Sh(e){return new gl(e,!0)}class Ah{constructor(e,t,n=1e3,r=1.5,i=6e4){this.Hs=e,this.timerId=t,this.mo=n,this.yo=r,this.po=i,this.Io=0,this.To=null,this.Eo=Date.now(),this.reset()}reset(){this.Io=0}Ao(){this.Io=this.po}Ro(e){this.cancel();const t=Math.floor(this.Io+this.bo()),n=Math.max(0,Date.now()-this.Eo),r=Math.max(0,t-n);r>0&&ca("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.Io} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`),this.To=this.Hs.enqueueAfterDelay(this.timerId,r,(()=>(this.Eo=Date.now(),e()))),this.Io*=this.yo,this.Io<this.mo&&(this.Io=this.mo),this.Io>this.po&&(this.Io=this.po)}Po(){null!==this.To&&(this.To.skipDelay(),this.To=null)}cancel(){null!==this.To&&(this.To.cancel(),this.To=null)}bo(){return(Math.random()-.5)*this.Io}}class xh{constructor(e,t,n,r,i,s,o,a){this.Hs=e,this.vo=n,this.Vo=r,this.So=i,this.authCredentialsProvider=s,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Do=0,this.Co=null,this.xo=null,this.stream=null,this.No=new Ah(e,t)}ko(){return 1===this.state||5===this.state||this.Oo()}Oo(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.Mo()}async stop(){this.ko()&&await this.close(0)}Fo(){this.state=0,this.No.reset()}$o(){this.Oo()&&null===this.Co&&(this.Co=this.Hs.enqueueAfterDelay(this.vo,6e4,(()=>this.Bo())))}Lo(e){this.Uo(),this.stream.send(e)}async Bo(){if(this.Oo())return this.close(0)}Uo(){this.Co&&(this.Co.cancel(),this.Co=null)}qo(){this.xo&&(this.xo.cancel(),this.xo=null)}async close(e,t){this.Uo(),this.qo(),this.No.cancel(),this.Do++,4!==e?this.No.reset():t&&t.code===ga.RESOURCE_EXHAUSTED?(ua(t.toString()),ua("Using maximum backoff delay to prevent overloading the backend."),this.No.Ao()):t&&t.code===ga.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Ko(),this.stream.close(),this.stream=null),this.state=e,await this.listener.Zr(t)}Ko(){}auth(){this.state=1;const e=this.Go(this.Do),t=this.Do;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([e,n])=>{this.Do===t&&this.Qo(e,n)}),(t=>{e((()=>{const e=new ma(ga.UNKNOWN,"Fetching auth token failed: "+t.message);return this.jo(e)}))}))}Qo(e,t){const n=this.Go(this.Do);this.stream=this.Wo(e,t),this.stream.Yr((()=>{n((()=>(this.state=2,this.xo=this.Hs.enqueueAfterDelay(this.Vo,1e4,(()=>(this.Oo()&&(this.state=3),Promise.resolve()))),this.listener.Yr())))})),this.stream.Zr((e=>{n((()=>this.jo(e)))})),this.stream.onMessage((e=>{n((()=>this.onMessage(e)))}))}Mo(){this.state=5,this.No.Ro((async()=>{this.state=0,this.start()}))}jo(e){return ca("PersistentStream",`close with error: ${e}`),this.stream=null,this.close(4,e)}Go(e){return t=>{this.Hs.enqueueAndForget((()=>this.Do===e?t():(ca("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Nh extends xh{constructor(e,t,n,r,i,s){super(e,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",t,n,r,s),this.It=i}Wo(e,t){return this.So.wo("Listen",e,t)}onMessage(e){this.No.reset();const t=function(e,t){let n;if("targetChange"in t){t.targetChange;const r=function(e){return"NO_CHANGE"===e?0:"ADD"===e?1:"REMOVE"===e?2:"CURRENT"===e?3:"RESET"===e?4:da()}(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],s=function(e,t){return e.gt?(fa(void 0===t||"string"==typeof t),ec.fromBase64String(t||"")):(fa(void 0===t||t instanceof Uint8Array),ec.fromUint8Array(t||new Uint8Array))}(e,t.targetChange.resumeToken),o=t.targetChange.cause,a=o&&function(e){const t=void 0===e.code?ga.UNKNOWN:Hu(e.code);return new ma(t,e.message||"")}(o);n=new cl(r,i,s,a||null)}else if("documentChange"in t){t.documentChange;const r=t.documentChange;r.document,r.document.name,r.document.updateTime;const i=Il(e,r.document.name),s=wl(r.document.updateTime),o=new Ac({mapValue:{fields:r.document.fields}}),a=Nc.newFoundDocument(i,s,o),c=r.targetIds||[],u=r.removedTargetIds||[];n=new ol(c,u,a.key,a)}else if("documentDelete"in t){t.documentDelete;const r=t.documentDelete;r.document;const i=Il(e,r.document),s=r.readTime?wl(r.readTime):Da.min(),o=Nc.newNoDocument(i,s),a=r.removedTargetIds||[];n=new ol([],a,o.key,o)}else if("documentRemove"in t){t.documentRemove;const r=t.documentRemove;r.document;const i=Il(e,r.document),s=r.removedTargetIds||[];n=new ol([],s,i,null)}else{if(!("filter"in t))return da();{t.filter;const e=t.filter;e.targetId;const r=e.count||0,i=new ju(r),s=e.targetId;n=new al(s,i)}}return n}(this.It,e),n=function(e){if(!("targetChange"in e))return Da.min();const t=e.targetChange;return t.targetIds&&t.targetIds.length?Da.min():t.readTime?wl(t.readTime):Da.min()}(e);return this.listener.zo(t,n)}Ho(e){const t={};t.database=Cl(this.It),t.addTarget=function(e,t){let n;const r=t.target;return n=Pc(r)?{documents:Al(e,r)}:{query:xl(e,r)},n.targetId=t.targetId,t.resumeToken.approximateByteSize()>0?n.resumeToken=yl(e,t.resumeToken):t.snapshotVersion.compareTo(Da.min())>0&&(n.readTime=ml(e,t.snapshotVersion.toTimestamp())),n}(this.It,e);const n=function(e,t){const n=function(e,t){switch(t){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return da()}}(0,t.purpose);return null==n?null:{"goog-listen-tags":n}}(this.It,e);n&&(t.labels=n),this.Lo(t)}Jo(e){const t={};t.database=Cl(this.It),t.removeTarget=e,this.Lo(t)}}class Dh extends xh{constructor(e,t,n,r,i,s){super(e,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",t,n,r,s),this.It=i,this.Yo=!1}get Xo(){return this.Yo}start(){this.Yo=!1,this.lastStreamToken=void 0,super.start()}Ko(){this.Yo&&this.Zo([])}Wo(e,t){return this.So.wo("Write",e,t)}onMessage(e){if(fa(!!e.streamToken),this.lastStreamToken=e.streamToken,this.Yo){this.No.reset();const t=function(e,t){return e&&e.length>0?(fa(void 0!==t),e.map((e=>function(e,t){let n=e.updateTime?wl(e.updateTime):wl(t);return n.isEqual(Da.min())&&(n=wl(t)),new _u(n,e.transformResults||[])}(e,t)))):[]}(e.writeResults,e.commitTime),n=wl(e.commitTime);return this.listener.tu(n,t)}return fa(!e.writeResults||0===e.writeResults.length),this.Yo=!0,this.listener.eu()}nu(){const e={};e.database=Cl(this.It),this.Lo(e)}Zo(e){const t={streamToken:this.lastStreamToken,writes:e.map((e=>function(e,t){let n;if(t instanceof Ou)n={update:Sl(e,t.key,t.value)};else if(t instanceof Fu)n={delete:El(e,t.key)};else if(t instanceof Lu)n={update:Sl(e,t.key,t.data),updateMask:Fl(t.fieldMask)};else{if(!(t instanceof Vu))return da();n={verify:El(e,t.key)}}return t.fieldTransforms.length>0&&(n.updateTransforms=t.fieldTransforms.map((e=>function(e,t){const n=t.transform;if(n instanceof mu)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof yu)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof wu)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Tu)return{fieldPath:t.field.canonicalString(),increment:n.yt};throw da()}(0,e)))),t.precondition.isNone||(n.currentDocument=function(e,t){return void 0!==t.updateTime?{updateTime:vl(e,t.updateTime)}:void 0!==t.exists?{exists:t.exists}:da()}(e,t.precondition)),n}(this.It,e)))};this.Lo(t)}}class Rh extends class{}{constructor(e,t,n,r){super(),this.authCredentials=e,this.appCheckCredentials=t,this.So=n,this.It=r,this.su=!1}iu(){if(this.su)throw new ma(ga.FAILED_PRECONDITION,"The client has already been terminated.")}ao(e,t,n){return this.iu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([r,i])=>this.So.ao(e,t,n,r,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===ga.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new ma(ga.UNKNOWN,e.toString())}))}_o(e,t,n,r){return this.iu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,s])=>this.So._o(e,t,n,i,s,r))).catch((e=>{throw"FirebaseError"===e.name?(e.code===ga.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new ma(ga.UNKNOWN,e.toString())}))}terminate(){this.su=!0}}class Oh{constructor(e,t){this.asyncQueue=e,this.onlineStateHandler=t,this.state="Unknown",this.ru=0,this.ou=null,this.uu=!0}cu(){0===this.ru&&(this.au("Unknown"),this.ou=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.ou=null,this.hu("Backend didn't respond within 10 seconds."),this.au("Offline"),Promise.resolve()))))}lu(e){"Online"===this.state?this.au("Unknown"):(this.ru++,this.ru>=1&&(this.fu(),this.hu(`Connection failed 1 times. Most recent error: ${e.toString()}`),this.au("Offline")))}set(e){this.fu(),this.ru=0,"Online"===e&&(this.uu=!1),this.au(e)}au(e){e!==this.state&&(this.state=e,this.onlineStateHandler(e))}hu(e){const t=`Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.uu?(ua(t),this.uu=!1):ca("OnlineStateTracker",t)}fu(){null!==this.ou&&(this.ou.cancel(),this.ou=null)}}class Lh{constructor(e,t,n,r,i){this.localStore=e,this.datastore=t,this.asyncQueue=n,this.remoteSyncer={},this.du=[],this._u=new Map,this.wu=new Set,this.mu=[],this.gu=i,this.gu.qr((e=>{n.enqueueAndForget((async()=>{Hh(this)&&(ca("RemoteStore","Restarting streams for network reachability change."),await async function(e){const t=pa(e);t.wu.add(4),await Mh(t),t.yu.set("Unknown"),t.wu.delete(4),await Ph(t)}(this))}))})),this.yu=new Oh(n,r)}}async function Ph(e){if(Hh(e))for(const t of e.mu)await t(!0)}async function Mh(e){for(const t of e.mu)await t(!1)}function Uh(e,t){const n=pa(e);n._u.has(t.targetId)||(n._u.set(t.targetId,t),Bh(n)?qh(n):od(n).Oo()&&Vh(n,t))}function Fh(e,t){const n=pa(e),r=od(n);n._u.delete(t),r.Oo()&&jh(n,t),0===n._u.size&&(r.Oo()?r.$o():Hh(n)&&n.yu.set("Unknown"))}function Vh(e,t){e.pu.Mt(t.targetId),od(e).Ho(t)}function jh(e,t){e.pu.Mt(t),od(e).Jo(t)}function qh(e){e.pu=new ll({getRemoteKeysForTarget:t=>e.remoteSyncer.getRemoteKeysForTarget(t),se:t=>e._u.get(t)||null}),od(e).start(),e.yu.cu()}function Bh(e){return Hh(e)&&!od(e).ko()&&e._u.size>0}function Hh(e){return 0===pa(e).wu.size}function $h(e){e.pu=void 0}async function zh(e){e._u.forEach(((t,n)=>{Vh(e,t)}))}async function Wh(e,t){$h(e),Bh(e)?(e.yu.lu(t),qh(e)):e.yu.set("Unknown")}async function Kh(e,t,n){if(e.yu.set("Online"),t instanceof cl&&2===t.state&&t.cause)try{await async function(e,t){const n=t.cause;for(const r of t.targetIds)e._u.has(r)&&(await e.remoteSyncer.rejectListen(r,n),e._u.delete(r),e.pu.removeTarget(r))}(e,t)}catch(n){ca("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),await Gh(e,n)}else if(t instanceof ol?e.pu.Gt(t):t instanceof al?e.pu.Yt(t):e.pu.Wt(t),!n.isEqual(Da.min()))try{const t=await gh(e.localStore);n.compareTo(t)>=0&&await function(e,t){const n=e.pu.te(t);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const i=e._u.get(r);i&&e._u.set(r,i.withResumeToken(n.resumeToken,t))}})),n.targetMismatches.forEach((t=>{const n=e._u.get(t);if(!n)return;e._u.set(t,n.withResumeToken(ec.EMPTY_BYTE_STRING,n.snapshotVersion)),jh(e,t);const r=new Hl(n.target,t,1,n.sequenceNumber);Vh(e,r)})),e.remoteSyncer.applyRemoteEvent(n)}(e,n)}catch(t){ca("RemoteStore","Failed to raise snapshot:",t),await Gh(e,t)}}async function Gh(e,t,n){if(!Ha(t))throw t;e.wu.add(1),await Mh(e),e.yu.set("Offline"),n||(n=()=>gh(e.localStore)),e.asyncQueue.enqueueRetryable((async()=>{ca("RemoteStore","Retrying IndexedDB access"),await n(),e.wu.delete(1),await Ph(e)}))}function Qh(e,t){return t().catch((n=>Gh(e,n,t)))}async function Xh(e){const t=pa(e),n=ad(t);let r=t.du.length>0?t.du[t.du.length-1].batchId:-1;for(;Yh(t);)try{const e=await mh(t.localStore,r);if(null===e){0===t.du.length&&n.$o();break}r=e.batchId,Jh(t,e)}catch(e){await Gh(t,e)}Zh(t)&&ed(t)}function Yh(e){return Hh(e)&&e.du.length<10}function Jh(e,t){e.du.push(t);const n=ad(e);n.Oo()&&n.Xo&&n.Zo(t.mutations)}function Zh(e){return Hh(e)&&!ad(e).ko()&&e.du.length>0}function ed(e){ad(e).start()}async function td(e){ad(e).nu()}async function nd(e){const t=ad(e);for(const n of e.du)t.Zo(n.mutations)}async function rd(e,t,n){const r=e.du.shift(),i=ql.from(r,t,n);await Qh(e,(()=>e.remoteSyncer.applySuccessfulWrite(i))),await Xh(e)}async function id(e,t){t&&ad(e).Xo&&await async function(e,t){if(function(e){switch(e){default:return da();case ga.CANCELLED:case ga.UNKNOWN:case ga.DEADLINE_EXCEEDED:case ga.RESOURCE_EXHAUSTED:case ga.INTERNAL:case ga.UNAVAILABLE:case ga.UNAUTHENTICATED:return!1;case ga.INVALID_ARGUMENT:case ga.NOT_FOUND:case ga.ALREADY_EXISTS:case ga.PERMISSION_DENIED:case ga.FAILED_PRECONDITION:case ga.ABORTED:case ga.OUT_OF_RANGE:case ga.UNIMPLEMENTED:case ga.DATA_LOSS:return!0}}(n=t.code)&&n!==ga.ABORTED){const n=e.du.shift();ad(e).Fo(),await Qh(e,(()=>e.remoteSyncer.rejectFailedWrite(n.batchId,t))),await Xh(e)}var n}(e,t),Zh(e)&&ed(e)}async function sd(e,t){const n=pa(e);n.asyncQueue.verifyOperationInProgress(),ca("RemoteStore","RemoteStore received new credentials");const r=Hh(n);n.wu.add(3),await Mh(n),r&&n.yu.set("Unknown"),await n.remoteSyncer.handleCredentialChange(t),n.wu.delete(3),await Ph(n)}function od(e){return e.Iu||(e.Iu=function(e,t,n){const r=pa(e);return r.iu(),new Nh(t,r.So,r.authCredentials,r.appCheckCredentials,r.It,n)}(e.datastore,e.asyncQueue,{Yr:zh.bind(null,e),Zr:Wh.bind(null,e),zo:Kh.bind(null,e)}),e.mu.push((async t=>{t?(e.Iu.Fo(),Bh(e)?qh(e):e.yu.set("Unknown")):(await e.Iu.stop(),$h(e))}))),e.Iu}function ad(e){return e.Tu||(e.Tu=function(e,t,n){const r=pa(e);return r.iu(),new Dh(t,r.So,r.authCredentials,r.appCheckCredentials,r.It,n)}(e.datastore,e.asyncQueue,{Yr:td.bind(null,e),Zr:id.bind(null,e),eu:nd.bind(null,e),tu:rd.bind(null,e)}),e.mu.push((async t=>{t?(e.Tu.Fo(),await Xh(e)):(await e.Tu.stop(),e.du.length>0&&(ca("RemoteStore",`Stopping write stream with ${e.du.length} pending writes`),e.du=[]))}))),e.Tu}class cd{constructor(e,t,n,r,i){this.asyncQueue=e,this.timerId=t,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new ya,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((e=>{}))}static createAndSchedule(e,t,n,r,i){const s=Date.now()+n,o=new cd(e,t,s,r,i);return o.start(n),o}start(e){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),e)}skipDelay(){return this.handleDelayElapsed()}cancel(e){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new ma(ga.CANCELLED,"Operation cancelled"+(e?": "+e:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((e=>this.deferred.resolve(e)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function ud(e,t){if(ua("AsyncQueue",`${t}: ${e}`),Ha(e))return new ma(ga.UNAVAILABLE,`${t}: ${e}`);throw e}class ld{constructor(e){this.comparator=e?(t,n)=>e(t,n)||Ma.comparator(t.key,n.key):(e,t)=>Ma.comparator(e.key,t.key),this.keyedMap=Gu(),this.sortedSet=new Ga(this.comparator)}static emptySet(e){return new ld(e.comparator)}has(e){return null!=this.keyedMap.get(e)}get(e){return this.keyedMap.get(e)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(e){const t=this.keyedMap.get(e);return t?this.sortedSet.indexOf(t):-1}get size(){return this.sortedSet.size}forEach(e){this.sortedSet.inorderTraversal(((t,n)=>(e(t),!1)))}add(e){const t=this.delete(e.key);return t.copy(t.keyedMap.insert(e.key,e),t.sortedSet.insert(e,null))}delete(e){const t=this.get(e);return t?this.copy(this.keyedMap.remove(e),this.sortedSet.remove(t)):this}isEqual(e){if(!(e instanceof ld))return!1;if(this.size!==e.size)return!1;const t=this.sortedSet.getIterator(),n=e.sortedSet.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(!e.isEqual(r))return!1}return!0}toString(){const e=[];return this.forEach((t=>{e.push(t.toString())})),0===e.length?"DocumentSet ()":"DocumentSet (\n  "+e.join("  \n")+"\n)"}copy(e,t){const n=new ld;return n.comparator=this.comparator,n.keyedMap=e,n.sortedSet=t,n}}class hd{constructor(){this.Eu=new Ga(Ma.comparator)}track(e){const t=e.doc.key,n=this.Eu.get(t);n?0!==e.type&&3===n.type?this.Eu=this.Eu.insert(t,e):3===e.type&&1!==n.type?this.Eu=this.Eu.insert(t,{type:n.type,doc:e.doc}):2===e.type&&2===n.type?this.Eu=this.Eu.insert(t,{type:2,doc:e.doc}):2===e.type&&0===n.type?this.Eu=this.Eu.insert(t,{type:0,doc:e.doc}):1===e.type&&0===n.type?this.Eu=this.Eu.remove(t):1===e.type&&2===n.type?this.Eu=this.Eu.insert(t,{type:1,doc:n.doc}):0===e.type&&1===n.type?this.Eu=this.Eu.insert(t,{type:2,doc:e.doc}):da():this.Eu=this.Eu.insert(t,e)}Au(){const e=[];return this.Eu.inorderTraversal(((t,n)=>{e.push(n)})),e}}class dd{constructor(e,t,n,r,i,s,o,a,c){this.query=e,this.docs=t,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=s,this.syncStateChanged=o,this.excludesMetadataChanges=a,this.hasCachedResults=c}static fromInitialDocuments(e,t,n,r,i){const s=[];return t.forEach((e=>{s.push({type:0,doc:e})})),new dd(e,t,ld.emptySet(t),s,n,r,!0,!1,i)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(e){if(!(this.fromCache===e.fromCache&&this.hasCachedResults===e.hasCachedResults&&this.syncStateChanged===e.syncStateChanged&&this.mutatedKeys.isEqual(e.mutatedKeys)&&ru(this.query,e.query)&&this.docs.isEqual(e.docs)&&this.oldDocs.isEqual(e.oldDocs)))return!1;const t=this.docChanges,n=e.docChanges;if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(t[e].type!==n[e].type||!t[e].doc.isEqual(n[e].doc))return!1;return!0}}class fd{constructor(){this.Ru=void 0,this.listeners=[]}}class pd{constructor(){this.queries=new $u((e=>iu(e)),ru),this.onlineState="Unknown",this.bu=new Set}}function gd(e,t){const n=pa(e);let r=!1;for(const e of t){const t=e.query,i=n.queries.get(t);if(i){for(const t of i.listeners)t.vu(e)&&(r=!0);i.Ru=e}}r&&yd(n)}function md(e,t,n){const r=pa(e),i=r.queries.get(t);if(i)for(const e of i.listeners)e.onError(n);r.queries.delete(t)}function yd(e){e.bu.forEach((e=>{e.next()}))}class vd{constructor(e,t,n){this.query=e,this.Vu=t,this.Su=!1,this.Du=null,this.onlineState="Unknown",this.options=n||{}}vu(e){if(!this.options.includeMetadataChanges){const t=[];for(const n of e.docChanges)3!==n.type&&t.push(n);e=new dd(e.query,e.docs,e.oldDocs,t,e.mutatedKeys,e.fromCache,e.syncStateChanged,!0,e.hasCachedResults)}let t=!1;return this.Su?this.Cu(e)&&(this.Vu.next(e),t=!0):this.xu(e,this.onlineState)&&(this.Nu(e),t=!0),this.Du=e,t}onError(e){this.Vu.error(e)}Pu(e){this.onlineState=e;let t=!1;return this.Du&&!this.Su&&this.xu(this.Du,e)&&(this.Nu(this.Du),t=!0),t}xu(e,t){if(!e.fromCache)return!0;const n="Offline"!==t;return(!this.options.ku||!n)&&(!e.docs.isEmpty()||e.hasCachedResults||"Offline"===t)}Cu(e){if(e.docChanges.length>0)return!0;const t=this.Du&&this.Du.hasPendingWrites!==e.hasPendingWrites;return!(!e.syncStateChanged&&!t)&&!0===this.options.includeMetadataChanges}Nu(e){e=dd.fromInitialDocuments(e.query,e.docs,e.mutatedKeys,e.fromCache,e.hasCachedResults),this.Su=!0,this.Vu.next(e)}}class wd{constructor(e){this.key=e}}class bd{constructor(e){this.key=e}}class Td{constructor(e,t){this.query=e,this.Uu=t,this.qu=null,this.hasCachedResults=!1,this.current=!1,this.Ku=tl(),this.mutatedKeys=tl(),this.Gu=au(e),this.Qu=new ld(this.Gu)}get ju(){return this.Uu}Wu(e,t){const n=t?t.zu:new hd,r=t?t.Qu:this.Qu;let i=t?t.mutatedKeys:this.mutatedKeys,s=r,o=!1;const a="F"===this.query.limitType&&r.size===this.query.limit?r.last():null,c="L"===this.query.limitType&&r.size===this.query.limit?r.first():null;if(e.inorderTraversal(((e,t)=>{const u=r.get(e),l=ou(this.query,t)?t:null,h=!!u&&this.mutatedKeys.has(u.key),d=!!l&&(l.hasLocalMutations||this.mutatedKeys.has(l.key)&&l.hasCommittedMutations);let f=!1;u&&l?u.data.isEqual(l.data)?h!==d&&(n.track({type:3,doc:l}),f=!0):this.Hu(u,l)||(n.track({type:2,doc:l}),f=!0,(a&&this.Gu(l,a)>0||c&&this.Gu(l,c)<0)&&(o=!0)):!u&&l?(n.track({type:0,doc:l}),f=!0):u&&!l&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(l?(s=s.add(l),i=d?i.add(e):i.delete(e)):(s=s.delete(e),i=i.delete(e)))})),null!==this.query.limit)for(;s.size>this.query.limit;){const e="F"===this.query.limitType?s.last():s.first();s=s.delete(e.key),i=i.delete(e.key),n.track({type:1,doc:e})}return{Qu:s,zu:n,$i:o,mutatedKeys:i}}Hu(e,t){return e.hasLocalMutations&&t.hasCommittedMutations&&!t.hasLocalMutations}applyChanges(e,t,n){const r=this.Qu;this.Qu=e.Qu,this.mutatedKeys=e.mutatedKeys;const i=e.zu.Au();i.sort(((e,t)=>function(e,t){const n=e=>{switch(e){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return da()}};return n(e)-n(t)}(e.type,t.type)||this.Gu(e.doc,t.doc))),this.Ju(n);const s=t?this.Yu():[],o=0===this.Ku.size&&this.current?1:0,a=o!==this.qu;return this.qu=o,0!==i.length||a?{snapshot:new dd(this.query,e.Qu,r,i,e.mutatedKeys,0===o,a,!1,!!n&&n.resumeToken.approximateByteSize()>0),Xu:s}:{Xu:s}}Pu(e){return this.current&&"Offline"===e?(this.current=!1,this.applyChanges({Qu:this.Qu,zu:new hd,mutatedKeys:this.mutatedKeys,$i:!1},!1)):{Xu:[]}}Zu(e){return!this.Uu.has(e)&&!!this.Qu.has(e)&&!this.Qu.get(e).hasLocalMutations}Ju(e){e&&(e.addedDocuments.forEach((e=>this.Uu=this.Uu.add(e))),e.modifiedDocuments.forEach((e=>{})),e.removedDocuments.forEach((e=>this.Uu=this.Uu.delete(e))),this.current=e.current)}Yu(){if(!this.current)return[];const e=this.Ku;this.Ku=tl(),this.Qu.forEach((e=>{this.Zu(e.key)&&(this.Ku=this.Ku.add(e.key))}));const t=[];return e.forEach((e=>{this.Ku.has(e)||t.push(new bd(e))})),this.Ku.forEach((n=>{e.has(n)||t.push(new wd(n))})),t}tc(e){this.Uu=e.Hi,this.Ku=tl();const t=this.Wu(e.documents);return this.applyChanges(t,!0)}ec(){return dd.fromInitialDocuments(this.query,this.Qu,this.mutatedKeys,0===this.qu,this.hasCachedResults)}}class Ed{constructor(e,t,n){this.query=e,this.targetId=t,this.view=n}}class Id{constructor(e){this.key=e,this.nc=!1}}class _d{constructor(e,t,n,r,i,s){this.localStore=e,this.remoteStore=t,this.eventManager=n,this.sharedClientState=r,this.currentUser=i,this.maxConcurrentLimboResolutions=s,this.sc={},this.ic=new $u((e=>iu(e)),ru),this.rc=new Map,this.oc=new Set,this.uc=new Ga(Ma.comparator),this.cc=new Map,this.ac=new nh,this.hc={},this.lc=new Map,this.fc=Xl.vn(),this.onlineState="Unknown",this.dc=void 0}get isPrimaryClient(){return!0===this.dc}}async function Cd(e,t){const n=function(e){const t=pa(e);return t.remoteStore.remoteSyncer.applyRemoteEvent=Sd.bind(null,t),t.remoteStore.remoteSyncer.getRemoteKeysForTarget=qd.bind(null,t),t.remoteStore.remoteSyncer.rejectListen=xd.bind(null,t),t.sc.zo=gd.bind(null,t.eventManager),t.sc.wc=md.bind(null,t.eventManager),t}(e);let r,i;const s=n.ic.get(t);if(s)r=s.targetId,n.sharedClientState.addLocalQueryTarget(r),i=s.view.ec();else{const e=await function(e,t){const n=pa(e);return n.persistence.runTransaction("Allocate target","readwrite",(e=>{let r;return n.Cs.getTargetData(e,t).next((i=>i?(r=i,Ba.resolve(r)):n.Cs.allocateTargetId(e).next((i=>(r=new Hl(t,i,0,e.currentSequenceNumber),n.Cs.addTargetData(e,r).next((()=>r)))))))})).then((e=>{const r=n.Ui.get(e.targetId);return(null===r||e.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.Ui=n.Ui.insert(e.targetId,e),n.qi.set(t,e.targetId)),e}))}(n.localStore,tu(t));n.isPrimaryClient&&Uh(n.remoteStore,e);const s=n.sharedClientState.addLocalQueryTarget(e.targetId);r=e.targetId,i=await async function(e,t,n,r,i){e._c=(t,n,r)=>async function(e,t,n,r){let i=t.view.Wu(n);i.$i&&(i=await vh(e.localStore,t.query,!1).then((({documents:e})=>t.view.Wu(e,i))));const s=r&&r.targetChanges.get(t.targetId),o=t.view.applyChanges(i,e.isPrimaryClient,s);return Md(e,t.targetId,o.Xu),o.snapshot}(e,t,n,r);const s=await vh(e.localStore,t,!0),o=new Td(t,s.Hi),a=o.Wu(s.documents),c=sl.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==e.onlineState,i),u=o.applyChanges(a,e.isPrimaryClient,c);Md(e,n,u.Xu);const l=new Ed(t,n,o);return e.ic.set(t,l),e.rc.has(n)?e.rc.get(n).push(t):e.rc.set(n,[t]),u.snapshot}(n,t,r,"current"===s,e.resumeToken)}return i}async function kd(e,t){const n=pa(e),r=n.ic.get(t),i=n.rc.get(r.targetId);if(i.length>1)return n.rc.set(r.targetId,i.filter((e=>!ru(e,t)))),void n.ic.delete(t);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(r.targetId),n.sharedClientState.isActiveQueryTarget(r.targetId)||await yh(n.localStore,r.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(r.targetId),Fh(n.remoteStore,r.targetId),Ld(n,r.targetId)})).catch(qa)):(Ld(n,r.targetId),await yh(n.localStore,r.targetId,!0))}async function Sd(e,t){const n=pa(e);try{const e=await function(e,t){const n=pa(e),r=t.snapshotVersion;let i=n.Ui;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(e=>{const s=n.Gi.newChangeBuffer({trackRemovals:!0});i=n.Ui;const o=[];t.targetChanges.forEach(((s,a)=>{const c=i.get(a);if(!c)return;o.push(n.Cs.removeMatchingKeys(e,s.removedDocuments,a).next((()=>n.Cs.addMatchingKeys(e,s.addedDocuments,a))));let u=c.withSequenceNumber(e.currentSequenceNumber);t.targetMismatches.has(a)?u=u.withResumeToken(ec.EMPTY_BYTE_STRING,Da.min()).withLastLimboFreeSnapshotVersion(Da.min()):s.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(s.resumeToken,r)),i=i.insert(a,u),function(e,t,n){return 0===e.resumeToken.approximateByteSize()||t.snapshotVersion.toMicroseconds()-e.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,u,s)&&o.push(n.Cs.updateTargetData(e,u))}));let a=Wu(),c=tl();if(t.documentUpdates.forEach((r=>{t.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(e,r))})),o.push(function(e,t,n){let r=tl(),i=tl();return n.forEach((e=>r=r.add(e))),t.getEntries(e,r).next((e=>{let r=Wu();return n.forEach(((n,s)=>{const o=e.get(n);s.isFoundDocument()!==o.isFoundDocument()&&(i=i.add(n)),s.isNoDocument()&&s.version.isEqual(Da.min())?(t.removeEntry(n,s.readTime),r=r.insert(n,s)):!o.isValidDocument()||s.version.compareTo(o.version)>0||0===s.version.compareTo(o.version)&&o.hasPendingWrites?(t.addEntry(s),r=r.insert(n,s)):ca("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",s.version)})),{Wi:r,zi:i}}))}(e,s,t.documentUpdates).next((e=>{a=e.Wi,c=e.zi}))),!r.isEqual(Da.min())){const t=n.Cs.getLastRemoteSnapshotVersion(e).next((t=>n.Cs.setTargetsMetadata(e,e.currentSequenceNumber,r)));o.push(t)}return Ba.waitFor(o).next((()=>s.apply(e))).next((()=>n.localDocuments.getLocalViewOfDocuments(e,a,c))).next((()=>a))})).then((e=>(n.Ui=i,e)))}(n.localStore,t);t.targetChanges.forEach(((e,t)=>{const r=n.cc.get(t);r&&(fa(e.addedDocuments.size+e.modifiedDocuments.size+e.removedDocuments.size<=1),e.addedDocuments.size>0?r.nc=!0:e.modifiedDocuments.size>0?fa(r.nc):e.removedDocuments.size>0&&(fa(r.nc),r.nc=!1))})),await Vd(n,e,t)}catch(e){await qa(e)}}function Ad(e,t,n){const r=pa(e);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const e=[];r.ic.forEach(((n,r)=>{const i=r.view.Pu(t);i.snapshot&&e.push(i.snapshot)})),function(e,t){const n=pa(e);n.onlineState=t;let r=!1;n.queries.forEach(((e,n)=>{for(const e of n.listeners)e.Pu(t)&&(r=!0)})),r&&yd(n)}(r.eventManager,t),e.length&&r.sc.zo(e),r.onlineState=t,r.isPrimaryClient&&r.sharedClientState.setOnlineState(t)}}async function xd(e,t,n){const r=pa(e);r.sharedClientState.updateQueryState(t,"rejected",n);const i=r.cc.get(t),s=i&&i.key;if(s){let e=new Ga(Ma.comparator);e=e.insert(s,Nc.newNoDocument(s,Da.min()));const n=tl().add(s),i=new il(Da.min(),new Map,new Ya(Aa),e,n);await Sd(r,i),r.uc=r.uc.remove(s),r.cc.delete(t),Fd(r)}else await yh(r.localStore,t,!1).then((()=>Ld(r,t,n))).catch(qa)}async function Nd(e,t){const n=pa(e),r=t.batch.batchId;try{const e=await function(e,t){const n=pa(e);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(e=>{const r=t.batch.keys(),i=n.Gi.newChangeBuffer({trackRemovals:!0});return function(e,t,n,r){const i=n.batch,s=i.keys();let o=Ba.resolve();return s.forEach((e=>{o=o.next((()=>r.getEntry(t,e))).next((t=>{const s=n.docVersions.get(e);fa(null!==s),t.version.compareTo(s)<0&&(i.applyToRemoteDocument(t,n),t.isValidDocument()&&(t.setReadTime(n.commitVersion),r.addEntry(t)))}))})),o.next((()=>e.mutationQueue.removeMutationBatch(t,i)))}(n,e,t,i).next((()=>i.apply(e))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,function(e){let t=tl();for(let n=0;n<e.mutationResults.length;++n)e.mutationResults[n].transformResults.length>0&&(t=t.add(e.batch.mutations[n].key));return t}(t)))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(n.localStore,t);Od(n,r,null),Rd(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Vd(n,e)}catch(e){await qa(e)}}async function Dd(e,t,n){const r=pa(e);try{const e=await function(e,t){const n=pa(e);return n.persistence.runTransaction("Reject batch","readwrite-primary",(e=>{let r;return n.mutationQueue.lookupMutationBatch(e,t).next((t=>(fa(null!==t),r=t.keys(),n.mutationQueue.removeMutationBatch(e,t)))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,r))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(r.localStore,t);Od(r,t,n),Rd(r,t),r.sharedClientState.updateMutationState(t,"rejected",n),await Vd(r,e)}catch(n){await qa(n)}}function Rd(e,t){(e.lc.get(t)||[]).forEach((e=>{e.resolve()})),e.lc.delete(t)}function Od(e,t,n){const r=pa(e);let i=r.hc[r.currentUser.toKey()];if(i){const e=i.get(t);e&&(n?e.reject(n):e.resolve(),i=i.remove(t)),r.hc[r.currentUser.toKey()]=i}}function Ld(e,t,n=null){e.sharedClientState.removeLocalQueryTarget(t);for(const r of e.rc.get(t))e.ic.delete(r),n&&e.sc.wc(r,n);e.rc.delete(t),e.isPrimaryClient&&e.ac.ls(t).forEach((t=>{e.ac.containsKey(t)||Pd(e,t)}))}function Pd(e,t){e.oc.delete(t.path.canonicalString());const n=e.uc.get(t);null!==n&&(Fh(e.remoteStore,n),e.uc=e.uc.remove(t),e.cc.delete(n),Fd(e))}function Md(e,t,n){for(const r of n)r instanceof wd?(e.ac.addReference(r.key,t),Ud(e,r)):r instanceof bd?(ca("SyncEngine","Document no longer in limbo: "+r.key),e.ac.removeReference(r.key,t),e.ac.containsKey(r.key)||Pd(e,r.key)):da()}function Ud(e,t){const n=t.key,r=n.path.canonicalString();e.uc.get(n)||e.oc.has(r)||(ca("SyncEngine","New document in limbo: "+n),e.oc.add(r),Fd(e))}function Fd(e){for(;e.oc.size>0&&e.uc.size<e.maxConcurrentLimboResolutions;){const t=e.oc.values().next().value;e.oc.delete(t);const n=new Ma(Oa.fromString(t)),r=e.fc.next();e.cc.set(r,new Id(n)),e.uc=e.uc.insert(n,r),Uh(e.remoteStore,new Hl(tu(Yc(n.path)),r,2,$a.at))}}async function Vd(e,t,n){const r=pa(e),i=[],s=[],o=[];r.ic.isEmpty()||(r.ic.forEach(((e,a)=>{o.push(r._c(a,t,n).then((e=>{if((e||n)&&r.isPrimaryClient&&r.sharedClientState.updateQueryState(a.targetId,(null==e?void 0:e.fromCache)?"not-current":"current"),e){i.push(e);const t=hh.Ci(a.targetId,e);s.push(t)}})))})),await Promise.all(o),r.sc.zo(i),await async function(e,t){const n=pa(e);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(e=>Ba.forEach(t,(t=>Ba.forEach(t.Si,(r=>n.persistence.referenceDelegate.addReference(e,t.targetId,r))).next((()=>Ba.forEach(t.Di,(r=>n.persistence.referenceDelegate.removeReference(e,t.targetId,r)))))))))}catch(e){if(!Ha(e))throw e;ca("LocalStore","Failed to update sequence numbers: "+e)}for(const e of t){const t=e.targetId;if(!e.fromCache){const e=n.Ui.get(t),r=e.snapshotVersion,i=e.withLastLimboFreeSnapshotVersion(r);n.Ui=n.Ui.insert(t,i)}}}(r.localStore,s))}async function jd(e,t){const n=pa(e);if(!n.currentUser.isEqual(t)){ca("SyncEngine","User change. New user:",t.toKey());const e=await ph(n.localStore,t);n.currentUser=t,function(e,t){e.lc.forEach((e=>{e.forEach((e=>{e.reject(new ma(ga.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),e.lc.clear()}(n),n.sharedClientState.handleUserChange(t,e.removedBatchIds,e.addedBatchIds),await Vd(n,e.ji)}}function qd(e,t){const n=pa(e),r=n.cc.get(t);if(r&&r.nc)return tl().add(r.key);{let e=tl();const r=n.rc.get(t);if(!r)return e;for(const t of r){const r=n.ic.get(t);e=e.unionWith(r.view.ju)}return e}}function Bd(e){const t=pa(e);return t.remoteStore.remoteSyncer.applySuccessfulWrite=Nd.bind(null,t),t.remoteStore.remoteSyncer.rejectFailedWrite=Dd.bind(null,t),t}class Hd{constructor(){this.synchronizeTabs=!1}async initialize(e){this.It=Sh(e.databaseInfo.databaseId),this.sharedClientState=this.gc(e),this.persistence=this.yc(e),await this.persistence.start(),this.localStore=this.Ic(e),this.gcScheduler=this.Tc(e,this.localStore),this.indexBackfillerScheduler=this.Ec(e,this.localStore)}Tc(e,t){return null}Ec(e,t){return null}Ic(e){return function(e,t,n,r){return new fh(e,t,n,r)}(this.persistence,new dh,e.initialUser,this.It)}yc(e){return new ch(lh.Bs,this.It)}gc(e){return new bh}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class $d{async initialize(e,t){this.localStore||(this.localStore=e.localStore,this.sharedClientState=e.sharedClientState,this.datastore=this.createDatastore(t),this.remoteStore=this.createRemoteStore(t),this.eventManager=this.createEventManager(t),this.syncEngine=this.createSyncEngine(t,!e.synchronizeTabs),this.sharedClientState.onlineStateHandler=e=>Ad(this.syncEngine,e,1),this.remoteStore.remoteSyncer.handleCredentialChange=jd.bind(null,this.syncEngine),await async function(e,t){const n=pa(e);t?(n.wu.delete(2),await Ph(n)):t||(n.wu.add(2),await Mh(n),n.yu.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(e){return new pd}createDatastore(e){const t=Sh(e.databaseInfo.databaseId),n=(r=e.databaseInfo,new Ch(r));var r;return function(e,t,n,r){return new Rh(e,t,n,r)}(e.authCredentials,e.appCheckCredentials,n,t)}createRemoteStore(e){return t=this.localStore,n=this.datastore,r=e.asyncQueue,i=e=>Ad(this.syncEngine,e,0),s=Eh.C()?new Eh:new Th,new Lh(t,n,r,i,s);var t,n,r,i,s}createSyncEngine(e,t){return function(e,t,n,r,i,s,o){const a=new _d(e,t,n,r,i,s);return o&&(a.dc=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,e.initialUser,e.maxConcurrentLimboResolutions,t)}terminate(){return async function(e){const t=pa(e);ca("RemoteStore","RemoteStore shutting down."),t.wu.add(5),await Mh(t),t.gu.shutdown(),t.yu.set("Unknown")}(this.remoteStore)}}function zd(e,t,n){if(!n)throw new ma(ga.INVALID_ARGUMENT,`Function ${e}() cannot be called with an empty ${t}.`)}function Wd(e){if(!Ma.isDocumentKey(e))throw new ma(ga.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`)}function Kd(e){if(Ma.isDocumentKey(e))throw new ma(ga.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`)}function Gd(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":da()}function Qd(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new ma(ga.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Gd(e);throw new ma(ga.INVALID_ARGUMENT,`Expected type '${t.name}', but it was: ${n}`)}}return e}function Xd(e,t){if(t<=0)throw new ma(ga.INVALID_ARGUMENT,`Function ${e}() requires a positive number, but it was: ${t}.`)}const Yd=new Map;class Jd{constructor(e){var t;if(void 0===e.host){if(void 0!==e.ssl)throw new ma(ga.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new ma(ga.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.useFetchStreams=!!e.useFetchStreams,function(e,t,n,r){if(!0===t&&!0===r)throw new ma(ga.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,e.experimentalForceLongPolling,0,e.experimentalAutoDetectLongPolling)}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams}}class Zd{constructor(e,t,n,r){this._authCredentials=e,this._appCheckCredentials=t,this._databaseId=n,this._app=r,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new Jd({}),this._settingsFrozen=!1}get app(){if(!this._app)throw new ma(ga.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new ma(ga.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new Jd(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new wa;switch(e.type){case"gapi":const t=e.client;return new Ia(t,e.sessionIndex||"0",e.iamToken||null,e.authTokenFactory||null);case"provider":return e.client;default:throw new ma(ga.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=Yd.get(e);t&&(ca("ComponentProvider","Removing Datastore"),Yd.delete(e),t.terminate())}(this),Promise.resolve()}}class ef{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new nf(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new ef(this.firestore,e,this._key)}}class tf{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new tf(this.firestore,e,this._query)}}class nf extends tf{constructor(e,t,n){super(e,t,Yc(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new ef(this.firestore,null,new Ma(e))}withConverter(e){return new nf(this.firestore,e,this._path)}}function rf(e,t,...n){if(e=E(e),zd("collection","path",t),e instanceof Zd){const r=Oa.fromString(t,...n);return Kd(r),new nf(e,null,r)}{if(!(e instanceof ef||e instanceof nf))throw new ma(ga.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(Oa.fromString(t,...n));return Kd(r),new nf(e.firestore,null,r)}}function sf(e,t,...n){if(e=E(e),1===arguments.length&&(t=Sa.R()),zd("doc","path",t),e instanceof Zd){const r=Oa.fromString(t,...n);return Wd(r),new ef(e,null,new Ma(r))}{if(!(e instanceof ef||e instanceof nf))throw new ma(ga.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(Oa.fromString(t,...n));return Wd(r),new ef(e.firestore,e instanceof nf?e.converter:null,new Ma(r))}}class of{constructor(e){this.observer=e,this.muted=!1}next(e){this.observer.next&&this.Rc(this.observer.next,e)}error(e){this.observer.error?this.Rc(this.observer.error,e):ua("Uncaught Error in snapshot listener:",e)}bc(){this.muted=!0}Rc(e,t){this.muted||setTimeout((()=>{this.muted||e(t)}),0)}}class af{constructor(e,t,n,r){this.authCredentials=e,this.appCheckCredentials=t,this.asyncQueue=n,this.databaseInfo=r,this.user=ia.UNAUTHENTICATED,this.clientId=Sa.R(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async e=>{ca("FirestoreClient","Received user=",e.uid),await this.authCredentialListener(e),this.user=e})),this.appCheckCredentials.start(n,(e=>(ca("FirestoreClient","Received new app check token=",e),this.appCheckCredentialListener(e,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(e){this.authCredentialListener=e}setAppCheckTokenChangeListener(e){this.appCheckCredentialListener=e}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new ma(ga.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const e=new ya;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),e.resolve()}catch(t){const n=ud(t,"Failed to shutdown persistence");e.reject(n)}})),e.promise}}async function cf(e,t){e.asyncQueue.verifyOperationInProgress();const n=await async function(e){return e.offlineComponents||(ca("FirestoreClient","Using default OfflineComponentProvider"),await async function(e,t){e.asyncQueue.verifyOperationInProgress(),ca("FirestoreClient","Initializing OfflineComponentProvider");const n=await e.getConfiguration();await t.initialize(n);let r=n.initialUser;e.setCredentialChangeListener((async e=>{r.isEqual(e)||(await ph(t.localStore,e),r=e)})),t.persistence.setDatabaseDeletedListener((()=>e.terminate())),e.offlineComponents=t}(e,new Hd)),e.offlineComponents}(e);ca("FirestoreClient","Initializing OnlineComponentProvider");const r=await e.getConfiguration();await t.initialize(n,r),e.setCredentialChangeListener((e=>sd(t.remoteStore,e))),e.setAppCheckTokenChangeListener(((e,n)=>sd(t.remoteStore,n))),e.onlineComponents=t}async function uf(e){return e.onlineComponents||(ca("FirestoreClient","Using default OnlineComponentProvider"),await cf(e,new $d)),e.onlineComponents}async function lf(e){const t=await uf(e),n=t.eventManager;return n.onListen=Cd.bind(null,t.syncEngine),n.onUnlisten=kd.bind(null,t.syncEngine),n}function hf(e,t,n={}){const r=new ya;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,r,i){const s=new of({next:n=>{t.enqueueAndForget((()=>async function(e,t){const n=pa(e),r=t.query;let i=!1;const s=n.queries.get(r);if(s){const e=s.listeners.indexOf(t);e>=0&&(s.listeners.splice(e,1),i=0===s.listeners.length)}if(i)return n.queries.delete(r),n.onUnlisten(r)}(e,o))),n.fromCache&&"server"===r.source?i.reject(new ma(ga.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:e=>i.reject(e)}),o=new vd(n,s,{includeMetadataChanges:!0,ku:!0});return async function(e,t){const n=pa(e),r=t.query;let i=!1,s=n.queries.get(r);if(s||(i=!0,s=new fd),i)try{s.Ru=await n.onListen(r)}catch(e){const n=ud(e,`Initialization of query '${su(t.query)}' failed`);return void t.onError(n)}n.queries.set(r,s),s.listeners.push(t),t.Pu(n.onlineState),s.Ru&&t.vu(s.Ru)&&yd(n)}(e,o)}(await lf(e),e.asyncQueue,t,n,r))),r.promise}class df{constructor(){this.Bc=Promise.resolve(),this.Lc=[],this.Uc=!1,this.qc=[],this.Kc=null,this.Gc=!1,this.Qc=!1,this.jc=[],this.No=new Ah(this,"async_queue_retry"),this.Wc=()=>{const e=kh();e&&ca("AsyncQueue","Visibility state changed to "+e.visibilityState),this.No.Po()};const e=kh();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.Wc)}get isShuttingDown(){return this.Uc}enqueueAndForget(e){this.enqueue(e)}enqueueAndForgetEvenWhileRestricted(e){this.zc(),this.Hc(e)}enterRestrictedMode(e){if(!this.Uc){this.Uc=!0,this.Qc=e||!1;const t=kh();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.Wc)}}enqueue(e){if(this.zc(),this.Uc)return new Promise((()=>{}));const t=new ya;return this.Hc((()=>this.Uc&&this.Qc?Promise.resolve():(e().then(t.resolve,t.reject),t.promise))).then((()=>t.promise))}enqueueRetryable(e){this.enqueueAndForget((()=>(this.Lc.push(e),this.Jc())))}async Jc(){if(0!==this.Lc.length){try{await this.Lc[0](),this.Lc.shift(),this.No.reset()}catch(e){if(!Ha(e))throw e;ca("AsyncQueue","Operation failed with retryable error: "+e)}this.Lc.length>0&&this.No.Ro((()=>this.Jc()))}}Hc(e){const t=this.Bc.then((()=>(this.Gc=!0,e().catch((e=>{this.Kc=e,this.Gc=!1;const t=function(e){let t=e.message||"";return e.stack&&(t=e.stack.includes(e.message)?e.stack:e.message+"\n"+e.stack),t}(e);throw ua("INTERNAL UNHANDLED ERROR: ",t),e})).then((e=>(this.Gc=!1,e))))));return this.Bc=t,t}enqueueAfterDelay(e,t,n){this.zc(),this.jc.indexOf(e)>-1&&(t=0);const r=cd.createAndSchedule(this,e,t,n,(e=>this.Yc(e)));return this.qc.push(r),r}zc(){this.Kc&&da()}verifyOperationInProgress(){}async Xc(){let e;do{e=this.Bc,await e}while(e!==this.Bc)}Zc(e){for(const t of this.qc)if(t.timerId===e)return!0;return!1}ta(e){return this.Xc().then((()=>{this.qc.sort(((e,t)=>e.targetTimeMs-t.targetTimeMs));for(const t of this.qc)if(t.skipDelay(),"all"!==e&&t.timerId===e)break;return this.Xc()}))}ea(e){this.jc.push(e)}Yc(e){const t=this.qc.indexOf(e);this.qc.splice(t,1)}}class ff extends Zd{constructor(e,t,n,r){super(e,t,n,r),this.type="firestore",this._queue=new df,this._persistenceKey=(null==r?void 0:r.name)||"[DEFAULT]"}_terminate(){return this._firestoreClient||gf(this),this._firestoreClient.terminate()}}function pf(e){return e._firestoreClient||gf(e),e._firestoreClient.verifyNotTerminated(),e._firestoreClient}function gf(e){var t;const n=e._freezeSettings(),r=function(e,t,n,r){return new cc(e,t,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,r.useFetchStreams)}(e._databaseId,(null===(t=e._app)||void 0===t?void 0:t.options.appId)||"",e._persistenceKey,n);e._firestoreClient=new af(e._authCredentials,e._appCheckCredentials,e._queue,r)}class mf{constructor(e){this._byteString=e}static fromBase64String(e){try{return new mf(ec.fromBase64String(e))}catch(e){throw new ma(ga.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new mf(ec.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class yf{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new ma(ga.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Pa(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class vf{constructor(e){this._methodName=e}}class wf{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new ma(ga.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new ma(ga.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return Aa(this._lat,e._lat)||Aa(this._long,e._long)}}const bf=/^__.*__$/;class Tf{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return null!==this.fieldMask?new Lu(e,this.data,this.fieldMask,t,this.fieldTransforms):new Ou(e,this.data,t,this.fieldTransforms)}}class Ef{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return new Lu(e,this.data,this.fieldMask,t,this.fieldTransforms)}}function If(e){switch(e){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw da()}}class _f{constructor(e,t,n,r,i,s){this.settings=e,this.databaseId=t,this.It=n,this.ignoreUndefinedProperties=r,void 0===i&&this.na(),this.fieldTransforms=i||[],this.fieldMask=s||[]}get path(){return this.settings.path}get sa(){return this.settings.sa}ia(e){return new _f(Object.assign(Object.assign({},this.settings),e),this.databaseId,this.It,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}ra(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.ia({path:n,oa:!1});return r.ua(e),r}ca(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.ia({path:n,oa:!1});return r.na(),r}aa(e){return this.ia({path:void 0,oa:!0})}ha(e){return Uf(e,this.settings.methodName,this.settings.la||!1,this.path,this.settings.fa)}contains(e){return void 0!==this.fieldMask.find((t=>e.isPrefixOf(t)))||void 0!==this.fieldTransforms.find((t=>e.isPrefixOf(t.field)))}na(){if(this.path)for(let e=0;e<this.path.length;e++)this.ua(this.path.get(e))}ua(e){if(0===e.length)throw this.ha("Document fields must not be empty");if(If(this.sa)&&bf.test(e))throw this.ha('Document fields cannot begin and end with "__"')}}class Cf{constructor(e,t,n){this.databaseId=e,this.ignoreUndefinedProperties=t,this.It=n||Sh(e)}da(e,t,n,r=!1){return new _f({sa:e,methodName:t,fa:n,path:Pa.emptyPath(),oa:!1,la:r},this.databaseId,this.It,this.ignoreUndefinedProperties)}}function kf(e){const t=e._freezeSettings(),n=Sh(e._databaseId);return new Cf(e._databaseId,!!t.ignoreUndefinedProperties,n)}function Sf(e,t,n,r,i,s={}){const o=e.da(s.merge||s.mergeFields?2:0,t,n,i);Of("Data must be an object, but it was:",o,r);const a=Df(r,o);let c,u;if(s.merge)c=new Za(o.fieldMask),u=o.fieldTransforms;else if(s.mergeFields){const e=[];for(const r of s.mergeFields){const i=Lf(t,r,n);if(!o.contains(i))throw new ma(ga.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);Ff(e,i)||e.push(i)}c=new Za(e),u=o.fieldTransforms.filter((e=>c.covers(e.field)))}else c=null,u=o.fieldTransforms;return new Tf(new Ac(a),c,u)}class Af extends vf{_toFieldTransform(e){if(2!==e.sa)throw 1===e.sa?e.ha(`${this._methodName}() can only appear at the top level of your update data`):e.ha(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return e.fieldMask.push(e.path),null}isEqual(e){return e instanceof Af}}function xf(e,t,n,r=!1){return Nf(n,e.da(r?4:3,t))}function Nf(e,t){if(Rf(e=E(e)))return Of("Unsupported field value:",t,e),Df(e,t);if(e instanceof vf)return function(e,t){if(!If(t.sa))throw t.ha(`${e._methodName}() can only be used with update() and set()`);if(!t.path)throw t.ha(`${e._methodName}() is not currently supported inside arrays`);const n=e._toFieldTransform(t);n&&t.fieldTransforms.push(n)}(e,t),null;if(void 0===e&&t.ignoreUndefinedProperties)return null;if(t.path&&t.fieldMask.push(t.path),e instanceof Array){if(t.settings.oa&&4!==t.sa)throw t.ha("Nested arrays are not supported");return function(e,t){const n=[];let r=0;for(const i of e){let e=Nf(i,t.aa(r));null==e&&(e={nullValue:"NULL_VALUE"}),n.push(e),r++}return{arrayValue:{values:n}}}(e,t)}return function(e,t){if(null===(e=E(e)))return{nullValue:"NULL_VALUE"};if("number"==typeof e)return hu(t.It,e);if("boolean"==typeof e)return{booleanValue:e};if("string"==typeof e)return{stringValue:e};if(e instanceof Date){const n=Na.fromDate(e);return{timestampValue:ml(t.It,n)}}if(e instanceof Na){const n=new Na(e.seconds,1e3*Math.floor(e.nanoseconds/1e3));return{timestampValue:ml(t.It,n)}}if(e instanceof wf)return{geoPointValue:{latitude:e.latitude,longitude:e.longitude}};if(e instanceof mf)return{bytesValue:yl(t.It,e._byteString)};if(e instanceof ef){const n=t.databaseId,r=e.firestore._databaseId;if(!r.isEqual(n))throw t.ha(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:bl(e.firestore._databaseId||t.databaseId,e._key.path)}}throw t.ha(`Unsupported field value: ${Gd(e)}`)}(e,t)}function Df(e,t){const n={};return Ka(e)?t.path&&t.path.length>0&&t.fieldMask.push(t.path):Wa(e,((e,r)=>{const i=Nf(r,t.ra(e));null!=i&&(n[e]=i)})),{mapValue:{fields:n}}}function Rf(e){return!("object"!=typeof e||null===e||e instanceof Array||e instanceof Date||e instanceof Na||e instanceof wf||e instanceof mf||e instanceof ef||e instanceof vf)}function Of(e,t,n){if(!Rf(n)||!function(e){return"object"==typeof e&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}(n)){const r=Gd(n);throw"an object"===r?t.ha(e+" a custom object"):t.ha(e+" "+r)}}function Lf(e,t,n){if((t=E(t))instanceof yf)return t._internalPath;if("string"==typeof t)return Mf(e,t);throw Uf("Field path arguments must be of type string or ",e,!1,void 0,n)}const Pf=new RegExp("[~\\*/\\[\\]]");function Mf(e,t,n){if(t.search(Pf)>=0)throw Uf(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new yf(...t.split("."))._internalPath}catch(r){throw Uf(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}function Uf(e,t,n,r,i){const s=r&&!r.isEmpty(),o=void 0!==i;let a=`Function ${t}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${r}`),o&&(c+=` in document ${i}`),c+=")"),new ma(ga.INVALID_ARGUMENT,a+e+c)}function Ff(e,t){return e.some((e=>e.isEqual(t)))}class Vf{constructor(e,t,n,r,i){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=r,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new ef(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new jf(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(qf("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class jf extends Vf{data(){return super.data()}}function qf(e,t){return"string"==typeof t?Mf(e,t):t instanceof yf?t._internalPath:t._delegate._internalPath}class Bf{}function Hf(e,...t){for(const n of t)e=n._apply(e);return e}class $f extends Bf{constructor(e,t,n){super(),this.type=e,this.Ia=t,this.Ta=n}_apply(e){return new tf(e.firestore,e.converter,nu(e._query,this.Ia,this.Ta))}}function zf(e){return Xd("limit",e),new $f("limit",e,"F")}class Wf extends Bf{constructor(e,t,n){super(),this.type=e,this.Ea=t,this.Aa=n}_apply(e){const t=Xf(e,this.type,this.Ea,this.Aa);return new tf(e.firestore,e.converter,function(e,t){return new Xc(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,t,e.endAt)}(e._query,t))}}function Kf(...e){return new Wf("startAfter",e,!1)}class Gf extends Bf{constructor(e,t,n){super(),this.type=e,this.Ea=t,this.Aa=n}_apply(e){const t=Xf(e,this.type,this.Ea,this.Aa);return new tf(e.firestore,e.converter,function(e,t){return new Xc(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,t)}(e._query,t))}}function Qf(...e){return new Gf("endBefore",e,!1)}function Xf(e,t,n,r){if(n[0]=E(n[0]),n[0]instanceof Vf)return function(e,t,n,r,i){if(!r)throw new ma(ga.NOT_FOUND,`Can't use a DocumentSnapshot that doesn't exist for ${n}().`);const s=[];for(const n of eu(e))if(n.field.isKeyField())s.push(bc(t,r.key));else{const e=r.data.field(n.field);if(sc(e))throw new ma(ga.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+n.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===e){const e=n.field.canonicalString();throw new ma(ga.INVALID_ARGUMENT,`Invalid query. You are trying to start or end a query using a document for which the field '${e}' (used as the orderBy) does not exist.`)}s.push(e)}return new zc(s,i)}(e._query,e.firestore._databaseId,t,n[0]._document,r);{const i=kf(e.firestore);return function(e,t,n,r,i,s){const o=e.explicitOrderBy;if(i.length>o.length)throw new ma(ga.INVALID_ARGUMENT,`Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);const a=[];for(let s=0;s<i.length;s++){const c=i[s];if(o[s].field.isKeyField()){if("string"!=typeof c)throw new ma(ga.INVALID_ARGUMENT,`Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);if(!Zc(e)&&-1!==c.indexOf("/"))throw new ma(ga.INVALID_ARGUMENT,`Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);const n=e.path.child(Oa.fromString(c));if(!Ma.isDocumentKey(n))throw new ma(ga.INVALID_ARGUMENT,`Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);const i=new Ma(n);a.push(bc(t,i))}else{const e=xf(n,r,c);a.push(e)}}return new zc(a,s)}(e._query,e.firestore._databaseId,i,t,n,r)}}class Yf{convertValue(e,t="none"){switch(fc(e)){case 0:return null;case 1:return e.booleanValue;case 2:return rc(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(ic(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw da()}}convertObject(e,t){const n={};return Wa(e.fields,((e,r)=>{n[e]=this.convertValue(r,t)})),n}convertGeoPoint(e){return new wf(rc(e.latitude),rc(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=oc(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(ac(e));default:return null}}convertTimestamp(e){const t=nc(e);return new Na(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=Oa.fromString(e);fa(Vl(n));const r=new uc(n.get(1),n.get(3)),i=new Ma(n.popFirst(5));return r.isEqual(t)||ua(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),i}}class Jf{constructor(e,t){this.hasPendingWrites=e,this.fromCache=t}isEqual(e){return this.hasPendingWrites===e.hasPendingWrites&&this.fromCache===e.fromCache}}class Zf extends Vf{constructor(e,t,n,r,i,s){super(e,t,n,r,s),this._firestore=e,this._firestoreImpl=e,this.metadata=i}exists(){return super.exists()}data(e={}){if(this._document){if(this._converter){const t=new ep(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(t,e)}return this._userDataWriter.convertValue(this._document.data.value,e.serverTimestamps)}}get(e,t={}){if(this._document){const n=this._document.data.field(qf("DocumentSnapshot.get",e));if(null!==n)return this._userDataWriter.convertValue(n,t.serverTimestamps)}}}class ep extends Zf{data(e={}){return super.data(e)}}class tp{constructor(e,t,n,r){this._firestore=e,this._userDataWriter=t,this._snapshot=r,this.metadata=new Jf(r.hasPendingWrites,r.fromCache),this.query=n}get docs(){const e=[];return this.forEach((t=>e.push(t))),e}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(e,t){this._snapshot.docs.forEach((n=>{e.call(t,new ep(this._firestore,this._userDataWriter,n.key,n,new Jf(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(e={}){const t=!!e.includeMetadataChanges;if(t&&this._snapshot.excludesMetadataChanges)throw new ma(ga.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===t||(this._cachedChanges=function(e,t){if(e._snapshot.oldDocs.isEmpty()){let t=0;return e._snapshot.docChanges.map((n=>({type:"added",doc:new ep(e._firestore,e._userDataWriter,n.doc.key,n.doc,new Jf(e._snapshot.mutatedKeys.has(n.doc.key),e._snapshot.fromCache),e.query.converter),oldIndex:-1,newIndex:t++})))}{let n=e._snapshot.oldDocs;return e._snapshot.docChanges.filter((e=>t||3!==e.type)).map((t=>{const r=new ep(e._firestore,e._userDataWriter,t.doc.key,t.doc,new Jf(e._snapshot.mutatedKeys.has(t.doc.key),e._snapshot.fromCache),e.query.converter);let i=-1,s=-1;return 0!==t.type&&(i=n.indexOf(t.doc.key),n=n.delete(t.doc.key)),1!==t.type&&(n=n.add(t.doc),s=n.indexOf(t.doc.key)),{type:np(t.type),doc:r,oldIndex:i,newIndex:s}}))}}(this,t),this._cachedChangesIncludeMetadataChanges=t),this._cachedChanges}}function np(e){switch(e){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return da()}}class rp extends Yf{constructor(e){super(),this.firestore=e}convertBytes(e){return new mf(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new ef(this.firestore,null,t)}}function ip(e){e=Qd(e,tf);const t=Qd(e.firestore,ff),n=pf(t),r=new rp(t);return function(e){if("L"===e.limitType&&0===e.explicitOrderBy.length)throw new ma(ga.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(e._query),hf(n,e._query).then((n=>new tp(t,r,e,n)))}function sp(e,t){return function(e,t){const n=new ya;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){const r=Bd(e);try{const e=await function(e,t){const n=pa(e),r=Na.now(),i=t.reduce(((e,t)=>e.add(t.key)),tl());let s,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(e=>{let a=Wu(),c=tl();return n.Gi.getEntries(e,i).next((e=>{a=e,a.forEach(((e,t)=>{t.isValidDocument()||(c=c.add(e))}))})).next((()=>n.localDocuments.getOverlayedDocuments(e,a))).next((i=>{s=i;const o=[];for(const e of t){const t=Du(e,s.get(e.key).overlayedDocument);null!=t&&o.push(new Lu(e.key,t,xc(t.value.mapValue),Cu.exists(!0)))}return n.mutationQueue.addMutationBatch(e,r,o,t)})).next((t=>{o=t;const r=t.applyToLocalDocumentSet(s,c);return n.documentOverlayCache.saveOverlays(e,t.batchId,r)}))})).then((()=>({batchId:o.batchId,changes:Qu(s)})))}(r.localStore,t);r.sharedClientState.addPendingMutation(e.batchId),function(e,t,n){let r=e.hc[e.currentUser.toKey()];r||(r=new Ga(Aa)),r=r.insert(t,n),e.hc[e.currentUser.toKey()]=r}(r,e.batchId,n),await Vd(r,e.changes),await Xh(r.remoteStore)}catch(e){const t=ud(e,"Failed to persist write");n.reject(t)}}(await function(e){return uf(e).then((e=>e.syncEngine))}(e),t,n))),n.promise}(pf(e),t)}!function(e,t=!0){sa="9.12.1",oe(new I("firestore",((e,{instanceIdentifier:n,options:r})=>{const i=e.getProvider("app").getImmediate(),s=new ff(new Ta(e.getProvider("auth-internal")),new Ca(e.getProvider("app-check-internal")),function(e,t){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new ma(ga.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new uc(e.options.projectId,t)}(i,n),i);return r=Object.assign({useFetchStreams:t},r),s._setSettings(r),s}),"PUBLIC").setMultipleInstances(!0)),fe(ra,"3.7.1",e),fe(ra,"3.7.1","esm2017")}();const op="firebasestorage.googleapis.com";class ap extends d{constructor(e,t,n=0){super(cp(e),`Firebase Storage: ${t} (${cp(e)})`),this.status_=n,this.customData={serverResponse:null},this._baseMessage=this.message,Object.setPrototypeOf(this,ap.prototype)}get status(){return this.status_}set status(e){this.status_=e}_codeEquals(e){return cp(e)===this.code}get serverResponse(){return this.customData.serverResponse}set serverResponse(e){this.customData.serverResponse=e,this.customData.serverResponse?this.message=`${this._baseMessage}\n${this.customData.serverResponse}`:this.message=this._baseMessage}}function cp(e){return"storage/"+e}function up(e){return new ap("invalid-argument",e)}function lp(){return new ap("app-deleted","The Firebase app was deleted.")}class hp{constructor(e,t){this.bucket=e,this.path_=t}get path(){return this.path_}get isRoot(){return 0===this.path.length}fullServerUrl(){const e=encodeURIComponent;return"/b/"+e(this.bucket)+"/o/"+e(this.path)}bucketOnlyServerUrl(){return"/b/"+encodeURIComponent(this.bucket)+"/o"}static makeFromBucketSpec(e,t){let n;try{n=hp.makeFromUrl(e,t)}catch(t){return new hp(e,"")}if(""===n.path)return n;throw new ap("invalid-default-bucket","Invalid default bucket '"+e+"'.")}static makeFromUrl(e,t){let n=null;const r="([A-Za-z0-9.\\-_]+)",i=new RegExp("^gs://"+r+"(/(.*))?$","i");function s(e){e.path_=decodeURIComponent(e.path)}const o=t.replace(/[.]/g,"\\."),a=[{regex:i,indices:{bucket:1,path:3},postModify:function(e){"/"===e.path.charAt(e.path.length-1)&&(e.path_=e.path_.slice(0,-1))}},{regex:new RegExp(`^https?://${o}/v[A-Za-z0-9_]+/b/${r}/o(/([^?#]*).*)?$`,"i"),indices:{bucket:1,path:3},postModify:s},{regex:new RegExp(`^https?://${t===op?"(?:storage.googleapis.com|storage.cloud.google.com)":t}/${r}/([^?#]*)`,"i"),indices:{bucket:1,path:2},postModify:s}];for(let t=0;t<a.length;t++){const r=a[t],i=r.regex.exec(e);if(i){const e=i[r.indices.bucket];let t=i[r.indices.path];t||(t=""),n=new hp(e,t),r.postModify(n);break}}if(null==n)throw function(e){return new ap("invalid-url","Invalid URL '"+e+"'.")}(e);return n}}class dp{constructor(e){this.promise_=Promise.reject(e)}getPromise(){return this.promise_}cancel(e=!1){}}function fp(e,t,n,r){if(r<t)throw up(`Invalid value for '${e}'. Expected ${t} or greater.`);if(r>n)throw up(`Invalid value for '${e}'. Expected ${n} or less.`)}var pp;!function(e){e[e.NO_ERROR=0]="NO_ERROR",e[e.NETWORK_ERROR=1]="NETWORK_ERROR",e[e.ABORT=2]="ABORT"}(pp||(pp={}));class gp{constructor(e,t,n,r,i,s,o,a,c,u,l,h=!0){this.url_=e,this.method_=t,this.headers_=n,this.body_=r,this.successCodes_=i,this.additionalRetryCodes_=s,this.callback_=o,this.errorCallback_=a,this.timeout_=c,this.progressCallback_=u,this.connectionFactory_=l,this.retry=h,this.pendingConnection_=null,this.backoffId_=null,this.canceled_=!1,this.appDelete_=!1,this.promise_=new Promise(((e,t)=>{this.resolve_=e,this.reject_=t,this.start_()}))}start_(){const e=(e,t)=>{const n=this.resolve_,r=this.reject_,i=t.connection;if(t.wasSuccessCode)try{const e=this.callback_(i,i.getResponse());!function(e){return void 0!==e}(e)?n():n(e)}catch(e){r(e)}else if(null!==i){const e=new ap("unknown","An unknown error occurred, please check the error payload for server response.");e.serverResponse=i.getErrorText(),this.errorCallback_?r(this.errorCallback_(i,e)):r(e)}else t.canceled?r(this.appDelete_?lp():new ap("canceled","User canceled the upload/download.")):r(new ap("retry-limit-exceeded","Max retry time for operation exceeded, please try again."))};this.canceled_?e(0,new mp(!1,null,!0)):this.backoffId_=function(e,t,n){let r=1,i=null,s=null,o=!1,a=0;function c(){return 2===a}let u=!1;function l(...e){u||(u=!0,t.apply(null,e))}function h(t){i=setTimeout((()=>{i=null,e(f,c())}),t)}function d(){s&&clearTimeout(s)}function f(e,...t){if(u)return void d();if(e)return d(),void l.call(null,e,...t);if(c()||o)return d(),void l.call(null,e,...t);let n;r<64&&(r*=2),1===a?(a=2,n=0):n=1e3*(r+Math.random()),h(n)}let p=!1;function g(e){p||(p=!0,d(),u||(null!==i?(e||(a=2),clearTimeout(i),h(0)):e||(a=1)))}return h(0),s=setTimeout((()=>{o=!0,g(!0)}),n),g}(((e,t)=>{if(t)return void e(!1,new mp(!1,null,!0));const n=this.connectionFactory_();this.pendingConnection_=n;const r=e=>{const t=e.loaded,n=e.lengthComputable?e.total:-1;null!==this.progressCallback_&&this.progressCallback_(t,n)};null!==this.progressCallback_&&n.addUploadProgressListener(r),n.send(this.url_,this.method_,this.body_,this.headers_).then((()=>{null!==this.progressCallback_&&n.removeUploadProgressListener(r),this.pendingConnection_=null;const t=n.getErrorCode()===pp.NO_ERROR,i=n.getStatus();if((!t||function(e,t){const n=e>=500&&e<600,r=-1!==[408,429].indexOf(e),i=-1!==t.indexOf(e);return n||r||i}(i,this.additionalRetryCodes_))&&this.retry){const t=n.getErrorCode()===pp.ABORT;return void e(!1,new mp(!1,null,t))}const s=-1!==this.successCodes_.indexOf(i);e(!0,new mp(s,n))}))}),e,this.timeout_)}getPromise(){return this.promise_}cancel(e){this.canceled_=!0,this.appDelete_=e||!1,null!==this.backoffId_&&function(e){e(!1)}(this.backoffId_),null!==this.pendingConnection_&&this.pendingConnection_.abort()}}class mp{constructor(e,t,n){this.wasSuccessCode=e,this.connection=t,this.canceled=!!n}}class yp{constructor(e,t){this._service=e,this._location=t instanceof hp?t:hp.makeFromUrl(t,e.host)}toString(){return"gs://"+this._location.bucket+"/"+this._location.path}_newRef(e,t){return new yp(e,t)}get root(){const e=new hp(this._location.bucket,"");return this._newRef(this._service,e)}get bucket(){return this._location.bucket}get fullPath(){return this._location.path}get name(){return function(e){const t=e.lastIndexOf("/",e.length-2);return-1===t?e:e.slice(t+1)}(this._location.path)}get storage(){return this._service}get parent(){const e=function(e){if(0===e.length)return null;const t=e.lastIndexOf("/");return-1===t?"":e.slice(0,t)}(this._location.path);if(null===e)return null;const t=new hp(this._location.bucket,e);return new yp(this._service,t)}_throwIfRoot(e){if(""===this._location.path)throw function(e){return new ap("invalid-root-operation","The operation '"+e+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(e)}}function vp(e,t){const n=null==t?void 0:t.storageBucket;return null==n?null:hp.makeFromBucketSpec(n,e)}class wp{constructor(e,t,n,r,i){this.app=e,this._authProvider=t,this._appCheckProvider=n,this._url=r,this._firebaseVersion=i,this._bucket=null,this._host=op,this._protocol="https",this._appId=null,this._deleted=!1,this._maxOperationRetryTime=12e4,this._maxUploadRetryTime=6e5,this._requests=new Set,this._bucket=null!=r?hp.makeFromBucketSpec(r,this._host):vp(this._host,this.app.options)}get host(){return this._host}set host(e){this._host=e,null!=this._url?this._bucket=hp.makeFromBucketSpec(this._url,e):this._bucket=vp(e,this.app.options)}get maxUploadRetryTime(){return this._maxUploadRetryTime}set maxUploadRetryTime(e){fp("time",0,Number.POSITIVE_INFINITY,e),this._maxUploadRetryTime=e}get maxOperationRetryTime(){return this._maxOperationRetryTime}set maxOperationRetryTime(e){fp("time",0,Number.POSITIVE_INFINITY,e),this._maxOperationRetryTime=e}async _getAuthToken(){if(this._overrideAuthToken)return this._overrideAuthToken;const e=this._authProvider.getImmediate({optional:!0});if(e){const t=await e.getToken();if(null!==t)return t.accessToken}return null}async _getAppCheckToken(){const e=this._appCheckProvider.getImmediate({optional:!0});return e?(await e.getToken()).token:null}_delete(){return this._deleted||(this._deleted=!0,this._requests.forEach((e=>e.cancel())),this._requests.clear()),Promise.resolve()}_makeStorageReference(e){return new yp(this,e)}_makeRequest(e,t,n,r,i=!0){if(this._deleted)return new dp(lp());{const s=function(e,t,n,r,i,s,o=!0){const a=function(e){const t=encodeURIComponent;let n="?";for(const r in e)e.hasOwnProperty(r)&&(n=n+(t(r)+"=")+t(e[r])+"&");return n=n.slice(0,-1),n}(e.urlParams),c=e.url+a,u=Object.assign({},e.headers);return function(e,t){t&&(e["X-Firebase-GMPID"]=t)}(u,t),function(e,t){null!==t&&t.length>0&&(e.Authorization="Firebase "+t)}(u,n),function(e,t){e["X-Firebase-Storage-Version"]="webjs/"+(null!=t?t:"AppManager")}(u,s),function(e,t){null!==t&&(e["X-Firebase-AppCheck"]=t)}(u,r),new gp(c,e.method,u,e.body,e.successCodes,e.additionalRetryCodes,e.handler,e.errorHandler,e.timeout,e.progressCallback,i,o)}(e,this._appId,n,r,t,this._firebaseVersion,i);return this._requests.add(s),s.getPromise().then((()=>this._requests.delete(s)),(()=>this._requests.delete(s))),s}}async makeRequestWithTokens(e,t){const[n,r]=await Promise.all([this._getAuthToken(),this._getAppCheckToken()]);return this._makeRequest(e,t,n,r).getPromise()}}const bp="@firebase/storage",Tp="0.9.12",Ep="storage";function Ip(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}function _p(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,kp(e,t,"get"))}function Cp(e,t,n){return function(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}(e,kp(e,t,"set"),n),n}function kp(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}oe(new I(Ep,(function(e,{instanceIdentifier:t}){const n=e.getProvider("app").getImmediate(),r=e.getProvider("auth-internal"),i=e.getProvider("app-check-internal");return new wp(n,r,i,t,le)}),"PUBLIC").setMultipleInstances(!0)),fe(bp,Tp,""),fe(bp,Tp,"esm2017");var Sp=new WeakMap,Ap=new WeakMap,xp=new WeakMap,Np=new WeakMap,Dp=new WeakMap;class Rp{constructor(){var e,t;t={apiKey:"AIzaSyCDkEotyALyyS3B8UU7KPrSKcQXjbdsTKQ",authDomain:"jupitor2-webpack.firebaseapp.com",projectId:"jupitor2-webpack",storageBucket:"jupitor2-webpack.appspot.com",messagingSenderId:"911670423800",appId:"1:911670423800:web:ef40f37b4f33130015cb0d",measurementId:"G-V4ZFBQ55HF"},(e="firebaseConfig")in this?Object.defineProperty(this,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):this[e]=t,Ip(this,Sp,{writable:!0,value:null}),Ip(this,Ap,{writable:!0,value:null}),Ip(this,xp,{writable:!0,value:null}),Ip(this,Np,{writable:!0,value:null}),Ip(this,Dp,{writable:!0,value:null}),Cp(this,Sp,he(this.firebaseConfig)),Cp(this,Ap,Jn(_p(this,Sp))),Cp(this,Np,function(e,t){const n="string"==typeof e?e:t||"(default)",r=ae("object"==typeof e?e:de(),"firestore").getImmediate({identifier:n});if(!r._initialized){const e=c("firestore");e&&function(e,t,n,r={}){var i;const s=(e=Qd(e,Zd))._getSettings();if("firestore.googleapis.com"!==s.host&&s.host!==t&&la("Host has been set in both settings() and useEmulator(), emulator host will be used"),e._setSettings(Object.assign(Object.assign({},s),{host:`${t}:${n}`,ssl:!1})),r.mockUserToken){let t,n;if("string"==typeof r.mockUserToken)t=r.mockUserToken,n=ia.MOCK_USER;else{t=h(r.mockUserToken,null===(i=e._app)||void 0===i?void 0:i.options.projectId);const s=r.mockUserToken.sub||r.mockUserToken.user_id;if(!s)throw new ma(ga.INVALID_ARGUMENT,"mockUserToken must contain 'sub' or 'user_id' field!");n=new ia(s)}e._authCredentials=new ba(new va(t,n))}}(r,...e)}return r}(_p(this,Sp))),Cp(this,xp,function(e=de(),t){const n=ae(e=E(e),Ep).getImmediate({identifier:t}),r=c("storage");return r&&function(e,t,n,r={}){!function(e,t,n,r={}){e.host=`${t}:${n}`,e._protocol="http";const{mockUserToken:i}=r;i&&(e._overrideAuthToken="string"==typeof i?i:h(i,e.app.options.projectId))}(e,t,n,r)}(n,...r),n}(_p(this,Sp)))}get getCurrentuser(){return _p(this,Dp)}get getDb(){return _p(this,Np)}get getStorage(){return _p(this,xp)}get operators(){return["=="]}async signUp(e,t){return async function(e,t,n){const r=_t(e),i=await async function(e,t){return Ke(e,"POST","/v1/accounts:signUp",$e(e,t))}(r,{returnSecureToken:!0,email:t,password:n}),s=await Bt._fromIdTokenResponse(r,"signIn",i);return await r._updateCurrentUser(s.user),s}(_p(this,Ap),e,t).then((e=>(Cp(this,Dp,e),_p(this,Dp)))).catch((e=>{throw new Op(e)}))}async signIn(e,t){return function(e,t,n){return async function(e,t){return Wt(_t(e),t)}(E(e),Pt.credential(t,n))}(_p(this,Ap),e,t).then((e=>(Cp(this,Dp,e.user),_p(this,Dp)))).catch((e=>{throw new Op(e)}))}signOut(){_p(this,Ap).signOut()}onFirstData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=rf(_p(this,Np),e),r=[zf(10)];return r=[...t,...r],ip(Hf(n,...r))}onNextData(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];if(t&&n){let t=rf(_p(this,Np),e),i=[Kf(n),zf(10)];return i=[...r,...i],ip(Hf(t,...i))}console.log("Can't navigate yet")}onPrevData(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];if(t&&n){let n=rf(_p(this,Np),e),i=[Qf(t)];return i=[...r,...i],ip(Hf(n,...i,(Xd("limitToLast",10),new $f("limitToLast",10,"L"))))}console.log("Can't navigate yet")}onUpdate(e,t,n){return function(e,t,n,...r){e=Qd(e,ef);const i=Qd(e.firestore,ff),s=kf(i);let o;return o="string"==typeof(t=E(t))||t instanceof yf?function(e,t,n,r,i,s){const o=e.da(1,t,n),a=[Lf(t,r,n)],c=[i];if(s.length%2!=0)throw new ma(ga.INVALID_ARGUMENT,`Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let e=0;e<s.length;e+=2)a.push(Lf(t,s[e])),c.push(s[e+1]);const u=[],l=Ac.empty();for(let e=a.length-1;e>=0;--e)if(!Ff(u,a[e])){const t=a[e];let n=c[e];n=E(n);const r=o.ca(t);if(n instanceof Af)u.push(t);else{const e=Nf(n,r);null!=e&&(u.push(t),l.set(t,e))}}const h=new Za(u);return new Ef(l,h,o.fieldTransforms)}(s,"updateDoc",e._key,t,n,r):function(e,t,n,r){const i=e.da(1,t,n);Of("Data must be an object, but it was:",i,r);const s=[],o=Ac.empty();Wa(r,((e,r)=>{const a=Mf(t,e,n);r=E(r);const c=i.ca(a);if(r instanceof Af)s.push(a);else{const e=Nf(r,c);null!=e&&(s.push(a),o.set(a,e))}}));const a=new Za(s);return new Ef(o,a,i.fieldTransforms)}(s,"updateDoc",e._key,t),sp(i,[o.toMutation(e._key,Cu.exists(!0))])}(sf(_p(this,Np),e,t),n)}async setDocument(e,t){return function(e,t,n){e=Qd(e,ef);const r=Qd(e.firestore,ff),i=function(e,t,n){let r;return r=e?n&&(n.merge||n.mergeFields)?e.toFirestore(t,n):e.toFirestore(t):t,r}(e.converter,t,n);return sp(r,[Sf(kf(r),"setDoc",e._key,i,null!==e.converter,n).toMutation(e._key,Cu.none())])}(sf(rf(_p(this,Np),e)),t)}async watchUser(e){var t;t=t=>{Cp(this,Dp,t||null),e(!!t)},E(_p(this,Ap)).onAuthStateChanged(t,undefined,undefined)}}class Op extends Error{constructor(e){super(),this.code=e.code,this.message=e.message}}var Lp=n(9755);async function Pp(e){e.preventDefault();const t=new Rp,n=Lp("#signup_form input[name=email]").val(),r=Lp("#signup_form input[name=password]").val();t.signIn(n,r).then((()=>{window.location.replace("quote.html")})).catch((e=>{alert(e)}))}console.log("init login"),window.onload=()=>{Lp("input[name=name]").val("khinemyaezin"),Lp("input[name=email]").val("admin@cs.com"),Lp("input[name=password]").val("admin@123"),Lp("#signup_form").on("submit",Pp)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixDQUFPNW1ILEdBREZzc0IsR0FBVyxHQUFBeHVCLEtBQUksSUFBTTZuSCxJQUNUMWdILEVBQzFCLENBRUFpNkIsZ0JBQWdCajlCLEdKczhLbEIsSUFBa0N1dUMsSUlyOEtFbVUsSUFDOUIsR0FBQTdtRCxLQUFJLEdBQWdCNm1ELEdBQWMsTUFDbEMxaUQsSUFBUzBpRCxFQUFvQixFSm84S3hCLEVJdDhLWSxHQUFBN21ELEtBQUksS0pzOEtTbTBELG1CQUFtQnpoQixFQURMdHNDLFVBQU8wWixVSWo4S3ZELEVBRUYsTUFBTTJuRyxXQUFrQjNuSCxNQUN0QjJELFlBQVkyQyxHQUNWNHBDLFFBQ0Fod0MsS0FBS2dDLEtBQU9vRSxFQUFNcEUsS0FDbEJoQyxLQUFLMmYsUUFBVXZaLEVBQU11WixPQUN2QixpQkNoSkZ5aEIsZUFBZTJuRixHQUFPcGhHLEdBQ3BCQSxFQUFNUyxpQkFDTixNQUFNcW5CLEVBQVcsSUFBSSsyRSxHQUNmemdFLEVBQVFqYyxHQUFFLGtDQUFrQzFuQyxNQUM1QzZTLEVBQVc2MEIsR0FBRSxxQ0FBcUMxbkMsTUFFeERxdEMsRUFDR3U1RSxPQUFPampFLEVBQU85d0MsR0FDZDRHLE1BQUssS0FDSjliLE9BQU9zVSxTQUFTbk8sUUFBUSxhQUFhLElBRXRDOFosT0FBTzVaLElBQ042aUgsTUFBTTdpSCxFQUFNLEdBRWxCLENBeEJFcVosUUFBUXM0QixJQUFJLGNBRWRoNEMsT0FBT2dtQyxPQUFTLEtBQ2QrRCxHQUFFLG9CQUFvQjFuQyxJQUFJLGdCQUMxQjBuQyxHQUFFLHFCQUFxQjFuQyxJQUFJLGdCQUMzQjBuQyxHQUFFLHdCQUF3QjFuQyxJQUFJLGFBRTlCMG5DLEdBQUUsZ0JBQWdCdmlCLEdBQUcsU0FBVXdoRyxHQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly9jYWJsZS1kZXRlY3Rpb24vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL2Rpc3QvaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9jYWJsZS1kZXRlY3Rpb24vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2NvbXBvbmVudC9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYWJsZS1kZXRlY3Rpb24vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9jYWJsZS1kZXRlY3Rpb24vLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9kaXN0L2VzbTIwMTcvaW5kZXgtOTA5YmQ4ZjQuanMiLCJ3ZWJwYWNrOi8vY2FibGUtZGV0ZWN0aW9uLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS93ZWJjaGFubmVsLXdyYXBwZXIvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvZmlyZXN0b3JlL2Rpc3QvaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9jYWJsZS1kZXRlY3Rpb24vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3N0b3JhZ2UvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL3NyYy91dGlsaXR5L2ZpcmViYXNlLmpzIiwid2VicGFjazovL2NhYmxlLWRldGVjdGlvbi8uL3NyYy9hdXRoL2xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My42LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMi0wOC0yNlQxNzo1MlpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgdHJhYy0xNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy42LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNlxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMS0wMi0xNlxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAodHJhYy05NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAodHJhYy0xMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSB0cmFjLTY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAodHJhYy05NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgdHJhYy04MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAodHJhYy0xNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAodHJhYy0xMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKHRyYWMtMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKHRyYWMtMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICh0cmFjLTE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAodHJhYy0xMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHRcdFx0Ly8gSW4gQ2hyb21lLCBpZiBhbiBlbGVtZW50IGhhdmluZyBhIGZvY3Vzb3V0IGhhbmRsZXIgaXMgYmx1cnJlZCBieVxuXHRcdFx0XHRcdFx0Ly8gY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCwgaXQgaW52b2tlcyB0aGUgaGFuZGxlciBzeW5jaHJvbm91c2x5LiBJZlxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBoYW5kbGVyIGNhbGxzIGAucmVtb3ZlKClgIG9uIHRoZSBlbGVtZW50LCB0aGUgZGF0YSBpcyBjbGVhcmVkLFxuXHRcdFx0XHRcdFx0Ly8gbGVhdmluZyBgcmVzdWx0YCB1bmRlZmluZWQuIFdlIG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAodHJhYy01MDQsIHRyYWMtMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxudmFyIHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCI7XG5cblxudmFyIHJ0cmltQ1NTID0gbmV3IFJlZ0V4cChcblx0XCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIixcblx0XCJnXCJcbik7XG5cblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCB0cmFjLTEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpIChnaC0zMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0Ly8gdHJpbSB3aGl0ZXNwYWNlIGZvciBjdXN0b20gcHJvcGVydHkgKGlzc3VlIGdoLTQ5MjYpXG5cdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cblx0XHRcdC8vIHJ0cmltIHRyZWF0cyBVKzAwMEQgQ0FSUklBR0UgUkVUVVJOIGFuZCBVKzAwMEMgRk9STSBGRUVEXG5cdFx0XHQvLyBhcyB3aGl0ZXNwYWNlIHdoaWxlIENTUyBkb2VzIG5vdCwgYnV0IHRoaXMgaXMgbm90IGEgcHJvYmxlbVxuXHRcdFx0Ly8gYmVjYXVzZSBDU1MgcHJlcHJvY2Vzc2luZyByZXBsYWNlcyB0aGVtIHdpdGggVSswMDBBIExJTkUgRkVFRFxuXHRcdFx0Ly8gKHdoaWNoICppcyogQ1NTIHdoaXRlc3BhY2UpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpbnB1dC1wcmVwcm9jZXNzaW5nXG5cdFx0XHRyZXQgPSByZXQucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApO1xuXHRcdH1cblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAodHJhYy03MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgdHJhYy05MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKHRyYWMtNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICh0cmFjLTEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsICh0cmFjLTEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY2xhc3NOYW1lLCBpLCBzZWxmLFxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAodHJhYy0xNDY4NiwgdHJhYy0xNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKHRyYWMtMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICh0cmFjLTk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICh0cmFjLTk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKHRyYWMtNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyB0cmFjLTc2NTMsIHRyYWMtODEyNSwgdHJhYy04MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICh0cmFjLTEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzIHRyYWMtOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKHRyYWMtMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgdHJhYy0xMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKHRyYWMtMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyB0cmFjLTk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKHRyYWMtMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vIHRyYWMtMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlIHRyYWMtODYwNSwgdHJhYy0xNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJhYy0xNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEZpcmViYXNlIGNvbnN0YW50cy4gIFNvbWUgb2YgdGhlc2UgKEBkZWZpbmVzKSBjYW4gYmUgb3ZlcnJpZGRlbiBhdCBjb21waWxlLXRpbWUuXHJcbiAqL1xyXG5jb25zdCBDT05TVEFOVFMgPSB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgY2xpZW50IE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0NMSUVOVDogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgQWRtaW4gTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQURNSU46IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlYmFzZSBTREsgVmVyc2lvblxyXG4gICAgICovXHJcbiAgICBTREtfVkVSU0lPTjogJyR7SlNDT1JFX1ZFUlNJT059J1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwcm92aWRlZCBhc3NlcnRpb24gaXMgZmFsc3lcclxuICovXHJcbmNvbnN0IGFzc2VydCA9IGZ1bmN0aW9uIChhc3NlcnRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmICghYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgYXNzZXJ0aW9uRXJyb3IobWVzc2FnZSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIEVycm9yIG9iamVjdCBzdWl0YWJsZSBmb3IgdGhyb3dpbmcuXHJcbiAqL1xyXG5jb25zdCBhc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IEVycm9yKCdGaXJlYmFzZSBEYXRhYmFzZSAoJyArXHJcbiAgICAgICAgQ09OU1RBTlRTLlNES19WRVJTSU9OICtcclxuICAgICAgICAnKSBJTlRFUk5BTCBBU1NFUlQgRkFJTEVEOiAnICtcclxuICAgICAgICBtZXNzYWdlKTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3Qgc3RyaW5nVG9CeXRlQXJyYXkkMSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXHJcbiAgICBjb25zdCBvdXQgPSBbXTtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmXHJcbiAgICAgICAgICAgIGkgKyAxIDwgc3RyLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XHJcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNmZik7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBUdXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcclxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLlxyXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmcgY2hhcmFjdGVycy5cclxuICogQHJldHVybiBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxyXG4gKi9cclxuY29uc3QgYnl0ZUFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcclxuICAgIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXHJcbiAgICBjb25zdCBvdXQgPSBbXTtcclxuICAgIGxldCBwb3MgPSAwLCBjID0gMDtcclxuICAgIHdoaWxlIChwb3MgPCBieXRlcy5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBjMSA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICBpZiAoYzEgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYzEgPiAxOTEgJiYgYzEgPCAyMjQpIHtcclxuICAgICAgICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMzEpIDw8IDYpIHwgKGMyICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYzEgPiAyMzkgJiYgYzEgPCAzNjUpIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGMzID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCBjNCA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgdSA9ICgoKGMxICYgNykgPDwgMTgpIHwgKChjMiAmIDYzKSA8PCAxMikgfCAoKGMzICYgNjMpIDw8IDYpIHwgKGM0ICYgNjMpKSAtXHJcbiAgICAgICAgICAgICAgICAweDEwMDAwO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKHUgPj4gMTApKTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZGMwMCArICh1ICYgMTAyMykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGMzID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDE1KSA8PCAxMikgfCAoKGMyICYgNjMpIDw8IDYpIHwgKGMzICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xyXG59O1xyXG4vLyBXZSBkZWZpbmUgaXQgYXMgYW4gb2JqZWN0IGxpdGVyYWwgaW5zdGVhZCBvZiBhIGNsYXNzIGJlY2F1c2UgYSBjbGFzcyBjb21waWxlZCBkb3duIHRvIGVzNSBjYW4ndFxyXG4vLyBiZSB0cmVlc2hha2VkLiBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTY5MVxyXG4vLyBTdGF0aWMgbG9va3VwIG1hcHMsIGxhemlseSBwb3B1bGF0ZWQgYnkgaW5pdF8oKVxyXG5jb25zdCBiYXNlNjQgPSB7XHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYnl0ZXMgdG8gY2hhcmFjdGVycy5cclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcF86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcF86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYnl0ZXMgdG8gd2Vic2FmZSBjaGFyYWN0ZXJzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIHdlYnNhZmUgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBXZWJTYWZlXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQsIHNoYXJlZCBiZXR3ZWVuXHJcbiAgICAgKiBFTkNPREVEX1ZBTFMgYW5kIEVOQ09ERURfVkFMU19XRUJTQUZFXHJcbiAgICAgKi9cclxuICAgIEVOQ09ERURfVkFMU19CQVNFOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICsgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArICcwMTIzNDU2Nzg5JyxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQuIFZhbHVlIDY0ICg9KSBpcyBzcGVjaWFsOyBpdCBtZWFucyBcIm5vdGhpbmcuXCJcclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMUygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICcrLz0nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKi9cclxuICAgIGdldCBFTkNPREVEX1ZBTFNfV0VCU0FGRSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICctXy4nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGF0b2IgYW5kIGJ0b2EgZnVuY3Rpb25zLiBUaGlzIGV4dGVuc2lvblxyXG4gICAgICogc3RhcnRlZCBhdCBNb3ppbGxhIGJ1dCBpcyBub3cgaW1wbGVtZW50ZWQgYnkgbWFueSBicm93c2Vycy4gV2UgdXNlIHRoZVxyXG4gICAgICogQVNTVU1FXyogdmFyaWFibGVzIHRvIGF2b2lkIHB1bGxpbmcgaW4gdGhlIGZ1bGwgdXNlcmFnZW50IGRldGVjdGlvbiBsaWJyYXJ5XHJcbiAgICAgKiBidXQgc3RpbGwgYWxsb3dpbmcgdGhlIHN0YW5kYXJkIHBlci1icm93c2VyIGNvbXBpbGF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIEhBU19OQVRJVkVfU1VQUE9SVDogdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicsXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IEFuIGFycmF5IG9mIGJ5dGVzIChudW1iZXJzIHdpdGhcclxuICAgICAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgQm9vbGVhbiBpbmRpY2F0aW5nIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZUJ5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2VuY29kZUJ5dGVBcnJheSB0YWtlcyBhbiBhcnJheSBhcyBhIHBhcmFtZXRlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgYnl0ZVRvQ2hhck1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuYnl0ZVRvQ2hhck1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMSA9IGlucHV0W2ldO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTIgPSBpICsgMSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBpbnB1dFtpICsgMV0gOiAwO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpICsgMiA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBpbnB1dFtpICsgMl0gOiAwO1xyXG4gICAgICAgICAgICBjb25zdCBvdXRCeXRlMSA9IGJ5dGUxID4+IDI7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMSAmIDB4MDMpIDw8IDQpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBsZXQgb3V0Qnl0ZTMgPSAoKGJ5dGUyICYgMHgwZikgPDwgMikgfCAoYnl0ZTMgPj4gNik7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzZjtcclxuICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTMpIHtcclxuICAgICAgICAgICAgICAgIG91dEJ5dGU0ID0gNjQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhdmVCeXRlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dEJ5dGUzID0gNjQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0cHV0LnB1c2goYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMV0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTJdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUzXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlNF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQSBzdHJpbmcgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgSWYgdHJ1ZSwgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlU3RyaW5nKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBidG9hKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlQnl0ZUFycmF5KHN0cmluZ1RvQnl0ZUFycmF5JDEoaW5wdXQpLCB3ZWJTYWZlKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdG9iKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVBcnJheVRvU3RyaW5nKHRoaXMuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogSW4gYmFzZS02NCBkZWNvZGluZywgZ3JvdXBzIG9mIGZvdXIgY2hhcmFjdGVycyBhcmUgY29udmVydGVkIGludG8gdGhyZWVcclxuICAgICAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcclxuICAgICAqIGJlIGEgbXVsdGlwbGUgb2YgNC5cclxuICAgICAqXHJcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXHJcbiAgICAgKiBwYWRkaW5nIHdpbGwgYmUgaW5mZXJyZWQuICBJZiB0aGUgZ3JvdXAgaGFzIG9uZSBvciB0d28gY2hhcmFjdGVycywgaXQgZGVjb2Rlc1xyXG4gICAgICogdG8gb25lIGJ5dGUuICBJZiB0aGUgZ3JvdXAgaGFzIHRocmVlIGNoYXJhY3RlcnMsIGl0IGRlY29kZXMgdG8gdHdvIGJ5dGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBJbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlIHdlYi1zYWZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBieXRlcyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgdGhpcy5pbml0XygpO1xyXG4gICAgICAgIGNvbnN0IGNoYXJUb0J5dGVNYXAgPSB3ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmNoYXJUb0J5dGVNYXBfO1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOykge1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMSA9IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkrKyldO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTIgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDA7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgY29uc3QgaGF2ZUJ5dGUzID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTQgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlNCA9IGhhdmVCeXRlNCA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChieXRlMSA9PSBudWxsIHx8IGJ5dGUyID09IG51bGwgfHwgYnl0ZTMgPT0gbnVsbCB8fCBieXRlNCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZ1xyXG4gKi9cclxuY29uc3QgYmFzZTY0RW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgY29uc3QgdXRmOEJ5dGVzID0gc3RyaW5nVG9CeXRlQXJyYXkkMShzdHIpO1xyXG4gICAgcmV0dXJuIGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkodXRmOEJ5dGVzLCB0cnVlKTtcclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZyAod2l0aG91dCBcIi5cIiBwYWRkaW5nIGluIHRoZSBlbmQpLlxyXG4gKiBlLmcuIFVzZWQgaW4gSlNPTiBXZWIgVG9rZW4gKEpXVCkgcGFydHMuXHJcbiAqL1xyXG5jb25zdCBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIC8vIFVzZSBiYXNlNjR1cmwgZW5jb2RpbmcgYW5kIHJlbW92ZSBwYWRkaW5nIGluIHRoZSBlbmQgKGRvdCBjaGFyYWN0ZXJzKS5cclxuICAgIHJldHVybiBiYXNlNjRFbmNvZGUoc3RyKS5yZXBsYWNlKC9cXC4vZywgJycpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGRlY29kaW5nXHJcbiAqXHJcbiAqIE5PVEU6IERPIE5PVCB1c2UgdGhlIGdsb2JhbCBhdG9iKCkgZnVuY3Rpb24gLSBpdCBkb2VzIE5PVCBzdXBwb3J0IHRoZVxyXG4gKiBiYXNlNjRVcmwgdmFyaWFudCBlbmNvZGluZy5cclxuICpcclxuICogQHBhcmFtIHN0ciBUbyBiZSBkZWNvZGVkXHJcbiAqIEByZXR1cm4gRGVjb2RlZCByZXN1bHQsIGlmIHBvc3NpYmxlXHJcbiAqL1xyXG5jb25zdCBiYXNlNjREZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0ciwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Jhc2U2NERlY29kZSBmYWlsZWQ6ICcsIGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEbyBhIGRlZXAtY29weSBvZiBiYXNpYyBKYXZhU2NyaXB0IE9iamVjdHMgb3IgQXJyYXlzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcENvcHkodmFsdWUpIHtcclxuICAgIHJldHVybiBkZWVwRXh0ZW5kKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG59XHJcbi8qKlxyXG4gKiBDb3B5IHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IChyZWN1cnNpdmVseSBhbGxvd3MgZXh0ZW5zaW9uXHJcbiAqIG9mIE9iamVjdHMgYW5kIEFycmF5cykuICBTY2FsYXIgdmFsdWVzIGluIHRoZSB0YXJnZXQgYXJlIG92ZXItd3JpdHRlbi5cclxuICogSWYgdGFyZ2V0IGlzIHVuZGVmaW5lZCwgYW4gb2JqZWN0IG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlIHdpbGwgYmUgY3JlYXRlZFxyXG4gKiAoYW5kIHJldHVybmVkKS5cclxuICpcclxuICogV2UgcmVjdXJzaXZlbHkgY29weSBhbGwgY2hpbGQgcHJvcGVydGllcyBvZiBwbGFpbiBPYmplY3RzIGluIHRoZSBzb3VyY2UtIHNvXHJcbiAqIHRoYXQgbmFtZXNwYWNlLSBsaWtlIGRpY3Rpb25hcmllcyBhcmUgbWVyZ2VkLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhlIHRhcmdldCBjYW4gYmUgYSBmdW5jdGlvbiwgaW4gd2hpY2ggY2FzZSB0aGUgcHJvcGVydGllcyBpblxyXG4gKiB0aGUgc291cmNlIE9iamVjdCBhcmUgY29waWVkIG9udG8gaXQgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBOb3RlOiB3ZSBkb24ndCBtZXJnZSBfX3Byb3RvX18gdG8gcHJldmVudCBwcm90b3R5cGUgcG9sbHV0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XHJcbiAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIHN3aXRjaCAoc291cmNlLmNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgY2FzZSBEYXRlOlxyXG4gICAgICAgICAgICAvLyBUcmVhdCBEYXRlcyBsaWtlIHNjYWxhcnM7IGlmIHRoZSB0YXJnZXQgZGF0ZSBvYmplY3QgaGFkIGFueSBjaGlsZFxyXG4gICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIC0gdGhleSB3aWxsIGJlIGxvc3QhXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVWYWx1ZSA9IHNvdXJjZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVWYWx1ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIGNhc2UgT2JqZWN0OlxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQXJyYXk6XHJcbiAgICAgICAgICAgIC8vIEFsd2F5cyBjb3B5IHRoZSBhcnJheSBzb3VyY2UgYW5kIG92ZXJ3cml0ZSB0aGUgdGFyZ2V0LlxyXG4gICAgICAgICAgICB0YXJnZXQgPSBbXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgLy8gTm90IGEgcGxhaW4gT2JqZWN0IC0gdHJlYXQgaXQgYXMgYSBzY2FsYXIuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gc291cmNlKSB7XHJcbiAgICAgICAgLy8gdXNlIGlzVmFsaWRLZXkgdG8gZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGUgcG9sbHV0aW9uLiBTZWUgaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vU05ZSy1KUy1MT0RBU0gtNDUwMjAyXHJcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgIWlzVmFsaWRLZXkocHJvcCkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIGtleSAhPT0gJ19fcHJvdG9fXyc7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgbmF2aWdhdG9yLnVzZXJBZ2VudCBzdHJpbmcgb3IgJycgaWYgaXQncyBub3QgZGVmaW5lZC5cclxuICogQHJldHVybiB1c2VyIGFnZW50IHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0VUEoKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yWyd1c2VyQWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yWyd1c2VyQWdlbnQnXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRGV0ZWN0IENvcmRvdmEgLyBQaG9uZUdhcCAvIElvbmljIGZyYW1ld29ya3Mgb24gYSBtb2JpbGUgZGV2aWNlLlxyXG4gKlxyXG4gKiBEZWxpYmVyYXRlbHkgZG9lcyBub3QgcmVseSBvbiBjaGVja2luZyBgZmlsZTovL2AgVVJMcyAoYXMgdGhpcyBmYWlscyBQaG9uZUdhcFxyXG4gKiBpbiB0aGUgUmlwcGxlIGVtdWxhdG9yKSBub3IgQ29yZG92YSBgb25EZXZpY2VSZWFkeWAsIHdoaWNoIHdvdWxkIG5vcm1hbGx5XHJcbiAqIHdhaXQgZm9yIGEgY2FsbGJhY2suXHJcbiAqL1xyXG5mdW5jdGlvbiBpc01vYmlsZUNvcmRvdmEoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBTZXR0aW5nIHVwIGFuIGJyb2FkbHkgYXBwbGljYWJsZSBpbmRleCBzaWduYXR1cmUgZm9yIFdpbmRvd1xyXG4gICAgICAgIC8vIGp1c3QgdG8gZGVhbCB3aXRoIHRoaXMgY2FzZSB3b3VsZCBwcm9iYWJseSBiZSBhIGJhZCBpZGVhLlxyXG4gICAgICAgICEhKHdpbmRvd1snY29yZG92YSddIHx8IHdpbmRvd1sncGhvbmVnYXAnXSB8fCB3aW5kb3dbJ1Bob25lR2FwJ10pICYmXHJcbiAgICAgICAgL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoZ2V0VUEoKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgTm9kZS5qcy5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIE5vZGUuanMgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG4vLyBOb2RlIGRldGVjdGlvbiBsb2dpYyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vaWxpYWthbi9kZXRlY3Qtbm9kZS9cclxuZnVuY3Rpb24gaXNOb2RlKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRGV0ZWN0IEJyb3dzZXIgRW52aXJvbm1lbnRcclxuICovXHJcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmO1xyXG59XHJcbmZ1bmN0aW9uIGlzQnJvd3NlckV4dGVuc2lvbigpIHtcclxuICAgIGNvbnN0IHJ1bnRpbWUgPSB0eXBlb2YgY2hyb21lID09PSAnb2JqZWN0J1xyXG4gICAgICAgID8gY2hyb21lLnJ1bnRpbWVcclxuICAgICAgICA6IHR5cGVvZiBicm93c2VyID09PSAnb2JqZWN0J1xyXG4gICAgICAgICAgICA/IGJyb3dzZXIucnVudGltZVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiB0eXBlb2YgcnVudGltZSA9PT0gJ29iamVjdCcgJiYgcnVudGltZS5pZCAhPT0gdW5kZWZpbmVkO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3JbJ3Byb2R1Y3QnXSA9PT0gJ1JlYWN0TmF0aXZlJyk7XHJcbn1cclxuLyoqIERldGVjdHMgRWxlY3Ryb24gYXBwcy4gKi9cclxuZnVuY3Rpb24gaXNFbGVjdHJvbigpIHtcclxuICAgIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ0VsZWN0cm9uLycpID49IDA7XHJcbn1cclxuLyoqIERldGVjdHMgSW50ZXJuZXQgRXhwbG9yZXIuICovXHJcbmZ1bmN0aW9uIGlzSUUoKSB7XHJcbiAgICBjb25zdCB1YSA9IGdldFVBKCk7XHJcbiAgICByZXR1cm4gdWEuaW5kZXhPZignTVNJRSAnKSA+PSAwIHx8IHVhLmluZGV4T2YoJ1RyaWRlbnQvJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBVbml2ZXJzYWwgV2luZG93cyBQbGF0Zm9ybSBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc1VXUCgpIHtcclxuICAgIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ01TQXBwSG9zdC8nKSA+PSAwO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3Qgd2hldGhlciB0aGUgY3VycmVudCBTREsgYnVpbGQgaXMgdGhlIE5vZGUgdmVyc2lvbi5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIGl0J3MgdGhlIE5vZGUgU0RLIGJ1aWxkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNOb2RlU2RrKCkge1xyXG4gICAgcmV0dXJuIENPTlNUQU5UUy5OT0RFX0NMSUVOVCA9PT0gdHJ1ZSB8fCBDT05TVEFOVFMuTk9ERV9BRE1JTiA9PT0gdHJ1ZTtcclxufVxyXG4vKiogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBydW5uaW5nIGluIFNhZmFyaS4gKi9cclxuZnVuY3Rpb24gaXNTYWZhcmkoKSB7XHJcbiAgICByZXR1cm4gKCFpc05vZGUoKSAmJlxyXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ1NhZmFyaScpICYmXHJcbiAgICAgICAgIW5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ0Nocm9tZScpKTtcclxufVxyXG4vKipcclxuICogVGhpcyBtZXRob2QgY2hlY2tzIGlmIGluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgY3VycmVudCBicm93c2VyL3NlcnZpY2Ugd29ya2VyIGNvbnRleHRcclxuICogQHJldHVybiB0cnVlIGlmIGluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgY3VycmVudCBicm93c2VyL3NlcnZpY2Ugd29ya2VyIGNvbnRleHRcclxuICovXHJcbmZ1bmN0aW9uIGlzSW5kZXhlZERCQXZhaWxhYmxlKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpbmRleGVkREIgPT09ICdvYmplY3QnO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XHJcbiAqIHByaXZhdGUgYnJvd3NpbmcpXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcHJlRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBEQl9DSEVDS19OQU1FID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3QuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB8fCAnJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3Mgd2hldGhlciBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqL1xyXG5mdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRHbG9iYWwoKSB7XHJcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRzRnJvbUdsb2JhbCA9ICgpID0+IGdldEdsb2JhbCgpLl9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuLyoqXHJcbiAqIEF0dGVtcHQgdG8gcmVhZCBkZWZhdWx0cyBmcm9tIGEgSlNPTiBzdHJpbmcgcHJvdmlkZWQgdG9cclxuICogcHJvY2Vzcy5lbnYuX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2Vzcy5lbnYuX19GSVJFQkFTRV9ERUZBVUxUU19QQVRIX19cclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRzRnJvbUVudlZhcmlhYmxlID0gKCkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcHJvY2Vzcy5lbnYgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVmYXVsdHNKc29uU3RyaW5nID0gcHJvY2Vzcy5lbnYuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4gICAgaWYgKGRlZmF1bHRzSnNvblN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlZmF1bHRzSnNvblN0cmluZyk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGdldERlZmF1bHRzRnJvbUNvb2tpZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IG1hdGNoO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaCgvX19GSVJFQkFTRV9ERUZBVUxUU19fPShbXjtdKykvKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gU29tZSBlbnZpcm9ubWVudHMgc3VjaCBhcyBBbmd1bGFyIFVuaXZlcnNhbCBTU1IgaGF2ZSBhXHJcbiAgICAgICAgLy8gYGRvY3VtZW50YCBvYmplY3QgYnV0IGVycm9yIG9uIGFjY2Vzc2luZyBgZG9jdW1lbnQuY29va2llYC5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBkZWNvZGVkID0gbWF0Y2ggJiYgYmFzZTY0RGVjb2RlKG1hdGNoWzFdKTtcclxuICAgIHJldHVybiBkZWNvZGVkICYmIEpTT04ucGFyc2UoZGVjb2RlZCk7XHJcbn07XHJcbi8qKlxyXG4gKiBHZXQgdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3QuIEl0IGNoZWNrcyBpbiBvcmRlcjpcclxuICogKDEpIGlmIHN1Y2ggYW4gb2JqZWN0IGV4aXN0cyBhcyBhIHByb3BlcnR5IG9mIGBnbG9iYWxUaGlzYFxyXG4gKiAoMikgaWYgc3VjaCBhbiBvYmplY3Qgd2FzIHByb3ZpZGVkIG9uIGEgc2hlbGwgZW52aXJvbm1lbnQgdmFyaWFibGVcclxuICogKDMpIGlmIHN1Y2ggYW4gb2JqZWN0IGV4aXN0cyBpbiBhIGNvb2tpZVxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFN0YW5kYXJkaXplZCBGaXJlYmFzZSBFcnJvci5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqXHJcbiAqICAgLy8gVHlwZXNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMgZm9yIHR5cGUtc2FmZSBjb2Rlc1xyXG4gKiAgIHR5cGUgRXJyID1cclxuICogICAgICd1bmtub3duJyB8XHJcbiAqICAgICAnb2JqZWN0LW5vdC1mb3VuZCdcclxuICogICAgIDtcclxuICpcclxuICogICAvLyBDbG9zdXJlIGVudW0gZm9yIHR5cGUtc2FmZSBlcnJvciBjb2Rlc1xyXG4gKiAgIC8vIGF0LWVudW0ge3N0cmluZ31cclxuICogICB2YXIgRXJyID0ge1xyXG4gKiAgICAgVU5LTk9XTjogJ3Vua25vd24nLFxyXG4gKiAgICAgT0JKRUNUX05PVF9GT1VORDogJ29iamVjdC1ub3QtZm91bmQnLFxyXG4gKiAgIH1cclxuICpcclxuICogICBsZXQgZXJyb3JzOiBNYXA8RXJyLCBzdHJpbmc+ID0ge1xyXG4gKiAgICAgJ2dlbmVyaWMtZXJyb3InOiBcIlVua25vd24gZXJyb3JcIixcclxuICogICAgICdmaWxlLW5vdC1mb3VuZCc6IFwiQ291bGQgbm90IGZpbmQgZmlsZTogeyRmaWxlfVwiLFxyXG4gKiAgIH07XHJcbiAqXHJcbiAqICAgLy8gVHlwZS1zYWZlIGZ1bmN0aW9uIC0gbXVzdCBwYXNzIGEgdmFsaWQgZXJyb3IgY29kZSBhcyBwYXJhbS5cclxuICogICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JGYWN0b3J5PEVycj4oJ3NlcnZpY2UnLCAnU2VydmljZScsIGVycm9ycyk7XHJcbiAqXHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5HRU5FUklDKTtcclxuICogICAuLi5cclxuICogICB0aHJvdyBlcnJvci5jcmVhdGUoRXJyLkZJTEVfTk9UX0ZPVU5ELCB7J2ZpbGUnOiBmaWxlTmFtZX0pO1xyXG4gKiAgIC4uLlxyXG4gKiAgIC8vIFNlcnZpY2U6IENvdWxkIG5vdCBmaWxlIGZpbGU6IGZvby50eHQgKHNlcnZpY2UvZmlsZS1ub3QtZm91bmQpLlxyXG4gKlxyXG4gKiAgIGNhdGNoIChlKSB7XHJcbiAqICAgICBhc3NlcnQoZS5tZXNzYWdlID09PSBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IGZvby50eHQuXCIpO1xyXG4gKiAgICAgaWYgKChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlID09PSAnc2VydmljZS9maWxlLW5vdC1mb3VuZCcpIHtcclxuICogICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgcmVhZCBmaWxlOiBcIiArIGVbJ2ZpbGUnXSk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKi9cclxuY29uc3QgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcclxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcclxuY2xhc3MgRmlyZWJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqIFRoZSBlcnJvciBjb2RlIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY29kZSwgbWVzc2FnZSwgXHJcbiAgICAvKiogQ3VzdG9tIGRhdGEgZm9yIHRoaXMgZXJyb3IuICovXHJcbiAgICBjdXN0b21EYXRhKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSBjdXN0b21EYXRhO1xyXG4gICAgICAgIC8qKiBUaGUgY3VzdG9tIG5hbWUgZm9yIGFsbCBGaXJlYmFzZUVycm9ycy4gKi9cclxuICAgICAgICB0aGlzLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG4gICAgICAgIC8vIEZpeCBGb3IgRVM1XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxyXG4gICAgICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxyXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNsYXNzIEVycm9yRmFjdG9yeSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlLCBzZXJ2aWNlTmFtZSwgZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoY29kZSwgLi4uZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBkYXRhWzBdIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGZ1bGxDb2RlID0gYCR7dGhpcy5zZXJ2aWNlfS8ke2NvZGV9YDtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0ZW1wbGF0ZSA/IHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgY3VzdG9tRGF0YSkgOiAnRXJyb3InO1xyXG4gICAgICAgIC8vIFNlcnZpY2UgTmFtZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGAke3RoaXMuc2VydmljZU5hbWV9OiAke21lc3NhZ2V9ICgke2Z1bGxDb2RlfSkuYDtcclxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoUEFUVEVSTiwgKF8sIGtleSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVtrZXldO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gU3RyaW5nKHZhbHVlKSA6IGA8JHtrZXl9Pz5gO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgUEFUVEVSTiA9IC9cXHtcXCQoW159XSspfS9nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgbGV0IGhlYWRlciA9IHt9LCBjbGFpbXMgPSB7fSwgZGF0YSA9IHt9LCBzaWduYXR1cmUgPSAnJztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xyXG4gICAgICAgIGhlYWRlciA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1swXSkgfHwgJycpO1xyXG4gICAgICAgIGNsYWltcyA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1sxXSkgfHwgJycpO1xyXG4gICAgICAgIHNpZ25hdHVyZSA9IHBhcnRzWzJdO1xyXG4gICAgICAgIGRhdGEgPSBjbGFpbXNbJ2QnXSB8fCB7fTtcclxuICAgICAgICBkZWxldGUgY2xhaW1zWydkJ107XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhlYWRlcixcclxuICAgICAgICBjbGFpbXMsXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIHRpbWUtYmFzZWQgY2xhaW1zLiBXaWxsIHJldHVybiB0cnVlIGlmIHRoZVxyXG4gKiB0b2tlbiBpcyB3aXRoaW4gdGhlIHRpbWUgd2luZG93IGF1dGhvcml6ZWQgYnkgdGhlICduYmYnIChub3QtYmVmb3JlKSBhbmQgJ2lhdCcgKGlzc3VlZC1hdCkgY2xhaW1zLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcclxuICAgIGxldCB2YWxpZFNpbmNlID0gMCwgdmFsaWRVbnRpbCA9IDA7XHJcbiAgICBpZiAodHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCduYmYnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWyduYmYnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWydpYXQnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IGNsYWltc1snZXhwJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2tlbiB3aWxsIGV4cGlyZSBhZnRlciAyNGggYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gdmFsaWRTaW5jZSArIDg2NDAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAoISFub3cgJiZcclxuICAgICAgICAhIXZhbGlkU2luY2UgJiZcclxuICAgICAgICAhIXZhbGlkVW50aWwgJiZcclxuICAgICAgICBub3cgPj0gdmFsaWRTaW5jZSAmJlxyXG4gICAgICAgIG5vdyA8PSB2YWxpZFVudGlsKTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgcmV0dXJucyBpdHMgaXNzdWVkIGF0IHRpbWUgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICByZXR1cm4gY2xhaW1zWydpYXQnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZEZvcm1hdCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xyXG4gICAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNBZG1pbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICByZXR1cm4gdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zWydhZG1pbiddID09PSB0cnVlO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb250YWlucyhvYmosIGtleSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbn1cclxuZnVuY3Rpb24gc2FmZUdldChvYmosIGtleSkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gbWFwKG9iaiwgZm4sIGNvbnRleHRPYmopIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBmbi5jYWxsKGNvbnRleHRPYmosIG9ialtrZXldLCBrZXksIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKipcclxuICogRGVlcCBlcXVhbCB0d28gb2JqZWN0cy4gU3VwcG9ydCBBcnJheXMgYW5kIE9iamVjdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICBjb25zdCBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xyXG4gICAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFiS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFQcm9wID0gYVtrXTtcclxuICAgICAgICBjb25zdCBiUHJvcCA9IGJba107XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFQcm9wKSAmJiBpc09iamVjdChiUHJvcCkpIHtcclxuICAgICAgICAgICAgaWYgKCFkZWVwRXF1YWwoYVByb3AsIGJQcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFQcm9wICE9PSBiUHJvcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrIG9mIGJLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFhS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNPYmplY3QodGhpbmcpIHtcclxuICAgIHJldHVybiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZWplY3RzIGlmIHRoZSBnaXZlbiBwcm9taXNlIGRvZXNuJ3QgcmVzb2x2ZSBpbiB0aW1lSW5NUyBtaWxsaXNlY29uZHMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gcHJvbWlzZVdpdGhUaW1lb3V0KHByb21pc2UsIHRpbWVJbk1TID0gMjAwMCkge1xyXG4gICAgY29uc3QgZGVmZXJyZWRQcm9taXNlID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGRlZmVycmVkUHJvbWlzZS5yZWplY3QoJ3RpbWVvdXQhJyksIHRpbWVJbk1TKTtcclxuICAgIHByb21pc2UudGhlbihkZWZlcnJlZFByb21pc2UucmVzb2x2ZSwgZGVmZXJyZWRQcm9taXNlLnJlamVjdCk7XHJcbiAgICByZXR1cm4gZGVmZXJyZWRQcm9taXNlLnByb21pc2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhXHJcbiAqIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnlzdHJpbmdQYXJhbXMpIHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnlzdHJpbmdQYXJhbXMpKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goYXJyYXlWYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJyYXlWYWwpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID8gJyYnICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgcXVlcnlzdHJpbmcgKGUuZy4gP2FyZz12YWwmYXJnMj12YWwyKSBpbnRvIGEgcGFyYW1zIG9iamVjdFxyXG4gKiAoZS5nLiB7YXJnOiAndmFsJywgYXJnMjogJ3ZhbDInfSlcclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nRGVjb2RlKHF1ZXJ5c3RyaW5nKSB7XHJcbiAgICBjb25zdCBvYmogPSB7fTtcclxuICAgIGNvbnN0IHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcclxuICAgIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gdG9rZW4uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChrZXkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0IHRoZSBxdWVyeSBzdHJpbmcgcGFydCBvZiBhIFVSTCwgaW5jbHVkaW5nIHRoZSBsZWFkaW5nIHF1ZXN0aW9uIG1hcmsgKGlmIHByZXNlbnQpLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybCkge1xyXG4gICAgY29uc3QgcXVlcnlTdGFydCA9IHVybC5pbmRleE9mKCc/Jyk7XHJcbiAgICBpZiAoIXF1ZXJ5U3RhcnQpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0ID0gdXJsLmluZGV4T2YoJyMnLCBxdWVyeVN0YXJ0KTtcclxuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKHF1ZXJ5U3RhcnQsIGZyYWdtZW50U3RhcnQgPiAwID8gZnJhZ21lbnRTdGFydCA6IHVuZGVmaW5lZCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoLlxyXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxyXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xyXG4gKiAgIHNoYTEudXBkYXRlKGJ5dGVzKTtcclxuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XHJcbiAqXHJcbiAqIFBlcmZvcm1hbmNlOlxyXG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xyXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xyXG4gKlxyXG4gKi9cclxuLyoqXHJcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZmluYWxcclxuICogQHN0cnVjdFxyXG4gKi9cclxuY2xhc3MgU2hhMSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFpbl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGJ1ZmZlciBob2xkaW5nIHRoZSBwYXJ0aWFsbHkgY29tcHV0ZWQgaGFzaCByZXN1bHQuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJ1Zl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiA4MCBieXRlcywgZWFjaCBhIHBhcnQgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgaGFzaGVkLiAgUmVmZXJyZWQgdG9cclxuICAgICAgICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wYWRfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRvdGFsXyA9IDA7XHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xyXG4gICAgICAgIHRoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuYmxvY2tTaXplOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWRfW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcm5hbCBjb21wcmVzcyBoZWxwZXIgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gYnVmIEJsb2NrIHRvIGNvbXByZXNzLlxyXG4gICAgICogQHBhcmFtIG9mZnNldCBPZmZzZXQgb2YgdGhlIGJsb2NrIGluIHRoZSBidWZmZXIuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjb21wcmVzc18oYnVmLCBvZmZzZXQpIHtcclxuICAgICAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBXID0gdGhpcy5XXztcclxuICAgICAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBidWcgdGhhdCB0dXJucyB0aGUgcG9zdC1pbmNyZW1lbnQgKysgb3BlcmF0b3IgaW50byBwcmUtaW5jcmVtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcclxuICAgICAgICAgICAgICAgIC8vIG9mIHBvc3QtaW5jcmVtZW50ICsrIGluIHdoaWNoIHRoZSByZXN1bHQgdmFsdWUgaXMgdXNlZC4gIFdlIGNhbiByZXZlcnRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcclxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcclxuICAgICAgICAgICAgICAgIC8vIG1vc3QgY2xpZW50cyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0XSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xyXG4gICAgICAgICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYSA9IHRoaXMuY2hhaW5fWzBdO1xyXG4gICAgICAgIGxldCBiID0gdGhpcy5jaGFpbl9bMV07XHJcbiAgICAgICAgbGV0IGMgPSB0aGlzLmNoYWluX1syXTtcclxuICAgICAgICBsZXQgZCA9IHRoaXMuY2hhaW5fWzNdO1xyXG4gICAgICAgIGxldCBlID0gdGhpcy5jaGFpbl9bNF07XHJcbiAgICAgICAgbGV0IGYsIGs7XHJcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg2ZWQ5ZWJhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4OGYxYmJjZGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweGNhNjJjMWQ2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSAoKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBmICsgZSArIGsgKyBXW2ldKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGUgPSBkO1xyXG4gICAgICAgICAgICBkID0gYztcclxuICAgICAgICAgICAgYyA9ICgoYiA8PCAzMCkgfCAoYiA+Pj4gMikpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgYiA9IGE7XHJcbiAgICAgICAgICAgIGEgPSB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoYWluX1swXSA9ICh0aGlzLmNoYWluX1swXSArIGEpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9ICh0aGlzLmNoYWluX1sxXSArIGIpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9ICh0aGlzLmNoYWluX1syXSArIGMpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1szXSA9ICh0aGlzLmNoYWluX1szXSArIGQpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9ICh0aGlzLmNoYWluX1s0XSArIGUpICYgMHhmZmZmZmZmZjtcclxuICAgIH1cclxuICAgIHVwZGF0ZShieXRlcywgbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxlbmd0aE1pbnVzQmxvY2sgPSBsZW5ndGggLSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgLy8gVXNpbmcgbG9jYWwgaW5zdGVhZCBvZiBtZW1iZXIgdmFyaWFibGVzIGdpdmVzIH41JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYuXHJcbiAgICAgICAgY29uc3QgYnVmID0gdGhpcy5idWZfO1xyXG4gICAgICAgIGxldCBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xyXG4gICAgICAgIC8vIFRoZSBvdXRlciB3aGlsZSBsb29wIHNob3VsZCBleGVjdXRlIGF0IG1vc3QgdHdpY2UuXHJcbiAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vIGRhdGEgaW4gdGhlIGJsb2NrIHRvIHRvcCB1cCwgd2UgY2FuIGRpcmVjdGx5IHByb2Nlc3MgdGhlXHJcbiAgICAgICAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXHJcbiAgICAgICAgICAgIC8vIHNwZWVkdXAgb24gQ2hyb21lIDIzIGFuZCB+MTUlIHNwZWVkdXAgb24gRmlyZWZveCAxNiwgYnV0IHJlcXVpcmVzIHRoYXRcclxuICAgICAgICAgICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxyXG4gICAgICAgICAgICBpZiAoaW5idWYgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXMuY2hhckNvZGVBdChuKTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlc1tuXTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSBpbmJ1ZjtcclxuICAgICAgICB0aGlzLnRvdGFsXyArPSBsZW5ndGg7XHJcbiAgICB9XHJcbiAgICAvKiogQG92ZXJyaWRlICovXHJcbiAgICBkaWdlc3QoKSB7XHJcbiAgICAgICAgY29uc3QgZGlnZXN0ID0gW107XHJcbiAgICAgICAgbGV0IHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEhlbHBlciB0byBtYWtlIGEgU3Vic2NyaWJlIGZ1bmN0aW9uIChqdXN0IGxpa2UgUHJvbWlzZSBoZWxwcyBtYWtlIGFcclxuICogVGhlbmFibGUpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICogICAgIGFzIGEgcHJveHkuXHJcbiAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZShleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxuY2xhc3MgT2JzZXJ2ZXJQcm94eSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXHJcbiAgICAgICAgdGhpcy50YXNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xyXG4gICAgICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxyXG4gICAgICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxyXG4gICAgICAgIHRoaXMudGFza1xyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4ZWN1dG9yKHRoaXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5leHQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlcnJvcihlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9XHJcbiAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBPYnNlcnZlciB0byB0aGUgZmFuLW91dCBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIC0gV2UgcmVxdWlyZSB0aGF0IG5vIGV2ZW50IGlzIHNlbnQgdG8gYSBzdWJzY3JpYmVyIHN5Y2hyb25vdXNseSB0byB0aGVpclxyXG4gICAgICogICBjYWxsIHRvIHN1YnNjcmliZSgpLlxyXG4gICAgICovXHJcbiAgICBzdWJzY3JpYmUobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIGxldCBvYnNlcnZlcjtcclxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIE9ic2VydmVyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmIChpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciwgW1xyXG4gICAgICAgICAgICAnbmV4dCcsXHJcbiAgICAgICAgICAgICdlcnJvcicsXHJcbiAgICAgICAgICAgICdjb21wbGV0ZSdcclxuICAgICAgICBdKSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlcixcclxuICAgICAgICAgICAgICAgIGVycm9yLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxyXG4gICAgICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcclxuICAgICAgICAvLyBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmFsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IodGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9XHJcbiAgICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xyXG4gICAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cclxuICAgIHVuc3Vic2NyaWJlT25lKGkpIHtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCAtPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvckVhY2hPYnNlcnZlcihmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICAvLyBBbHJlYWR5IGNsb3NlZCBieSBwcmV2aW91cyBldmVudC4uLi5qdXN0IGVhdCB0aGUgYWRkaXRpb25hbCB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2luY2Ugc2VuZE9uZSBjYWxscyBhc3luY2hyb25vdXNseSAtIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0XHJcbiAgICAgICAgLy8gdGhpcy5vYnNlcnZlcnMgd2lsbCBiZWNvbWUgdW5kZWZpbmVkLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kT25lKGksIGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgc2VuZE9uZShpLCBmbikge1xyXG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmbih0aGlzLm9ic2VydmVyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zIHJhaXNlZCBpbiBPYnNlcnZlcnMgb3IgbWlzc2luZyBtZXRob2RzIG9mIGFuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGVycm9yIHRvIGNvbnNvbGUuIGIvMzE0MDQ4MDZcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNsb3NlKGVycikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5maW5hbEVycm9yID0gZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm94eSBpcyBubyBsb25nZXIgbmVlZGVkIC0gZ2FyYmFnZSBjb2xsZWN0IHJlZmVyZW5jZXNcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKiBUdXJuIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gb25lIGNhbGxlZCBhc3luY2hyb25vdXNseS4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZnVuY3Rpb24gYXN5bmMoZm4sIG9uRXJyb3IpIHtcclxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHBhc3NlZCBpbiBpbXBsZW1lbnRzIGFueSBvZiB0aGUgbmFtZWQgbWV0aG9kcy5cclxuICovXHJcbmZ1bmN0aW9uIGltcGxlbWVudHNBbnlNZXRob2RzKG9iaiwgbWV0aG9kcykge1xyXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcclxuICAgICAgICBpZiAobWV0aG9kIGluIG9iaiAmJiB0eXBlb2Ygb2JqW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG5vb3AoKSB7XHJcbiAgICAvLyBkbyBub3RoaW5nXHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgZm9yIGEgcHVibGljIGZ1bmN0aW9uLlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIG1pbkNvdW50IFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBtYXhDb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnQgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBhcmdDb3VudCBUaGUgYWN0dWFsIG51bWJlciBvZiBhcmd1bWVudHMgcHJvdmlkZWQuXHJcbiAqL1xyXG5jb25zdCB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgbGV0IGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBmbk5hbWUgK1xyXG4gICAgICAgICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBhcmdDb3VudCArXHJcbiAgICAgICAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcclxuICAgICAgICAgICAgJyBFeHBlY3RzICcgK1xyXG4gICAgICAgICAgICBhcmdFcnJvciArXHJcbiAgICAgICAgICAgICcuJztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIGFyZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50XHJcbiAqIEByZXR1cm4gVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIGVycm9yIHRocm93biBmb3IgdmFsaWRhdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGVycm9yUHJlZml4KGZuTmFtZSwgYXJnTmFtZSkge1xyXG4gICAgcmV0dXJuIGAke2ZuTmFtZX0gZmFpbGVkOiAke2FyZ05hbWV9IGFyZ3VtZW50IGA7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBmbk5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcclxuICogQHBhcmFtIG9wdGlvbmFsXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShmbk5hbWUsIG5hbWVzcGFjZSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgJ25hbWVzcGFjZScpICsgJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBuYW1lc3BhY2UuJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDYWxsYmFjayhmbk5hbWUsIGFyZ3VtZW50TmFtZSwgXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoZm5OYW1lLCBhcmd1bWVudE5hbWUsIGNvbnRleHQsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnIHx8IGNvbnRleHQgPT09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlIG9yaWdpbmFsbHkgY2FtZSBmcm9tIGdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5LCBidXQgZm9yIHNvbWUgcmVhc29uIHRoZXlcclxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcclxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxyXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cclxuLy8gZnJvbUNoYXJDb2RlIHJldHVybnMgdGhlIFVURi0xNiBlbmNvZGluZyBvZiBhIGNoYXJhY3RlciAtIHNvIHNvbWUgVW5pY29kZSBjaGFyYWN0ZXJzXHJcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3RcclxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXHJcbi8vIHBhaXIpLlxyXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbmNvbnN0IHN0cmluZ1RvQnl0ZUFycmF5ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgY29uc3QgaGlnaCA9IGMgLSAweGQ4MDA7IC8vIHRoZSBoaWdoIDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgYXNzZXJ0KGkgPCBzdHIubGVuZ3RoLCAnU3Vycm9nYXRlIHBhaXIgbWlzc2luZyB0cmFpbCBzdXJyb2dhdGUuJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvdyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gMHhkYzAwOyAvLyB0aGUgbG93IDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCA2NTUzNikge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbmNvbnN0IHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIHArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgcCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxyXG4gICAgICAgICAgICBwICs9IDQ7XHJcbiAgICAgICAgICAgIGkrKzsgLy8gc2tpcCB0cmFpbCBzdXJyb2dhdGUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb3BpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG4gKiBHZW5lcmF0ZXMgYSBuZXcgdXVpZC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgdXVpZHY0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XHJcbiAgICAgICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCwgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgfSk7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBleHBvbmVudGlhbGx5IGluY3JlYXNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxyXG4gKiBTaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDEuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcclxuLyoqXHJcbiAqIFRoZSBtYXhpbXVtIG1pbGxpc2Vjb25kcyB0byBpbmNyZWFzZSB0by5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgTUFYX1ZBTFVFX01JTExJUyA9IDQgKiA2MCAqIDYwICogMTAwMDsgLy8gRm91ciBob3VycywgbGlrZSBpT1MgYW5kIEFuZHJvaWQuXHJcbi8qKlxyXG4gKiBUaGUgcGVyY2VudGFnZSBvZiBiYWNrb2ZmIHRpbWUgdG8gcmFuZG9taXplIGJ5LlxyXG4gKiBTZWVcclxuICogaHR0cDovL2dvL3NhZmUtY2xpZW50LWJlaGF2aW9yI3N0ZXAtMS1kZXRlcm1pbmUtdGhlLWFwcHJvcHJpYXRlLXJldHJ5LWludGVydmFsLXRvLWhhbmRsZS1zcGlrZS10cmFmZmljXHJcbiAqIGZvciBjb250ZXh0LlxyXG4gKlxyXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXHJcbiAqL1xyXG5jb25zdCBSQU5ET01fRkFDVE9SID0gMC41O1xyXG4vKipcclxuICogQmFzZWQgb24gdGhlIGJhY2tvZmYgbWV0aG9kIGZyb21cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvY2xvc3VyZS9nb29nL21hdGgvZXhwb25lbnRpYWxiYWNrb2ZmLmpzLlxyXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgaW50ZXJ2YWxNaWxsaXMgPSBERUZBVUxUX0lOVEVSVkFMX01JTExJUywgYmFja29mZkZhY3RvciA9IERFRkFVTFRfQkFDS09GRl9GQUNUT1IpIHtcclxuICAgIC8vIENhbGN1bGF0ZXMgYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIHZhbHVlLlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXHJcbiAgICAvLyBhbmQgY291bnQgdG8gcmVzdG9yZSBzdGF0ZS5cclxuICAgIGNvbnN0IGN1cnJCYXNlVmFsdWUgPSBpbnRlcnZhbE1pbGxpcyAqIE1hdGgucG93KGJhY2tvZmZGYWN0b3IsIGJhY2tvZmZDb3VudCk7XHJcbiAgICAvLyBBIHJhbmRvbSBcImZ1enpcIiB0byBhdm9pZCB3YXZlcyBvZiByZXRyaWVzLlxyXG4gICAgLy8gRGV2aWF0aW9uOiByYW5kb21GYWN0b3IgaXMgcmVxdWlyZWQuXHJcbiAgICBjb25zdCByYW5kb21XYWl0ID0gTWF0aC5yb3VuZChcclxuICAgIC8vIEEgZnJhY3Rpb24gb2YgdGhlIGJhY2tvZmYgdmFsdWUgdG8gYWRkL3N1YnRyYWN0LlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjaGFuZ2VzIG11bHRpcGxpY2F0aW9uIG9yZGVyIHRvIGltcHJvdmUgcmVhZGFiaWxpdHkuXHJcbiAgICBSQU5ET01fRkFDVE9SICpcclxuICAgICAgICBjdXJyQmFzZVZhbHVlICpcclxuICAgICAgICAvLyBBIHJhbmRvbSBmbG9hdCAocm91bmRlZCB0byBpbnQgYnkgTWF0aC5yb3VuZCBhYm92ZSkgaW4gdGhlIHJhbmdlIFstMSwgMV0uIERldGVybWluZXNcclxuICAgICAgICAvLyBpZiB3ZSBhZGQgb3Igc3VidHJhY3QuXHJcbiAgICAgICAgKE1hdGgucmFuZG9tKCkgLSAwLjUpICpcclxuICAgICAgICAyKTtcclxuICAgIC8vIExpbWl0cyBiYWNrb2ZmIHRvIG1heCB0byBhdm9pZCBlZmZlY3RpdmVseSBwZXJtYW5lbnQgYmFja29mZi5cclxuICAgIHJldHVybiBNYXRoLm1pbihNQVhfVkFMVUVfTUlMTElTLCBjdXJyQmFzZVZhbHVlICsgcmFuZG9tV2FpdCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGUgRW5nbGlzaCBvcmRpbmFsIGxldHRlcnMgYWZ0ZXIgYSBudW1iZXJcclxuICovXHJcbmZ1bmN0aW9uIG9yZGluYWwoaSkge1xyXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaSkpIHtcclxuICAgICAgICByZXR1cm4gYCR7aX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSk7XHJcbn1cclxuZnVuY3Rpb24gaW5kaWNhdG9yKGkpIHtcclxuICAgIGkgPSBNYXRoLmFicyhpKTtcclxuICAgIGNvbnN0IGNlbnQgPSBpICUgMTAwO1xyXG4gICAgaWYgKGNlbnQgPj0gMTAgJiYgY2VudCA8PSAyMCkge1xyXG4gICAgICAgIHJldHVybiAndGgnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjID0gaSAlIDEwO1xyXG4gICAgaWYgKGRlYyA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiAnc3QnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiAnbmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMykge1xyXG4gICAgICAgIHJldHVybiAncmQnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICd0aCc7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TW9kdWxhckluc3RhbmNlKHNlcnZpY2UpIHtcclxuICAgIGlmIChzZXJ2aWNlICYmIHNlcnZpY2UuX2RlbGVnYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2UuX2RlbGVnYXRlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ09OU1RBTlRTLCBEZWZlcnJlZCwgRXJyb3JGYWN0b3J5LCBGaXJlYmFzZUVycm9yLCBNQVhfVkFMVUVfTUlMTElTLCBSQU5ET01fRkFDVE9SLCBTaGExLCBhcmVDb29raWVzRW5hYmxlZCwgYXNzZXJ0LCBhc3NlcnRpb25FcnJvciwgYXN5bmMsIGJhc2U2NCwgYmFzZTY0RGVjb2RlLCBiYXNlNjRFbmNvZGUsIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nLCBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzLCBjb250YWlucywgY3JlYXRlTW9ja1VzZXJUb2tlbiwgY3JlYXRlU3Vic2NyaWJlLCBkZWNvZGUsIGRlZXBDb3B5LCBkZWVwRXF1YWwsIGRlZXBFeHRlbmQsIGVycm9yUHJlZml4LCBleHRyYWN0UXVlcnlzdHJpbmcsIGdldERlZmF1bHRBcHBDb25maWcsIGdldERlZmF1bHRFbXVsYXRvckhvc3QsIGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCwgZ2V0RXhwZXJpbWVudGFsU2V0dGluZywgZ2V0R2xvYmFsLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBwcm9taXNlV2l0aFRpbWVvdXQsIHF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSwgc2FmZUdldCwgc3RyaW5nTGVuZ3RoLCBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB1dWlkdjQsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIHZhbGlkYXRlQ29udGV4dE9iamVjdCwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgdmFsaWRhdGVOYW1lc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXHJcbiAqIENvbXBvbmVudCBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gYGF1dGhgLCBgYXV0aC1pbnRlcm5hbGBcclxuICovXHJcbmNsYXNzIENvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgcHVibGljIHNlcnZpY2UgbmFtZSwgZS5nLiBhcHAsIGF1dGgsIGZpcmVzdG9yZSwgZGF0YWJhc2VcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZUZhY3RvcnkgU2VydmljZSBmYWN0b3J5IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgcHVibGljIGludGVyZmFjZVxyXG4gICAgICogQHBhcmFtIHR5cGUgd2hldGhlciB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGlzIHB1YmxpYyBvciBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGluc3RhbmNlRmFjdG9yeSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZUZhY3RvcnkgPSBpbnN0YW5jZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBcIkxBWllcIiAvKiBMQVpZICovO1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFudGlhdGlvbk1vZGUobW9kZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0TXVsdGlwbGVJbnN0YW5jZXMobXVsdGlwbGVJbnN0YW5jZXMpIHtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gbXVsdGlwbGVJbnN0YW5jZXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRTZXJ2aWNlUHJvcHMocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm9uSW5zdGFuY2VDcmVhdGVkID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9uSW5pdENhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXHJcbiAgICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBnZXQoaWRlbnRpZmllcikge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuaGFzKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZGVmZXJyZWQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgZ2V0KCksIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IHJldHVybiB0aGUgdW5yZXNvbHZlZCBwcm9taXNlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpLnByb21pc2U7XHJcbiAgICB9XHJcbiAgICBnZXRJbW1lZGlhdGUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbmFsID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wdGlvbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNtYXRjaGluZyBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZm9yIFByb3ZpZGVyICR7dGhpcy5uYW1lfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgZm9yICR7dGhpcy5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIC8vIHJldHVybiBlYXJseSB3aXRob3V0IGF0dGVtcHRpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgcmVxdWlyZXMgZXhwbGljaXQgaW5pdGlhbGl6YXRpb24gKGNhbGxpbmcgYFByb3ZpZGVyLmluaXRpYWxpemUoKWApXHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBlYWdlciwgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllcjogREVGQVVMVF9FTlRSWV9OQU1FIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IGZvciBhbiBlYWdlciBDb21wb25lbnQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgdGhlIGVhZ2VyXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXphdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZSBhIGZhdGFsIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciBpbiB0aGlzIGNhc2U/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2VzIGZvciB0aGUgcGVuZGluZyBwcm9taXNlcyBhbmQgcmVzb2x2ZSB0aGVtXHJcbiAgICAgICAgLy8gTk9URTogaWYgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyBpcyBmYWxzZSwgb25seSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWRcclxuICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgZm9yIChjb25zdCBbaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZURlZmVycmVkXSBvZiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBgZ2V0T3JJbml0aWFsaXplU2VydmljZSgpYCBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbGlkIGluc3RhbmNlIHNpbmNlIGEgY29tcG9uZW50IGlzIGd1YXJhbnRlZWQuIHVzZSAhIHRvIG1ha2UgdHlwZXNjcmlwdCBoYXBweS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCBsZWF2ZSB0aGUgcHJvbWlzZSB1bnJlc29sdmVkLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICB9XHJcbiAgICAvLyBhcHAuZGVsZXRlKCkgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIG9uIGV2ZXJ5IHByb3ZpZGVyIHRvIGRlbGV0ZSB0aGUgc2VydmljZXNcclxuICAgIC8vIFRPRE86IHNob3VsZCB3ZSBtYXJrIHRoZSBwcm92aWRlciBhcyBkZWxldGVkP1xyXG4gICAgYXN5bmMgZGVsZXRlKCkge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdJTlRFUk5BTCcgaW4gc2VydmljZSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuSU5URVJOQUwuZGVsZXRlKCkpLFxyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdfZGVsZXRlJyBpbiBzZXJ2aWNlKSAvLyBtb2R1bGFyaXplZCBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIC5tYXAoc2VydmljZSA9PiBzZXJ2aWNlLl9kZWxldGUoKSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGlzQ29tcG9uZW50U2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaXNJbml0aWFsaXplZChpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmhhcyhpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIGdldE9wdGlvbnMoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc09wdGlvbnMuZ2V0KGlkZW50aWZpZXIpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZShvcHRzID0ge30pIHtcclxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgPSB7fSB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLm5hbWV9KCR7bm9ybWFsaXplZElkZW50aWZpZXJ9KSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgJHt0aGlzLm5hbWV9IGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHlldGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXIsXHJcbiAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyByZXNvbHZlIGFueSBwZW5kaW5nIHByb21pc2Ugd2FpdGluZyBmb3IgdGhlIHNlcnZpY2UgaW5zdGFuY2VcclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZElkZW50aWZpZXIgPT09IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCAgYWZ0ZXIgdGhlIHByb3ZpZGVyIGhhcyBiZWVuIGluaXRpYWxpemVkIGJ5IGNhbGxpbmcgcHJvdmlkZXIuaW5pdGlhbGl6ZSgpLlxyXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQW4gb3B0aW9uYWwgaW5zdGFuY2UgaWRlbnRpZmllclxyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBvbkluaXQoY2FsbGJhY2ssIGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0NhbGxiYWNrcyA9IChfYSA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChub3JtYWxpemVkSWRlbnRpZmllcikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBTZXQoKTtcclxuICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2Ugb25Jbml0IGNhbGxiYWNrcyBzeW5jaHJvbm91c2x5XHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgdGhlIHNlcnZpY2UgaW5zdGFuY2VgXHJcbiAgICAgKi9cclxuICAgIGludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaWRlbnRpZmllcikge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluaXQgY2FsbGJhY2tcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoeyBpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMgPSB7fSB9KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXMuZ2V0KGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSAmJiB0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpbnN0YW5jZUlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbnZva2Ugb25Jbml0IGxpc3RlbmVycy5cclxuICAgICAgICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxyXG4gICAgICAgICAgICAgKiB3aGlsZSBvbkluaXQgbGlzdGVuZXJzIGFyZSByZWdpc3RlcmVkIGJ5IGNvbnN1bWVycyBvZiB0aGUgcHJvdmlkZXIuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE9yZGVyIGlzIGltcG9ydGFudFxyXG4gICAgICAgICAgICAgKiBvbkluc3RhbmNlQ3JlYXRlZCgpIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpOyB3aGljaFxyXG4gICAgICAgICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCh0aGlzLmNvbnRhaW5lciwgaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluc3RhbmNlQ3JlYXRlZENhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4gKCEhdGhpcy5jb21wb25lbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IFwiRVhQTElDSVRcIiAvKiBFWFBMSUNJVCAqLyk7XHJcbiAgICB9XHJcbn1cclxuLy8gdW5kZWZpbmVkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikge1xyXG4gICAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpIHtcclxuICAgIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IFwiRUFHRVJcIiAvKiBFQUdFUiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIHdpdGggJHt0aGlzLm5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgdGhlIGV4aXN0aW5nIHByb3ZpZGVyIGZyb20gdGhlIGNvbnRhaW5lciwgc28gd2UgY2FuIHJlZ2lzdGVyIHRoZSBuZXcgY29tcG9uZW50XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmRlbGV0ZShjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldFByb3ZpZGVyKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm92aWRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIFByb3ZpZGVyIGZvciBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlXHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQcm92aWRlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2VzXHJcbiAqL1xyXG5jb25zdCBpbnN0YW5jZXMgPSBbXTtcclxuLyoqXHJcbiAqIFRoZSBKUyBTREsgc3VwcG9ydHMgNSBsb2cgbGV2ZWxzIGFuZCBhbHNvIGFsbG93cyBhIHVzZXIgdGhlIGFiaWxpdHkgdG9cclxuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGUgb3JkZXIgaXMgYSBmb2xsb3dzOlxyXG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCB3aWxsIGJlIGNhcHR1cmVkIChpLmUuIGlmXHJcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXHJcbiAqIGBWRVJCT1NFYCBsb2dzIHdpbGwgbm90KVxyXG4gKi9cclxudmFyIExvZ0xldmVsO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJTkZPXCJdID0gMl0gPSBcIklORk9cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV0FSTlwiXSA9IDNdID0gXCJXQVJOXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlNJTEVOVFwiXSA9IDVdID0gXCJTSUxFTlRcIjtcclxufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcclxuY29uc3QgbGV2ZWxTdHJpbmdUb0VudW0gPSB7XHJcbiAgICAnZGVidWcnOiBMb2dMZXZlbC5ERUJVRyxcclxuICAgICd2ZXJib3NlJzogTG9nTGV2ZWwuVkVSQk9TRSxcclxuICAgICdpbmZvJzogTG9nTGV2ZWwuSU5GTyxcclxuICAgICd3YXJuJzogTG9nTGV2ZWwuV0FSTixcclxuICAgICdlcnJvcic6IExvZ0xldmVsLkVSUk9SLFxyXG4gICAgJ3NpbGVudCc6IExvZ0xldmVsLlNJTEVOVFxyXG59O1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGxldmVsXHJcbiAqL1xyXG5jb25zdCBkZWZhdWx0TG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPO1xyXG4vKipcclxuICogQnkgZGVmYXVsdCwgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGRldmVsb3BlciBjb25zb2xlIChpblxyXG4gKiBjaHJvbWUpLiBUbyBhdm9pZCBmb3JjaW5nIHVzZXJzIHRvIGhhdmUgdG8gb3B0LWluIHRvIHRoZXNlIGxvZ3MgdHdpY2VcclxuICogKGkuZS4gb25jZSBmb3IgZmlyZWJhc2UsIGFuZCBvbmNlIGluIHRoZSBjb25zb2xlKSwgd2UgYXJlIHNlbmRpbmcgYERFQlVHYFxyXG4gKiBsb2dzIHRvIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uLlxyXG4gKi9cclxuY29uc3QgQ29uc29sZU1ldGhvZCA9IHtcclxuICAgIFtMb2dMZXZlbC5ERUJVR106ICdsb2cnLFxyXG4gICAgW0xvZ0xldmVsLlZFUkJPU0VdOiAnbG9nJyxcclxuICAgIFtMb2dMZXZlbC5JTkZPXTogJ2luZm8nLFxyXG4gICAgW0xvZ0xldmVsLldBUk5dOiAnd2FybicsXHJcbiAgICBbTG9nTGV2ZWwuRVJST1JdOiAnZXJyb3InXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgaGFuZGxlciB3aWxsIGZvcndhcmQgREVCVUcsIFZFUkJPU0UsIElORk8sIFdBUk4sIGFuZCBFUlJPUlxyXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxyXG4gKiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgbG9nIGxldmVsKVxyXG4gKi9cclxuY29uc3QgZGVmYXVsdExvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxvZ1R5cGUsIC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChsb2dUeXBlIDwgaW5zdGFuY2UubG9nTGV2ZWwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSBDb25zb2xlTWV0aG9kW2xvZ1R5cGVdO1xyXG4gICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICAgIGNvbnNvbGVbbWV0aG9kXShgWyR7bm93fV0gICR7aW5zdGFuY2UubmFtZX06YCwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBsb2cgYSBtZXNzYWdlIHdpdGggYW4gaW52YWxpZCBsb2dUeXBlICh2YWx1ZTogJHtsb2dUeXBlfSlgKTtcclxuICAgIH1cclxufTtcclxuY2xhc3MgTG9nZ2VyIHtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXHJcbiAgICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZ2l2ZW4gTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gZGVmYXVsdExvZ0xldmVsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYWluIChpbnRlcm5hbCkgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQ2FuIGJlIHNldCB0byBhIG5ldyBmdW5jdGlvbiBpbiBpbnRlcm5hbCBwYWNrYWdlIGNvZGUgYnV0IG5vdCBieSB1c2VyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSBkZWZhdWx0TG9nSGFuZGxlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3B0aW9uYWwsIGFkZGl0aW9uYWwsIHVzZXItZGVmaW5lZCBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zdGFuY2VzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICBnZXQgbG9nTGV2ZWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0xldmVsO1xyXG4gICAgfVxyXG4gICAgc2V0IGxvZ0xldmVsKHZhbCkge1xyXG4gICAgICAgIGlmICghKHZhbCBpbiBMb2dMZXZlbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBcIiR7dmFsfVwiIGFzc2lnbmVkIHRvIFxcYGxvZ0xldmVsXFxgYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdmFsO1xyXG4gICAgfVxyXG4gICAgLy8gV29ya2Fyb3VuZCBmb3Igc2V0dGVyL2dldHRlciBoYXZpbmcgdG8gYmUgdGhlIHNhbWUgdHlwZS5cclxuICAgIHNldExvZ0xldmVsKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxvZ0hhbmRsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0hhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBzZXQgbG9nSGFuZGxlcih2YWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBhc3NpZ25lZCB0byBgbG9nSGFuZGxlcmAgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgdXNlckxvZ0hhbmRsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJMb2dIYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgc2V0IHVzZXJMb2dIYW5kbGVyKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gdmFsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcclxuICAgICAqL1xyXG4gICAgZGVidWcoLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGxvZyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiZcclxuICAgICAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGluZm8oLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuSU5GTywgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICB3YXJuKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLldBUk4sIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xyXG4gICAgaW5zdGFuY2VzLmZvckVhY2goaW5zdCA9PiB7XHJcbiAgICAgICAgaW5zdC5zZXRMb2dMZXZlbChsZXZlbCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcclxuICAgICAgICBsZXQgY3VzdG9tTG9nTGV2ZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gKGluc3RhbmNlLCBsZXZlbCwgLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGFyZ3NcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGFyZyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGlnbm9yZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGFyZyA9PiBhcmcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAoY3VzdG9tTG9nTGV2ZWwgIT09IG51bGwgJiYgY3VzdG9tTG9nTGV2ZWwgIT09IHZvaWQgMCA/IGN1c3RvbUxvZ0xldmVsIDogaW5zdGFuY2UubG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogTG9nTGV2ZWxbbGV2ZWxdLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGluc3RhbmNlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTG9nTGV2ZWwsIExvZ2dlciwgc2V0TG9nTGV2ZWwsIHNldFVzZXJMb2dIYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiY29uc3QgaW5zdGFuY2VPZkFueSA9IChvYmplY3QsIGNvbnN0cnVjdG9ycykgPT4gY29uc3RydWN0b3JzLnNvbWUoKGMpID0+IG9iamVjdCBpbnN0YW5jZW9mIGMpO1xuXG5sZXQgaWRiUHJveHlhYmxlVHlwZXM7XG5sZXQgY3Vyc29yQWR2YW5jZU1ldGhvZHM7XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldElkYlByb3h5YWJsZVR5cGVzKCkge1xuICAgIHJldHVybiAoaWRiUHJveHlhYmxlVHlwZXMgfHxcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xuICAgICAgICAgICAgSURCRGF0YWJhc2UsXG4gICAgICAgICAgICBJREJPYmplY3RTdG9yZSxcbiAgICAgICAgICAgIElEQkluZGV4LFxuICAgICAgICAgICAgSURCQ3Vyc29yLFxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24sXG4gICAgICAgIF0pKTtcbn1cbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIChjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fFxuICAgICAgICAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXG4gICAgICAgIF0pKTtcbn1cbmNvbnN0IGN1cnNvclJlcXVlc3RNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXAocmVxdWVzdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gICAgcHJvbWlzZVxuICAgICAgICAudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgLy8gU2luY2UgY3Vyc29yaW5nIHJldXNlcyB0aGUgSURCUmVxdWVzdCAoKnNpZ2gqKSwgd2UgY2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xuICAgICAgICAgICAgY3Vyc29yUmVxdWVzdE1hcC5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb2JqZWN0U3RvcmVOYW1lcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBvYmplY3RTdG9yZU5hbWVzIChib29vKSwgc28gd2UgcG9seWZpbGwgaXQgaGVyZS5cbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXG4gICAgICAgICEoJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZU5hbWVzLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLnNldCh0eCwgc3RvcmVOYW1lcy5zb3J0ID8gc3RvcmVOYW1lcy5zb3J0KCkgOiBbc3RvcmVOYW1lc10pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodHgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBhcyBhLCBpbnN0YW5jZU9mQW55IGFzIGksIHJlcGxhY2VUcmFwcyBhcyByLCB1bndyYXAgYXMgdSwgd3JhcCBhcyB3IH07XG4iLCJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZylcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoKSA9PiBibG9ja2luZygpKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyIH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIHNldFVzZXJMb2dIYW5kbGVyLCBzZXRMb2dMZXZlbCBhcyBzZXRMb2dMZXZlbCQxIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIGdldERlZmF1bHRBcHBDb25maWcsIGRlZXBFcXVhbCwgRmlyZWJhc2VFcnJvciwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGlzSW5kZXhlZERCQXZhaWxhYmxlLCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuZXhwb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB9XHJcbiAgICAvLyBJbiBpbml0aWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGJ5IGluc3RhbGxhdGlvbnMgb25cclxuICAgIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxyXG4gICAgZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVycygpO1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcm92aWRlcnMgYW5kIGdldCBsaWJyYXJ5L3ZlcnNpb24gcGFpcnMgZnJvbSBhbnkgdGhhdCBhcmVcclxuICAgICAgICAvLyB2ZXJzaW9uIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc1xyXG4gICAgICAgICAgICAubWFwKHByb3ZpZGVyID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzVmVyc2lvblNlcnZpY2VQcm92aWRlcihwcm92aWRlcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzZXJ2aWNlLmxpYnJhcnl9LyR7c2VydmljZS52ZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobG9nU3RyaW5nID0+IGxvZ1N0cmluZylcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxyXG4gKlxyXG4gKiBOT1RFOiBVc2luZyBQcm92aWRlcjwnYXBwLXZlcnNpb24nPiBpcyBhIGhhY2sgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcHJvdmlkZXJcclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXHJcbiAqIHByb3ZpZGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcclxuICAgIHJldHVybiAoY29tcG9uZW50ID09PSBudWxsIHx8IGNvbXBvbmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcG9uZW50LnR5cGUpID09PSBcIlZFUlNJT05cIiAvKiBWRVJTSU9OICovO1xyXG59XG5cbmNvbnN0IG5hbWUkbyA9IFwiQGZpcmViYXNlL2FwcFwiO1xuY29uc3QgdmVyc2lvbiQxID0gXCIwLjguMlwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG5cbmNvbnN0IG5hbWUkbiA9IFwiQGZpcmViYXNlL2FwcC1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRtID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGwgPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxuY29uc3QgbmFtZSRrID0gXCJAZmlyZWJhc2UvYXBwLWNoZWNrLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGogPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2tcIjtcblxuY29uc3QgbmFtZSRpID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xuXG5jb25zdCBuYW1lJGggPSBcIkBmaXJlYmFzZS9hdXRoLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGcgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xuXG5jb25zdCBuYW1lJGYgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRlID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zXCI7XG5cbmNvbnN0IG5hbWUkZCA9IFwiQGZpcmViYXNlL2Z1bmN0aW9ucy1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRjID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuXG5jb25zdCBuYW1lJGIgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGEgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmdcIjtcblxuY29uc3QgbmFtZSQ5ID0gXCJAZmlyZWJhc2UvbWVzc2FnaW5nLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDggPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZVwiO1xuXG5jb25zdCBuYW1lJDcgPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQ2ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZ1wiO1xuXG5jb25zdCBuYW1lJDUgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDQgPSBcIkBmaXJlYmFzZS9zdG9yYWdlXCI7XG5cbmNvbnN0IG5hbWUkMyA9IFwiQGZpcmViYXNlL3N0b3JhZ2UtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkMiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG5jb25zdCBuYW1lJDEgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmUtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUgPSBcImZpcmViYXNlXCI7XG5jb25zdCB2ZXJzaW9uID0gXCI5LjEyLjFcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGFwcCBuYW1lXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XHJcbmNvbnN0IFBMQVRGT1JNX0xPR19TVFJJTkcgPSB7XHJcbiAgICBbbmFtZSRvXTogJ2ZpcmUtY29yZScsXHJcbiAgICBbbmFtZSRuXTogJ2ZpcmUtY29yZS1jb21wYXQnLFxyXG4gICAgW25hbWUkbF06ICdmaXJlLWFuYWx5dGljcycsXHJcbiAgICBbbmFtZSRtXTogJ2ZpcmUtYW5hbHl0aWNzLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRqXTogJ2ZpcmUtYXBwLWNoZWNrJyxcclxuICAgIFtuYW1lJGtdOiAnZmlyZS1hcHAtY2hlY2stY29tcGF0JyxcclxuICAgIFtuYW1lJGldOiAnZmlyZS1hdXRoJyxcclxuICAgIFtuYW1lJGhdOiAnZmlyZS1hdXRoLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRnXTogJ2ZpcmUtcnRkYicsXHJcbiAgICBbbmFtZSRmXTogJ2ZpcmUtcnRkYi1jb21wYXQnLFxyXG4gICAgW25hbWUkZV06ICdmaXJlLWZuJyxcclxuICAgIFtuYW1lJGRdOiAnZmlyZS1mbi1jb21wYXQnLFxyXG4gICAgW25hbWUkY106ICdmaXJlLWlpZCcsXHJcbiAgICBbbmFtZSRiXTogJ2ZpcmUtaWlkLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRhXTogJ2ZpcmUtZmNtJyxcclxuICAgIFtuYW1lJDldOiAnZmlyZS1mY20tY29tcGF0JyxcclxuICAgIFtuYW1lJDhdOiAnZmlyZS1wZXJmJyxcclxuICAgIFtuYW1lJDddOiAnZmlyZS1wZXJmLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ2XTogJ2ZpcmUtcmMnLFxyXG4gICAgW25hbWUkNV06ICdmaXJlLXJjLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ0XTogJ2ZpcmUtZ2NzJyxcclxuICAgIFtuYW1lJDNdOiAnZmlyZS1nY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJDJdOiAnZmlyZS1mc3QnLFxyXG4gICAgW25hbWUkMV06ICdmaXJlLWZzdC1jb21wYXQnLFxyXG4gICAgJ2ZpcmUtanMnOiAnZmlyZS1qcycsXHJcbiAgICBbbmFtZV06ICdmaXJlLWpzLWFsbCdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgX2FwcHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBSZWdpc3RlcmVkIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuY29uc3QgX2NvbXBvbmVudHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCBiZWluZyBhZGRlZCB0byB0aGlzIGFwcCdzIGNvbnRhaW5lclxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXBwLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgJHthcHAubmFtZX1gLCBlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIGFwcC5jb250YWluZXIuYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSBjb21wb25lbnQgdG8gcmVnaXN0ZXJcclxuICogQHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZWdpc3RlckNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcclxuICAgIGlmIChfY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYFRoZXJlIHdlcmUgbXVsdGlwbGUgYXR0ZW1wdHMgdG8gcmVnaXN0ZXIgY29tcG9uZW50ICR7Y29tcG9uZW50TmFtZX0uYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgX2NvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCB0byBleGlzdGluZyBhcHAgaW5zdGFuY2VzXHJcbiAgICBmb3IgKGNvbnN0IGFwcCBvZiBfYXBwcy52YWx1ZXMoKSkge1xyXG4gICAgICAgIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBGaXJlYmFzZUFwcCBpbnN0YW5jZVxyXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB0aGUgcHJvdmlkZXIgZm9yIHRoZSBzZXJ2aWNlIHdpdGggdGhlIG1hdGNoaW5nIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKSB7XHJcbiAgICBjb25zdCBoZWFydGJlYXRDb250cm9sbGVyID0gYXBwLmNvbnRhaW5lclxyXG4gICAgICAgIC5nZXRQcm92aWRlcignaGVhcnRiZWF0JylcclxuICAgICAgICAuZ2V0SW1tZWRpYXRlKHsgb3B0aW9uYWw6IHRydWUgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0Q29udHJvbGxlcikge1xyXG4gICAgICAgIHZvaWQgaGVhcnRiZWF0Q29udHJvbGxlci50cmlnZ2VySGVhcnRiZWF0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqIEBwYXJhbSBpbnN0YW5jZUlkZW50aWZpZXIgLSBzZXJ2aWNlIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSB0aGUgc2VydmljZSBzdXBwb3J0cyBtdWx0aXBsZSBpbnN0YW5jZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfcmVtb3ZlU2VydmljZUluc3RhbmNlKGFwcCwgbmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKS5jbGVhckluc3RhbmNlKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbn1cclxuLyoqXHJcbiAqIFRlc3Qgb25seVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9jbGVhckNvbXBvbmVudHMoKSB7XHJcbiAgICBfY29tcG9uZW50cy5jbGVhcigpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEVSUk9SUyA9IHtcclxuICAgIFtcIm5vLWFwcFwiIC8qIE5PX0FQUCAqL106IFwiTm8gRmlyZWJhc2UgQXBwICd7JGFwcE5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIEZpcmViYXNlIEFwcC5pbml0aWFsaXplQXBwKCknLFxyXG4gICAgW1wiYmFkLWFwcC1uYW1lXCIgLyogQkFEX0FQUF9OQU1FICovXTogXCJJbGxlZ2FsIEFwcCBuYW1lOiAneyRhcHBOYW1lfVwiLFxyXG4gICAgW1wiZHVwbGljYXRlLWFwcFwiIC8qIERVUExJQ0FURV9BUFAgKi9dOiBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBleGlzdHMgd2l0aCBkaWZmZXJlbnQgb3B0aW9ucyBvciBjb25maWdcIixcclxuICAgIFtcImFwcC1kZWxldGVkXCIgLyogQVBQX0RFTEVURUQgKi9dOiBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBkZWxldGVkXCIsXHJcbiAgICBbXCJuby1vcHRpb25zXCIgLyogTk9fT1BUSU9OUyAqL106ICdOZWVkIHRvIHByb3ZpZGUgb3B0aW9ucywgd2hlbiBub3QgYmVpbmcgZGVwbG95ZWQgdG8gaG9zdGluZyB2aWEgc291cmNlLicsXHJcbiAgICBbXCJpbnZhbGlkLWFwcC1hcmd1bWVudFwiIC8qIElOVkFMSURfQVBQX0FSR1VNRU5UICovXTogJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcclxuICAgICAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLicsXHJcbiAgICBbXCJpbnZhbGlkLWxvZy1hcmd1bWVudFwiIC8qIElOVkFMSURfTE9HX0FSR1VNRU5UICovXTogJ0ZpcnN0IGFyZ3VtZW50IHRvIGBvbkxvZ2AgbXVzdCBiZSBudWxsIG9yIGEgZnVuY3Rpb24uJyxcclxuICAgIFtcImlkYi1vcGVuXCIgLyogSURCX09QRU4gKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gb3BlbmluZyBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLWdldFwiIC8qIElEQl9HRVQgKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gcmVhZGluZyBmcm9tIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItc2V0XCIgLyogSURCX1dSSVRFICovXTogJ0Vycm9yIHRocm93biB3aGVuIHdyaXRpbmcgdG8gSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1kZWxldGVcIiAvKiBJREJfREVMRVRFICovXTogJ0Vycm9yIHRocm93biB3aGVuIGRlbGV0aW5nIGZyb20gSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJ1xyXG59O1xyXG5jb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeSgnYXBwJywgJ0ZpcmViYXNlJywgRVJST1JTKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRmlyZWJhc2VBcHBJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGNvbmZpZywgY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5faXNEZWxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9XHJcbiAgICAgICAgICAgIGNvbmZpZy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENvbXBvbmVudChuZXcgQ29tcG9uZW50KCdhcHAnLCAoKSA9PiB0aGlzLCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgIH1cclxuICAgIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICAgIH1cclxuICAgIGdldCBjb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNEZWxldGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RlbGV0ZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgaXNEZWxldGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBjaGVja0Rlc3Ryb3llZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtZGVsZXRlZFwiIC8qIEFQUF9ERUxFVEVEICovLCB7IGFwcE5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBTREsgdmVyc2lvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgU0RLX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQXBwKF9vcHRpb25zLCByYXdDb25maWcgPSB7fSkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSByYXdDb25maWc7XHJcbiAgICAgICAgcmF3Q29uZmlnID0geyBuYW1lIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgbmFtZTogREVGQVVMVF9FTlRSWV9OQU1FLCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGZhbHNlIH0sIHJhd0NvbmZpZyk7XHJcbiAgICBjb25zdCBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBCQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0gZ2V0RGVmYXVsdEFwcENvbmZpZygpKTtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tb3B0aW9uc1wiIC8qIE5PX09QVElPTlMgKi8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgZXhpc3RpbmdBcHAub3B0aW9ucykgJiZcclxuICAgICAgICAgICAgZGVlcEVxdWFsKGNvbmZpZywgZXhpc3RpbmdBcHAuY29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImR1cGxpY2F0ZS1hcHBcIiAvKiBEVVBMSUNBVEVfQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcclxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIF9jb21wb25lbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3QXBwID0gbmV3IEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcik7XHJcbiAgICBfYXBwcy5zZXQobmFtZSwgbmV3QXBwKTtcclxuICAgIHJldHVybiBuZXdBcHA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogV2hlbiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC4gV2hlbiBhbiBhcHAgbmFtZVxyXG4gKiBpcyBwcm92aWRlZCwgdGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cclxuICpcclxuICogQW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiB0aGUgYXBwIGJlaW5nIHJldHJpZXZlZCBoYXMgbm90IHlldCBiZWVuXHJcbiAqIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiB0aGUgZGVmYXVsdCBhcHBcclxuICogY29uc3QgYXBwID0gZ2V0QXBwKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiBhIG5hbWVkIGFwcFxyXG4gKiBjb25zdCBvdGhlckFwcCA9IGdldEFwcChcIm90aGVyQXBwXCIpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIG5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBhcHAgdG8gcmV0dXJuLiBJZiBubyBuYW1lIGlzXHJcbiAqICAgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cclxuICpcclxuICogQHJldHVybnMgVGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZCBhcHAgbmFtZS5cclxuICogICBJZiBubyBhcHAgbmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHAobmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgY29uc3QgYXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKCFhcHAgJiYgbmFtZSA9PT0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVBcHAoKTtcclxuICAgIH1cclxuICAgIGlmICghYXBwKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcHBcIiAvKiBOT19BUFAgKi8sIHsgYXBwTmFtZTogbmFtZSB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcHA7XHJcbn1cclxuLyoqXHJcbiAqIEEgKHJlYWQtb25seSkgYXJyYXkgb2YgYWxsIGluaXRpYWxpemVkIGFwcHMuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEFwcHMoKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbShfYXBwcy52YWx1ZXMoKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJlbmRlcnMgdGhpcyBhcHAgdW51c2FibGUgYW5kIGZyZWVzIHRoZSByZXNvdXJjZXMgb2YgYWxsIGFzc29jaWF0ZWRcclxuICogc2VydmljZXMuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogZGVsZXRlQXBwKGFwcClcclxuICogICAudGhlbihmdW5jdGlvbigpIHtcclxuICogICAgIGNvbnNvbGUubG9nKFwiQXBwIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gKiAgIH0pXHJcbiAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGRlbGV0aW5nIGFwcDpcIiwgZXJyb3IpO1xyXG4gKiAgIH0pO1xyXG4gKiBgYGBcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlQXBwKGFwcCkge1xyXG4gICAgY29uc3QgbmFtZSA9IGFwcC5uYW1lO1xyXG4gICAgaWYgKF9hcHBzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgIF9hcHBzLmRlbGV0ZShuYW1lKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChhcHAuY29udGFpbmVyXHJcbiAgICAgICAgICAgIC5nZXRQcm92aWRlcnMoKVxyXG4gICAgICAgICAgICAubWFwKHByb3ZpZGVyID0+IHByb3ZpZGVyLmRlbGV0ZSgpKSk7XHJcbiAgICAgICAgYXBwLmlzRGVsZXRlZCA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhIGxpYnJhcnkncyBuYW1lIGFuZCB2ZXJzaW9uIGZvciBwbGF0Zm9ybSBsb2dnaW5nIHB1cnBvc2VzLlxyXG4gKiBAcGFyYW0gbGlicmFyeSAtIE5hbWUgb2YgMXAgb3IgM3AgbGlicmFyeSAoZS5nLiBmaXJlc3RvcmUsIGFuZ3VsYXJmaXJlKVxyXG4gKiBAcGFyYW0gdmVyc2lvbiAtIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGF0IGxpYnJhcnkuXHJcbiAqIEBwYXJhbSB2YXJpYW50IC0gQnVuZGxlIHZhcmlhbnQsIGUuZy4sIG5vZGUsIHJuLCBldGMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyVmVyc2lvbihsaWJyYXJ5S2V5T3JOYW1lLCB2ZXJzaW9uLCB2YXJpYW50KSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICAvLyBUT0RPOiBXZSBjYW4gdXNlIHRoaXMgY2hlY2sgdG8gd2hpdGVsaXN0IHN0cmluZ3Mgd2hlbi9pZiB3ZSBzZXQgdXBcclxuICAgIC8vIGEgZ29vZCB3aGl0ZWxpc3Qgc3lzdGVtLlxyXG4gICAgbGV0IGxpYnJhcnkgPSAoX2EgPSBQTEFURk9STV9MT0dfU1RSSU5HW2xpYnJhcnlLZXlPck5hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBsaWJyYXJ5S2V5T3JOYW1lO1xyXG4gICAgaWYgKHZhcmlhbnQpIHtcclxuICAgICAgICBsaWJyYXJ5ICs9IGAtJHt2YXJpYW50fWA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsaWJyYXJ5TWlzbWF0Y2ggPSBsaWJyYXJ5Lm1hdGNoKC9cXHN8XFwvLyk7XHJcbiAgICBjb25zdCB2ZXJzaW9uTWlzbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKC9cXHN8XFwvLyk7XHJcbiAgICBpZiAobGlicmFyeU1pc21hdGNoIHx8IHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHdhcm5pbmcgPSBbXHJcbiAgICAgICAgICAgIGBVbmFibGUgdG8gcmVnaXN0ZXIgbGlicmFyeSBcIiR7bGlicmFyeX1cIiB3aXRoIHZlcnNpb24gXCIke3ZlcnNpb259XCI6YFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goYGxpYnJhcnkgbmFtZSBcIiR7bGlicmFyeX1cIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMgKHdoaXRlc3BhY2Ugb3IgXCIvXCIpYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggJiYgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaCgnYW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKGB2ZXJzaW9uIG5hbWUgXCIke3ZlcnNpb259XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2dnZXIud2Fybih3YXJuaW5nLmpvaW4oJyAnKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoYCR7bGlicmFyeX0tdmVyc2lvbmAsICgpID0+ICh7IGxpYnJhcnksIHZlcnNpb24gfSksIFwiVkVSU0lPTlwiIC8qIFZFUlNJT04gKi8pKTtcclxufVxyXG4vKipcclxuICogU2V0cyBsb2cgaGFuZGxlciBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqIEBwYXJhbSBsb2dDYWxsYmFjayAtIEFuIG9wdGlvbmFsIGN1c3RvbSBsb2cgaGFuZGxlciB0aGF0IGV4ZWN1dGVzIHVzZXIgY29kZSB3aGVuZXZlclxyXG4gKiB0aGUgRmlyZWJhc2UgU0RLIG1ha2VzIGEgbG9nZ2luZyBjYWxsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkxvZyhsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBJTlZBTElEX0xPR19BUkdVTUVOVCAqLyk7XHJcbiAgICB9XHJcbiAgICBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGxldmVsIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIGFyZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYGluZm9gLCBlcnJvcnMgYXJlIGxvZ2dlZCwgYnV0IGBkZWJ1Z2AgYW5kXHJcbiAqIGB2ZXJib3NlYCBsb2dzIGFyZSBub3QpLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xyXG4gICAgc2V0TG9nTGV2ZWwkMShsb2dMZXZlbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREJfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtZGF0YWJhc2UnO1xyXG5jb25zdCBEQl9WRVJTSU9OID0gMTtcclxuY29uc3QgU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLW9wZW5cIiAvKiBJREJfT1BFTiAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYlByb21pc2U7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gcmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCKGFwcCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIHJldHVybiBkYlxyXG4gICAgICAgICAgICAudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLm9iamVjdFN0b3JlKFNUT1JFX05BTUUpXHJcbiAgICAgICAgICAgIC5nZXQoY29tcHV0ZUtleShhcHApKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGUubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpZGJHZXRFcnJvciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLWdldFwiIC8qIElEQl9HRVQgKi8sIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JNZXNzYWdlOiAoX2EgPSBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oaWRiR2V0RXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHdyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCKGFwcCwgaGVhcnRiZWF0T2JqZWN0KSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihTVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0U3RvcmUgPSB0eC5vYmplY3RTdG9yZShTVE9SRV9OQU1FKTtcclxuICAgICAgICBhd2FpdCBvYmplY3RTdG9yZS5wdXQoaGVhcnRiZWF0T2JqZWN0LCBjb21wdXRlS2V5KGFwcCkpO1xyXG4gICAgICAgIHJldHVybiB0eC5kb25lO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItc2V0XCIgLyogSURCX1dSSVRFICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogKF9hID0gZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlS2V5KGFwcCkge1xyXG4gICAgcmV0dXJuIGAke2FwcC5uYW1lfSEke2FwcC5vcHRpb25zLmFwcElkfWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgTUFYX0hFQURFUl9CWVRFUyA9IDEwMjQ7XHJcbi8vIDMwIGRheXNcclxuY29uc3QgU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUyA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuY2xhc3MgSGVhcnRiZWF0U2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW4tbWVtb3J5IGNhY2hlIGZvciBoZWFydGJlYXRzLCB1c2VkIGJ5IGdldEhlYXJ0YmVhdHNIZWFkZXIoKSB0byBnZW5lcmF0ZVxyXG4gICAgICAgICAqIHRoZSBoZWFkZXIgc3RyaW5nLlxyXG4gICAgICAgICAqIFN0b3JlcyBvbmUgcmVjb3JkIHBlciBkYXRlLiBUaGlzIHdpbGwgYmUgY29uc29saWRhdGVkIGludG8gdGhlIHN0YW5kYXJkXHJcbiAgICAgICAgICogZm9ybWF0IG9mIG9uZSByZWNvcmQgcGVyIHVzZXIgYWdlbnQgc3RyaW5nIGJlZm9yZSBiZWluZyBzZW50IGFzIGEgaGVhZGVyLlxyXG4gICAgICAgICAqIFBvcHVsYXRlZCBmcm9tIGluZGV4ZWREQiB3aGVuIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkXHJcbiAgICAgICAgICogYmUga2VwdCBpbiBzeW5jIHdpdGggaW5kZXhlZERCLlxyXG4gICAgICAgICAqIExlYXZlIHB1YmxpYyBmb3IgZWFzaWVyIHRlc3RpbmcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBIZWFydGJlYXRTdG9yYWdlSW1wbChhcHApO1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UgPSB0aGlzLl9zdG9yYWdlLnJlYWQoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIHJlcG9ydCBhIGhlYXJ0YmVhdC4gVGhlIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGVcclxuICAgICAqIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IG9iamVjdCwgdXBkYXRlIGhlYXJ0YmVhdHNDYWNoZSwgYW5kIHBlcnNpc3QgaXRcclxuICAgICAqIHRvIEluZGV4ZWREQi5cclxuICAgICAqIE5vdGUgdGhhdCB3ZSBvbmx5IHN0b3JlIG9uZSBoZWFydGJlYXQgcGVyIGRheS4gU28gaWYgYSBoZWFydGJlYXQgZm9yIHRvZGF5IGlzXHJcbiAgICAgKiBhbHJlYWR5IGxvZ2dlZCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGluIHRoZSBzYW1lIGRheSB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRyaWdnZXJIZWFydGJlYXQoKSB7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1Mb2dnZXIgPSB0aGlzLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBcIkZpcmViYXNlIHVzZXIgYWdlbnRcIiBzdHJpbmcgZnJvbSB0aGUgcGxhdGZvcm0gbG9nZ2VyXHJcbiAgICAgICAgLy8gc2VydmljZSwgbm90IHRoZSBicm93c2VyIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgYWdlbnQgPSBwbGF0Zm9ybUxvZ2dlci5nZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90IHN0b3JlIGEgaGVhcnRiZWF0IGlmIG9uZSBpcyBhbHJlYWR5IHN0b3JlZCBmb3IgdGhpcyBkYXlcclxuICAgICAgICAvLyBvciBpZiBhIGhlYWRlciBoYXMgYWxyZWFkeSBiZWVuIHNlbnQgdG9kYXkuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPT09IGRhdGUgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuc29tZShzaW5nbGVEYXRlSGVhcnRiZWF0ID0+IHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSA9PT0gZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgZGF0ZS4gQ3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMucHVzaCh7IGRhdGUsIGFnZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgZW50cmllcyBvbGRlciB0aGFuIDMwIGRheXMuXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5maWx0ZXIoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhiVGltZXN0YW1wID0gbmV3IERhdGUoc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBub3cgLSBoYlRpbWVzdGFtcCA8PSBTVE9SRURfSEVBUlRCRUFUX1JFVEVOVElPTl9NQVhfTUlMTElTO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHdoaWNoIGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgaGVhcnRiZWF0LXNwZWNpZmljIGhlYWRlciBkaXJlY3RseS5cclxuICAgICAqIEl0IGFsc28gY2xlYXJzIGFsbCBoZWFydGJlYXRzIGZyb20gbWVtb3J5IGFzIHdlbGwgYXMgaW4gSW5kZXhlZERCLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IENvbnN1bWluZyBwcm9kdWN0IFNES3Mgc2hvdWxkIG5vdCBzZW5kIHRoZSBoZWFkZXIgaWYgdGhpcyBtZXRob2RcclxuICAgICAqIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRIZWFydGJlYXRzSGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBudWxsIG9yIHRoZSBhcnJheSBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gZGF0YSB0byBzZW5kLlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICAvLyBFeHRyYWN0IGFzIG1hbnkgaGVhcnRiZWF0cyBmcm9tIHRoZSBjYWNoZSBhcyB3aWxsIGZpdCB1bmRlciB0aGUgc2l6ZSBsaW1pdC5cclxuICAgICAgICBjb25zdCB7IGhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgfSA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJTdHJpbmcgPSBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNUb1NlbmQgfSkpO1xyXG4gICAgICAgIC8vIFN0b3JlIGxhc3Qgc2VudCBkYXRlIHRvIHByZXZlbnQgYW5vdGhlciBiZWluZyBsb2dnZWQvc2VudCBmb3IgdGhlIHNhbWUgZGF5LlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPSBkYXRlO1xyXG4gICAgICAgIGlmICh1bnNlbnRFbnRyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gU3RvcmUgYW55IHVuc2VudCBlbnRyaWVzIGlmIHRoZXkgZXhpc3QuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdW5zZW50RW50cmllcztcclxuICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyBtb3JlIGxpa2VseSB0aGFuIGVtcHR5aW5nIHRoZSBhcnJheSAoYmVsb3cpIHRvIGxlYWQgdG8gc29tZSBvZGQgc3RhdGVcclxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGNhY2hlIGlzbid0IGVtcHR5IGFuZCB0aGlzIHdpbGwgYmUgY2FsbGVkIGFnYWluIG9uIHRoZSBuZXh0IHJlcXVlc3QsXHJcbiAgICAgICAgICAgIC8vIGFuZCBpcyBwcm9iYWJseSBzYWZlc3QgaWYgd2UgYXdhaXQgaXQuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBEbyBub3Qgd2FpdCBmb3IgdGhpcywgdG8gcmVkdWNlIGxhdGVuY3kuXHJcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlclN0cmluZztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRVVENEYXRlU3RyaW5nKCkge1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gUmV0dXJucyBkYXRlIGZvcm1hdCAnWVlZWS1NTS1ERCdcclxuICAgIHJldHVybiB0b2RheS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoaGVhcnRiZWF0c0NhY2hlLCBtYXhTaXplID0gTUFYX0hFQURFUl9CWVRFUykge1xyXG4gICAgLy8gSGVhcnRiZWF0cyBncm91cGVkIGJ5IHVzZXIgYWdlbnQgaW4gdGhlIHN0YW5kYXJkIGZvcm1hdCB0byBiZSBzZW50IGluXHJcbiAgICAvLyB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0c1RvU2VuZCA9IFtdO1xyXG4gICAgLy8gU2luZ2xlIGRhdGUgZm9ybWF0IGhlYXJ0YmVhdHMgdGhhdCBhcmUgbm90IHNlbnQuXHJcbiAgICBsZXQgdW5zZW50RW50cmllcyA9IGhlYXJ0YmVhdHNDYWNoZS5zbGljZSgpO1xyXG4gICAgZm9yIChjb25zdCBzaW5nbGVEYXRlSGVhcnRiZWF0IG9mIGhlYXJ0YmVhdHNDYWNoZSkge1xyXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IHdpdGggdGhlIHNhbWUgdXNlciBhZ2VudC5cclxuICAgICAgICBjb25zdCBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChoYiA9PiBoYi5hZ2VudCA9PT0gc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCk7XHJcbiAgICAgICAgaWYgKCFoZWFydGJlYXRFbnRyeSkge1xyXG4gICAgICAgICAgICAvLyBJZiBubyBlbnRyeSBmb3IgdGhpcyB1c2VyIGFnZW50IGV4aXN0cywgY3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGFnZW50OiBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0ZXM6IFtzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGVdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY291bnRCeXRlcyhoZWFydGJlYXRzVG9TZW5kKSA+IG1heFNpemUpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGhlYXJ0YmVhdFxyXG4gICAgICAgICAgICAgICAgLy8gZW50cnkgYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzVG9TZW5kLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnB1c2goc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGhlYWRlciB3b3VsZCBleGNlZWQgbWF4IHNpemUsIHJlbW92ZSB0aGUgYWRkZWQgZGF0ZVxyXG4gICAgICAgICAgICAvLyBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBvcCB1bnNlbnQgZW50cnkgZnJvbSBxdWV1ZS4gKFNraXBwZWQgaWYgYWRkaW5nIHRoZSBlbnRyeSBleGNlZWRlZFxyXG4gICAgICAgIC8vIHF1b3RhIGFuZCB0aGUgbG9vcCBicmVha3MgZWFybHkuKVxyXG4gICAgICAgIHVuc2VudEVudHJpZXMgPSB1bnNlbnRFbnRyaWVzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFydGJlYXRzVG9TZW5kLFxyXG4gICAgICAgIHVuc2VudEVudHJpZXNcclxuICAgIH07XHJcbn1cclxuY2xhc3MgSGVhcnRiZWF0U3RvcmFnZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZSA9IHRoaXMucnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpIHtcclxuICAgICAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFsbCBoZWFydGJlYXRzLlxyXG4gICAgICovXHJcbiAgICBhc3luYyByZWFkKCkge1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkhlYXJ0YmVhdE9iamVjdCA9IGF3YWl0IHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQih0aGlzLmFwcCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGJIZWFydGJlYXRPYmplY3QgfHwgeyBoZWFydGJlYXRzOiBbXSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG92ZXJ3cml0ZSB0aGUgc3RvcmFnZSB3aXRoIHRoZSBwcm92aWRlZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBvdmVyd3JpdGUoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gYWRkIGhlYXJ0YmVhdHNcclxuICAgIGFzeW5jIGFkZChoZWFydGJlYXRzT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0ID0gYXdhaXQgdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xyXG4gICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAuLi5oZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYnl0ZXMgb2YgYSBIZWFydGJlYXRzQnlVc2VyQWdlbnQgYXJyYXkgYWZ0ZXIgYmVpbmcgd3JhcHBlZFxyXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxyXG4gKiB0byBiYXNlIDY0LlxyXG4gKi9cclxuZnVuY3Rpb24gY291bnRCeXRlcyhoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cclxuICAgIHJldHVybiBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhcclxuICAgIC8vIGhlYXJ0YmVhdHNDYWNoZSB3cmFwcGVyIHByb3BlcnRpZXNcclxuICAgIEpTT04uc3RyaW5naWZ5KHsgdmVyc2lvbjogMiwgaGVhcnRiZWF0czogaGVhcnRiZWF0c0NhY2hlIH0pKS5sZW5ndGg7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyh2YXJpYW50KSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgY29udGFpbmVyID0+IG5ldyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIFBSSVZBVEUgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KCdoZWFydGJlYXQnLCBjb250YWluZXIgPT4gbmV3IEhlYXJ0YmVhdFNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIFBSSVZBVEUgKi8pKTtcclxuICAgIC8vIFJlZ2lzdGVyIGBhcHBgIHBhY2thZ2UuXHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSRvLCB2ZXJzaW9uJDEsIHZhcmlhbnQpO1xyXG4gICAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lJG8sIHZlcnNpb24kMSwgJ2VzbTIwMTcnKTtcclxuICAgIC8vIFJlZ2lzdGVyIHBsYXRmb3JtIFNESyBpZGVudGlmaWVyIChubyB2ZXJzaW9uKS5cclxuICAgIHJlZ2lzdGVyVmVyc2lvbignZmlyZS1qcycsICcnKTtcclxufVxuXG4vKipcclxuICogRmlyZWJhc2UgQXBwXHJcbiAqXHJcbiAqIEByZW1hcmtzIFRoaXMgcGFja2FnZSBjb29yZGluYXRlcyB0aGUgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoZSBkaWZmZXJlbnQgRmlyZWJhc2UgY29tcG9uZW50c1xyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbnJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoJycpO1xuXG5leHBvcnQgeyBTREtfVkVSU0lPTiwgREVGQVVMVF9FTlRSWV9OQU1FIGFzIF9ERUZBVUxUX0VOVFJZX05BTUUsIF9hZGRDb21wb25lbnQsIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCwgX2FwcHMsIF9jbGVhckNvbXBvbmVudHMsIF9jb21wb25lbnRzLCBfZ2V0UHJvdmlkZXIsIF9yZWdpc3RlckNvbXBvbmVudCwgX3JlbW92ZVNlcnZpY2VJbnN0YW5jZSwgZGVsZXRlQXBwLCBnZXRBcHAsIGdldEFwcHMsIGluaXRpYWxpemVBcHAsIG9uTG9nLCByZWdpc3RlclZlcnNpb24sIHNldExvZ0xldmVsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjkuMTIuMVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBkZWVwRXF1YWwsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNNb2JpbGVDb3Jkb3ZhLCBpc1JlYWN0TmF0aXZlLCBGaXJlYmFzZUVycm9yLCBxdWVyeXN0cmluZywgZ2V0TW9kdWxhckluc3RhbmNlLCBiYXNlNjREZWNvZGUsIGdldFVBLCBpc0lFLCBjcmVhdGVTdWJzY3JpYmUsIHF1ZXJ5c3RyaW5nRGVjb2RlLCBleHRyYWN0UXVlcnlzdHJpbmcsIGlzRW1wdHksIGdldEV4cGVyaW1lbnRhbFNldHRpbmcsIGdldERlZmF1bHRFbXVsYXRvckhvc3QgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBTREtfVkVSU0lPTiwgX2dldFByb3ZpZGVyLCBfcmVnaXN0ZXJDb21wb25lbnQsIHJlZ2lzdGVyVmVyc2lvbiwgZ2V0QXBwIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuIGVudW0gb2YgZmFjdG9ycyB0aGF0IG1heSBiZSB1c2VkIGZvciBtdWx0aWZhY3RvciBhdXRoZW50aWNhdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgRmFjdG9ySWQgPSB7XHJcbiAgICAvKiogUGhvbmUgYXMgc2Vjb25kIGZhY3RvciAqL1xyXG4gICAgUEhPTkU6ICdwaG9uZSdcclxufTtcclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIG9mIHN1cHBvcnRlZCBwcm92aWRlcnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IFByb3ZpZGVySWQgPSB7XHJcbiAgICAvKiogRmFjZWJvb2sgcHJvdmlkZXIgSUQgKi9cclxuICAgIEZBQ0VCT09LOiAnZmFjZWJvb2suY29tJyxcclxuICAgIC8qKiBHaXRIdWIgcHJvdmlkZXIgSUQgKi9cclxuICAgIEdJVEhVQjogJ2dpdGh1Yi5jb20nLFxyXG4gICAgLyoqIEdvb2dsZSBwcm92aWRlciBJRCAqL1xyXG4gICAgR09PR0xFOiAnZ29vZ2xlLmNvbScsXHJcbiAgICAvKiogUGFzc3dvcmQgcHJvdmlkZXIgKi9cclxuICAgIFBBU1NXT1JEOiAncGFzc3dvcmQnLFxyXG4gICAgLyoqIFBob25lIHByb3ZpZGVyICovXHJcbiAgICBQSE9ORTogJ3Bob25lJyxcclxuICAgIC8qKiBUd2l0dGVyIHByb3ZpZGVyIElEICovXHJcbiAgICBUV0lUVEVSOiAndHdpdHRlci5jb20nXHJcbn07XHJcbi8qKlxyXG4gKiBFbnVtZXJhdGlvbiBvZiBzdXBwb3J0ZWQgc2lnbi1pbiBtZXRob2RzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBTaWduSW5NZXRob2QgPSB7XHJcbiAgICAvKiogRW1haWwgbGluayBzaWduIGluIG1ldGhvZCAqL1xyXG4gICAgRU1BSUxfTElOSzogJ2VtYWlsTGluaycsXHJcbiAgICAvKiogRW1haWwvcGFzc3dvcmQgc2lnbiBpbiBtZXRob2QgKi9cclxuICAgIEVNQUlMX1BBU1NXT1JEOiAncGFzc3dvcmQnLFxyXG4gICAgLyoqIEZhY2Vib29rIHNpZ24gaW4gbWV0aG9kICovXHJcbiAgICBGQUNFQk9PSzogJ2ZhY2Vib29rLmNvbScsXHJcbiAgICAvKiogR2l0SHViIHNpZ24gaW4gbWV0aG9kICovXHJcbiAgICBHSVRIVUI6ICdnaXRodWIuY29tJyxcclxuICAgIC8qKiBHb29nbGUgc2lnbiBpbiBtZXRob2QgKi9cclxuICAgIEdPT0dMRTogJ2dvb2dsZS5jb20nLFxyXG4gICAgLyoqIFBob25lIHNpZ24gaW4gbWV0aG9kICovXHJcbiAgICBQSE9ORTogJ3Bob25lJyxcclxuICAgIC8qKiBUd2l0dGVyIHNpZ24gaW4gbWV0aG9kICovXHJcbiAgICBUV0lUVEVSOiAndHdpdHRlci5jb20nXHJcbn07XHJcbi8qKlxyXG4gKiBFbnVtZXJhdGlvbiBvZiBzdXBwb3J0ZWQgb3BlcmF0aW9uIHR5cGVzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBPcGVyYXRpb25UeXBlID0ge1xyXG4gICAgLyoqIE9wZXJhdGlvbiBpbnZvbHZpbmcgbGlua2luZyBhbiBhZGRpdGlvbmFsIHByb3ZpZGVyIHRvIGFuIGFscmVhZHkgc2lnbmVkLWluIHVzZXIuICovXHJcbiAgICBMSU5LOiAnbGluaycsXHJcbiAgICAvKiogT3BlcmF0aW9uIGludm9sdmluZyB1c2luZyBhIHByb3ZpZGVyIHRvIHJlYXV0aGVudGljYXRlIGFuIGFscmVhZHkgc2lnbmVkLWluIHVzZXIuICovXHJcbiAgICBSRUFVVEhFTlRJQ0FURTogJ3JlYXV0aGVudGljYXRlJyxcclxuICAgIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIHNpZ25pbmcgaW4gYSB1c2VyLiAqL1xyXG4gICAgU0lHTl9JTjogJ3NpZ25JbidcclxufTtcclxuLyoqXHJcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHRoZSBwb3NzaWJsZSBlbWFpbCBhY3Rpb24gdHlwZXMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IEFjdGlvbkNvZGVPcGVyYXRpb24gPSB7XHJcbiAgICAvKiogVGhlIGVtYWlsIGxpbmsgc2lnbi1pbiBhY3Rpb24uICovXHJcbiAgICBFTUFJTF9TSUdOSU46ICdFTUFJTF9TSUdOSU4nLFxyXG4gICAgLyoqIFRoZSBwYXNzd29yZCByZXNldCBhY3Rpb24uICovXHJcbiAgICBQQVNTV09SRF9SRVNFVDogJ1BBU1NXT1JEX1JFU0VUJyxcclxuICAgIC8qKiBUaGUgZW1haWwgcmV2b2NhdGlvbiBhY3Rpb24uICovXHJcbiAgICBSRUNPVkVSX0VNQUlMOiAnUkVDT1ZFUl9FTUFJTCcsXHJcbiAgICAvKiogVGhlIHJldmVydCBzZWNvbmQgZmFjdG9yIGFkZGl0aW9uIGVtYWlsIGFjdGlvbi4gKi9cclxuICAgIFJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OOiAnUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT04nLFxyXG4gICAgLyoqIFRoZSByZXZlcnQgc2Vjb25kIGZhY3RvciBhZGRpdGlvbiBlbWFpbCBhY3Rpb24uICovXHJcbiAgICBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTDogJ1ZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMJyxcclxuICAgIC8qKiBUaGUgZW1haWwgdmVyaWZpY2F0aW9uIGFjdGlvbi4gKi9cclxuICAgIFZFUklGWV9FTUFJTDogJ1ZFUklGWV9FTUFJTCdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gX2RlYnVnRXJyb3JNYXAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFtcImFkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uXCIgLyogQURNSU5fT05MWV9PUEVSQVRJT04gKi9dOiAnVGhpcyBvcGVyYXRpb24gaXMgcmVzdHJpY3RlZCB0byBhZG1pbmlzdHJhdG9ycyBvbmx5LicsXHJcbiAgICAgICAgW1wiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqL106ICcnLFxyXG4gICAgICAgIFtcImFwcC1ub3QtYXV0aG9yaXplZFwiIC8qIEFQUF9OT1RfQVVUSE9SSVpFRCAqL106IFwiVGhpcyBhcHAsIGlkZW50aWZpZWQgYnkgdGhlIGRvbWFpbiB3aGVyZSBpdCdzIGhvc3RlZCwgaXMgbm90IFwiICtcclxuICAgICAgICAgICAgJ2F1dGhvcml6ZWQgdG8gdXNlIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uIHdpdGggdGhlIHByb3ZpZGVkIEFQSSBrZXkuICcgK1xyXG4gICAgICAgICAgICAnUmV2aWV3IHlvdXIga2V5IGNvbmZpZ3VyYXRpb24gaW4gdGhlIEdvb2dsZSBBUEkgY29uc29sZS4nLFxyXG4gICAgICAgIFtcImFwcC1ub3QtaW5zdGFsbGVkXCIgLyogQVBQX05PVF9JTlNUQUxMRUQgKi9dOiAnVGhlIHJlcXVlc3RlZCBtb2JpbGUgYXBwbGljYXRpb24gY29ycmVzcG9uZGluZyB0byB0aGUgaWRlbnRpZmllciAoJyArXHJcbiAgICAgICAgICAgICdBbmRyb2lkIHBhY2thZ2UgbmFtZSBvciBpT1MgYnVuZGxlIElEKSBwcm92aWRlZCBpcyBub3QgaW5zdGFsbGVkIG9uICcgK1xyXG4gICAgICAgICAgICAndGhpcyBkZXZpY2UuJyxcclxuICAgICAgICBbXCJjYXB0Y2hhLWNoZWNrLWZhaWxlZFwiIC8qIENBUFRDSEFfQ0hFQ0tfRkFJTEVEICovXTogJ1RoZSByZUNBUFRDSEEgcmVzcG9uc2UgdG9rZW4gcHJvdmlkZWQgaXMgZWl0aGVyIGludmFsaWQsIGV4cGlyZWQsICcgK1xyXG4gICAgICAgICAgICAnYWxyZWFkeSB1c2VkIG9yIHRoZSBkb21haW4gYXNzb2NpYXRlZCB3aXRoIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBsaXN0ICcgK1xyXG4gICAgICAgICAgICAnb2Ygd2hpdGVsaXN0ZWQgZG9tYWlucy4nLFxyXG4gICAgICAgIFtcImNvZGUtZXhwaXJlZFwiIC8qIENPREVfRVhQSVJFRCAqL106ICdUaGUgU01TIGNvZGUgaGFzIGV4cGlyZWQuIFBsZWFzZSByZS1zZW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZSB0byB0cnkgJyArXHJcbiAgICAgICAgICAgICdhZ2Fpbi4nLFxyXG4gICAgICAgIFtcImNvcmRvdmEtbm90LXJlYWR5XCIgLyogQ09SRE9WQV9OT1RfUkVBRFkgKi9dOiAnQ29yZG92YSBmcmFtZXdvcmsgaXMgbm90IHJlYWR5LicsXHJcbiAgICAgICAgW1wiY29ycy11bnN1cHBvcnRlZFwiIC8qIENPUlNfVU5TVVBQT1JURUQgKi9dOiAnVGhpcyBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuJyxcclxuICAgICAgICBbXCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIgLyogQ1JFREVOVElBTF9BTFJFQURZX0lOX1VTRSAqL106ICdUaGlzIGNyZWRlbnRpYWwgaXMgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYSBkaWZmZXJlbnQgdXNlciBhY2NvdW50LicsXHJcbiAgICAgICAgW1wiY3VzdG9tLXRva2VuLW1pc21hdGNoXCIgLyogQ1JFREVOVElBTF9NSVNNQVRDSCAqL106ICdUaGUgY3VzdG9tIHRva2VuIGNvcnJlc3BvbmRzIHRvIGEgZGlmZmVyZW50IGF1ZGllbmNlLicsXHJcbiAgICAgICAgW1wicmVxdWlyZXMtcmVjZW50LWxvZ2luXCIgLyogQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOICovXTogJ1RoaXMgb3BlcmF0aW9uIGlzIHNlbnNpdGl2ZSBhbmQgcmVxdWlyZXMgcmVjZW50IGF1dGhlbnRpY2F0aW9uLiBMb2cgaW4gJyArXHJcbiAgICAgICAgICAgICdhZ2FpbiBiZWZvcmUgcmV0cnlpbmcgdGhpcyByZXF1ZXN0LicsXHJcbiAgICAgICAgW1wiZGVwZW5kZW50LXNkay1pbml0aWFsaXplZC1iZWZvcmUtYXV0aFwiIC8qIERFUEVOREVOVF9TREtfSU5JVF9CRUZPUkVfQVVUSCAqL106ICdBbm90aGVyIEZpcmViYXNlIFNESyB3YXMgaW5pdGlhbGl6ZWQgYW5kIGlzIHRyeWluZyB0byB1c2UgQXV0aCBiZWZvcmUgQXV0aCBpcyAnICtcclxuICAgICAgICAgICAgJ2luaXRpYWxpemVkLiBQbGVhc2UgYmUgc3VyZSB0byBjYWxsIGBpbml0aWFsaXplQXV0aGAgb3IgYGdldEF1dGhgIGJlZm9yZSAnICtcclxuICAgICAgICAgICAgJ3N0YXJ0aW5nIGFueSBvdGhlciBGaXJlYmFzZSBTREsuJyxcclxuICAgICAgICBbXCJkeW5hbWljLWxpbmstbm90LWFjdGl2YXRlZFwiIC8qIERZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEICovXTogJ1BsZWFzZSBhY3RpdmF0ZSBEeW5hbWljIExpbmtzIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlIGFuZCBhZ3JlZSB0byB0aGUgdGVybXMgYW5kICcgK1xyXG4gICAgICAgICAgICAnY29uZGl0aW9ucy4nLFxyXG4gICAgICAgIFtcImVtYWlsLWNoYW5nZS1uZWVkcy12ZXJpZmljYXRpb25cIiAvKiBFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OICovXTogJ011bHRpLWZhY3RvciB1c2VycyBtdXN0IGFsd2F5cyBoYXZlIGEgdmVyaWZpZWQgZW1haWwuJyxcclxuICAgICAgICBbXCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiIC8qIEVNQUlMX0VYSVNUUyAqL106ICdUaGUgZW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IGluIHVzZSBieSBhbm90aGVyIGFjY291bnQuJyxcclxuICAgICAgICBbXCJlbXVsYXRvci1jb25maWctZmFpbGVkXCIgLyogRU1VTEFUT1JfQ09ORklHX0ZBSUxFRCAqL106ICdBdXRoIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCB0byBtYWtlIGEgbmV0d29yayBjYWxsLiBBdXRoIGNhbiAnICtcclxuICAgICAgICAgICAgJ25vIGxvbmdlciBiZSBjb25maWd1cmVkIHRvIHVzZSB0aGUgZW11bGF0b3IuIFRyeSBjYWxsaW5nICcgK1xyXG4gICAgICAgICAgICAnXCJjb25uZWN0QXV0aEVtdWxhdG9yKClcIiBzb29uZXIuJyxcclxuICAgICAgICBbXCJleHBpcmVkLWFjdGlvbi1jb2RlXCIgLyogRVhQSVJFRF9PT0JfQ09ERSAqL106ICdUaGUgYWN0aW9uIGNvZGUgaGFzIGV4cGlyZWQuJyxcclxuICAgICAgICBbXCJjYW5jZWxsZWQtcG9wdXAtcmVxdWVzdFwiIC8qIEVYUElSRURfUE9QVVBfUkVRVUVTVCAqL106ICdUaGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgZHVlIHRvIGFub3RoZXIgY29uZmxpY3RpbmcgcG9wdXAgYmVpbmcgb3BlbmVkLicsXHJcbiAgICAgICAgW1wiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqL106ICdBbiBpbnRlcm5hbCBBdXRoRXJyb3IgaGFzIG9jY3VycmVkLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1hcHAtY3JlZGVudGlhbFwiIC8qIElOVkFMSURfQVBQX0NSRURFTlRJQUwgKi9dOiAnVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGNvbnRhaW5zIGFuIGludmFsaWQgYXBwbGljYXRpb24gdmVyaWZpZXIuJyArXHJcbiAgICAgICAgICAgICcgVGhlIHJlQ0FQVENIQSB0b2tlbiByZXNwb25zZSBpcyBlaXRoZXIgaW52YWxpZCBvciBleHBpcmVkLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1hcHAtaWRcIiAvKiBJTlZBTElEX0FQUF9JRCAqL106ICdUaGUgbW9iaWxlIGFwcCBpZGVudGlmaWVyIGlzIG5vdCByZWdpc3RlZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtdXNlci10b2tlblwiIC8qIElOVkFMSURfQVVUSCAqL106IFwiVGhpcyB1c2VyJ3MgY3JlZGVudGlhbCBpc24ndCB2YWxpZCBmb3IgdGhpcyBwcm9qZWN0LiBUaGlzIGNhbiBoYXBwZW4gXCIgK1xyXG4gICAgICAgICAgICBcImlmIHRoZSB1c2VyJ3MgdG9rZW4gaGFzIGJlZW4gdGFtcGVyZWQgd2l0aCwgb3IgaWYgdGhlIHVzZXIgaXNuJ3QgZm9yIFwiICtcclxuICAgICAgICAgICAgJ3RoZSBwcm9qZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIEFQSSBrZXkuJyxcclxuICAgICAgICBbXCJpbnZhbGlkLWF1dGgtZXZlbnRcIiAvKiBJTlZBTElEX0FVVEhfRVZFTlQgKi9dOiAnQW4gaW50ZXJuYWwgQXV0aEVycm9yIGhhcyBvY2N1cnJlZC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGVcIiAvKiBJTlZBTElEX0NPREUgKi9dOiAnVGhlIFNNUyB2ZXJpZmljYXRpb24gY29kZSB1c2VkIHRvIGNyZWF0ZSB0aGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIGlzICcgK1xyXG4gICAgICAgICAgICAnaW52YWxpZC4gUGxlYXNlIHJlc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgc21zIGFuZCBiZSBzdXJlIHRvIHVzZSB0aGUgJyArXHJcbiAgICAgICAgICAgICd2ZXJpZmljYXRpb24gY29kZSBwcm92aWRlZCBieSB0aGUgdXNlci4nLFxyXG4gICAgICAgIFtcImludmFsaWQtY29udGludWUtdXJpXCIgLyogSU5WQUxJRF9DT05USU5VRV9VUkkgKi9dOiAnVGhlIGNvbnRpbnVlIFVSTCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIiAvKiBJTlZBTElEX0NPUkRPVkFfQ09ORklHVVJBVElPTiAqL106ICdUaGUgZm9sbG93aW5nIENvcmRvdmEgcGx1Z2lucyBtdXN0IGJlIGluc3RhbGxlZCB0byBlbmFibGUgT0F1dGggc2lnbi1pbjogJyArXHJcbiAgICAgICAgICAgICdjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8sIGNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbiwgJyArXHJcbiAgICAgICAgICAgICdjb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiLCBjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIgYW5kICcgK1xyXG4gICAgICAgICAgICAnY29yZG92YS1wbHVnaW4tY3VzdG9tdXJsc2NoZW1lLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1jdXN0b20tdG9rZW5cIiAvKiBJTlZBTElEX0NVU1RPTV9UT0tFTiAqL106ICdUaGUgY3VzdG9tIHRva2VuIGZvcm1hdCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBjaGVjayB0aGUgZG9jdW1lbnRhdGlvbi4nLFxyXG4gICAgICAgIFtcImludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpblwiIC8qIElOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTiAqL106ICdUaGUgcHJvdmlkZWQgZHluYW1pYyBsaW5rIGRvbWFpbiBpcyBub3QgY29uZmlndXJlZCBvciBhdXRob3JpemVkIGZvciB0aGUgY3VycmVudCBwcm9qZWN0LicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1lbWFpbFwiIC8qIElOVkFMSURfRU1BSUwgKi9dOiAnVGhlIGVtYWlsIGFkZHJlc3MgaXMgYmFkbHkgZm9ybWF0dGVkLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1lbXVsYXRvci1zY2hlbWVcIiAvKiBJTlZBTElEX0VNVUxBVE9SX1NDSEVNRSAqL106ICdFbXVsYXRvciBVUkwgbXVzdCBzdGFydCB3aXRoIGEgdmFsaWQgc2NoZW1lIChodHRwOi8vIG9yIGh0dHBzOi8vKS4nLFxyXG4gICAgICAgIFtcImludmFsaWQtYXBpLWtleVwiIC8qIElOVkFMSURfQVBJX0tFWSAqL106ICdZb3VyIEFQSSBrZXkgaXMgaW52YWxpZCwgcGxlYXNlIGNoZWNrIHlvdSBoYXZlIGNvcGllZCBpdCBjb3JyZWN0bHkuJyxcclxuICAgICAgICBbXCJpbnZhbGlkLWNlcnQtaGFzaFwiIC8qIElOVkFMSURfQ0VSVF9IQVNIICovXTogJ1RoZSBTSEEtMSBjZXJ0aWZpY2F0ZSBoYXNoIHByb3ZpZGVkIGlzIGludmFsaWQuJyxcclxuICAgICAgICBbXCJpbnZhbGlkLWNyZWRlbnRpYWxcIiAvKiBJTlZBTElEX0lEUF9SRVNQT05TRSAqL106ICdUaGUgc3VwcGxpZWQgYXV0aCBjcmVkZW50aWFsIGlzIG1hbGZvcm1lZCBvciBoYXMgZXhwaXJlZC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtbWVzc2FnZS1wYXlsb2FkXCIgLyogSU5WQUxJRF9NRVNTQUdFX1BBWUxPQUQgKi9dOiAnVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIGluIGl0cyBtZXNzYWdlLiAnICtcclxuICAgICAgICAgICAgJ1BsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuJyxcclxuICAgICAgICBbXCJpbnZhbGlkLW11bHRpLWZhY3Rvci1zZXNzaW9uXCIgLyogSU5WQUxJRF9NRkFfU0VTU0lPTiAqL106ICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgcHJvb2Ygb2YgZmlyc3QgZmFjdG9yIHN1Y2Nlc3NmdWwgc2lnbi1pbi4nLFxyXG4gICAgICAgIFtcImludmFsaWQtb2F1dGgtcHJvdmlkZXJcIiAvKiBJTlZBTElEX09BVVRIX1BST1ZJREVSICovXTogJ0VtYWlsQXV0aFByb3ZpZGVyIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgb3BlcmF0aW9uLiBUaGlzIG9wZXJhdGlvbiAnICtcclxuICAgICAgICAgICAgJ29ubHkgc3VwcG9ydHMgT0F1dGggcHJvdmlkZXJzLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1vYXV0aC1jbGllbnQtaWRcIiAvKiBJTlZBTElEX09BVVRIX0NMSUVOVF9JRCAqL106ICdUaGUgT0F1dGggY2xpZW50IElEIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkIG9yIGRvZXMgbm90IG1hdGNoIHRoZSAnICtcclxuICAgICAgICAgICAgJ3NwZWNpZmllZCBBUEkga2V5LicsXHJcbiAgICAgICAgW1widW5hdXRob3JpemVkLWRvbWFpblwiIC8qIElOVkFMSURfT1JJR0lOICovXTogJ1RoaXMgZG9tYWluIGlzIG5vdCBhdXRob3JpemVkIGZvciBPQXV0aCBvcGVyYXRpb25zIGZvciB5b3VyIEZpcmViYXNlICcgK1xyXG4gICAgICAgICAgICAncHJvamVjdC4gRWRpdCB0aGUgbGlzdCBvZiBhdXRob3JpemVkIGRvbWFpbnMgZnJvbSB0aGUgRmlyZWJhc2UgY29uc29sZS4nLFxyXG4gICAgICAgIFtcImludmFsaWQtYWN0aW9uLWNvZGVcIiAvKiBJTlZBTElEX09PQl9DT0RFICovXTogJ1RoZSBhY3Rpb24gY29kZSBpcyBpbnZhbGlkLiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIGNvZGUgaXMgbWFsZm9ybWVkLCAnICtcclxuICAgICAgICAgICAgJ2V4cGlyZWQsIG9yIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC4nLFxyXG4gICAgICAgIFtcIndyb25nLXBhc3N3b3JkXCIgLyogSU5WQUxJRF9QQVNTV09SRCAqL106ICdUaGUgcGFzc3dvcmQgaXMgaW52YWxpZCBvciB0aGUgdXNlciBkb2VzIG5vdCBoYXZlIGEgcGFzc3dvcmQuJyxcclxuICAgICAgICBbXCJpbnZhbGlkLXBlcnNpc3RlbmNlLXR5cGVcIiAvKiBJTlZBTElEX1BFUlNJU1RFTkNFICovXTogJ1RoZSBzcGVjaWZpZWQgcGVyc2lzdGVuY2UgdHlwZSBpcyBpbnZhbGlkLiBJdCBjYW4gb25seSBiZSBsb2NhbCwgc2Vzc2lvbiBvciBub25lLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC1waG9uZS1udW1iZXJcIiAvKiBJTlZBTElEX1BIT05FX05VTUJFUiAqL106ICdUaGUgZm9ybWF0IG9mIHRoZSBwaG9uZSBudW1iZXIgcHJvdmlkZWQgaXMgaW5jb3JyZWN0LiBQbGVhc2UgZW50ZXIgdGhlICcgK1xyXG4gICAgICAgICAgICAncGhvbmUgbnVtYmVyIGluIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHBhcnNlZCBpbnRvIEUuMTY0IGZvcm1hdC4gRS4xNjQgJyArXHJcbiAgICAgICAgICAgICdwaG9uZSBudW1iZXJzIGFyZSB3cml0dGVuIGluIHRoZSBmb3JtYXQgWytdW2NvdW50cnkgY29kZV1bc3Vic2NyaWJlciAnICtcclxuICAgICAgICAgICAgJ251bWJlciBpbmNsdWRpbmcgYXJlYSBjb2RlXS4nLFxyXG4gICAgICAgIFtcImludmFsaWQtcHJvdmlkZXItaWRcIiAvKiBJTlZBTElEX1BST1ZJREVSX0lEICovXTogJ1RoZSBzcGVjaWZpZWQgcHJvdmlkZXIgSUQgaXMgaW52YWxpZC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtcmVjaXBpZW50LWVtYWlsXCIgLyogSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwgKi9dOiAnVGhlIGVtYWlsIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gZmFpbGVkIHRvIHNlbmQgYXMgdGhlIHByb3ZpZGVkICcgK1xyXG4gICAgICAgICAgICAncmVjaXBpZW50IGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtc2VuZGVyXCIgLyogSU5WQUxJRF9TRU5ERVIgKi9dOiAnVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgYW4gaW52YWxpZCBzZW5kZXIgZW1haWwgb3IgbmFtZS4gJyArXHJcbiAgICAgICAgICAgICdQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLicsXHJcbiAgICAgICAgW1wiaW52YWxpZC12ZXJpZmljYXRpb24taWRcIiAvKiBJTlZBTElEX1NFU1NJT05fSU5GTyAqL106ICdUaGUgdmVyaWZpY2F0aW9uIElEIHVzZWQgdG8gY3JlYXRlIHRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgaXMgaW52YWxpZC4nLFxyXG4gICAgICAgIFtcImludmFsaWQtdGVuYW50LWlkXCIgLyogSU5WQUxJRF9URU5BTlRfSUQgKi9dOiBcIlRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEIGlzIGludmFsaWQuXCIsXHJcbiAgICAgICAgW1wibG9naW4tYmxvY2tlZFwiIC8qIExPR0lOX0JMT0NLRUQgKi9dOiAnTG9naW4gYmxvY2tlZCBieSB1c2VyLXByb3ZpZGVkIG1ldGhvZDogeyRvcmlnaW5hbE1lc3NhZ2V9JyxcclxuICAgICAgICBbXCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIiAvKiBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FICovXTogJ0FuIEFuZHJvaWQgUGFja2FnZSBOYW1lIG11c3QgYmUgcHJvdmlkZWQgaWYgdGhlIEFuZHJvaWQgQXBwIGlzIHJlcXVpcmVkIHRvIGJlIGluc3RhbGxlZC4nLFxyXG4gICAgICAgIFtcImF1dGgtZG9tYWluLWNvbmZpZy1yZXF1aXJlZFwiIC8qIE1JU1NJTkdfQVVUSF9ET01BSU4gKi9dOiAnQmUgc3VyZSB0byBpbmNsdWRlIGF1dGhEb21haW4gd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKSwgJyArXHJcbiAgICAgICAgICAgICdieSBmb2xsb3dpbmcgdGhlIGluc3RydWN0aW9ucyBpbiB0aGUgRmlyZWJhc2UgY29uc29sZS4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctYXBwLWNyZWRlbnRpYWxcIiAvKiBNSVNTSU5HX0FQUF9DUkVERU5USUFMICovXTogJ1RoZSBwaG9uZSB2ZXJpZmljYXRpb24gcmVxdWVzdCBpcyBtaXNzaW5nIGFuIGFwcGxpY2F0aW9uIHZlcmlmaWVyICcgK1xyXG4gICAgICAgICAgICAnYXNzZXJ0aW9uLiBBIHJlQ0FQVENIQSByZXNwb25zZSB0b2tlbiBuZWVkcyB0byBiZSBwcm92aWRlZC4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIiAvKiBNSVNTSU5HX0NPREUgKi9dOiAnVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IFNNUyB2ZXJpZmljYXRpb24gY29kZS4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctY29udGludWUtdXJpXCIgLyogTUlTU0lOR19DT05USU5VRV9VUkkgKi9dOiAnQSBjb250aW51ZSBVUkwgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdC4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctaWZyYW1lLXN0YXJ0XCIgLyogTUlTU0lOR19JRlJBTUVfU1RBUlQgKi9dOiAnQW4gaW50ZXJuYWwgQXV0aEVycm9yIGhhcyBvY2N1cnJlZC4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctaW9zLWJ1bmRsZS1pZFwiIC8qIE1JU1NJTkdfSU9TX0JVTkRMRV9JRCAqL106ICdBbiBpT1MgQnVuZGxlIElEIG11c3QgYmUgcHJvdmlkZWQgaWYgYW4gQXBwIFN0b3JlIElEIGlzIHByb3ZpZGVkLicsXHJcbiAgICAgICAgW1wibWlzc2luZy1vci1pbnZhbGlkLW5vbmNlXCIgLyogTUlTU0lOR19PUl9JTlZBTElEX05PTkNFICovXTogJ1RoZSByZXF1ZXN0IGRvZXMgbm90IGNvbnRhaW4gYSB2YWxpZCBub25jZS4gVGhpcyBjYW4gb2NjdXIgaWYgdGhlICcgK1xyXG4gICAgICAgICAgICAnU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZCByYXcgbm9uY2UgZG9lcyBub3QgbWF0Y2ggdGhlIGhhc2hlZCBub25jZSAnICtcclxuICAgICAgICAgICAgJ2luIHRoZSBJRCB0b2tlbiBwYXlsb2FkLicsXHJcbiAgICAgICAgW1wibWlzc2luZy1tdWx0aS1mYWN0b3ItaW5mb1wiIC8qIE1JU1NJTkdfTUZBX0lORk8gKi9dOiAnTm8gc2Vjb25kIGZhY3RvciBpZGVudGlmaWVyIGlzIHByb3ZpZGVkLicsXHJcbiAgICAgICAgW1wibWlzc2luZy1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiIC8qIE1JU1NJTkdfTUZBX1NFU1NJT04gKi9dOiAnVGhlIHJlcXVlc3QgaXMgbWlzc2luZyBwcm9vZiBvZiBmaXJzdCBmYWN0b3Igc3VjY2Vzc2Z1bCBzaWduLWluLicsXHJcbiAgICAgICAgW1wibWlzc2luZy1waG9uZS1udW1iZXJcIiAvKiBNSVNTSU5HX1BIT05FX05VTUJFUiAqL106ICdUbyBzZW5kIHZlcmlmaWNhdGlvbiBjb2RlcywgcHJvdmlkZSBhIHBob25lIG51bWJlciBmb3IgdGhlIHJlY2lwaWVudC4nLFxyXG4gICAgICAgIFtcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIgLyogTUlTU0lOR19TRVNTSU9OX0lORk8gKi9dOiAnVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IHZlcmlmaWNhdGlvbiBJRC4nLFxyXG4gICAgICAgIFtcImFwcC1kZWxldGVkXCIgLyogTU9EVUxFX0RFU1RST1lFRCAqL106ICdUaGlzIGluc3RhbmNlIG9mIEZpcmViYXNlQXBwIGhhcyBiZWVuIGRlbGV0ZWQuJyxcclxuICAgICAgICBbXCJtdWx0aS1mYWN0b3ItaW5mby1ub3QtZm91bmRcIiAvKiBNRkFfSU5GT19OT1RfRk9VTkQgKi9dOiAnVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHNlY29uZCBmYWN0b3IgbWF0Y2hpbmcgdGhlIGlkZW50aWZpZXIgcHJvdmlkZWQuJyxcclxuICAgICAgICBbXCJtdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiIC8qIE1GQV9SRVFVSVJFRCAqL106ICdQcm9vZiBvZiBvd25lcnNoaXAgb2YgYSBzZWNvbmQgZmFjdG9yIGlzIHJlcXVpcmVkIHRvIGNvbXBsZXRlIHNpZ24taW4uJyxcclxuICAgICAgICBbXCJhY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsXCIgLyogTkVFRF9DT05GSVJNQVRJT04gKi9dOiAnQW4gYWNjb3VudCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzYW1lIGVtYWlsIGFkZHJlc3MgYnV0IGRpZmZlcmVudCAnICtcclxuICAgICAgICAgICAgJ3NpZ24taW4gY3JlZGVudGlhbHMuIFNpZ24gaW4gdXNpbmcgYSBwcm92aWRlciBhc3NvY2lhdGVkIHdpdGggdGhpcyAnICtcclxuICAgICAgICAgICAgJ2VtYWlsIGFkZHJlc3MuJyxcclxuICAgICAgICBbXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIgLyogTkVUV09SS19SRVFVRVNUX0ZBSUxFRCAqL106ICdBIG5ldHdvcmsgQXV0aEVycm9yIChzdWNoIGFzIHRpbWVvdXQsIGludGVycnVwdGVkIGNvbm5lY3Rpb24gb3IgdW5yZWFjaGFibGUgaG9zdCkgaGFzIG9jY3VycmVkLicsXHJcbiAgICAgICAgW1wibm8tYXV0aC1ldmVudFwiIC8qIE5PX0FVVEhfRVZFTlQgKi9dOiAnQW4gaW50ZXJuYWwgQXV0aEVycm9yIGhhcyBvY2N1cnJlZC4nLFxyXG4gICAgICAgIFtcIm5vLXN1Y2gtcHJvdmlkZXJcIiAvKiBOT19TVUNIX1BST1ZJREVSICovXTogJ1VzZXIgd2FzIG5vdCBsaW5rZWQgdG8gYW4gYWNjb3VudCB3aXRoIHRoZSBnaXZlbiBwcm92aWRlci4nLFxyXG4gICAgICAgIFtcIm51bGwtdXNlclwiIC8qIE5VTExfVVNFUiAqL106ICdBIG51bGwgdXNlciBvYmplY3Qgd2FzIHByb3ZpZGVkIGFzIHRoZSBhcmd1bWVudCBmb3IgYW4gb3BlcmF0aW9uIHdoaWNoICcgK1xyXG4gICAgICAgICAgICAncmVxdWlyZXMgYSBub24tbnVsbCB1c2VyIG9iamVjdC4nLFxyXG4gICAgICAgIFtcIm9wZXJhdGlvbi1ub3QtYWxsb3dlZFwiIC8qIE9QRVJBVElPTl9OT1RfQUxMT1dFRCAqL106ICdUaGUgZ2l2ZW4gc2lnbi1pbiBwcm92aWRlciBpcyBkaXNhYmxlZCBmb3IgdGhpcyBGaXJlYmFzZSBwcm9qZWN0LiAnICtcclxuICAgICAgICAgICAgJ0VuYWJsZSBpdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSwgdW5kZXIgdGhlIHNpZ24taW4gbWV0aG9kIHRhYiBvZiB0aGUgJyArXHJcbiAgICAgICAgICAgICdBdXRoIHNlY3Rpb24uJyxcclxuICAgICAgICBbXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIgLyogT1BFUkFUSU9OX05PVF9TVVBQT1JURUQgKi9dOiAnVGhpcyBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgZW52aXJvbm1lbnQgdGhpcyBhcHBsaWNhdGlvbiBpcyAnICtcclxuICAgICAgICAgICAgJ3J1bm5pbmcgb24uIFwibG9jYXRpb24ucHJvdG9jb2xcIiBtdXN0IGJlIGh0dHAsIGh0dHBzIG9yIGNocm9tZS1leHRlbnNpb24nICtcclxuICAgICAgICAgICAgJyBhbmQgd2ViIHN0b3JhZ2UgbXVzdCBiZSBlbmFibGVkLicsXHJcbiAgICAgICAgW1wicG9wdXAtYmxvY2tlZFwiIC8qIFBPUFVQX0JMT0NLRUQgKi9dOiAnVW5hYmxlIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgcG9wdXAuIEl0IG1heSBoYXZlIGJlZW4gYmxvY2tlZCBieSB0aGUgYnJvd3Nlci4nLFxyXG4gICAgICAgIFtcInBvcHVwLWNsb3NlZC1ieS11c2VyXCIgLyogUE9QVVBfQ0xPU0VEX0JZX1VTRVIgKi9dOiAnVGhlIHBvcHVwIGhhcyBiZWVuIGNsb3NlZCBieSB0aGUgdXNlciBiZWZvcmUgZmluYWxpemluZyB0aGUgb3BlcmF0aW9uLicsXHJcbiAgICAgICAgW1wicHJvdmlkZXItYWxyZWFkeS1saW5rZWRcIiAvKiBQUk9WSURFUl9BTFJFQURZX0xJTktFRCAqL106ICdVc2VyIGNhbiBvbmx5IGJlIGxpbmtlZCB0byBvbmUgaWRlbnRpdHkgZm9yIHRoZSBnaXZlbiBwcm92aWRlci4nLFxyXG4gICAgICAgIFtcInF1b3RhLWV4Y2VlZGVkXCIgLyogUVVPVEFfRVhDRUVERUQgKi9dOiBcIlRoZSBwcm9qZWN0J3MgcXVvdGEgZm9yIHRoaXMgb3BlcmF0aW9uIGhhcyBiZWVuIGV4Y2VlZGVkLlwiLFxyXG4gICAgICAgIFtcInJlZGlyZWN0LWNhbmNlbGxlZC1ieS11c2VyXCIgLyogUkVESVJFQ1RfQ0FOQ0VMTEVEX0JZX1VTRVIgKi9dOiAnVGhlIHJlZGlyZWN0IG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcuJyxcclxuICAgICAgICBbXCJyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZ1wiIC8qIFJFRElSRUNUX09QRVJBVElPTl9QRU5ESU5HICovXTogJ0EgcmVkaXJlY3Qgc2lnbi1pbiBvcGVyYXRpb24gaXMgYWxyZWFkeSBwZW5kaW5nLicsXHJcbiAgICAgICAgW1wicmVqZWN0ZWQtY3JlZGVudGlhbFwiIC8qIFJFSkVDVEVEX0NSRURFTlRJQUwgKi9dOiAnVGhlIHJlcXVlc3QgY29udGFpbnMgbWFsZm9ybWVkIG9yIG1pc21hdGNoaW5nIGNyZWRlbnRpYWxzLicsXHJcbiAgICAgICAgW1wic2Vjb25kLWZhY3Rvci1hbHJlYWR5LWluLXVzZVwiIC8qIFNFQ09ORF9GQUNUT1JfQUxSRUFEWV9FTlJPTExFRCAqL106ICdUaGUgc2Vjb25kIGZhY3RvciBpcyBhbHJlYWR5IGVucm9sbGVkIG9uIHRoaXMgYWNjb3VudC4nLFxyXG4gICAgICAgIFtcIm1heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZFwiIC8qIFNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQgKi9dOiAnVGhlIG1heGltdW0gYWxsb3dlZCBudW1iZXIgb2Ygc2Vjb25kIGZhY3RvcnMgb24gYSB1c2VyIGhhcyBiZWVuIGV4Y2VlZGVkLicsXHJcbiAgICAgICAgW1widGVuYW50LWlkLW1pc21hdGNoXCIgLyogVEVOQU5UX0lEX01JU01BVENIICovXTogXCJUaGUgcHJvdmlkZWQgdGVuYW50IElEIGRvZXMgbm90IG1hdGNoIHRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEXCIsXHJcbiAgICAgICAgW1widGltZW91dFwiIC8qIFRJTUVPVVQgKi9dOiAnVGhlIG9wZXJhdGlvbiBoYXMgdGltZWQgb3V0LicsXHJcbiAgICAgICAgW1widXNlci10b2tlbi1leHBpcmVkXCIgLyogVE9LRU5fRVhQSVJFRCAqL106IFwiVGhlIHVzZXIncyBjcmVkZW50aWFsIGlzIG5vIGxvbmdlciB2YWxpZC4gVGhlIHVzZXIgbXVzdCBzaWduIGluIGFnYWluLlwiLFxyXG4gICAgICAgIFtcInRvby1tYW55LXJlcXVlc3RzXCIgLyogVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSICovXTogJ1dlIGhhdmUgYmxvY2tlZCBhbGwgcmVxdWVzdHMgZnJvbSB0aGlzIGRldmljZSBkdWUgdG8gdW51c3VhbCBhY3Rpdml0eS4gJyArXHJcbiAgICAgICAgICAgICdUcnkgYWdhaW4gbGF0ZXIuJyxcclxuICAgICAgICBbXCJ1bmF1dGhvcml6ZWQtY29udGludWUtdXJpXCIgLyogVU5BVVRIT1JJWkVEX0RPTUFJTiAqL106ICdUaGUgZG9tYWluIG9mIHRoZSBjb250aW51ZSBVUkwgaXMgbm90IHdoaXRlbGlzdGVkLiAgUGxlYXNlIHdoaXRlbGlzdCAnICtcclxuICAgICAgICAgICAgJ3RoZSBkb21haW4gaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUuJyxcclxuICAgICAgICBbXCJ1bnN1cHBvcnRlZC1maXJzdC1mYWN0b3JcIiAvKiBVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1IgKi9dOiAnRW5yb2xsaW5nIGEgc2Vjb25kIGZhY3RvciBvciBzaWduaW5nIGluIHdpdGggYSBtdWx0aS1mYWN0b3IgYWNjb3VudCByZXF1aXJlcyBzaWduLWluIHdpdGggYSBzdXBwb3J0ZWQgZmlyc3QgZmFjdG9yLicsXHJcbiAgICAgICAgW1widW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZVwiIC8qIFVOU1VQUE9SVEVEX1BFUlNJU1RFTkNFICovXTogJ1RoZSBjdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgdGhlIHNwZWNpZmllZCBwZXJzaXN0ZW5jZSB0eXBlLicsXHJcbiAgICAgICAgW1widW5zdXBwb3J0ZWQtdGVuYW50LW9wZXJhdGlvblwiIC8qIFVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT04gKi9dOiAnVGhpcyBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiBhIG11bHRpLXRlbmFudCBjb250ZXh0LicsXHJcbiAgICAgICAgW1widW52ZXJpZmllZC1lbWFpbFwiIC8qIFVOVkVSSUZJRURfRU1BSUwgKi9dOiAnVGhlIG9wZXJhdGlvbiByZXF1aXJlcyBhIHZlcmlmaWVkIGVtYWlsLicsXHJcbiAgICAgICAgW1widXNlci1jYW5jZWxsZWRcIiAvKiBVU0VSX0NBTkNFTExFRCAqL106ICdUaGUgdXNlciBkaWQgbm90IGdyYW50IHlvdXIgYXBwbGljYXRpb24gdGhlIHBlcm1pc3Npb25zIGl0IHJlcXVlc3RlZC4nLFxyXG4gICAgICAgIFtcInVzZXItbm90LWZvdW5kXCIgLyogVVNFUl9ERUxFVEVEICovXTogJ1RoZXJlIGlzIG5vIHVzZXIgcmVjb3JkIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBpZGVudGlmaWVyLiBUaGUgdXNlciBtYXkgJyArXHJcbiAgICAgICAgICAgICdoYXZlIGJlZW4gZGVsZXRlZC4nLFxyXG4gICAgICAgIFtcInVzZXItZGlzYWJsZWRcIiAvKiBVU0VSX0RJU0FCTEVEICovXTogJ1RoZSB1c2VyIGFjY291bnQgaGFzIGJlZW4gZGlzYWJsZWQgYnkgYW4gYWRtaW5pc3RyYXRvci4nLFxyXG4gICAgICAgIFtcInVzZXItbWlzbWF0Y2hcIiAvKiBVU0VSX01JU01BVENIICovXTogJ1RoZSBzdXBwbGllZCBjcmVkZW50aWFscyBkbyBub3QgY29ycmVzcG9uZCB0byB0aGUgcHJldmlvdXNseSBzaWduZWQgaW4gdXNlci4nLFxyXG4gICAgICAgIFtcInVzZXItc2lnbmVkLW91dFwiIC8qIFVTRVJfU0lHTkVEX09VVCAqL106ICcnLFxyXG4gICAgICAgIFtcIndlYWstcGFzc3dvcmRcIiAvKiBXRUFLX1BBU1NXT1JEICovXTogJ1RoZSBwYXNzd29yZCBtdXN0IGJlIDYgY2hhcmFjdGVycyBsb25nIG9yIG1vcmUuJyxcclxuICAgICAgICBbXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiIC8qIFdFQl9TVE9SQUdFX1VOU1VQUE9SVEVEICovXTogJ1RoaXMgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkIG9yIDNyZCBwYXJ0eSBjb29raWVzIGFuZCBkYXRhIG1heSBiZSBkaXNhYmxlZC4nLFxyXG4gICAgICAgIFtcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBTFJFQURZX0lOSVRJQUxJWkVEICovXTogJ2luaXRpYWxpemVBdXRoKCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgJ2RpZmZlcmVudCBvcHRpb25zLiBUbyBhdm9pZCB0aGlzIGVycm9yLCBjYWxsIGluaXRpYWxpemVBdXRoKCkgd2l0aCB0aGUgJyArXHJcbiAgICAgICAgICAgICdzYW1lIG9wdGlvbnMgYXMgd2hlbiBpdCB3YXMgb3JpZ2luYWxseSBjYWxsZWQsIG9yIGNhbGwgZ2V0QXV0aCgpIHRvIHJldHVybiB0aGUnICtcclxuICAgICAgICAgICAgJyBhbHJlYWR5IGluaXRpYWxpemVkIGluc3RhbmNlLidcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gX3Byb2RFcnJvck1hcCgpIHtcclxuICAgIC8vIFdlIHdpbGwgaW5jbHVkZSB0aGlzIG9uZSBtZXNzYWdlIGluIHRoZSBwcm9kIGVycm9yIG1hcCBzaW5jZSBieSB0aGUgdmVyeVxyXG4gICAgLy8gbmF0dXJlIG9mIHRoaXMgZXJyb3IsIGRldmVsb3BlcnMgd2lsbCBuZXZlciBiZSBhYmxlIHRvIHNlZSB0aGUgbWVzc2FnZVxyXG4gICAgLy8gdXNpbmcgdGhlIGRlYnVnRXJyb3JNYXAgKHdoaWNoIGlzIGluc3RhbGxlZCBkdXJpbmcgYXV0aCBpbml0aWFsaXphdGlvbikuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFtcImRlcGVuZGVudC1zZGstaW5pdGlhbGl6ZWQtYmVmb3JlLWF1dGhcIiAvKiBERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEggKi9dOiAnQW5vdGhlciBGaXJlYmFzZSBTREsgd2FzIGluaXRpYWxpemVkIGFuZCBpcyB0cnlpbmcgdG8gdXNlIEF1dGggYmVmb3JlIEF1dGggaXMgJyArXHJcbiAgICAgICAgICAgICdpbml0aWFsaXplZC4gUGxlYXNlIGJlIHN1cmUgdG8gY2FsbCBgaW5pdGlhbGl6ZUF1dGhgIG9yIGBnZXRBdXRoYCBiZWZvcmUgJyArXHJcbiAgICAgICAgICAgICdzdGFydGluZyBhbnkgb3RoZXIgRmlyZWJhc2UgU0RLLidcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEEgdmVyYm9zZSBlcnJvciBtYXAgd2l0aCBkZXRhaWxlZCBkZXNjcmlwdGlvbnMgZm9yIG1vc3QgZXJyb3IgY29kZXMuXHJcbiAqXHJcbiAqIFNlZSBkaXNjdXNzaW9uIGF0IHtAbGluayBBdXRoRXJyb3JNYXB9XHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGRlYnVnRXJyb3JNYXAgPSBfZGVidWdFcnJvck1hcDtcclxuLyoqXHJcbiAqIEEgbWluaW1hbCBlcnJvciBtYXAgd2l0aCBhbGwgdmVyYm9zZSBlcnJvciBtZXNzYWdlcyBzdHJpcHBlZC5cclxuICpcclxuICogU2VlIGRpc2N1c3Npb24gYXQge0BsaW5rIEF1dGhFcnJvck1hcH1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgcHJvZEVycm9yTWFwID0gX3Byb2RFcnJvck1hcDtcclxuY29uc3QgX0RFRkFVTFRfQVVUSF9FUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeSgnYXV0aCcsICdGaXJlYmFzZScsIF9wcm9kRXJyb3JNYXAoKSk7XHJcbi8qKlxyXG4gKiBBIG1hcCBvZiBwb3RlbnRpYWwgYEF1dGhgIGVycm9yIGNvZGVzLCBmb3IgZWFzaWVyIGNvbXBhcmlzb24gd2l0aCBlcnJvcnNcclxuICogdGhyb3duIGJ5IHRoZSBTREsuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIE5vdGUgdGhhdCB5b3UgY2FuJ3QgdHJlZS1zaGFrZSBpbmRpdmlkdWFsIGtleXNcclxuICogaW4gdGhlIG1hcCwgc28gYnkgdXNpbmcgdGhlIG1hcCB5b3UgbWlnaHQgc3Vic3RhbnRpYWxseSBpbmNyZWFzZSB5b3VyXHJcbiAqIGJ1bmRsZSBzaXplLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBBVVRIX0VSUk9SX0NPREVTX01BUF9ET19OT1RfVVNFX0lOVEVSTkFMTFkgPSB7XHJcbiAgICBBRE1JTl9PTkxZX09QRVJBVElPTjogJ2F1dGgvYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb24nLFxyXG4gICAgQVJHVU1FTlRfRVJST1I6ICdhdXRoL2FyZ3VtZW50LWVycm9yJyxcclxuICAgIEFQUF9OT1RfQVVUSE9SSVpFRDogJ2F1dGgvYXBwLW5vdC1hdXRob3JpemVkJyxcclxuICAgIEFQUF9OT1RfSU5TVEFMTEVEOiAnYXV0aC9hcHAtbm90LWluc3RhbGxlZCcsXHJcbiAgICBDQVBUQ0hBX0NIRUNLX0ZBSUxFRDogJ2F1dGgvY2FwdGNoYS1jaGVjay1mYWlsZWQnLFxyXG4gICAgQ09ERV9FWFBJUkVEOiAnYXV0aC9jb2RlLWV4cGlyZWQnLFxyXG4gICAgQ09SRE9WQV9OT1RfUkVBRFk6ICdhdXRoL2NvcmRvdmEtbm90LXJlYWR5JyxcclxuICAgIENPUlNfVU5TVVBQT1JURUQ6ICdhdXRoL2NvcnMtdW5zdXBwb3J0ZWQnLFxyXG4gICAgQ1JFREVOVElBTF9BTFJFQURZX0lOX1VTRTogJ2F1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZScsXHJcbiAgICBDUkVERU5USUFMX01JU01BVENIOiAnYXV0aC9jdXN0b20tdG9rZW4tbWlzbWF0Y2gnLFxyXG4gICAgQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOOiAnYXV0aC9yZXF1aXJlcy1yZWNlbnQtbG9naW4nLFxyXG4gICAgREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIOiAnYXV0aC9kZXBlbmRlbnQtc2RrLWluaXRpYWxpemVkLWJlZm9yZS1hdXRoJyxcclxuICAgIERZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEOiAnYXV0aC9keW5hbWljLWxpbmstbm90LWFjdGl2YXRlZCcsXHJcbiAgICBFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OOiAnYXV0aC9lbWFpbC1jaGFuZ2UtbmVlZHMtdmVyaWZpY2F0aW9uJyxcclxuICAgIEVNQUlMX0VYSVNUUzogJ2F1dGgvZW1haWwtYWxyZWFkeS1pbi11c2UnLFxyXG4gICAgRU1VTEFUT1JfQ09ORklHX0ZBSUxFRDogJ2F1dGgvZW11bGF0b3ItY29uZmlnLWZhaWxlZCcsXHJcbiAgICBFWFBJUkVEX09PQl9DT0RFOiAnYXV0aC9leHBpcmVkLWFjdGlvbi1jb2RlJyxcclxuICAgIEVYUElSRURfUE9QVVBfUkVRVUVTVDogJ2F1dGgvY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3QnLFxyXG4gICAgSU5URVJOQUxfRVJST1I6ICdhdXRoL2ludGVybmFsLWVycm9yJyxcclxuICAgIElOVkFMSURfQVBJX0tFWTogJ2F1dGgvaW52YWxpZC1hcGkta2V5JyxcclxuICAgIElOVkFMSURfQVBQX0NSRURFTlRJQUw6ICdhdXRoL2ludmFsaWQtYXBwLWNyZWRlbnRpYWwnLFxyXG4gICAgSU5WQUxJRF9BUFBfSUQ6ICdhdXRoL2ludmFsaWQtYXBwLWlkJyxcclxuICAgIElOVkFMSURfQVVUSDogJ2F1dGgvaW52YWxpZC11c2VyLXRva2VuJyxcclxuICAgIElOVkFMSURfQVVUSF9FVkVOVDogJ2F1dGgvaW52YWxpZC1hdXRoLWV2ZW50JyxcclxuICAgIElOVkFMSURfQ0VSVF9IQVNIOiAnYXV0aC9pbnZhbGlkLWNlcnQtaGFzaCcsXHJcbiAgICBJTlZBTElEX0NPREU6ICdhdXRoL2ludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGUnLFxyXG4gICAgSU5WQUxJRF9DT05USU5VRV9VUkk6ICdhdXRoL2ludmFsaWQtY29udGludWUtdXJpJyxcclxuICAgIElOVkFMSURfQ09SRE9WQV9DT05GSUdVUkFUSU9OOiAnYXV0aC9pbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvbicsXHJcbiAgICBJTlZBTElEX0NVU1RPTV9UT0tFTjogJ2F1dGgvaW52YWxpZC1jdXN0b20tdG9rZW4nLFxyXG4gICAgSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOOiAnYXV0aC9pbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW4nLFxyXG4gICAgSU5WQUxJRF9FTUFJTDogJ2F1dGgvaW52YWxpZC1lbWFpbCcsXHJcbiAgICBJTlZBTElEX0VNVUxBVE9SX1NDSEVNRTogJ2F1dGgvaW52YWxpZC1lbXVsYXRvci1zY2hlbWUnLFxyXG4gICAgSU5WQUxJRF9JRFBfUkVTUE9OU0U6ICdhdXRoL2ludmFsaWQtY3JlZGVudGlhbCcsXHJcbiAgICBJTlZBTElEX01FU1NBR0VfUEFZTE9BRDogJ2F1dGgvaW52YWxpZC1tZXNzYWdlLXBheWxvYWQnLFxyXG4gICAgSU5WQUxJRF9NRkFfU0VTU0lPTjogJ2F1dGgvaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvbicsXHJcbiAgICBJTlZBTElEX09BVVRIX0NMSUVOVF9JRDogJ2F1dGgvaW52YWxpZC1vYXV0aC1jbGllbnQtaWQnLFxyXG4gICAgSU5WQUxJRF9PQVVUSF9QUk9WSURFUjogJ2F1dGgvaW52YWxpZC1vYXV0aC1wcm92aWRlcicsXHJcbiAgICBJTlZBTElEX09PQl9DT0RFOiAnYXV0aC9pbnZhbGlkLWFjdGlvbi1jb2RlJyxcclxuICAgIElOVkFMSURfT1JJR0lOOiAnYXV0aC91bmF1dGhvcml6ZWQtZG9tYWluJyxcclxuICAgIElOVkFMSURfUEFTU1dPUkQ6ICdhdXRoL3dyb25nLXBhc3N3b3JkJyxcclxuICAgIElOVkFMSURfUEVSU0lTVEVOQ0U6ICdhdXRoL2ludmFsaWQtcGVyc2lzdGVuY2UtdHlwZScsXHJcbiAgICBJTlZBTElEX1BIT05FX05VTUJFUjogJ2F1dGgvaW52YWxpZC1waG9uZS1udW1iZXInLFxyXG4gICAgSU5WQUxJRF9QUk9WSURFUl9JRDogJ2F1dGgvaW52YWxpZC1wcm92aWRlci1pZCcsXHJcbiAgICBJTlZBTElEX1JFQ0lQSUVOVF9FTUFJTDogJ2F1dGgvaW52YWxpZC1yZWNpcGllbnQtZW1haWwnLFxyXG4gICAgSU5WQUxJRF9TRU5ERVI6ICdhdXRoL2ludmFsaWQtc2VuZGVyJyxcclxuICAgIElOVkFMSURfU0VTU0lPTl9JTkZPOiAnYXV0aC9pbnZhbGlkLXZlcmlmaWNhdGlvbi1pZCcsXHJcbiAgICBJTlZBTElEX1RFTkFOVF9JRDogJ2F1dGgvaW52YWxpZC10ZW5hbnQtaWQnLFxyXG4gICAgTUZBX0lORk9fTk9UX0ZPVU5EOiAnYXV0aC9tdWx0aS1mYWN0b3ItaW5mby1ub3QtZm91bmQnLFxyXG4gICAgTUZBX1JFUVVJUkVEOiAnYXV0aC9tdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZCcsXHJcbiAgICBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FOiAnYXV0aC9taXNzaW5nLWFuZHJvaWQtcGtnLW5hbWUnLFxyXG4gICAgTUlTU0lOR19BUFBfQ1JFREVOVElBTDogJ2F1dGgvbWlzc2luZy1hcHAtY3JlZGVudGlhbCcsXHJcbiAgICBNSVNTSU5HX0FVVEhfRE9NQUlOOiAnYXV0aC9hdXRoLWRvbWFpbi1jb25maWctcmVxdWlyZWQnLFxyXG4gICAgTUlTU0lOR19DT0RFOiAnYXV0aC9taXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlJyxcclxuICAgIE1JU1NJTkdfQ09OVElOVUVfVVJJOiAnYXV0aC9taXNzaW5nLWNvbnRpbnVlLXVyaScsXHJcbiAgICBNSVNTSU5HX0lGUkFNRV9TVEFSVDogJ2F1dGgvbWlzc2luZy1pZnJhbWUtc3RhcnQnLFxyXG4gICAgTUlTU0lOR19JT1NfQlVORExFX0lEOiAnYXV0aC9taXNzaW5nLWlvcy1idW5kbGUtaWQnLFxyXG4gICAgTUlTU0lOR19PUl9JTlZBTElEX05PTkNFOiAnYXV0aC9taXNzaW5nLW9yLWludmFsaWQtbm9uY2UnLFxyXG4gICAgTUlTU0lOR19NRkFfSU5GTzogJ2F1dGgvbWlzc2luZy1tdWx0aS1mYWN0b3ItaW5mbycsXHJcbiAgICBNSVNTSU5HX01GQV9TRVNTSU9OOiAnYXV0aC9taXNzaW5nLW11bHRpLWZhY3Rvci1zZXNzaW9uJyxcclxuICAgIE1JU1NJTkdfUEhPTkVfTlVNQkVSOiAnYXV0aC9taXNzaW5nLXBob25lLW51bWJlcicsXHJcbiAgICBNSVNTSU5HX1NFU1NJT05fSU5GTzogJ2F1dGgvbWlzc2luZy12ZXJpZmljYXRpb24taWQnLFxyXG4gICAgTU9EVUxFX0RFU1RST1lFRDogJ2F1dGgvYXBwLWRlbGV0ZWQnLFxyXG4gICAgTkVFRF9DT05GSVJNQVRJT046ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnLFxyXG4gICAgTkVUV09SS19SRVFVRVNUX0ZBSUxFRDogJ2F1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZCcsXHJcbiAgICBOVUxMX1VTRVI6ICdhdXRoL251bGwtdXNlcicsXHJcbiAgICBOT19BVVRIX0VWRU5UOiAnYXV0aC9uby1hdXRoLWV2ZW50JyxcclxuICAgIE5PX1NVQ0hfUFJPVklERVI6ICdhdXRoL25vLXN1Y2gtcHJvdmlkZXInLFxyXG4gICAgT1BFUkFUSU9OX05PVF9BTExPV0VEOiAnYXV0aC9vcGVyYXRpb24tbm90LWFsbG93ZWQnLFxyXG4gICAgT1BFUkFUSU9OX05PVF9TVVBQT1JURUQ6ICdhdXRoL29wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnQnLFxyXG4gICAgUE9QVVBfQkxPQ0tFRDogJ2F1dGgvcG9wdXAtYmxvY2tlZCcsXHJcbiAgICBQT1BVUF9DTE9TRURfQllfVVNFUjogJ2F1dGgvcG9wdXAtY2xvc2VkLWJ5LXVzZXInLFxyXG4gICAgUFJPVklERVJfQUxSRUFEWV9MSU5LRUQ6ICdhdXRoL3Byb3ZpZGVyLWFscmVhZHktbGlua2VkJyxcclxuICAgIFFVT1RBX0VYQ0VFREVEOiAnYXV0aC9xdW90YS1leGNlZWRlZCcsXHJcbiAgICBSRURJUkVDVF9DQU5DRUxMRURfQllfVVNFUjogJ2F1dGgvcmVkaXJlY3QtY2FuY2VsbGVkLWJ5LXVzZXInLFxyXG4gICAgUkVESVJFQ1RfT1BFUkFUSU9OX1BFTkRJTkc6ICdhdXRoL3JlZGlyZWN0LW9wZXJhdGlvbi1wZW5kaW5nJyxcclxuICAgIFJFSkVDVEVEX0NSRURFTlRJQUw6ICdhdXRoL3JlamVjdGVkLWNyZWRlbnRpYWwnLFxyXG4gICAgU0VDT05EX0ZBQ1RPUl9BTFJFQURZX0VOUk9MTEVEOiAnYXV0aC9zZWNvbmQtZmFjdG9yLWFscmVhZHktaW4tdXNlJyxcclxuICAgIFNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQ6ICdhdXRoL21heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZCcsXHJcbiAgICBURU5BTlRfSURfTUlTTUFUQ0g6ICdhdXRoL3RlbmFudC1pZC1taXNtYXRjaCcsXHJcbiAgICBUSU1FT1VUOiAnYXV0aC90aW1lb3V0JyxcclxuICAgIFRPS0VOX0VYUElSRUQ6ICdhdXRoL3VzZXItdG9rZW4tZXhwaXJlZCcsXHJcbiAgICBUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVI6ICdhdXRoL3Rvby1tYW55LXJlcXVlc3RzJyxcclxuICAgIFVOQVVUSE9SSVpFRF9ET01BSU46ICdhdXRoL3VuYXV0aG9yaXplZC1jb250aW51ZS11cmknLFxyXG4gICAgVU5TVVBQT1JURURfRklSU1RfRkFDVE9SOiAnYXV0aC91bnN1cHBvcnRlZC1maXJzdC1mYWN0b3InLFxyXG4gICAgVU5TVVBQT1JURURfUEVSU0lTVEVOQ0U6ICdhdXRoL3Vuc3VwcG9ydGVkLXBlcnNpc3RlbmNlLXR5cGUnLFxyXG4gICAgVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTjogJ2F1dGgvdW5zdXBwb3J0ZWQtdGVuYW50LW9wZXJhdGlvbicsXHJcbiAgICBVTlZFUklGSUVEX0VNQUlMOiAnYXV0aC91bnZlcmlmaWVkLWVtYWlsJyxcclxuICAgIFVTRVJfQ0FOQ0VMTEVEOiAnYXV0aC91c2VyLWNhbmNlbGxlZCcsXHJcbiAgICBVU0VSX0RFTEVURUQ6ICdhdXRoL3VzZXItbm90LWZvdW5kJyxcclxuICAgIFVTRVJfRElTQUJMRUQ6ICdhdXRoL3VzZXItZGlzYWJsZWQnLFxyXG4gICAgVVNFUl9NSVNNQVRDSDogJ2F1dGgvdXNlci1taXNtYXRjaCcsXHJcbiAgICBVU0VSX1NJR05FRF9PVVQ6ICdhdXRoL3VzZXItc2lnbmVkLW91dCcsXHJcbiAgICBXRUFLX1BBU1NXT1JEOiAnYXV0aC93ZWFrLXBhc3N3b3JkJyxcclxuICAgIFdFQl9TVE9SQUdFX1VOU1VQUE9SVEVEOiAnYXV0aC93ZWItc3RvcmFnZS11bnN1cHBvcnRlZCcsXHJcbiAgICBBTFJFQURZX0lOSVRJQUxJWkVEOiAnYXV0aC9hbHJlYWR5LWluaXRpYWxpemVkJ1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBsb2dDbGllbnQgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXV0aCcpO1xyXG5mdW5jdGlvbiBfbG9nRXJyb3IobXNnLCAuLi5hcmdzKSB7XHJcbiAgICBpZiAobG9nQ2xpZW50LmxvZ0xldmVsIDw9IExvZ0xldmVsLkVSUk9SKSB7XHJcbiAgICAgICAgbG9nQ2xpZW50LmVycm9yKGBBdXRoICgke1NES19WRVJTSU9OfSk6ICR7bXNnfWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIF9mYWlsKGF1dGhPckNvZGUsIC4uLnJlc3QpIHtcclxuICAgIHRocm93IGNyZWF0ZUVycm9ySW50ZXJuYWwoYXV0aE9yQ29kZSwgLi4ucmVzdCk7XHJcbn1cclxuZnVuY3Rpb24gX2NyZWF0ZUVycm9yKGF1dGhPckNvZGUsIC4uLnJlc3QpIHtcclxuICAgIHJldHVybiBjcmVhdGVFcnJvckludGVybmFsKGF1dGhPckNvZGUsIC4uLnJlc3QpO1xyXG59XHJcbmZ1bmN0aW9uIF9lcnJvcldpdGhDdXN0b21NZXNzYWdlKGF1dGgsIGNvZGUsIG1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IGVycm9yTWFwID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcm9kRXJyb3JNYXAoKSksIHsgW2NvZGVdOiBtZXNzYWdlIH0pO1xyXG4gICAgY29uc3QgZmFjdG9yeSA9IG5ldyBFcnJvckZhY3RvcnkoJ2F1dGgnLCAnRmlyZWJhc2UnLCBlcnJvck1hcCk7XHJcbiAgICByZXR1cm4gZmFjdG9yeS5jcmVhdGUoY29kZSwge1xyXG4gICAgICAgIGFwcE5hbWU6IGF1dGgubmFtZVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gX2Fzc2VydEluc3RhbmNlT2YoYXV0aCwgb2JqZWN0LCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgY29uc3RydWN0b3JJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3JJbnN0YW5jZSkpIHtcclxuICAgICAgICBpZiAoY29uc3RydWN0b3JJbnN0YW5jZS5uYW1lICE9PSBvYmplY3QuY29uc3RydWN0b3IubmFtZSkge1xyXG4gICAgICAgICAgICBfZmFpbChhdXRoLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBfZXJyb3JXaXRoQ3VzdG9tTWVzc2FnZShhdXRoLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8sIGBUeXBlIG9mICR7b2JqZWN0LmNvbnN0cnVjdG9yLm5hbWV9IGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIGluc3RhbmNlLmAgK1xyXG4gICAgICAgICAgICBgRGlkIHlvdSBwYXNzIGEgcmVmZXJlbmNlIGZyb20gYSBkaWZmZXJlbnQgQXV0aCBTREs/YCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRXJyb3JJbnRlcm5hbChhdXRoT3JDb2RlLCAuLi5yZXN0KSB7XHJcbiAgICBpZiAodHlwZW9mIGF1dGhPckNvZGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHJlc3RbMF07XHJcbiAgICAgICAgY29uc3QgZnVsbFBhcmFtcyA9IFsuLi5yZXN0LnNsaWNlKDEpXTtcclxuICAgICAgICBpZiAoZnVsbFBhcmFtc1swXSkge1xyXG4gICAgICAgICAgICBmdWxsUGFyYW1zWzBdLmFwcE5hbWUgPSBhdXRoT3JDb2RlLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhdXRoT3JDb2RlLl9lcnJvckZhY3RvcnkuY3JlYXRlKGNvZGUsIC4uLmZ1bGxQYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWS5jcmVhdGUoYXV0aE9yQ29kZSwgLi4ucmVzdCk7XHJcbn1cclxuZnVuY3Rpb24gX2Fzc2VydChhc3NlcnRpb24sIGF1dGhPckNvZGUsIC4uLnJlc3QpIHtcclxuICAgIGlmICghYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3JJbnRlcm5hbChhdXRoT3JDb2RlLCAuLi5yZXN0KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBpbnRlcm5hbCBlcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxyXG4gKlxyXG4gKiBAcGFyYW0gZmFpbHVyZSB0eXBlIG9mIGZhaWx1cmUgZW5jb3VudGVyZWRcclxuICogQHRocm93cyBFcnJvclxyXG4gKi9cclxuZnVuY3Rpb24gZGVidWdGYWlsKGZhaWx1cmUpIHtcclxuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcclxuICAgIC8vIGV4Y2VwdGlvbiBpcyBzd2FsbG93ZWQuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gYElOVEVSTkFMIEFTU0VSVElPTiBGQUlMRUQ6IGAgKyBmYWlsdXJlO1xyXG4gICAgX2xvZ0Vycm9yKG1lc3NhZ2UpO1xyXG4gICAgLy8gTk9URTogV2UgZG9uJ3QgdXNlIEZpcmViYXNlRXJyb3IgaGVyZSBiZWNhdXNlIHRoZXNlIGFyZSBpbnRlcm5hbCBmYWlsdXJlc1xyXG4gICAgLy8gdGhhdCBjYW5ub3QgYmUgaGFuZGxlZCBieSB0aGUgdXNlci4gKEFsc28gaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXJcclxuICAgIC8vIGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgZXJyb3IgYW5kIGFzc2VydCBtb2R1bGVzIHdoaWNoIGRvZXNuJ3Qgd29yay4pXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbn1cclxuLyoqXHJcbiAqIEZhaWxzIGlmIHRoZSBnaXZlbiBhc3NlcnRpb24gY29uZGl0aW9uIGlzIGZhbHNlLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZVxyXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cclxuICpcclxuICogQHBhcmFtIGFzc2VydGlvblxyXG4gKiBAcGFyYW0gbWVzc2FnZVxyXG4gKi9cclxuZnVuY3Rpb24gZGVidWdBc3NlcnQoYXNzZXJ0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWFzc2VydGlvbikge1xyXG4gICAgICAgIGRlYnVnRmFpbChtZXNzYWdlKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBpbnN0YW5jZUNhY2hlID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBfZ2V0SW5zdGFuY2UoY2xzKSB7XHJcbiAgICBkZWJ1Z0Fzc2VydChjbHMgaW5zdGFuY2VvZiBGdW5jdGlvbiwgJ0V4cGVjdGVkIGEgY2xhc3MgZGVmaW5pdGlvbicpO1xyXG4gICAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VDYWNoZS5nZXQoY2xzKTtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGRlYnVnQXNzZXJ0KGluc3RhbmNlIGluc3RhbmNlb2YgY2xzLCAnSW5zdGFuY2Ugc3RvcmVkIGluIGNhY2hlIG1pc21hdGNoZWQgd2l0aCBjbGFzcycpO1xyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuICAgIGluc3RhbmNlID0gbmV3IGNscygpO1xyXG4gICAgaW5zdGFuY2VDYWNoZS5zZXQoY2xzLCBpbnN0YW5jZSk7XHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEluaXRpYWxpemVzIGFuIHtAbGluayBBdXRofSBpbnN0YW5jZSB3aXRoIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXJcclxuICoge0BsaW5rIERlcGVuZGVuY2llc30uXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqXHJcbiAqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIG1vcmUgY29udHJvbCBvdmVyIHRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UgdGhhblxyXG4gKiB7QGxpbmsgZ2V0QXV0aH0uIGBnZXRBdXRoYCB1c2VzIHBsYXRmb3JtLXNwZWNpZmljIGRlZmF1bHRzIHRvIHN1cHBseVxyXG4gKiB0aGUge0BsaW5rIERlcGVuZGVuY2llc30uIEluIGdlbmVyYWwsIGBnZXRBdXRoYCBpcyB0aGUgZWFzaWVzdCB3YXkgdG9cclxuICogaW5pdGlhbGl6ZSBBdXRoIGFuZCB3b3JrcyBmb3IgbW9zdCB1c2UgY2FzZXMuIFVzZSBgaW5pdGlhbGl6ZUF1dGhgIGlmIHlvdVxyXG4gKiBuZWVkIGNvbnRyb2wgb3ZlciB3aGljaCBwZXJzaXN0ZW5jZSBsYXllciBpcyB1c2VkLCBvciB0byBtaW5pbWl6ZSBidW5kbGVcclxuICogc2l6ZSBpZiB5b3UncmUgbm90IHVzaW5nIGVpdGhlciBgc2lnbkluV2l0aFBvcHVwYCBvciBgc2lnbkluV2l0aFJlZGlyZWN0YC5cclxuICpcclxuICogRm9yIGV4YW1wbGUsIGlmIHlvdXIgYXBwIG9ubHkgdXNlcyBhbm9ueW1vdXMgYWNjb3VudHMgYW5kIHlvdSBvbmx5IHdhbnRcclxuICogYWNjb3VudHMgc2F2ZWQgZm9yIHRoZSBjdXJyZW50IHNlc3Npb24sIGluaXRpYWxpemUgYEF1dGhgIHdpdGg6XHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIGNvbnN0IGF1dGggPSBpbml0aWFsaXplQXV0aChhcHAsIHtcclxuICogICBwZXJzaXN0ZW5jZTogYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZSxcclxuICogICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IHVuZGVmaW5lZCxcclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQXV0aChhcHAsIGRlcHMpIHtcclxuICAgIGNvbnN0IHByb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgJ2F1dGgnKTtcclxuICAgIGlmIChwcm92aWRlci5pc0luaXRpYWxpemVkKCkpIHtcclxuICAgICAgICBjb25zdCBhdXRoID0gcHJvdmlkZXIuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbE9wdGlvbnMgPSBwcm92aWRlci5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgaWYgKGRlZXBFcXVhbChpbml0aWFsT3B0aW9ucywgZGVwcyAhPT0gbnVsbCAmJiBkZXBzICE9PSB2b2lkIDAgPyBkZXBzIDoge30pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX2ZhaWwoYXV0aCwgXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQUxSRUFEWV9JTklUSUFMSVpFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgYXV0aCA9IHByb3ZpZGVyLmluaXRpYWxpemUoeyBvcHRpb25zOiBkZXBzIH0pO1xyXG4gICAgcmV0dXJuIGF1dGg7XHJcbn1cclxuZnVuY3Rpb24gX2luaXRpYWxpemVBdXRoSW5zdGFuY2UoYXV0aCwgZGVwcykge1xyXG4gICAgY29uc3QgcGVyc2lzdGVuY2UgPSAoZGVwcyA9PT0gbnVsbCB8fCBkZXBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXBzLnBlcnNpc3RlbmNlKSB8fCBbXTtcclxuICAgIGNvbnN0IGhpZXJhcmNoeSA9IChBcnJheS5pc0FycmF5KHBlcnNpc3RlbmNlKSA/IHBlcnNpc3RlbmNlIDogW3BlcnNpc3RlbmNlXSkubWFwKF9nZXRJbnN0YW5jZSk7XHJcbiAgICBpZiAoZGVwcyA9PT0gbnVsbCB8fCBkZXBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXBzLmVycm9yTWFwKSB7XHJcbiAgICAgICAgYXV0aC5fdXBkYXRlRXJyb3JNYXAoZGVwcy5lcnJvck1hcCk7XHJcbiAgICB9XHJcbiAgICAvLyBUaGlzIHByb21pc2UgaXMgaW50ZW5kZWQgdG8gZmxvYXQ7IGF1dGggaW5pdGlhbGl6YXRpb24gaGFwcGVucyBpbiB0aGVcclxuICAgIC8vIGJhY2tncm91bmQsIG1lYW53aGlsZSB0aGUgYXV0aCBvYmplY3QgbWF5IGJlIHVzZWQgYnkgdGhlIGFwcC5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgIGF1dGguX2luaXRpYWxpemVXaXRoUGVyc2lzdGVuY2UoaGllcmFyY2h5LCBkZXBzID09PSBudWxsIHx8IGRlcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlcHMucG9wdXBSZWRpcmVjdFJlc29sdmVyKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0Q3VycmVudFVybCgpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICgoX2EgPSBzZWxmLmxvY2F0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHJlZikpIHx8ICcnO1xyXG59XHJcbmZ1bmN0aW9uIF9pc0h0dHBPckh0dHBzKCkge1xyXG4gICAgcmV0dXJuIF9nZXRDdXJyZW50U2NoZW1lKCkgPT09ICdodHRwOicgfHwgX2dldEN1cnJlbnRTY2hlbWUoKSA9PT0gJ2h0dHBzOic7XHJcbn1cclxuZnVuY3Rpb24gX2dldEN1cnJlbnRTY2hlbWUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAoKF9hID0gc2VsZi5sb2NhdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByb3RvY29sKSkgfHwgbnVsbDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgd29ya2luZyBvbmxpbmVcclxuICovXHJcbmZ1bmN0aW9uIF9pc09ubGluZSgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIG5hdmlnYXRvciAmJlxyXG4gICAgICAgICdvbkxpbmUnIGluIG5hdmlnYXRvciAmJlxyXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3Iub25MaW5lID09PSAnYm9vbGVhbicgJiZcclxuICAgICAgICAvLyBBcHBseSBvbmx5IGZvciB0cmFkaXRpb25hbCB3ZWIgYXBwcyBhbmQgQ2hyb21lIGV4dGVuc2lvbnMuXHJcbiAgICAgICAgLy8gVGhpcyBpcyBlc3BlY2lhbGx5IHRydWUgZm9yIENvcmRvdmEgYXBwcyB3aGljaCBoYXZlIHVucmVsaWFibGVcclxuICAgICAgICAvLyBuYXZpZ2F0b3Iub25MaW5lIGJlaGF2aW9yIHVubGVzcyBjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uIGlzXHJcbiAgICAgICAgLy8gaW5zdGFsbGVkIHdoaWNoIG92ZXJ3cml0ZXMgdGhlIG5hdGl2ZSBuYXZpZ2F0b3Iub25MaW5lIHZhbHVlIGFuZFxyXG4gICAgICAgIC8vIGRlZmluZXMgbmF2aWdhdG9yLmNvbm5lY3Rpb24uXHJcbiAgICAgICAgKF9pc0h0dHBPckh0dHBzKCkgfHwgaXNCcm93c2VyRXh0ZW5zaW9uKCkgfHwgJ2Nvbm5lY3Rpb24nIGluIG5hdmlnYXRvcikpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm9uTGluZTtcclxuICAgIH1cclxuICAgIC8vIElmIHdlIGNhbid0IGRldGVybWluZSB0aGUgc3RhdGUsIGFzc3VtZSBpdCBpcyBvbmxpbmUuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBfZ2V0VXNlckxhbmd1YWdlKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBuYXZpZ2F0b3JMYW5ndWFnZSA9IG5hdmlnYXRvcjtcclxuICAgIHJldHVybiAoXHJcbiAgICAvLyBNb3N0IHJlbGlhYmxlLCBidXQgb25seSBzdXBwb3J0ZWQgaW4gQ2hyb21lL0ZpcmVmb3guXHJcbiAgICAobmF2aWdhdG9yTGFuZ3VhZ2UubGFuZ3VhZ2VzICYmIG5hdmlnYXRvckxhbmd1YWdlLmxhbmd1YWdlc1swXSkgfHxcclxuICAgICAgICAvLyBTdXBwb3J0ZWQgaW4gbW9zdCBicm93c2VycywgYnV0IHJldHVybnMgdGhlIGxhbmd1YWdlIG9mIHRoZSBicm93c2VyXHJcbiAgICAgICAgLy8gVUksIG5vdCB0aGUgbGFuZ3VhZ2Ugc2V0IGluIGJyb3dzZXIgc2V0dGluZ3MuXHJcbiAgICAgICAgbmF2aWdhdG9yTGFuZ3VhZ2UubGFuZ3VhZ2UgfHxcclxuICAgICAgICAvLyBDb3VsZG4ndCBkZXRlcm1pbmUgbGFuZ3VhZ2UuXHJcbiAgICAgICAgbnVsbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgc3RydWN0dXJlIHRvIGhlbHAgcGljayBiZXR3ZWVuIGEgcmFuZ2Ugb2YgbG9uZyBhbmQgc2hvcnQgZGVsYXkgZHVyYXRpb25zXHJcbiAqIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC4gSW4gZ2VuZXJhbCwgdGhlIGxvbmcgZGVsYXkgaXMgdXNlZCBmb3JcclxuICogbW9iaWxlIGVudmlyb25tZW50cyB3aGVyZWFzIHNob3J0IGRlbGF5cyBhcmUgdXNlZCBmb3IgZGVza3RvcCBlbnZpcm9ubWVudHMuXHJcbiAqL1xyXG5jbGFzcyBEZWxheSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzaG9ydERlbGF5LCBsb25nRGVsYXkpIHtcclxuICAgICAgICB0aGlzLnNob3J0RGVsYXkgPSBzaG9ydERlbGF5O1xyXG4gICAgICAgIHRoaXMubG9uZ0RlbGF5ID0gbG9uZ0RlbGF5O1xyXG4gICAgICAgIC8vIEludGVybmFsIGVycm9yIHdoZW4gaW1wcm9wZXJseSBpbml0aWFsaXplZC5cclxuICAgICAgICBkZWJ1Z0Fzc2VydChsb25nRGVsYXkgPiBzaG9ydERlbGF5LCAnU2hvcnQgZGVsYXkgc2hvdWxkIGJlIGxlc3MgdGhhbiBsb25nIGRlbGF5IScpO1xyXG4gICAgICAgIHRoaXMuaXNNb2JpbGUgPSBpc01vYmlsZUNvcmRvdmEoKSB8fCBpc1JlYWN0TmF0aXZlKCk7XHJcbiAgICB9XHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgaWYgKCFfaXNPbmxpbmUoKSkge1xyXG4gICAgICAgICAgICAvLyBQaWNrIHRoZSBzaG9ydGVyIHRpbWVvdXQuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbig1MDAwIC8qIE9GRkxJTkUgKi8sIHRoaXMuc2hvcnREZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHJ1bm5pbmcgaW4gYSBtb2JpbGUgZW52aXJvbm1lbnQsIHJldHVybiB0aGUgbG9uZyBkZWxheSwgb3RoZXJ3aXNlXHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBzaG9ydCBkZWxheS5cclxuICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGltcHJvdmVkIGluIHRoZSBmdXR1cmUgdG8gZHluYW1pY2FsbHkgY2hhbmdlIGJhc2VkIG9uIG90aGVyXHJcbiAgICAgICAgLy8gdmFyaWFibGVzIGluc3RlYWQgb2YganVzdCByZWFkaW5nIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzTW9iaWxlID8gdGhpcy5sb25nRGVsYXkgOiB0aGlzLnNob3J0RGVsYXk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gX2VtdWxhdG9yVXJsKGNvbmZpZywgcGF0aCkge1xyXG4gICAgZGVidWdBc3NlcnQoY29uZmlnLmVtdWxhdG9yLCAnRW11bGF0b3Igc2hvdWxkIGFsd2F5cyBiZSBzZXQgaGVyZScpO1xyXG4gICAgY29uc3QgeyB1cmwgfSA9IGNvbmZpZy5lbXVsYXRvcjtcclxuICAgIGlmICghcGF0aCkge1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7dXJsfSR7cGF0aC5zdGFydHNXaXRoKCcvJykgPyBwYXRoLnNsaWNlKDEpIDogcGF0aH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEZldGNoUHJvdmlkZXIge1xyXG4gICAgc3RhdGljIGluaXRpYWxpemUoZmV0Y2hJbXBsLCBoZWFkZXJzSW1wbCwgcmVzcG9uc2VJbXBsKSB7XHJcbiAgICAgICAgdGhpcy5mZXRjaEltcGwgPSBmZXRjaEltcGw7XHJcbiAgICAgICAgaWYgKGhlYWRlcnNJbXBsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc0ltcGwgPSBoZWFkZXJzSW1wbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlSW1wbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlSW1wbCA9IHJlc3BvbnNlSW1wbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZmV0Y2goKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmV0Y2hJbXBsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoSW1wbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAnZmV0Y2gnIGluIHNlbGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmV0Y2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlYnVnRmFpbCgnQ291bGQgbm90IGZpbmQgZmV0Y2ggaW1wbGVtZW50YXRpb24sIG1ha2Ugc3VyZSB5b3UgY2FsbCBGZXRjaFByb3ZpZGVyLmluaXRpYWxpemUoKSB3aXRoIGFuIGFwcHJvcHJpYXRlIHBvbHlmaWxsJyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaGVhZGVycygpIHtcclxuICAgICAgICBpZiAodGhpcy5oZWFkZXJzSW1wbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzSW1wbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAnSGVhZGVycycgaW4gc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5IZWFkZXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWJ1Z0ZhaWwoJ0NvdWxkIG5vdCBmaW5kIEhlYWRlcnMgaW1wbGVtZW50YXRpb24sIG1ha2Ugc3VyZSB5b3UgY2FsbCBGZXRjaFByb3ZpZGVyLmluaXRpYWxpemUoKSB3aXRoIGFuIGFwcHJvcHJpYXRlIHBvbHlmaWxsJyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcmVzcG9uc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uc2VJbXBsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlSW1wbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAnUmVzcG9uc2UnIGluIHNlbGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuUmVzcG9uc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlYnVnRmFpbCgnQ291bGQgbm90IGZpbmQgUmVzcG9uc2UgaW1wbGVtZW50YXRpb24sIG1ha2Ugc3VyZSB5b3UgY2FsbCBGZXRjaFByb3ZpZGVyLmluaXRpYWxpemUoKSB3aXRoIGFuIGFwcHJvcHJpYXRlIHBvbHlmaWxsJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIE1hcCBmcm9tIGVycm9ycyByZXR1cm5lZCBieSB0aGUgc2VydmVyIHRvIGVycm9ycyB0byBkZXZlbG9wZXIgdmlzaWJsZSBlcnJvcnNcclxuICovXHJcbmNvbnN0IFNFUlZFUl9FUlJPUl9NQVAgPSB7XHJcbiAgICAvLyBDdXN0b20gdG9rZW4gZXJyb3JzLlxyXG4gICAgW1wiQ1JFREVOVElBTF9NSVNNQVRDSFwiIC8qIENSRURFTlRJQUxfTUlTTUFUQ0ggKi9dOiBcImN1c3RvbS10b2tlbi1taXNtYXRjaFwiIC8qIENSRURFTlRJQUxfTUlTTUFUQ0ggKi8sXHJcbiAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXHJcbiAgICBbXCJNSVNTSU5HX0NVU1RPTV9UT0tFTlwiIC8qIE1JU1NJTkdfQ1VTVE9NX1RPS0VOICovXTogXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovLFxyXG4gICAgLy8gQ3JlYXRlIEF1dGggVVJJIGVycm9ycy5cclxuICAgIFtcIklOVkFMSURfSURFTlRJRklFUlwiIC8qIElOVkFMSURfSURFTlRJRklFUiAqL106IFwiaW52YWxpZC1lbWFpbFwiIC8qIElOVkFMSURfRU1BSUwgKi8sXHJcbiAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXHJcbiAgICBbXCJNSVNTSU5HX0NPTlRJTlVFX1VSSVwiIC8qIE1JU1NJTkdfQ09OVElOVUVfVVJJICovXTogXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovLFxyXG4gICAgLy8gU2lnbiBpbiB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZCBlcnJvcnMgKHNvbWUgYXBwbHkgdG8gc2lnbiB1cCB0b28pLlxyXG4gICAgW1wiSU5WQUxJRF9QQVNTV09SRFwiIC8qIElOVkFMSURfUEFTU1dPUkQgKi9dOiBcIndyb25nLXBhc3N3b3JkXCIgLyogSU5WQUxJRF9QQVNTV09SRCAqLyxcclxuICAgIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuIGlmIHRoZSBTREsgc2VuZHMgYSBiYWQgcmVxdWVzdC5cclxuICAgIFtcIk1JU1NJTkdfUEFTU1dPUkRcIiAvKiBNSVNTSU5HX1BBU1NXT1JEICovXTogXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovLFxyXG4gICAgLy8gU2lnbiB1cCB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZCBlcnJvcnMuXHJcbiAgICBbXCJFTUFJTF9FWElTVFNcIiAvKiBFTUFJTF9FWElTVFMgKi9dOiBcImVtYWlsLWFscmVhZHktaW4tdXNlXCIgLyogRU1BSUxfRVhJU1RTICovLFxyXG4gICAgW1wiUEFTU1dPUkRfTE9HSU5fRElTQUJMRURcIiAvKiBQQVNTV09SRF9MT0dJTl9ESVNBQkxFRCAqL106IFwib3BlcmF0aW9uLW5vdC1hbGxvd2VkXCIgLyogT1BFUkFUSU9OX05PVF9BTExPV0VEICovLFxyXG4gICAgLy8gVmVyaWZ5IGFzc2VydGlvbiBmb3Igc2lnbiBpbiB3aXRoIGNyZWRlbnRpYWwgZXJyb3JzOlxyXG4gICAgW1wiSU5WQUxJRF9JRFBfUkVTUE9OU0VcIiAvKiBJTlZBTElEX0lEUF9SRVNQT05TRSAqL106IFwiaW52YWxpZC1jcmVkZW50aWFsXCIgLyogSU5WQUxJRF9JRFBfUkVTUE9OU0UgKi8sXHJcbiAgICBbXCJJTlZBTElEX1BFTkRJTkdfVE9LRU5cIiAvKiBJTlZBTElEX1BFTkRJTkdfVE9LRU4gKi9dOiBcImludmFsaWQtY3JlZGVudGlhbFwiIC8qIElOVkFMSURfSURQX1JFU1BPTlNFICovLFxyXG4gICAgW1wiRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRURcIiAvKiBGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCAqL106IFwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiIC8qIENSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UgKi8sXHJcbiAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXHJcbiAgICBbXCJNSVNTSU5HX1JFUV9UWVBFXCIgLyogTUlTU0lOR19SRVFfVFlQRSAqL106IFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyxcclxuICAgIC8vIFNlbmQgUGFzc3dvcmQgcmVzZXQgZW1haWwgZXJyb3JzOlxyXG4gICAgW1wiRU1BSUxfTk9UX0ZPVU5EXCIgLyogRU1BSUxfTk9UX0ZPVU5EICovXTogXCJ1c2VyLW5vdC1mb3VuZFwiIC8qIFVTRVJfREVMRVRFRCAqLyxcclxuICAgIFtcIlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVFwiIC8qIFJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVCAqL106IFwidG9vLW1hbnktcmVxdWVzdHNcIiAvKiBUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVIgKi8sXHJcbiAgICBbXCJFWFBJUkVEX09PQl9DT0RFXCIgLyogRVhQSVJFRF9PT0JfQ09ERSAqL106IFwiZXhwaXJlZC1hY3Rpb24tY29kZVwiIC8qIEVYUElSRURfT09CX0NPREUgKi8sXHJcbiAgICBbXCJJTlZBTElEX09PQl9DT0RFXCIgLyogSU5WQUxJRF9PT0JfQ09ERSAqL106IFwiaW52YWxpZC1hY3Rpb24tY29kZVwiIC8qIElOVkFMSURfT09CX0NPREUgKi8sXHJcbiAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXHJcbiAgICBbXCJNSVNTSU5HX09PQl9DT0RFXCIgLyogTUlTU0lOR19PT0JfQ09ERSAqL106IFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyxcclxuICAgIC8vIE9wZXJhdGlvbnMgdGhhdCByZXF1aXJlIElEIHRva2VuIGluIHJlcXVlc3Q6XHJcbiAgICBbXCJDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU5cIiAvKiBDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU4gKi9dOiBcInJlcXVpcmVzLXJlY2VudC1sb2dpblwiIC8qIENSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTiAqLyxcclxuICAgIFtcIklOVkFMSURfSURfVE9LRU5cIiAvKiBJTlZBTElEX0lEX1RPS0VOICovXTogXCJpbnZhbGlkLXVzZXItdG9rZW5cIiAvKiBJTlZBTElEX0FVVEggKi8sXHJcbiAgICBbXCJUT0tFTl9FWFBJUkVEXCIgLyogVE9LRU5fRVhQSVJFRCAqL106IFwidXNlci10b2tlbi1leHBpcmVkXCIgLyogVE9LRU5fRVhQSVJFRCAqLyxcclxuICAgIFtcIlVTRVJfTk9UX0ZPVU5EXCIgLyogVVNFUl9OT1RfRk9VTkQgKi9dOiBcInVzZXItdG9rZW4tZXhwaXJlZFwiIC8qIFRPS0VOX0VYUElSRUQgKi8sXHJcbiAgICAvLyBPdGhlciBlcnJvcnMuXHJcbiAgICBbXCJUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVJcIiAvKiBUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVIgKi9dOiBcInRvby1tYW55LXJlcXVlc3RzXCIgLyogVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSICovLFxyXG4gICAgLy8gUGhvbmUgQXV0aCByZWxhdGVkIGVycm9ycy5cclxuICAgIFtcIklOVkFMSURfQ09ERVwiIC8qIElOVkFMSURfQ09ERSAqL106IFwiaW52YWxpZC12ZXJpZmljYXRpb24tY29kZVwiIC8qIElOVkFMSURfQ09ERSAqLyxcclxuICAgIFtcIklOVkFMSURfU0VTU0lPTl9JTkZPXCIgLyogSU5WQUxJRF9TRVNTSU9OX0lORk8gKi9dOiBcImludmFsaWQtdmVyaWZpY2F0aW9uLWlkXCIgLyogSU5WQUxJRF9TRVNTSU9OX0lORk8gKi8sXHJcbiAgICBbXCJJTlZBTElEX1RFTVBPUkFSWV9QUk9PRlwiIC8qIElOVkFMSURfVEVNUE9SQVJZX1BST09GICovXTogXCJpbnZhbGlkLWNyZWRlbnRpYWxcIiAvKiBJTlZBTElEX0lEUF9SRVNQT05TRSAqLyxcclxuICAgIFtcIk1JU1NJTkdfU0VTU0lPTl9JTkZPXCIgLyogTUlTU0lOR19TRVNTSU9OX0lORk8gKi9dOiBcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIgLyogTUlTU0lOR19TRVNTSU9OX0lORk8gKi8sXHJcbiAgICBbXCJTRVNTSU9OX0VYUElSRURcIiAvKiBTRVNTSU9OX0VYUElSRUQgKi9dOiBcImNvZGUtZXhwaXJlZFwiIC8qIENPREVfRVhQSVJFRCAqLyxcclxuICAgIC8vIE90aGVyIGFjdGlvbiBjb2RlIGVycm9ycyB3aGVuIGFkZGl0aW9uYWwgc2V0dGluZ3MgcGFzc2VkLlxyXG4gICAgLy8gTUlTU0lOR19DT05USU5VRV9VUkkgaXMgZ2V0dGluZyBtYXBwZWQgdG8gSU5URVJOQUxfRVJST1IgYWJvdmUuXHJcbiAgICAvLyBUaGlzIGlzIE9LIGFzIHRoaXMgZXJyb3Igd2lsbCBiZSBjYXVnaHQgYnkgY2xpZW50IHNpZGUgdmFsaWRhdGlvbi5cclxuICAgIFtcIk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUVcIiAvKiBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FICovXTogXCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIiAvKiBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FICovLFxyXG4gICAgW1wiVU5BVVRIT1JJWkVEX0RPTUFJTlwiIC8qIFVOQVVUSE9SSVpFRF9ET01BSU4gKi9dOiBcInVuYXV0aG9yaXplZC1jb250aW51ZS11cmlcIiAvKiBVTkFVVEhPUklaRURfRE9NQUlOICovLFxyXG4gICAgLy8gZ2V0UHJvamVjdENvbmZpZyBlcnJvcnMgd2hlbiBjbGllbnRJZCBpcyBwYXNzZWQuXHJcbiAgICBbXCJJTlZBTElEX09BVVRIX0NMSUVOVF9JRFwiIC8qIElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEICovXTogXCJpbnZhbGlkLW9hdXRoLWNsaWVudC1pZFwiIC8qIElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEICovLFxyXG4gICAgLy8gVXNlciBhY3Rpb25zIChzaWduLXVwIG9yIGRlbGV0aW9uKSBkaXNhYmxlZCBlcnJvcnMuXHJcbiAgICBbXCJBRE1JTl9PTkxZX09QRVJBVElPTlwiIC8qIEFETUlOX09OTFlfT1BFUkFUSU9OICovXTogXCJhZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvblwiIC8qIEFETUlOX09OTFlfT1BFUkFUSU9OICovLFxyXG4gICAgLy8gTXVsdGkgZmFjdG9yIHJlbGF0ZWQgZXJyb3JzLlxyXG4gICAgW1wiSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMXCIgLyogSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMICovXTogXCJpbnZhbGlkLW11bHRpLWZhY3Rvci1zZXNzaW9uXCIgLyogSU5WQUxJRF9NRkFfU0VTU0lPTiAqLyxcclxuICAgIFtcIk1GQV9FTlJPTExNRU5UX05PVF9GT1VORFwiIC8qIE1GQV9FTlJPTExNRU5UX05PVF9GT1VORCAqL106IFwibXVsdGktZmFjdG9yLWluZm8tbm90LWZvdW5kXCIgLyogTUZBX0lORk9fTk9UX0ZPVU5EICovLFxyXG4gICAgW1wiTUlTU0lOR19NRkFfRU5ST0xMTUVOVF9JRFwiIC8qIE1JU1NJTkdfTUZBX0VOUk9MTE1FTlRfSUQgKi9dOiBcIm1pc3NpbmctbXVsdGktZmFjdG9yLWluZm9cIiAvKiBNSVNTSU5HX01GQV9JTkZPICovLFxyXG4gICAgW1wiTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMXCIgLyogTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMICovXTogXCJtaXNzaW5nLW11bHRpLWZhY3Rvci1zZXNzaW9uXCIgLyogTUlTU0lOR19NRkFfU0VTU0lPTiAqLyxcclxuICAgIFtcIlNFQ09ORF9GQUNUT1JfRVhJU1RTXCIgLyogU0VDT05EX0ZBQ1RPUl9FWElTVFMgKi9dOiBcInNlY29uZC1mYWN0b3ItYWxyZWFkeS1pbi11c2VcIiAvKiBTRUNPTkRfRkFDVE9SX0FMUkVBRFlfRU5ST0xMRUQgKi8sXHJcbiAgICBbXCJTRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEXCIgLyogU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRCAqL106IFwibWF4aW11bS1zZWNvbmQtZmFjdG9yLWNvdW50LWV4Y2VlZGVkXCIgLyogU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRCAqLyxcclxuICAgIC8vIEJsb2NraW5nIGZ1bmN0aW9ucyByZWxhdGVkIGVycm9ycy5cclxuICAgIFtcIkJMT0NLSU5HX0ZVTkNUSU9OX0VSUk9SX1JFU1BPTlNFXCIgLyogQkxPQ0tJTkdfRlVOQ1RJT05fRVJST1JfUkVTUE9OU0UgKi9dOiBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi9cclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9BUElfVElNRU9VVF9NUyA9IG5ldyBEZWxheSgzMDAwMCwgNjAwMDApO1xyXG5mdW5jdGlvbiBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgaWYgKGF1dGgudGVuYW50SWQgJiYgIXJlcXVlc3QudGVuYW50SWQpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0KSwgeyB0ZW5hbnRJZDogYXV0aC50ZW5hbnRJZCB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXF1ZXN0O1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBtZXRob2QsIHBhdGgsIHJlcXVlc3QsIGN1c3RvbUVycm9yTWFwID0ge30pIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUZldGNoV2l0aEVycm9ySGFuZGxpbmcoYXV0aCwgY3VzdG9tRXJyb3JNYXAsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBsZXQgYm9keSA9IHt9O1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcclxuICAgICAgICBpZiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcIkdFVFwiIC8qIEdFVCAqLykge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcmVxdWVzdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJvZHkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdClcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBxdWVyeXN0cmluZyhPYmplY3QuYXNzaWduKHsga2V5OiBhdXRoLmNvbmZpZy5hcGlLZXkgfSwgcGFyYW1zKSkuc2xpY2UoMSk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IGF3YWl0IGF1dGguX2dldEFkZGl0aW9uYWxIZWFkZXJzKCk7XHJcbiAgICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiIC8qIENPTlRFTlRfVFlQRSAqL10gPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgaWYgKGF1dGgubGFuZ3VhZ2VDb2RlKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnNbXCJYLUZpcmViYXNlLUxvY2FsZVwiIC8qIFhfRklSRUJBU0VfTE9DQUxFICovXSA9IGF1dGgubGFuZ3VhZ2VDb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRmV0Y2hQcm92aWRlci5mZXRjaCgpKF9nZXRGaW5hbFRhcmdldChhdXRoLCBhdXRoLmNvbmZpZy5hcGlIb3N0LCBwYXRoLCBxdWVyeSksIE9iamVjdC5hc3NpZ24oeyBtZXRob2QsXHJcbiAgICAgICAgICAgIGhlYWRlcnMsIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXInIH0sIGJvZHkpKTtcclxuICAgIH0pO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZyhhdXRoLCBjdXN0b21FcnJvck1hcCwgZmV0Y2hGbikge1xyXG4gICAgYXV0aC5fY2FuSW5pdEVtdWxhdG9yID0gZmFsc2U7XHJcbiAgICBjb25zdCBlcnJvck1hcCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgU0VSVkVSX0VSUk9SX01BUCksIGN1c3RvbUVycm9yTWFwKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbmV0d29ya1RpbWVvdXQgPSBuZXcgTmV0d29ya1RpbWVvdXQoYXV0aCk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgICAgICBmZXRjaEZuKCksXHJcbiAgICAgICAgICAgIG5ldHdvcmtUaW1lb3V0LnByb21pc2VcclxuICAgICAgICBdKTtcclxuICAgICAgICAvLyBJZiB3ZSd2ZSByZWFjaGVkIHRoaXMgcG9pbnQsIHRoZSBmZXRjaCBzdWNjZWVkZWQgYW5kIHRoZSBuZXR3b3JrVGltZW91dFxyXG4gICAgICAgIC8vIGRpZG4ndCB0aHJvdzsgY2xlYXIgdGhlIG5ldHdvcmsgdGltZW91dCBkZWxheSBzbyB0aGF0IE5vZGUgd29uJ3QgaGFuZ1xyXG4gICAgICAgIG5ldHdvcmtUaW1lb3V0LmNsZWFyTmV0d29ya1RpbWVvdXQoKTtcclxuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGlmICgnbmVlZENvbmZpcm1hdGlvbicgaW4ganNvbikge1xyXG4gICAgICAgICAgICB0aHJvdyBfbWFrZVRhZ2dlZEVycm9yKGF1dGgsIFwiYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbFwiIC8qIE5FRURfQ09ORklSTUFUSU9OICovLCBqc29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rICYmICEoJ2Vycm9yTWVzc2FnZScgaW4ganNvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGpzb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSByZXNwb25zZS5vayA/IGpzb24uZXJyb3JNZXNzYWdlIDoganNvbi5lcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICBjb25zdCBbc2VydmVyRXJyb3JDb2RlLCBzZXJ2ZXJFcnJvck1lc3NhZ2VdID0gZXJyb3JNZXNzYWdlLnNwbGl0KCcgOiAnKTtcclxuICAgICAgICAgICAgaWYgKHNlcnZlckVycm9yQ29kZSA9PT0gXCJGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRFwiIC8qIEZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEICovKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBfbWFrZVRhZ2dlZEVycm9yKGF1dGgsIFwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiIC8qIENSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UgKi8sIGpzb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlcnZlckVycm9yQ29kZSA9PT0gXCJFTUFJTF9FWElTVFNcIiAvKiBFTUFJTF9FWElTVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoYXV0aCwgXCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiIC8qIEVNQUlMX0VYSVNUUyAqLywganNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VydmVyRXJyb3JDb2RlID09PSBcIlVTRVJfRElTQUJMRURcIiAvKiBVU0VSX0RJU0FCTEVEICovKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBfbWFrZVRhZ2dlZEVycm9yKGF1dGgsIFwidXNlci1kaXNhYmxlZFwiIC8qIFVTRVJfRElTQUJMRUQgKi8sIGpzb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGhFcnJvciA9IGVycm9yTWFwW3NlcnZlckVycm9yQ29kZV0gfHxcclxuICAgICAgICAgICAgICAgIHNlcnZlckVycm9yQ29kZVxyXG4gICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tfXFxzXSsvZywgJy0nKTtcclxuICAgICAgICAgICAgaWYgKHNlcnZlckVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgX2Vycm9yV2l0aEN1c3RvbU1lc3NhZ2UoYXV0aCwgYXV0aEVycm9yLCBzZXJ2ZXJFcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX2ZhaWwoYXV0aCwgYXV0aEVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9mYWlsKGF1dGgsIFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiIC8qIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQgKi8pO1xyXG4gICAgfVxyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtU2lnbkluUmVxdWVzdChhdXRoLCBtZXRob2QsIHBhdGgsIHJlcXVlc3QsIGN1c3RvbUVycm9yTWFwID0ge30pIHtcclxuICAgIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gKGF3YWl0IF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBtZXRob2QsIHBhdGgsIHJlcXVlc3QsIGN1c3RvbUVycm9yTWFwKSk7XHJcbiAgICBpZiAoJ21mYVBlbmRpbmdDcmVkZW50aWFsJyBpbiBzZXJ2ZXJSZXNwb25zZSkge1xyXG4gICAgICAgIF9mYWlsKGF1dGgsIFwibXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIiAvKiBNRkFfUkVRVUlSRUQgKi8sIHtcclxuICAgICAgICAgICAgX3NlcnZlclJlc3BvbnNlOiBzZXJ2ZXJSZXNwb25zZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlcnZlclJlc3BvbnNlO1xyXG59XHJcbmZ1bmN0aW9uIF9nZXRGaW5hbFRhcmdldChhdXRoLCBob3N0LCBwYXRoLCBxdWVyeSkge1xyXG4gICAgY29uc3QgYmFzZSA9IGAke2hvc3R9JHtwYXRofT8ke3F1ZXJ5fWA7XHJcbiAgICBpZiAoIWF1dGguY29uZmlnLmVtdWxhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2F1dGguY29uZmlnLmFwaVNjaGVtZX06Ly8ke2Jhc2V9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBfZW11bGF0b3JVcmwoYXV0aC5jb25maWcsIGJhc2UpO1xyXG59XHJcbmNsYXNzIE5ldHdvcmtUaW1lb3V0IHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgpIHtcclxuICAgICAgICB0aGlzLmF1dGggPSBhdXRoO1xyXG4gICAgICAgIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyBhcmUgZnVuZGFtZW50YWxseSBpbmNvbXBhdGlibGUsIGJ1dCB3ZVxyXG4gICAgICAgIC8vIGRvbid0IGNhcmUgYWJvdXQgdGhlIHZhbHVlIGhlcmVcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIiAvKiBORVRXT1JLX1JFUVVFU1RfRkFJTEVEICovKSk7XHJcbiAgICAgICAgICAgIH0sIERFRkFVTFRfQVBJX1RJTUVPVVRfTVMuZ2V0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2xlYXJOZXR3b3JrVGltZW91dCgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX21ha2VUYWdnZWRFcnJvcihhdXRoLCBjb2RlLCByZXNwb25zZSkge1xyXG4gICAgY29uc3QgZXJyb3JQYXJhbXMgPSB7XHJcbiAgICAgICAgYXBwTmFtZTogYXV0aC5uYW1lXHJcbiAgICB9O1xyXG4gICAgaWYgKHJlc3BvbnNlLmVtYWlsKSB7XHJcbiAgICAgICAgZXJyb3JQYXJhbXMuZW1haWwgPSByZXNwb25zZS5lbWFpbDtcclxuICAgIH1cclxuICAgIGlmIChyZXNwb25zZS5waG9uZU51bWJlcikge1xyXG4gICAgICAgIGVycm9yUGFyYW1zLnBob25lTnVtYmVyID0gcmVzcG9uc2UucGhvbmVOdW1iZXI7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlcnJvciA9IF9jcmVhdGVFcnJvcihhdXRoLCBjb2RlLCBlcnJvclBhcmFtcyk7XHJcbiAgICAvLyBXZSBrbm93IGN1c3RvbURhdGEgaXMgZGVmaW5lZCBvbiBlcnJvciBiZWNhdXNlIGVycm9yUGFyYW1zIGlzIGRlZmluZWRcclxuICAgIGVycm9yLmN1c3RvbURhdGEuX3Rva2VuUmVzcG9uc2UgPSByZXNwb25zZTtcclxuICAgIHJldHVybiBlcnJvcjtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVBY2NvdW50KGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6ZGVsZXRlXCIgLyogREVMRVRFX0FDQ09VTlQgKi8sIHJlcXVlc3QpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxpbmtlZEFjY291bnRzKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6dXBkYXRlXCIgLyogU0VUX0FDQ09VTlRfSU5GTyAqLywgcmVxdWVzdCk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudEluZm8oYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpsb29rdXBcIiAvKiBHRVRfQUNDT1VOVF9JTkZPICovLCByZXF1ZXN0KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcodXRjVGltZXN0YW1wKSB7XHJcbiAgICBpZiAoIXV0Y1RpbWVzdGFtcCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZGF0ZSBvYmplY3QuXHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKE51bWJlcih1dGNUaW1lc3RhbXApKTtcclxuICAgICAgICAvLyBUZXN0IGRhdGUgaXMgdmFsaWQuXHJcbiAgICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCB0byBVVEMgZGF0ZSBzdHJpbmcuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nLiB1bmRlZmluZWQgd2lsbCBiZSByZXR1cm5lZC5cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBKU09OIFdlYiBUb2tlbiAoSldUKSB1c2VkIHRvIGlkZW50aWZ5IHRoZSB1c2VyIHRvIGEgRmlyZWJhc2Ugc2VydmljZS5cclxuICpcclxuICogQHJlbWFya3NcclxuICogUmV0dXJucyB0aGUgY3VycmVudCB0b2tlbiBpZiBpdCBoYXMgbm90IGV4cGlyZWQgb3IgaWYgaXQgd2lsbCBub3QgZXhwaXJlIGluIHRoZSBuZXh0IGZpdmVcclxuICogbWludXRlcy4gT3RoZXJ3aXNlLCB0aGlzIHdpbGwgcmVmcmVzaCB0aGUgdG9rZW4gYW5kIHJldHVybiBhIG5ldyBvbmUuXHJcbiAqXHJcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXHJcbiAqIEBwYXJhbSBmb3JjZVJlZnJlc2ggLSBGb3JjZSByZWZyZXNoIHJlZ2FyZGxlc3Mgb2YgdG9rZW4gZXhwaXJhdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SWRUb2tlbih1c2VyLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKS5nZXRJZFRva2VuKGZvcmNlUmVmcmVzaCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYSBkZXNlcmlhbGl6ZWQgSlNPTiBXZWIgVG9rZW4gKEpXVCkgdXNlZCB0byBpZGVudGl0ZnkgdGhlIHVzZXIgdG8gYSBGaXJlYmFzZSBzZXJ2aWNlLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHRva2VuIGlmIGl0IGhhcyBub3QgZXhwaXJlZCBvciBpZiBpdCB3aWxsIG5vdCBleHBpcmUgaW4gdGhlIG5leHQgZml2ZVxyXG4gKiBtaW51dGVzLiBPdGhlcndpc2UsIHRoaXMgd2lsbCByZWZyZXNoIHRoZSB0b2tlbiBhbmQgcmV0dXJuIGEgbmV3IG9uZS5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIGZvcmNlUmVmcmVzaCAtIEZvcmNlIHJlZnJlc2ggcmVnYXJkbGVzcyBvZiB0b2tlbiBleHBpcmF0aW9uLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRJZFRva2VuUmVzdWx0KHVzZXIsIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcik7XHJcbiAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHVzZXJJbnRlcm5hbC5nZXRJZFRva2VuKGZvcmNlUmVmcmVzaCk7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBfcGFyc2VUb2tlbih0b2tlbik7XHJcbiAgICBfYXNzZXJ0KGNsYWltcyAmJiBjbGFpbXMuZXhwICYmIGNsYWltcy5hdXRoX3RpbWUgJiYgY2xhaW1zLmlhdCwgdXNlckludGVybmFsLmF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICBjb25zdCBmaXJlYmFzZSA9IHR5cGVvZiBjbGFpbXMuZmlyZWJhc2UgPT09ICdvYmplY3QnID8gY2xhaW1zLmZpcmViYXNlIDogdW5kZWZpbmVkO1xyXG4gICAgY29uc3Qgc2lnbkluUHJvdmlkZXIgPSBmaXJlYmFzZSA9PT0gbnVsbCB8fCBmaXJlYmFzZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlyZWJhc2VbJ3NpZ25faW5fcHJvdmlkZXInXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2xhaW1zLFxyXG4gICAgICAgIHRva2VuLFxyXG4gICAgICAgIGF1dGhUaW1lOiB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcoc2Vjb25kc1N0cmluZ1RvTWlsbGlzZWNvbmRzKGNsYWltcy5hdXRoX3RpbWUpKSxcclxuICAgICAgICBpc3N1ZWRBdFRpbWU6IHV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyhzZWNvbmRzU3RyaW5nVG9NaWxsaXNlY29uZHMoY2xhaW1zLmlhdCkpLFxyXG4gICAgICAgIGV4cGlyYXRpb25UaW1lOiB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcoc2Vjb25kc1N0cmluZ1RvTWlsbGlzZWNvbmRzKGNsYWltcy5leHApKSxcclxuICAgICAgICBzaWduSW5Qcm92aWRlcjogc2lnbkluUHJvdmlkZXIgfHwgbnVsbCxcclxuICAgICAgICBzaWduSW5TZWNvbmRGYWN0b3I6IChmaXJlYmFzZSA9PT0gbnVsbCB8fCBmaXJlYmFzZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlyZWJhc2VbJ3NpZ25faW5fc2Vjb25kX2ZhY3RvciddKSB8fCBudWxsXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHNlY29uZHNTdHJpbmdUb01pbGxpc2Vjb25kcyhzZWNvbmRzKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHNlY29uZHMpICogMTAwMDtcclxufVxyXG5mdW5jdGlvbiBfcGFyc2VUb2tlbih0b2tlbikge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgW2FsZ29yaXRobSwgcGF5bG9hZCwgc2lnbmF0dXJlXSA9IHRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICBpZiAoYWxnb3JpdGhtID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICBwYXlsb2FkID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICBzaWduYXR1cmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIF9sb2dFcnJvcignSldUIG1hbGZvcm1lZCwgY29udGFpbmVkIGZld2VyIHRoYW4gMyBzZWN0aW9ucycpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gYmFzZTY0RGVjb2RlKHBheWxvYWQpO1xyXG4gICAgICAgIGlmICghZGVjb2RlZCkge1xyXG4gICAgICAgICAgICBfbG9nRXJyb3IoJ0ZhaWxlZCB0byBkZWNvZGUgYmFzZTY0IEpXVCBwYXlsb2FkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVkKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgX2xvZ0Vycm9yKCdDYXVnaHQgZXJyb3IgcGFyc2luZyBKV1QgcGF5bG9hZCBhcyBKU09OJywgKF9hID0gZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0IGV4cGlyZXNJbiBUVEwgZnJvbSBhIHRva2VuIGJ5IHN1YnRyYWN0aW5nIHRoZSBleHBpcmF0aW9uIGZyb20gdGhlIGlzc3VhbmNlLlxyXG4gKi9cclxuZnVuY3Rpb24gX3Rva2VuRXhwaXJlc0luKHRva2VuKSB7XHJcbiAgICBjb25zdCBwYXJzZWRUb2tlbiA9IF9wYXJzZVRva2VuKHRva2VuKTtcclxuICAgIF9hc3NlcnQocGFyc2VkVG9rZW4sIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICBfYXNzZXJ0KHR5cGVvZiBwYXJzZWRUb2tlbi5leHAgIT09ICd1bmRlZmluZWQnLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgX2Fzc2VydCh0eXBlb2YgcGFyc2VkVG9rZW4uaWF0ICE9PSAndW5kZWZpbmVkJywgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgIHJldHVybiBOdW1iZXIocGFyc2VkVG9rZW4uZXhwKSAtIE51bWJlcihwYXJzZWRUb2tlbi5pYXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIF9sb2dvdXRJZkludmFsaWRhdGVkKHVzZXIsIHByb21pc2UsIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlKSB7XHJcbiAgICBpZiAoYnlwYXNzQXV0aFN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9taXNlO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgJiYgaXNVc2VySW52YWxpZGF0ZWQoZSkpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXIuYXV0aC5jdXJyZW50VXNlciA9PT0gdXNlcikge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdXNlci5hdXRoLnNpZ25PdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzVXNlckludmFsaWRhdGVkKHsgY29kZSB9KSB7XHJcbiAgICByZXR1cm4gKGNvZGUgPT09IGBhdXRoLyR7XCJ1c2VyLWRpc2FibGVkXCIgLyogVVNFUl9ESVNBQkxFRCAqL31gIHx8XHJcbiAgICAgICAgY29kZSA9PT0gYGF1dGgvJHtcInVzZXItdG9rZW4tZXhwaXJlZFwiIC8qIFRPS0VOX0VYUElSRUQgKi99YCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgUHJvYWN0aXZlUmVmcmVzaCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VyKSB7XHJcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcclxuICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXHJcbiAgICAgICAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSB3aGF0IHRoZSB2YWx1ZSBpcyBidXQgVFMgd29uJ3QgYWNjZXB0IHVua25vd24gYW5kXHJcbiAgICAgICAgLy8gd2UgY2FuJ3QgY2FzdCBwcm9wZXJseSBpbiBib3RoIGVudmlyb25tZW50cy5cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHRoaXMudGltZXJJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lcnJvckJhY2tvZmYgPSAzMDAwMCAvKiBSRVRSWV9CQUNLT0ZGX01JTiAqLztcclxuICAgIH1cclxuICAgIF9zdGFydCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xyXG4gICAgfVxyXG4gICAgX3N0b3AoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZXJJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRJbnRlcnZhbCh3YXNFcnJvcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAod2FzRXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLmVycm9yQmFja29mZjtcclxuICAgICAgICAgICAgdGhpcy5lcnJvckJhY2tvZmYgPSBNYXRoLm1pbih0aGlzLmVycm9yQmFja29mZiAqIDIsIDk2MDAwMCAvKiBSRVRSWV9CQUNLT0ZGX01BWCAqLyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnRlcnZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBlcnJvciBiYWNrb2ZmXHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JCYWNrb2ZmID0gMzAwMDAgLyogUkVUUllfQkFDS09GRl9NSU4gKi87XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cFRpbWUgPSAoX2EgPSB0aGlzLnVzZXIuc3RzVG9rZW5NYW5hZ2VyLmV4cGlyYXRpb25UaW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IGV4cFRpbWUgLSBEYXRlLm5vdygpIC0gMzAwMDAwIC8qIE9GRlNFVCAqLztcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGludGVydmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzY2hlZHVsZSh3YXNFcnJvciA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICAvLyBKdXN0IGluIGNhc2UuLi5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZ2V0SW50ZXJ2YWwod2FzRXJyb3IpO1xyXG4gICAgICAgIHRoaXMudGltZXJJZCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLml0ZXJhdGlvbigpO1xyXG4gICAgICAgIH0sIGludGVydmFsKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGl0ZXJhdGlvbigpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy51c2VyLmdldElkVG9rZW4odHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgcmV0cnkgb24gbmV0d29yayBlcnJvcnNcclxuICAgICAgICAgICAgaWYgKCgoX2EgPSBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZSkgPT09XHJcbiAgICAgICAgICAgICAgICBgYXV0aC8ke1wibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiIC8qIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQgKi99YCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgvKiB3YXNFcnJvciAqLyB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBVc2VyTWV0YWRhdGEge1xyXG4gICAgY29uc3RydWN0b3IoY3JlYXRlZEF0LCBsYXN0TG9naW5BdCkge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlZEF0ID0gY3JlYXRlZEF0O1xyXG4gICAgICAgIHRoaXMubGFzdExvZ2luQXQgPSBsYXN0TG9naW5BdDtcclxuICAgICAgICB0aGlzLl9pbml0aWFsaXplVGltZSgpO1xyXG4gICAgfVxyXG4gICAgX2luaXRpYWxpemVUaW1lKCkge1xyXG4gICAgICAgIHRoaXMubGFzdFNpZ25JblRpbWUgPSB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcodGhpcy5sYXN0TG9naW5BdCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblRpbWUgPSB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcodGhpcy5jcmVhdGVkQXQpO1xyXG4gICAgfVxyXG4gICAgX2NvcHkobWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZWRBdCA9IG1ldGFkYXRhLmNyZWF0ZWRBdDtcclxuICAgICAgICB0aGlzLmxhc3RMb2dpbkF0ID0gbWV0YWRhdGEubGFzdExvZ2luQXQ7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVRpbWUoKTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IHRoaXMuY3JlYXRlZEF0LFxyXG4gICAgICAgICAgICBsYXN0TG9naW5BdDogdGhpcy5sYXN0TG9naW5BdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3JlbG9hZFdpdGhvdXRTYXZpbmcodXNlcikge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgYXV0aCA9IHVzZXIuYXV0aDtcclxuICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodXNlciwgZ2V0QWNjb3VudEluZm8oYXV0aCwgeyBpZFRva2VuIH0pKTtcclxuICAgIF9hc3NlcnQocmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnVzZXJzLmxlbmd0aCwgYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgIGNvbnN0IGNvcmVBY2NvdW50ID0gcmVzcG9uc2UudXNlcnNbMF07XHJcbiAgICB1c2VyLl9ub3RpZnlSZWxvYWRMaXN0ZW5lcihjb3JlQWNjb3VudCk7XHJcbiAgICBjb25zdCBuZXdQcm92aWRlckRhdGEgPSAoKF9hID0gY29yZUFjY291bnQucHJvdmlkZXJVc2VySW5mbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aClcclxuICAgICAgICA/IGV4dHJhY3RQcm92aWRlckRhdGEoY29yZUFjY291bnQucHJvdmlkZXJVc2VySW5mbylcclxuICAgICAgICA6IFtdO1xyXG4gICAgY29uc3QgcHJvdmlkZXJEYXRhID0gbWVyZ2VQcm92aWRlckRhdGEodXNlci5wcm92aWRlckRhdGEsIG5ld1Byb3ZpZGVyRGF0YSk7XHJcbiAgICAvLyBQcmVzZXJ2ZXMgdGhlIG5vbi1ub255bW91cyBzdGF0dXMgb2YgdGhlIHN0b3JlZCB1c2VyLCBldmVuIGlmIG5vIG1vcmVcclxuICAgIC8vIGNyZWRlbnRpYWxzIChmZWRlcmF0ZWQgb3IgZW1haWwvcGFzc3dvcmQpIGFyZSBsaW5rZWQgdG8gdGhlIHVzZXIuIElmXHJcbiAgICAvLyB0aGUgdXNlciB3YXMgcHJldmlvdXNseSBhbm9ueW1vdXMsIHRoZW4gdXNlIHByb3ZpZGVyIGRhdGEgdG8gdXBkYXRlLlxyXG4gICAgLy8gT24gdGhlIG90aGVyIGhhbmQsIGlmIGl0IHdhcyBub3QgYW5vbnltb3VzIGJlZm9yZSwgaXQgc2hvdWxkIG5ldmVyIGJlXHJcbiAgICAvLyBjb25zaWRlcmVkIGFub255bW91cyBub3cuXHJcbiAgICBjb25zdCBvbGRJc0Fub255bW91cyA9IHVzZXIuaXNBbm9ueW1vdXM7XHJcbiAgICBjb25zdCBuZXdJc0Fub255bW91cyA9ICEodXNlci5lbWFpbCAmJiBjb3JlQWNjb3VudC5wYXNzd29yZEhhc2gpICYmICEocHJvdmlkZXJEYXRhID09PSBudWxsIHx8IHByb3ZpZGVyRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvdmlkZXJEYXRhLmxlbmd0aCk7XHJcbiAgICBjb25zdCBpc0Fub255bW91cyA9ICFvbGRJc0Fub255bW91cyA/IGZhbHNlIDogbmV3SXNBbm9ueW1vdXM7XHJcbiAgICBjb25zdCB1cGRhdGVzID0ge1xyXG4gICAgICAgIHVpZDogY29yZUFjY291bnQubG9jYWxJZCxcclxuICAgICAgICBkaXNwbGF5TmFtZTogY29yZUFjY291bnQuZGlzcGxheU5hbWUgfHwgbnVsbCxcclxuICAgICAgICBwaG90b1VSTDogY29yZUFjY291bnQucGhvdG9VcmwgfHwgbnVsbCxcclxuICAgICAgICBlbWFpbDogY29yZUFjY291bnQuZW1haWwgfHwgbnVsbCxcclxuICAgICAgICBlbWFpbFZlcmlmaWVkOiBjb3JlQWNjb3VudC5lbWFpbFZlcmlmaWVkIHx8IGZhbHNlLFxyXG4gICAgICAgIHBob25lTnVtYmVyOiBjb3JlQWNjb3VudC5waG9uZU51bWJlciB8fCBudWxsLFxyXG4gICAgICAgIHRlbmFudElkOiBjb3JlQWNjb3VudC50ZW5hbnRJZCB8fCBudWxsLFxyXG4gICAgICAgIHByb3ZpZGVyRGF0YSxcclxuICAgICAgICBtZXRhZGF0YTogbmV3IFVzZXJNZXRhZGF0YShjb3JlQWNjb3VudC5jcmVhdGVkQXQsIGNvcmVBY2NvdW50Lmxhc3RMb2dpbkF0KSxcclxuICAgICAgICBpc0Fub255bW91c1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5hc3NpZ24odXNlciwgdXBkYXRlcyk7XHJcbn1cclxuLyoqXHJcbiAqIFJlbG9hZHMgdXNlciBhY2NvdW50IGRhdGEsIGlmIHNpZ25lZCBpbi5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVsb2FkKHVzZXIpIHtcclxuICAgIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKTtcclxuICAgIGF3YWl0IF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXJJbnRlcm5hbCk7XHJcbiAgICAvLyBFdmVuIHRob3VnaCB0aGUgY3VycmVudCB1c2VyIGhhc24ndCBjaGFuZ2VkLCB1cGRhdGVcclxuICAgIC8vIGN1cnJlbnQgdXNlciB3aWxsIHRyaWdnZXIgYSBwZXJzaXN0ZW5jZSB1cGRhdGUgdy8gdGhlXHJcbiAgICAvLyBuZXcgaW5mby5cclxuICAgIGF3YWl0IHVzZXJJbnRlcm5hbC5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh1c2VySW50ZXJuYWwpO1xyXG4gICAgdXNlckludGVybmFsLmF1dGguX25vdGlmeUxpc3RlbmVyc0lmQ3VycmVudCh1c2VySW50ZXJuYWwpO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUHJvdmlkZXJEYXRhKG9yaWdpbmFsLCBuZXdEYXRhKSB7XHJcbiAgICBjb25zdCBkZWR1cGVkID0gb3JpZ2luYWwuZmlsdGVyKG8gPT4gIW5ld0RhdGEuc29tZShuID0+IG4ucHJvdmlkZXJJZCA9PT0gby5wcm92aWRlcklkKSk7XHJcbiAgICByZXR1cm4gWy4uLmRlZHVwZWQsIC4uLm5ld0RhdGFdO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RQcm92aWRlckRhdGEocHJvdmlkZXJzKSB7XHJcbiAgICByZXR1cm4gcHJvdmlkZXJzLm1hcCgoX2EpID0+IHtcclxuICAgICAgICB2YXIgeyBwcm92aWRlcklkIH0gPSBfYSwgcHJvdmlkZXIgPSBfX3Jlc3QoX2EsIFtcInByb3ZpZGVySWRcIl0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQsXHJcbiAgICAgICAgICAgIHVpZDogcHJvdmlkZXIucmF3SWQgfHwgJycsXHJcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwcm92aWRlci5kaXNwbGF5TmFtZSB8fCBudWxsLFxyXG4gICAgICAgICAgICBlbWFpbDogcHJvdmlkZXIuZW1haWwgfHwgbnVsbCxcclxuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHByb3ZpZGVyLnBob25lTnVtYmVyIHx8IG51bGwsXHJcbiAgICAgICAgICAgIHBob3RvVVJMOiBwcm92aWRlci5waG90b1VybCB8fCBudWxsXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RTdHNUb2tlbihhdXRoLCByZWZyZXNoVG9rZW4pIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX3BlcmZvcm1GZXRjaFdpdGhFcnJvckhhbmRsaW5nKGF1dGgsIHt9LCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYm9keSA9IHF1ZXJ5c3RyaW5nKHtcclxuICAgICAgICAgICAgJ2dyYW50X3R5cGUnOiAncmVmcmVzaF90b2tlbicsXHJcbiAgICAgICAgICAgICdyZWZyZXNoX3Rva2VuJzogcmVmcmVzaFRva2VuXHJcbiAgICAgICAgfSkuc2xpY2UoMSk7XHJcbiAgICAgICAgY29uc3QgeyB0b2tlbkFwaUhvc3QsIGFwaUtleSB9ID0gYXV0aC5jb25maWc7XHJcbiAgICAgICAgY29uc3QgdXJsID0gX2dldEZpbmFsVGFyZ2V0KGF1dGgsIHRva2VuQXBpSG9zdCwgXCIvdjEvdG9rZW5cIiAvKiBUT0tFTiAqLywgYGtleT0ke2FwaUtleX1gKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgYXV0aC5fZ2V0QWRkaXRpb25hbEhlYWRlcnMoKTtcclxuICAgICAgICBoZWFkZXJzW1wiQ29udGVudC1UeXBlXCIgLyogQ09OVEVOVF9UWVBFICovXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xyXG4gICAgICAgIHJldHVybiBGZXRjaFByb3ZpZGVyLmZldGNoKCkodXJsLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcclxuICAgICAgICAgICAgaGVhZGVycyxcclxuICAgICAgICAgICAgYm9keVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyBUaGUgcmVzcG9uc2UgY29tZXMgYmFjayBpbiBzbmFrZV9jYXNlLiBDb252ZXJ0IHRvIGNhbWVsOlxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhY2Nlc3NUb2tlbjogcmVzcG9uc2UuYWNjZXNzX3Rva2VuLFxyXG4gICAgICAgIGV4cGlyZXNJbjogcmVzcG9uc2UuZXhwaXJlc19pbixcclxuICAgICAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlLnJlZnJlc2hfdG9rZW5cclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFdlIG5lZWQgdG8gbWFyayB0aGlzIGNsYXNzIGFzIGludGVybmFsIGV4cGxpY2l0bHkgdG8gZXhjbHVkZSBpdCBpbiB0aGUgcHVibGljIHR5cGluZ3MsIGJlY2F1c2VcclxuICogaXQgcmVmZXJlbmNlcyBBdXRoSW50ZXJuYWwgd2hpY2ggaGFzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSB3aXRoIFVzZXJJbnRlcm5hbC5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jbGFzcyBTdHNUb2tlbk1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXhwaXJhdGlvblRpbWUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRXhwaXJlZCgpIHtcclxuICAgICAgICByZXR1cm4gKCF0aGlzLmV4cGlyYXRpb25UaW1lIHx8XHJcbiAgICAgICAgICAgIERhdGUubm93KCkgPiB0aGlzLmV4cGlyYXRpb25UaW1lIC0gMzAwMDAgLyogVE9LRU5fUkVGUkVTSCAqLyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVGcm9tU2VydmVyUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgICAgICBfYXNzZXJ0KHJlc3BvbnNlLmlkVG9rZW4sIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgX2Fzc2VydCh0eXBlb2YgcmVzcG9uc2UuaWRUb2tlbiAhPT0gJ3VuZGVmaW5lZCcsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgX2Fzc2VydCh0eXBlb2YgcmVzcG9uc2UucmVmcmVzaFRva2VuICE9PSAndW5kZWZpbmVkJywgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICBjb25zdCBleHBpcmVzSW4gPSAnZXhwaXJlc0luJyBpbiByZXNwb25zZSAmJiB0eXBlb2YgcmVzcG9uc2UuZXhwaXJlc0luICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICA/IE51bWJlcihyZXNwb25zZS5leHBpcmVzSW4pXHJcbiAgICAgICAgICAgIDogX3Rva2VuRXhwaXJlc0luKHJlc3BvbnNlLmlkVG9rZW4pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlVG9rZW5zQW5kRXhwaXJhdGlvbihyZXNwb25zZS5pZFRva2VuLCByZXNwb25zZS5yZWZyZXNoVG9rZW4sIGV4cGlyZXNJbik7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRUb2tlbihhdXRoLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSkge1xyXG4gICAgICAgIF9hc3NlcnQoIXRoaXMuYWNjZXNzVG9rZW4gfHwgdGhpcy5yZWZyZXNoVG9rZW4sIGF1dGgsIFwidXNlci10b2tlbi1leHBpcmVkXCIgLyogVE9LRU5fRVhQSVJFRCAqLyk7XHJcbiAgICAgICAgaWYgKCFmb3JjZVJlZnJlc2ggJiYgdGhpcy5hY2Nlc3NUb2tlbiAmJiAhdGhpcy5pc0V4cGlyZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzVG9rZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hUb2tlbikge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2goYXV0aCwgdGhpcy5yZWZyZXNoVG9rZW4pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjbGVhclJlZnJlc2hUb2tlbigpIHtcclxuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBhc3luYyByZWZyZXNoKGF1dGgsIG9sZFRva2VuKSB7XHJcbiAgICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuLCBleHBpcmVzSW4gfSA9IGF3YWl0IHJlcXVlc3RTdHNUb2tlbihhdXRoLCBvbGRUb2tlbik7XHJcbiAgICAgICAgdGhpcy51cGRhdGVUb2tlbnNBbmRFeHBpcmF0aW9uKGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4sIE51bWJlcihleHBpcmVzSW4pKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVRva2Vuc0FuZEV4cGlyYXRpb24oYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiwgZXhwaXJlc0luU2VjKSB7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSByZWZyZXNoVG9rZW4gfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4gfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmV4cGlyYXRpb25UaW1lID0gRGF0ZS5ub3coKSArIGV4cGlyZXNJblNlYyAqIDEwMDA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZnJvbUpTT04oYXBwTmFtZSwgb2JqZWN0KSB7XHJcbiAgICAgICAgY29uc3QgeyByZWZyZXNoVG9rZW4sIGFjY2Vzc1Rva2VuLCBleHBpcmF0aW9uVGltZSB9ID0gb2JqZWN0O1xyXG4gICAgICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgU3RzVG9rZW5NYW5hZ2VyKCk7XHJcbiAgICAgICAgaWYgKHJlZnJlc2hUb2tlbikge1xyXG4gICAgICAgICAgICBfYXNzZXJ0KHR5cGVvZiByZWZyZXNoVG9rZW4gPT09ICdzdHJpbmcnLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1hbmFnZXIucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICAgICAgX2Fzc2VydCh0eXBlb2YgYWNjZXNzVG9rZW4gPT09ICdzdHJpbmcnLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1hbmFnZXIuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cGlyYXRpb25UaW1lKSB7XHJcbiAgICAgICAgICAgIF9hc3NlcnQodHlwZW9mIGV4cGlyYXRpb25UaW1lID09PSAnbnVtYmVyJywgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovLCB7XHJcbiAgICAgICAgICAgICAgICBhcHBOYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtYW5hZ2VyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYW5hZ2VyO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogdGhpcy5yZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLmFjY2Vzc1Rva2VuLFxyXG4gICAgICAgICAgICBleHBpcmF0aW9uVGltZTogdGhpcy5leHBpcmF0aW9uVGltZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBfYXNzaWduKHN0c1Rva2VuTWFuYWdlcikge1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBzdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW47XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBzdHNUb2tlbk1hbmFnZXIucmVmcmVzaFRva2VuO1xyXG4gICAgICAgIHRoaXMuZXhwaXJhdGlvblRpbWUgPSBzdHNUb2tlbk1hbmFnZXIuZXhwaXJhdGlvblRpbWU7XHJcbiAgICB9XHJcbiAgICBfY2xvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFN0c1Rva2VuTWFuYWdlcigpLCB0aGlzLnRvSlNPTigpKTtcclxuICAgIH1cclxuICAgIF9wZXJmb3JtUmVmcmVzaCgpIHtcclxuICAgICAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChhc3NlcnRpb24sIGFwcE5hbWUpIHtcclxuICAgIF9hc3NlcnQodHlwZW9mIGFzc2VydGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFzc2VydGlvbiA9PT0gJ3VuZGVmaW5lZCcsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLywgeyBhcHBOYW1lIH0pO1xyXG59XHJcbmNsYXNzIFVzZXJJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKF9hKSB7XHJcbiAgICAgICAgdmFyIHsgdWlkLCBhdXRoLCBzdHNUb2tlbk1hbmFnZXIgfSA9IF9hLCBvcHQgPSBfX3Jlc3QoX2EsIFtcInVpZFwiLCBcImF1dGhcIiwgXCJzdHNUb2tlbk1hbmFnZXJcIl0pO1xyXG4gICAgICAgIC8vIEZvciB0aGUgdXNlciBvYmplY3QsIHByb3ZpZGVyIGlzIGFsd2F5cyBGaXJlYmFzZS5cclxuICAgICAgICB0aGlzLnByb3ZpZGVySWQgPSBcImZpcmViYXNlXCIgLyogRklSRUJBU0UgKi87XHJcbiAgICAgICAgdGhpcy5wcm9hY3RpdmVSZWZyZXNoID0gbmV3IFByb2FjdGl2ZVJlZnJlc2godGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZWxvYWRVc2VySW5mbyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZWxvYWRMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51aWQgPSB1aWQ7XHJcbiAgICAgICAgdGhpcy5hdXRoID0gYXV0aDtcclxuICAgICAgICB0aGlzLnN0c1Rva2VuTWFuYWdlciA9IHN0c1Rva2VuTWFuYWdlcjtcclxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSBvcHQuZGlzcGxheU5hbWUgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmVtYWlsID0gb3B0LmVtYWlsIHx8IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbWFpbFZlcmlmaWVkID0gb3B0LmVtYWlsVmVyaWZpZWQgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5waG9uZU51bWJlciA9IG9wdC5waG9uZU51bWJlciB8fCBudWxsO1xyXG4gICAgICAgIHRoaXMucGhvdG9VUkwgPSBvcHQucGhvdG9VUkwgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmlzQW5vbnltb3VzID0gb3B0LmlzQW5vbnltb3VzIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGVuYW50SWQgPSBvcHQudGVuYW50SWQgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyRGF0YSA9IG9wdC5wcm92aWRlckRhdGEgPyBbLi4ub3B0LnByb3ZpZGVyRGF0YV0gOiBbXTtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbmV3IFVzZXJNZXRhZGF0YShvcHQuY3JlYXRlZEF0IHx8IHVuZGVmaW5lZCwgb3B0Lmxhc3RMb2dpbkF0IHx8IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRJZFRva2VuKGZvcmNlUmVmcmVzaCkge1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodGhpcywgdGhpcy5zdHNUb2tlbk1hbmFnZXIuZ2V0VG9rZW4odGhpcy5hdXRoLCBmb3JjZVJlZnJlc2gpKTtcclxuICAgICAgICBfYXNzZXJ0KGFjY2Vzc1Rva2VuLCB0aGlzLmF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4gIT09IGFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5hdXRoLl9ub3RpZnlMaXN0ZW5lcnNJZkN1cnJlbnQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbjtcclxuICAgIH1cclxuICAgIGdldElkVG9rZW5SZXN1bHQoZm9yY2VSZWZyZXNoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldElkVG9rZW5SZXN1bHQodGhpcywgZm9yY2VSZWZyZXNoKTtcclxuICAgIH1cclxuICAgIHJlbG9hZCgpIHtcclxuICAgICAgICByZXR1cm4gcmVsb2FkKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgX2Fzc2lnbih1c2VyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IHVzZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfYXNzZXJ0KHRoaXMudWlkID09PSB1c2VyLnVpZCwgdGhpcy5hdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSB1c2VyLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgIHRoaXMucGhvdG9VUkwgPSB1c2VyLnBob3RvVVJMO1xyXG4gICAgICAgIHRoaXMuZW1haWwgPSB1c2VyLmVtYWlsO1xyXG4gICAgICAgIHRoaXMuZW1haWxWZXJpZmllZCA9IHVzZXIuZW1haWxWZXJpZmllZDtcclxuICAgICAgICB0aGlzLnBob25lTnVtYmVyID0gdXNlci5waG9uZU51bWJlcjtcclxuICAgICAgICB0aGlzLmlzQW5vbnltb3VzID0gdXNlci5pc0Fub255bW91cztcclxuICAgICAgICB0aGlzLnRlbmFudElkID0gdXNlci50ZW5hbnRJZDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyRGF0YSA9IHVzZXIucHJvdmlkZXJEYXRhLm1hcCh1c2VySW5mbyA9PiAoT2JqZWN0LmFzc2lnbih7fSwgdXNlckluZm8pKSk7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5fY29weSh1c2VyLm1ldGFkYXRhKTtcclxuICAgICAgICB0aGlzLnN0c1Rva2VuTWFuYWdlci5fYXNzaWduKHVzZXIuc3RzVG9rZW5NYW5hZ2VyKTtcclxuICAgIH1cclxuICAgIF9jbG9uZShhdXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VySW1wbChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMpLCB7IGF1dGgsIHN0c1Rva2VuTWFuYWdlcjogdGhpcy5zdHNUb2tlbk1hbmFnZXIuX2Nsb25lKCkgfSkpO1xyXG4gICAgfVxyXG4gICAgX29uUmVsb2FkKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSBvbmUgbGlzdGVuZXIsIGFuZCB0aGF0IGlzIGEgc2luZ2xlIGluc3RhbmNlIG9mIE11bHRpRmFjdG9yVXNlclxyXG4gICAgICAgIF9hc3NlcnQoIXRoaXMucmVsb2FkTGlzdGVuZXIsIHRoaXMuYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICB0aGlzLnJlbG9hZExpc3RlbmVyID0gY2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKHRoaXMucmVsb2FkVXNlckluZm8pIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5UmVsb2FkTGlzdGVuZXIodGhpcy5yZWxvYWRVc2VySW5mbyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkVXNlckluZm8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9ub3RpZnlSZWxvYWRMaXN0ZW5lcih1c2VySW5mbykge1xyXG4gICAgICAgIGlmICh0aGlzLnJlbG9hZExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkTGlzdGVuZXIodXNlckluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgbm8gbGlzdGVuZXIgaXMgc3Vic2NyaWJlZCB5ZXQsIHNhdmUgdGhlIHJlc3VsdCBzbyBpdCdzIGF2YWlsYWJsZSB3aGVuIHRoZXkgZG8gc3Vic2NyaWJlXHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkVXNlckluZm8gPSB1c2VySW5mbztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfc3RhcnRQcm9hY3RpdmVSZWZyZXNoKCkge1xyXG4gICAgICAgIHRoaXMucHJvYWN0aXZlUmVmcmVzaC5fc3RhcnQoKTtcclxuICAgIH1cclxuICAgIF9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpIHtcclxuICAgICAgICB0aGlzLnByb2FjdGl2ZVJlZnJlc2guX3N0b3AoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIF91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShyZXNwb25zZSwgcmVsb2FkID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgdG9rZW5zUmVmcmVzaGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmlkVG9rZW4gJiZcclxuICAgICAgICAgICAgcmVzcG9uc2UuaWRUb2tlbiAhPT0gdGhpcy5zdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zdHNUb2tlbk1hbmFnZXIudXBkYXRlRnJvbVNlcnZlclJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgdG9rZW5zUmVmcmVzaGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbG9hZCkge1xyXG4gICAgICAgICAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh0aGlzKTtcclxuICAgICAgICBpZiAodG9rZW5zUmVmcmVzaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aC5fbm90aWZ5TGlzdGVuZXJzSWZDdXJyZW50KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIGRlbGV0ZSgpIHtcclxuICAgICAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgdGhpcy5nZXRJZFRva2VuKCk7XHJcbiAgICAgICAgYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodGhpcywgZGVsZXRlQWNjb3VudCh0aGlzLmF1dGgsIHsgaWRUb2tlbiB9KSk7XHJcbiAgICAgICAgdGhpcy5zdHNUb2tlbk1hbmFnZXIuY2xlYXJSZWZyZXNoVG9rZW4oKTtcclxuICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmUgaWYgY2FuY2VsbGFibGUtcHJvbWlzZXMgYXJlIG5lY2Vzc2FyeSB0byB1c2UgaW4gdGhpcyBjbGFzcyBzbyB0aGF0IGRlbGV0ZSgpXHJcbiAgICAgICAgLy8gICAgICAgY2FuY2VscyBwZW5kaW5nIGFjdGlvbnMuLi5cclxuICAgICAgICByZXR1cm4gdGhpcy5hdXRoLnNpZ25PdXQoKTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgdWlkOiB0aGlzLnVpZCwgZW1haWw6IHRoaXMuZW1haWwgfHwgdW5kZWZpbmVkLCBlbWFpbFZlcmlmaWVkOiB0aGlzLmVtYWlsVmVyaWZpZWQsIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lIHx8IHVuZGVmaW5lZCwgaXNBbm9ueW1vdXM6IHRoaXMuaXNBbm9ueW1vdXMsIHBob3RvVVJMOiB0aGlzLnBob3RvVVJMIHx8IHVuZGVmaW5lZCwgcGhvbmVOdW1iZXI6IHRoaXMucGhvbmVOdW1iZXIgfHwgdW5kZWZpbmVkLCB0ZW5hbnRJZDogdGhpcy50ZW5hbnRJZCB8fCB1bmRlZmluZWQsIHByb3ZpZGVyRGF0YTogdGhpcy5wcm92aWRlckRhdGEubWFwKHVzZXJJbmZvID0+IChPYmplY3QuYXNzaWduKHt9LCB1c2VySW5mbykpKSwgc3RzVG9rZW5NYW5hZ2VyOiB0aGlzLnN0c1Rva2VuTWFuYWdlci50b0pTT04oKSwgXHJcbiAgICAgICAgICAgIC8vIFJlZGlyZWN0IGV2ZW50IElEIG11c3QgYmUgbWFpbnRhaW5lZCBpbiBjYXNlIHRoZXJlIGlzIGEgcGVuZGluZ1xyXG4gICAgICAgICAgICAvLyByZWRpcmVjdCBldmVudC5cclxuICAgICAgICAgICAgX3JlZGlyZWN0RXZlbnRJZDogdGhpcy5fcmVkaXJlY3RFdmVudElkIH0sIHRoaXMubWV0YWRhdGEudG9KU09OKCkpLCB7IFxyXG4gICAgICAgICAgICAvLyBSZXF1aXJlZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBsZWdhY3kgU0RLIChnby9maXJlYmFzZS1hdXRoLXNkay1wZXJzaXN0ZW5jZS1wYXJzaW5nKTpcclxuICAgICAgICAgICAgYXBpS2V5OiB0aGlzLmF1dGguY29uZmlnLmFwaUtleSwgYXBwTmFtZTogdGhpcy5hdXRoLm5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVmcmVzaFRva2VuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0c1Rva2VuTWFuYWdlci5yZWZyZXNoVG9rZW4gfHwgJyc7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2Zyb21KU09OKGF1dGgsIG9iamVjdCkge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSAoX2EgPSBvYmplY3QuZGlzcGxheU5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBlbWFpbCA9IChfYiA9IG9iamVjdC5lbWFpbCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IHBob25lTnVtYmVyID0gKF9jID0gb2JqZWN0LnBob25lTnVtYmVyKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgcGhvdG9VUkwgPSAoX2QgPSBvYmplY3QucGhvdG9VUkwpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IChfZSA9IG9iamVjdC50ZW5hbnRJZCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IF9yZWRpcmVjdEV2ZW50SWQgPSAoX2YgPSBvYmplY3QuX3JlZGlyZWN0RXZlbnRJZCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IChfZyA9IG9iamVjdC5jcmVhdGVkQXQpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBsYXN0TG9naW5BdCA9IChfaCA9IG9iamVjdC5sYXN0TG9naW5BdCkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IHsgdWlkLCBlbWFpbFZlcmlmaWVkLCBpc0Fub255bW91cywgcHJvdmlkZXJEYXRhLCBzdHNUb2tlbk1hbmFnZXI6IHBsYWluT2JqZWN0VG9rZW5NYW5hZ2VyIH0gPSBvYmplY3Q7XHJcbiAgICAgICAgX2Fzc2VydCh1aWQgJiYgcGxhaW5PYmplY3RUb2tlbk1hbmFnZXIsIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgY29uc3Qgc3RzVG9rZW5NYW5hZ2VyID0gU3RzVG9rZW5NYW5hZ2VyLmZyb21KU09OKHRoaXMubmFtZSwgcGxhaW5PYmplY3RUb2tlbk1hbmFnZXIpO1xyXG4gICAgICAgIF9hc3NlcnQodHlwZW9mIHVpZCA9PT0gJ3N0cmluZycsIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoZGlzcGxheU5hbWUsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoZW1haWwsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgX2Fzc2VydCh0eXBlb2YgZW1haWxWZXJpZmllZCA9PT0gJ2Jvb2xlYW4nLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgIF9hc3NlcnQodHlwZW9mIGlzQW5vbnltb3VzID09PSAnYm9vbGVhbicsIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQocGhvbmVOdW1iZXIsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQocGhvdG9VUkwsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQodGVuYW50SWQsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoX3JlZGlyZWN0RXZlbnRJZCwgYXV0aC5uYW1lKTtcclxuICAgICAgICBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChjcmVhdGVkQXQsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQobGFzdExvZ2luQXQsIGF1dGgubmFtZSk7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VySW1wbCh7XHJcbiAgICAgICAgICAgIHVpZCxcclxuICAgICAgICAgICAgYXV0aCxcclxuICAgICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQsXHJcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICBpc0Fub255bW91cyxcclxuICAgICAgICAgICAgcGhvdG9VUkwsXHJcbiAgICAgICAgICAgIHBob25lTnVtYmVyLFxyXG4gICAgICAgICAgICB0ZW5hbnRJZCxcclxuICAgICAgICAgICAgc3RzVG9rZW5NYW5hZ2VyLFxyXG4gICAgICAgICAgICBjcmVhdGVkQXQsXHJcbiAgICAgICAgICAgIGxhc3RMb2dpbkF0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyRGF0YSAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVyRGF0YSkpIHtcclxuICAgICAgICAgICAgdXNlci5wcm92aWRlckRhdGEgPSBwcm92aWRlckRhdGEubWFwKHVzZXJJbmZvID0+IChPYmplY3QuYXNzaWduKHt9LCB1c2VySW5mbykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9yZWRpcmVjdEV2ZW50SWQpIHtcclxuICAgICAgICAgICAgdXNlci5fcmVkaXJlY3RFdmVudElkID0gX3JlZGlyZWN0RXZlbnRJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgYSBVc2VyIGZyb20gYW4gaWRUb2tlbiBzZXJ2ZXIgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBhdXRoXHJcbiAgICAgKiBAcGFyYW0gaWRUb2tlblJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3luYyBfZnJvbUlkVG9rZW5SZXNwb25zZShhdXRoLCBpZFRva2VuUmVzcG9uc2UsIGlzQW5vbnltb3VzID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBzdHNUb2tlbk1hbmFnZXIgPSBuZXcgU3RzVG9rZW5NYW5hZ2VyKCk7XHJcbiAgICAgICAgc3RzVG9rZW5NYW5hZ2VyLnVwZGF0ZUZyb21TZXJ2ZXJSZXNwb25zZShpZFRva2VuUmVzcG9uc2UpO1xyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIEZpcmViYXNlIEF1dGggdXNlci5cclxuICAgICAgICBjb25zdCB1c2VyID0gbmV3IFVzZXJJbXBsKHtcclxuICAgICAgICAgICAgdWlkOiBpZFRva2VuUmVzcG9uc2UubG9jYWxJZCxcclxuICAgICAgICAgICAgYXV0aCxcclxuICAgICAgICAgICAgc3RzVG9rZW5NYW5hZ2VyLFxyXG4gICAgICAgICAgICBpc0Fub255bW91c1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFVwZGF0ZXMgdGhlIHVzZXIgaW5mbyBhbmQgZGF0YSBhbmQgcmVzb2x2ZXMgd2l0aCBhIHVzZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgYXdhaXQgX3JlbG9hZFdpdGhvdXRTYXZpbmcodXNlcik7XHJcbiAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgSW5NZW1vcnlQZXJzaXN0ZW5jZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcIk5PTkVcIiAvKiBOT05FICovO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX2lzQXZhaWxhYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX3NldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9nZXQoa2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0b3JhZ2Vba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9yZW1vdmUoa2V5KSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXldO1xyXG4gICAgfVxyXG4gICAgX2FkZExpc3RlbmVyKF9rZXksIF9saXN0ZW5lcikge1xyXG4gICAgICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgaW4tbWVtb3J5IHN0b3JhZ2Ugc2luY2UgaXQgY2Fubm90IGJlIHNoYXJlZCBhY3Jvc3Mgd2luZG93cy93b3JrZXJzXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9rZXksIF9saXN0ZW5lcikge1xyXG4gICAgICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgaW4tbWVtb3J5IHN0b3JhZ2Ugc2luY2UgaXQgY2Fubm90IGJlIHNoYXJlZCBhY3Jvc3Mgd2luZG93cy93b3JrZXJzXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcbkluTWVtb3J5UGVyc2lzdGVuY2UudHlwZSA9ICdOT05FJztcclxuLyoqXHJcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBQZXJzaXN0ZW5jZX0gb2YgdHlwZSAnTk9ORScuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGluTWVtb3J5UGVyc2lzdGVuY2UgPSBJbk1lbW9yeVBlcnNpc3RlbmNlO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBfcGVyc2lzdGVuY2VLZXlOYW1lKGtleSwgYXBpS2V5LCBhcHBOYW1lKSB7XHJcbiAgICByZXR1cm4gYCR7XCJmaXJlYmFzZVwiIC8qIFBFUlNJU1RFTkNFICovfToke2tleX06JHthcGlLZXl9OiR7YXBwTmFtZX1gO1xyXG59XHJcbmNsYXNzIFBlcnNpc3RlbmNlVXNlck1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IocGVyc2lzdGVuY2UsIGF1dGgsIHVzZXJLZXkpIHtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gcGVyc2lzdGVuY2U7XHJcbiAgICAgICAgdGhpcy5hdXRoID0gYXV0aDtcclxuICAgICAgICB0aGlzLnVzZXJLZXkgPSB1c2VyS2V5O1xyXG4gICAgICAgIGNvbnN0IHsgY29uZmlnLCBuYW1lIH0gPSB0aGlzLmF1dGg7XHJcbiAgICAgICAgdGhpcy5mdWxsVXNlcktleSA9IF9wZXJzaXN0ZW5jZUtleU5hbWUodGhpcy51c2VyS2V5LCBjb25maWcuYXBpS2V5LCBuYW1lKTtcclxuICAgICAgICB0aGlzLmZ1bGxQZXJzaXN0ZW5jZUtleSA9IF9wZXJzaXN0ZW5jZUtleU5hbWUoXCJwZXJzaXN0ZW5jZVwiIC8qIFBFUlNJU1RFTkNFX1VTRVIgKi8sIGNvbmZpZy5hcGlLZXksIG5hbWUpO1xyXG4gICAgICAgIHRoaXMuYm91bmRFdmVudEhhbmRsZXIgPSBhdXRoLl9vblN0b3JhZ2VFdmVudC5iaW5kKGF1dGgpO1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UuX2FkZExpc3RlbmVyKHRoaXMuZnVsbFVzZXJLZXksIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgc2V0Q3VycmVudFVzZXIodXNlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLl9zZXQodGhpcy5mdWxsVXNlcktleSwgdXNlci50b0pTT04oKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDdXJyZW50VXNlcigpIHtcclxuICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgdGhpcy5wZXJzaXN0ZW5jZS5fZ2V0KHRoaXMuZnVsbFVzZXJLZXkpO1xyXG4gICAgICAgIHJldHVybiBibG9iID8gVXNlckltcGwuX2Zyb21KU09OKHRoaXMuYXV0aCwgYmxvYikgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQ3VycmVudFVzZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuX3JlbW92ZSh0aGlzLmZ1bGxVc2VyS2V5KTtcclxuICAgIH1cclxuICAgIHNhdmVQZXJzaXN0ZW5jZUZvclJlZGlyZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLl9zZXQodGhpcy5mdWxsUGVyc2lzdGVuY2VLZXksIHRoaXMucGVyc2lzdGVuY2UudHlwZSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZXRQZXJzaXN0ZW5jZShuZXdQZXJzaXN0ZW5jZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3RlbmNlID09PSBuZXdQZXJzaXN0ZW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50VXNlcigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlQ3VycmVudFVzZXIoKTtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gbmV3UGVyc2lzdGVuY2U7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldEN1cnJlbnRVc2VyKGN1cnJlbnRVc2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZWxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZS5fcmVtb3ZlTGlzdGVuZXIodGhpcy5mdWxsVXNlcktleSwgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlKGF1dGgsIHBlcnNpc3RlbmNlSGllcmFyY2h5LCB1c2VyS2V5ID0gXCJhdXRoVXNlclwiIC8qIEFVVEhfVVNFUiAqLykge1xyXG4gICAgICAgIGlmICghcGVyc2lzdGVuY2VIaWVyYXJjaHkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VVc2VyTWFuYWdlcihfZ2V0SW5zdGFuY2UoaW5NZW1vcnlQZXJzaXN0ZW5jZSksIGF1dGgsIHVzZXJLZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBFbGltaW5hdGUgYW55IHBlcnNpc3RlbmNlcyB0aGF0IGFyZSBub3QgYXZhaWxhYmxlXHJcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlUGVyc2lzdGVuY2VzID0gKGF3YWl0IFByb21pc2UuYWxsKHBlcnNpc3RlbmNlSGllcmFyY2h5Lm1hcChhc3luYyAocGVyc2lzdGVuY2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKGF3YWl0IHBlcnNpc3RlbmNlLl9pc0F2YWlsYWJsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGVyc2lzdGVuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9KSkpLmZpbHRlcihwZXJzaXN0ZW5jZSA9PiBwZXJzaXN0ZW5jZSk7XHJcbiAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHRoZSBmaXJzdCBwZXJzaXN0ZW5jZSBsaXN0ZWQsIG9yIGluIG1lbW9yeSBpZiBub25lIGF2YWlsYWJsZVxyXG4gICAgICAgIGxldCBzZWxlY3RlZFBlcnNpc3RlbmNlID0gYXZhaWxhYmxlUGVyc2lzdGVuY2VzWzBdIHx8XHJcbiAgICAgICAgICAgIF9nZXRJbnN0YW5jZShpbk1lbW9yeVBlcnNpc3RlbmNlKTtcclxuICAgICAgICBjb25zdCBrZXkgPSBfcGVyc2lzdGVuY2VLZXlOYW1lKHVzZXJLZXksIGF1dGguY29uZmlnLmFwaUtleSwgYXV0aC5uYW1lKTtcclxuICAgICAgICAvLyBQdWxsIG91dCB0aGUgZXhpc3RpbmcgdXNlciwgc2V0dGluZyB0aGUgY2hvc2VuIHBlcnNpc3RlbmNlIHRvIHRoYXRcclxuICAgICAgICAvLyBwZXJzaXN0ZW5jZSBpZiB0aGUgdXNlciBleGlzdHMuXHJcbiAgICAgICAgbGV0IHVzZXJUb01pZ3JhdGUgPSBudWxsO1xyXG4gICAgICAgIC8vIE5vdGUsIGhlcmUgd2UgY2hlY2sgZm9yIGEgdXNlciBpbiBfYWxsXyBwZXJzaXN0ZW5jZXMsIG5vdCBqdXN0IHRoZVxyXG4gICAgICAgIC8vIG9uZXMgZGVlbWVkIGF2YWlsYWJsZS4gSWYgd2UgY2FuIG1pZ3JhdGUgYSB1c2VyIG91dCBvZiBhIGJyb2tlblxyXG4gICAgICAgIC8vIHBlcnNpc3RlbmNlLCB3ZSB3aWxsIChidXQgb25seSBpZiB0aGF0IHBlcnNpc3RlbmNlIHN1cHBvcnRzIG1pZ3JhdGlvbikuXHJcbiAgICAgICAgZm9yIChjb25zdCBwZXJzaXN0ZW5jZSBvZiBwZXJzaXN0ZW5jZUhpZXJhcmNoeSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHBlcnNpc3RlbmNlLl9nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmIChibG9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlciA9IFVzZXJJbXBsLl9mcm9tSlNPTihhdXRoLCBibG9iKTsgLy8gdGhyb3dzIGZvciB1bnBhcnNhYmxlIGJsb2IgKHdyb25nIGZvcm1hdClcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVyc2lzdGVuY2UgIT09IHNlbGVjdGVkUGVyc2lzdGVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlclRvTWlncmF0ZSA9IHVzZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUGVyc2lzdGVuY2UgPSBwZXJzaXN0ZW5jZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB3ZSBmaW5kIHRoZSB1c2VyIGluIGEgcGVyc2lzdGVuY2UgdGhhdCBkb2VzIHN1cHBvcnQgbWlncmF0aW9uLCB1c2VcclxuICAgICAgICAvLyB0aGF0IG1pZ3JhdGlvbiBwYXRoIChvZiBvbmx5IHBlcnNpc3RlbmNlcyB0aGF0IHN1cHBvcnQgbWlncmF0aW9uKVxyXG4gICAgICAgIGNvbnN0IG1pZ3JhdGlvbkhpZXJhcmNoeSA9IGF2YWlsYWJsZVBlcnNpc3RlbmNlcy5maWx0ZXIocCA9PiBwLl9zaG91bGRBbGxvd01pZ3JhdGlvbik7XHJcbiAgICAgICAgLy8gSWYgdGhlIHBlcnNpc3RlbmNlIGRvZXMgX25vdF8gYWxsb3cgbWlncmF0aW9uLCBqdXN0IGZpbmlzaCBvZmYgaGVyZVxyXG4gICAgICAgIGlmICghc2VsZWN0ZWRQZXJzaXN0ZW5jZS5fc2hvdWxkQWxsb3dNaWdyYXRpb24gfHxcclxuICAgICAgICAgICAgIW1pZ3JhdGlvbkhpZXJhcmNoeS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVVzZXJNYW5hZ2VyKHNlbGVjdGVkUGVyc2lzdGVuY2UsIGF1dGgsIHVzZXJLZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxlY3RlZFBlcnNpc3RlbmNlID0gbWlncmF0aW9uSGllcmFyY2h5WzBdO1xyXG4gICAgICAgIGlmICh1c2VyVG9NaWdyYXRlKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgbm9ybWFsbHkgc2hvdWxkbid0IHRocm93IHNpbmNlIGNob3NlblBlcnNpc3RlbmNlLmlzQXZhaWxhYmxlKCkgaXMgdHJ1ZSwgYnV0IGlmIGl0IGRvZXNcclxuICAgICAgICAgICAgLy8gd2UnbGwganVzdCBsZXQgaXQgYnViYmxlIHRvIHN1cmZhY2UgdGhlIGVycm9yLlxyXG4gICAgICAgICAgICBhd2FpdCBzZWxlY3RlZFBlcnNpc3RlbmNlLl9zZXQoa2V5LCB1c2VyVG9NaWdyYXRlLnRvSlNPTigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBjbGVhciB0aGUga2V5IGluIG90aGVyIHBlcnNpc3RlbmNlcyBidXQgaWdub3JlIGVycm9ycy4gVGhpcyBoZWxwcyBwcmV2ZW50IGlzc3Vlc1xyXG4gICAgICAgIC8vIHN1Y2ggYXMgdXNlcnMgZ2V0dGluZyBzdHVjayB3aXRoIGEgcHJldmlvdXMgYWNjb3VudCBhZnRlciBzaWduaW5nIG91dCBhbmQgcmVmcmVzaGluZyB0aGUgdGFiLlxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHBlcnNpc3RlbmNlSGllcmFyY2h5Lm1hcChhc3luYyAocGVyc2lzdGVuY2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBlcnNpc3RlbmNlICE9PSBzZWxlY3RlZFBlcnNpc3RlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBlcnNpc3RlbmNlLl9yZW1vdmUoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVVzZXJNYW5hZ2VyKHNlbGVjdGVkUGVyc2lzdGVuY2UsIGF1dGgsIHVzZXJLZXkpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgdGhlIGJyb3dzZXIgZm9yIHRoZSBwdXJwb3NlcyBvZiByZXBvcnRpbmcgdXNhZ2UgdG8gdGhlIEFQSVxyXG4gKi9cclxuZnVuY3Rpb24gX2dldEJyb3dzZXJOYW1lKHVzZXJBZ2VudCkge1xyXG4gICAgY29uc3QgdWEgPSB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmICh1YS5pbmNsdWRlcygnb3BlcmEvJykgfHwgdWEuaW5jbHVkZXMoJ29wci8nKSB8fCB1YS5pbmNsdWRlcygnb3Bpb3MvJykpIHtcclxuICAgICAgICByZXR1cm4gXCJPcGVyYVwiIC8qIE9QRVJBICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoX2lzSUVNb2JpbGUodWEpKSB7XHJcbiAgICAgICAgLy8gV2luZG93cyBwaG9uZSBJRU1vYmlsZSBicm93c2VyLlxyXG4gICAgICAgIHJldHVybiBcIklFTW9iaWxlXCIgLyogSUVNT0JJTEUgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh1YS5pbmNsdWRlcygnbXNpZScpIHx8IHVhLmluY2x1ZGVzKCd0cmlkZW50LycpKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiSUVcIiAvKiBJRSAqLztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdlZGdlLycpKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiRWRnZVwiIC8qIEVER0UgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChfaXNGaXJlZm94KHVhKSkge1xyXG4gICAgICAgIHJldHVybiBcIkZpcmVmb3hcIiAvKiBGSVJFRk9YICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodWEuaW5jbHVkZXMoJ3NpbGsvJykpIHtcclxuICAgICAgICByZXR1cm4gXCJTaWxrXCIgLyogU0lMSyAqLztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKF9pc0JsYWNrQmVycnkodWEpKSB7XHJcbiAgICAgICAgLy8gQmxhY2tiZXJyeSBicm93c2VyLlxyXG4gICAgICAgIHJldHVybiBcIkJsYWNrYmVycnlcIiAvKiBCTEFDS0JFUlJZICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoX2lzV2ViT1ModWEpKSB7XHJcbiAgICAgICAgLy8gV2ViT1MgZGVmYXVsdCBicm93c2VyLlxyXG4gICAgICAgIHJldHVybiBcIldlYm9zXCIgLyogV0VCT1MgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChfaXNTYWZhcmkodWEpKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiU2FmYXJpXCIgLyogU0FGQVJJICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHVhLmluY2x1ZGVzKCdjaHJvbWUvJykgfHwgX2lzQ2hyb21lSU9TKHVhKSkgJiZcclxuICAgICAgICAhdWEuaW5jbHVkZXMoJ2VkZ2UvJykpIHtcclxuICAgICAgICByZXR1cm4gXCJDaHJvbWVcIiAvKiBDSFJPTUUgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChfaXNBbmRyb2lkKHVhKSkge1xyXG4gICAgICAgIC8vIEFuZHJvaWQgc3RvY2sgYnJvd3Nlci5cclxuICAgICAgICByZXR1cm4gXCJBbmRyb2lkXCIgLyogQU5EUk9JRCAqLztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE1vc3QgbW9kZXJuIGJyb3dzZXJzIGhhdmUgbmFtZS92ZXJzaW9uIGF0IGVuZCBvZiB1c2VyIGFnZW50IHN0cmluZy5cclxuICAgICAgICBjb25zdCByZSA9IC8oW2EtekEtWlxcZFxcLl0rKVxcL1thLXpBLVpcXGRcXC5dKiQvO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB1c2VyQWdlbnQubWF0Y2gocmUpO1xyXG4gICAgICAgIGlmICgobWF0Y2hlcyA9PT0gbnVsbCB8fCBtYXRjaGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXRjaGVzLmxlbmd0aCkgPT09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiT3RoZXJcIiAvKiBPVEhFUiAqLztcclxufVxyXG5mdW5jdGlvbiBfaXNGaXJlZm94KHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuIC9maXJlZm94XFwvL2kudGVzdCh1YSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzU2FmYXJpKHVzZXJBZ2VudCA9IGdldFVBKCkpIHtcclxuICAgIGNvbnN0IHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XHJcbiAgICByZXR1cm4gKHVhLmluY2x1ZGVzKCdzYWZhcmkvJykgJiZcclxuICAgICAgICAhdWEuaW5jbHVkZXMoJ2Nocm9tZS8nKSAmJlxyXG4gICAgICAgICF1YS5pbmNsdWRlcygnY3Jpb3MvJykgJiZcclxuICAgICAgICAhdWEuaW5jbHVkZXMoJ2FuZHJvaWQnKSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzQ2hyb21lSU9TKHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuIC9jcmlvc1xcLy9pLnRlc3QodWEpO1xyXG59XHJcbmZ1bmN0aW9uIF9pc0lFTW9iaWxlKHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuIC9pZW1vYmlsZS9pLnRlc3QodWEpO1xyXG59XHJcbmZ1bmN0aW9uIF9pc0FuZHJvaWQodWEgPSBnZXRVQSgpKSB7XHJcbiAgICByZXR1cm4gL2FuZHJvaWQvaS50ZXN0KHVhKTtcclxufVxyXG5mdW5jdGlvbiBfaXNCbGFja0JlcnJ5KHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuIC9ibGFja2JlcnJ5L2kudGVzdCh1YSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzV2ViT1ModWEgPSBnZXRVQSgpKSB7XHJcbiAgICByZXR1cm4gL3dlYm9zL2kudGVzdCh1YSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzSU9TKHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuICgvaXBob25lfGlwYWR8aXBvZC9pLnRlc3QodWEpIHx8XHJcbiAgICAgICAgKC9tYWNpbnRvc2gvaS50ZXN0KHVhKSAmJiAvbW9iaWxlL2kudGVzdCh1YSkpKTtcclxufVxyXG5mdW5jdGlvbiBfaXNJT1M3T3I4KHVhID0gZ2V0VUEoKSkge1xyXG4gICAgcmV0dXJuICgvKGlQYWR8aVBob25lfGlQb2QpLipPUyA3X1xcZC9pLnRlc3QodWEpIHx8XHJcbiAgICAgICAgLyhpUGFkfGlQaG9uZXxpUG9kKS4qT1MgOF9cXGQvaS50ZXN0KHVhKSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzSU9TU3RhbmRhbG9uZSh1YSA9IGdldFVBKCkpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiBfaXNJT1ModWEpICYmICEhKChfYSA9IHdpbmRvdy5uYXZpZ2F0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGFuZGFsb25lKTtcclxufVxyXG5mdW5jdGlvbiBfaXNJRTEwKCkge1xyXG4gICAgcmV0dXJuIGlzSUUoKSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPT09IDEwO1xyXG59XHJcbmZ1bmN0aW9uIF9pc01vYmlsZUJyb3dzZXIodWEgPSBnZXRVQSgpKSB7XHJcbiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgZ2V0QnJvd3Nlck5hbWUgZXF1aXZhbGVudCBmb3IgT1MuXHJcbiAgICByZXR1cm4gKF9pc0lPUyh1YSkgfHxcclxuICAgICAgICBfaXNBbmRyb2lkKHVhKSB8fFxyXG4gICAgICAgIF9pc1dlYk9TKHVhKSB8fFxyXG4gICAgICAgIF9pc0JsYWNrQmVycnkodWEpIHx8XHJcbiAgICAgICAgL3dpbmRvd3MgcGhvbmUvaS50ZXN0KHVhKSB8fFxyXG4gICAgICAgIF9pc0lFTW9iaWxlKHVhKSk7XHJcbn1cclxuZnVuY3Rpb24gX2lzSWZyYW1lKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBjdXJyZW50IHdpbmRvdyBpcyBub3QgdGhlIHRvcCB3aW5kb3cuXHJcbiAgICAgICAgLy8gSWYgc28sIHJldHVybiB0cnVlLlxyXG4gICAgICAgIHJldHVybiAhISh3aW5kb3cgJiYgd2luZG93ICE9PSB3aW5kb3cudG9wKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qXHJcbiAqIERldGVybWluZSB0aGUgU0RLIHZlcnNpb24gc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0Q2xpZW50VmVyc2lvbihjbGllbnRQbGF0Zm9ybSwgZnJhbWV3b3JrcyA9IFtdKSB7XHJcbiAgICBsZXQgcmVwb3J0ZWRQbGF0Zm9ybTtcclxuICAgIHN3aXRjaCAoY2xpZW50UGxhdGZvcm0pIHtcclxuICAgICAgICBjYXNlIFwiQnJvd3NlclwiIC8qIEJST1dTRVIgKi86XHJcbiAgICAgICAgICAgIC8vIEluIGEgYnJvd3NlciBlbnZpcm9ubWVudCwgcmVwb3J0IHRoZSBicm93c2VyIG5hbWUuXHJcbiAgICAgICAgICAgIHJlcG9ydGVkUGxhdGZvcm0gPSBfZ2V0QnJvd3Nlck5hbWUoZ2V0VUEoKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJXb3JrZXJcIiAvKiBXT1JLRVIgKi86XHJcbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5IGEgd29ya2VyIHJ1bnMgZnJvbSBhIGJyb3dzZXIgYnV0IHdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSBhXHJcbiAgICAgICAgICAgIC8vIHdvcmtlciBmcm9tIGEgYnJvd3Nlci5cclxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IENocm9tZS1Xb3JrZXIvSnNDb3JlLzQuOS4xL0ZpcmViYXNlQ29yZS13ZWIuXHJcbiAgICAgICAgICAgIHJlcG9ydGVkUGxhdGZvcm0gPSBgJHtfZ2V0QnJvd3Nlck5hbWUoZ2V0VUEoKSl9LSR7Y2xpZW50UGxhdGZvcm19YDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmVwb3J0ZWRQbGF0Zm9ybSA9IGNsaWVudFBsYXRmb3JtO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVwb3J0ZWRGcmFtZXdvcmtzID0gZnJhbWV3b3Jrcy5sZW5ndGhcclxuICAgICAgICA/IGZyYW1ld29ya3Muam9pbignLCcpXHJcbiAgICAgICAgOiAnRmlyZWJhc2VDb3JlLXdlYic7IC8qIGRlZmF1bHQgdmFsdWUgaWYgbm8gb3RoZXIgZnJhbWV3b3JrIGlzIHVzZWQgKi9cclxuICAgIHJldHVybiBgJHtyZXBvcnRlZFBsYXRmb3JtfS8ke1wiSnNDb3JlXCIgLyogQ09SRSAqL30vJHtTREtfVkVSU0lPTn0vJHtyZXBvcnRlZEZyYW1ld29ya3N9YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBBdXRoTWlkZGxld2FyZVF1ZXVlIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgpIHtcclxuICAgICAgICB0aGlzLmF1dGggPSBhdXRoO1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgIH1cclxuICAgIHB1c2hDYWxsYmFjayhjYWxsYmFjaywgb25BYm9ydCkge1xyXG4gICAgICAgIC8vIFRoZSBjYWxsYmFjayBjb3VsZCBiZSBzeW5jIG9yIGFzeW5jLiBXcmFwIGl0IGludG8gYVxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIHRoYXQgaXMgYWx3YXlzIGFzeW5jLlxyXG4gICAgICAgIGNvbnN0IHdyYXBwZWRDYWxsYmFjayA9ICh1c2VyKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayh1c2VyKTtcclxuICAgICAgICAgICAgICAgIC8vIEVpdGhlciByZXNvbHZlIHdpdGggZXhpc3RpbmcgcHJvbWlzZSBvciB3cmFwIGEgbm9uLXByb21pc2VcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpbnRvIGEgcHJvbWlzZS5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gU3luYyBjYWxsYmFjayB0aHJvd3MuXHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBBdHRhY2ggdGhlIG9uQWJvcnQgaWYgcHJlc2VudFxyXG4gICAgICAgIHdyYXBwZWRDYWxsYmFjay5vbkFib3J0ID0gb25BYm9ydDtcclxuICAgICAgICB0aGlzLnF1ZXVlLnB1c2god3JhcHBlZENhbGxiYWNrKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucXVldWUubGVuZ3RoIC0gMTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBVbnN1YnNjcmliZS4gUmVwbGFjZSB3aXRoIG5vLW9wLiBEbyBub3QgcmVtb3ZlIGZyb20gYXJyYXksIG9yIGl0IHdpbGwgZGlzdHVyYlxyXG4gICAgICAgICAgICAvLyBpbmRleGluZyBvZiBvdGhlciBlbGVtZW50cy5cclxuICAgICAgICAgICAgdGhpcy5xdWV1ZVtpbmRleF0gPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuTWlkZGxld2FyZShuZXh0VXNlcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAodGhpcy5hdXRoLmN1cnJlbnRVc2VyID09PSBuZXh0VXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdoaWxlIHJ1bm5pbmcgdGhlIG1pZGRsZXdhcmUsIGJ1aWxkIGEgdGVtcG9yYXJ5IHN0YWNrIG9mIG9uQWJvcnRcclxuICAgICAgICAvLyBjYWxsYmFja3MgdG8gY2FsbCBpZiBvbmUgbWlkZGxld2FyZSBjYWxsYmFjayByZWplY3RzLlxyXG4gICAgICAgIGNvbnN0IG9uQWJvcnRTdGFjayA9IFtdO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYmVmb3JlU3RhdGVDYWxsYmFjayBvZiB0aGlzLnF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBiZWZvcmVTdGF0ZUNhbGxiYWNrKG5leHRVc2VyKTtcclxuICAgICAgICAgICAgICAgIC8vIE9ubHkgcHVzaCB0aGUgb25BYm9ydCBpZiB0aGUgY2FsbGJhY2sgc3VjY2VlZHNcclxuICAgICAgICAgICAgICAgIGlmIChiZWZvcmVTdGF0ZUNhbGxiYWNrLm9uQWJvcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvbkFib3J0U3RhY2sucHVzaChiZWZvcmVTdGF0ZUNhbGxiYWNrLm9uQWJvcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFJ1biBhbGwgb25BYm9ydCwgd2l0aCBzZXBhcmF0ZSB0cnkvY2F0Y2ggdG8gaWdub3JlIGFueSBlcnJvcnMgYW5kXHJcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIG9uQWJvcnRTdGFjay5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb25BYm9ydCBvZiBvbkFib3J0U3RhY2spIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25BYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvKiBzd2FsbG93IGVycm9yICovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgdGhpcy5hdXRoLl9lcnJvckZhY3RvcnkuY3JlYXRlKFwibG9naW4tYmxvY2tlZFwiIC8qIExPR0lOX0JMT0NLRUQgKi8sIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsTWVzc2FnZTogKF9hID0gZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEF1dGhJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGFwcCwgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyLCBjb25maWcpIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLmhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlciA9IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVtdWxhdG9yQ29uZmlnID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB0aGlzLmF1dGhTdGF0ZVN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcyk7XHJcbiAgICAgICAgdGhpcy5pZFRva2VuU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzKTtcclxuICAgICAgICB0aGlzLmJlZm9yZVN0YXRlUXVldWUgPSBuZXcgQXV0aE1pZGRsZXdhcmVRdWV1ZSh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlZGlyZWN0VXNlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gQW55IG5ldHdvcmsgY2FsbHMgd2lsbCBzZXQgdGhpcyB0byB0cnVlIGFuZCBwcmV2ZW50IHN1YnNlcXVlbnQgZW11bGF0b3JcclxuICAgICAgICAvLyBpbml0aWFsaXphdGlvblxyXG4gICAgICAgIHRoaXMuX2NhbkluaXRFbXVsYXRvciA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2RlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZXJyb3JGYWN0b3J5ID0gX0RFRkFVTFRfQVVUSF9FUlJPUl9GQUNUT1JZO1xyXG4gICAgICAgIC8vIFRyYWNrcyB0aGUgbGFzdCBub3RpZmllZCBVSUQgZm9yIHN0YXRlIGNoYW5nZSBsaXN0ZW5lcnMgdG8gcHJldmVudFxyXG4gICAgICAgIC8vIHJlcGVhdGVkIGNhbGxzIHRvIHRoZSBjYWxsYmFja3MuIFVuZGVmaW5lZCBtZWFucyBpdCdzIG5ldmVyIGJlZW5cclxuICAgICAgICAvLyBjYWxsZWQsIHdoZXJlYXMgbnVsbCBtZWFucyBpdCdzIGJlZW4gY2FsbGVkIHdpdGggYSBzaWduZWQgb3V0IHVzZXJcclxuICAgICAgICB0aGlzLmxhc3ROb3RpZmllZFVpZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHsgYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nOiBmYWxzZSB9O1xyXG4gICAgICAgIHRoaXMuZnJhbWV3b3JrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGFwcC5uYW1lO1xyXG4gICAgICAgIHRoaXMuY2xpZW50VmVyc2lvbiA9IGNvbmZpZy5zZGtDbGllbnRWZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgX2luaXRpYWxpemVXaXRoUGVyc2lzdGVuY2UocGVyc2lzdGVuY2VIaWVyYXJjaHksIHBvcHVwUmVkaXJlY3RSZXNvbHZlcikge1xyXG4gICAgICAgIGlmIChwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyID0gX2dldEluc3RhbmNlKHBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhhdmUgdG8gY2hlY2sgZm9yIGFwcCBkZWxldGlvbiB0aHJvdWdob3V0IGluaXRpYWxpemF0aW9uIChhZnRlciBlYWNoXHJcbiAgICAgICAgLy8gcHJvbWlzZSByZXNvbHV0aW9uKVxyXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZSA9IHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gYXdhaXQgUGVyc2lzdGVuY2VVc2VyTWFuYWdlci5jcmVhdGUodGhpcywgcGVyc2lzdGVuY2VIaWVyYXJjaHkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIHJlc29sdmVyIGVhcmx5IGlmIG5lY2Vzc2FyeSAob25seSBhcHBsaWNhYmxlIHRvIHdlYjpcclxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGNhdXNlIHRoZSBpZnJhbWUgdG8gbG9hZCBpbW1lZGlhdGVseSBpbiBjZXJ0YWluIGNhc2VzKVxyXG4gICAgICAgICAgICBpZiAoKF9hID0gdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX3Nob3VsZEluaXRQcm9hY3RpdmVseSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscywgZG9uJ3QgaGFsdCBhdXRoIGxvYWRpbmdcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyLl9pbml0aWFsaXplKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKiBJZ25vcmUgdGhlIGVycm9yICovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplQ3VycmVudFVzZXIocG9wdXBSZWRpcmVjdFJlc29sdmVyKTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0Tm90aWZpZWRVaWQgPSAoKF9iID0gdGhpcy5jdXJyZW50VXNlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnVpZCkgfHwgbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGUgcGVyc2lzdGVuY2UgaXMgY2hhbmdlZCBpbiBhbm90aGVyIHdpbmRvdywgdGhlIHVzZXIgbWFuYWdlciB3aWxsIGxldCB1cyBrbm93XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIF9vblN0b3JhZ2VFdmVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVsZXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmFzc2VydGVkUGVyc2lzdGVuY2UuZ2V0Q3VycmVudFVzZXIoKTtcclxuICAgICAgICBpZiAoIXRoaXMuY3VycmVudFVzZXIgJiYgIXVzZXIpIHtcclxuICAgICAgICAgICAgLy8gTm8gY2hhbmdlLCBkbyBub3RoaW5nICh3YXMgc2lnbmVkIG91dCBhbmQgcmVtYWluZWQgc2lnbmVkIG91dCkuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhlIHNhbWUgdXNlciBpcyB0byBiZSBzeW5jaHJvbml6ZWQuXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFVzZXIgJiYgdXNlciAmJiB0aGlzLmN1cnJlbnRVc2VyLnVpZCA9PT0gdXNlci51aWQpIHtcclxuICAgICAgICAgICAgLy8gRGF0YSB1cGRhdGUsIHNpbXBseSBjb3B5IGRhdGEgY2hhbmdlcy5cclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFVzZXIuX2Fzc2lnbih1c2VyKTtcclxuICAgICAgICAgICAgLy8gSWYgdG9rZW5zIGNoYW5nZWQgZnJvbSBwcmV2aW91cyB1c2VyIHRva2VucywgdGhpcyB3aWxsIHRyaWdnZXJcclxuICAgICAgICAgICAgLy8gbm90aWZ5QXV0aExpc3RlbmVyc18uXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3VycmVudFVzZXIuZ2V0SWRUb2tlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IEF1dGggc3RhdGUuIEVpdGhlciBhIG5ldyBsb2dpbiBvciBsb2dvdXQuXHJcbiAgICAgICAgLy8gU2tpcCBibG9ja2luZyBjYWxsYmFja3MsIHRoZXkgc2hvdWxkIG5vdCBhcHBseSB0byBhIGNoYW5nZSBpbiBhbm90aGVyIHRhYi5cclxuICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVDdXJyZW50VXNlcih1c2VyLCAvKiBza2lwQmVmb3JlU3RhdGVDYWxsYmFja3MgKi8gdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0aWFsaXplQ3VycmVudFVzZXIocG9wdXBSZWRpcmVjdFJlc29sdmVyKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcGVuZGluZyByZWRpcmVjdCBldmVudC5cclxuICAgICAgICBjb25zdCBwcmV2aW91c2x5U3RvcmVkVXNlciA9IChhd2FpdCB0aGlzLmFzc2VydGVkUGVyc2lzdGVuY2UuZ2V0Q3VycmVudFVzZXIoKSk7XHJcbiAgICAgICAgbGV0IGZ1dHVyZUN1cnJlbnRVc2VyID0gcHJldmlvdXNseVN0b3JlZFVzZXI7XHJcbiAgICAgICAgbGV0IG5lZWRzVG9jaGVja01pZGRsZXdhcmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAocG9wdXBSZWRpcmVjdFJlc29sdmVyICYmIHRoaXMuY29uZmlnLmF1dGhEb21haW4pIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRPckluaXRSZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcigpO1xyXG4gICAgICAgICAgICBjb25zdCByZWRpcmVjdFVzZXJFdmVudElkID0gKF9hID0gdGhpcy5yZWRpcmVjdFVzZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5fcmVkaXJlY3RFdmVudElkO1xyXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRVc2VyRXZlbnRJZCA9IGZ1dHVyZUN1cnJlbnRVc2VyID09PSBudWxsIHx8IGZ1dHVyZUN1cnJlbnRVc2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmdXR1cmVDdXJyZW50VXNlci5fcmVkaXJlY3RFdmVudElkO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRyeVJlZGlyZWN0U2lnbkluKHBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgdXNlciAoaS5lLiB0aGUgb2xkIFwiY3VycmVudFVzZXJcIikgaGFzIGEgcmVkaXJlY3RJZCB0aGF0XHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXMgdGhlIHJlZGlyZWN0IHVzZXIsIHRoZW4gd2Ugd2FudCB0byBpbml0aWFsbHkgc2lnbiBpbiB3aXRoIHRoZVxyXG4gICAgICAgICAgICAvLyBuZXcgdXNlciBvYmplY3QgZnJvbSByZXN1bHQuXHJcbiAgICAgICAgICAgIC8vIFRPRE8oc2FtZ2hvKTogTW9yZSB0aG9yb3VnaGx5IHRlc3QgYWxsIG9mIHRoaXNcclxuICAgICAgICAgICAgaWYgKCghcmVkaXJlY3RVc2VyRXZlbnRJZCB8fCByZWRpcmVjdFVzZXJFdmVudElkID09PSBzdG9yZWRVc2VyRXZlbnRJZCkgJiZcclxuICAgICAgICAgICAgICAgIChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXN1bHQudXNlcikpIHtcclxuICAgICAgICAgICAgICAgIGZ1dHVyZUN1cnJlbnRVc2VyID0gcmVzdWx0LnVzZXI7XHJcbiAgICAgICAgICAgICAgICBuZWVkc1RvY2hlY2tNaWRkbGV3YXJlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBubyB1c2VyIGluIHBlcnNpc3RlbmNlLCB0aGVyZSBpcyBubyBjdXJyZW50IHVzZXIuIFNldCB0byBudWxsLlxyXG4gICAgICAgIGlmICghZnV0dXJlQ3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFmdXR1cmVDdXJyZW50VXNlci5fcmVkaXJlY3RFdmVudElkKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXNuJ3QgYSByZWRpcmVjdCBsaW5rIG9wZXJhdGlvbiwgd2UgY2FuIHJlbG9hZCBhbmQgYmFpbC5cclxuICAgICAgICAgICAgLy8gRmlyc3QgdGhvdWdoLCBlbnN1cmUgdGhhdCB3ZSBjaGVjayB0aGUgbWlkZGxld2FyZSBpcyBoYXBweS5cclxuICAgICAgICAgICAgaWYgKG5lZWRzVG9jaGVja01pZGRsZXdhcmUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iZWZvcmVTdGF0ZVF1ZXVlLnJ1bk1pZGRsZXdhcmUoZnV0dXJlQ3VycmVudFVzZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdXR1cmVDdXJyZW50VXNlciA9IHByZXZpb3VzbHlTdG9yZWRVc2VyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhpcyBpcyBhdmFpbGFibGUgc2luY2UgdGhlIGJpdCBpcyBvbmx5IHNldCB3aGVuIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVyIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlci5fb3ZlcnJpZGVSZWRpcmVjdFJlc3VsdCh0aGlzLCAoKSA9PiBQcm9taXNlLnJlamVjdChlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZ1dHVyZUN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIoZnV0dXJlQ3VycmVudFVzZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfYXNzZXJ0KHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciwgdGhpcywgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmdldE9ySW5pdFJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyKCk7XHJcbiAgICAgICAgLy8gSWYgdGhlIHJlZGlyZWN0IHVzZXIncyBldmVudCBJRCBtYXRjaGVzIHRoZSBjdXJyZW50IHVzZXIncyBldmVudCBJRCxcclxuICAgICAgICAvLyBETyBOT1QgcmVsb2FkIHRoZSBjdXJyZW50IHVzZXIsIG90aGVyd2lzZSB0aGV5J2xsIGJlIGNsZWFyZWQgZnJvbSBzdG9yYWdlLlxyXG4gICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciB0aGUgcmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3QoKSBmbG93LlxyXG4gICAgICAgIGlmICh0aGlzLnJlZGlyZWN0VXNlciAmJlxyXG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VXNlci5fcmVkaXJlY3RFdmVudElkID09PSBmdXR1cmVDdXJyZW50VXNlci5fcmVkaXJlY3RFdmVudElkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIoZnV0dXJlQ3VycmVudFVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIoZnV0dXJlQ3VycmVudFVzZXIpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgdHJ5UmVkaXJlY3RTaWduSW4ocmVkaXJlY3RSZXNvbHZlcikge1xyXG4gICAgICAgIC8vIFRoZSByZWRpcmVjdCB1c2VyIG5lZWRzIHRvIGJlIGNoZWNrZWQgKGFuZCBzaWduZWQgaW4gaWYgYXZhaWxhYmxlKVxyXG4gICAgICAgIC8vIGR1cmluZyBhdXRoIGluaXRpYWxpemF0aW9uLiBBbGwgb2YgdGhlIG5vcm1hbCBzaWduIGluIGFuZCBsaW5rL3JlYXV0aFxyXG4gICAgICAgIC8vIGZsb3dzIGNhbGwgYmFjayBpbnRvIGF1dGggYW5kIHB1c2ggdGhpbmdzIG9udG8gdGhlIHByb21pc2UgcXVldWUuIFdlXHJcbiAgICAgICAgLy8gbmVlZCB0byBhd2FpdCB0aGUgcmVzdWx0IG9mIHRoZSByZWRpcmVjdCBzaWduIGluICppbnNpZGUgdGhlIHByb21pc2VcclxuICAgICAgICAvLyBxdWV1ZSouIFRoaXMgcHJlc2VudHMgYSBwcm9ibGVtOiB3ZSBydW4gaW50byBkZWFkbG9jay4gU2VlOlxyXG4gICAgICAgIC8vICAgIOKUjD4gW0luaXRpYWxpemF0aW9uXSDilIDilIDilIDilIDilIDilJBcclxuICAgICAgICAvLyAgICDilIw+IFs8b3RoZXIgcXVldWUgdGFza3M+XSDilIJcclxuICAgICAgICAvLyAgICDilJTilIAgW2dldFJlZGlyZWN0UmVzdWx0XSA84pSA4pSYXHJcbiAgICAgICAgLy8gICAgd2hlcmUgW10gYXJlIHRhc2tzIG9uIHRoZSBxdWV1ZSBhbmQgYXJyb3dzIGRlbm90ZSBhd2FpdHNcclxuICAgICAgICAvLyBJbml0aWFsaXphdGlvbiB3aWxsIG5ldmVyIGNvbXBsZXRlIGJlY2F1c2UgaXQncyB3YWl0aW5nIG9uIHNvbWV0aGluZ1xyXG4gICAgICAgIC8vIHRoYXQncyB3YWl0aW5nIGZvciBpbml0aWFsaXphdGlvbiB0byBjb21wbGV0ZSFcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIEluc3RlYWQsIHRoaXMgbWV0aG9kIGNhbGxzIGdldFJlZGlyZWN0UmVzdWx0KCkgKHN0b3JlZCBpblxyXG4gICAgICAgIC8vIF9jb21wbGV0ZVJlZGlyZWN0Rm4pIHdpdGggYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRoYXQgaW5zdHJ1Y3RzIGFsbCBvZlxyXG4gICAgICAgIC8vIHRoZSB1bmRlcmx5aW5nIGF1dGggb3BlcmF0aW9ucyB0byBza2lwIGFueXRoaW5nIHRoYXQgbXV0YXRlcyBhdXRoIHN0YXRlLlxyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGtub3cgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyIGlzIHNldCBzaW5jZSByZWRpcmVjdFJlc29sdmVyXHJcbiAgICAgICAgICAgIC8vIGlzIHBhc3NlZCBpbi4gVGhlIF9jb21wbGV0ZVJlZGlyZWN0Rm4gZXhwZWN0cyB0aGUgdW53cmFwcGVkIGV4dGVybi5cclxuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyLl9jb21wbGV0ZVJlZGlyZWN0Rm4odGhpcywgcmVkaXJlY3RSZXNvbHZlciwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFN3YWxsb3cgYW55IGVycm9ycyBoZXJlOyB0aGUgY29kZSBjYW4gcmV0cmlldmUgdGhlbSBpblxyXG4gICAgICAgICAgICAvLyBnZXRSZWRpcmVjdFJlc3VsdCgpLlxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXRSZWRpcmVjdFVzZXIobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBhc3luYyByZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIodXNlcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh1c2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKCgoX2EgPSBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZSkgIT09XHJcbiAgICAgICAgICAgICAgICBgYXV0aC8ke1wibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiIC8qIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQgKi99YCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU29tZXRoaW5nJ3Mgd3Jvbmcgd2l0aCB0aGUgdXNlcidzIHRva2VuLiBMb2cgdGhlbSBvdXQgYW5kIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlbSBmcm9tIHN0b3JhZ2VcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcih1c2VyKTtcclxuICAgIH1cclxuICAgIHVzZURldmljZUxhbmd1YWdlKCkge1xyXG4gICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlID0gX2dldFVzZXJMYW5ndWFnZSgpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX2RlbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLl9kZWxldGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGFzeW5jIHVwZGF0ZUN1cnJlbnRVc2VyKHVzZXJFeHRlcm4pIHtcclxuICAgICAgICAvLyBUaGUgcHVibGljIHVwZGF0ZUN1cnJlbnRVc2VyIG1ldGhvZCBuZWVkcyB0byBtYWtlIGEgY29weSBvZiB0aGUgdXNlcixcclxuICAgICAgICAvLyBhbmQgYWxzbyBjaGVjayB0aGF0IHRoZSBwcm9qZWN0IG1hdGNoZXNcclxuICAgICAgICBjb25zdCB1c2VyID0gdXNlckV4dGVyblxyXG4gICAgICAgICAgICA/IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyRXh0ZXJuKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgX2Fzc2VydCh1c2VyLmF1dGguY29uZmlnLmFwaUtleSA9PT0gdGhpcy5jb25maWcuYXBpS2V5LCB0aGlzLCBcImludmFsaWQtdXNlci10b2tlblwiIC8qIElOVkFMSURfQVVUSCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVDdXJyZW50VXNlcih1c2VyICYmIHVzZXIuX2Nsb25lKHRoaXMpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIF91cGRhdGVDdXJyZW50VXNlcih1c2VyLCBza2lwQmVmb3JlU3RhdGVDYWxsYmFja3MgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgX2Fzc2VydCh0aGlzLnRlbmFudElkID09PSB1c2VyLnRlbmFudElkLCB0aGlzLCBcInRlbmFudC1pZC1taXNtYXRjaFwiIC8qIFRFTkFOVF9JRF9NSVNNQVRDSCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc2tpcEJlZm9yZVN0YXRlQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmVmb3JlU3RhdGVRdWV1ZS5ydW5NaWRkbGV3YXJlKHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZShhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcih1c2VyKTtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlBdXRoTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzaWduT3V0KCkge1xyXG4gICAgICAgIC8vIFJ1biBmaXJzdCwgdG8gYmxvY2sgX3NldFJlZGlyZWN0VXNlcigpIGlmIGFueSBjYWxsYmFja3MgZmFpbC5cclxuICAgICAgICBhd2FpdCB0aGlzLmJlZm9yZVN0YXRlUXVldWUucnVuTWlkZGxld2FyZShudWxsKTtcclxuICAgICAgICAvLyBDbGVhciB0aGUgcmVkaXJlY3QgdXNlciB3aGVuIHNpZ25PdXQgaXMgY2FsbGVkXHJcbiAgICAgICAgaWYgKHRoaXMucmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIgfHwgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldFJlZGlyZWN0VXNlcihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJldmVudCBjYWxsYmFja3MgZnJvbSBiZWluZyBjYWxsZWQgYWdhaW4gaW4gX3VwZGF0ZUN1cnJlbnRVc2VyLCBhc1xyXG4gICAgICAgIC8vIHRoZXkgd2VyZSBhbHJlYWR5IGNhbGxlZCBpbiB0aGUgZmlyc3QgbGluZS5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlQ3VycmVudFVzZXIobnVsbCwgLyogc2tpcEJlZm9yZVN0YXRlQ2FsbGJhY2tzICovIHRydWUpO1xyXG4gICAgfVxyXG4gICAgc2V0UGVyc2lzdGVuY2UocGVyc2lzdGVuY2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZShhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0ZWRQZXJzaXN0ZW5jZS5zZXRQZXJzaXN0ZW5jZShfZ2V0SW5zdGFuY2UocGVyc2lzdGVuY2UpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9nZXRQZXJzaXN0ZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnBlcnNpc3RlbmNlLnR5cGU7XHJcbiAgICB9XHJcbiAgICBfdXBkYXRlRXJyb3JNYXAoZXJyb3JNYXApIHtcclxuICAgICAgICB0aGlzLl9lcnJvckZhY3RvcnkgPSBuZXcgRXJyb3JGYWN0b3J5KCdhdXRoJywgJ0ZpcmViYXNlJywgZXJyb3JNYXAoKSk7XHJcbiAgICB9XHJcbiAgICBvbkF1dGhTdGF0ZUNoYW5nZWQobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclN0YXRlTGlzdGVuZXIodGhpcy5hdXRoU3RhdGVTdWJzY3JpcHRpb24sIG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGVkKTtcclxuICAgIH1cclxuICAgIGJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoY2FsbGJhY2ssIG9uQWJvcnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iZWZvcmVTdGF0ZVF1ZXVlLnB1c2hDYWxsYmFjayhjYWxsYmFjaywgb25BYm9ydCk7XHJcbiAgICB9XHJcbiAgICBvbklkVG9rZW5DaGFuZ2VkKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJTdGF0ZUxpc3RlbmVyKHRoaXMuaWRUb2tlblN1YnNjcmlwdGlvbiwgbmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhcGlLZXk6IHRoaXMuY29uZmlnLmFwaUtleSxcclxuICAgICAgICAgICAgYXV0aERvbWFpbjogdGhpcy5jb25maWcuYXV0aERvbWFpbixcclxuICAgICAgICAgICAgYXBwTmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBjdXJyZW50VXNlcjogKF9hID0gdGhpcy5fY3VycmVudFVzZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0pTT04oKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBhc3luYyBfc2V0UmVkaXJlY3RVc2VyKHVzZXIsIHBvcHVwUmVkaXJlY3RSZXNvbHZlcikge1xyXG4gICAgICAgIGNvbnN0IHJlZGlyZWN0TWFuYWdlciA9IGF3YWl0IHRoaXMuZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIocG9wdXBSZWRpcmVjdFJlc29sdmVyKTtcclxuICAgICAgICByZXR1cm4gdXNlciA9PT0gbnVsbFxyXG4gICAgICAgICAgICA/IHJlZGlyZWN0TWFuYWdlci5yZW1vdmVDdXJyZW50VXNlcigpXHJcbiAgICAgICAgICAgIDogcmVkaXJlY3RNYW5hZ2VyLnNldEN1cnJlbnRVc2VyKHVzZXIpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIocG9wdXBSZWRpcmVjdFJlc29sdmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gKHBvcHVwUmVkaXJlY3RSZXNvbHZlciAmJiBfZ2V0SW5zdGFuY2UocG9wdXBSZWRpcmVjdFJlc29sdmVyKSkgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlcjtcclxuICAgICAgICAgICAgX2Fzc2VydChyZXNvbHZlciwgdGhpcywgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlciA9IGF3YWl0IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIuY3JlYXRlKHRoaXMsIFtfZ2V0SW5zdGFuY2UocmVzb2x2ZXIuX3JlZGlyZWN0UGVyc2lzdGVuY2UpXSwgXCJyZWRpcmVjdFVzZXJcIiAvKiBSRURJUkVDVF9VU0VSICovKTtcclxuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFVzZXIgPVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlci5nZXRDdXJyZW50VXNlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcjtcclxuICAgIH1cclxuICAgIGFzeW5jIF9yZWRpcmVjdFVzZXJGb3JJZChpZCkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlJ3ZlIGNsZWFyZWQgYW55IHBlbmRpbmcgcGVyc2lzdGVuY2UgYWN0aW9ucyBpZiB3ZSdyZSBub3QgaW5cclxuICAgICAgICAvLyB0aGUgaW5pdGlhbGl6ZXJcclxuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnF1ZXVlKGFzeW5jICgpID0+IHsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5fY3VycmVudFVzZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5fcmVkaXJlY3RFdmVudElkKSA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRVc2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKChfYiA9IHRoaXMucmVkaXJlY3RVc2VyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuX3JlZGlyZWN0RXZlbnRJZCkgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZGlyZWN0VXNlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBhc3luYyBfcGVyc2lzdFVzZXJJZkN1cnJlbnQodXNlcikge1xyXG4gICAgICAgIGlmICh1c2VyID09PSB0aGlzLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlKGFzeW5jICgpID0+IHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcih1c2VyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIE5vdGlmaWVzIGxpc3RlbmVycyBvbmx5IGlmIHRoZSB1c2VyIGlzIGN1cnJlbnQgKi9cclxuICAgIF9ub3RpZnlMaXN0ZW5lcnNJZkN1cnJlbnQodXNlcikge1xyXG4gICAgICAgIGlmICh1c2VyID09PSB0aGlzLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QXV0aExpc3RlbmVycygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9rZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlnLmF1dGhEb21haW59OiR7dGhpcy5jb25maWcuYXBpS2V5fToke3RoaXMubmFtZX1gO1xyXG4gICAgfVxyXG4gICAgX3N0YXJ0UHJvYWN0aXZlUmVmcmVzaCgpIHtcclxuICAgICAgICB0aGlzLmlzUHJvYWN0aXZlUmVmcmVzaEVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRVc2VyLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfc3RvcFByb2FjdGl2ZVJlZnJlc2goKSB7XHJcbiAgICAgICAgdGhpcy5pc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFVzZXIuX3N0b3BQcm9hY3RpdmVSZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIFJldHVybnMgdGhlIGN1cnJlbnQgdXNlciBjYXN0IGFzIHRoZSBpbnRlcm5hbCB0eXBlICovXHJcbiAgICBnZXQgX2N1cnJlbnRVc2VyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRVc2VyO1xyXG4gICAgfVxyXG4gICAgbm90aWZ5QXV0aExpc3RlbmVycygpIHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIGlmICghdGhpcy5faXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWRUb2tlblN1YnNjcmlwdGlvbi5uZXh0KHRoaXMuY3VycmVudFVzZXIpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVaWQgPSAoX2IgPSAoX2EgPSB0aGlzLmN1cnJlbnRVc2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudWlkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLmxhc3ROb3RpZmllZFVpZCAhPT0gY3VycmVudFVpZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3ROb3RpZmllZFVpZCA9IGN1cnJlbnRVaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aFN0YXRlU3Vic2NyaXB0aW9uLm5leHQodGhpcy5jdXJyZW50VXNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJTdGF0ZUxpc3RlbmVyKHN1YnNjcmlwdGlvbiwgbmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVsZXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4geyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYiA9IHR5cGVvZiBuZXh0T3JPYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICA/IG5leHRPck9ic2VydmVyXHJcbiAgICAgICAgICAgIDogbmV4dE9yT2JzZXJ2ZXIubmV4dC5iaW5kKG5leHRPck9ic2VydmVyKTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5faXNJbml0aWFsaXplZFxyXG4gICAgICAgICAgICA/IFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgICAgIDogdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgICAgIF9hc3NlcnQocHJvbWlzZSwgdGhpcywgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICAvLyBUaGUgY2FsbGJhY2sgbmVlZHMgdG8gYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IHBlciB0aGUgc3BlYy5cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IGNiKHRoaXMuY3VycmVudFVzZXIpKTtcclxuICAgICAgICBpZiAodHlwZW9mIG5leHRPck9ic2VydmVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24uYWRkT2JzZXJ2ZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5hZGRPYnNlcnZlcihuZXh0T3JPYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnByb3RlY3RlZCAoZnJvbSByYWNlIGNvbmRpdGlvbnMpIG1ldGhvZCB0byBzZXQgdGhlIGN1cnJlbnQgdXNlci4gVGhpc1xyXG4gICAgICogc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgcXVldWVkIGNhbGxiYWNrLiBUaGlzIGlzIG5lY2Vzc2FyeVxyXG4gICAgICogYmVjYXVzZSB0aGUgcXVldWUgc2hvdWxkbid0IHJlbHkgb24gYW5vdGhlciBxdWV1ZWQgY2FsbGJhY2suXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGRpcmVjdGx5U2V0Q3VycmVudFVzZXIodXNlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRVc2VyICYmIHRoaXMuY3VycmVudFVzZXIgIT09IHVzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFVzZXIuX3N0b3BQcm9hY3RpdmVSZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1c2VyICYmIHRoaXMuaXNQcm9hY3RpdmVSZWZyZXNoRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB1c2VyLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnNldEN1cnJlbnRVc2VyKHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnJlbW92ZUN1cnJlbnRVc2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcXVldWUoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8gSW4gY2FzZSBzb21ldGhpbmcgZXJyb3JzLCB0aGUgY2FsbGJhY2sgc3RpbGwgc2hvdWxkIGJlIGNhbGxlZCBpbiBvcmRlclxyXG4gICAgICAgIC8vIHRvIGtlZXAgdGhlIHByb21pc2UgY2hhaW4gYWxpdmVcclxuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSB0aGlzLm9wZXJhdGlvbnMudGhlbihhY3Rpb24sIGFjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0aW9ucztcclxuICAgIH1cclxuICAgIGdldCBhc3NlcnRlZFBlcnNpc3RlbmNlKCkge1xyXG4gICAgICAgIF9hc3NlcnQodGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIsIHRoaXMsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyO1xyXG4gICAgfVxyXG4gICAgX2xvZ0ZyYW1ld29yayhmcmFtZXdvcmspIHtcclxuICAgICAgICBpZiAoIWZyYW1ld29yayB8fCB0aGlzLmZyYW1ld29ya3MuaW5jbHVkZXMoZnJhbWV3b3JrKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZnJhbWV3b3Jrcy5wdXNoKGZyYW1ld29yayk7XHJcbiAgICAgICAgLy8gU29ydCBhbHBoYWJldGljYWxseSBzbyB0aGF0IFwiRmlyZWJhc2VDb3JlLXdlYixGaXJlYmFzZVVJLXdlYlwiIGFuZFxyXG4gICAgICAgIC8vIFwiRmlyZWJhc2VVSS13ZWIsRmlyZWJhc2VDb3JlLXdlYlwiIGFyZW4ndCB2aWV3ZWQgYXMgZGlmZmVyZW50LlxyXG4gICAgICAgIHRoaXMuZnJhbWV3b3Jrcy5zb3J0KCk7XHJcbiAgICAgICAgdGhpcy5jbGllbnRWZXJzaW9uID0gX2dldENsaWVudFZlcnNpb24odGhpcy5jb25maWcuY2xpZW50UGxhdGZvcm0sIHRoaXMuX2dldEZyYW1ld29ya3MoKSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0RnJhbWV3b3JrcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZXdvcmtzO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX2dldEFkZGl0aW9uYWxIZWFkZXJzKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBBZGRpdGlvbmFsIGhlYWRlcnMgb24gZXZlcnkgcmVxdWVzdFxyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XHJcbiAgICAgICAgICAgIFtcIlgtQ2xpZW50LVZlcnNpb25cIiAvKiBYX0NMSUVOVF9WRVJTSU9OICovXTogdGhpcy5jbGllbnRWZXJzaW9uXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5hcHAub3B0aW9ucy5hcHBJZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzW1wiWC1GaXJlYmFzZS1nbXBpZFwiIC8qIFhfRklSRUJBU0VfR01QSUQgKi9dID0gdGhpcy5hcHAub3B0aW9ucy5hcHBJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhlIGhlYXJ0YmVhdCBzZXJ2aWNlIGV4aXN0cywgYWRkIHRoZSBoZWFydGJlYXQgc3RyaW5nXHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0c0hlYWRlciA9IGF3YWl0ICgoX2EgPSB0aGlzLmhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlclxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgICAgICB9KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEhlYXJ0YmVhdHNIZWFkZXIoKSk7XHJcbiAgICAgICAgaWYgKGhlYXJ0YmVhdHNIZWFkZXIpIHtcclxuICAgICAgICAgICAgaGVhZGVyc1tcIlgtRmlyZWJhc2UtQ2xpZW50XCIgLyogWF9GSVJFQkFTRV9DTElFTlQgKi9dID0gaGVhcnRiZWF0c0hlYWRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIE1ldGhvZCB0byBiZSB1c2VkIHRvIGNhc3QgZG93biB0byBvdXIgcHJpdmF0ZSBpbXBsbWVudGF0aW9uIG9mIEF1dGguXHJcbiAqIEl0IHdpbGwgYWxzbyBoYW5kbGUgdW53cmFwcGluZyBmcm9tIHRoZSBjb21wYXQgdHlwZSBpZiBuZWNlc3NhcnlcclxuICpcclxuICogQHBhcmFtIGF1dGggQXV0aCBvYmplY3QgcGFzc2VkIGluIGZyb20gZGV2ZWxvcGVyXHJcbiAqL1xyXG5mdW5jdGlvbiBfY2FzdEF1dGgoYXV0aCkge1xyXG4gICAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKTtcclxufVxyXG4vKiogSGVscGVyIGNsYXNzIHRvIHdyYXAgc3Vic2NyaWJlciBsb2dpYyAqL1xyXG5jbGFzcyBTdWJzY3JpcHRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoYXV0aCkge1xyXG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hZGRPYnNlcnZlciA9IGNyZWF0ZVN1YnNjcmliZShvYnNlcnZlciA9PiAodGhpcy5vYnNlcnZlciA9IG9ic2VydmVyKSk7XHJcbiAgICB9XHJcbiAgICBnZXQgbmV4dCgpIHtcclxuICAgICAgICBfYXNzZXJ0KHRoaXMub2JzZXJ2ZXIsIHRoaXMuYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlci5uZXh0LmJpbmQodGhpcy5vYnNlcnZlcik7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIENoYW5nZXMgdGhlIHtAbGluayBBdXRofSBpbnN0YW5jZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBGaXJlYmFzZSBBdXRoIEVtdWxhdG9yLCBpbnN0ZWFkIG9mIHByb2R1Y3Rpb25cclxuICogRmlyZWJhc2UgQXV0aCBzZXJ2aWNlcy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5IGltbWVkaWF0ZWx5IGZvbGxvd2luZyB0aGUgZmlyc3QgY2FsbCB0b1xyXG4gKiB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9LiAgRG8gbm90IHVzZSB3aXRoIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMgYXMgZW11bGF0b3JcclxuICogdHJhZmZpYyBpcyBub3QgZW5jcnlwdGVkLlxyXG4gKlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGNvbm5lY3RBdXRoRW11bGF0b3IoYXV0aCwgJ2h0dHA6Ly8xMjcuMC4wLjE6OTA5OScsIHsgZGlzYWJsZVdhcm5pbmdzOiB0cnVlIH0pO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCBhdCB3aGljaCB0aGUgZW11bGF0b3IgaXMgcnVubmluZyAoZWcsICdodHRwOi8vbG9jYWxob3N0OjkwOTknKS5cclxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gYG9wdGlvbnMuZGlzYWJsZVdhcm5pbmdzYCBkZWZhdWx0cyB0byBgZmFsc2VgLiBTZXQgaXQgdG9cclxuICogYHRydWVgIHRvIGRpc2FibGUgdGhlIHdhcm5pbmcgYmFubmVyIGF0dGFjaGVkIHRvIHRoZSBET00uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGNvbm5lY3RBdXRoRW11bGF0b3IoYXV0aCwgdXJsLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XHJcbiAgICBfYXNzZXJ0KGF1dGhJbnRlcm5hbC5fY2FuSW5pdEVtdWxhdG9yLCBhdXRoSW50ZXJuYWwsIFwiZW11bGF0b3ItY29uZmlnLWZhaWxlZFwiIC8qIEVNVUxBVE9SX0NPTkZJR19GQUlMRUQgKi8pO1xyXG4gICAgX2Fzc2VydCgvXmh0dHBzPzpcXC9cXC8vLnRlc3QodXJsKSwgYXV0aEludGVybmFsLCBcImludmFsaWQtZW11bGF0b3Itc2NoZW1lXCIgLyogSU5WQUxJRF9FTVVMQVRPUl9TQ0hFTUUgKi8pO1xyXG4gICAgY29uc3QgZGlzYWJsZVdhcm5pbmdzID0gISEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRpc2FibGVXYXJuaW5ncyk7XHJcbiAgICBjb25zdCBwcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbCh1cmwpO1xyXG4gICAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSBleHRyYWN0SG9zdEFuZFBvcnQodXJsKTtcclxuICAgIGNvbnN0IHBvcnRTdHIgPSBwb3J0ID09PSBudWxsID8gJycgOiBgOiR7cG9ydH1gO1xyXG4gICAgLy8gQWx3YXlzIHJlcGxhY2UgcGF0aCB3aXRoIFwiL1wiIChldmVuIGlmIGlucHV0IHVybCBoYWQgbm8gcGF0aCBhdCBhbGwsIG9yIGhhZCBhIGRpZmZlcmVudCBvbmUpLlxyXG4gICAgYXV0aEludGVybmFsLmNvbmZpZy5lbXVsYXRvciA9IHsgdXJsOiBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke3BvcnRTdHJ9L2AgfTtcclxuICAgIGF1dGhJbnRlcm5hbC5zZXR0aW5ncy5hcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3RpbmcgPSB0cnVlO1xyXG4gICAgYXV0aEludGVybmFsLmVtdWxhdG9yQ29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgaG9zdCxcclxuICAgICAgICBwb3J0LFxyXG4gICAgICAgIHByb3RvY29sOiBwcm90b2NvbC5yZXBsYWNlKCc6JywgJycpLFxyXG4gICAgICAgIG9wdGlvbnM6IE9iamVjdC5mcmVlemUoeyBkaXNhYmxlV2FybmluZ3MgfSlcclxuICAgIH0pO1xyXG4gICAgaWYgKCFkaXNhYmxlV2FybmluZ3MpIHtcclxuICAgICAgICBlbWl0RW11bGF0b3JXYXJuaW5nKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sKHVybCkge1xyXG4gICAgY29uc3QgcHJvdG9jb2xFbmQgPSB1cmwuaW5kZXhPZignOicpO1xyXG4gICAgcmV0dXJuIHByb3RvY29sRW5kIDwgMCA/ICcnIDogdXJsLnN1YnN0cigwLCBwcm90b2NvbEVuZCArIDEpO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RIb3N0QW5kUG9ydCh1cmwpIHtcclxuICAgIGNvbnN0IHByb3RvY29sID0gZXh0cmFjdFByb3RvY29sKHVybCk7XHJcbiAgICBjb25zdCBhdXRob3JpdHkgPSAvKFxcL1xcLyk/KFtePyMvXSspLy5leGVjKHVybC5zdWJzdHIocHJvdG9jb2wubGVuZ3RoKSk7IC8vIEJldHdlZW4gLy8gYW5kIC8sID8gb3IgIy5cclxuICAgIGlmICghYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaG9zdDogJycsIHBvcnQ6IG51bGwgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhvc3RBbmRQb3J0ID0gYXV0aG9yaXR5WzJdLnNwbGl0KCdAJykucG9wKCkgfHwgJyc7IC8vIFN0cmlwIG91dCBcInVzZXJuYW1lOnBhc3N3b3JkQFwiLlxyXG4gICAgY29uc3QgYnJhY2tldGVkSVB2NiA9IC9eKFxcW1teXFxdXStcXF0pKDp8JCkvLmV4ZWMoaG9zdEFuZFBvcnQpO1xyXG4gICAgaWYgKGJyYWNrZXRlZElQdjYpIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gYnJhY2tldGVkSVB2NlsxXTtcclxuICAgICAgICByZXR1cm4geyBob3N0LCBwb3J0OiBwYXJzZVBvcnQoaG9zdEFuZFBvcnQuc3Vic3RyKGhvc3QubGVuZ3RoICsgMSkpIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBbaG9zdCwgcG9ydF0gPSBob3N0QW5kUG9ydC5zcGxpdCgnOicpO1xyXG4gICAgICAgIHJldHVybiB7IGhvc3QsIHBvcnQ6IHBhcnNlUG9ydChwb3J0KSB9O1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhcnNlUG9ydChwb3J0U3RyKSB7XHJcbiAgICBpZiAoIXBvcnRTdHIpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHBvcnQgPSBOdW1iZXIocG9ydFN0cik7XHJcbiAgICBpZiAoaXNOYU4ocG9ydCkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBwb3J0O1xyXG59XHJcbmZ1bmN0aW9uIGVtaXRFbXVsYXRvcldhcm5pbmcoKSB7XHJcbiAgICBmdW5jdGlvbiBhdHRhY2hCYW5uZXIoKSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgY29uc3Qgc3R5ID0gZWwuc3R5bGU7XHJcbiAgICAgICAgZWwuaW5uZXJUZXh0ID1cclxuICAgICAgICAgICAgJ1J1bm5pbmcgaW4gZW11bGF0b3IgbW9kZS4gRG8gbm90IHVzZSB3aXRoIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMuJztcclxuICAgICAgICBzdHkucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIHN0eS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICBzdHkuYmFja2dyb3VuZENvbG9yID0gJyNmZmZmZmYnO1xyXG4gICAgICAgIHN0eS5ib3JkZXIgPSAnLjFlbSBzb2xpZCAjMDAwMDAwJztcclxuICAgICAgICBzdHkuY29sb3IgPSAnI2I1MDAwMCc7XHJcbiAgICAgICAgc3R5LmJvdHRvbSA9ICcwcHgnO1xyXG4gICAgICAgIHN0eS5sZWZ0ID0gJzBweCc7XHJcbiAgICAgICAgc3R5Lm1hcmdpbiA9ICcwcHgnO1xyXG4gICAgICAgIHN0eS56SW5kZXggPSAnMTAwMDAnO1xyXG4gICAgICAgIHN0eS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmaXJlYmFzZS1lbXVsYXRvci13YXJuaW5nJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmluZm8gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1dBUk5JTkc6IFlvdSBhcmUgdXNpbmcgdGhlIEF1dGggRW11bGF0b3IsJyArXHJcbiAgICAgICAgICAgICcgd2hpY2ggaXMgaW50ZW5kZWQgZm9yIGxvY2FsIHRlc3Rpbmcgb25seS4gIERvIG5vdCB1c2Ugd2l0aCcgK1xyXG4gICAgICAgICAgICAnIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBhdHRhY2hCYW5uZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXR0YWNoQmFubmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjcmVkZW50aWFscyByZXR1cm5lZCBieSBhbiB7QGxpbmsgQXV0aFByb3ZpZGVyfS5cclxuICpcclxuICogQHJlbWFya3NcclxuICogSW1wbGVtZW50YXRpb25zIHNwZWNpZnkgdGhlIGRldGFpbHMgYWJvdXQgZWFjaCBhdXRoIHByb3ZpZGVyJ3MgY3JlZGVudGlhbCByZXF1aXJlbWVudHMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIEF1dGhDcmVkZW50aWFsIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgSUQgZm9yIHRoZSBjcmVkZW50aWFsLlxyXG4gICAgICpcclxuICAgICAqIEByZW1hcmtzXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ2ZhY2Vib29rLmNvbScsIG9yICdnb29nbGUuY29tJy5cclxuICAgICAqL1xyXG4gICAgcHJvdmlkZXJJZCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBhdXRoZW50aWNhdGlvbiBzaWduIGluIG1ldGhvZCBmb3IgdGhlIGNyZWRlbnRpYWwuXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIEZvciBleGFtcGxlLCB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9QQVNTV09SRCwgb3JcclxuICAgICAqIHtAbGluayBTaWduSW5NZXRob2R9LkVNQUlMX0xJTksuIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIHNpZ24taW4gbWV0aG9kXHJcbiAgICAgKiBpZGVudGlmaWVyIGFzIHJldHVybmVkIGluIHtAbGluayBmZXRjaFNpZ25Jbk1ldGhvZHNGb3JFbWFpbH0uXHJcbiAgICAgKi9cclxuICAgIHNpZ25Jbk1ldGhvZCkge1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJJZCA9IHByb3ZpZGVySWQ7XHJcbiAgICAgICAgdGhpcy5zaWduSW5NZXRob2QgPSBzaWduSW5NZXRob2Q7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBhIEpTT04tc2VyaWFsaXphYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlYnVnRmFpbCgnbm90IGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfZ2V0SWRUb2tlblJlc3BvbnNlKF9hdXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlYnVnRmFpbCgnbm90IGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfbGlua1RvSWRUb2tlbihfYXV0aCwgX2lkVG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoX2F1dGgpIHtcclxuICAgICAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZXNldFBhc3N3b3JkKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6cmVzZXRQYXNzd29yZFwiIC8qIFJFU0VUX1BBU1NXT1JEICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVtYWlsUGFzc3dvcmQoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czp1cGRhdGVcIiAvKiBTRVRfQUNDT1VOVF9JTkZPICovLCByZXF1ZXN0KTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBhcHBseUFjdGlvbkNvZGUkMShhdXRoLCByZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0KGF1dGgsIFwiUE9TVFwiIC8qIFBPU1QgKi8sIFwiL3YxL2FjY291bnRzOnVwZGF0ZVwiIC8qIFNFVF9BQ0NPVU5UX0lORk8gKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBhc3N3b3JkKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6c2lnbkluV2l0aFBhc3N3b3JkXCIgLyogU0lHTl9JTl9XSVRIX1BBU1NXT1JEICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHNlbmRPb2JDb2RlKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6c2VuZE9vYkNvZGVcIiAvKiBTRU5EX09PQl9DT0RFICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHNlbmRFbWFpbFZlcmlmaWNhdGlvbiQxKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBzZW5kT29iQ29kZShhdXRoLCByZXF1ZXN0KTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBzZW5kUGFzc3dvcmRSZXNldEVtYWlsJDEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIHNlbmRPb2JDb2RlKGF1dGgsIHJlcXVlc3QpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHNlbmRTaWduSW5MaW5rVG9FbWFpbCQxKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBzZW5kT29iQ29kZShhdXRoLCByZXF1ZXN0KTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlBbmRDaGFuZ2VFbWFpbChhdXRoLCByZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gc2VuZE9vYkNvZGUoYXV0aCwgcmVxdWVzdCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aEVtYWlsTGluayQxKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6c2lnbkluV2l0aEVtYWlsTGlua1wiIC8qIFNJR05fSU5fV0lUSF9FTUFJTF9MSU5LICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjEvYWNjb3VudHM6c2lnbkluV2l0aEVtYWlsTGlua1wiIC8qIFNJR05fSU5fV0lUSF9FTUFJTF9MSU5LICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjcmVkZW50aWFscyByZXR1cm5lZCBieSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IGZvclxyXG4gKiB7QGxpbmsgUHJvdmlkZXJJZH0uUEFTU1dPUkRcclxuICpcclxuICogQHJlbWFya3NcclxuICogQ292ZXJzIGJvdGgge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQgYW5kXHJcbiAqIHtAbGluayBTaWduSW5NZXRob2R9LkVNQUlMX0xJTksuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIEVtYWlsQXV0aENyZWRlbnRpYWwgZXh0ZW5kcyBBdXRoQ3JlZGVudGlhbCB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9lbWFpbCwgXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfcGFzc3dvcmQsIHNpZ25Jbk1ldGhvZCwgXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfdGVuYW50SWQgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoXCJwYXNzd29yZFwiIC8qIFBBU1NXT1JEICovLCBzaWduSW5NZXRob2QpO1xyXG4gICAgICAgIHRoaXMuX2VtYWlsID0gX2VtYWlsO1xyXG4gICAgICAgIHRoaXMuX3Bhc3N3b3JkID0gX3Bhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMuX3RlbmFudElkID0gX3RlbmFudElkO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc3RhdGljIF9mcm9tRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEVtYWlsQXV0aENyZWRlbnRpYWwoZW1haWwsIHBhc3N3b3JkLCBcInBhc3N3b3JkXCIgLyogRU1BSUxfUEFTU1dPUkQgKi8pO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc3RhdGljIF9mcm9tRW1haWxBbmRDb2RlKGVtYWlsLCBvb2JDb2RlLCB0ZW5hbnRJZCA9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEVtYWlsQXV0aENyZWRlbnRpYWwoZW1haWwsIG9vYkNvZGUsIFwiZW1haWxMaW5rXCIgLyogRU1BSUxfTElOSyAqLywgdGVuYW50SWQpO1xyXG4gICAgfVxyXG4gICAgLyoqIHtAaW5oZXJpdGRvYyBBdXRoQ3JlZGVudGlhbC50b0pTT059ICovXHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZW1haWw6IHRoaXMuX2VtYWlsLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5fcGFzc3dvcmQsXHJcbiAgICAgICAgICAgIHNpZ25Jbk1ldGhvZDogdGhpcy5zaWduSW5NZXRob2QsXHJcbiAgICAgICAgICAgIHRlbmFudElkOiB0aGlzLl90ZW5hbnRJZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBtZXRob2QgdG8gZGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdCBpbnRvIGFuIHtAbGluayAgQXV0aENyZWRlbnRpYWx9LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBqc29uIC0gRWl0aGVyIGBvYmplY3RgIG9yIHRoZSBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0LiBXaGVuIHN0cmluZyBpc1xyXG4gICAgICogcHJvdmlkZWQsIGBKU09OLnBhcnNlYCB3b3VsZCBiZSBjYWxsZWQgZmlyc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgSWYgdGhlIEpTT04gaW5wdXQgZG9lcyBub3QgcmVwcmVzZW50IGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0sIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0gdHlwZW9mIGpzb24gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShqc29uKSA6IGpzb247XHJcbiAgICAgICAgaWYgKChvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZW1haWwpICYmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmoucGFzc3dvcmQpKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouc2lnbkluTWV0aG9kID09PSBcInBhc3N3b3JkXCIgLyogRU1BSUxfUEFTU1dPUkQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mcm9tRW1haWxBbmRQYXNzd29yZChvYmouZW1haWwsIG9iai5wYXNzd29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAob2JqLnNpZ25Jbk1ldGhvZCA9PT0gXCJlbWFpbExpbmtcIiAvKiBFTUFJTF9MSU5LICovKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJvbUVtYWlsQW5kQ29kZShvYmouZW1haWwsIG9iai5wYXNzd29yZCwgb2JqLnRlbmFudElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGFzeW5jIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5zaWduSW5NZXRob2QpIHtcclxuICAgICAgICAgICAgY2FzZSBcInBhc3N3b3JkXCIgLyogRU1BSUxfUEFTU1dPUkQgKi86XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbkluV2l0aFBhc3N3b3JkKGF1dGgsIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuX3Bhc3N3b3JkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2FzZSBcImVtYWlsTGlua1wiIC8qIEVNQUlMX0xJTksgKi86XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbkluV2l0aEVtYWlsTGluayQxKGF1dGgsIHtcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgb29iQ29kZTogdGhpcy5fcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgX2ZhaWwoYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBhc3luYyBfbGlua1RvSWRUb2tlbihhdXRoLCBpZFRva2VuKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnNpZ25Jbk1ldGhvZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwicGFzc3dvcmRcIiAvKiBFTUFJTF9QQVNTV09SRCAqLzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbWFpbFBhc3N3b3JkKGF1dGgsIHtcclxuICAgICAgICAgICAgICAgICAgICBpZFRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLl9lbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5fcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjYXNlIFwiZW1haWxMaW5rXCIgLyogRU1BSUxfTElOSyAqLzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZyhhdXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgb29iQ29kZTogdGhpcy5fcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgX2ZhaWwoYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGgpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpzaWduSW5XaXRoSWRwXCIgLyogU0lHTl9JTl9XSVRIX0lEUCAqLywgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBJRFBfUkVRVUVTVF9VUkkkMSA9ICdodHRwOi8vbG9jYWxob3N0JztcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIE9BdXRoIGNyZWRlbnRpYWxzIHJldHVybmVkIGJ5IGFuIHtAbGluayBPQXV0aFByb3ZpZGVyfS5cclxuICpcclxuICogQHJlbWFya3NcclxuICogSW1wbGVtZW50YXRpb25zIHNwZWNpZnkgdGhlIGRldGFpbHMgYWJvdXQgZWFjaCBhdXRoIHByb3ZpZGVyJ3MgY3JlZGVudGlhbCByZXF1aXJlbWVudHMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIE9BdXRoQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nVG9rZW4gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc3RhdGljIF9mcm9tUGFyYW1zKHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IGNyZWQgPSBuZXcgT0F1dGhDcmVkZW50aWFsKHBhcmFtcy5wcm92aWRlcklkLCBwYXJhbXMuc2lnbkluTWV0aG9kKTtcclxuICAgICAgICBpZiAocGFyYW1zLmlkVG9rZW4gfHwgcGFyYW1zLmFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIE9BdXRoIDIgYW5kIGVpdGhlciBJRCB0b2tlbiBvciBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaWRUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgY3JlZC5pZFRva2VuID0gcGFyYW1zLmlkVG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5hY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgY3JlZC5hY2Nlc3NUb2tlbiA9IHBhcmFtcy5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBZGQgbm9uY2UgaWYgYXZhaWxhYmxlIGFuZCBubyBwZW5kaW5nVG9rZW4gaXMgcHJlc2VudC5cclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5ub25jZSAmJiAhcGFyYW1zLnBlbmRpbmdUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgY3JlZC5ub25jZSA9IHBhcmFtcy5ub25jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLnBlbmRpbmdUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgY3JlZC5wZW5kaW5nVG9rZW4gPSBwYXJhbXMucGVuZGluZ1Rva2VuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhcmFtcy5vYXV0aFRva2VuICYmIHBhcmFtcy5vYXV0aFRva2VuU2VjcmV0KSB7XHJcbiAgICAgICAgICAgIC8vIE9BdXRoIDEgYW5kIE9BdXRoIHRva2VuIHdpdGggdG9rZW4gc2VjcmV0XHJcbiAgICAgICAgICAgIGNyZWQuYWNjZXNzVG9rZW4gPSBwYXJhbXMub2F1dGhUb2tlbjtcclxuICAgICAgICAgICAgY3JlZC5zZWNyZXQgPSBwYXJhbXMub2F1dGhUb2tlblNlY3JldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9mYWlsKFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjcmVkO1xyXG4gICAgfVxyXG4gICAgLyoqIHtAaW5oZXJpdGRvYyBBdXRoQ3JlZGVudGlhbC50b0pTT059ICAqL1xyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkVG9rZW46IHRoaXMuaWRUb2tlbixcclxuICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMuYWNjZXNzVG9rZW4sXHJcbiAgICAgICAgICAgIHNlY3JldDogdGhpcy5zZWNyZXQsXHJcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxyXG4gICAgICAgICAgICBwZW5kaW5nVG9rZW46IHRoaXMucGVuZGluZ1Rva2VuLFxyXG4gICAgICAgICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWQsXHJcbiAgICAgICAgICAgIHNpZ25Jbk1ldGhvZDogdGhpcy5zaWduSW5NZXRob2RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRvIGRlc2VyaWFsaXplIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QgaW50byBhblxyXG4gICAgICoge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGpzb24gLSBJbnB1dCBjYW4gYmUgZWl0aGVyIE9iamVjdCBvciB0aGUgc3RyaW5naWZpZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdC5cclxuICAgICAqIFdoZW4gc3RyaW5nIGlzIHByb3ZpZGVkLCBKU09OLnBhcnNlIHdvdWxkIGJlIGNhbGxlZCBmaXJzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBJZiB0aGUgSlNPTiBpbnB1dCBkb2VzIG5vdCByZXByZXNlbnQgYW4ge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0sIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0gdHlwZW9mIGpzb24gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShqc29uKSA6IGpzb247XHJcbiAgICAgICAgY29uc3QgeyBwcm92aWRlcklkLCBzaWduSW5NZXRob2QgfSA9IG9iaiwgcmVzdCA9IF9fcmVzdChvYmosIFtcInByb3ZpZGVySWRcIiwgXCJzaWduSW5NZXRob2RcIl0pO1xyXG4gICAgICAgIGlmICghcHJvdmlkZXJJZCB8fCAhc2lnbkluTWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjcmVkID0gbmV3IE9BdXRoQ3JlZGVudGlhbChwcm92aWRlcklkLCBzaWduSW5NZXRob2QpO1xyXG4gICAgICAgIGNyZWQuaWRUb2tlbiA9IHJlc3QuaWRUb2tlbiB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgY3JlZC5hY2Nlc3NUb2tlbiA9IHJlc3QuYWNjZXNzVG9rZW4gfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGNyZWQuc2VjcmV0ID0gcmVzdC5zZWNyZXQ7XHJcbiAgICAgICAgY3JlZC5ub25jZSA9IHJlc3Qubm9uY2U7XHJcbiAgICAgICAgY3JlZC5wZW5kaW5nVG9rZW4gPSByZXN0LnBlbmRpbmdUb2tlbiB8fCBudWxsO1xyXG4gICAgICAgIHJldHVybiBjcmVkO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2dldElkVG9rZW5SZXNwb25zZShhdXRoKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfbGlua1RvSWRUb2tlbihhdXRoLCBpZFRva2VuKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XHJcbiAgICAgICAgcmVxdWVzdC5pZFRva2VuID0gaWRUb2tlbjtcclxuICAgICAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aCkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmJ1aWxkUmVxdWVzdCgpO1xyXG4gICAgICAgIHJlcXVlc3QuYXV0b0NyZWF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHJlcXVlc3QpO1xyXG4gICAgfVxyXG4gICAgYnVpbGRSZXF1ZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RVcmk6IElEUF9SRVFVRVNUX1VSSSQxLFxyXG4gICAgICAgICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1Rva2VuKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucGVuZGluZ1Rva2VuID0gdGhpcy5wZW5kaW5nVG9rZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwb3N0Qm9keSA9IHt9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pZFRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0Qm9keVsnaWRfdG9rZW4nXSA9IHRoaXMuaWRUb2tlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5hY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgcG9zdEJvZHlbJ2FjY2Vzc190b2tlbiddID0gdGhpcy5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWNyZXQpIHtcclxuICAgICAgICAgICAgICAgIHBvc3RCb2R5WydvYXV0aF90b2tlbl9zZWNyZXQnXSA9IHRoaXMuc2VjcmV0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBvc3RCb2R5Wydwcm92aWRlcklkJ10gPSB0aGlzLnByb3ZpZGVySWQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vbmNlICYmICF0aGlzLnBlbmRpbmdUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgcG9zdEJvZHlbJ25vbmNlJ10gPSB0aGlzLm5vbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcXVlc3QucG9zdEJvZHkgPSBxdWVyeXN0cmluZyhwb3N0Qm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNlbmRQaG9uZVZlcmlmaWNhdGlvbkNvZGUoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpzZW5kVmVyaWZpY2F0aW9uQ29kZVwiIC8qIFNFTkRfVkVSSUZJQ0FUSU9OX0NPREUgKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBob25lTnVtYmVyJDEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpzaWduSW5XaXRoUGhvbmVOdW1iZXJcIiAvKiBTSUdOX0lOX1dJVEhfUEhPTkVfTlVNQkVSICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoUGhvbmVOdW1iZXIkMShhdXRoLCByZXF1ZXN0KSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9wZXJmb3JtU2lnbkluUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpzaWduSW5XaXRoUGhvbmVOdW1iZXJcIiAvKiBTSUdOX0lOX1dJVEhfUEhPTkVfTlVNQkVSICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKHJlc3BvbnNlLnRlbXBvcmFyeVByb29mKSB7XHJcbiAgICAgICAgdGhyb3cgX21ha2VUYWdnZWRFcnJvcihhdXRoLCBcImFjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWxcIiAvKiBORUVEX0NPTkZJUk1BVElPTiAqLywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xyXG59XHJcbmNvbnN0IFZFUklGWV9QSE9ORV9OVU1CRVJfRk9SX0VYSVNUSU5HX0VSUk9SX01BUF8gPSB7XHJcbiAgICBbXCJVU0VSX05PVF9GT1VORFwiIC8qIFVTRVJfTk9UX0ZPVU5EICovXTogXCJ1c2VyLW5vdC1mb3VuZFwiIC8qIFVTRVJfREVMRVRFRCAqL1xyXG59O1xyXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlQaG9uZU51bWJlckZvckV4aXN0aW5nKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIGNvbnN0IGFwaVJlcXVlc3QgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QpLCB7IG9wZXJhdGlvbjogJ1JFQVVUSCcgfSk7XHJcbiAgICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0KGF1dGgsIFwiUE9TVFwiIC8qIFBPU1QgKi8sIFwiL3YxL2FjY291bnRzOnNpZ25JbldpdGhQaG9uZU51bWJlclwiIC8qIFNJR05fSU5fV0lUSF9QSE9ORV9OVU1CRVIgKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCBhcGlSZXF1ZXN0KSwgVkVSSUZZX1BIT05FX05VTUJFUl9GT1JfRVhJU1RJTkdfRVJST1JfTUFQXyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIGNyZWRlbnRpYWxzIHJldHVybmVkIGJ5IHtAbGluayBQaG9uZUF1dGhQcm92aWRlcn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIFBob25lQXV0aENyZWRlbnRpYWwgZXh0ZW5kcyBBdXRoQ3JlZGVudGlhbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcclxuICAgICAgICBzdXBlcihcInBob25lXCIgLyogUEhPTkUgKi8sIFwicGhvbmVcIiAvKiBQSE9ORSAqLyk7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBzdGF0aWMgX2Zyb21WZXJpZmljYXRpb24odmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBob25lQXV0aENyZWRlbnRpYWwoeyB2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSB9KTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHN0YXRpYyBfZnJvbVRva2VuUmVzcG9uc2UocGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQaG9uZUF1dGhDcmVkZW50aWFsKHsgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2dldElkVG9rZW5SZXNwb25zZShhdXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhQaG9uZU51bWJlciQxKGF1dGgsIHRoaXMuX21ha2VWZXJpZmljYXRpb25SZXF1ZXN0KCkpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2xpbmtUb0lkVG9rZW4oYXV0aCwgaWRUb2tlbikge1xyXG4gICAgICAgIHJldHVybiBsaW5rV2l0aFBob25lTnVtYmVyJDEoYXV0aCwgT2JqZWN0LmFzc2lnbih7IGlkVG9rZW4gfSwgdGhpcy5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKSkpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlcihhdXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmcoYXV0aCwgdGhpcy5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKSk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKSB7XHJcbiAgICAgICAgY29uc3QgeyB0ZW1wb3JhcnlQcm9vZiwgcGhvbmVOdW1iZXIsIHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlIH0gPSB0aGlzLnBhcmFtcztcclxuICAgICAgICBpZiAodGVtcG9yYXJ5UHJvb2YgJiYgcGhvbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdGVtcG9yYXJ5UHJvb2YsIHBob25lTnVtYmVyIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlc3Npb25JbmZvOiB2ZXJpZmljYXRpb25JZCxcclxuICAgICAgICAgICAgY29kZTogdmVyaWZpY2F0aW9uQ29kZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKioge0Bpbmhlcml0ZG9jIEF1dGhDcmVkZW50aWFsLnRvSlNPTn0gKi9cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBvYmogPSB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQ6IHRoaXMucHJvdmlkZXJJZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnBob25lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIG9iai5waG9uZU51bWJlciA9IHRoaXMucGFyYW1zLnBob25lTnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMudGVtcG9yYXJ5UHJvb2YpIHtcclxuICAgICAgICAgICAgb2JqLnRlbXBvcmFyeVByb29mID0gdGhpcy5wYXJhbXMudGVtcG9yYXJ5UHJvb2Y7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy52ZXJpZmljYXRpb25Db2RlKSB7XHJcbiAgICAgICAgICAgIG9iai52ZXJpZmljYXRpb25Db2RlID0gdGhpcy5wYXJhbXMudmVyaWZpY2F0aW9uQ29kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnZlcmlmaWNhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIG9iai52ZXJpZmljYXRpb25JZCA9IHRoaXMucGFyYW1zLnZlcmlmaWNhdGlvbklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgLyoqIEdlbmVyYXRlcyBhIHBob25lIGNyZWRlbnRpYWwgYmFzZWQgb24gYSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZy4gKi9cclxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyB2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSwgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0gPSBqc29uO1xyXG4gICAgICAgIGlmICghdmVyaWZpY2F0aW9uQ29kZSAmJlxyXG4gICAgICAgICAgICAhdmVyaWZpY2F0aW9uSWQgJiZcclxuICAgICAgICAgICAgIXBob25lTnVtYmVyICYmXHJcbiAgICAgICAgICAgICF0ZW1wb3JhcnlQcm9vZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQaG9uZUF1dGhDcmVkZW50aWFsKHtcclxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uSWQsXHJcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbkNvZGUsXHJcbiAgICAgICAgICAgIHBob25lTnVtYmVyLFxyXG4gICAgICAgICAgICB0ZW1wb3JhcnlQcm9vZlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBNYXBzIHRoZSBtb2RlIHN0cmluZyBpbiBhY3Rpb24gY29kZSBVUkwgdG8gQWN0aW9uIENvZGUgSW5mbyBvcGVyYXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBtb2RlXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZU1vZGUobW9kZSkge1xyXG4gICAgc3dpdGNoIChtb2RlKSB7XHJcbiAgICAgICAgY2FzZSAncmVjb3ZlckVtYWlsJzpcclxuICAgICAgICAgICAgcmV0dXJuIFwiUkVDT1ZFUl9FTUFJTFwiIC8qIFJFQ09WRVJfRU1BSUwgKi87XHJcbiAgICAgICAgY2FzZSAncmVzZXRQYXNzd29yZCc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlBBU1NXT1JEX1JFU0VUXCIgLyogUEFTU1dPUkRfUkVTRVQgKi87XHJcbiAgICAgICAgY2FzZSAnc2lnbkluJzpcclxuICAgICAgICAgICAgcmV0dXJuIFwiRU1BSUxfU0lHTklOXCIgLyogRU1BSUxfU0lHTklOICovO1xyXG4gICAgICAgIGNhc2UgJ3ZlcmlmeUVtYWlsJzpcclxuICAgICAgICAgICAgcmV0dXJuIFwiVkVSSUZZX0VNQUlMXCIgLyogVkVSSUZZX0VNQUlMICovO1xyXG4gICAgICAgIGNhc2UgJ3ZlcmlmeUFuZENoYW5nZUVtYWlsJzpcclxuICAgICAgICAgICAgcmV0dXJuIFwiVkVSSUZZX0FORF9DSEFOR0VfRU1BSUxcIiAvKiBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTCAqLztcclxuICAgICAgICBjYXNlICdyZXZlcnRTZWNvbmRGYWN0b3JBZGRpdGlvbic6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OXCIgLyogUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT04gKi87XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEhlbHBlciB0byBwYXJzZSBGREwgbGlua3NcclxuICpcclxuICogQHBhcmFtIHVybFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VEZWVwTGluayh1cmwpIHtcclxuICAgIGNvbnN0IGxpbmsgPSBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcodXJsKSlbJ2xpbmsnXTtcclxuICAgIC8vIERvdWJsZSBsaW5rIGNhc2UgKGF1dG9tYXRpYyByZWRpcmVjdCkuXHJcbiAgICBjb25zdCBkb3VibGVEZWVwTGluayA9IGxpbmtcclxuICAgICAgICA/IHF1ZXJ5c3RyaW5nRGVjb2RlKGV4dHJhY3RRdWVyeXN0cmluZyhsaW5rKSlbJ2RlZXBfbGlua19pZCddXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgLy8gaU9TIGN1c3RvbSBzY2hlbWUgbGlua3MuXHJcbiAgICBjb25zdCBpT1NEZWVwTGluayA9IHF1ZXJ5c3RyaW5nRGVjb2RlKGV4dHJhY3RRdWVyeXN0cmluZyh1cmwpKVsnZGVlcF9saW5rX2lkJ107XHJcbiAgICBjb25zdCBpT1NEb3VibGVEZWVwTGluayA9IGlPU0RlZXBMaW5rXHJcbiAgICAgICAgPyBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcoaU9TRGVlcExpbmspKVsnbGluayddXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgcmV0dXJuIGlPU0RvdWJsZURlZXBMaW5rIHx8IGlPU0RlZXBMaW5rIHx8IGRvdWJsZURlZXBMaW5rIHx8IGxpbmsgfHwgdXJsO1xyXG59XHJcbi8qKlxyXG4gKiBBIHV0aWxpdHkgY2xhc3MgdG8gcGFyc2UgZW1haWwgYWN0aW9uIFVSTHMgc3VjaCBhcyBwYXNzd29yZCByZXNldCwgZW1haWwgdmVyaWZpY2F0aW9uLFxyXG4gKiBlbWFpbCBsaW5rIHNpZ24gaW4sIGV0Yy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY2xhc3MgQWN0aW9uQ29kZVVSTCB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBhY3Rpb25MaW5rIC0gVGhlIGxpbmsgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBVUkwuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEFjdGlvbkNvZGVVUkx9IG9iamVjdCwgb3IgbnVsbCBpZiB0aGUgbGluayBpcyBpbnZhbGlkLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb25MaW5rKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcXVlcnlzdHJpbmdEZWNvZGUoZXh0cmFjdFF1ZXJ5c3RyaW5nKGFjdGlvbkxpbmspKTtcclxuICAgICAgICBjb25zdCBhcGlLZXkgPSAoX2EgPSBzZWFyY2hQYXJhbXNbXCJhcGlLZXlcIiAvKiBBUElfS0VZICovXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcclxuICAgICAgICBjb25zdCBjb2RlID0gKF9iID0gc2VhcmNoUGFyYW1zW1wib29iQ29kZVwiIC8qIENPREUgKi9dKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHBhcnNlTW9kZSgoX2MgPSBzZWFyY2hQYXJhbXNbXCJtb2RlXCIgLyogTU9ERSAqL10pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IG51bGwpO1xyXG4gICAgICAgIC8vIFZhbGlkYXRlIEFQSSBrZXksIGNvZGUgYW5kIG1vZGUuXHJcbiAgICAgICAgX2Fzc2VydChhcGlLZXkgJiYgY29kZSAmJiBvcGVyYXRpb24sIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLmNvbnRpbnVlVXJsID0gKF9kID0gc2VhcmNoUGFyYW1zW1wiY29udGludWVVcmxcIiAvKiBDT05USU5VRV9VUkwgKi9dKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBudWxsO1xyXG4gICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlID0gKF9lID0gc2VhcmNoUGFyYW1zW1wibGFuZ3VhZ2VDb2RlXCIgLyogTEFOR1VBR0VfQ09ERSAqL10pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IChfZiA9IHNlYXJjaFBhcmFtc1tcInRlbmFudElkXCIgLyogVEVOQU5UX0lEICovXSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHRoZSBlbWFpbCBhY3Rpb24gbGluayBzdHJpbmcgYW5kIHJldHVybnMgYW4ge0BsaW5rIEFjdGlvbkNvZGVVUkx9IGlmIHRoZSBsaW5rIGlzIHZhbGlkLFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgbnVsbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbGluayAgLSBUaGUgZW1haWwgYWN0aW9uIGxpbmsgc3RyaW5nLlxyXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBBY3Rpb25Db2RlVVJMfSBvYmplY3QsIG9yIG51bGwgaWYgdGhlIGxpbmsgaXMgaW52YWxpZC5cclxuICAgICAqXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwYXJzZUxpbmsobGluaykge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbkxpbmsgPSBwYXJzZURlZXBMaW5rKGxpbmspO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aW9uQ29kZVVSTChhY3Rpb25MaW5rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogUGFyc2VzIHRoZSBlbWFpbCBhY3Rpb24gbGluayBzdHJpbmcgYW5kIHJldHVybnMgYW4ge0BsaW5rIEFjdGlvbkNvZGVVUkx9IGlmXHJcbiAqIHRoZSBsaW5rIGlzIHZhbGlkLCBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUFjdGlvbkNvZGVVUkwobGluaykge1xyXG4gICAgcmV0dXJuIEFjdGlvbkNvZGVVUkwucGFyc2VMaW5rKGxpbmspO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyB7QGxpbmsgRW1haWxBdXRoQ3JlZGVudGlhbH0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIEVtYWlsQXV0aFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBBU1NXT1JELCBldmVuIGZvciBlbWFpbCBsaW5rLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJJZCA9IEVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0gdXNpbmcgYW4gZW1haWwgYW5kIHBhc3N3b3JkLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZW1haWwsIHBhc3N3b3JkKTtcclxuICAgICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aCwgYXV0aENyZWRlbnRpYWwpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbWFpbCAtIEVtYWlsIGFkZHJlc3MuXHJcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgLSBVc2VyIGFjY291bnQgcGFzc3dvcmQuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYXV0aCBwcm92aWRlciBjcmVkZW50aWFsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbChlbWFpbCwgcGFzc3dvcmQpIHtcclxuICAgICAgICByZXR1cm4gRW1haWxBdXRoQ3JlZGVudGlhbC5fZnJvbUVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IHVzaW5nIGFuIGVtYWlsIGFuZCBhbiBlbWFpbCBsaW5rIGFmdGVyIGEgc2lnbiBpbiB3aXRoXHJcbiAgICAgKiBlbWFpbCBsaW5rIG9wZXJhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogY29uc3QgYXV0aENyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsV2l0aExpbmsoYXV0aCwgZW1haWwsIGVtYWlsTGluayk7XHJcbiAgICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIGF1dGhDcmVkZW50aWFsKTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgZW1haWwpO1xyXG4gICAgICogLy8gT2J0YWluIGVtYWlsTGluayBmcm9tIHVzZXIuXHJcbiAgICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWwsIGVtYWlsTGluayk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UgdXNlZCB0byB2ZXJpZnkgdGhlIGxpbmsuXHJcbiAgICAgKiBAcGFyYW0gZW1haWwgLSBFbWFpbCBhZGRyZXNzLlxyXG4gICAgICogQHBhcmFtIGVtYWlsTGluayAtIFNpZ24taW4gZW1haWwgbGluay5cclxuICAgICAqIEByZXR1cm5zIC0gVGhlIGF1dGggcHJvdmlkZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxXaXRoTGluayhlbWFpbCwgZW1haWxMaW5rKSB7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uQ29kZVVybCA9IEFjdGlvbkNvZGVVUkwucGFyc2VMaW5rKGVtYWlsTGluayk7XHJcbiAgICAgICAgX2Fzc2VydChhY3Rpb25Db2RlVXJsLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8pO1xyXG4gICAgICAgIHJldHVybiBFbWFpbEF1dGhDcmVkZW50aWFsLl9mcm9tRW1haWxBbmRDb2RlKGVtYWlsLCBhY3Rpb25Db2RlVXJsLmNvZGUsIGFjdGlvbkNvZGVVcmwudGVuYW50SWQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5QQVNTV09SRCwgZXZlbiBmb3IgZW1haWwgbGluay5cclxuICovXHJcbkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEID0gXCJwYXNzd29yZFwiIC8qIFBBU1NXT1JEICovO1xyXG4vKipcclxuICogQWx3YXlzIHNldCB0byB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9QQVNTV09SRC5cclxuICovXHJcbkVtYWlsQXV0aFByb3ZpZGVyLkVNQUlMX1BBU1NXT1JEX1NJR05fSU5fTUVUSE9EID0gXCJwYXNzd29yZFwiIC8qIEVNQUlMX1BBU1NXT1JEICovO1xyXG4vKipcclxuICogQWx3YXlzIHNldCB0byB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9MSU5LLlxyXG4gKi9cclxuRW1haWxBdXRoUHJvdmlkZXIuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRCA9IFwiZW1haWxMaW5rXCIgLyogRU1BSUxfTElOSyAqLztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgRmVkZXJhdGVkIHByb3ZpZGVycyAoT0F1dGggKGluY2x1ZGluZyBPSURDKSwgU0FNTCkuXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgaXMgbm90IG1lYW50IHRvIGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY2xhc3MgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIGdlbmVyaWMgT0F1dGggcHJvdmlkZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwcm92aWRlcklkIC0gUHJvdmlkZXIgZm9yIHdoaWNoIGNyZWRlbnRpYWxzIHNob3VsZCBiZSBnZW5lcmF0ZWQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVySWQpIHtcclxuICAgICAgICB0aGlzLnByb3ZpZGVySWQgPSBwcm92aWRlcklkO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZUNvZGUgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLmN1c3RvbVBhcmFtZXRlcnMgPSB7fTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBsYW5ndWFnZSBnb2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZUNvZGUgLSBsYW5ndWFnZSBjb2RlXHJcbiAgICAgKi9cclxuICAgIHNldERlZmF1bHRMYW5ndWFnZShsYW5ndWFnZUNvZGUpIHtcclxuICAgICAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZUNvZGUgPSBsYW5ndWFnZUNvZGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIE9BdXRoIGN1c3RvbSBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gYW4gT0F1dGggcmVxdWVzdCBmb3IgcG9wdXAgYW5kIHJlZGlyZWN0IHNpZ24taW5cclxuICAgICAqIG9wZXJhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIEZvciBhIGRldGFpbGVkIGxpc3QsIGNoZWNrIHRoZSByZXNlcnZlZCByZXF1aXJlZCBPQXV0aCAyLjAgcGFyYW1ldGVycyBzdWNoIGFzIGBjbGllbnRfaWRgLFxyXG4gICAgICogYHJlZGlyZWN0X3VyaWAsIGBzY29wZWAsIGByZXNwb25zZV90eXBlYCwgYW5kIGBzdGF0ZWAgYXJlIG5vdCBhbGxvd2VkIGFuZCB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGN1c3RvbU9BdXRoUGFyYW1ldGVycyAtIFRoZSBjdXN0b20gT0F1dGggcGFyYW1ldGVycyB0byBwYXNzIGluIHRoZSBPQXV0aCByZXF1ZXN0LlxyXG4gICAgICovXHJcbiAgICBzZXRDdXN0b21QYXJhbWV0ZXJzKGN1c3RvbU9BdXRoUGFyYW1ldGVycykge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tUGFyYW1ldGVycyA9IGN1c3RvbU9BdXRoUGFyYW1ldGVycztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbGlzdCBvZiB7QGxpbmsgQ3VzdG9tUGFyYW1ldGVyc30uXHJcbiAgICAgKi9cclxuICAgIGdldEN1c3RvbVBhcmFtZXRlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tUGFyYW1ldGVycztcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tbW9uIGNvZGUgdG8gYWxsIE9BdXRoIHByb3ZpZGVycy4gVGhpcyBpcyBzZXBhcmF0ZSBmcm9tIHRoZVxyXG4gKiB7QGxpbmsgT0F1dGhQcm92aWRlcn0gc28gdGhhdCBjaGlsZCBwcm92aWRlcnMgKGxpa2VcclxuICoge0BsaW5rIEdvb2dsZUF1dGhQcm92aWRlcn0pIGRvbid0IGluaGVyaXQgdGhlIGBjcmVkZW50aWFsYCBpbnN0YW5jZSBtZXRob2QuXHJcbiAqIEluc3RlYWQsIHRoZXkgcmVseSBvbiBhIHN0YXRpYyBgY3JlZGVudGlhbGAgbWV0aG9kLlxyXG4gKi9cclxuY2xhc3MgQmFzZU9BdXRoUHJvdmlkZXIgZXh0ZW5kcyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5zY29wZXMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGFuIE9BdXRoIHNjb3BlIHRvIHRoZSBjcmVkZW50aWFsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzY29wZSAtIFByb3ZpZGVyIE9BdXRoIHNjb3BlIHRvIGFkZC5cclxuICAgICAqL1xyXG4gICAgYWRkU2NvcGUoc2NvcGUpIHtcclxuICAgICAgICAvLyBJZiBub3QgYWxyZWFkeSBhZGRlZCwgYWRkIHNjb3BlIHRvIGxpc3QuXHJcbiAgICAgICAgaWYgKCF0aGlzLnNjb3Blcy5pbmNsdWRlcyhzY29wZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zY29wZXMucHVzaChzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBsaXN0IG9mIE9BdXRoIHNjb3Blcy5cclxuICAgICAqL1xyXG4gICAgZ2V0U2NvcGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy5zY29wZXNdO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyBnZW5lcmljIHtAbGluayBPQXV0aENyZWRlbnRpYWx9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgT0F1dGhQcm92aWRlcignZ29vZ2xlLmNvbScpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdwcm9maWxlJyk7XHJcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xyXG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xyXG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcclxuICpcclxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxyXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcclxuICogaWYgKHJlc3VsdCkge1xyXG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXHJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xyXG4gKiAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgT0F1dGggQWNjZXNzIFRva2VuIGZvciB0aGUgcHJvdmlkZXIuXHJcbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XHJcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgT0F1dGhQcm92aWRlcignZ29vZ2xlLmNvbScpO1xyXG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xyXG4gKiBwcm92aWRlci5hZGRTY29wZSgnZW1haWwnKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcclxuICpcclxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXHJcbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBPQXV0aCBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBwcm92aWRlci5cclxuICogY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XHJcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuICogYGBgXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIE9BdXRoUHJvdmlkZXIgZXh0ZW5kcyBCYXNlT0F1dGhQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIEpTT04gc3RyaW5nIG9yIGEgcGxhaW4gb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIGpzb24gLSBBIHBsYWluIG9iamVjdCBvciBhIEpTT04gc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsRnJvbUpTT04oanNvbikge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHR5cGVvZiBqc29uID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoanNvbikgOiBqc29uO1xyXG4gICAgICAgIF9hc3NlcnQoJ3Byb3ZpZGVySWQnIGluIG9iaiAmJiAnc2lnbkluTWV0aG9kJyBpbiBvYmosIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyhvYmopO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIGdlbmVyaWMgT0F1dGggcHJvdmlkZXIncyBhY2Nlc3MgdG9rZW4gb3IgSUQgdG9rZW4uXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIFRoZSByYXcgbm9uY2UgaXMgcmVxdWlyZWQgd2hlbiBhbiBJRCB0b2tlbiB3aXRoIGEgbm9uY2UgZmllbGQgaXMgcHJvdmlkZWQuIFRoZSBTSEEtMjU2IGhhc2ggb2ZcclxuICAgICAqIHRoZSByYXcgbm9uY2UgbXVzdCBtYXRjaCB0aGUgbm9uY2UgZmllbGQgaW4gdGhlIElEIHRva2VuLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiAvLyBgZ29vZ2xlVXNlcmAgZnJvbSB0aGUgb25zdWNjZXNzIEdvb2dsZSBTaWduIEluIGNhbGxiYWNrLlxyXG4gICAgICogLy8gSW5pdGlhbGl6ZSBhIGdlbmVyYXRlIE9BdXRoIHByb3ZpZGVyIHdpdGggYSBgZ29vZ2xlLmNvbWAgcHJvdmlkZXJJZC5cclxuICAgICAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IE9BdXRoUHJvdmlkZXIoJ2dvb2dsZS5jb20nKTtcclxuICAgICAqIGNvbnN0IGNyZWRlbnRpYWwgPSBwcm92aWRlci5jcmVkZW50aWFsKHtcclxuICAgICAqICAgaWRUb2tlbjogZ29vZ2xlVXNlci5nZXRBdXRoUmVzcG9uc2UoKS5pZF90b2tlbixcclxuICAgICAqIH0pO1xyXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIC0gRWl0aGVyIHRoZSBvcHRpb25zIG9iamVjdCBjb250YWluaW5nIHRoZSBJRCB0b2tlbiwgYWNjZXNzIHRva2VuIGFuZCByYXcgbm9uY2VcclxuICAgICAqIG9yIHRoZSBJRCB0b2tlbiBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGNyZWRlbnRpYWwocGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWRlbnRpYWwoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCB7IG5vbmNlOiBwYXJhbXMucmF3Tm9uY2UgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqIEFuIGludGVybmFsIGNyZWRlbnRpYWwgbWV0aG9kIHRoYXQgYWNjZXB0cyBtb3JlIHBlcm1pc3NpdmUgb3B0aW9ucyAqL1xyXG4gICAgX2NyZWRlbnRpYWwocGFyYW1zKSB7XHJcbiAgICAgICAgX2Fzc2VydChwYXJhbXMuaWRUb2tlbiB8fCBwYXJhbXMuYWNjZXNzVG9rZW4sIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgLy8gRm9yIE9BdXRoQ3JlZGVudGlhbCwgc2lnbiBpbiBtZXRob2QgaXMgc2FtZSBhcyBwcm92aWRlcklkLlxyXG4gICAgICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCB7IHByb3ZpZGVySWQ6IHRoaXMucHJvdmlkZXJJZCwgc2lnbkluTWV0aG9kOiB0aGlzLnByb3ZpZGVySWQgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIE9BdXRoUHJvdmlkZXIub2F1dGhDcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh1c2VyQ3JlZGVudGlhbCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIEF1dGhFcnJvcn0gd2hpY2ggd2FzXHJcbiAgICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsRnJvbUVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIE9BdXRoUHJvdmlkZXIub2F1dGhDcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCgoZXJyb3IuY3VzdG9tRGF0YSB8fCB7fSkpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIG9hdXRoQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoeyBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZSB9KSB7XHJcbiAgICAgICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IG9hdXRoSWRUb2tlbiwgb2F1dGhBY2Nlc3NUb2tlbiwgb2F1dGhUb2tlblNlY3JldCwgcGVuZGluZ1Rva2VuLCBub25jZSwgcHJvdmlkZXJJZCB9ID0gdG9rZW5SZXNwb25zZTtcclxuICAgICAgICBpZiAoIW9hdXRoQWNjZXNzVG9rZW4gJiZcclxuICAgICAgICAgICAgIW9hdXRoVG9rZW5TZWNyZXQgJiZcclxuICAgICAgICAgICAgIW9hdXRoSWRUb2tlbiAmJlxyXG4gICAgICAgICAgICAhcGVuZGluZ1Rva2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXByb3ZpZGVySWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgT0F1dGhQcm92aWRlcihwcm92aWRlcklkKS5fY3JlZGVudGlhbCh7XHJcbiAgICAgICAgICAgICAgICBpZFRva2VuOiBvYXV0aElkVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogb2F1dGhBY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICAgIG5vbmNlLFxyXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Rva2VuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZvciB7QGxpbmsgUHJvdmlkZXJJZH0uRkFDRUJPT0suXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxyXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCd1c2VyX2JpcnRoZGF5Jyk7XHJcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBpZiAocmVzdWx0KSB7XHJcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXHJcbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XHJcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcclxuICpcclxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXHJcbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXHJcbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBGYWNlYm9va0F1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xyXG4gKiBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jbGFzcyBGYWNlYm9va0F1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZmFjZWJvb2suY29tXCIgLyogRkFDRUJPT0sgKi8pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgRmFjZWJvb2suXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAqIC8vIGBldmVudGAgZnJvbSB0aGUgRmFjZWJvb2sgYXV0aC5hdXRoUmVzcG9uc2VDaGFuZ2UgY2FsbGJhY2suXHJcbiAgICAgKiBjb25zdCBjcmVkZW50aWFsID0gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChldmVudC5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW4pO1xyXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gLSBGYWNlYm9vayBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsKGFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQ6IEZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICAgICBzaWduSW5NZXRob2Q6IEZhY2Vib29rQXV0aFByb3ZpZGVyLkZBQ0VCT09LX1NJR05fSU5fTUVUSE9ELFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHVzZXJDcmVkZW50aWFsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcclxuICAgICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoKGVycm9yLmN1c3RvbURhdGEgfHwge30pKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7IF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlIH0pIHtcclxuICAgICAgICBpZiAoIXRva2VuUmVzcG9uc2UgfHwgISgnb2F1dGhBY2Nlc3NUb2tlbicgaW4gdG9rZW5SZXNwb25zZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdG9rZW5SZXNwb25zZS5vYXV0aEFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh0b2tlblJlc3BvbnNlLm9hdXRoQWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LkZBQ0VCT09LLiAqL1xyXG5GYWNlYm9va0F1dGhQcm92aWRlci5GQUNFQk9PS19TSUdOX0lOX01FVEhPRCA9IFwiZmFjZWJvb2suY29tXCIgLyogRkFDRUJPT0sgKi87XHJcbi8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5GQUNFQk9PSy4gKi9cclxuRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQgPSBcImZhY2Vib29rLmNvbVwiIC8qIEZBQ0VCT09LICovO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4gYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZm9yIHtAbGluayBQcm92aWRlcklkfS5HT09HTEUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxyXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHb29nbGVBdXRoUHJvdmlkZXIoKTtcclxuICogLy8gU3RhcnQgYSBzaWduIGluIHByb2Nlc3MgZm9yIGFuIHVuYXV0aGVudGljYXRlZCB1c2VyLlxyXG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xyXG4gKiBwcm92aWRlci5hZGRTY29wZSgnZW1haWwnKTtcclxuICogYXdhaXQgc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyKTtcclxuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXHJcbiAqXHJcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XHJcbiAqIGlmIChyZXN1bHQpIHtcclxuICogICAvLyBUaGlzIGlzIHRoZSBzaWduZWQtaW4gdXNlclxyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEdvb2dsZSBBY2Nlc3MgVG9rZW4uXHJcbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IEdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xyXG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXHJcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEdvb2dsZUF1dGhQcm92aWRlcigpO1xyXG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xyXG4gKiBwcm92aWRlci5hZGRTY29wZSgnZW1haWwnKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcclxuICpcclxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXHJcbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBHb29nbGUgQWNjZXNzIFRva2VuLlxyXG4gKiBjb25zdCBjcmVkZW50aWFsID0gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XHJcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIEdvb2dsZUF1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZ29vZ2xlLmNvbVwiIC8qIEdPT0dMRSAqLyk7XHJcbiAgICAgICAgdGhpcy5hZGRTY29wZSgncHJvZmlsZScpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgR29vZ2xlLiBBdCBsZWFzdCBvbmUgb2YgSUQgdG9rZW4gYW5kIGFjY2VzcyB0b2tlbiBpcyByZXF1aXJlZC5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogLy8gXFxgZ29vZ2xlVXNlclxcYCBmcm9tIHRoZSBvbnN1Y2Nlc3MgR29vZ2xlIFNpZ24gSW4gY2FsbGJhY2suXHJcbiAgICAgKiBjb25zdCBjcmVkZW50aWFsID0gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZ29vZ2xlVXNlci5nZXRBdXRoUmVzcG9uc2UoKS5pZF90b2tlbik7XHJcbiAgICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZFRva2VuIC0gR29vZ2xlIElEIHRva2VuLlxyXG4gICAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gR29vZ2xlIGFjY2VzcyB0b2tlbi5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWwoaWRUb2tlbiwgYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gT0F1dGhDcmVkZW50aWFsLl9mcm9tUGFyYW1zKHtcclxuICAgICAgICAgICAgcHJvdmlkZXJJZDogR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICAgICBzaWduSW5NZXRob2Q6IEdvb2dsZUF1dGhQcm92aWRlci5HT09HTEVfU0lHTl9JTl9NRVRIT0QsXHJcbiAgICAgICAgICAgIGlkVG9rZW4sXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQodXNlckNyZWRlbnRpYWwpIHtcclxuICAgICAgICByZXR1cm4gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHVzZXJDcmVkZW50aWFsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcclxuICAgICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoeyBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZSB9KSB7XHJcbiAgICAgICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IG9hdXRoSWRUb2tlbiwgb2F1dGhBY2Nlc3NUb2tlbiB9ID0gdG9rZW5SZXNwb25zZTtcclxuICAgICAgICBpZiAoIW9hdXRoSWRUb2tlbiAmJiAhb2F1dGhBY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGFuIG9hdXRoIDEgY3JlZGVudGlhbCBvciBhIHBob25lIGNyZWRlbnRpYWxcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChvYXV0aElkVG9rZW4sIG9hdXRoQWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LkdPT0dMRS4gKi9cclxuR29vZ2xlQXV0aFByb3ZpZGVyLkdPT0dMRV9TSUdOX0lOX01FVEhPRCA9IFwiZ29vZ2xlLmNvbVwiIC8qIEdPT0dMRSAqLztcclxuLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LkdPT0dMRS4gKi9cclxuR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEID0gXCJnb29nbGUuY29tXCIgLyogR09PR0xFICovO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZm9yIHtAbGluayBQcm92aWRlcklkfS5HSVRIVUIuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIEdpdEh1YiByZXF1aXJlcyBhbiBPQXV0aCAyLjAgcmVkaXJlY3QsIHNvIHlvdSBjYW4gZWl0aGVyIGhhbmRsZSB0aGUgcmVkaXJlY3QgZGlyZWN0bHksIG9yIHVzZVxyXG4gKiB0aGUge0BsaW5rIHNpZ25JbldpdGhQb3B1cH0gaGFuZGxlcjpcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXHJcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEdpdGh1YkF1dGhQcm92aWRlcigpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdyZXBvJyk7XHJcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBpZiAocmVzdWx0KSB7XHJcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxyXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBHaXRodWJBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQocmVzdWx0KTtcclxuICogICBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogLy8gU2lnbiBpbiB1c2luZyBhIHBvcHVwLlxyXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHaXRodWJBdXRoUHJvdmlkZXIoKTtcclxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3JlcG8nKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcclxuICpcclxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXHJcbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxyXG4gKiBjb25zdCBjcmVkZW50aWFsID0gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XHJcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuICogYGBgXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIEdpdGh1YkF1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZ2l0aHViLmNvbVwiIC8qIEdJVEhVQiAqLyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBjcmVkZW50aWFsIGZvciBHaXRodWIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gR2l0aHViIGFjY2VzcyB0b2tlbi5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWwoYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gT0F1dGhDcmVkZW50aWFsLl9mcm9tUGFyYW1zKHtcclxuICAgICAgICAgICAgcHJvdmlkZXJJZDogR2l0aHViQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICAgICBzaWduSW5NZXRob2Q6IEdpdGh1YkF1dGhQcm92aWRlci5HSVRIVUJfU0lHTl9JTl9NRVRIT0QsXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQodXNlckNyZWRlbnRpYWwpIHtcclxuICAgICAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHVzZXJDcmVkZW50aWFsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcclxuICAgICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoeyBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZSB9KSB7XHJcbiAgICAgICAgaWYgKCF0b2tlblJlc3BvbnNlIHx8ICEoJ29hdXRoQWNjZXNzVG9rZW4nIGluIHRva2VuUmVzcG9uc2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRva2VuUmVzcG9uc2Uub2F1dGhBY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEdpdGh1YkF1dGhQcm92aWRlci5jcmVkZW50aWFsKHRva2VuUmVzcG9uc2Uub2F1dGhBY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uR0lUSFVCLiAqL1xyXG5HaXRodWJBdXRoUHJvdmlkZXIuR0lUSFVCX1NJR05fSU5fTUVUSE9EID0gXCJnaXRodWIuY29tXCIgLyogR0lUSFVCICovO1xyXG4vKiogQWx3YXlzIHNldCB0byB7QGxpbmsgUHJvdmlkZXJJZH0uR0lUSFVCLiAqL1xyXG5HaXRodWJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQgPSBcImdpdGh1Yi5jb21cIiAvKiBHSVRIVUIgKi87XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IElEUF9SRVFVRVNUX1VSSSA9ICdodHRwOi8vbG9jYWxob3N0JztcclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIFNBTUxBdXRoQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbikge1xyXG4gICAgICAgIHN1cGVyKHByb3ZpZGVySWQsIHByb3ZpZGVySWQpO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Rva2VuID0gcGVuZGluZ1Rva2VuO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2dldElkVG9rZW5SZXNwb25zZShhdXRoKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfbGlua1RvSWRUb2tlbihhdXRoLCBpZFRva2VuKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XHJcbiAgICAgICAgcmVxdWVzdC5pZFRva2VuID0gaWRUb2tlbjtcclxuICAgICAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aCkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmJ1aWxkUmVxdWVzdCgpO1xyXG4gICAgICAgIHJlcXVlc3QuYXV0b0NyZWF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHJlcXVlc3QpO1xyXG4gICAgfVxyXG4gICAgLyoqIHtAaW5oZXJpdGRvYyBBdXRoQ3JlZGVudGlhbC50b0pTT059ICAqL1xyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNpZ25Jbk1ldGhvZDogdGhpcy5zaWduSW5NZXRob2QsXHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQ6IHRoaXMucHJvdmlkZXJJZCxcclxuICAgICAgICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBlbmRpbmdUb2tlblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBtZXRob2QgdG8gZGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdCBpbnRvIGFuXHJcbiAgICAgKiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ganNvbiAtIElucHV0IGNhbiBiZSBlaXRoZXIgT2JqZWN0IG9yIHRoZSBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0LlxyXG4gICAgICogV2hlbiBzdHJpbmcgaXMgcHJvdmlkZWQsIEpTT04ucGFyc2Ugd291bGQgYmUgY2FsbGVkIGZpcnN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIElmIHRoZSBKU09OIGlucHV0IGRvZXMgbm90IHJlcHJlc2VudCBhbiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfSwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcclxuICAgICAgICBjb25zdCBvYmogPSB0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbjtcclxuICAgICAgICBjb25zdCB7IHByb3ZpZGVySWQsIHNpZ25Jbk1ldGhvZCwgcGVuZGluZ1Rva2VuIH0gPSBvYmo7XHJcbiAgICAgICAgaWYgKCFwcm92aWRlcklkIHx8XHJcbiAgICAgICAgICAgICFzaWduSW5NZXRob2QgfHxcclxuICAgICAgICAgICAgIXBlbmRpbmdUb2tlbiB8fFxyXG4gICAgICAgICAgICBwcm92aWRlcklkICE9PSBzaWduSW5NZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgU0FNTEF1dGhDcmVkZW50aWFsKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBzdGF0aWMgbWV0aG9kIHRvIGF2b2lkIGV4cG9zaW5nIHRoZSBjb25zdHJ1Y3RvciB0byBlbmQgdXNlcnMuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBfY3JlYXRlKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgU0FNTEF1dGhDcmVkZW50aWFsKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbik7XHJcbiAgICB9XHJcbiAgICBidWlsZFJlcXVlc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWVzdFVyaTogSURQX1JFUVVFU1RfVVJJLFxyXG4gICAgICAgICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZSxcclxuICAgICAgICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBlbmRpbmdUb2tlblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgU0FNTF9QUk9WSURFUl9QUkVGSVggPSAnc2FtbC4nO1xyXG4vKipcclxuICogQW4ge0BsaW5rIEF1dGhQcm92aWRlcn0gZm9yIFNBTUwuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIFNBTUxBdXRoUHJvdmlkZXIgZXh0ZW5kcyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3Rvci4gVGhlIHByb3ZpZGVySWQgbXVzdCBzdGFydCB3aXRoIFwic2FtbC5cIlxyXG4gICAgICogQHBhcmFtIHByb3ZpZGVySWQgLSBTQU1MIHByb3ZpZGVyIElELlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcklkKSB7XHJcbiAgICAgICAgX2Fzc2VydChwcm92aWRlcklkLnN0YXJ0c1dpdGgoU0FNTF9QUk9WSURFUl9QUkVGSVgpLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8pO1xyXG4gICAgICAgIHN1cGVyKHByb3ZpZGVySWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfSBhZnRlciBhXHJcbiAgICAgKiBzdWNjZXNzZnVsIFNBTUwgZmxvdyBjb21wbGV0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgdG8gZ2V0IGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0sIHlvdSBjb3VsZCB3cml0ZSB0aGVcclxuICAgICAqIGZvbGxvd2luZyBjb2RlOlxyXG4gICAgICpcclxuICAgICAqIGBgYGpzXHJcbiAgICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhQb3B1cChhdXRoLCBzYW1sUHJvdmlkZXIpO1xyXG4gICAgICogY29uc3QgY3JlZGVudGlhbCA9IFNBTUxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQodXNlckNyZWRlbnRpYWwpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIFNBTUxBdXRoUHJvdmlkZXIuc2FtbENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHVzZXJDcmVkZW50aWFsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcclxuICAgICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gU0FNTEF1dGhQcm92aWRlci5zYW1sQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoKGVycm9yLmN1c3RvbURhdGEgfHwge30pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IGZyb20gYSBKU09OIHN0cmluZyBvciBhIHBsYWluIG9iamVjdC5cclxuICAgICAqIEBwYXJhbSBqc29uIC0gQSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21KU09OKGpzb24pIHtcclxuICAgICAgICBjb25zdCBjcmVkZW50aWFsID0gU0FNTEF1dGhDcmVkZW50aWFsLmZyb21KU09OKGpzb24pO1xyXG4gICAgICAgIF9hc3NlcnQoY3JlZGVudGlhbCwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgICAgICByZXR1cm4gY3JlZGVudGlhbDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzYW1sQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoeyBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZSB9KSB7XHJcbiAgICAgICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHBlbmRpbmdUb2tlbiwgcHJvdmlkZXJJZCB9ID0gdG9rZW5SZXNwb25zZTtcclxuICAgICAgICBpZiAoIXBlbmRpbmdUb2tlbiB8fCAhcHJvdmlkZXJJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIFNBTUxBdXRoQ3JlZGVudGlhbC5fY3JlYXRlKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZm9yIHtAbGluayBQcm92aWRlcklkfS5UV0lUVEVSLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgVHdpdHRlckF1dGhQcm92aWRlcigpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBpZiAocmVzdWx0KSB7XHJcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBUd2l0dGVyIEFjY2VzcyBUb2tlbiBhbmQgU2VjcmV0LlxyXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XHJcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG4gKiAgIGNvbnN0IHNlY3JldCA9IGNyZWRlbnRpYWwuc2VjcmV0O1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgVHdpdHRlckF1dGhQcm92aWRlcigpO1xyXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xyXG4gKlxyXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cclxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xyXG4gKiAvLyBUaGlzIGdpdmVzIHlvdSBhIFR3aXR0ZXIgQWNjZXNzIFRva2VuIGFuZCBTZWNyZXQuXHJcbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XHJcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuICogY29uc3Qgc2VjcmV0ID0gY3JlZGVudGlhbC5zZWNyZXQ7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jbGFzcyBUd2l0dGVyQXV0aFByb3ZpZGVyIGV4dGVuZHMgQmFzZU9BdXRoUHJvdmlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ0d2l0dGVyLmNvbVwiIC8qIFRXSVRURVIgKi8pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgVHdpdHRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUd2l0dGVyIGFjY2VzcyB0b2tlbi5cclxuICAgICAqIEBwYXJhbSBzZWNyZXQgLSBUd2l0dGVyIHNlY3JldC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWwodG9rZW4sIHNlY3JldCkge1xyXG4gICAgICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMoe1xyXG4gICAgICAgICAgICBwcm92aWRlcklkOiBUd2l0dGVyQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICAgICBzaWduSW5NZXRob2Q6IFR3aXR0ZXJBdXRoUHJvdmlkZXIuVFdJVFRFUl9TSUdOX0lOX01FVEhPRCxcclxuICAgICAgICAgICAgb2F1dGhUb2tlbjogdG9rZW4sXHJcbiAgICAgICAgICAgIG9hdXRoVG9rZW5TZWNyZXQ6IHNlY3JldFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIFR3aXR0ZXJBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QodXNlckNyZWRlbnRpYWwpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xyXG4gICAgICogdGhyb3duIGR1cmluZyBhIHNpZ24taW4sIGxpbmssIG9yIHJlYXV0aGVudGljYXRlIG9wZXJhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21FcnJvcihlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoeyBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZSB9KSB7XHJcbiAgICAgICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IG9hdXRoQWNjZXNzVG9rZW4sIG9hdXRoVG9rZW5TZWNyZXQgfSA9IHRva2VuUmVzcG9uc2U7XHJcbiAgICAgICAgaWYgKCFvYXV0aEFjY2Vzc1Rva2VuIHx8ICFvYXV0aFRva2VuU2VjcmV0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsKG9hdXRoQWNjZXNzVG9rZW4sIG9hdXRoVG9rZW5TZWNyZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LlRXSVRURVIuICovXHJcblR3aXR0ZXJBdXRoUHJvdmlkZXIuVFdJVFRFUl9TSUdOX0lOX01FVEhPRCA9IFwidHdpdHRlci5jb21cIiAvKiBUV0lUVEVSICovO1xyXG4vKiogQWx3YXlzIHNldCB0byB7QGxpbmsgUHJvdmlkZXJJZH0uVFdJVFRFUi4gKi9cclxuVHdpdHRlckF1dGhQcm92aWRlci5QUk9WSURFUl9JRCA9IFwidHdpdHRlci5jb21cIiAvKiBUV0lUVEVSICovO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzaWduVXAoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czpzaWduVXBcIiAvKiBTSUdOX1VQICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFVzZXJDcmVkZW50aWFsSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnVzZXIgPSBwYXJhbXMudXNlcjtcclxuICAgICAgICB0aGlzLnByb3ZpZGVySWQgPSBwYXJhbXMucHJvdmlkZXJJZDtcclxuICAgICAgICB0aGlzLl90b2tlblJlc3BvbnNlID0gcGFyYW1zLl90b2tlblJlc3BvbnNlO1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uVHlwZSA9IHBhcmFtcy5vcGVyYXRpb25UeXBlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIF9mcm9tSWRUb2tlblJlc3BvbnNlKGF1dGgsIG9wZXJhdGlvblR5cGUsIGlkVG9rZW5SZXNwb25zZSwgaXNBbm9ueW1vdXMgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VySW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShhdXRoLCBpZFRva2VuUmVzcG9uc2UsIGlzQW5vbnltb3VzKTtcclxuICAgICAgICBjb25zdCBwcm92aWRlcklkID0gcHJvdmlkZXJJZEZvclJlc3BvbnNlKGlkVG9rZW5SZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgdXNlckNyZWQgPSBuZXcgVXNlckNyZWRlbnRpYWxJbXBsKHtcclxuICAgICAgICAgICAgdXNlcixcclxuICAgICAgICAgICAgcHJvdmlkZXJJZCxcclxuICAgICAgICAgICAgX3Rva2VuUmVzcG9uc2U6IGlkVG9rZW5SZXNwb25zZSxcclxuICAgICAgICAgICAgb3BlcmF0aW9uVHlwZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB1c2VyQ3JlZDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBfZm9yT3BlcmF0aW9uKHVzZXIsIG9wZXJhdGlvblR5cGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgYXdhaXQgdXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkocmVzcG9uc2UsIC8qIHJlbG9hZCAqLyB0cnVlKTtcclxuICAgICAgICBjb25zdCBwcm92aWRlcklkID0gcHJvdmlkZXJJZEZvclJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVzZXJDcmVkZW50aWFsSW1wbCh7XHJcbiAgICAgICAgICAgIHVzZXIsXHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQsXHJcbiAgICAgICAgICAgIF90b2tlblJlc3BvbnNlOiByZXNwb25zZSxcclxuICAgICAgICAgICAgb3BlcmF0aW9uVHlwZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHByb3ZpZGVySWRGb3JSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgaWYgKHJlc3BvbnNlLnByb3ZpZGVySWQpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucHJvdmlkZXJJZDtcclxuICAgIH1cclxuICAgIGlmICgncGhvbmVOdW1iZXInIGluIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIFwicGhvbmVcIiAvKiBQSE9ORSAqLztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiBhcyBhbiBhbm9ueW1vdXMgdXNlci5cclxuICpcclxuICogQHJlbWFya3NcclxuICogSWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBhbm9ueW1vdXMgdXNlciBzaWduZWQgaW4sIHRoYXQgdXNlciB3aWxsIGJlIHJldHVybmVkOyBvdGhlcndpc2UsIGFcclxuICogbmV3IGFub255bW91cyB1c2VyIGlkZW50aXR5IHdpbGwgYmUgY3JlYXRlZCBhbmQgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2lnbkluQW5vbnltb3VzbHkoYXV0aCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xyXG4gICAgYXdhaXQgYXV0aEludGVybmFsLl9pbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICBpZiAoKF9hID0gYXV0aEludGVybmFsLmN1cnJlbnRVc2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNBbm9ueW1vdXMpIHtcclxuICAgICAgICAvLyBJZiBhbiBhbm9ueW1vdXMgdXNlciBpcyBhbHJlYWR5IHNpZ25lZCBpbiwgbm8gbmVlZCB0byBzaWduIHRoZW0gaW4gYWdhaW4uXHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyQ3JlZGVudGlhbEltcGwoe1xyXG4gICAgICAgICAgICB1c2VyOiBhdXRoSW50ZXJuYWwuY3VycmVudFVzZXIsXHJcbiAgICAgICAgICAgIHByb3ZpZGVySWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG9wZXJhdGlvblR5cGU6IFwic2lnbkluXCIgLyogU0lHTl9JTiAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduVXAoYXV0aEludGVybmFsLCB7XHJcbiAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBVc2VyQ3JlZGVudGlhbEltcGwuX2Zyb21JZFRva2VuUmVzcG9uc2UoYXV0aEludGVybmFsLCBcInNpZ25JblwiIC8qIFNJR05fSU4gKi8sIHJlc3BvbnNlLCB0cnVlKTtcclxuICAgIGF3YWl0IGF1dGhJbnRlcm5hbC5fdXBkYXRlQ3VycmVudFVzZXIodXNlckNyZWRlbnRpYWwudXNlcik7XHJcbiAgICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTXVsdGlGYWN0b3JFcnJvciBleHRlbmRzIEZpcmViYXNlRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoYXV0aCwgZXJyb3IsIG9wZXJhdGlvblR5cGUsIHVzZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgc3VwZXIoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb25UeXBlID0gb3BlcmF0aW9uVHlwZTtcclxuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE11bHRpRmFjdG9yRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7XHJcbiAgICAgICAgICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcclxuICAgICAgICAgICAgdGVuYW50SWQ6IChfYSA9IGF1dGgudGVuYW50SWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgX3NlcnZlclJlc3BvbnNlOiBlcnJvci5jdXN0b21EYXRhLl9zZXJ2ZXJSZXNwb25zZSxcclxuICAgICAgICAgICAgb3BlcmF0aW9uVHlwZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2Zyb21FcnJvckFuZE9wZXJhdGlvbihhdXRoLCBlcnJvciwgb3BlcmF0aW9uVHlwZSwgdXNlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgTXVsdGlGYWN0b3JFcnJvcihhdXRoLCBlcnJvciwgb3BlcmF0aW9uVHlwZSwgdXNlcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX3Byb2Nlc3NDcmVkZW50aWFsU2F2aW5nTWZhQ29udGV4dElmTmVjZXNzYXJ5KGF1dGgsIG9wZXJhdGlvblR5cGUsIGNyZWRlbnRpYWwsIHVzZXIpIHtcclxuICAgIGNvbnN0IGlkVG9rZW5Qcm92aWRlciA9IG9wZXJhdGlvblR5cGUgPT09IFwicmVhdXRoZW50aWNhdGVcIiAvKiBSRUFVVEhFTlRJQ0FURSAqL1xyXG4gICAgICAgID8gY3JlZGVudGlhbC5fZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGgpXHJcbiAgICAgICAgOiBjcmVkZW50aWFsLl9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aCk7XHJcbiAgICByZXR1cm4gaWRUb2tlblByb3ZpZGVyLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gYGF1dGgvJHtcIm11bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkXCIgLyogTUZBX1JFUVVJUkVEICovfWApIHtcclxuICAgICAgICAgICAgdGhyb3cgTXVsdGlGYWN0b3JFcnJvci5fZnJvbUVycm9yQW5kT3BlcmF0aW9uKGF1dGgsIGVycm9yLCBvcGVyYXRpb25UeXBlLCB1c2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGFrZXMgYSBzZXQgb2YgVXNlckluZm8gcHJvdmlkZXIgZGF0YSBhbmQgY29udmVydHMgaXQgdG8gYSBzZXQgb2YgbmFtZXNcclxuICovXHJcbmZ1bmN0aW9uIHByb3ZpZGVyRGF0YUFzTmFtZXMocHJvdmlkZXJEYXRhKSB7XHJcbiAgICByZXR1cm4gbmV3IFNldChwcm92aWRlckRhdGFcclxuICAgICAgICAubWFwKCh7IHByb3ZpZGVySWQgfSkgPT4gcHJvdmlkZXJJZClcclxuICAgICAgICAuZmlsdGVyKHBpZCA9PiAhIXBpZCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBVbmxpbmtzIGEgcHJvdmlkZXIgZnJvbSBhIHVzZXIgYWNjb3VudC5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIHByb3ZpZGVySWQgLSBUaGUgcHJvdmlkZXIgdG8gdW5saW5rLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB1bmxpbmsodXNlciwgcHJvdmlkZXJJZCkge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgYXdhaXQgX2Fzc2VydExpbmtlZFN0YXR1cyh0cnVlLCB1c2VySW50ZXJuYWwsIHByb3ZpZGVySWQpO1xyXG4gICAgY29uc3QgeyBwcm92aWRlclVzZXJJbmZvIH0gPSBhd2FpdCBkZWxldGVMaW5rZWRBY2NvdW50cyh1c2VySW50ZXJuYWwuYXV0aCwge1xyXG4gICAgICAgIGlkVG9rZW46IGF3YWl0IHVzZXJJbnRlcm5hbC5nZXRJZFRva2VuKCksXHJcbiAgICAgICAgZGVsZXRlUHJvdmlkZXI6IFtwcm92aWRlcklkXVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBwcm92aWRlcnNMZWZ0ID0gcHJvdmlkZXJEYXRhQXNOYW1lcyhwcm92aWRlclVzZXJJbmZvIHx8IFtdKTtcclxuICAgIHVzZXJJbnRlcm5hbC5wcm92aWRlckRhdGEgPSB1c2VySW50ZXJuYWwucHJvdmlkZXJEYXRhLmZpbHRlcihwZCA9PiBwcm92aWRlcnNMZWZ0LmhhcyhwZC5wcm92aWRlcklkKSk7XHJcbiAgICBpZiAoIXByb3ZpZGVyc0xlZnQuaGFzKFwicGhvbmVcIiAvKiBQSE9ORSAqLykpIHtcclxuICAgICAgICB1c2VySW50ZXJuYWwucGhvbmVOdW1iZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgdXNlckludGVybmFsLmF1dGguX3BlcnNpc3RVc2VySWZDdXJyZW50KHVzZXJJbnRlcm5hbCk7XHJcbiAgICByZXR1cm4gdXNlckludGVybmFsO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIF9saW5rJDEodXNlciwgY3JlZGVudGlhbCwgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodXNlciwgY3JlZGVudGlhbC5fbGlua1RvSWRUb2tlbih1c2VyLmF1dGgsIGF3YWl0IHVzZXIuZ2V0SWRUb2tlbigpKSwgYnlwYXNzQXV0aFN0YXRlKTtcclxuICAgIHJldHVybiBVc2VyQ3JlZGVudGlhbEltcGwuX2Zvck9wZXJhdGlvbih1c2VyLCBcImxpbmtcIiAvKiBMSU5LICovLCByZXNwb25zZSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX2Fzc2VydExpbmtlZFN0YXR1cyhleHBlY3RlZCwgdXNlciwgcHJvdmlkZXIpIHtcclxuICAgIGF3YWl0IF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXIpO1xyXG4gICAgY29uc3QgcHJvdmlkZXJJZHMgPSBwcm92aWRlckRhdGFBc05hbWVzKHVzZXIucHJvdmlkZXJEYXRhKTtcclxuICAgIGNvbnN0IGNvZGUgPSBleHBlY3RlZCA9PT0gZmFsc2VcclxuICAgICAgICA/IFwicHJvdmlkZXItYWxyZWFkeS1saW5rZWRcIiAvKiBQUk9WSURFUl9BTFJFQURZX0xJTktFRCAqL1xyXG4gICAgICAgIDogXCJuby1zdWNoLXByb3ZpZGVyXCIgLyogTk9fU1VDSF9QUk9WSURFUiAqLztcclxuICAgIF9hc3NlcnQocHJvdmlkZXJJZHMuaGFzKHByb3ZpZGVyKSA9PT0gZXhwZWN0ZWQsIHVzZXIuYXV0aCwgY29kZSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3JlYXV0aGVudGljYXRlKHVzZXIsIGNyZWRlbnRpYWwsIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGF1dGggfSA9IHVzZXI7XHJcbiAgICBjb25zdCBvcGVyYXRpb25UeXBlID0gXCJyZWF1dGhlbnRpY2F0ZVwiIC8qIFJFQVVUSEVOVElDQVRFICovO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKHVzZXIsIF9wcm9jZXNzQ3JlZGVudGlhbFNhdmluZ01mYUNvbnRleHRJZk5lY2Vzc2FyeShhdXRoLCBvcGVyYXRpb25UeXBlLCBjcmVkZW50aWFsLCB1c2VyKSwgYnlwYXNzQXV0aFN0YXRlKTtcclxuICAgICAgICBfYXNzZXJ0KHJlc3BvbnNlLmlkVG9rZW4sIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkID0gX3BhcnNlVG9rZW4ocmVzcG9uc2UuaWRUb2tlbik7XHJcbiAgICAgICAgX2Fzc2VydChwYXJzZWQsIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgY29uc3QgeyBzdWI6IGxvY2FsSWQgfSA9IHBhcnNlZDtcclxuICAgICAgICBfYXNzZXJ0KHVzZXIudWlkID09PSBsb2NhbElkLCBhdXRoLCBcInVzZXItbWlzbWF0Y2hcIiAvKiBVU0VSX01JU01BVENIICovKTtcclxuICAgICAgICByZXR1cm4gVXNlckNyZWRlbnRpYWxJbXBsLl9mb3JPcGVyYXRpb24odXNlciwgb3BlcmF0aW9uVHlwZSwgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBDb252ZXJ0IHVzZXIgZGVsZXRlZCBlcnJvciBpbnRvIHVzZXIgbWlzbWF0Y2hcclxuICAgICAgICBpZiAoKChfYSA9IGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb2RlKSA9PT0gYGF1dGgvJHtcInVzZXItbm90LWZvdW5kXCIgLyogVVNFUl9ERUxFVEVEICovfWApIHtcclxuICAgICAgICAgICAgX2ZhaWwoYXV0aCwgXCJ1c2VyLW1pc21hdGNoXCIgLyogVVNFUl9NSVNNQVRDSCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3NpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIGNyZWRlbnRpYWwsIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBvcGVyYXRpb25UeXBlID0gXCJzaWduSW5cIiAvKiBTSUdOX0lOICovO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfcHJvY2Vzc0NyZWRlbnRpYWxTYXZpbmdNZmFDb250ZXh0SWZOZWNlc3NhcnkoYXV0aCwgb3BlcmF0aW9uVHlwZSwgY3JlZGVudGlhbCk7XHJcbiAgICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IFVzZXJDcmVkZW50aWFsSW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShhdXRoLCBvcGVyYXRpb25UeXBlLCByZXNwb25zZSk7XHJcbiAgICBpZiAoIWJ5cGFzc0F1dGhTdGF0ZSkge1xyXG4gICAgICAgIGF3YWl0IGF1dGguX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXJDcmVkZW50aWFsLnVzZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZXJDcmVkZW50aWFsO1xyXG59XHJcbi8qKlxyXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB3aXRoIHRoZSBnaXZlbiBjcmVkZW50aWFscy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogQW4ge0BsaW5rIEF1dGhQcm92aWRlcn0gY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNyZWRlbnRpYWwuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXV0aCBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoLCBjcmVkZW50aWFsKSB7XHJcbiAgICByZXR1cm4gX3NpZ25JbldpdGhDcmVkZW50aWFsKF9jYXN0QXV0aChhdXRoKSwgY3JlZGVudGlhbCk7XHJcbn1cclxuLyoqXHJcbiAqIExpbmtzIHRoZSB1c2VyIGFjY291bnQgd2l0aCB0aGUgZ2l2ZW4gY3JlZGVudGlhbHMuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIEFuIHtAbGluayBBdXRoUHJvdmlkZXJ9IGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxyXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhdXRoIGNyZWRlbnRpYWwuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoQ3JlZGVudGlhbCh1c2VyLCBjcmVkZW50aWFsKSB7XHJcbiAgICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcik7XHJcbiAgICBhd2FpdCBfYXNzZXJ0TGlua2VkU3RhdHVzKGZhbHNlLCB1c2VySW50ZXJuYWwsIGNyZWRlbnRpYWwucHJvdmlkZXJJZCk7XHJcbiAgICByZXR1cm4gX2xpbmskMSh1c2VySW50ZXJuYWwsIGNyZWRlbnRpYWwpO1xyXG59XHJcbi8qKlxyXG4gKiBSZS1hdXRoZW50aWNhdGVzIGEgdXNlciB1c2luZyBhIGZyZXNoIGNyZWRlbnRpYWwuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIFVzZSBiZWZvcmUgb3BlcmF0aW9ucyBzdWNoIGFzIHtAbGluayB1cGRhdGVQYXNzd29yZH0gdGhhdCByZXF1aXJlIHRva2VucyBmcm9tIHJlY2VudCBzaWduLWluXHJcbiAqIGF0dGVtcHRzLiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byByZWNvdmVyIGZyb20gYSBgQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOYCBlcnJvci5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXV0aCBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKHVzZXIsIGNyZWRlbnRpYWwpIHtcclxuICAgIHJldHVybiBfcmVhdXRoZW50aWNhdGUoZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpLCBjcmVkZW50aWFsKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoQ3VzdG9tVG9rZW4kMShhdXRoLCByZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0KGF1dGgsIFwiUE9TVFwiIC8qIFBPU1QgKi8sIFwiL3YxL2FjY291bnRzOnNpZ25JbldpdGhDdXN0b21Ub2tlblwiIC8qIFNJR05fSU5fV0lUSF9DVVNUT01fVE9LRU4gKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGEgY3VzdG9tIHRva2VuLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBDdXN0b20gdG9rZW5zIGFyZSB1c2VkIHRvIGludGVncmF0ZSBGaXJlYmFzZSBBdXRoIHdpdGggZXhpc3RpbmcgYXV0aCBzeXN0ZW1zLCBhbmQgbXVzdFxyXG4gKiBiZSBnZW5lcmF0ZWQgYnkgYW4gYXV0aCBiYWNrZW5kIHVzaW5nIHRoZVxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvcmVmZXJlbmNlL2FkbWluL25vZGUvYWRtaW4uYXV0aC5BdXRoI2NyZWF0ZWN1c3RvbXRva2VuIHwgY3JlYXRlQ3VzdG9tVG9rZW59XHJcbiAqIG1ldGhvZCBpbiB0aGUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2F1dGgvYWRtaW4gfCBBZG1pbiBTREt9IC5cclxuICpcclxuICogRmFpbHMgd2l0aCBhbiBlcnJvciBpZiB0aGUgdG9rZW4gaXMgaW52YWxpZCwgZXhwaXJlZCwgb3Igbm90IGFjY2VwdGVkIGJ5IHRoZSBGaXJlYmFzZSBBdXRoIHNlcnZpY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGN1c3RvbVRva2VuIC0gVGhlIGN1c3RvbSB0b2tlbiB0byBzaWduIGluIHdpdGguXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhDdXN0b21Ub2tlbihhdXRoLCBjdXN0b21Ub2tlbikge1xyXG4gICAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduSW5XaXRoQ3VzdG9tVG9rZW4kMShhdXRoSW50ZXJuYWwsIHtcclxuICAgICAgICB0b2tlbjogY3VzdG9tVG9rZW4sXHJcbiAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcclxuICAgIH0pO1xyXG4gICAgY29uc3QgY3JlZCA9IGF3YWl0IFVzZXJDcmVkZW50aWFsSW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShhdXRoSW50ZXJuYWwsIFwic2lnbkluXCIgLyogU0lHTl9JTiAqLywgcmVzcG9uc2UpO1xyXG4gICAgYXdhaXQgYXV0aEludGVybmFsLl91cGRhdGVDdXJyZW50VXNlcihjcmVkLnVzZXIpO1xyXG4gICAgcmV0dXJuIGNyZWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTXVsdGlGYWN0b3JJbmZvSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3JJZCwgcmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmZhY3RvcklkID0gZmFjdG9ySWQ7XHJcbiAgICAgICAgdGhpcy51aWQgPSByZXNwb25zZS5tZmFFbnJvbGxtZW50SWQ7XHJcbiAgICAgICAgdGhpcy5lbnJvbGxtZW50VGltZSA9IG5ldyBEYXRlKHJlc3BvbnNlLmVucm9sbGVkQXQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9IHJlc3BvbnNlLmRpc3BsYXlOYW1lO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIF9mcm9tU2VydmVyUmVzcG9uc2UoYXV0aCwgZW5yb2xsbWVudCkge1xyXG4gICAgICAgIGlmICgncGhvbmVJbmZvJyBpbiBlbnJvbGxtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQaG9uZU11bHRpRmFjdG9ySW5mb0ltcGwuX2Zyb21TZXJ2ZXJSZXNwb25zZShhdXRoLCBlbnJvbGxtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9mYWlsKGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgUGhvbmVNdWx0aUZhY3RvckluZm9JbXBsIGV4dGVuZHMgTXVsdGlGYWN0b3JJbmZvSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSkge1xyXG4gICAgICAgIHN1cGVyKFwicGhvbmVcIiAvKiBQSE9ORSAqLywgcmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMucGhvbmVOdW1iZXIgPSByZXNwb25zZS5waG9uZUluZm87XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2Zyb21TZXJ2ZXJSZXNwb25zZShfYXV0aCwgZW5yb2xsbWVudCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGhvbmVNdWx0aUZhY3RvckluZm9JbXBsKGVucm9sbG1lbnQpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoYXV0aCwgcmVxdWVzdCwgYWN0aW9uQ29kZVNldHRpbmdzKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBfYXNzZXJ0KCgoX2EgPSBhY3Rpb25Db2RlU2V0dGluZ3MudXJsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDAsIGF1dGgsIFwiaW52YWxpZC1jb250aW51ZS11cmlcIiAvKiBJTlZBTElEX0NPTlRJTlVFX1VSSSAqLyk7XHJcbiAgICBfYXNzZXJ0KHR5cGVvZiBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW4gPT09ICd1bmRlZmluZWQnIHx8XHJcbiAgICAgICAgYWN0aW9uQ29kZVNldHRpbmdzLmR5bmFtaWNMaW5rRG9tYWluLmxlbmd0aCA+IDAsIGF1dGgsIFwiaW52YWxpZC1keW5hbWljLWxpbmstZG9tYWluXCIgLyogSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOICovKTtcclxuICAgIHJlcXVlc3QuY29udGludWVVcmwgPSBhY3Rpb25Db2RlU2V0dGluZ3MudXJsO1xyXG4gICAgcmVxdWVzdC5keW5hbWljTGlua0RvbWFpbiA9IGFjdGlvbkNvZGVTZXR0aW5ncy5keW5hbWljTGlua0RvbWFpbjtcclxuICAgIHJlcXVlc3QuY2FuSGFuZGxlQ29kZUluQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmhhbmRsZUNvZGVJbkFwcDtcclxuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MuaU9TKSB7XHJcbiAgICAgICAgX2Fzc2VydChhY3Rpb25Db2RlU2V0dGluZ3MuaU9TLmJ1bmRsZUlkLmxlbmd0aCA+IDAsIGF1dGgsIFwibWlzc2luZy1pb3MtYnVuZGxlLWlkXCIgLyogTUlTU0lOR19JT1NfQlVORExFX0lEICovKTtcclxuICAgICAgICByZXF1ZXN0LmlPU0J1bmRsZUlkID0gYWN0aW9uQ29kZVNldHRpbmdzLmlPUy5idW5kbGVJZDtcclxuICAgIH1cclxuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MuYW5kcm9pZCkge1xyXG4gICAgICAgIF9hc3NlcnQoYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQucGFja2FnZU5hbWUubGVuZ3RoID4gMCwgYXV0aCwgXCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIiAvKiBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FICovKTtcclxuICAgICAgICByZXF1ZXN0LmFuZHJvaWRJbnN0YWxsQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQuaW5zdGFsbEFwcDtcclxuICAgICAgICByZXF1ZXN0LmFuZHJvaWRNaW5pbXVtVmVyc2lvbkNvZGUgPVxyXG4gICAgICAgICAgICBhY3Rpb25Db2RlU2V0dGluZ3MuYW5kcm9pZC5taW5pbXVtVmVyc2lvbjtcclxuICAgICAgICByZXF1ZXN0LmFuZHJvaWRQYWNrYWdlTmFtZSA9IGFjdGlvbkNvZGVTZXR0aW5ncy5hbmRyb2lkLnBhY2thZ2VOYW1lO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTZW5kcyBhIHBhc3N3b3JkIHJlc2V0IGVtYWlsIHRvIHRoZSBnaXZlbiBlbWFpbCBhZGRyZXNzLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBUbyBjb21wbGV0ZSB0aGUgcGFzc3dvcmQgcmVzZXQsIGNhbGwge0BsaW5rIGNvbmZpcm1QYXNzd29yZFJlc2V0fSB3aXRoIHRoZSBjb2RlIHN1cHBsaWVkIGluXHJcbiAqIHRoZSBlbWFpbCBzZW50IHRvIHRoZSB1c2VyLCBhbG9uZyB3aXRoIHRoZSBuZXcgcGFzc3dvcmQgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGNvbnN0IGFjdGlvbkNvZGVTZXR0aW5ncyA9IHtcclxuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXHJcbiAqICAgaU9TOiB7XHJcbiAqICAgICAgYnVuZGxlSWQ6ICdjb20uZXhhbXBsZS5pb3MnXHJcbiAqICAgfSxcclxuICogICBhbmRyb2lkOiB7XHJcbiAqICAgICBwYWNrYWdlTmFtZTogJ2NvbS5leGFtcGxlLmFuZHJvaWQnLFxyXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcclxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXHJcbiAqICAgfSxcclxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcclxuICogfTtcclxuICogYXdhaXQgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XHJcbiAqIC8vIE9idGFpbiBjb2RlIGZyb20gdXNlci5cclxuICogYXdhaXQgY29uZmlybVBhc3N3b3JkUmVzZXQoJ3VzZXJAZXhhbXBsZS5jb20nLCBjb2RlKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxyXG4gKiBAcGFyYW0gYWN0aW9uQ29kZVNldHRpbmdzIC0gVGhlIHtAbGluayBBY3Rpb25Db2RlU2V0dGluZ3N9LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzZW5kUGFzc3dvcmRSZXNldEVtYWlsKGF1dGgsIGVtYWlsLCBhY3Rpb25Db2RlU2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IGF1dGhNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpO1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICByZXF1ZXN0VHlwZTogXCJQQVNTV09SRF9SRVNFVFwiIC8qIFBBU1NXT1JEX1JFU0VUICovLFxyXG4gICAgICAgIGVtYWlsXHJcbiAgICB9O1xyXG4gICAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncykge1xyXG4gICAgICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoYXV0aE1vZHVsYXIsIHJlcXVlc3QsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBhd2FpdCBzZW5kUGFzc3dvcmRSZXNldEVtYWlsJDEoYXV0aE1vZHVsYXIsIHJlcXVlc3QpO1xyXG59XHJcbi8qKlxyXG4gKiBDb21wbGV0ZXMgdGhlIHBhc3N3b3JkIHJlc2V0IHByb2Nlc3MsIGdpdmVuIGEgY29uZmlybWF0aW9uIGNvZGUgYW5kIG5ldyBwYXNzd29yZC5cclxuICpcclxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gb29iQ29kZSAtIEEgY29uZmlybWF0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cclxuICogQHBhcmFtIG5ld1Bhc3N3b3JkIC0gVGhlIG5ldyBwYXNzd29yZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY29uZmlybVBhc3N3b3JkUmVzZXQoYXV0aCwgb29iQ29kZSwgbmV3UGFzc3dvcmQpIHtcclxuICAgIGF3YWl0IHJlc2V0UGFzc3dvcmQoZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLCB7XHJcbiAgICAgICAgb29iQ29kZSxcclxuICAgICAgICBuZXdQYXNzd29yZFxyXG4gICAgfSk7XHJcbiAgICAvLyBEbyBub3QgcmV0dXJuIHRoZSBlbWFpbC5cclxufVxyXG4vKipcclxuICogQXBwbGllcyBhIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIgYnkgZW1haWwgb3Igb3RoZXIgb3V0LW9mLWJhbmQgbWVjaGFuaXNtLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBvb2JDb2RlIC0gQSB2ZXJpZmljYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBhcHBseUFjdGlvbkNvZGUoYXV0aCwgb29iQ29kZSkge1xyXG4gICAgYXdhaXQgYXBwbHlBY3Rpb25Db2RlJDEoZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLCB7IG9vYkNvZGUgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBhIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIgYnkgZW1haWwgb3Igb3RoZXIgb3V0LW9mLWJhbmQgbWVjaGFuaXNtLlxyXG4gKlxyXG4gKiBAcmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgY29kZS5cclxuICpcclxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gb29iQ29kZSAtIEEgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBY3Rpb25Db2RlKGF1dGgsIG9vYkNvZGUpIHtcclxuICAgIGNvbnN0IGF1dGhNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNldFBhc3N3b3JkKGF1dGhNb2R1bGFyLCB7IG9vYkNvZGUgfSk7XHJcbiAgICAvLyBFbWFpbCBjb3VsZCBiZSBlbXB0eSBvbmx5IGlmIHRoZSByZXF1ZXN0IHR5cGUgaXMgRU1BSUxfU0lHTklOIG9yXHJcbiAgICAvLyBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTC5cclxuICAgIC8vIE5ldyBlbWFpbCBzaG91bGQgbm90IGJlIGVtcHR5IGlmIHRoZSByZXF1ZXN0IHR5cGUgaXNcclxuICAgIC8vIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMLlxyXG4gICAgLy8gTXVsdGktZmFjdG9yIGluZm8gY291bGQgbm90IGJlIGVtcHR5IGlmIHRoZSByZXF1ZXN0IHR5cGUgaXNcclxuICAgIC8vIFJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OLlxyXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gcmVzcG9uc2UucmVxdWVzdFR5cGU7XHJcbiAgICBfYXNzZXJ0KG9wZXJhdGlvbiwgYXV0aE1vZHVsYXIsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xyXG4gICAgICAgIGNhc2UgXCJFTUFJTF9TSUdOSU5cIiAvKiBFTUFJTF9TSUdOSU4gKi86XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiIC8qIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMICovOlxyXG4gICAgICAgICAgICBfYXNzZXJ0KHJlc3BvbnNlLm5ld0VtYWlsLCBhdXRoTW9kdWxhciwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OXCIgLyogUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT04gKi86XHJcbiAgICAgICAgICAgIF9hc3NlcnQocmVzcG9uc2UubWZhSW5mbywgYXV0aE1vZHVsYXIsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgX2Fzc2VydChyZXNwb25zZS5lbWFpbCwgYXV0aE1vZHVsYXIsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICB9XHJcbiAgICAvLyBUaGUgbXVsdGktZmFjdG9yIGluZm8gZm9yIHJldmVydCBzZWNvbmQgZmFjdG9yIGFkZGl0aW9uXHJcbiAgICBsZXQgbXVsdGlGYWN0b3JJbmZvID0gbnVsbDtcclxuICAgIGlmIChyZXNwb25zZS5tZmFJbmZvKSB7XHJcbiAgICAgICAgbXVsdGlGYWN0b3JJbmZvID0gTXVsdGlGYWN0b3JJbmZvSW1wbC5fZnJvbVNlcnZlclJlc3BvbnNlKF9jYXN0QXV0aChhdXRoTW9kdWxhciksIHJlc3BvbnNlLm1mYUluZm8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIGVtYWlsOiAocmVzcG9uc2UucmVxdWVzdFR5cGUgPT09IFwiVkVSSUZZX0FORF9DSEFOR0VfRU1BSUxcIiAvKiBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTCAqL1xyXG4gICAgICAgICAgICAgICAgPyByZXNwb25zZS5uZXdFbWFpbFxyXG4gICAgICAgICAgICAgICAgOiByZXNwb25zZS5lbWFpbCkgfHwgbnVsbCxcclxuICAgICAgICAgICAgcHJldmlvdXNFbWFpbDogKHJlc3BvbnNlLnJlcXVlc3RUeXBlID09PSBcIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIgLyogVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwgKi9cclxuICAgICAgICAgICAgICAgID8gcmVzcG9uc2UuZW1haWxcclxuICAgICAgICAgICAgICAgIDogcmVzcG9uc2UubmV3RW1haWwpIHx8IG51bGwsXHJcbiAgICAgICAgICAgIG11bHRpRmFjdG9ySW5mb1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3BlcmF0aW9uXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgYSBwYXNzd29yZCByZXNldCBjb2RlIHNlbnQgdG8gdGhlIHVzZXIgYnkgZW1haWwgb3Igb3RoZXIgb3V0LW9mLWJhbmQgbWVjaGFuaXNtLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB0aGUgdXNlcidzIGVtYWlsIGFkZHJlc3MgaWYgdmFsaWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGNvZGUgLSBBIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlKGF1dGgsIGNvZGUpIHtcclxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgY2hlY2tBY3Rpb25Db2RlKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwgY29kZSk7XHJcbiAgICAvLyBFbWFpbCBzaG91bGQgYWx3YXlzIGJlIHByZXNlbnQgc2luY2UgYSBjb2RlIHdhcyBzZW50IHRvIGl0XHJcbiAgICByZXR1cm4gZGF0YS5lbWFpbDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB1c2VyIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgZW1haWwgYWRkcmVzcyBhbmQgcGFzc3dvcmQuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIE9uIHN1Y2Nlc3NmdWwgY3JlYXRpb24gb2YgdGhlIHVzZXIgYWNjb3VudCwgdGhpcyB1c2VyIHdpbGwgYWxzbyBiZSBzaWduZWQgaW4gdG8geW91ciBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVXNlciBhY2NvdW50IGNyZWF0aW9uIGNhbiBmYWlsIGlmIHRoZSBhY2NvdW50IGFscmVhZHkgZXhpc3RzIG9yIHRoZSBwYXNzd29yZCBpcyBpbnZhbGlkLlxyXG4gKlxyXG4gKiBOb3RlOiBUaGUgZW1haWwgYWRkcmVzcyBhY3RzIGFzIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyIGFuZCBlbmFibGVzIGFuIGVtYWlsLWJhc2VkXHJcbiAqIHBhc3N3b3JkIHJlc2V0LiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IHVzZXIgYWNjb3VudCBhbmQgc2V0IHRoZSBpbml0aWFsIHVzZXIgcGFzc3dvcmQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxyXG4gKiBAcGFyYW0gcGFzc3dvcmQgLSBUaGUgdXNlcidzIGNob3NlbiBwYXNzd29yZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduVXAoYXV0aEludGVybmFsLCB7XHJcbiAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXHJcbiAgICAgICAgZW1haWwsXHJcbiAgICAgICAgcGFzc3dvcmRcclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBVc2VyQ3JlZGVudGlhbEltcGwuX2Zyb21JZFRva2VuUmVzcG9uc2UoYXV0aEludGVybmFsLCBcInNpZ25JblwiIC8qIFNJR05fSU4gKi8sIHJlc3BvbnNlKTtcclxuICAgIGF3YWl0IGF1dGhJbnRlcm5hbC5fdXBkYXRlQ3VycmVudFVzZXIodXNlckNyZWRlbnRpYWwudXNlcik7XHJcbiAgICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XHJcbn1cclxuLyoqXHJcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cclxuICpcclxuICogQHJlbWFya3NcclxuICogRmFpbHMgd2l0aCBhbiBlcnJvciBpZiB0aGUgZW1haWwgYWRkcmVzcyBhbmQgcGFzc3dvcmQgZG8gbm90IG1hdGNoLlxyXG4gKlxyXG4gKiBOb3RlOiBUaGUgdXNlcidzIHBhc3N3b3JkIGlzIE5PVCB0aGUgcGFzc3dvcmQgdXNlZCB0byBhY2Nlc3MgdGhlIHVzZXIncyBlbWFpbCBhY2NvdW50LiBUaGVcclxuICogZW1haWwgYWRkcmVzcyBzZXJ2ZXMgYXMgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIsIGFuZCB0aGUgcGFzc3dvcmQgaXMgdXNlZCB0byBhY2Nlc3NcclxuICogdGhlIHVzZXIncyBhY2NvdW50IGluIHlvdXIgRmlyZWJhc2UgcHJvamVjdC4gU2VlIGFsc286IHtAbGluayBjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmR9LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VycyBlbWFpbCBhZGRyZXNzLlxyXG4gKiBAcGFyYW0gcGFzc3dvcmQgLSBUaGUgdXNlcnMgcGFzc3dvcmQuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIHNpZ25JbldpdGhDcmVkZW50aWFsKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwgRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChlbWFpbCwgcGFzc3dvcmQpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogU2VuZHMgYSBzaWduLWluIGVtYWlsIGxpbmsgdG8gdGhlIHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGVtYWlsLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBUaGUgc2lnbi1pbiBvcGVyYXRpb24gaGFzIHRvIGFsd2F5cyBiZSBjb21wbGV0ZWQgaW4gdGhlIGFwcCB1bmxpa2Ugb3RoZXIgb3V0IG9mIGJhbmQgZW1haWxcclxuICogYWN0aW9ucyAocGFzc3dvcmQgcmVzZXQgYW5kIGVtYWlsIHZlcmlmaWNhdGlvbnMpLiBUaGlzIGlzIGJlY2F1c2UsIGF0IHRoZSBlbmQgb2YgdGhlIGZsb3csXHJcbiAqIHRoZSB1c2VyIGlzIGV4cGVjdGVkIHRvIGJlIHNpZ25lZCBpbiBhbmQgdGhlaXIgQXV0aCBzdGF0ZSBwZXJzaXN0ZWQgd2l0aGluIHRoZSBhcHAuXHJcbiAqXHJcbiAqIFRvIGNvbXBsZXRlIHNpZ24gaW4gd2l0aCB0aGUgZW1haWwgbGluaywgY2FsbCB7QGxpbmsgc2lnbkluV2l0aEVtYWlsTGlua30gd2l0aCB0aGUgZW1haWxcclxuICogYWRkcmVzcyBhbmQgdGhlIGVtYWlsIGxpbmsgc3VwcGxpZWQgaW4gdGhlIGVtYWlsIHNlbnQgdG8gdGhlIHVzZXIuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xyXG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcclxuICogICBpT1M6IHtcclxuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcclxuICogICB9LFxyXG4gKiAgIGFuZHJvaWQ6IHtcclxuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXHJcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxyXG4gKiAgICAgbWluaW11bVZlcnNpb246ICcxMidcclxuICogICB9LFxyXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxyXG4gKiB9O1xyXG4gKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgJ3VzZXJAZXhhbXBsZS5jb20nLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xyXG4gKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdGhlIHVzZXIuXHJcbiAqIGlmKGlzU2lnbkluV2l0aEVtYWlsTGluayhhdXRoLCBlbWFpbExpbmspKSB7XHJcbiAqICAgYXdhaXQgc2lnbkluV2l0aEVtYWlsTGluayhhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGVtYWlsTGluayk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoSW50ZXJuYWwgLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gZW1haWwgLSBUaGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXHJcbiAqIEBwYXJhbSBhY3Rpb25Db2RlU2V0dGluZ3MgLSBUaGUge0BsaW5rIEFjdGlvbkNvZGVTZXR0aW5nc30uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoLCBlbWFpbCwgYWN0aW9uQ29kZVNldHRpbmdzKSB7XHJcbiAgICBjb25zdCBhdXRoTW9kdWxhciA9IGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKTtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgcmVxdWVzdFR5cGU6IFwiRU1BSUxfU0lHTklOXCIgLyogRU1BSUxfU0lHTklOICovLFxyXG4gICAgICAgIGVtYWlsXHJcbiAgICB9O1xyXG4gICAgX2Fzc2VydChhY3Rpb25Db2RlU2V0dGluZ3MuaGFuZGxlQ29kZUluQXBwLCBhdXRoTW9kdWxhciwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MpIHtcclxuICAgICAgICBfc2V0QWN0aW9uQ29kZVNldHRpbmdzT25SZXF1ZXN0KGF1dGhNb2R1bGFyLCByZXF1ZXN0LCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgc2VuZFNpZ25JbkxpbmtUb0VtYWlsJDEoYXV0aE1vZHVsYXIsIHJlcXVlc3QpO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYW4gaW5jb21pbmcgbGluayBpcyBhIHNpZ24taW4gd2l0aCBlbWFpbCBsaW5rIHN1aXRhYmxlIGZvciB7QGxpbmsgc2lnbkluV2l0aEVtYWlsTGlua30uXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVtYWlsTGluayAtIFRoZSBsaW5rIHNlbnQgdG8gdGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1NpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWxMaW5rKSB7XHJcbiAgICBjb25zdCBhY3Rpb25Db2RlVXJsID0gQWN0aW9uQ29kZVVSTC5wYXJzZUxpbmsoZW1haWxMaW5rKTtcclxuICAgIHJldHVybiAoYWN0aW9uQ29kZVVybCA9PT0gbnVsbCB8fCBhY3Rpb25Db2RlVXJsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhY3Rpb25Db2RlVXJsLm9wZXJhdGlvbikgPT09IFwiRU1BSUxfU0lHTklOXCIgLyogRU1BSUxfU0lHTklOICovO1xyXG59XHJcbi8qKlxyXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyBhbiBlbWFpbCBhbmQgc2lnbi1pbiBlbWFpbCBsaW5rLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJZiBubyBsaW5rIGlzIHBhc3NlZCwgdGhlIGxpbmsgaXMgaW5mZXJyZWQgZnJvbSB0aGUgY3VycmVudCBVUkwuXHJcbiAqXHJcbiAqIEZhaWxzIHdpdGggYW4gZXJyb3IgaWYgdGhlIGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZCBvciBPVFAgaW4gZW1haWwgbGluayBleHBpcmVzLlxyXG4gKlxyXG4gKiBOb3RlOiBDb25maXJtIHRoZSBsaW5rIGlzIGEgc2lnbi1pbiBlbWFpbCBsaW5rIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kIGZpcmViYXNlLmF1dGguQXV0aC5pc1NpZ25JbldpdGhFbWFpbExpbmsuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xyXG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcclxuICogICBpT1M6IHtcclxuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcclxuICogICB9LFxyXG4gKiAgIGFuZHJvaWQ6IHtcclxuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXHJcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxyXG4gKiAgICAgbWluaW11bVZlcnNpb246ICcxMidcclxuICogICB9LFxyXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxyXG4gKiB9O1xyXG4gKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgJ3VzZXJAZXhhbXBsZS5jb20nLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xyXG4gKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdGhlIHVzZXIuXHJcbiAqIGlmKGlzU2lnbkluV2l0aEVtYWlsTGluayhhdXRoLCBlbWFpbExpbmspKSB7XHJcbiAqICAgYXdhaXQgc2lnbkluV2l0aEVtYWlsTGluayhhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGVtYWlsTGluayk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxyXG4gKiBAcGFyYW0gZW1haWxMaW5rIC0gVGhlIGxpbmsgc2VudCB0byB0aGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWwsIGVtYWlsTGluaykge1xyXG4gICAgY29uc3QgYXV0aE1vZHVsYXIgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCk7XHJcbiAgICBjb25zdCBjcmVkZW50aWFsID0gRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbFdpdGhMaW5rKGVtYWlsLCBlbWFpbExpbmsgfHwgX2dldEN1cnJlbnRVcmwoKSk7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgdGVuYW50IElEIGluIHRoZSBlbWFpbCBsaW5rIG1hdGNoZXMgdGhlIHRlbmFudCBJRCBvbiBBdXRoXHJcbiAgICAvLyBpbnN0YW5jZS5cclxuICAgIF9hc3NlcnQoY3JlZGVudGlhbC5fdGVuYW50SWQgPT09IChhdXRoTW9kdWxhci50ZW5hbnRJZCB8fCBudWxsKSwgYXV0aE1vZHVsYXIsIFwidGVuYW50LWlkLW1pc21hdGNoXCIgLyogVEVOQU5UX0lEX01JU01BVENIICovKTtcclxuICAgIHJldHVybiBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoTW9kdWxhciwgY3JlZGVudGlhbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXV0aFVyaShhdXRoLCByZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0KGF1dGgsIFwiUE9TVFwiIC8qIFBPU1QgKi8sIFwiL3YxL2FjY291bnRzOmNyZWF0ZUF1dGhVcmlcIiAvKiBDUkVBVEVfQVVUSF9VUkkgKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEdldHMgdGhlIGxpc3Qgb2YgcG9zc2libGUgc2lnbiBpbiBtZXRob2RzIGZvciB0aGUgZ2l2ZW4gZW1haWwgYWRkcmVzcy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVGhpcyBpcyB1c2VmdWwgdG8gZGlmZmVyZW50aWF0ZSBtZXRob2RzIG9mIHNpZ24taW4gZm9yIHRoZSBzYW1lIHByb3ZpZGVyLCBlZy5cclxuICoge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aGljaCBoYXMgMiBtZXRob2RzIG9mIHNpZ24taW4sXHJcbiAqIHtAbGluayBTaWduSW5NZXRob2R9LkVNQUlMX1BBU1NXT1JEIGFuZFxyXG4gKiB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9MSU5LLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwoYXV0aCwgZW1haWwpIHtcclxuICAgIC8vIGNyZWF0ZUF1dGhVcmkgcmV0dXJucyBhbiBlcnJvciBpZiBjb250aW51ZSBVUkkgaXMgbm90IGh0dHAgb3IgaHR0cHMuXHJcbiAgICAvLyBGb3IgZW52aXJvbm1lbnRzIGxpa2UgQ29yZG92YSwgQ2hyb21lIGV4dGVuc2lvbnMsIG5hdGl2ZSBmcmFtZXdvcmtzLCBmaWxlXHJcbiAgICAvLyBzeXN0ZW1zLCBldGMsIHVzZSBodHRwOi8vbG9jYWxob3N0IGFzIGNvbnRpbnVlIFVSTC5cclxuICAgIGNvbnN0IGNvbnRpbnVlVXJpID0gX2lzSHR0cE9ySHR0cHMoKSA/IF9nZXRDdXJyZW50VXJsKCkgOiAnaHR0cDovL2xvY2FsaG9zdCc7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIGlkZW50aWZpZXI6IGVtYWlsLFxyXG4gICAgICAgIGNvbnRpbnVlVXJpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgeyBzaWduaW5NZXRob2RzIH0gPSBhd2FpdCBjcmVhdGVBdXRoVXJpKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwgcmVxdWVzdCk7XHJcbiAgICByZXR1cm4gc2lnbmluTWV0aG9kcyB8fCBbXTtcclxufVxyXG4vKipcclxuICogU2VuZHMgYSB2ZXJpZmljYXRpb24gZW1haWwgdG8gYSB1c2VyLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBUaGUgdmVyaWZpY2F0aW9uIHByb2Nlc3MgaXMgY29tcGxldGVkIGJ5IGNhbGxpbmcge0BsaW5rIGFwcGx5QWN0aW9uQ29kZX0uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xyXG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcclxuICogICBpT1M6IHtcclxuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcclxuICogICB9LFxyXG4gKiAgIGFuZHJvaWQ6IHtcclxuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXHJcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxyXG4gKiAgICAgbWluaW11bVZlcnNpb246ICcxMidcclxuICogICB9LFxyXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxyXG4gKiB9O1xyXG4gKiBhd2FpdCBzZW5kRW1haWxWZXJpZmljYXRpb24odXNlciwgYWN0aW9uQ29kZVNldHRpbmdzKTtcclxuICogLy8gT2J0YWluIGNvZGUgZnJvbSB0aGUgdXNlci5cclxuICogYXdhaXQgYXBwbHlBY3Rpb25Db2RlKGF1dGgsIGNvZGUpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIGFjdGlvbkNvZGVTZXR0aW5ncyAtIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVNldHRpbmdzfS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2VuZEVtYWlsVmVyaWZpY2F0aW9uKHVzZXIsIGFjdGlvbkNvZGVTZXR0aW5ncykge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHVzZXIuZ2V0SWRUb2tlbigpO1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICByZXF1ZXN0VHlwZTogXCJWRVJJRllfRU1BSUxcIiAvKiBWRVJJRllfRU1BSUwgKi8sXHJcbiAgICAgICAgaWRUb2tlblxyXG4gICAgfTtcclxuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MpIHtcclxuICAgICAgICBfc2V0QWN0aW9uQ29kZVNldHRpbmdzT25SZXF1ZXN0KHVzZXJJbnRlcm5hbC5hdXRoLCByZXF1ZXN0LCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBlbWFpbCB9ID0gYXdhaXQgc2VuZEVtYWlsVmVyaWZpY2F0aW9uJDEodXNlckludGVybmFsLmF1dGgsIHJlcXVlc3QpO1xyXG4gICAgaWYgKGVtYWlsICE9PSB1c2VyLmVtYWlsKSB7XHJcbiAgICAgICAgYXdhaXQgdXNlci5yZWxvYWQoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2VuZHMgYSB2ZXJpZmljYXRpb24gZW1haWwgdG8gYSBuZXcgZW1haWwgYWRkcmVzcy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVGhlIHVzZXIncyBlbWFpbCB3aWxsIGJlIHVwZGF0ZWQgdG8gdGhlIG5ldyBvbmUgYWZ0ZXIgYmVpbmcgdmVyaWZpZWQuXHJcbiAqXHJcbiAqIElmIHlvdSBoYXZlIGEgY3VzdG9tIGVtYWlsIGFjdGlvbiBoYW5kbGVyLCB5b3UgY2FuIGNvbXBsZXRlIHRoZSB2ZXJpZmljYXRpb24gcHJvY2VzcyBieSBjYWxsaW5nXHJcbiAqIHtAbGluayBhcHBseUFjdGlvbkNvZGV9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGNvbnN0IGFjdGlvbkNvZGVTZXR0aW5ncyA9IHtcclxuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXHJcbiAqICAgaU9TOiB7XHJcbiAqICAgICAgYnVuZGxlSWQ6ICdjb20uZXhhbXBsZS5pb3MnXHJcbiAqICAgfSxcclxuICogICBhbmRyb2lkOiB7XHJcbiAqICAgICBwYWNrYWdlTmFtZTogJ2NvbS5leGFtcGxlLmFuZHJvaWQnLFxyXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcclxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXHJcbiAqICAgfSxcclxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcclxuICogfTtcclxuICogYXdhaXQgdmVyaWZ5QmVmb3JlVXBkYXRlRW1haWwodXNlciwgJ25ld2VtYWlsQGV4YW1wbGUuY29tJywgYWN0aW9uQ29kZVNldHRpbmdzKTtcclxuICogLy8gT2J0YWluIGNvZGUgZnJvbSB0aGUgdXNlci5cclxuICogYXdhaXQgYXBwbHlBY3Rpb25Db2RlKGF1dGgsIGNvZGUpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIG5ld0VtYWlsIC0gVGhlIG5ldyBlbWFpbCBhZGRyZXNzIHRvIGJlIHZlcmlmaWVkIGJlZm9yZSB1cGRhdGUuXHJcbiAqIEBwYXJhbSBhY3Rpb25Db2RlU2V0dGluZ3MgLSBUaGUge0BsaW5rIEFjdGlvbkNvZGVTZXR0aW5nc30uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsKHVzZXIsIG5ld0VtYWlsLCBhY3Rpb25Db2RlU2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKTtcclxuICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgcmVxdWVzdFR5cGU6IFwiVkVSSUZZX0FORF9DSEFOR0VfRU1BSUxcIiAvKiBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTCAqLyxcclxuICAgICAgICBpZFRva2VuLFxyXG4gICAgICAgIG5ld0VtYWlsXHJcbiAgICB9O1xyXG4gICAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncykge1xyXG4gICAgICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QodXNlckludGVybmFsLmF1dGgsIHJlcXVlc3QsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGVtYWlsIH0gPSBhd2FpdCB2ZXJpZnlBbmRDaGFuZ2VFbWFpbCh1c2VySW50ZXJuYWwuYXV0aCwgcmVxdWVzdCk7XHJcbiAgICBpZiAoZW1haWwgIT09IHVzZXIuZW1haWwpIHtcclxuICAgICAgICAvLyBJZiB0aGUgbG9jYWwgY29weSBvZiB0aGUgZW1haWwgb24gdXNlciBpcyBvdXRkYXRlZCwgcmVsb2FkIHRoZVxyXG4gICAgICAgIC8vIHVzZXIuXHJcbiAgICAgICAgYXdhaXQgdXNlci5yZWxvYWQoKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVQcm9maWxlJDEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92MS9hY2NvdW50czp1cGRhdGVcIiAvKiBTRVRfQUNDT1VOVF9JTkZPICovLCByZXF1ZXN0KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXBkYXRlcyBhIHVzZXIncyBwcm9maWxlIGRhdGEuXHJcbiAqXHJcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXHJcbiAqIEBwYXJhbSBwcm9maWxlIC0gVGhlIHByb2ZpbGUncyBgZGlzcGxheU5hbWVgIGFuZCBgcGhvdG9VUkxgIHRvIHVwZGF0ZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlUHJvZmlsZSh1c2VyLCB7IGRpc3BsYXlOYW1lLCBwaG90b1VSTDogcGhvdG9VcmwgfSkge1xyXG4gICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgJiYgcGhvdG9VcmwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKTtcclxuICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VySW50ZXJuYWwuZ2V0SWRUb2tlbigpO1xyXG4gICAgY29uc3QgcHJvZmlsZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgaWRUb2tlbixcclxuICAgICAgICBkaXNwbGF5TmFtZSxcclxuICAgICAgICBwaG90b1VybCxcclxuICAgICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodXNlckludGVybmFsLCB1cGRhdGVQcm9maWxlJDEodXNlckludGVybmFsLmF1dGgsIHByb2ZpbGVSZXF1ZXN0KSk7XHJcbiAgICB1c2VySW50ZXJuYWwuZGlzcGxheU5hbWUgPSByZXNwb25zZS5kaXNwbGF5TmFtZSB8fCBudWxsO1xyXG4gICAgdXNlckludGVybmFsLnBob3RvVVJMID0gcmVzcG9uc2UucGhvdG9VcmwgfHwgbnVsbDtcclxuICAgIC8vIFVwZGF0ZSB0aGUgcGFzc3dvcmQgcHJvdmlkZXIgYXMgd2VsbFxyXG4gICAgY29uc3QgcGFzc3dvcmRQcm92aWRlciA9IHVzZXJJbnRlcm5hbC5wcm92aWRlckRhdGEuZmluZCgoeyBwcm92aWRlcklkIH0pID0+IHByb3ZpZGVySWQgPT09IFwicGFzc3dvcmRcIiAvKiBQQVNTV09SRCAqLyk7XHJcbiAgICBpZiAocGFzc3dvcmRQcm92aWRlcikge1xyXG4gICAgICAgIHBhc3N3b3JkUHJvdmlkZXIuZGlzcGxheU5hbWUgPSB1c2VySW50ZXJuYWwuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgcGFzc3dvcmRQcm92aWRlci5waG90b1VSTCA9IHVzZXJJbnRlcm5hbC5waG90b1VSTDtcclxuICAgIH1cclxuICAgIGF3YWl0IHVzZXJJbnRlcm5hbC5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkocmVzcG9uc2UpO1xyXG59XHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogQW4gZW1haWwgd2lsbCBiZSBzZW50IHRvIHRoZSBvcmlnaW5hbCBlbWFpbCBhZGRyZXNzIChpZiBpdCB3YXMgc2V0KSB0aGF0IGFsbG93cyB0byByZXZva2UgdGhlXHJcbiAqIGVtYWlsIGFkZHJlc3MgY2hhbmdlLCBpbiBvcmRlciB0byBwcm90ZWN0IHRoZW0gZnJvbSBhY2NvdW50IGhpamFja2luZy5cclxuICpcclxuICogSW1wb3J0YW50OiB0aGlzIGlzIGEgc2VjdXJpdHkgc2Vuc2l0aXZlIG9wZXJhdGlvbiB0aGF0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGhhdmUgcmVjZW50bHkgc2lnbmVkXHJcbiAqIGluLiBJZiB0aGlzIHJlcXVpcmVtZW50IGlzbid0IG1ldCwgYXNrIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbiBhbmQgdGhlbiBjYWxsXHJcbiAqIHtAbGluayByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsfS5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIG5ld0VtYWlsIC0gVGhlIG5ldyBlbWFpbCBhZGRyZXNzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVFbWFpbCh1c2VyLCBuZXdFbWFpbCkge1xyXG4gICAgcmV0dXJuIHVwZGF0ZUVtYWlsT3JQYXNzd29yZChnZXRNb2R1bGFySW5zdGFuY2UodXNlciksIG5ld0VtYWlsLCBudWxsKTtcclxufVxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgdXNlcidzIHBhc3N3b3JkLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJbXBvcnRhbnQ6IHRoaXMgaXMgYSBzZWN1cml0eSBzZW5zaXRpdmUgb3BlcmF0aW9uIHRoYXQgcmVxdWlyZXMgdGhlIHVzZXIgdG8gaGF2ZSByZWNlbnRseSBzaWduZWRcclxuICogaW4uIElmIHRoaXMgcmVxdWlyZW1lbnQgaXNuJ3QgbWV0LCBhc2sgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlIGFnYWluIGFuZCB0aGVuIGNhbGxcclxuICoge0BsaW5rIHJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWx9LlxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxyXG4gKiBAcGFyYW0gbmV3UGFzc3dvcmQgLSBUaGUgbmV3IHBhc3N3b3JkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVQYXNzd29yZCh1c2VyLCBuZXdQYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIHVwZGF0ZUVtYWlsT3JQYXNzd29yZChnZXRNb2R1bGFySW5zdGFuY2UodXNlciksIG51bGwsIG5ld1Bhc3N3b3JkKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVFbWFpbE9yUGFzc3dvcmQodXNlciwgZW1haWwsIHBhc3N3b3JkKSB7XHJcbiAgICBjb25zdCB7IGF1dGggfSA9IHVzZXI7XHJcbiAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIGlkVG9rZW4sXHJcbiAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcclxuICAgIH07XHJcbiAgICBpZiAoZW1haWwpIHtcclxuICAgICAgICByZXF1ZXN0LmVtYWlsID0gZW1haWw7XHJcbiAgICB9XHJcbiAgICBpZiAocGFzc3dvcmQpIHtcclxuICAgICAgICByZXF1ZXN0LnBhc3N3b3JkID0gcGFzc3dvcmQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKHVzZXIsIHVwZGF0ZUVtYWlsUGFzc3dvcmQoYXV0aCwgcmVxdWVzdCkpO1xyXG4gICAgYXdhaXQgdXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkocmVzcG9uc2UsIC8qIHJlbG9hZCAqLyB0cnVlKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUGFyc2UgdGhlIGBBZGRpdGlvbmFsVXNlckluZm9gIGZyb20gdGhlIElEIHRva2VuIHJlc3BvbnNlLlxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gX2Zyb21JZFRva2VuUmVzcG9uc2UoaWRUb2tlblJlc3BvbnNlKSB7XHJcbiAgICB2YXIgX2EsIF9iO1xyXG4gICAgaWYgKCFpZFRva2VuUmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgcHJvdmlkZXJJZCB9ID0gaWRUb2tlblJlc3BvbnNlO1xyXG4gICAgY29uc3QgcHJvZmlsZSA9IGlkVG9rZW5SZXNwb25zZS5yYXdVc2VySW5mb1xyXG4gICAgICAgID8gSlNPTi5wYXJzZShpZFRva2VuUmVzcG9uc2UucmF3VXNlckluZm8pXHJcbiAgICAgICAgOiB7fTtcclxuICAgIGNvbnN0IGlzTmV3VXNlciA9IGlkVG9rZW5SZXNwb25zZS5pc05ld1VzZXIgfHxcclxuICAgICAgICBpZFRva2VuUmVzcG9uc2Uua2luZCA9PT0gXCJpZGVudGl0eXRvb2xraXQjU2lnbnVwTmV3VXNlclJlc3BvbnNlXCIgLyogU2lnbnVwTmV3VXNlciAqLztcclxuICAgIGlmICghcHJvdmlkZXJJZCAmJiAoaWRUb2tlblJlc3BvbnNlID09PSBudWxsIHx8IGlkVG9rZW5SZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaWRUb2tlblJlc3BvbnNlLmlkVG9rZW4pKSB7XHJcbiAgICAgICAgY29uc3Qgc2lnbkluUHJvdmlkZXIgPSAoX2IgPSAoX2EgPSBfcGFyc2VUb2tlbihpZFRva2VuUmVzcG9uc2UuaWRUb2tlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maXJlYmFzZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iWydzaWduX2luX3Byb3ZpZGVyJ107XHJcbiAgICAgICAgaWYgKHNpZ25JblByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkUHJvdmlkZXJJZCA9IHNpZ25JblByb3ZpZGVyICE9PSBcImFub255bW91c1wiIC8qIEFOT05ZTU9VUyAqLyAmJlxyXG4gICAgICAgICAgICAgICAgc2lnbkluUHJvdmlkZXIgIT09IFwiY3VzdG9tXCIgLyogQ1VTVE9NICovXHJcbiAgICAgICAgICAgICAgICA/IHNpZ25JblByb3ZpZGVyXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIC8vIFVzZXMgZ2VuZXJpYyBjbGFzcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxlZ2FjeSBTREsuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyhpc05ld1VzZXIsIGZpbHRlcmVkUHJvdmlkZXJJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFwcm92aWRlcklkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHByb3ZpZGVySWQpIHtcclxuICAgICAgICBjYXNlIFwiZmFjZWJvb2suY29tXCIgLyogRkFDRUJPT0sgKi86XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmFjZWJvb2tBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcclxuICAgICAgICBjYXNlIFwiZ2l0aHViLmNvbVwiIC8qIEdJVEhVQiAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHaXRodWJBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcclxuICAgICAgICBjYXNlIFwiZ29vZ2xlLmNvbVwiIC8qIEdPT0dMRSAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHb29nbGVBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcclxuICAgICAgICBjYXNlIFwidHdpdHRlci5jb21cIiAvKiBUV0lUVEVSICovOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFR3aXR0ZXJBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlLCBpZFRva2VuUmVzcG9uc2Uuc2NyZWVuTmFtZSB8fCBudWxsKTtcclxuICAgICAgICBjYXNlIFwiY3VzdG9tXCIgLyogQ1VTVE9NICovOlxyXG4gICAgICAgIGNhc2UgXCJhbm9ueW1vdXNcIiAvKiBBTk9OWU1PVVMgKi86XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyhpc05ld1VzZXIsIG51bGwpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyhpc05ld1VzZXIsIHByb3ZpZGVySWQsIHByb2ZpbGUpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEdlbmVyaWNBZGRpdGlvbmFsVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3IoaXNOZXdVc2VyLCBwcm92aWRlcklkLCBwcm9maWxlID0ge30pIHtcclxuICAgICAgICB0aGlzLmlzTmV3VXNlciA9IGlzTmV3VXNlcjtcclxuICAgICAgICB0aGlzLnByb3ZpZGVySWQgPSBwcm92aWRlcklkO1xyXG4gICAgICAgIHRoaXMucHJvZmlsZSA9IHByb2ZpbGU7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgRmVkZXJhdGVkQWRkaXRpb25hbFVzZXJJbmZvV2l0aFVzZXJuYW1lIGV4dGVuZHMgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihpc05ld1VzZXIsIHByb3ZpZGVySWQsIHByb2ZpbGUsIHVzZXJuYW1lKSB7XHJcbiAgICAgICAgc3VwZXIoaXNOZXdVc2VyLCBwcm92aWRlcklkLCBwcm9maWxlKTtcclxuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgRmFjZWJvb2tBZGRpdGlvbmFsVXNlckluZm8gZXh0ZW5kcyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKGlzTmV3VXNlciwgcHJvZmlsZSkge1xyXG4gICAgICAgIHN1cGVyKGlzTmV3VXNlciwgXCJmYWNlYm9vay5jb21cIiAvKiBGQUNFQk9PSyAqLywgcHJvZmlsZSk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgR2l0aHViQWRkaXRpb25hbFVzZXJJbmZvIGV4dGVuZHMgRmVkZXJhdGVkQWRkaXRpb25hbFVzZXJJbmZvV2l0aFVzZXJuYW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKGlzTmV3VXNlciwgcHJvZmlsZSkge1xyXG4gICAgICAgIHN1cGVyKGlzTmV3VXNlciwgXCJnaXRodWIuY29tXCIgLyogR0lUSFVCICovLCBwcm9maWxlLCB0eXBlb2YgKHByb2ZpbGUgPT09IG51bGwgfHwgcHJvZmlsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZmlsZS5sb2dpbikgPT09ICdzdHJpbmcnID8gcHJvZmlsZSA9PT0gbnVsbCB8fCBwcm9maWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9maWxlLmxvZ2luIDogbnVsbCk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgR29vZ2xlQWRkaXRpb25hbFVzZXJJbmZvIGV4dGVuZHMgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihpc05ld1VzZXIsIHByb2ZpbGUpIHtcclxuICAgICAgICBzdXBlcihpc05ld1VzZXIsIFwiZ29vZ2xlLmNvbVwiIC8qIEdPT0dMRSAqLywgcHJvZmlsZSk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVHdpdHRlckFkZGl0aW9uYWxVc2VySW5mbyBleHRlbmRzIEZlZGVyYXRlZEFkZGl0aW9uYWxVc2VySW5mb1dpdGhVc2VybmFtZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihpc05ld1VzZXIsIHByb2ZpbGUsIHNjcmVlbk5hbWUpIHtcclxuICAgICAgICBzdXBlcihpc05ld1VzZXIsIFwidHdpdHRlci5jb21cIiAvKiBUV0lUVEVSICovLCBwcm9maWxlLCBzY3JlZW5OYW1lKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgcHJvdmlkZXIgc3BlY2lmaWMge0BsaW5rIEFkZGl0aW9uYWxVc2VySW5mb30gZm9yIHRoZSBnaXZlbiBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBZGRpdGlvbmFsVXNlckluZm8odXNlckNyZWRlbnRpYWwpIHtcclxuICAgIGNvbnN0IHsgdXNlciwgX3Rva2VuUmVzcG9uc2UgfSA9IHVzZXJDcmVkZW50aWFsO1xyXG4gICAgaWYgKHVzZXIuaXNBbm9ueW1vdXMgJiYgIV90b2tlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIHRoZSBzcGVjaWFsIGNhc2Ugd2hlcmUgc2lnbkluQW5vbnltb3VzbHkoKSBnZXRzIGNhbGxlZCB0d2ljZS5cclxuICAgICAgICAvLyBObyBuZXR3b3JrIGNhbGwgaXMgbWFkZSBzbyB0aGVyZSdzIG5vdGhpbmcgdG8gYWN0dWFsbHkgZmlsbCB0aGlzIGluXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvdmlkZXJJZDogbnVsbCxcclxuICAgICAgICAgICAgaXNOZXdVc2VyOiBmYWxzZSxcclxuICAgICAgICAgICAgcHJvZmlsZTogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2Zyb21JZFRva2VuUmVzcG9uc2UoX3Rva2VuUmVzcG9uc2UpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIE5vbi1vcHRpb25hbCBhdXRoIG1ldGhvZHMuXHJcbi8qKlxyXG4gKiBDaGFuZ2VzIHRoZSB0eXBlIG9mIHBlcnNpc3RlbmNlIG9uIHRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UgZm9yIHRoZSBjdXJyZW50bHkgc2F2ZWRcclxuICogYEF1dGhgIHNlc3Npb24gYW5kIGFwcGxpZXMgdGhpcyB0eXBlIG9mIHBlcnNpc3RlbmNlIGZvciBmdXR1cmUgc2lnbi1pbiByZXF1ZXN0cywgaW5jbHVkaW5nXHJcbiAqIHNpZ24taW4gd2l0aCByZWRpcmVjdCByZXF1ZXN0cy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVGhpcyBtYWtlcyBpdCBlYXN5IGZvciBhIHVzZXIgc2lnbmluZyBpbiB0byBzcGVjaWZ5IHdoZXRoZXIgdGhlaXIgc2Vzc2lvbiBzaG91bGQgYmVcclxuICogcmVtZW1iZXJlZCBvciBub3QuIEl0IGFsc28gbWFrZXMgaXQgZWFzaWVyIHRvIG5ldmVyIHBlcnNpc3QgdGhlIGBBdXRoYCBzdGF0ZSBmb3IgYXBwbGljYXRpb25zXHJcbiAqIHRoYXQgYXJlIHNoYXJlZCBieSBvdGhlciB1c2VycyBvciBoYXZlIHNlbnNpdGl2ZSBkYXRhLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIHNldFBlcnNpc3RlbmNlKGF1dGgsIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gcGVyc2lzdGVuY2UgLSBUaGUge0BsaW5rIFBlcnNpc3RlbmNlfSB0byB1c2UuXHJcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgcGVyc2lzdGVuY2UgY2hhbmdlIGhhcyBjb21wbGV0ZWRcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0UGVyc2lzdGVuY2UoYXV0aCwgcGVyc2lzdGVuY2UpIHtcclxuICAgIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkuc2V0UGVyc2lzdGVuY2UocGVyc2lzdGVuY2UpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGFuIG9ic2VydmVyIGZvciBjaGFuZ2VzIHRvIHRoZSBzaWduZWQtaW4gdXNlcidzIElEIHRva2VuLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBUaGlzIGluY2x1ZGVzIHNpZ24taW4sIHNpZ24tb3V0LCBhbmQgdG9rZW4gcmVmcmVzaCBldmVudHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIG5leHRPck9ic2VydmVyIC0gY2FsbGJhY2sgdHJpZ2dlcmVkIG9uIGNoYW5nZS5cclxuICogQHBhcmFtIGVycm9yIC0gRGVwcmVjYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBuZXZlciB0cmlnZ2VyZWQuIEVycm9yc1xyXG4gKiBvbiBzaWduaW5nIGluL291dCBjYW4gYmUgY2F1Z2h0IGluIHByb21pc2VzIHJldHVybmVkIGZyb21cclxuICogc2lnbi1pbi9zaWduLW91dCBmdW5jdGlvbnMuXHJcbiAqIEBwYXJhbSBjb21wbGV0ZWQgLSBEZXByZWNhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5ldmVyIHRyaWdnZXJlZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gb25JZFRva2VuQ2hhbmdlZChhdXRoLCBuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlZCkge1xyXG4gICAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS5vbklkVG9rZW5DaGFuZ2VkKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGVkKTtcclxufVxyXG4vKipcclxuICogQWRkcyBhIGJsb2NraW5nIGNhbGxiYWNrIHRoYXQgcnVucyBiZWZvcmUgYW4gYXV0aCBzdGF0ZSBjaGFuZ2VcclxuICogc2V0cyBhIG5ldyB1c2VyLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRyaWdnZXJlZCBiZWZvcmUgbmV3IHVzZXIgdmFsdWUgaXMgc2V0LlxyXG4gKiAgIElmIHRoaXMgdGhyb3dzLCBpdCBibG9ja3MgdGhlIHVzZXIgZnJvbSBiZWluZyBzZXQuXHJcbiAqIEBwYXJhbSBvbkFib3J0IC0gY2FsbGJhY2sgdHJpZ2dlcmVkIGlmIGEgbGF0ZXIgYGJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoKWBcclxuICogICBjYWxsYmFjayB0aHJvd3MsIGFsbG93aW5nIHlvdSB0byB1bmRvIGFueSBzaWRlIGVmZmVjdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBiZWZvcmVBdXRoU3RhdGVDaGFuZ2VkKGF1dGgsIGNhbGxiYWNrLCBvbkFib3J0KSB7XHJcbiAgICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLmJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoY2FsbGJhY2ssIG9uQWJvcnQpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGFuIG9ic2VydmVyIGZvciBjaGFuZ2VzIHRvIHRoZSB1c2VyJ3Mgc2lnbi1pbiBzdGF0ZS5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVG8ga2VlcCB0aGUgb2xkIGJlaGF2aW9yLCBzZWUge0BsaW5rIG9uSWRUb2tlbkNoYW5nZWR9LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBuZXh0T3JPYnNlcnZlciAtIGNhbGxiYWNrIHRyaWdnZXJlZCBvbiBjaGFuZ2UuXHJcbiAqIEBwYXJhbSBlcnJvciAtIERlcHJlY2F0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbmV2ZXIgdHJpZ2dlcmVkLiBFcnJvcnNcclxuICogb24gc2lnbmluZyBpbi9vdXQgY2FuIGJlIGNhdWdodCBpbiBwcm9taXNlcyByZXR1cm5lZCBmcm9tXHJcbiAqIHNpZ24taW4vc2lnbi1vdXQgZnVuY3Rpb25zLlxyXG4gKiBAcGFyYW0gY29tcGxldGVkIC0gRGVwcmVjYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBuZXZlciB0cmlnZ2VyZWQuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIG9uQXV0aFN0YXRlQ2hhbmdlZChhdXRoLCBuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlZCkge1xyXG4gICAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS5vbkF1dGhTdGF0ZUNoYW5nZWQobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBjdXJyZW50IGxhbmd1YWdlIHRvIHRoZSBkZWZhdWx0IGRldmljZS9icm93c2VyIHByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gdXNlRGV2aWNlTGFuZ3VhZ2UoYXV0aCkge1xyXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLnVzZURldmljZUxhbmd1YWdlKCk7XHJcbn1cclxuLyoqXHJcbiAqIEFzeW5jaHJvbm91c2x5IHNldHMgdGhlIHByb3ZpZGVkIHVzZXIgYXMge0BsaW5rIEF1dGguY3VycmVudFVzZXJ9IG9uIHRoZVxyXG4gKiB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIEEgbmV3IGluc3RhbmNlIGNvcHkgb2YgdGhlIHVzZXIgcHJvdmlkZWQgd2lsbCBiZSBtYWRlIGFuZCBzZXQgYXMgY3VycmVudFVzZXIuXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCB0cmlnZ2VyIHtAbGluayBvbkF1dGhTdGF0ZUNoYW5nZWR9IGFuZCB7QGxpbmsgb25JZFRva2VuQ2hhbmdlZH0gbGlzdGVuZXJzXHJcbiAqIGxpa2Ugb3RoZXIgc2lnbiBpbiBtZXRob2RzLlxyXG4gKlxyXG4gKiBUaGUgb3BlcmF0aW9uIGZhaWxzIHdpdGggYW4gZXJyb3IgaWYgdGhlIHVzZXIgdG8gYmUgdXBkYXRlZCBiZWxvbmdzIHRvIGEgZGlmZmVyZW50IEZpcmViYXNlXHJcbiAqIHByb2plY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHVzZXIgLSBUaGUgbmV3IHtAbGluayBVc2VyfS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQ3VycmVudFVzZXIoYXV0aCwgdXNlcikge1xyXG4gICAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS51cGRhdGVDdXJyZW50VXNlcih1c2VyKTtcclxufVxyXG4vKipcclxuICogU2lnbnMgb3V0IHRoZSBjdXJyZW50IHVzZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gc2lnbk91dChhdXRoKSB7XHJcbiAgICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLnNpZ25PdXQoKTtcclxufVxyXG4vKipcclxuICogRGVsZXRlcyBhbmQgc2lnbnMgb3V0IHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJbXBvcnRhbnQ6IHRoaXMgaXMgYSBzZWN1cml0eS1zZW5zaXRpdmUgb3BlcmF0aW9uIHRoYXQgcmVxdWlyZXMgdGhlIHVzZXIgdG8gaGF2ZSByZWNlbnRseVxyXG4gKiBzaWduZWQgaW4uIElmIHRoaXMgcmVxdWlyZW1lbnQgaXNuJ3QgbWV0LCBhc2sgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlIGFnYWluIGFuZCB0aGVuIGNhbGxcclxuICoge0BsaW5rIHJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWx9LlxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVVc2VyKHVzZXIpIHtcclxuICAgIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikuZGVsZXRlKCk7XHJcbn1cblxuY2xhc3MgTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBjcmVkZW50aWFsLCBhdXRoKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmNyZWRlbnRpYWwgPSBjcmVkZW50aWFsO1xyXG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2Zyb21JZHRva2VuKGlkVG9rZW4sIGF1dGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwoXCJlbnJvbGxcIiAvKiBFTlJPTEwgKi8sIGlkVG9rZW4sIGF1dGgpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIF9mcm9tTWZhUGVuZGluZ0NyZWRlbnRpYWwobWZhUGVuZGluZ0NyZWRlbnRpYWwpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwoXCJzaWduaW5cIiAvKiBTSUdOX0lOICovLCBtZmFQZW5kaW5nQ3JlZGVudGlhbCk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy50eXBlID09PSBcImVucm9sbFwiIC8qIEVOUk9MTCAqL1xyXG4gICAgICAgICAgICA/ICdpZFRva2VuJ1xyXG4gICAgICAgICAgICA6ICdwZW5kaW5nQ3JlZGVudGlhbCc7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbXVsdGlGYWN0b3JTZXNzaW9uOiB7XHJcbiAgICAgICAgICAgICAgICBba2V5XTogdGhpcy5jcmVkZW50aWFsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZyb21KU09OKG9iaikge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5tdWx0aUZhY3RvclNlc3Npb24pIHtcclxuICAgICAgICAgICAgaWYgKChfYSA9IG9iai5tdWx0aUZhY3RvclNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wZW5kaW5nQ3JlZGVudGlhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE11bHRpRmFjdG9yU2Vzc2lvbkltcGwuX2Zyb21NZmFQZW5kaW5nQ3JlZGVudGlhbChvYmoubXVsdGlGYWN0b3JTZXNzaW9uLnBlbmRpbmdDcmVkZW50aWFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgoX2IgPSBvYmoubXVsdGlGYWN0b3JTZXNzaW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWRUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE11bHRpRmFjdG9yU2Vzc2lvbkltcGwuX2Zyb21JZHRva2VuKG9iai5tdWx0aUZhY3RvclNlc3Npb24uaWRUb2tlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTXVsdGlGYWN0b3JSZXNvbHZlckltcGwge1xyXG4gICAgY29uc3RydWN0b3Ioc2Vzc2lvbiwgaGludHMsIHNpZ25JblJlc29sdmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcclxuICAgICAgICB0aGlzLmhpbnRzID0gaGludHM7XHJcbiAgICAgICAgdGhpcy5zaWduSW5SZXNvbHZlciA9IHNpZ25JblJlc29sdmVyO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc3RhdGljIF9mcm9tRXJyb3IoYXV0aEV4dGVybiwgZXJyb3IpIHtcclxuICAgICAgICBjb25zdCBhdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xyXG4gICAgICAgIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gZXJyb3IuY3VzdG9tRGF0YS5fc2VydmVyUmVzcG9uc2U7XHJcbiAgICAgICAgY29uc3QgaGludHMgPSAoc2VydmVyUmVzcG9uc2UubWZhSW5mbyB8fCBbXSkubWFwKGVucm9sbG1lbnQgPT4gTXVsdGlGYWN0b3JJbmZvSW1wbC5fZnJvbVNlcnZlclJlc3BvbnNlKGF1dGgsIGVucm9sbG1lbnQpKTtcclxuICAgICAgICBfYXNzZXJ0KHNlcnZlclJlc3BvbnNlLm1mYVBlbmRpbmdDcmVkZW50aWFsLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tTWZhUGVuZGluZ0NyZWRlbnRpYWwoc2VydmVyUmVzcG9uc2UubWZhUGVuZGluZ0NyZWRlbnRpYWwpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTXVsdGlGYWN0b3JSZXNvbHZlckltcGwoc2Vzc2lvbiwgaGludHMsIGFzeW5jIChhc3NlcnRpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWZhUmVzcG9uc2UgPSBhd2FpdCBhc3NlcnRpb24uX3Byb2Nlc3MoYXV0aCwgc2Vzc2lvbik7XHJcbiAgICAgICAgICAgIC8vIENsZWFyIG91dCB0aGUgdW5uZWVkZWQgZmllbGRzIGZyb20gdGhlIG9sZCBsb2dpbiByZXNwb25zZVxyXG4gICAgICAgICAgICBkZWxldGUgc2VydmVyUmVzcG9uc2UubWZhSW5mbztcclxuICAgICAgICAgICAgZGVsZXRlIHNlcnZlclJlc3BvbnNlLm1mYVBlbmRpbmdDcmVkZW50aWFsO1xyXG4gICAgICAgICAgICAvLyBVc2UgaW4gdGhlIG5ldyB0b2tlbiAmIHJlZnJlc2ggdG9rZW4gaW4gdGhlIG9sZCByZXNwb25zZVxyXG4gICAgICAgICAgICBjb25zdCBpZFRva2VuUmVzcG9uc2UgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNlcnZlclJlc3BvbnNlKSwgeyBpZFRva2VuOiBtZmFSZXNwb25zZS5pZFRva2VuLCByZWZyZXNoVG9rZW46IG1mYVJlc3BvbnNlLnJlZnJlc2hUb2tlbiB9KTtcclxuICAgICAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIGNvbGxhcHNlIHRoaXMgc3dpdGNoIHN0YXRlbWVudCBpbnRvIFVzZXJDcmVkZW50aWFsSW1wbC5fZm9yT3BlcmF0aW9uIGFuZCBoYXZlIGl0IHN1cHBvcnQgdGhlIFNJR05fSU4gY2FzZVxyXG4gICAgICAgICAgICBzd2l0Y2ggKGVycm9yLm9wZXJhdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzaWduSW5cIiAvKiBTSUdOX0lOICovOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKGF1dGgsIGVycm9yLm9wZXJhdGlvblR5cGUsIGlkVG9rZW5SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXV0aC5fdXBkYXRlQ3VycmVudFVzZXIodXNlckNyZWRlbnRpYWwudXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJDcmVkZW50aWFsO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlYXV0aGVudGljYXRlXCIgLyogUkVBVVRIRU5USUNBVEUgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgX2Fzc2VydChlcnJvci51c2VyLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVc2VyQ3JlZGVudGlhbEltcGwuX2Zvck9wZXJhdGlvbihlcnJvci51c2VyLCBlcnJvci5vcGVyYXRpb25UeXBlLCBpZFRva2VuUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBfZmFpbChhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyByZXNvbHZlU2lnbkluKGFzc2VydGlvbkV4dGVybikge1xyXG4gICAgICAgIGNvbnN0IGFzc2VydGlvbiA9IGFzc2VydGlvbkV4dGVybjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaWduSW5SZXNvbHZlcihhc3NlcnRpb24pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBhIHtAbGluayBNdWx0aUZhY3RvclJlc29sdmVyfSBzdWl0YWJsZSBmb3IgY29tcGxldGlvbiBvZiBhXHJcbiAqIG11bHRpLWZhY3RvciBmbG93LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBlcnJvciAtIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JFcnJvcn0gcmFpc2VkIGR1cmluZyBhIHNpZ24taW4sIG9yXHJcbiAqIHJlYXV0aGVudGljYXRpb24gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNdWx0aUZhY3RvclJlc29sdmVyKGF1dGgsIGVycm9yKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBhdXRoTW9kdWxhciA9IGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKTtcclxuICAgIGNvbnN0IGVycm9ySW50ZXJuYWwgPSBlcnJvcjtcclxuICAgIF9hc3NlcnQoZXJyb3IuY3VzdG9tRGF0YS5vcGVyYXRpb25UeXBlLCBhdXRoTW9kdWxhciwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgIF9hc3NlcnQoKF9hID0gZXJyb3JJbnRlcm5hbC5jdXN0b21EYXRhLl9zZXJ2ZXJSZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1mYVBlbmRpbmdDcmVkZW50aWFsLCBhdXRoTW9kdWxhciwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgIHJldHVybiBNdWx0aUZhY3RvclJlc29sdmVySW1wbC5fZnJvbUVycm9yKGF1dGhNb2R1bGFyLCBlcnJvckludGVybmFsKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdGFydEVucm9sbFBob25lTWZhKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjIvYWNjb3VudHMvbWZhRW5yb2xsbWVudDpzdGFydFwiIC8qIFNUQVJUX01GQV9FTlJPTExNRU5UICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmFsaXplRW5yb2xsUGhvbmVNZmEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92Mi9hY2NvdW50cy9tZmFFbnJvbGxtZW50OmZpbmFsaXplXCIgLyogRklOQUxJWkVfTUZBX0VOUk9MTE1FTlQgKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cclxuZnVuY3Rpb24gd2l0aGRyYXdNZmEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92Mi9hY2NvdW50cy9tZmFFbnJvbGxtZW50OndpdGhkcmF3XCIgLyogV0lUSERSQVdfTUZBICovLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xyXG59XG5cbmNsYXNzIE11bHRpRmFjdG9yVXNlckltcGwge1xyXG4gICAgY29uc3RydWN0b3IodXNlcikge1xyXG4gICAgICAgIHRoaXMudXNlciA9IHVzZXI7XHJcbiAgICAgICAgdGhpcy5lbnJvbGxlZEZhY3RvcnMgPSBbXTtcclxuICAgICAgICB1c2VyLl9vblJlbG9hZCh1c2VySW5mbyA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VySW5mby5tZmFJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVucm9sbGVkRmFjdG9ycyA9IHVzZXJJbmZvLm1mYUluZm8ubWFwKGVucm9sbG1lbnQgPT4gTXVsdGlGYWN0b3JJbmZvSW1wbC5fZnJvbVNlcnZlclJlc3BvbnNlKHVzZXIuYXV0aCwgZW5yb2xsbWVudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2Zyb21Vc2VyKHVzZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yVXNlckltcGwodXNlcik7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTZXNzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tSWR0b2tlbihhd2FpdCB0aGlzLnVzZXIuZ2V0SWRUb2tlbigpLCB0aGlzLnVzZXIuYXV0aCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBlbnJvbGwoYXNzZXJ0aW9uRXh0ZXJuLCBkaXNwbGF5TmFtZSkge1xyXG4gICAgICAgIGNvbnN0IGFzc2VydGlvbiA9IGFzc2VydGlvbkV4dGVybjtcclxuICAgICAgICBjb25zdCBzZXNzaW9uID0gKGF3YWl0IHRoaXMuZ2V0U2Vzc2lvbigpKTtcclxuICAgICAgICBjb25zdCBmaW5hbGl6ZU1mYVJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodGhpcy51c2VyLCBhc3NlcnRpb24uX3Byb2Nlc3ModGhpcy51c2VyLmF1dGgsIHNlc3Npb24sIGRpc3BsYXlOYW1lKSk7XHJcbiAgICAgICAgLy8gTmV3IHRva2VucyB3aWxsIGJlIGlzc3VlZCBhZnRlciBlbnJvbGxtZW50IG9mIHRoZSBuZXcgc2Vjb25kIGZhY3RvcnMuXHJcbiAgICAgICAgLy8gVGhleSBuZWVkIHRvIGJlIHVwZGF0ZWQgb24gdGhlIHVzZXIuXHJcbiAgICAgICAgYXdhaXQgdGhpcy51c2VyLl91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShmaW5hbGl6ZU1mYVJlc3BvbnNlKTtcclxuICAgICAgICAvLyBUaGUgdXNlciBuZWVkcyB0byBiZSByZWxvYWRlZCB0byBnZXQgdGhlIG5ldyBtdWx0aS1mYWN0b3IgaW5mb3JtYXRpb25cclxuICAgICAgICAvLyBmcm9tIHNlcnZlci4gVVNFUl9SRUxPQURFRCBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCBhbmQgYGVucm9sbGVkRmFjdG9yc2BcclxuICAgICAgICAvLyB3aWxsIGJlIHVwZGF0ZWQuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlci5yZWxvYWQoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHVuZW5yb2xsKGluZm9PclVpZCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBtZmFFbnJvbGxtZW50SWQgPSB0eXBlb2YgaW5mb09yVWlkID09PSAnc3RyaW5nJyA/IGluZm9PclVpZCA6IGluZm9PclVpZC51aWQ7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHRoaXMudXNlci5nZXRJZFRva2VuKCk7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlblJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodGhpcy51c2VyLCB3aXRoZHJhd01mYSh0aGlzLnVzZXIuYXV0aCwge1xyXG4gICAgICAgICAgICBpZFRva2VuLFxyXG4gICAgICAgICAgICBtZmFFbnJvbGxtZW50SWRcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBzZWNvbmQgZmFjdG9yIGZyb20gdGhlIHVzZXIncyBsaXN0LlxyXG4gICAgICAgIHRoaXMuZW5yb2xsZWRGYWN0b3JzID0gdGhpcy5lbnJvbGxlZEZhY3RvcnMuZmlsdGVyKCh7IHVpZCB9KSA9PiB1aWQgIT09IG1mYUVucm9sbG1lbnRJZCk7XHJcbiAgICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGJhY2tlbmQgZGVjaWRlZCB0byByZXZva2UgdGhlIHVzZXIncyBzZXNzaW9uLFxyXG4gICAgICAgIC8vIHRoZSB0b2tlblJlc3BvbnNlIG1heSBiZSBlbXB0eS4gSWYgdGhlIHRva2VucyB3ZXJlIG5vdCB1cGRhdGVkIChhbmQgdGhleVxyXG4gICAgICAgIC8vIGFyZSBub3cgaW52YWxpZCksIHJlbG9hZGluZyB0aGUgdXNlciB3aWxsIGRpc2NvdmVyIHRoaXMgYW5kIGludmFsaWRhdGVcclxuICAgICAgICAvLyB0aGUgdXNlcidzIHN0YXRlIGFjY29yZGluZ2x5LlxyXG4gICAgICAgIGF3YWl0IHRoaXMudXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkoaWRUb2tlblJlc3BvbnNlKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVzZXIucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgoKF9hID0gZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvZGUpICE9PSBgYXV0aC8ke1widXNlci10b2tlbi1leHBpcmVkXCIgLyogVE9LRU5fRVhQSVJFRCAqL31gKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IG11bHRpRmFjdG9yVXNlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuLyoqXHJcbiAqIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JVc2VyfSBjb3JyZXNwb25kaW5nIHRvIHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBUaGlzIGlzIHVzZWQgdG8gYWNjZXNzIGFsbCBtdWx0aS1mYWN0b3IgcHJvcGVydGllcyBhbmQgb3BlcmF0aW9ucyByZWxhdGVkIHRvIHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBtdWx0aUZhY3Rvcih1c2VyKSB7XHJcbiAgICBjb25zdCB1c2VyTW9kdWxhciA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKTtcclxuICAgIGlmICghbXVsdGlGYWN0b3JVc2VyQ2FjaGUuaGFzKHVzZXJNb2R1bGFyKSkge1xyXG4gICAgICAgIG11bHRpRmFjdG9yVXNlckNhY2hlLnNldCh1c2VyTW9kdWxhciwgTXVsdGlGYWN0b3JVc2VySW1wbC5fZnJvbVVzZXIodXNlck1vZHVsYXIpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtdWx0aUZhY3RvclVzZXJDYWNoZS5nZXQodXNlck1vZHVsYXIpO1xyXG59XG5cbmNvbnN0IFNUT1JBR0VfQVZBSUxBQkxFX0tFWSA9ICdfX3Nhayc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIFRoZXJlIGFyZSB0d28gZGlmZmVyZW50IGJyb3dzZXIgcGVyc2lzdGVuY2UgdHlwZXM6IGxvY2FsIGFuZCBzZXNzaW9uLlxyXG4vLyBCb3RoIGhhdmUgdGhlIHNhbWUgaW1wbGVtZW50YXRpb24gYnV0IHVzZSBhIGRpZmZlcmVudCB1bmRlcmx5aW5nIHN0b3JhZ2VcclxuLy8gb2JqZWN0LlxyXG5jbGFzcyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzcyB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlUmV0cmlldmVyLCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlUmV0cmlldmVyID0gc3RvcmFnZVJldHJpZXZlcjtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgX2lzQXZhaWxhYmxlKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0FWQUlMQUJMRV9LRVksICcxJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKFNUT1JBR0VfQVZBSUxBQkxFX0tFWSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfc2V0KGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgX2dldChrZXkpIHtcclxuICAgICAgICBjb25zdCBqc29uID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGpzb24gPyBKU09OLnBhcnNlKGpzb24pIDogbnVsbCk7XHJcbiAgICB9XHJcbiAgICBfcmVtb3ZlKGtleSkge1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0b3JhZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVJldHJpZXZlcigpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIF9pZnJhbWVDYW5ub3RTeW5jV2ViU3RvcmFnZSgpIHtcclxuICAgIGNvbnN0IHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiBfaXNTYWZhcmkodWEpIHx8IF9pc0lPUyh1YSk7XHJcbn1cclxuLy8gVGhlIHBvbGxpbmcgcGVyaW9kIGluIGNhc2UgZXZlbnRzIGFyZSBub3Qgc3VwcG9ydGVkXHJcbmNvbnN0IF9QT0xMSU5HX0lOVEVSVkFMX01TJDEgPSAxMDAwO1xyXG4vLyBUaGUgSUUgMTAgbG9jYWxTdG9yYWdlIGNyb3NzIHRhYiBzeW5jaHJvbml6YXRpb24gZGVsYXkgaW4gbWlsbGlzZWNvbmRzXHJcbmNvbnN0IElFMTBfTE9DQUxfU1RPUkFHRV9TWU5DX0RFTEFZID0gMTA7XHJcbmNsYXNzIEJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlIGV4dGVuZHMgQnJvd3NlclBlcnNpc3RlbmNlQ2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKCkgPT4gd2luZG93LmxvY2FsU3RvcmFnZSwgXCJMT0NBTFwiIC8qIExPQ0FMICovKTtcclxuICAgICAgICB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyID0gKGV2ZW50LCBwb2xsKSA9PiB0aGlzLm9uU3RvcmFnZUV2ZW50KGV2ZW50LCBwb2xsKTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMubG9jYWxDYWNoZSA9IHt9O1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQgcmV0dXJuIHZhbHVlIGlzIHBsYXRmb3JtIHNwZWNpZmljXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICB0aGlzLnBvbGxUaW1lciA9IG51bGw7XHJcbiAgICAgICAgLy8gU2FmYXJpIG9yIGlPUyBicm93c2VyIGFuZCBlbWJlZGRlZCBpbiBhbiBpZnJhbWUuXHJcbiAgICAgICAgdGhpcy5zYWZhcmlMb2NhbFN0b3JhZ2VOb3RTeW5jZWQgPSBfaWZyYW1lQ2Fubm90U3luY1dlYlN0b3JhZ2UoKSAmJiBfaXNJZnJhbWUoKTtcclxuICAgICAgICAvLyBXaGV0aGVyIHRvIHVzZSBwb2xsaW5nIGluc3RlYWQgb2YgZGVwZW5kaW5nIG9uIHdpbmRvdyBldmVudHNcclxuICAgICAgICB0aGlzLmZhbGxiYWNrVG9Qb2xsaW5nID0gX2lzTW9iaWxlQnJvd3NlcigpO1xyXG4gICAgICAgIHRoaXMuX3Nob3VsZEFsbG93TWlncmF0aW9uID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvckFsbENoYW5nZWRLZXlzKGNiKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgYWxsIGtleXMgd2l0aCBsaXN0ZW5lcnMgb24gdGhlbS5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHZhbHVlIGZyb20gbG9jYWxTdG9yYWdlLlxyXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5sb2NhbENhY2hlW2tleV07XHJcbiAgICAgICAgICAgIC8vIElmIGxvY2FsIG1hcCB2YWx1ZSBkb2VzIG5vdCBtYXRjaCwgdHJpZ2dlciBsaXN0ZW5lciB3aXRoIHN0b3JhZ2UgZXZlbnQuXHJcbiAgICAgICAgICAgIC8vIERpZmZlcmVudGlhdGUgdGhpcyBzaW11bGF0ZWQgZXZlbnQgZnJvbSB0aGUgcmVhbCBzdG9yYWdlIGV2ZW50LlxyXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYihrZXksIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblN0b3JhZ2VFdmVudChldmVudCwgcG9sbCA9IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gS2V5IHdvdWxkIGJlIG51bGwgaW4gc29tZSBzaXR1YXRpb25zLCBsaWtlIHdoZW4gbG9jYWxTdG9yYWdlIGlzIGNsZWFyZWRcclxuICAgICAgICBpZiAoIWV2ZW50LmtleSkge1xyXG4gICAgICAgICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKChrZXksIF9vbGRWYWx1ZSwgbmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKGtleSwgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIG1lY2hhbmlzbSBob3cgdGhpcyBldmVudCB3YXMgZGV0ZWN0ZWQuXHJcbiAgICAgICAgLy8gVGhlIGZpcnN0IGV2ZW50IHdpbGwgZGljdGF0ZSB0aGUgbWVjaGFuaXNtIHRvIGJlIHVzZWQuXHJcbiAgICAgICAgaWYgKHBvbGwpIHtcclxuICAgICAgICAgICAgLy8gRW52aXJvbm1lbnQgZGV0ZWN0cyBzdG9yYWdlIGNoYW5nZXMgdmlhIHBvbGxpbmcuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBzdG9yYWdlIGV2ZW50IGxpc3RlbmVyIHRvIHByZXZlbnQgcG9zc2libGUgZXZlbnQgZHVwbGljYXRpb24uXHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoTGlzdGVuZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEVudmlyb25tZW50IGRldGVjdHMgc3RvcmFnZSBjaGFuZ2VzIHZpYSBzdG9yYWdlIGV2ZW50IGxpc3RlbmVyLlxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgcG9sbGluZyBsaXN0ZW5lciB0byBwcmV2ZW50IHBvc3NpYmxlIGV2ZW50IGR1cGxpY2F0aW9uLlxyXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNhZmFyaSBlbWJlZGRlZCBpZnJhbWUuIFN0b3JhZ2UgZXZlbnQgd2lsbCB0cmlnZ2VyIHdpdGggdGhlIGRlbHRhXHJcbiAgICAgICAgLy8gY2hhbmdlcyBidXQgbm8gY2hhbmdlcyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGlmcmFtZSBsb2NhbFN0b3JhZ2UuXHJcbiAgICAgICAgaWYgKHRoaXMuc2FmYXJpTG9jYWxTdG9yYWdlTm90U3luY2VkKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGlmcmFtZSBwYWdlIHZhbHVlLlxyXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIC8vIFZhbHVlIG5vdCBzeW5jaHJvbml6ZWQsIHN5bmNocm9uaXplIG1hbnVhbGx5LlxyXG4gICAgICAgICAgICBpZiAoZXZlbnQubmV3VmFsdWUgIT09IHN0b3JlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmV3VmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZSBjaGFuZ2VkIGZyb20gY3VycmVudCB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIGV2ZW50Lm5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgdmFsdWUgZGVsZXRlZC5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubG9jYWxDYWNoZVtrZXldID09PSBldmVudC5uZXdWYWx1ZSAmJiAhcG9sbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQWxyZWFkeSBkZXRlY3RlZCBhbmQgcHJvY2Vzc2VkLCBkbyBub3QgdHJpZ2dlciBsaXN0ZW5lcnMgYWdhaW4uXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckxpc3RlbmVycyA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gS2VlcCBsb2NhbCBtYXAgdXAgdG8gZGF0ZSBpbiBjYXNlIHN0b3JhZ2UgZXZlbnQgaXMgdHJpZ2dlcmVkIGJlZm9yZVxyXG4gICAgICAgICAgICAvLyBwb2xsLlxyXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIGlmICghcG9sbCAmJiB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9PT0gc3RvcmVkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlYWwgc3RvcmFnZSBldmVudCB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIGRldGVjdGVkLCBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyB0byB0cmlnZ2VyIGluIHNvbWUgSUUgYnJvd3NlcnMgZm9yIHNvbWUgcmVhc29uLlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKGtleSwgc3RvcmVkVmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgIGlmIChfaXNJRTEwKCkgJiZcclxuICAgICAgICAgICAgc3RvcmVkVmFsdWUgIT09IGV2ZW50Lm5ld1ZhbHVlICYmXHJcbiAgICAgICAgICAgIGV2ZW50Lm5ld1ZhbHVlICE9PSBldmVudC5vbGRWYWx1ZSkge1xyXG4gICAgICAgICAgICAvLyBJRSAxMCBoYXMgdGhpcyB3ZWlyZCBidWcgd2hlcmUgYSBzdG9yYWdlIGV2ZW50IHdvdWxkIHRyaWdnZXIgd2l0aCB0aGVcclxuICAgICAgICAgICAgLy8gY29ycmVjdCBrZXksIG9sZFZhbHVlIGFuZCBuZXdWYWx1ZSBidXQgbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSBkb2VzXHJcbiAgICAgICAgICAgIC8vIG5vdCB5aWVsZCB0aGUgdXBkYXRlZCB2YWx1ZSB1bnRpbCBhIGZldyBtaWxsaXNlY29uZHMuIFRoaXMgZW5zdXJlc1xyXG4gICAgICAgICAgICAvLyB0aGlzIHJlY292ZXJzIGZyb20gdGhhdCBzaXR1YXRpb24uXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodHJpZ2dlckxpc3RlbmVycywgSUUxMF9MT0NBTF9TVE9SQUdFX1NZTkNfREVMQVkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHJpZ2dlckxpc3RlbmVycygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG5vdGlmeUxpc3RlbmVycyhrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xyXG4gICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBBcnJheS5mcm9tKGxpc3RlbmVycykpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFydFBvbGxpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xyXG4gICAgICAgIHRoaXMucG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKChrZXksIG9sZFZhbHVlLCBuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblN0b3JhZ2VFdmVudChuZXcgU3RvcmFnZUV2ZW50KCdzdG9yYWdlJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSksIFxyXG4gICAgICAgICAgICAgICAgLyogcG9sbCAqLyB0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgX1BPTExJTkdfSU5URVJWQUxfTVMkMSk7XHJcbiAgICB9XHJcbiAgICBzdG9wUG9sbGluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5wb2xsVGltZXIpIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBvbGxUaW1lcik7XHJcbiAgICAgICAgICAgIHRoaXMucG9sbFRpbWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhdHRhY2hMaXN0ZW5lcigpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZGV0YWNoTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyKTtcclxuICAgIH1cclxuICAgIF9hZGRMaXN0ZW5lcihrZXksIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gV2hldGhlciBicm93c2VyIGNhbiBkZXRlY3Qgc3RvcmFnZSBldmVudCB3aGVuIGl0IGhhZCBhbHJlYWR5IGJlZW4gcHVzaGVkIHRvIHRoZSBiYWNrZ3JvdW5kLlxyXG4gICAgICAgICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaW4gc29tZSBtb2JpbGUgYnJvd3NlcnMuIEEgbG9jYWxTdG9yYWdlIGNoYW5nZSBpbiB0aGUgZm9yZWdyb3VuZCB3aW5kb3dcclxuICAgICAgICAgICAgLy8gd2lsbCBub3QgYmUgZGV0ZWN0ZWQgaW4gdGhlIGJhY2tncm91bmQgd2luZG93IHZpYSB0aGUgc3RvcmFnZSBldmVudC5cclxuICAgICAgICAgICAgLy8gVGhpcyB3YXMgZGV0ZWN0ZWQgaW4gaU9TIDcueCBtb2JpbGUgYnJvd3NlcnNcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmFsbGJhY2tUb1BvbGxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb2xsaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaExpc3RlbmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2tleV0gPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgICAgIC8vIFBvcHVsYXRlIHRoZSBjYWNoZSB0byBhdm9pZCBzcHVyaW91c2x5IHRyaWdnZXJpbmcgb24gZmlyc3QgcG9sbC5cclxuICAgICAgICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxpc3RlbmVyc1trZXldLmFkZChsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICBfcmVtb3ZlTGlzdGVuZXIoa2V5LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2tleV0uZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2tleV0uc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kZXRhY2hMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gVXBkYXRlIGxvY2FsIGNhY2hlIG9uIGJhc2Ugb3BlcmF0aW9uczpcclxuICAgIGFzeW5jIF9zZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLl9zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBfZ2V0KGtleSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgc3VwZXIuX2dldChrZXkpO1xyXG4gICAgICAgIHRoaXMubG9jYWxDYWNoZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9yZW1vdmUoa2V5KSB7XHJcbiAgICAgICAgYXdhaXQgc3VwZXIuX3JlbW92ZShrZXkpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxvY2FsQ2FjaGVba2V5XTtcclxuICAgIH1cclxufVxyXG5Ccm93c2VyTG9jYWxQZXJzaXN0ZW5jZS50eXBlID0gJ0xPQ0FMJztcclxuLyoqXHJcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBQZXJzaXN0ZW5jZX0gb2YgdHlwZSBgTE9DQUxgIHVzaW5nIGBsb2NhbFN0b3JhZ2VgXHJcbiAqIGZvciB0aGUgdW5kZXJseWluZyBzdG9yYWdlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSA9IEJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBCcm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlIGV4dGVuZHMgQnJvd3NlclBlcnNpc3RlbmNlQ2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKCkgPT4gd2luZG93LnNlc3Npb25TdG9yYWdlLCBcIlNFU1NJT05cIiAvKiBTRVNTSU9OICovKTtcclxuICAgIH1cclxuICAgIF9hZGRMaXN0ZW5lcihfa2V5LCBfbGlzdGVuZXIpIHtcclxuICAgICAgICAvLyBMaXN0ZW5lcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIHNlc3Npb24gc3RvcmFnZSBzaW5jZSBpdCBjYW5ub3QgYmUgc2hhcmVkIGFjcm9zcyB3aW5kb3dzXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9rZXksIF9saXN0ZW5lcikge1xyXG4gICAgICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3Igc2Vzc2lvbiBzdG9yYWdlIHNpbmNlIGl0IGNhbm5vdCBiZSBzaGFyZWQgYWNyb3NzIHdpbmRvd3NcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn1cclxuQnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZS50eXBlID0gJ1NFU1NJT04nO1xyXG4vKipcclxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiBgU0VTU0lPTmAgdXNpbmcgYHNlc3Npb25TdG9yYWdlYFxyXG4gKiBmb3IgdGhlIHVuZGVybHlpbmcgc3RvcmFnZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZSA9IEJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2U7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTaGltIGZvciBQcm9taXNlLmFsbFNldHRsZWQsIG5vdGUgdGhlIHNsaWdodGx5IGRpZmZlcmVudCBmb3JtYXQgb2YgYGZ1bGZpbGxlZGAgdnMgYHN0YXR1c2AuXHJcbiAqXHJcbiAqIEBwYXJhbSBwcm9taXNlcyAtIEFycmF5IG9mIHByb21pc2VzIHRvIHdhaXQgb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBfYWxsU2V0dGxlZChwcm9taXNlcykge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLm1hcChhc3luYyAocHJvbWlzZSkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcHJvbWlzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZ1bGZpbGxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChyZWFzb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZ1bGZpbGxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZWFzb25cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEludGVyZmFjZSBjbGFzcyBmb3IgcmVjZWl2aW5nIG1lc3NhZ2VzLlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgUmVjZWl2ZXIge1xyXG4gICAgY29uc3RydWN0b3IoZXZlbnRUYXJnZXQpIHtcclxuICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0ID0gZXZlbnRUYXJnZXQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyc01hcCA9IHt9O1xyXG4gICAgICAgIHRoaXMuYm91bmRFdmVudEhhbmRsZXIgPSB0aGlzLmhhbmRsZUV2ZW50LmJpbmQodGhpcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE9idGFpbiBhbiBpbnN0YW5jZSBvZiBhIFJlY2VpdmVyIGZvciBhIGdpdmVuIGV2ZW50IHRhcmdldCwgaWYgbm9uZSBleGlzdHMgaXQgd2lsbCBiZSBjcmVhdGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudFRhcmdldCAtIEFuIGV2ZW50IHRhcmdldCAoc3VjaCBhcyB3aW5kb3cgb3Igc2VsZikgdGhyb3VnaCB3aGljaCB0aGUgdW5kZXJseWluZ1xyXG4gICAgICogbWVzc2FnZXMgd2lsbCBiZSByZWNlaXZlZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIF9nZXRJbnN0YW5jZShldmVudFRhcmdldCkge1xyXG4gICAgICAgIC8vIFRoZSByZXN1bHRzIGFyZSBzdG9yZWQgaW4gYW4gYXJyYXkgc2luY2Ugb2JqZWN0cyBjYW4ndCBiZSBrZXlzIGZvciBvdGhlclxyXG4gICAgICAgIC8vIG9iamVjdHMuIEluIGFkZGl0aW9uLCBzZXR0aW5nIGEgdW5pcXVlIHByb3BlcnR5IG9uIGFuIGV2ZW50IHRhcmdldCBhcyBhXHJcbiAgICAgICAgLy8gaGFzaCBtYXAga2V5IG1heSBub3QgYmUgYWxsb3dlZCBkdWUgdG8gQ09SUyByZXN0cmljdGlvbnMuXHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMucmVjZWl2ZXJzLmZpbmQocmVjZWl2ZXIgPT4gcmVjZWl2ZXIuaXNMaXN0ZW5pbmd0byhldmVudFRhcmdldCkpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdJbnN0YW5jZSA9IG5ldyBSZWNlaXZlcihldmVudFRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlcnMucHVzaChuZXdJbnN0YW5jZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0luc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgaXNMaXN0ZW5pbmd0byhldmVudFRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0ID09PSBldmVudFRhcmdldDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRmFucyBvdXQgYSBNZXNzYWdlRXZlbnQgdG8gdGhlIGFwcHJvcHJpYXRlIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcmVtYXJrc1xyXG4gICAgICogU2VuZHMgYW4ge0BsaW5rIFN0YXR1cy5BQ0t9IHVwb24gcmVjZWlwdCBhbmQgYSB7QGxpbmsgU3RhdHVzLkRPTkV9IG9uY2UgYWxsIGhhbmRsZXJzIGhhdmVcclxuICAgICAqIGZpbmlzaGVkIHByb2Nlc3NpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIE1lc3NhZ2VFdmVudC5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGhhbmRsZUV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgY29uc3QgeyBldmVudElkLCBldmVudFR5cGUsIGRhdGEgfSA9IG1lc3NhZ2VFdmVudC5kYXRhO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xyXG4gICAgICAgIGlmICghKGhhbmRsZXJzID09PSBudWxsIHx8IGhhbmRsZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBoYW5kbGVycy5zaXplKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lc3NhZ2VFdmVudC5wb3J0c1swXS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHN0YXR1czogXCJhY2tcIiAvKiBBQ0sgKi8sXHJcbiAgICAgICAgICAgIGV2ZW50SWQsXHJcbiAgICAgICAgICAgIGV2ZW50VHlwZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkuZnJvbShoYW5kbGVycykubWFwKGFzeW5jIChoYW5kbGVyKSA9PiBoYW5kbGVyKG1lc3NhZ2VFdmVudC5vcmlnaW4sIGRhdGEpKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9hbGxTZXR0bGVkKHByb21pc2VzKTtcclxuICAgICAgICBtZXNzYWdlRXZlbnQucG9ydHNbMF0ucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBzdGF0dXM6IFwiZG9uZVwiIC8qIERPTkUgKi8sXHJcbiAgICAgICAgICAgIGV2ZW50SWQsXHJcbiAgICAgICAgICAgIGV2ZW50VHlwZSxcclxuICAgICAgICAgICAgcmVzcG9uc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlIGFuIGV2ZW50IGhhbmRsZXIgZm9yIGEgcGFydGljdWxhciBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gRXZlbnQgbmFtZSB0byBzdWJzY3JpYmUgdG8uXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRIYW5kbGVyIC0gVGhlIGV2ZW50IGhhbmRsZXIgd2hpY2ggc2hvdWxkIHJlY2VpdmUgdGhlIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIF9zdWJzY3JpYmUoZXZlbnRUeXBlLCBldmVudEhhbmRsZXIpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5oYW5kbGVyc01hcCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0gPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXS5hZGQoZXZlbnRIYW5kbGVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmUgYW4gZXZlbnQgaGFuZGxlciBmcm9tIGEgcGFydGljdWxhciBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gRXZlbnQgbmFtZSB0byB1bnN1YnNjcmliZSBmcm9tLlxyXG4gICAgICogQHBhcmFtIGV2ZW50SGFuZGxlciAtIE9wdGlub2FsIGV2ZW50IGhhbmRsZXIsIGlmIG5vbmUgcHJvdmlkZWQsIHVuc3Vic2NyaWJlIGFsbCBoYW5kbGVycyBvbiB0aGlzIGV2ZW50LlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgX3Vuc3Vic2NyaWJlKGV2ZW50VHlwZSwgZXZlbnRIYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSAmJiBldmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdLmRlbGV0ZShldmVudEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWV2ZW50SGFuZGxlciB8fCB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0uc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5oYW5kbGVyc01hcCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5SZWNlaXZlci5yZWNlaXZlcnMgPSBbXTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gX2dlbmVyYXRlRXZlbnRJZChwcmVmaXggPSAnJywgZGlnaXRzID0gMTApIHtcclxuICAgIGxldCByYW5kb20gPSAnJztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzOyBpKyspIHtcclxuICAgICAgICByYW5kb20gKz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHJhbmRvbTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBzZW5kaW5nIG1lc3NhZ2VzIGFuZCB3YWl0aW5nIGZvciBhIGNvbXBsZXRpb24gcmVzcG9uc2UuXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBTZW5kZXIge1xyXG4gICAgY29uc3RydWN0b3IodGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IG5ldyBTZXQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmUgdGhlIGhhbmRsZXIgYW5kIHJlbW92ZSBpdCBmcm9tIG91ciB0cmFja2luZyBTZXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGhhbmRsZXIgLSBUaGUgaGFuZGxlciB0byB1bnN1YnNjcmliZS5cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlTWVzc2FnZUhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgICAgIGlmIChoYW5kbGVyLm1lc3NhZ2VDaGFubmVsKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIubWVzc2FnZUNoYW5uZWwucG9ydDEucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIub25NZXNzYWdlKTtcclxuICAgICAgICAgICAgaGFuZGxlci5tZXNzYWdlQ2hhbm5lbC5wb3J0MS5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRsZXJzLmRlbGV0ZShoYW5kbGVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIFJlY2VpdmVyIGxvY2F0ZWQgYXQge0BsaW5rIHRhcmdldH0uXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIFdlJ2xsIGZpcnN0IHdhaXQgYSBiaXQgZm9yIGFuIEFDSyAsIGlmIHdlIGdldCBvbmUgd2Ugd2lsbCB3YWl0IHNpZ25pZmljYW50bHkgbG9uZ2VyIHVudGlsIHRoZVxyXG4gICAgICogcmVjZWl2ZXIgaGFzIGhhZCBhIGNoYW5jZSB0byBmdWxseSBwcm9jZXNzIHRoZSBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gVHlwZSBvZiBldmVudCB0byBzZW5kLlxyXG4gICAgICogQHBhcmFtIGRhdGEgLSBUaGUgcGF5bG9hZCBvZiB0aGUgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gdGltZW91dCAtIFRpbWVvdXQgZm9yIHdhaXRpbmcgb24gYW4gQUNLIGZyb20gdGhlIHJlY2VpdmVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHNldHRsZWQgcHJvbWlzZXMgZnJvbSBhbGwgdGhlIGhhbmRsZXJzIHRoYXQgd2VyZSBsaXN0ZW5pbmcgb24gdGhlIHJlY2VpdmVyLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBfc2VuZChldmVudFR5cGUsIGRhdGEsIHRpbWVvdXQgPSA1MCAvKiBBQ0sgKi8pIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlQ2hhbm5lbCA9IHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgTWVzc2FnZUNoYW5uZWwoKSA6IG51bGw7XHJcbiAgICAgICAgaWYgKCFtZXNzYWdlQ2hhbm5lbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb25uZWN0aW9uX3VuYXZhaWxhYmxlXCIgLyogQ09OTkVDVElPTl9VTkFWQUlMQUJMRSAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXHJcbiAgICAgICAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSB3aGF0IHRoZSB2YWx1ZSBpcyBidXQgVFMgd29uJ3QgYWNjZXB0IHVua25vd24gYW5kXHJcbiAgICAgICAgLy8gd2UgY2FuJ3QgY2FzdCBwcm9wZXJseSBpbiBib3RoIGVudmlyb25tZW50cy5cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIGxldCBjb21wbGV0aW9uVGltZXI7XHJcbiAgICAgICAgbGV0IGhhbmRsZXI7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnRJZCA9IF9nZW5lcmF0ZUV2ZW50SWQoJycsIDIwKTtcclxuICAgICAgICAgICAgbWVzc2FnZUNoYW5uZWwucG9ydDEuc3RhcnQoKTtcclxuICAgICAgICAgICAgY29uc3QgYWNrVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZF9ldmVudFwiIC8qIFVOU1VQUE9SVEVEX0VWRU5UICovKSk7XHJcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICBoYW5kbGVyID0ge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUNoYW5uZWwsXHJcbiAgICAgICAgICAgICAgICBvbk1lc3NhZ2UoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBldmVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUV2ZW50LmRhdGEuZXZlbnRJZCAhPT0gZXZlbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZUV2ZW50LmRhdGEuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY2tcIiAvKiBBQ0sgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVjZWl2ZXIgc2hvdWxkIEFDSyBmaXJzdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChhY2tUaW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwidGltZW91dFwiIC8qIFRJTUVPVVQgKi8pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDAgLyogQ09NUExFVElPTiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRvbmVcIiAvKiBET05FICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25jZSB0aGUgcmVjZWl2ZXIncyBoYW5kbGVycyBhcmUgZmluaXNoZWQgd2Ugd2lsbCBnZXQgdGhlIHJlc3VsdHMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29tcGxldGlvblRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZUV2ZW50LmRhdGEucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYWNrVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbXBsZXRpb25UaW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiaW52YWxpZF9yZXNwb25zZVwiIC8qIElOVkFMSURfUkVTUE9OU0UgKi8pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5hZGQoaGFuZGxlcik7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQxLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLm9uTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSxcclxuICAgICAgICAgICAgICAgIGV2ZW50SWQsXHJcbiAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgIH0sIFttZXNzYWdlQ2hhbm5lbC5wb3J0Ml0pO1xyXG4gICAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVNZXNzYWdlSGFuZGxlcihoYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBMYXp5IGFjY2Vzc29yIGZvciB3aW5kb3csIHNpbmNlIHRoZSBjb21wYXQgbGF5ZXIgd29uJ3QgdHJlZSBzaGFrZSB0aGlzIG91dCxcclxuICogd2UgbmVlZCB0byBtYWtlIHN1cmUgbm90IHRvIG1lc3Mgd2l0aCB3aW5kb3cgdW5sZXNzIHdlIGhhdmUgdG9cclxuICovXHJcbmZ1bmN0aW9uIF93aW5kb3coKSB7XHJcbiAgICByZXR1cm4gd2luZG93O1xyXG59XHJcbmZ1bmN0aW9uIF9zZXRXaW5kb3dMb2NhdGlvbih1cmwpIHtcclxuICAgIF93aW5kb3coKS5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBfaXNXb3JrZXIoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBfd2luZG93KClbJ1dvcmtlckdsb2JhbFNjb3BlJ10gIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIF93aW5kb3coKVsnaW1wb3J0U2NyaXB0cyddID09PSAnZnVuY3Rpb24nKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBfZ2V0QWN0aXZlU2VydmljZVdvcmtlcigpIHtcclxuICAgIGlmICghKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uLmFjdGl2ZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIF9nZXRTZXJ2aWNlV29ya2VyQ29udHJvbGxlcigpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiAoKF9hID0gbmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250cm9sbGVyKSB8fCBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIF9nZXRXb3JrZXJHbG9iYWxTY29wZSgpIHtcclxuICAgIHJldHVybiBfaXNXb3JrZXIoKSA/IHNlbGYgOiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IERCX05BTUUgPSAnZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYic7XHJcbmNvbnN0IERCX1ZFUlNJT04gPSAxO1xyXG5jb25zdCBEQl9PQkpFQ1RTVE9SRV9OQU1FID0gJ2ZpcmViYXNlTG9jYWxTdG9yYWdlJztcclxuY29uc3QgREJfREFUQV9LRVlQQVRIID0gJ2ZiYXNlX2tleSc7XHJcbi8qKlxyXG4gKiBQcm9taXNlIHdyYXBwZXIgZm9yIElEQlJlcXVlc3RcclxuICpcclxuICogVW5mb3J0dW5hdGVseSB3ZSBjYW4ndCBjbGVhbmx5IGV4dGVuZCBQcm9taXNlPFQ+IHNpbmNlIHByb21pc2VzIGFyZSBub3QgY2FsbGFibGUgaW4gRVM2XHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBEQlByb21pc2Uge1xyXG4gICAgY29uc3RydWN0b3IocmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XHJcbiAgICB9XHJcbiAgICB0b1Byb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVxdWVzdC5yZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMucmVxdWVzdC5lcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldE9iamVjdFN0b3JlKGRiLCBpc1JlYWRXcml0ZSkge1xyXG4gICAgcmV0dXJuIGRiXHJcbiAgICAgICAgLnRyYW5zYWN0aW9uKFtEQl9PQkpFQ1RTVE9SRV9OQU1FXSwgaXNSZWFkV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpXHJcbiAgICAgICAgLm9iamVjdFN0b3JlKERCX09CSkVDVFNUT1JFX05BTUUpO1xyXG59XHJcbmZ1bmN0aW9uIF9kZWxldGVEYXRhYmFzZSgpIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoREJfTkFNRSk7XHJcbiAgICByZXR1cm4gbmV3IERCUHJvbWlzZShyZXF1ZXN0KS50b1Byb21pc2UoKTtcclxufVxyXG5mdW5jdGlvbiBfb3BlbkRhdGFiYXNlKCkge1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKERCX05BTUUsIERCX1ZFUlNJT04pO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYiA9IHJlcXVlc3QucmVzdWx0O1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoREJfT0JKRUNUU1RPUkVfTkFNRSwgeyBrZXlQYXRoOiBEQl9EQVRBX0tFWVBBVEggfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGIgPSByZXF1ZXN0LnJlc3VsdDtcclxuICAgICAgICAgICAgLy8gU3RyYW5nZSBidWcgdGhhdCBvY2N1cnMgaW4gRmlyZWZveCB3aGVuIG11bHRpcGxlIHRhYnMgYXJlIG9wZW5lZCBhdCB0aGVcclxuICAgICAgICAgICAgLy8gc2FtZSB0aW1lLiBUaGUgb25seSB3YXkgdG8gcmVjb3ZlciBzZWVtcyB0byBiZSBkZWxldGluZyB0aGUgZGF0YWJhc2VcclxuICAgICAgICAgICAgLy8gYW5kIHJlLWluaXRpYWxpemluZyBpdC5cclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9pc3N1ZXMvNjM0XHJcbiAgICAgICAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhEQl9PQkpFQ1RTVE9SRV9OQU1FKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBjbG9zZSB0aGUgZGF0YWJhc2Ugb3IgZWxzZSB5b3UgZ2V0IGEgYGJsb2NrZWRgIGV2ZW50XHJcbiAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgX2RlbGV0ZURhdGFiYXNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGF3YWl0IF9vcGVuRGF0YWJhc2UoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGRiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX3B1dE9iamVjdChkYiwga2V5LCB2YWx1ZSkge1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IGdldE9iamVjdFN0b3JlKGRiLCB0cnVlKS5wdXQoe1xyXG4gICAgICAgIFtEQl9EQVRBX0tFWVBBVEhdOiBrZXksXHJcbiAgICAgICAgdmFsdWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBEQlByb21pc2UocmVxdWVzdCkudG9Qcm9taXNlKCk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZ2V0T2JqZWN0KGRiLCBrZXkpIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBnZXRPYmplY3RTdG9yZShkYiwgZmFsc2UpLmdldChrZXkpO1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG5ldyBEQlByb21pc2UocmVxdWVzdCkudG9Qcm9taXNlKCk7XHJcbiAgICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRhdGEudmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gX2RlbGV0ZU9iamVjdChkYiwga2V5KSB7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0gZ2V0T2JqZWN0U3RvcmUoZGIsIHRydWUpLmRlbGV0ZShrZXkpO1xyXG4gICAgcmV0dXJuIG5ldyBEQlByb21pc2UocmVxdWVzdCkudG9Qcm9taXNlKCk7XHJcbn1cclxuY29uc3QgX1BPTExJTkdfSU5URVJWQUxfTVMgPSA4MDA7XHJcbmNvbnN0IF9UUkFOU0FDVElPTl9SRVRSWV9DT1VOVCA9IDM7XHJcbmNsYXNzIEluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJMT0NBTFwiIC8qIExPQ0FMICovO1xyXG4gICAgICAgIHRoaXMuX3Nob3VsZEFsbG93TWlncmF0aW9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMubG9jYWxDYWNoZSA9IHt9O1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQgcmV0dXJuIHZhbHVlIGlzIHBsYXRmb3JtIHNwZWNpZmljXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICB0aGlzLnBvbGxUaW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nV3JpdGVzID0gMDtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbmRlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlV29ya2VyUmVjZWl2ZXJBdmFpbGFibGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVNlcnZpY2VXb3JrZXIgPSBudWxsO1xyXG4gICAgICAgIC8vIEZpcmUgJiBmb3JnZXQgdGhlIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBhcyBpdCBtYXkgbmV2ZXIgcmVzb2x2ZVxyXG4gICAgICAgIHRoaXMuX3dvcmtlckluaXRpYWxpemF0aW9uUHJvbWlzZSA9XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVNlcnZpY2VXb3JrZXJNZXNzYWdpbmcoKS50aGVuKCgpID0+IHsgfSwgKCkgPT4geyB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9vcGVuRGIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGIgPSBhd2FpdCBfb3BlbkRhdGFiYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBfd2l0aFJldHJpZXMob3ApIHtcclxuICAgICAgICBsZXQgbnVtQXR0ZW1wdHMgPSAwO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuX29wZW5EYigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG9wKGRiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bUF0dGVtcHRzKysgPiBfVFJBTlNBQ1RJT05fUkVUUllfQ09VTlQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRiLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGFkZGluZyBleHBvbmVudGlhbCBiYWNrb2ZmXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluZGV4ZWREQiBldmVudHMgZG8gbm90IHByb3BhZ2F0ZSBmcm9tIHRoZSBtYWluIHdpbmRvdyB0byB0aGUgd29ya2VyIGNvbnRleHQuICBXZSByZWx5IG9uIGFcclxuICAgICAqIHBvc3RNZXNzYWdlIGludGVyZmFjZSB0byBzZW5kIHRoZXNlIGV2ZW50cyB0byB0aGUgd29ya2VyIG91cnNlbHZlcy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgaW5pdGlhbGl6ZVNlcnZpY2VXb3JrZXJNZXNzYWdpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9pc1dvcmtlcigpID8gdGhpcy5pbml0aWFsaXplUmVjZWl2ZXIoKSA6IHRoaXMuaW5pdGlhbGl6ZVNlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBcyB0aGUgd29ya2VyIHdlIHNob3VsZCBsaXN0ZW4gdG8gZXZlbnRzIGZyb20gdGhlIG1haW4gd2luZG93LlxyXG4gICAgICovXHJcbiAgICBhc3luYyBpbml0aWFsaXplUmVjZWl2ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlciA9IFJlY2VpdmVyLl9nZXRJbnN0YW5jZShfZ2V0V29ya2VyR2xvYmFsU2NvcGUoKSk7XHJcbiAgICAgICAgLy8gUmVmcmVzaCBmcm9tIHBlcnNpc3RlbmNlIGlmIHdlIHJlY2VpdmUgYSBLZXlDaGFuZ2VkIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5yZWNlaXZlci5fc3Vic2NyaWJlKFwia2V5Q2hhbmdlZFwiIC8qIEtFWV9DSEFOR0VEICovLCBhc3luYyAoX29yaWdpbiwgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgdGhpcy5fcG9sbCgpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAga2V5UHJvY2Vzc2VkOiBrZXlzLmluY2x1ZGVzKGRhdGEua2V5KVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIExldCB0aGUgc2VuZGVyIGtub3cgdGhhdCB3ZSBhcmUgbGlzdGVuaW5nIHNvIHRoZXkgZ2l2ZSB1cyBtb3JlIHRpbWVvdXQuXHJcbiAgICAgICAgdGhpcy5yZWNlaXZlci5fc3Vic2NyaWJlKFwicGluZ1wiIC8qIFBJTkcgKi8sIGFzeW5jIChfb3JpZ2luLCBfZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wia2V5Q2hhbmdlZFwiIC8qIEtFWV9DSEFOR0VEICovXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXMgdGhlIG1haW4gd2luZG93LCB3ZSBzaG91bGQgbGV0IHRoZSB3b3JrZXIga25vdyB3aGVuIGtleXMgY2hhbmdlIChzZXQgYW5kIHJlbW92ZSkuXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmljZVdvcmtlckNvbnRhaW5lci9yZWFkeSB8IFNlcnZpY2VXb3JrZXJDb250YWluZXIucmVhZHl9XHJcbiAgICAgKiBtYXkgbm90IHJlc29sdmUuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRpYWxpemVTZW5kZXIoKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlcmUncyBhbiBhY3RpdmUgc2VydmljZSB3b3JrZXIuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyID0gYXdhaXQgX2dldEFjdGl2ZVNlcnZpY2VXb3JrZXIoKTtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlU2VydmljZVdvcmtlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VuZGVyID0gbmV3IFNlbmRlcih0aGlzLmFjdGl2ZVNlcnZpY2VXb3JrZXIpO1xyXG4gICAgICAgIC8vIFBpbmcgdGhlIHNlcnZpY2Ugd29ya2VyIHRvIGNoZWNrIHdoYXQgZXZlbnRzIHRoZXkgY2FuIGhhbmRsZS5cclxuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5zZW5kZXIuX3NlbmQoXCJwaW5nXCIgLyogUElORyAqLywge30sIDgwMCAvKiBMT05HX0FDSyAqLyk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCgoX2EgPSByZXN1bHRzWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZnVsZmlsbGVkKSAmJlxyXG4gICAgICAgICAgICAoKF9iID0gcmVzdWx0c1swXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhbHVlLmluY2x1ZGVzKFwia2V5Q2hhbmdlZFwiIC8qIEtFWV9DSEFOR0VEICovKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlV29ya2VyUmVjZWl2ZXJBdmFpbGFibGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTGV0IHRoZSB3b3JrZXIga25vdyBhYm91dCBhIGNoYW5nZWQga2V5LCB0aGUgZXhhY3Qga2V5IGRvZXNuJ3QgdGVjaG5pY2FsbHkgbWF0dGVyIHNpbmNlIHRoZVxyXG4gICAgICogd29ya2VyIHdpbGwganVzdCB0cmlnZ2VyIGEgZnVsbCBzeW5jIGFueXdheS5cclxuICAgICAqXHJcbiAgICAgKiBAcmVtYXJrc1xyXG4gICAgICogRm9yIG5vdywgd2Ugb25seSBzdXBwb3J0IG9uZSBzZXJ2aWNlIHdvcmtlciBwZXIgcGFnZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ga2V5IC0gU3RvcmFnZSBrZXkgd2hpY2ggY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgbm90aWZ5U2VydmljZVdvcmtlcihrZXkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2VuZGVyIHx8XHJcbiAgICAgICAgICAgICF0aGlzLmFjdGl2ZVNlcnZpY2VXb3JrZXIgfHxcclxuICAgICAgICAgICAgX2dldFNlcnZpY2VXb3JrZXJDb250cm9sbGVyKCkgIT09IHRoaXMuYWN0aXZlU2VydmljZVdvcmtlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZGVyLl9zZW5kKFwia2V5Q2hhbmdlZFwiIC8qIEtFWV9DSEFOR0VEICovLCB7IGtleSB9LCBcclxuICAgICAgICAgICAgLy8gVXNlIGxvbmcgdGltZW91dCBpZiByZWNlaXZlciBoYXMgcHJldmlvdXNseSByZXNwb25kZWQgdG8gYSBwaW5nIGZyb20gdXMuXHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZVdvcmtlclJlY2VpdmVyQXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgICA/IDgwMCAvKiBMT05HX0FDSyAqL1xyXG4gICAgICAgICAgICAgICAgOiA1MCAvKiBBQ0sgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJlc3QgZWZmb3J0IGFwcHJvYWNoLiBJZ25vcmUgZXJyb3JzLlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIF9pc0F2YWlsYWJsZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIWluZGV4ZWREQikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGRiID0gYXdhaXQgX29wZW5EYXRhYmFzZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBfcHV0T2JqZWN0KGRiLCBTVE9SQUdFX0FWQUlMQUJMRV9LRVksICcxJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IF9kZWxldGVPYmplY3QoZGIsIFNUT1JBR0VfQVZBSUxBQkxFX0tFWSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHsgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFzeW5jIF93aXRoUGVuZGluZ1dyaXRlKHdyaXRlKSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nV3JpdGVzKys7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgd3JpdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1dyaXRlcy0tO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIF9zZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93aXRoUGVuZGluZ1dyaXRlKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fd2l0aFJldHJpZXMoKGRiKSA9PiBfcHV0T2JqZWN0KGRiLCBrZXksIHZhbHVlKSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxDYWNoZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGlmeVNlcnZpY2VXb3JrZXIoa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9nZXQoa2V5KSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0gKGF3YWl0IHRoaXMuX3dpdGhSZXRyaWVzKChkYikgPT4gZ2V0T2JqZWN0KGRiLCBrZXkpKSk7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSBvYmo7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIGFzeW5jIF9yZW1vdmUoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpdGhQZW5kaW5nV3JpdGUoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl93aXRoUmV0cmllcygoZGIpID0+IF9kZWxldGVPYmplY3QoZGIsIGtleSkpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2NhbENhY2hlW2tleV07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGlmeVNlcnZpY2VXb3JrZXIoa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9wb2xsKCkge1xyXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGlmIHdlIG5lZWQgdG8gZmFsbGJhY2sgaWYgZ2V0QWxsIGlzIG5vdCBzdXBwb3J0ZWRcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl93aXRoUmV0cmllcygoZGIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ2V0QWxsUmVxdWVzdCA9IGdldE9iamVjdFN0b3JlKGRiLCBmYWxzZSkuZ2V0QWxsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgREJQcm9taXNlKGdldEFsbFJlcXVlc3QpLnRvUHJvbWlzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBwZW5kaW5nIHdyaXRlcyBpbiBwcm9ncmVzcyBhYm9ydCwgd2UnbGwgZ2V0IHBpY2tlZCB1cCBvbiB0aGUgbmV4dCBwb2xsXHJcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1dyaXRlcyAhPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgICAgICBjb25zdCBrZXlzSW5SZXN1bHQgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgZm9yIChjb25zdCB7IGZiYXNlX2tleToga2V5LCB2YWx1ZSB9IG9mIHJlc3VsdCkge1xyXG4gICAgICAgICAgICBrZXlzSW5SZXN1bHQuYWRkKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeSh0aGlzLmxvY2FsQ2FjaGVba2V5XSkgIT09IEpTT04uc3RyaW5naWZ5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGxvY2FsS2V5IG9mIE9iamVjdC5rZXlzKHRoaXMubG9jYWxDYWNoZSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxDYWNoZVtsb2NhbEtleV0gJiYgIWtleXNJblJlc3VsdC5oYXMobG9jYWxLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEZWxldGVkXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhsb2NhbEtleSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2gobG9jYWxLZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgfVxyXG4gICAgbm90aWZ5TGlzdGVuZXJzKGtleSwgbmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2tleV07XHJcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIEFycmF5LmZyb20obGlzdGVuZXJzKSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhcnRQb2xsaW5nKCkge1xyXG4gICAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcclxuICAgICAgICB0aGlzLnBvbGxUaW1lciA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHRoaXMuX3BvbGwoKSwgX1BPTExJTkdfSU5URVJWQUxfTVMpO1xyXG4gICAgfVxyXG4gICAgc3RvcFBvbGxpbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucG9sbFRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsVGltZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnBvbGxUaW1lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2FkZExpc3RlbmVyKGtleSwgbGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9sbGluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XSA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgLy8gUG9wdWxhdGUgdGhlIGNhY2hlIHRvIGF2b2lkIHNwdXJpb3VzbHkgdHJpZ2dlcmluZyBvbiBmaXJzdCBwb2xsLlxyXG4gICAgICAgICAgICB2b2lkIHRoaXMuX2dldChrZXkpOyAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gdGhlIGJhY2tncm91bmQgYXN5bmMgYW5kIHdlIGNhbiByZXR1cm4gaW1tZWRpYXRlbHkuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2tleV0uYWRkKGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIF9yZW1vdmVMaXN0ZW5lcihrZXksIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XS5kZWxldGUobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNba2V5XS5zaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UudHlwZSA9ICdMT0NBTCc7XHJcbi8qKlxyXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgUGVyc2lzdGVuY2V9IG9mIHR5cGUgYExPQ0FMYCB1c2luZyBgaW5kZXhlZERCYFxyXG4gKiBmb3IgdGhlIHVuZGVybHlpbmcgc3RvcmFnZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSA9IEluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2U7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIHN0YXJ0U2lnbkluUGhvbmVNZmEoYXV0aCwgcmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIlBPU1RcIiAvKiBQT1NUICovLCBcIi92Mi9hY2NvdW50cy9tZmFTaWduSW46c3RhcnRcIiAvKiBTVEFSVF9NRkFfU0lHTl9JTiAqLywgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpKTtcclxufVxyXG5mdW5jdGlvbiBmaW5hbGl6ZVNpZ25JblBob25lTWZhKGF1dGgsIHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3QoYXV0aCwgXCJQT1NUXCIgLyogUE9TVCAqLywgXCIvdjIvYWNjb3VudHMvbWZhU2lnbkluOmZpbmFsaXplXCIgLyogRklOQUxJWkVfTUZBX1NJR05fSU4gKi8sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVjYXB0Y2hhUGFyYW1zKGF1dGgpIHtcclxuICAgIHJldHVybiAoKGF3YWl0IF9wZXJmb3JtQXBpUmVxdWVzdChhdXRoLCBcIkdFVFwiIC8qIEdFVCAqLywgXCIvdjEvcmVjYXB0Y2hhUGFyYW1zXCIgLyogR0VUX1JFQ0FQVENIQV9QQVJBTSAqLykpLnJlY2FwdGNoYVNpdGVLZXkgfHwgJycpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldFNjcmlwdFBhcmVudEVsZW1lbnQoKSB7XHJcbiAgICB2YXIgX2EsIF9iO1xyXG4gICAgcmV0dXJuIChfYiA9IChfYSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZG9jdW1lbnQ7XHJcbn1cclxuZnVuY3Rpb24gX2xvYWRKUyh1cmwpIHtcclxuICAgIC8vIFRPRE86IGNvbnNpZGVyIGFkZGluZyB0aW1lb3V0IHN1cHBvcnQgJiBjYW5jZWxsYXRpb25cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHVybCk7XHJcbiAgICAgICAgZWwub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgICBlbC5vbmVycm9yID0gZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gX2NyZWF0ZUVycm9yKFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgICAgIGVycm9yLmN1c3RvbURhdGEgPSBlO1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgIGVsLmNoYXJzZXQgPSAnVVRGLTgnO1xyXG4gICAgICAgIGdldFNjcmlwdFBhcmVudEVsZW1lbnQoKS5hcHBlbmRDaGlsZChlbCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBfZ2VuZXJhdGVDYWxsYmFja05hbWUocHJlZml4KSB7XHJcbiAgICByZXR1cm4gYF9fJHtwcmVmaXh9JHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKX1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IF9TT0xWRV9USU1FX01TID0gNTAwO1xyXG5jb25zdCBfRVhQSVJBVElPTl9USU1FX01TID0gNjAwMDA7XHJcbmNvbnN0IF9XSURHRVRfSURfU1RBUlQgPSAxMDAwMDAwMDAwMDAwO1xyXG5jbGFzcyBNb2NrUmVDYXB0Y2hhIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgpIHtcclxuICAgICAgICB0aGlzLmF1dGggPSBhdXRoO1xyXG4gICAgICAgIHRoaXMuY291bnRlciA9IF9XSURHRVRfSURfU1RBUlQ7XHJcbiAgICAgICAgdGhpcy5fd2lkZ2V0cyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIHJlbmRlcihjb250YWluZXIsIHBhcmFtZXRlcnMpIHtcclxuICAgICAgICBjb25zdCBpZCA9IHRoaXMuY291bnRlcjtcclxuICAgICAgICB0aGlzLl93aWRnZXRzLnNldChpZCwgbmV3IE1vY2tXaWRnZXQoY29udGFpbmVyLCB0aGlzLmF1dGgubmFtZSwgcGFyYW1ldGVycyB8fCB7fSkpO1xyXG4gICAgICAgIHRoaXMuY291bnRlcisrO1xyXG4gICAgICAgIHJldHVybiBpZDtcclxuICAgIH1cclxuICAgIHJlc2V0KG9wdFdpZGdldElkKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcclxuICAgICAgICB2b2lkICgoX2EgPSB0aGlzLl93aWRnZXRzLmdldChpZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWxldGUoKSk7XHJcbiAgICAgICAgdGhpcy5fd2lkZ2V0cy5kZWxldGUoaWQpO1xyXG4gICAgfVxyXG4gICAgZ2V0UmVzcG9uc2Uob3B0V2lkZ2V0SWQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgaWQgPSBvcHRXaWRnZXRJZCB8fCBfV0lER0VUX0lEX1NUQVJUO1xyXG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fd2lkZ2V0cy5nZXQoaWQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0UmVzcG9uc2UoKSkgfHwgJyc7XHJcbiAgICB9XHJcbiAgICBhc3luYyBleGVjdXRlKG9wdFdpZGdldElkKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcclxuICAgICAgICB2b2lkICgoX2EgPSB0aGlzLl93aWRnZXRzLmdldChpZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5leGVjdXRlKCkpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG5jbGFzcyBNb2NrV2lkZ2V0IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lck9ySWQsIGFwcE5hbWUsIHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIHRoaXMudGltZXJJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZWxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVRva2VuID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsaWNrSGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5leGVjdXRlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyT3JJZCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJPcklkKVxyXG4gICAgICAgICAgICA6IGNvbnRhaW5lck9ySWQ7XHJcbiAgICAgICAgX2Fzc2VydChjb250YWluZXIsIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLywgeyBhcHBOYW1lIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdGhpcy5wYXJhbXMuc2l6ZSAhPT0gJ2ludmlzaWJsZSc7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0UmVzcG9uc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0lmRGVsZXRlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlVG9rZW47XHJcbiAgICB9XHJcbiAgICBkZWxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0lmRGVsZXRlZCgpO1xyXG4gICAgICAgIHRoaXMuZGVsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZXJJZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcclxuICAgICAgICAgICAgdGhpcy50aW1lcklkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XHJcbiAgICB9XHJcbiAgICBleGVjdXRlKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tJZkRlbGV0ZWQoKTtcclxuICAgICAgICBpZiAodGhpcy50aW1lcklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlVG9rZW4gPSBnZW5lcmF0ZVJhbmRvbUFscGhhTnVtZXJpY1N0cmluZyg1MCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY2FsbGJhY2ssICdleHBpcmVkLWNhbGxiYWNrJzogZXhwaXJlZENhbGxiYWNrIH0gPSB0aGlzLnBhcmFtcztcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMucmVzcG9uc2VUb2tlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcklkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VUb2tlbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwaXJlZENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJlZENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBfRVhQSVJBVElPTl9USU1FX01TKTtcclxuICAgICAgICB9LCBfU09MVkVfVElNRV9NUyk7XHJcbiAgICB9XHJcbiAgICBjaGVja0lmRGVsZXRlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVDQVBUQ0hBIG1vY2sgd2FzIGFscmVhZHkgZGVsZXRlZCEnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21BbHBoYU51bWVyaWNTdHJpbmcobGVuKSB7XHJcbiAgICBjb25zdCBjaGFycyA9IFtdO1xyXG4gICAgY29uc3QgYWxsb3dlZENoYXJzID0gJzEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBjaGFycy5wdXNoKGFsbG93ZWRDaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsb3dlZENoYXJzLmxlbmd0aCkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBSZUNhcHRjaGEgd2lsbCBsb2FkIHVzaW5nIHRoZSBzYW1lIGNhbGxiYWNrLCBzbyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gbmVlZHNcclxuLy8gdG8gYmUga2VwdCBhcm91bmRcclxuY29uc3QgX0pTTE9BRF9DQUxMQkFDSyA9IF9nZW5lcmF0ZUNhbGxiYWNrTmFtZSgncmNiJyk7XHJcbmNvbnN0IE5FVFdPUktfVElNRU9VVF9ERUxBWSA9IG5ldyBEZWxheSgzMDAwMCwgNjAwMDApO1xyXG5jb25zdCBSRUNBUFRDSEFfQkFTRSA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/JztcclxuLyoqXHJcbiAqIExvYWRlciBmb3IgdGhlIEdSZUNhcHRjaGEgbGlicmFyeS4gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSBvbmUgb2YgdGhpcy5cclxuICovXHJcbmNsYXNzIFJlQ2FwdGNoYUxvYWRlckltcGwge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHRoaXMuaG9zdExhbmd1YWdlID0gJyc7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVjayBmb3IgYHJlbmRlcigpYCBtZXRob2QuIGB3aW5kb3cuZ3JlY2FwdGNoYWAgd2lsbCBleGlzdCBpZiB0aGUgRW50ZXJwcmlzZVxyXG4gICAgICAgICAqIHZlcnNpb24gb2YgdGhlIFJlQ0FQVENIQSBzY3JpcHQgd2FzIGxvYWRlZCBieSBzb21lb25lIGVsc2UgKGUuZy4gQXBwIENoZWNrKSBidXRcclxuICAgICAgICAgKiBgd2luZG93LmdyZWNhcHRjaGEucmVuZGVyKClgIHdpbGwgbm90LiBBbm90aGVyIGxvYWQgd2lsbCBhZGQgaXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5saWJyYXJ5U2VwYXJhdGVseUxvYWRlZCA9ICEhKChfYSA9IF93aW5kb3coKS5ncmVjYXB0Y2hhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVuZGVyKTtcclxuICAgIH1cclxuICAgIGxvYWQoYXV0aCwgaGwgPSAnJykge1xyXG4gICAgICAgIF9hc3NlcnQoaXNIb3N0TGFuZ3VhZ2VWYWxpZChobCksIGF1dGgsIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmVzb2x2ZUltbWVkaWF0ZWx5KGhsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF93aW5kb3coKS5ncmVjYXB0Y2hhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV0d29ya1RpbWVvdXQgPSBfd2luZG93KCkuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiIC8qIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQgKi8pKTtcclxuICAgICAgICAgICAgfSwgTkVUV09SS19USU1FT1VUX0RFTEFZLmdldCgpKTtcclxuICAgICAgICAgICAgX3dpbmRvdygpW19KU0xPQURfQ0FMTEJBQ0tdID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgX3dpbmRvdygpLmNsZWFyVGltZW91dChuZXR3b3JrVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX3dpbmRvdygpW19KU0xPQURfQ0FMTEJBQ0tdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjYXB0Y2hhID0gX3dpbmRvdygpLmdyZWNhcHRjaGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlY2FwdGNoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChfY3JlYXRlRXJyb3IoYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gV3JhcCB0aGUgZ3JlcHRjaGEgcmVuZGVyIGZ1bmN0aW9uIHNvIHRoYXQgd2Uga25vdyBpZiB0aGUgZGV2ZWxvcGVyIGhhc1xyXG4gICAgICAgICAgICAgICAgLy8gY2FsbGVkIGl0IHNlcGFyYXRlbHlcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IHJlY2FwdGNoYS5yZW5kZXI7XHJcbiAgICAgICAgICAgICAgICByZWNhcHRjaGEucmVuZGVyID0gKGNvbnRhaW5lciwgcGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkZ2V0SWQgPSByZW5kZXIoY29udGFpbmVyLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlcisrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aWRnZXRJZDtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RMYW5ndWFnZSA9IGhsO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZWNhcHRjaGEpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHtSRUNBUFRDSEFfQkFTRX0/JHtxdWVyeXN0cmluZyh7XHJcbiAgICAgICAgICAgICAgICBvbmxvYWQ6IF9KU0xPQURfQ0FMTEJBQ0ssXHJcbiAgICAgICAgICAgICAgICByZW5kZXI6ICdleHBsaWNpdCcsXHJcbiAgICAgICAgICAgICAgICBobFxyXG4gICAgICAgICAgICB9KX1gO1xyXG4gICAgICAgICAgICBfbG9hZEpTKHVybCkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG5ldHdvcmtUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChfY3JlYXRlRXJyb3IoYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2xlYXJlZE9uZUluc3RhbmNlKCkge1xyXG4gICAgICAgIHRoaXMuY291bnRlci0tO1xyXG4gICAgfVxyXG4gICAgc2hvdWxkUmVzb2x2ZUltbWVkaWF0ZWx5KGhsKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIFdlIGNhbiByZXNvbHZlIGltbWVkaWF0ZWx5IGlmOlxyXG4gICAgICAgIC8vICAg4oCiIGdyZWNhcHRjaGEgaXMgYWxyZWFkeSBkZWZpbmVkIEFORCAoXHJcbiAgICAgICAgLy8gICAgIDEuIHRoZSByZXF1ZXN0ZWQgbGFuZ3VhZ2UgY29kZXMgYXJlIHRoZSBzYW1lIE9SXHJcbiAgICAgICAgLy8gICAgIDIuIHRoZXJlIGV4aXN0cyBhbHJlYWR5IGEgUmVDYXB0Y2hhIG9uIHRoZSBwYWdlXHJcbiAgICAgICAgLy8gICAgIDMuIHRoZSBsaWJyYXJ5IHdhcyBhbHJlYWR5IGxvYWRlZCBieSB0aGUgYXBwXHJcbiAgICAgICAgLy8gSW4gY2FzZXMgKDIpIGFuZCAoMyksIHdlIF9jYW4ndF8gcmVsb2FkIGFzIGl0IHdvdWxkIGJyZWFrIHRoZSByZWNhcHRjaGFzXHJcbiAgICAgICAgLy8gdGhhdCBhcmUgYWxyZWFkeSBpbiB0aGUgcGFnZVxyXG4gICAgICAgIHJldHVybiAoISEoKF9hID0gX3dpbmRvdygpLmdyZWNhcHRjaGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW5kZXIpICYmXHJcbiAgICAgICAgICAgIChobCA9PT0gdGhpcy5ob3N0TGFuZ3VhZ2UgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA+IDAgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMubGlicmFyeVNlcGFyYXRlbHlMb2FkZWQpKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0hvc3RMYW5ndWFnZVZhbGlkKGhsKSB7XHJcbiAgICByZXR1cm4gaGwubGVuZ3RoIDw9IDYgJiYgL15cXHMqW2EtekEtWjAtOVxcLV0qXFxzKiQvLnRlc3QoaGwpO1xyXG59XHJcbmNsYXNzIE1vY2tSZUNhcHRjaGFMb2FkZXJJbXBsIHtcclxuICAgIGFzeW5jIGxvYWQoYXV0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTW9ja1JlQ2FwdGNoYShhdXRoKTtcclxuICAgIH1cclxuICAgIGNsZWFyZWRPbmVJbnN0YW5jZSgpIHsgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IFJFQ0FQVENIQV9WRVJJRklFUl9UWVBFID0gJ3JlY2FwdGNoYSc7XHJcbmNvbnN0IERFRkFVTFRfUEFSQU1TID0ge1xyXG4gICAgdGhlbWU6ICdsaWdodCcsXHJcbiAgICB0eXBlOiAnaW1hZ2UnXHJcbn07XHJcbi8qKlxyXG4gKiBBbiB7QGxpbmsgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvIHwgcmVDQVBUQ0hBfS1iYXNlZCBhcHBsaWNhdGlvbiB2ZXJpZmllci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY2xhc3MgUmVjYXB0Y2hhVmVyaWZpZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lck9ySWQgLSBUaGUgcmVDQVBUQ0hBIGNvbnRhaW5lciBwYXJhbWV0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHJlbWFya3NcclxuICAgICAqIFRoaXMgaGFzIGRpZmZlcmVudCBtZWFuaW5nIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSByZUNBUFRDSEEgaXMgaGlkZGVuIG9yIHZpc2libGUuIEZvciBhXHJcbiAgICAgKiB2aXNpYmxlIHJlQ0FQVENIQSB0aGUgY29udGFpbmVyIG11c3QgYmUgZW1wdHkuIElmIGEgc3RyaW5nIGlzIHVzZWQsIGl0IGhhcyB0byBjb3JyZXNwb25kIHRvXHJcbiAgICAgKiBhbiBlbGVtZW50IElELiBUaGUgY29ycmVzcG9uZGluZyBlbGVtZW50IG11c3QgYWxzbyBtdXN0IGJlIGluIHRoZSBET00gYXQgdGhlIHRpbWUgb2ZcclxuICAgICAqIGluaXRpYWxpemF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gVGhlIG9wdGlvbmFsIHJlQ0FQVENIQSBwYXJhbWV0ZXJzLlxyXG4gICAgICpcclxuICAgICAqIEByZW1hcmtzXHJcbiAgICAgKiBDaGVjayB0aGUgcmVDQVBUQ0hBIGRvY3MgZm9yIGEgY29tcHJlaGVuc2l2ZSBsaXN0LiBBbGwgcGFyYW1ldGVycyBhcmUgYWNjZXB0ZWQgZXhjZXB0IGZvclxyXG4gICAgICogdGhlIHNpdGVrZXkuIEZpcmViYXNlIEF1dGggYmFja2VuZCBwcm92aXNpb25zIGEgcmVDQVBUQ0hBIGZvciBlYWNoIHByb2plY3QgYW5kIHdpbGxcclxuICAgICAqIGNvbmZpZ3VyZSB0aGlzIHVwb24gcmVuZGVyaW5nLiBGb3IgYW4gaW52aXNpYmxlIHJlQ0FQVENIQSwgYSBzaXplIGtleSBtdXN0IGhhdmUgdGhlIHZhbHVlXHJcbiAgICAgKiAnaW52aXNpYmxlJy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXV0aEV4dGVybiAtIFRoZSBjb3JyZXNwb25kaW5nIEZpcmViYXNlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyT3JJZCwgcGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfUEFSQU1TKSwgYXV0aEV4dGVybikge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFwcGxpY2F0aW9uIHZlcmlmaWVyIHR5cGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVtYXJrc1xyXG4gICAgICAgICAqIEZvciBhIHJlQ0FQVENIQSB2ZXJpZmllciwgdGhpcyBpcyAncmVjYXB0Y2hhJy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnR5cGUgPSBSRUNBUFRDSEFfVkVSSUZJRVJfVFlQRTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2lkZ2V0SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudG9rZW5DaGFuZ2VMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlY2FwdGNoYSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xyXG4gICAgICAgIHRoaXMuaXNJbnZpc2libGUgPSB0aGlzLnBhcmFtZXRlcnMuc2l6ZSA9PT0gJ2ludmlzaWJsZSc7XHJcbiAgICAgICAgX2Fzc2VydCh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLCB0aGlzLmF1dGgsIFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiIC8qIE9QRVJBVElPTl9OT1RfU1VQUE9SVEVEICovKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyT3JJZCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJPcklkKVxyXG4gICAgICAgICAgICA6IGNvbnRhaW5lck9ySWQ7XHJcbiAgICAgICAgX2Fzc2VydChjb250YWluZXIsIHRoaXMuYXV0aCwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuY2FsbGJhY2sgPSB0aGlzLm1ha2VUb2tlbkNhbGxiYWNrKHRoaXMucGFyYW1ldGVycy5jYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyID0gdGhpcy5hdXRoLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1xyXG4gICAgICAgICAgICA/IG5ldyBNb2NrUmVDYXB0Y2hhTG9hZGVySW1wbCgpXHJcbiAgICAgICAgICAgIDogbmV3IFJlQ2FwdGNoYUxvYWRlckltcGwoKTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlU3RhcnRpbmdTdGF0ZSgpO1xyXG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgaWYgc2RrIHZlcnNpb24gaXMgbmVlZGVkXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdhaXRzIGZvciB0aGUgdXNlciB0byBzb2x2ZSB0aGUgcmVDQVBUQ0hBIGFuZCByZXNvbHZlcyB3aXRoIHRoZSByZUNBUFRDSEEgdG9rZW4uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIGZvciB0aGUgcmVDQVBUQ0hBIHRva2VuLlxyXG4gICAgICovXHJcbiAgICBhc3luYyB2ZXJpZnkoKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnROb3REZXN0cm95ZWQoKTtcclxuICAgICAgICBjb25zdCBpZCA9IGF3YWl0IHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgY29uc3QgcmVjYXB0Y2hhID0gdGhpcy5nZXRBc3NlcnRlZFJlY2FwdGNoYSgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVjYXB0Y2hhLmdldFJlc3BvbnNlKGlkKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuQ2hhbmdlID0gKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgdG9rZW4gZXhwaXJhdGlvbnMuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuQ2hhbmdlTGlzdGVuZXJzLmRlbGV0ZSh0b2tlbkNoYW5nZSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRva2VuKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy50b2tlbkNoYW5nZUxpc3RlbmVycy5hZGQodG9rZW5DaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ludmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmVjYXB0Y2hhLmV4ZWN1dGUoaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgdGhlIHJlQ0FQVENIQSB3aWRnZXQgb24gdGhlIHBhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVDQVBUQ0hBIHdpZGdldCBJRC5cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlLiBTaW5jZSBpdCdzIG5vdCBhc3luYyAod2Ugd2FudCB0byByZXR1cm4gdGhlXHJcbiAgICAgICAgICAgIC8vIF9zYW1lXyBwcm9taXNlIGlmIHJlbmRlcmluZyBpcyBzdGlsbCBvY2N1cnJpbmcpLCB0aGUgQVBJIHN1cmZhY2Ugc2hvdWxkXHJcbiAgICAgICAgICAgIC8vIHJlamVjdCB3aXRoIHRoZSBlcnJvciByYXRoZXIgdGhhbiBqdXN0IHRocm93XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyUHJvbWlzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9taXNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlclByb21pc2UgPSB0aGlzLm1ha2VSZW5kZXJQcm9taXNlKCkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUHJvbWlzZTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9yZXNldCgpIHtcclxuICAgICAgICB0aGlzLmFzc2VydE5vdERlc3Ryb3llZCgpO1xyXG4gICAgICAgIGlmICh0aGlzLndpZGdldElkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKS5yZXNldCh0aGlzLndpZGdldElkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgcmVDQVBUQ0hBIHdpZGdldCBmcm9tIHRoZSBwYWdlIGFuZCBkZXN0cm95cyB0aGUgaW5zdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3JlY2FwdGNoYUxvYWRlci5jbGVhcmVkT25lSW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbnZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhbGlkYXRlU3RhcnRpbmdTdGF0ZSgpIHtcclxuICAgICAgICBfYXNzZXJ0KCF0aGlzLnBhcmFtZXRlcnMuc2l0ZWtleSwgdGhpcy5hdXRoLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8pO1xyXG4gICAgICAgIF9hc3NlcnQodGhpcy5pc0ludmlzaWJsZSB8fCAhdGhpcy5jb250YWluZXIuaGFzQ2hpbGROb2RlcygpLCB0aGlzLmF1dGgsIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgX2Fzc2VydCh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLCB0aGlzLmF1dGgsIFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiIC8qIE9QRVJBVElPTl9OT1RfU1VQUE9SVEVEICovKTtcclxuICAgIH1cclxuICAgIG1ha2VUb2tlbkNhbGxiYWNrKGV4aXN0aW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRva2VuID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2tlbkNoYW5nZUxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKHRva2VuKSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGV4aXN0aW5nKHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnbG9iYWxGdW5jID0gX3dpbmRvdygpW2V4aXN0aW5nXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsRnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEZ1bmModG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFzc2VydE5vdERlc3Ryb3llZCgpIHtcclxuICAgICAgICBfYXNzZXJ0KCF0aGlzLmRlc3Ryb3llZCwgdGhpcy5hdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgbWFrZVJlbmRlclByb21pc2UoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLndpZGdldElkKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBndWFyYW50ZWVkRW1wdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChndWFyYW50ZWVkRW1wdHkpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gZ3VhcmFudGVlZEVtcHR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMud2lkZ2V0SWQgPSB0aGlzLmdldEFzc2VydGVkUmVjYXB0Y2hhKCkucmVuZGVyKGNvbnRhaW5lciwgdGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkZ2V0SWQ7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIF9hc3NlcnQoX2lzSHR0cE9ySHR0cHMoKSAmJiAhX2lzV29ya2VyKCksIHRoaXMuYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICBhd2FpdCBkb21SZWFkeSgpO1xyXG4gICAgICAgIHRoaXMucmVjYXB0Y2hhID0gYXdhaXQgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyLmxvYWQodGhpcy5hdXRoLCB0aGlzLmF1dGgubGFuZ3VhZ2VDb2RlIHx8IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qgc2l0ZUtleSA9IGF3YWl0IGdldFJlY2FwdGNoYVBhcmFtcyh0aGlzLmF1dGgpO1xyXG4gICAgICAgIF9hc3NlcnQoc2l0ZUtleSwgdGhpcy5hdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zaXRla2V5ID0gc2l0ZUtleTtcclxuICAgIH1cclxuICAgIGdldEFzc2VydGVkUmVjYXB0Y2hhKCkge1xyXG4gICAgICAgIF9hc3NlcnQodGhpcy5yZWNhcHRjaGEsIHRoaXMuYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWNhcHRjaGE7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZG9tUmVhZHkoKSB7XHJcbiAgICBsZXQgcmVzb2x2ZXIgPSBudWxsO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEb2N1bWVudCBub3QgcmVhZHksIHdhaXQgZm9yIGxvYWQgYmVmb3JlIHJlc29sdmluZy5cclxuICAgICAgICAvLyBTYXZlIHJlc29sdmVyLCBzbyB3ZSBjYW4gcmVtb3ZlIGxpc3RlbmVyIGluIGNhc2UgaXQgd2FzIGV4dGVybmFsbHlcclxuICAgICAgICAvLyBjYW5jZWxsZWQuXHJcbiAgICAgICAgcmVzb2x2ZXIgPSAoKSA9PiByZXNvbHZlKCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlcik7XHJcbiAgICB9KS5jYXRjaChlID0+IHtcclxuICAgICAgICBpZiAocmVzb2x2ZXIpIHtcclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBDb25maXJtYXRpb25SZXN1bHRJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKHZlcmlmaWNhdGlvbklkLCBvbkNvbmZpcm1hdGlvbikge1xyXG4gICAgICAgIHRoaXMudmVyaWZpY2F0aW9uSWQgPSB2ZXJpZmljYXRpb25JZDtcclxuICAgICAgICB0aGlzLm9uQ29uZmlybWF0aW9uID0gb25Db25maXJtYXRpb247XHJcbiAgICB9XHJcbiAgICBjb25maXJtKHZlcmlmaWNhdGlvbkNvZGUpIHtcclxuICAgICAgICBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IFBob25lQXV0aENyZWRlbnRpYWwuX2Zyb21WZXJpZmljYXRpb24odGhpcy52ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db25maXJtYXRpb24oYXV0aENyZWRlbnRpYWwpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyBhIHBob25lIG51bWJlci5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVGhpcyBtZXRob2Qgc2VuZHMgYSBjb2RlIHZpYSBTTVMgdG8gdGhlIGdpdmVuXHJcbiAqIHBob25lIG51bWJlciwgYW5kIHJldHVybnMgYSB7QGxpbmsgQ29uZmlybWF0aW9uUmVzdWx0fS4gQWZ0ZXIgdGhlIHVzZXJcclxuICogcHJvdmlkZXMgdGhlIGNvZGUgc2VudCB0byB0aGVpciBwaG9uZSwgY2FsbCB7QGxpbmsgQ29uZmlybWF0aW9uUmVzdWx0LmNvbmZpcm19XHJcbiAqIHdpdGggdGhlIGNvZGUgdG8gc2lnbiB0aGUgdXNlciBpbi5cclxuICpcclxuICogRm9yIGFidXNlIHByZXZlbnRpb24sIHRoaXMgbWV0aG9kIGFsc28gcmVxdWlyZXMgYSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXHJcbiAqIFRoaXMgU0RLIGluY2x1ZGVzIGEgcmVDQVBUQ0hBLWJhc2VkIGltcGxlbWVudGF0aW9uLCB7QGxpbmsgUmVjYXB0Y2hhVmVyaWZpZXJ9LlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiB3b3JrIG9uIG90aGVyIHBsYXRmb3JtcyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZVxyXG4gKiB7QGxpbmsgUmVjYXB0Y2hhVmVyaWZpZXJ9IChsaWtlIFJlYWN0IE5hdGl2ZSksIGJ1dCB5b3UgbmVlZCB0byB1c2UgYVxyXG4gKiB0aGlyZC1wYXJ0eSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0gaW1wbGVtZW50YXRpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogLy8gJ3JlY2FwdGNoYS1jb250YWluZXInIGlzIHRoZSBJRCBvZiBhbiBlbGVtZW50IGluIHRoZSBET00uXHJcbiAqIGNvbnN0IGFwcGxpY2F0aW9uVmVyaWZpZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5SZWNhcHRjaGFWZXJpZmllcigncmVjYXB0Y2hhLWNvbnRhaW5lcicpO1xyXG4gKiBjb25zdCBjb25maXJtYXRpb25SZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xyXG4gKiAvLyBPYnRhaW4gYSB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXHJcbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBhd2FpdCBjb25maXJtYXRpb25SZXN1bHQuY29uZmlybSh2ZXJpZmljYXRpb25Db2RlKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXHJcbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhQaG9uZU51bWJlcihhdXRoLCBwaG9uZU51bWJlciwgYXBwVmVyaWZpZXIpIHtcclxuICAgIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgX3ZlcmlmeVBob25lTnVtYmVyKGF1dGhJbnRlcm5hbCwgcGhvbmVOdW1iZXIsIGdldE1vZHVsYXJJbnN0YW5jZShhcHBWZXJpZmllcikpO1xyXG4gICAgcmV0dXJuIG5ldyBDb25maXJtYXRpb25SZXN1bHRJbXBsKHZlcmlmaWNhdGlvbklkLCBjcmVkID0+IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGhJbnRlcm5hbCwgY3JlZCkpO1xyXG59XHJcbi8qKlxyXG4gKiBMaW5rcyB0aGUgdXNlciBhY2NvdW50IHdpdGggdGhlIGdpdmVuIHBob25lIG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXHJcbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoUGhvbmVOdW1iZXIodXNlciwgcGhvbmVOdW1iZXIsIGFwcFZlcmlmaWVyKSB7XHJcbiAgICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcik7XHJcbiAgICBhd2FpdCBfYXNzZXJ0TGlua2VkU3RhdHVzKGZhbHNlLCB1c2VySW50ZXJuYWwsIFwicGhvbmVcIiAvKiBQSE9ORSAqLyk7XHJcbiAgICBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IF92ZXJpZnlQaG9uZU51bWJlcih1c2VySW50ZXJuYWwuYXV0aCwgcGhvbmVOdW1iZXIsIGdldE1vZHVsYXJJbnN0YW5jZShhcHBWZXJpZmllcikpO1xyXG4gICAgcmV0dXJuIG5ldyBDb25maXJtYXRpb25SZXN1bHRJbXBsKHZlcmlmaWNhdGlvbklkLCBjcmVkID0+IGxpbmtXaXRoQ3JlZGVudGlhbCh1c2VySW50ZXJuYWwsIGNyZWQpKTtcclxufVxyXG4vKipcclxuICogUmUtYXV0aGVudGljYXRlcyBhIHVzZXIgdXNpbmcgYSBmcmVzaCBwaG9uZSBjcmVkZW50aWFsLlxyXG4gKlxyXG4gKiBAcmVtYXJrcyBVc2UgYmVmb3JlIG9wZXJhdGlvbnMgc3VjaCBhcyB7QGxpbmsgdXBkYXRlUGFzc3dvcmR9IHRoYXQgcmVxdWlyZSB0b2tlbnMgZnJvbSByZWNlbnQgc2lnbi1pbiBhdHRlbXB0cy5cclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXHJcbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYXV0aGVudGljYXRlV2l0aFBob25lTnVtYmVyKHVzZXIsIHBob25lTnVtYmVyLCBhcHBWZXJpZmllcikge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBhd2FpdCBfdmVyaWZ5UGhvbmVOdW1iZXIodXNlckludGVybmFsLmF1dGgsIHBob25lTnVtYmVyLCBnZXRNb2R1bGFySW5zdGFuY2UoYXBwVmVyaWZpZXIpKTtcclxuICAgIHJldHVybiBuZXcgQ29uZmlybWF0aW9uUmVzdWx0SW1wbCh2ZXJpZmljYXRpb25JZCwgY3JlZCA9PiByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKHVzZXJJbnRlcm5hbCwgY3JlZCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgdmVyaWZpY2F0aW9uIElEIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgU01TIGNvZGUgdGhhdCBpcyBzZW50LlxyXG4gKlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3ZlcmlmeVBob25lTnVtYmVyKGF1dGgsIG9wdGlvbnMsIHZlcmlmaWVyKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCByZWNhcHRjaGFUb2tlbiA9IGF3YWl0IHZlcmlmaWVyLnZlcmlmeSgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBfYXNzZXJ0KHR5cGVvZiByZWNhcHRjaGFUb2tlbiA9PT0gJ3N0cmluZycsIGF1dGgsIFwiYXJndW1lbnQtZXJyb3JcIiAvKiBBUkdVTUVOVF9FUlJPUiAqLyk7XHJcbiAgICAgICAgX2Fzc2VydCh2ZXJpZmllci50eXBlID09PSBSRUNBUFRDSEFfVkVSSUZJRVJfVFlQRSwgYXV0aCwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgICAgICBsZXQgcGhvbmVJbmZvT3B0aW9ucztcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHBob25lSW5mb09wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogb3B0aW9uc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGhvbmVJbmZvT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgnc2Vzc2lvbicgaW4gcGhvbmVJbmZvT3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gcGhvbmVJbmZvT3B0aW9ucy5zZXNzaW9uO1xyXG4gICAgICAgICAgICBpZiAoJ3Bob25lTnVtYmVyJyBpbiBwaG9uZUluZm9PcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBfYXNzZXJ0KHNlc3Npb24udHlwZSA9PT0gXCJlbnJvbGxcIiAvKiBFTlJPTEwgKi8sIGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN0YXJ0RW5yb2xsUGhvbmVNZmEoYXV0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkVG9rZW46IHNlc3Npb24uY3JlZGVudGlhbCxcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZUVucm9sbG1lbnRJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob25lTnVtYmVyOiBwaG9uZUluZm9PcHRpb25zLnBob25lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNhcHRjaGFUb2tlblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnBob25lU2Vzc2lvbkluZm8uc2Vzc2lvbkluZm87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfYXNzZXJ0KHNlc3Npb24udHlwZSA9PT0gXCJzaWduaW5cIiAvKiBTSUdOX0lOICovLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWZhRW5yb2xsbWVudElkID0gKChfYSA9IHBob25lSW5mb09wdGlvbnMubXVsdGlGYWN0b3JIaW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudWlkKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHBob25lSW5mb09wdGlvbnMubXVsdGlGYWN0b3JVaWQ7XHJcbiAgICAgICAgICAgICAgICBfYXNzZXJ0KG1mYUVucm9sbG1lbnRJZCwgYXV0aCwgXCJtaXNzaW5nLW11bHRpLWZhY3Rvci1pbmZvXCIgLyogTUlTU0lOR19NRkFfSU5GTyAqLyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN0YXJ0U2lnbkluUGhvbmVNZmEoYXV0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG1mYVBlbmRpbmdDcmVkZW50aWFsOiBzZXNzaW9uLmNyZWRlbnRpYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWZhRW5yb2xsbWVudElkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBob25lU2lnbkluSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNhcHRjaGFUb2tlblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnBob25lUmVzcG9uc2VJbmZvLnNlc3Npb25JbmZvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB7IHNlc3Npb25JbmZvIH0gPSBhd2FpdCBzZW5kUGhvbmVWZXJpZmljYXRpb25Db2RlKGF1dGgsIHtcclxuICAgICAgICAgICAgICAgIHBob25lTnVtYmVyOiBwaG9uZUluZm9PcHRpb25zLnBob25lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcmVjYXB0Y2hhVG9rZW5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uSW5mbztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB2ZXJpZmllci5fcmVzZXQoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgdXNlcidzIHBob25lIG51bWJlci5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgXHJcbiAqIC8vICdyZWNhcHRjaGEtY29udGFpbmVyJyBpcyB0aGUgSUQgb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxyXG4gKiBjb25zdCBhcHBsaWNhdGlvblZlcmlmaWVyID0gbmV3IFJlY2FwdGNoYVZlcmlmaWVyKCdyZWNhcHRjaGEtY29udGFpbmVyJyk7XHJcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFBob25lQXV0aFByb3ZpZGVyKGF1dGgpO1xyXG4gKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKCcrMTY1MDU1NTAxMDEnLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcclxuICogLy8gT2J0YWluIHRoZSB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXHJcbiAqIGNvbnN0IHBob25lQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xyXG4gKiBhd2FpdCB1cGRhdGVQaG9uZU51bWJlcih1c2VyLCBwaG9uZUNyZWRlbnRpYWwpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBBIGNyZWRlbnRpYWwgYXV0aGVudGljYXRpbmcgdGhlIG5ldyBwaG9uZSBudW1iZXIuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBob25lTnVtYmVyKHVzZXIsIGNyZWRlbnRpYWwpIHtcclxuICAgIGF3YWl0IF9saW5rJDEoZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpLCBjcmVkZW50aWFsKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4ge0BsaW5rIFBob25lQXV0aENyZWRlbnRpYWx9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vICdyZWNhcHRjaGEtY29udGFpbmVyJyBpcyB0aGUgSUQgb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxyXG4gKiBjb25zdCBhcHBsaWNhdGlvblZlcmlmaWVyID0gbmV3IFJlY2FwdGNoYVZlcmlmaWVyKCdyZWNhcHRjaGEtY29udGFpbmVyJyk7XHJcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFBob25lQXV0aFByb3ZpZGVyKGF1dGgpO1xyXG4gKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKCcrMTY1MDU1NTAxMDEnLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcclxuICogLy8gT2J0YWluIHRoZSB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXHJcbiAqIGNvbnN0IHBob25lQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xyXG4gKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIHBob25lQ3JlZGVudGlhbCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jbGFzcyBQaG9uZUF1dGhQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBhdXRoIC0gVGhlIEZpcmViYXNlIHtAbGluayBBdXRofSBpbnN0YW5jZSBpbiB3aGljaCBzaWduLWlucyBzaG91bGQgb2NjdXIuXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihhdXRoKSB7XHJcbiAgICAgICAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBIT05FLiAqL1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJJZCA9IFBob25lQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEO1xyXG4gICAgICAgIHRoaXMuYXV0aCA9IF9jYXN0QXV0aChhdXRoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIFN0YXJ0cyBhIHBob25lIG51bWJlciBhdXRoZW50aWNhdGlvbiBmbG93IGJ5IHNlbmRpbmcgYSB2ZXJpZmljYXRpb24gY29kZSB0byB0aGUgZ2l2ZW4gcGhvbmVcclxuICAgICAqIG51bWJlci5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XHJcbiAgICAgKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKHBob25lTnVtYmVyLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcclxuICAgICAqIC8vIE9idGFpbiB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXHJcbiAgICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xyXG4gICAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoLCBhdXRoQ3JlZGVudGlhbCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgZmxvdyBpcyBwcm92aWRlZCB1c2luZyB0aGUgYHNpZ25JbldpdGhQaG9uZU51bWJlcmAgbWV0aG9kLlxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogY29uc3QgY29uZmlybWF0aW9uUmVzdWx0ID0gc2lnbkluV2l0aFBob25lTnVtYmVyKGF1dGgsIHBob25lTnVtYmVyLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcclxuICAgICAqIC8vIE9idGFpbiB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXHJcbiAgICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGNvbmZpcm1hdGlvblJlc3VsdC5jb25maXJtKHZlcmlmaWNhdGlvbkNvZGUpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBob25lSW5mb09wdGlvbnMgLSBUaGUgdXNlcidzIHtAbGluayBQaG9uZUluZm9PcHRpb25zfS4gVGhlIHBob25lIG51bWJlciBzaG91bGQgYmUgaW5cclxuICAgICAqIEUuMTY0IGZvcm1hdCAoZS5nLiArMTY1MDU1NTAxMDEpLlxyXG4gICAgICogQHBhcmFtIGFwcGxpY2F0aW9uVmVyaWZpZXIgLSBGb3IgYWJ1c2UgcHJldmVudGlvbiwgdGhpcyBtZXRob2QgYWxzbyByZXF1aXJlcyBhXHJcbiAgICAgKiB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uIFRoaXMgU0RLIGluY2x1ZGVzIGEgcmVDQVBUQ0hBLWJhc2VkIGltcGxlbWVudGF0aW9uLFxyXG4gICAgICoge0BsaW5rIFJlY2FwdGNoYVZlcmlmaWVyfS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgZm9yIGEgdmVyaWZpY2F0aW9uIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0b1xyXG4gICAgICoge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWx9IHRvIGlkZW50aWZ5IHRoaXMgZmxvdy4uXHJcbiAgICAgKi9cclxuICAgIHZlcmlmeVBob25lTnVtYmVyKHBob25lT3B0aW9ucywgYXBwbGljYXRpb25WZXJpZmllcikge1xyXG4gICAgICAgIHJldHVybiBfdmVyaWZ5UGhvbmVOdW1iZXIodGhpcy5hdXRoLCBwaG9uZU9wdGlvbnMsIGdldE1vZHVsYXJJbnN0YW5jZShhcHBsaWNhdGlvblZlcmlmaWVyKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwsIGdpdmVuIHRoZSB2ZXJpZmljYXRpb24gSUQgZnJvbVxyXG4gICAgICoge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyfSBhbmQgdGhlIGNvZGUgdGhhdCB3YXMgc2VudCB0byB0aGUgdXNlcidzXHJcbiAgICAgKiBtb2JpbGUgZGV2aWNlLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiBjb25zdCBwcm92aWRlciA9IG5ldyBQaG9uZUF1dGhQcm92aWRlcihhdXRoKTtcclxuICAgICAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIocGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xyXG4gICAgICogLy8gT2J0YWluIHZlcmlmaWNhdGlvbkNvZGUgZnJvbSB0aGUgdXNlci5cclxuICAgICAqIGNvbnN0IGF1dGhDcmVkZW50aWFsID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XHJcbiAgICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIGF1dGhDcmVkZW50aWFsKTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSBmbG93IGlzIHByb3ZpZGVkIHVzaW5nIHRoZSBgc2lnbkluV2l0aFBob25lTnVtYmVyYCBtZXRob2QuXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiBjb25zdCBjb25maXJtYXRpb25SZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xyXG4gICAgICogLy8gT2J0YWluIHZlcmlmaWNhdGlvbkNvZGUgZnJvbSB0aGUgdXNlci5cclxuICAgICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgY29uZmlybWF0aW9uUmVzdWx0LmNvbmZpcm0odmVyaWZpY2F0aW9uQ29kZSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdmVyaWZpY2F0aW9uSWQgLSBUaGUgdmVyaWZpY2F0aW9uIElEIHJldHVybmVkIGZyb20ge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyfS5cclxuICAgICAqIEBwYXJhbSB2ZXJpZmljYXRpb25Db2RlIC0gVGhlIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIncyBtb2JpbGUgZGV2aWNlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIFRoZSBhdXRoIHByb3ZpZGVyIGNyZWRlbnRpYWwuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsKHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIFBob25lQXV0aENyZWRlbnRpYWwuX2Zyb21WZXJpZmljYXRpb24odmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cclxuICAgICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsRnJvbVJlc3VsdCh1c2VyQ3JlZGVudGlhbCkge1xyXG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWwgPSB1c2VyQ3JlZGVudGlhbDtcclxuICAgICAgICByZXR1cm4gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoY3JlZGVudGlhbCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSB3aGVuIHBhc3NlZCBhbiBlcnJvci5cclxuICAgICAqXHJcbiAgICAgKiBAcmVtYXJrc1xyXG4gICAgICpcclxuICAgICAqIFRoaXMgbWV0aG9kIHdvcmtzIGZvciBlcnJvcnMgbGlrZVxyXG4gICAgICogYGF1dGgvYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbHNgLiBUaGlzIGlzIHVzZWZ1bCBmb3JcclxuICAgICAqIHJlY292ZXJpbmcgd2hlbiBhdHRlbXB0aW5nIHRvIHNldCBhIHVzZXIncyBwaG9uZSBudW1iZXIgYnV0IHRoZSBudW1iZXJcclxuICAgICAqIGluIHF1ZXN0aW9uIGlzIGFscmVhZHkgdGllZCB0byBhbm90aGVyIGFjY291bnQuIEZvciBleGFtcGxlLCB0aGUgZm9sbG93aW5nXHJcbiAgICAgKiBjb2RlIHRyaWVzIHRvIHVwZGF0ZSB0aGUgY3VycmVudCB1c2VyJ3MgcGhvbmUgbnVtYmVyLCBhbmQgaWYgdGhhdFxyXG4gICAgICogZmFpbHMsIGxpbmtzIHRoZSB1c2VyIHdpdGggdGhlIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoYXQgbnVtYmVyOlxyXG4gICAgICpcclxuICAgICAqIGBgYGpzXHJcbiAgICAgKiBjb25zdCBwcm92aWRlciA9IG5ldyBQaG9uZUF1dGhQcm92aWRlcihhdXRoKTtcclxuICAgICAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIobnVtYmVyLCB2ZXJpZmllcik7XHJcbiAgICAgKiB0cnkge1xyXG4gICAgICogICBjb25zdCBjb2RlID0gJyc7IC8vIFByb21wdCB0aGUgdXNlciBmb3IgdGhlIHZlcmlmaWNhdGlvbiBjb2RlXHJcbiAgICAgKiAgIGF3YWl0IHVwZGF0ZVBob25lTnVtYmVyKFxyXG4gICAgICogICAgICAgYXV0aC5jdXJyZW50VXNlcixcclxuICAgICAqICAgICAgIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIGNvZGUpKTtcclxuICAgICAqIH0gY2F0Y2ggKGUpIHtcclxuICAgICAqICAgaWYgKChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlID09PSAnYXV0aC9hY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsJykge1xyXG4gICAgICogICAgIGNvbnN0IGNyZWQgPSBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbUVycm9yKGUpO1xyXG4gICAgICogICAgIGF3YWl0IGxpbmtXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkKTtcclxuICAgICAqICAgfVxyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIC8vIEF0IHRoaXMgcG9pbnQsIGF1dGguY3VycmVudFVzZXIucGhvbmVOdW1iZXIgPT09IG51bWJlci5cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlcnJvciAtIFRoZSBlcnJvciB0byBnZW5lcmF0ZSBhIGNyZWRlbnRpYWwgZnJvbS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoKGVycm9yLmN1c3RvbURhdGEgfHwge30pKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7IF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlIH0pIHtcclxuICAgICAgICBpZiAoIXRva2VuUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0gPSB0b2tlblJlc3BvbnNlO1xyXG4gICAgICAgIGlmIChwaG9uZU51bWJlciAmJiB0ZW1wb3JhcnlQcm9vZikge1xyXG4gICAgICAgICAgICByZXR1cm4gUGhvbmVBdXRoQ3JlZGVudGlhbC5fZnJvbVRva2VuUmVzcG9uc2UocGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBIT05FLiAqL1xyXG5QaG9uZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCA9IFwicGhvbmVcIiAvKiBQSE9ORSAqLztcclxuLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uUEhPTkUuICovXHJcblBob25lQXV0aFByb3ZpZGVyLlBIT05FX1NJR05fSU5fTUVUSE9EID0gXCJwaG9uZVwiIC8qIFBIT05FICovO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ2hvb3NlcyBhIHBvcHVwL3JlZGlyZWN0IHJlc29sdmVyIHRvIHVzZS4gVGhpcyBwcmVmZXJzIHRoZSBvdmVycmlkZSAod2hpY2hcclxuICogaXMgZGlyZWN0bHkgcGFzc2VkIGluKSwgYW5kIGZhbGxzIGJhY2sgdG8gdGhlIHByb3BlcnR5IHNldCBvbiB0aGUgYXV0aFxyXG4gKiBvYmplY3QuIElmIG5laXRoZXIgYXJlIGF2YWlsYWJsZSwgdGhpcyBmdW5jdGlvbiBlcnJvcnMgdy8gYW4gYXJndW1lbnQgZXJyb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBfd2l0aERlZmF1bHRSZXNvbHZlcihhdXRoLCByZXNvbHZlck92ZXJyaWRlKSB7XHJcbiAgICBpZiAocmVzb2x2ZXJPdmVycmlkZSkge1xyXG4gICAgICAgIHJldHVybiBfZ2V0SW5zdGFuY2UocmVzb2x2ZXJPdmVycmlkZSk7XHJcbiAgICB9XHJcbiAgICBfYXNzZXJ0KGF1dGguX3BvcHVwUmVkaXJlY3RSZXNvbHZlciwgYXV0aCwgXCJhcmd1bWVudC1lcnJvclwiIC8qIEFSR1VNRU5UX0VSUk9SICovKTtcclxuICAgIHJldHVybiBhdXRoLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXI7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgSWRwQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIHN1cGVyKFwiY3VzdG9tXCIgLyogQ1VTVE9NICovLCBcImN1c3RvbVwiIC8qIENVU1RPTSAqLyk7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB9XHJcbiAgICBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGgpIHtcclxuICAgICAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCB0aGlzLl9idWlsZElkcFJlcXVlc3QoKSk7XHJcbiAgICB9XHJcbiAgICBfbGlua1RvSWRUb2tlbihhdXRoLCBpZFRva2VuKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgdGhpcy5fYnVpbGRJZHBSZXF1ZXN0KGlkVG9rZW4pKTtcclxuICAgIH1cclxuICAgIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aCkge1xyXG4gICAgICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHRoaXMuX2J1aWxkSWRwUmVxdWVzdCgpKTtcclxuICAgIH1cclxuICAgIF9idWlsZElkcFJlcXVlc3QoaWRUb2tlbikge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RVcmk6IHRoaXMucGFyYW1zLnJlcXVlc3RVcmksXHJcbiAgICAgICAgICAgIHNlc3Npb25JZDogdGhpcy5wYXJhbXMuc2Vzc2lvbklkLFxyXG4gICAgICAgICAgICBwb3N0Qm9keTogdGhpcy5wYXJhbXMucG9zdEJvZHksXHJcbiAgICAgICAgICAgIHRlbmFudElkOiB0aGlzLnBhcmFtcy50ZW5hbnRJZCxcclxuICAgICAgICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBhcmFtcy5wZW5kaW5nVG9rZW4sXHJcbiAgICAgICAgICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlLFxyXG4gICAgICAgICAgICByZXR1cm5JZHBDcmVkZW50aWFsOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaWRUb2tlbikge1xyXG4gICAgICAgICAgICByZXF1ZXN0LmlkVG9rZW4gPSBpZFRva2VuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfc2lnbkluKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIF9zaWduSW5XaXRoQ3JlZGVudGlhbChwYXJhbXMuYXV0aCwgbmV3IElkcENyZWRlbnRpYWwocGFyYW1zKSwgcGFyYW1zLmJ5cGFzc0F1dGhTdGF0ZSk7XHJcbn1cclxuZnVuY3Rpb24gX3JlYXV0aChwYXJhbXMpIHtcclxuICAgIGNvbnN0IHsgYXV0aCwgdXNlciB9ID0gcGFyYW1zO1xyXG4gICAgX2Fzc2VydCh1c2VyLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgcmV0dXJuIF9yZWF1dGhlbnRpY2F0ZSh1c2VyLCBuZXcgSWRwQ3JlZGVudGlhbChwYXJhbXMpLCBwYXJhbXMuYnlwYXNzQXV0aFN0YXRlKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBfbGluayhwYXJhbXMpIHtcclxuICAgIGNvbnN0IHsgYXV0aCwgdXNlciB9ID0gcGFyYW1zO1xyXG4gICAgX2Fzc2VydCh1c2VyLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgcmV0dXJuIF9saW5rJDEodXNlciwgbmV3IElkcENyZWRlbnRpYWwocGFyYW1zKSwgcGFyYW1zLmJ5cGFzc0F1dGhTdGF0ZSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFBvcHVwIGV2ZW50IG1hbmFnZXIuIEhhbmRsZXMgdGhlIHBvcHVwJ3MgZW50aXJlIGxpZmVjeWNsZTsgbGlzdGVucyB0byBhdXRoXHJcbiAqIGV2ZW50c1xyXG4gKi9cclxuY2xhc3MgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgsIGZpbHRlciwgcmVzb2x2ZXIsIHVzZXIsIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5hdXRoID0gYXV0aDtcclxuICAgICAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZXI7XHJcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcclxuICAgICAgICB0aGlzLmJ5cGFzc0F1dGhTdGF0ZSA9IGJ5cGFzc0F1dGhTdGF0ZTtcclxuICAgICAgICB0aGlzLnBlbmRpbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBmaWx0ZXIgOiBbZmlsdGVyXTtcclxuICAgIH1cclxuICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUHJvbWlzZSA9IHsgcmVzb2x2ZSwgcmVqZWN0IH07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGF3YWl0IHRoaXMucmVzb2x2ZXIuX2luaXRpYWxpemUodGhpcy5hdXRoKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25FeGVjdXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyQ29uc3VtZXIodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkF1dGhFdmVudChldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHsgdXJsUmVzcG9uc2UsIHNlc3Npb25JZCwgcG9zdEJvZHksIHRlbmFudElkLCBlcnJvciwgdHlwZSB9ID0gZXZlbnQ7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGF1dGg6IHRoaXMuYXV0aCxcclxuICAgICAgICAgICAgcmVxdWVzdFVyaTogdXJsUmVzcG9uc2UsXHJcbiAgICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkLFxyXG4gICAgICAgICAgICB0ZW5hbnRJZDogdGVuYW50SWQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBwb3N0Qm9keTogcG9zdEJvZHkgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB1c2VyOiB0aGlzLnVzZXIsXHJcbiAgICAgICAgICAgIGJ5cGFzc0F1dGhTdGF0ZTogdGhpcy5ieXBhc3NBdXRoU3RhdGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZShhd2FpdCB0aGlzLmdldElkcFRhc2sodHlwZSkocGFyYW1zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uRXJyb3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICB9XHJcbiAgICBnZXRJZHBUYXNrKHR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInNpZ25JblZpYVBvcHVwXCIgLyogU0lHTl9JTl9WSUFfUE9QVVAgKi86XHJcbiAgICAgICAgICAgIGNhc2UgXCJzaWduSW5WaWFSZWRpcmVjdFwiIC8qIFNJR05fSU5fVklBX1JFRElSRUNUICovOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zaWduSW47XHJcbiAgICAgICAgICAgIGNhc2UgXCJsaW5rVmlhUG9wdXBcIiAvKiBMSU5LX1ZJQV9QT1BVUCAqLzpcclxuICAgICAgICAgICAgY2FzZSBcImxpbmtWaWFSZWRpcmVjdFwiIC8qIExJTktfVklBX1JFRElSRUNUICovOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9saW5rO1xyXG4gICAgICAgICAgICBjYXNlIFwicmVhdXRoVmlhUG9wdXBcIiAvKiBSRUFVVEhfVklBX1BPUFVQICovOlxyXG4gICAgICAgICAgICBjYXNlIFwicmVhdXRoVmlhUmVkaXJlY3RcIiAvKiBSRUFVVEhfVklBX1JFRElSRUNUICovOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWF1dGg7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBfZmFpbCh0aGlzLmF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzb2x2ZShjcmVkKSB7XHJcbiAgICAgICAgZGVidWdBc3NlcnQodGhpcy5wZW5kaW5nUHJvbWlzZSwgJ1BlbmRpbmcgcHJvbWlzZSB3YXMgbmV2ZXIgc2V0Jyk7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nUHJvbWlzZS5yZXNvbHZlKGNyZWQpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckFuZENsZWFuVXAoKTtcclxuICAgIH1cclxuICAgIHJlamVjdChlcnJvcikge1xyXG4gICAgICAgIGRlYnVnQXNzZXJ0KHRoaXMucGVuZGluZ1Byb21pc2UsICdQZW5kaW5nIHByb21pc2Ugd2FzIG5ldmVyIHNldCcpO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Byb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJBbmRDbGVhblVwKCk7XHJcbiAgICB9XHJcbiAgICB1bnJlZ2lzdGVyQW5kQ2xlYW5VcCgpIHtcclxuICAgICAgICBpZiAodGhpcy5ldmVudE1hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIudW5yZWdpc3RlckNvbnN1bWVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBlbmRpbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsZWFuVXAoKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBfUE9MTF9XSU5ET1dfQ0xPU0VfVElNRU9VVCA9IG5ldyBEZWxheSgyMDAwLCAxMDAwMCk7XHJcbi8qKlxyXG4gKiBBdXRoZW50aWNhdGVzIGEgRmlyZWJhc2UgY2xpZW50IHVzaW5nIGEgcG9wdXAtYmFzZWQgT0F1dGggYXV0aGVudGljYXRpb24gZmxvdy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogSWYgc3VjY2VlZHMsIHJldHVybnMgdGhlIHNpZ25lZCBpbiB1c2VyIGFsb25nIHdpdGggdGhlIHByb3ZpZGVyJ3MgY3JlZGVudGlhbC4gSWYgc2lnbiBpbiB3YXNcclxuICogdW5zdWNjZXNzZnVsLCByZXR1cm5zIGFuIGVycm9yIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcclxuICpcclxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXHJcbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcclxuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXHJcbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBwcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChhdXRoLCByZXN1bHQpO1xyXG4gKiBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxyXG4gKiBOb24tT0F1dGggcHJvdmlkZXJzIGxpa2Uge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aWxsIHRocm93IGFuIGVycm9yLlxyXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcclxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cclxuICpcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyLCByZXNvbHZlcikge1xyXG4gICAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xyXG4gICAgX2Fzc2VydEluc3RhbmNlT2YoYXV0aCwgcHJvdmlkZXIsIEZlZGVyYXRlZEF1dGhQcm92aWRlcik7XHJcbiAgICBjb25zdCByZXNvbHZlckludGVybmFsID0gX3dpdGhEZWZhdWx0UmVzb2x2ZXIoYXV0aEludGVybmFsLCByZXNvbHZlcik7XHJcbiAgICBjb25zdCBhY3Rpb24gPSBuZXcgUG9wdXBPcGVyYXRpb24oYXV0aEludGVybmFsLCBcInNpZ25JblZpYVBvcHVwXCIgLyogU0lHTl9JTl9WSUFfUE9QVVAgKi8sIHByb3ZpZGVyLCByZXNvbHZlckludGVybmFsKTtcclxuICAgIHJldHVybiBhY3Rpb24uZXhlY3V0ZU5vdE51bGwoKTtcclxufVxyXG4vKipcclxuICogUmVhdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50IHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIHtAbGluayBPQXV0aFByb3ZpZGVyfSB1c2luZyBhIHBvcC11cCBiYXNlZFxyXG4gKiBPQXV0aCBmbG93LlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJZiB0aGUgcmVhdXRoZW50aWNhdGlvbiBpcyBzdWNjZXNzZnVsLCB0aGUgcmV0dXJuZWQgcmVzdWx0IHdpbGwgY29udGFpbiB0aGUgdXNlciBhbmQgdGhlXHJcbiAqIHByb3ZpZGVyJ3MgY3JlZGVudGlhbC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXHJcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhQb3B1cChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFJlYXV0aGVudGljYXRlIHVzaW5nIGEgcG9wdXAuXHJcbiAqIGF3YWl0IHJlYXV0aGVudGljYXRlV2l0aFBvcHVwKHJlc3VsdC51c2VyLCBwcm92aWRlcik7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlLiBUaGUgcHJvdmlkZXIgaGFzIHRvIGJlIGFuIHtAbGluayBPQXV0aFByb3ZpZGVyfS5cclxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cclxuICogQHBhcmFtIHJlc29sdmVyIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0sIG9wdGlvbmFsXHJcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYXV0aGVudGljYXRlV2l0aFBvcHVwKHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcikge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xyXG4gICAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XHJcbiAgICBjb25zdCBhY3Rpb24gPSBuZXcgUG9wdXBPcGVyYXRpb24odXNlckludGVybmFsLmF1dGgsIFwicmVhdXRoVmlhUG9wdXBcIiAvKiBSRUFVVEhfVklBX1BPUFVQICovLCBwcm92aWRlciwgcmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsKTtcclxuICAgIHJldHVybiBhY3Rpb24uZXhlY3V0ZU5vdE51bGwoKTtcclxufVxyXG4vKipcclxuICogTGlua3MgdGhlIGF1dGhlbnRpY2F0ZWQgcHJvdmlkZXIgdG8gdGhlIHVzZXIgYWNjb3VudCB1c2luZyBhIHBvcC11cCBiYXNlZCBPQXV0aCBmbG93LlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJZiB0aGUgbGlua2luZyBpcyBzdWNjZXNzZnVsLCB0aGUgcmV0dXJuZWQgcmVzdWx0IHdpbGwgY29udGFpbiB0aGUgdXNlciBhbmQgdGhlIHByb3ZpZGVyJ3MgY3JlZGVudGlhbC5cclxuICpcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBTaWduIGluIHVzaW5nIHNvbWUgb3RoZXIgcHJvdmlkZXIuXHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCk7XHJcbiAqIC8vIExpbmsgdXNpbmcgYSBwb3B1cC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogYXdhaXQgbGlua1dpdGhQb3B1cChyZXN1bHQudXNlciwgcHJvdmlkZXIpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXHJcbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXHJcbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxyXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBsaW5rV2l0aFBvcHVwKHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcikge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xyXG4gICAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XHJcbiAgICBjb25zdCBhY3Rpb24gPSBuZXcgUG9wdXBPcGVyYXRpb24odXNlckludGVybmFsLmF1dGgsIFwibGlua1ZpYVBvcHVwXCIgLyogTElOS19WSUFfUE9QVVAgKi8sIHByb3ZpZGVyLCByZXNvbHZlckludGVybmFsLCB1c2VySW50ZXJuYWwpO1xyXG4gICAgcmV0dXJuIGFjdGlvbi5leGVjdXRlTm90TnVsbCgpO1xyXG59XHJcbi8qKlxyXG4gKiBQb3B1cCBldmVudCBtYW5hZ2VyLiBIYW5kbGVzIHRoZSBwb3B1cCdzIGVudGlyZSBsaWZlY3ljbGU7IGxpc3RlbnMgdG8gYXV0aFxyXG4gKiBldmVudHNcclxuICpcclxuICovXHJcbmNsYXNzIFBvcHVwT3BlcmF0aW9uIGV4dGVuZHMgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgsIGZpbHRlciwgcHJvdmlkZXIsIHJlc29sdmVyLCB1c2VyKSB7XHJcbiAgICAgICAgc3VwZXIoYXV0aCwgZmlsdGVyLCByZXNvbHZlciwgdXNlcik7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuYXV0aFdpbmRvdyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wb2xsSWQgPSBudWxsO1xyXG4gICAgICAgIGlmIChQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24pIHtcclxuICAgICAgICAgICAgUG9wdXBPcGVyYXRpb24uY3VycmVudFBvcHVwQWN0aW9uLmNhbmNlbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24gPSB0aGlzO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZXhlY3V0ZU5vdE51bGwoKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlKCk7XHJcbiAgICAgICAgX2Fzc2VydChyZXN1bHQsIHRoaXMuYXV0aCwgXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FeGVjdXRpb24oKSB7XHJcbiAgICAgICAgZGVidWdBc3NlcnQodGhpcy5maWx0ZXIubGVuZ3RoID09PSAxLCAnUG9wdXAgb3BlcmF0aW9ucyBvbmx5IGhhbmRsZSBvbmUgZXZlbnQnKTtcclxuICAgICAgICBjb25zdCBldmVudElkID0gX2dlbmVyYXRlRXZlbnRJZCgpO1xyXG4gICAgICAgIHRoaXMuYXV0aFdpbmRvdyA9IGF3YWl0IHRoaXMucmVzb2x2ZXIuX29wZW5Qb3B1cCh0aGlzLmF1dGgsIHRoaXMucHJvdmlkZXIsIHRoaXMuZmlsdGVyWzBdLCAvLyBUaGVyZSdzIGFsd2F5cyBvbmUsIHNlZSBjb25zdHJ1Y3RvclxyXG4gICAgICAgIGV2ZW50SWQpO1xyXG4gICAgICAgIHRoaXMuYXV0aFdpbmRvdy5hc3NvY2lhdGVkRXZlbnQgPSBldmVudElkO1xyXG4gICAgICAgIC8vIENoZWNrIGZvciB3ZWIgc3RvcmFnZSBzdXBwb3J0IGFuZCBvcmlnaW4gdmFsaWRhdGlvbiBfYWZ0ZXJfIHRoZSBwb3B1cCBpc1xyXG4gICAgICAgIC8vIGxvYWRlZC4gVGhlc2Ugb3BlcmF0aW9ucyBhcmUgc2xvdyAofjEgc2Vjb25kIG9yIHNvKSBSYXRoZXIgdGhhblxyXG4gICAgICAgIC8vIHdhaXRpbmcgb24gdGhlbSBiZWZvcmUgb3BlbmluZyB0aGUgd2luZG93LCBvcHRpbWlzdGljYWxseSBvcGVuIHRoZSBwb3B1cFxyXG4gICAgICAgIC8vIGFuZCBjaGVjayBmb3Igc3RvcmFnZSBzdXBwb3J0IGF0IHRoZSBzYW1lIHRpbWUuIElmIHN0b3JhZ2Ugc3VwcG9ydCBpc1xyXG4gICAgICAgIC8vIG5vdCBhdmFpbGFibGUsIHRoaXMgd2lsbCBjYXVzZSB0aGUgd2hvbGUgdGhpbmcgdG8gcmVqZWN0IHByb3Blcmx5LiBJdFxyXG4gICAgICAgIC8vIHdpbGwgYWxzbyBjbG9zZSB0aGUgcG9wdXAsIGJ1dCBzaW5jZSB0aGUgcHJvbWlzZSBoYXMgYWxyZWFkeSByZWplY3RlZCxcclxuICAgICAgICAvLyB0aGUgcG9wdXAgY2xvc2VkIGJ5IHVzZXIgcG9sbCB3aWxsIHJlamVjdCBpbnRvIHRoZSB2b2lkLlxyXG4gICAgICAgIHRoaXMucmVzb2x2ZXIuX29yaWdpblZhbGlkYXRpb24odGhpcy5hdXRoKS5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlci5faXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKHRoaXMuYXV0aCwgaXNTdXBwb3J0ZWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIgLyogV0VCX1NUT1JBR0VfVU5TVVBQT1JURUQgKi8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIEhhbmRsZSB1c2VyIGNsb3N1cmUuIE5vdGljZSB0aGlzIGRvZXMgKm5vdCogdXNlIGF3YWl0XHJcbiAgICAgICAgdGhpcy5wb2xsVXNlckNhbmNlbGxhdGlvbigpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGV2ZW50SWQoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5hdXRoV2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXNzb2NpYXRlZEV2ZW50KSB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIHRoaXMucmVqZWN0KF9jcmVhdGVFcnJvcih0aGlzLmF1dGgsIFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiAvKiBFWFBJUkVEX1BPUFVQX1JFUVVFU1QgKi8pKTtcclxuICAgIH1cclxuICAgIGNsZWFuVXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aFdpbmRvdykge1xyXG4gICAgICAgICAgICB0aGlzLmF1dGhXaW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucG9sbElkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5wb2xsSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmF1dGhXaW5kb3cgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucG9sbElkID0gbnVsbDtcclxuICAgICAgICBQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgcG9sbFVzZXJDYW5jZWxsYXRpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcG9sbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICAgICAgaWYgKChfYiA9IChfYSA9IHRoaXMuYXV0aFdpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLndpbmRvdykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlcmUgaXMgc3VmZmljaWVudCB0aW1lIGZvciB3aGF0ZXZlciBhY3Rpb24gdG9cclxuICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRlLiBUaGUgd2luZG93IGNvdWxkIGhhdmUgY2xvc2VkIGJ1dCB0aGUgc2lnbiBpbiBuZXR3b3JrXHJcbiAgICAgICAgICAgICAgICAvLyBjYWxsIGNvdWxkIHN0aWxsIGJlIGluIGZsaWdodC5cclxuICAgICAgICAgICAgICAgIHRoaXMucG9sbElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9sbElkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBcInBvcHVwLWNsb3NlZC1ieS11c2VyXCIgLyogUE9QVVBfQ0xPU0VEX0JZX1VTRVIgKi8pKTtcclxuICAgICAgICAgICAgICAgIH0sIDIwMDAgLyogQVVUSF9FVkVOVCAqLyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wb2xsSWQgPSB3aW5kb3cuc2V0VGltZW91dChwb2xsLCBfUE9MTF9XSU5ET1dfQ0xPU0VfVElNRU9VVC5nZXQoKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwb2xsKCk7XHJcbiAgICB9XHJcbn1cclxuLy8gT25seSBvbmUgcG9wdXAgaXMgZXZlciBzaG93biBhdCBvbmNlLiBUaGUgbGlmZWN5Y2xlIG9mIHRoZSBjdXJyZW50IHBvcHVwXHJcbi8vIGNhbiBiZSBtYW5hZ2VkIC8gY2FuY2VsbGVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci5cclxuUG9wdXBPcGVyYXRpb24uY3VycmVudFBvcHVwQWN0aW9uID0gbnVsbDtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgUEVORElOR19SRURJUkVDVF9LRVkgPSAncGVuZGluZ1JlZGlyZWN0JztcclxuLy8gV2Ugb25seSBnZXQgb25lIHJlZGlyZWN0IG91dGNvbWUgZm9yIGFueSBvbmUgYXV0aCwgc28ganVzdCBzdG9yZSBpdFxyXG4vLyBpbiBoZXJlLlxyXG5jb25zdCByZWRpcmVjdE91dGNvbWVNYXAgPSBuZXcgTWFwKCk7XHJcbmNsYXNzIFJlZGlyZWN0QWN0aW9uIGV4dGVuZHMgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGgsIHJlc29sdmVyLCBieXBhc3NBdXRoU3RhdGUgPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKGF1dGgsIFtcclxuICAgICAgICAgICAgXCJzaWduSW5WaWFSZWRpcmVjdFwiIC8qIFNJR05fSU5fVklBX1JFRElSRUNUICovLFxyXG4gICAgICAgICAgICBcImxpbmtWaWFSZWRpcmVjdFwiIC8qIExJTktfVklBX1JFRElSRUNUICovLFxyXG4gICAgICAgICAgICBcInJlYXV0aFZpYVJlZGlyZWN0XCIgLyogUkVBVVRIX1ZJQV9SRURJUkVDVCAqLyxcclxuICAgICAgICAgICAgXCJ1bmtub3duXCIgLyogVU5LTk9XTiAqL1xyXG4gICAgICAgIF0sIHJlc29sdmVyLCB1bmRlZmluZWQsIGJ5cGFzc0F1dGhTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudElkID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGUgdGhlIGV4ZWN1dGUgZnVuY3Rpb247IGlmIHdlIGFscmVhZHkgaGF2ZSBhIHJlZGlyZWN0IHJlc3VsdCwgdGhlblxyXG4gICAgICoganVzdCByZXR1cm4gaXQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgbGV0IHJlYWR5T3V0Y29tZSA9IHJlZGlyZWN0T3V0Y29tZU1hcC5nZXQodGhpcy5hdXRoLl9rZXkoKSk7XHJcbiAgICAgICAgaWYgKCFyZWFkeU91dGNvbWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1BlbmRpbmdSZWRpcmVjdCA9IGF3YWl0IF9nZXRBbmRDbGVhclBlbmRpbmdSZWRpcmVjdFN0YXR1cyh0aGlzLnJlc29sdmVyLCB0aGlzLmF1dGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaGFzUGVuZGluZ1JlZGlyZWN0ID8gYXdhaXQgc3VwZXIuZXhlY3V0ZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHJlYWR5T3V0Y29tZSA9ICgpID0+IFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkeU91dGNvbWUgPSAoKSA9PiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWRpcmVjdE91dGNvbWVNYXAuc2V0KHRoaXMuYXV0aC5fa2V5KCksIHJlYWR5T3V0Y29tZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCBieXBhc3NpbmcgYXV0aCBzdGF0ZSwgdGhlIHJlYWR5IG91dGNvbWUgc2hvdWxkIGJlIHNldCB0b1xyXG4gICAgICAgIC8vIG51bGwuXHJcbiAgICAgICAgaWYgKCF0aGlzLmJ5cGFzc0F1dGhTdGF0ZSkge1xyXG4gICAgICAgICAgICByZWRpcmVjdE91dGNvbWVNYXAuc2V0KHRoaXMuYXV0aC5fa2V5KCksICgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWFkeU91dGNvbWUoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uQXV0aEV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwic2lnbkluVmlhUmVkaXJlY3RcIiAvKiBTSUdOX0lOX1ZJQV9SRURJUkVDVCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub25BdXRoRXZlbnQoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC50eXBlID09PSBcInVua25vd25cIiAvKiBVTktOT1dOICovKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBzZW50aW5lbCB2YWx1ZSBpbmRpY2F0aW5nIHRoZXJlJ3Mgbm8gcGVuZGluZyByZWRpcmVjdFxyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50LmV2ZW50SWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuYXV0aC5fcmVkaXJlY3RVc2VyRm9ySWQoZXZlbnQuZXZlbnRJZCk7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uQXV0aEV2ZW50KGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIG9uRXhlY3V0aW9uKCkgeyB9XHJcbiAgICBjbGVhblVwKCkgeyB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX2dldEFuZENsZWFyUGVuZGluZ1JlZGlyZWN0U3RhdHVzKHJlc29sdmVyLCBhdXRoKSB7XHJcbiAgICBjb25zdCBrZXkgPSBwZW5kaW5nUmVkaXJlY3RLZXkoYXV0aCk7XHJcbiAgICBjb25zdCBwZXJzaXN0ZW5jZSA9IHJlc29sdmVyUGVyc2lzdGVuY2UocmVzb2x2ZXIpO1xyXG4gICAgaWYgKCEoYXdhaXQgcGVyc2lzdGVuY2UuX2lzQXZhaWxhYmxlKCkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFzUGVuZGluZ1JlZGlyZWN0ID0gKGF3YWl0IHBlcnNpc3RlbmNlLl9nZXQoa2V5KSkgPT09ICd0cnVlJztcclxuICAgIGF3YWl0IHBlcnNpc3RlbmNlLl9yZW1vdmUoa2V5KTtcclxuICAgIHJldHVybiBoYXNQZW5kaW5nUmVkaXJlY3Q7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX3NldFBlbmRpbmdSZWRpcmVjdFN0YXR1cyhyZXNvbHZlciwgYXV0aCkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVyUGVyc2lzdGVuY2UocmVzb2x2ZXIpLl9zZXQocGVuZGluZ1JlZGlyZWN0S2V5KGF1dGgpLCAndHJ1ZScpO1xyXG59XHJcbmZ1bmN0aW9uIF9jbGVhclJlZGlyZWN0T3V0Y29tZXMoKSB7XHJcbiAgICByZWRpcmVjdE91dGNvbWVNYXAuY2xlYXIoKTtcclxufVxyXG5mdW5jdGlvbiBfb3ZlcnJpZGVSZWRpcmVjdFJlc3VsdChhdXRoLCByZXN1bHQpIHtcclxuICAgIHJlZGlyZWN0T3V0Y29tZU1hcC5zZXQoYXV0aC5fa2V5KCksIHJlc3VsdCk7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZXJQZXJzaXN0ZW5jZShyZXNvbHZlcikge1xyXG4gICAgcmV0dXJuIF9nZXRJbnN0YW5jZShyZXNvbHZlci5fcmVkaXJlY3RQZXJzaXN0ZW5jZSk7XHJcbn1cclxuZnVuY3Rpb24gcGVuZGluZ1JlZGlyZWN0S2V5KGF1dGgpIHtcclxuICAgIHJldHVybiBfcGVyc2lzdGVuY2VLZXlOYW1lKFBFTkRJTkdfUkVESVJFQ1RfS0VZLCBhdXRoLmNvbmZpZy5hcGlLZXksIGF1dGgubmFtZSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEF1dGhlbnRpY2F0ZXMgYSBGaXJlYmFzZSBjbGllbnQgdXNpbmcgYSBmdWxsLXBhZ2UgcmVkaXJlY3QgZmxvdy5cclxuICpcclxuICogQHJlbWFya3NcclxuICogVG8gaGFuZGxlIHRoZSByZXN1bHRzIGFuZCBlcnJvcnMgZm9yIHRoaXMgb3BlcmF0aW9uLCByZWZlciB0byB7QGxpbmsgZ2V0UmVkaXJlY3RSZXN1bHR9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogLy8gWW91IGNhbiBhZGQgYWRkaXRpb25hbCBzY29wZXMgdG8gdGhlIHByb3ZpZGVyOlxyXG4gKiBwcm92aWRlci5hZGRTY29wZSgndXNlcl9iaXJ0aGRheScpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBpZiAocmVzdWx0KSB7XHJcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXHJcbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XHJcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG4gKiB9XHJcbiAqIC8vIEFzIHRoaXMgQVBJIGNhbiBiZSB1c2VkIGZvciBzaWduLWluLCBsaW5raW5nIGFuZCByZWF1dGhlbnRpY2F0aW9uLFxyXG4gKiAvLyBjaGVjayB0aGUgb3BlcmF0aW9uVHlwZSB0byBkZXRlcm1pbmUgd2hhdCB0cmlnZ2VyZWQgdGhpcyByZWRpcmVjdFxyXG4gKiAvLyBvcGVyYXRpb24uXHJcbiAqIGNvbnN0IG9wZXJhdGlvblR5cGUgPSByZXN1bHQub3BlcmF0aW9uVHlwZTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXHJcbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXHJcbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxyXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIsIHJlc29sdmVyKSB7XHJcbiAgICByZXR1cm4gX3NpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlciwgcmVzb2x2ZXIpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIF9zaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIsIHJlc29sdmVyKSB7XHJcbiAgICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XHJcbiAgICBfYXNzZXJ0SW5zdGFuY2VPZihhdXRoLCBwcm92aWRlciwgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKTtcclxuICAgIGNvbnN0IHJlc29sdmVySW50ZXJuYWwgPSBfd2l0aERlZmF1bHRSZXNvbHZlcihhdXRoSW50ZXJuYWwsIHJlc29sdmVyKTtcclxuICAgIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgYXV0aEludGVybmFsKTtcclxuICAgIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QoYXV0aEludGVybmFsLCBwcm92aWRlciwgXCJzaWduSW5WaWFSZWRpcmVjdFwiIC8qIFNJR05fSU5fVklBX1JFRElSRUNUICovKTtcclxufVxyXG4vKipcclxuICogUmVhdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50IHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIHtAbGluayBPQXV0aFByb3ZpZGVyfSB1c2luZyBhIGZ1bGwtcGFnZSByZWRpcmVjdCBmbG93LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyKTtcclxuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXHJcbiAqXHJcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XHJcbiAqIC8vIExpbmsgdXNpbmcgYSByZWRpcmVjdC5cclxuICogYXdhaXQgbGlua1dpdGhSZWRpcmVjdChyZXN1bHQudXNlciwgcHJvdmlkZXIpO1xyXG4gKiAvLyBUaGlzIHdpbGwgYWdhaW4gdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcclxuICpcclxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxyXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXHJcbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxyXG4gKiBOb24tT0F1dGggcHJvdmlkZXJzIGxpa2Uge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aWxsIHRocm93IGFuIGVycm9yLlxyXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcclxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gcmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3QodXNlciwgcHJvdmlkZXIsIHJlc29sdmVyKSB7XHJcbiAgICByZXR1cm4gX3JlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcik7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX3JlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcikge1xyXG4gICAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xyXG4gICAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xyXG4gICAgLy8gQWxsb3cgdGhlIHJlc29sdmVyIHRvIGVycm9yIGJlZm9yZSBwZXJzaXN0aW5nIHRoZSByZWRpcmVjdCB1c2VyXHJcbiAgICBjb25zdCByZXNvbHZlckludGVybmFsID0gX3dpdGhEZWZhdWx0UmVzb2x2ZXIodXNlckludGVybmFsLmF1dGgsIHJlc29sdmVyKTtcclxuICAgIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsLmF1dGgpO1xyXG4gICAgY29uc3QgZXZlbnRJZCA9IGF3YWl0IHByZXBhcmVVc2VyRm9yUmVkaXJlY3QodXNlckludGVybmFsKTtcclxuICAgIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBcInJlYXV0aFZpYVJlZGlyZWN0XCIgLyogUkVBVVRIX1ZJQV9SRURJUkVDVCAqLywgZXZlbnRJZCk7XHJcbn1cclxuLyoqXHJcbiAqIExpbmtzIHRoZSB7QGxpbmsgT0F1dGhQcm92aWRlcn0gdG8gdGhlIHVzZXIgYWNjb3VudCB1c2luZyBhIGZ1bGwtcGFnZSByZWRpcmVjdCBmbG93LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgc29tZSBvdGhlciBwcm92aWRlci5cclxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcclxuICogLy8gTGluayB1c2luZyBhIHJlZGlyZWN0LlxyXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xyXG4gKiBhd2FpdCBsaW5rV2l0aFJlZGlyZWN0KHJlc3VsdC51c2VyLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cclxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXHJcbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXHJcbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxyXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxyXG4gKlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBsaW5rV2l0aFJlZGlyZWN0KHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcikge1xyXG4gICAgcmV0dXJuIF9saW5rV2l0aFJlZGlyZWN0KHVzZXIsIHByb3ZpZGVyLCByZXNvbHZlcik7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX2xpbmtXaXRoUmVkaXJlY3QodXNlciwgcHJvdmlkZXIsIHJlc29sdmVyKSB7XHJcbiAgICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcik7XHJcbiAgICBfYXNzZXJ0SW5zdGFuY2VPZih1c2VySW50ZXJuYWwuYXV0aCwgcHJvdmlkZXIsIEZlZGVyYXRlZEF1dGhQcm92aWRlcik7XHJcbiAgICAvLyBBbGxvdyB0aGUgcmVzb2x2ZXIgdG8gZXJyb3IgYmVmb3JlIHBlcnNpc3RpbmcgdGhlIHJlZGlyZWN0IHVzZXJcclxuICAgIGNvbnN0IHJlc29sdmVySW50ZXJuYWwgPSBfd2l0aERlZmF1bHRSZXNvbHZlcih1c2VySW50ZXJuYWwuYXV0aCwgcmVzb2x2ZXIpO1xyXG4gICAgYXdhaXQgX2Fzc2VydExpbmtlZFN0YXR1cyhmYWxzZSwgdXNlckludGVybmFsLCBwcm92aWRlci5wcm92aWRlcklkKTtcclxuICAgIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsLmF1dGgpO1xyXG4gICAgY29uc3QgZXZlbnRJZCA9IGF3YWl0IHByZXBhcmVVc2VyRm9yUmVkaXJlY3QodXNlckludGVybmFsKTtcclxuICAgIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBcImxpbmtWaWFSZWRpcmVjdFwiIC8qIExJTktfVklBX1JFRElSRUNUICovLCBldmVudElkKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0gZnJvbSB0aGUgcmVkaXJlY3QtYmFzZWQgc2lnbi1pbiBmbG93LlxyXG4gKlxyXG4gKiBAcmVtYXJrc1xyXG4gKiBJZiBzaWduLWluIHN1Y2NlZWRlZCwgcmV0dXJucyB0aGUgc2lnbmVkIGluIHVzZXIuIElmIHNpZ24taW4gd2FzIHVuc3VjY2Vzc2Z1bCwgZmFpbHMgd2l0aCBhblxyXG4gKiBlcnJvci4gSWYgbm8gcmVkaXJlY3Qgb3BlcmF0aW9uIHdhcyBjYWxsZWQsIHJldHVybnMgYG51bGxgLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cclxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcclxuICogLy8gWW91IGNhbiBhZGQgYWRkaXRpb25hbCBzY29wZXMgdG8gdGhlIHByb3ZpZGVyOlxyXG4gKiBwcm92aWRlci5hZGRTY29wZSgndXNlcl9iaXJ0aGRheScpO1xyXG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXHJcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XHJcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxyXG4gKlxyXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XHJcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xyXG4gKiBpZiAocmVzdWx0KSB7XHJcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXHJcbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XHJcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG4gKiB9XHJcbiAqIC8vIEFzIHRoaXMgQVBJIGNhbiBiZSB1c2VkIGZvciBzaWduLWluLCBsaW5raW5nIGFuZCByZWF1dGhlbnRpY2F0aW9uLFxyXG4gKiAvLyBjaGVjayB0aGUgb3BlcmF0aW9uVHlwZSB0byBkZXRlcm1pbmUgd2hhdCB0cmlnZ2VyZWQgdGhpcyByZWRpcmVjdFxyXG4gKiAvLyBvcGVyYXRpb24uXHJcbiAqIGNvbnN0IG9wZXJhdGlvblR5cGUgPSByZXN1bHQub3BlcmF0aW9uVHlwZTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHJlc29sdmVyIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0sIG9wdGlvbmFsXHJcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFJlZGlyZWN0UmVzdWx0KGF1dGgsIHJlc29sdmVyKSB7XHJcbiAgICBhd2FpdCBfY2FzdEF1dGgoYXV0aCkuX2luaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgIHJldHVybiBfZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCwgcmVzb2x2ZXIsIGZhbHNlKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBfZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCwgcmVzb2x2ZXJFeHRlcm4sIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XHJcbiAgICBjb25zdCByZXNvbHZlciA9IF93aXRoRGVmYXVsdFJlc29sdmVyKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXJFeHRlcm4pO1xyXG4gICAgY29uc3QgYWN0aW9uID0gbmV3IFJlZGlyZWN0QWN0aW9uKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXIsIGJ5cGFzc0F1dGhTdGF0ZSk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhY3Rpb24uZXhlY3V0ZSgpO1xyXG4gICAgaWYgKHJlc3VsdCAmJiAhYnlwYXNzQXV0aFN0YXRlKSB7XHJcbiAgICAgICAgZGVsZXRlIHJlc3VsdC51c2VyLl9yZWRpcmVjdEV2ZW50SWQ7XHJcbiAgICAgICAgYXdhaXQgYXV0aEludGVybmFsLl9wZXJzaXN0VXNlcklmQ3VycmVudChyZXN1bHQudXNlcik7XHJcbiAgICAgICAgYXdhaXQgYXV0aEludGVybmFsLl9zZXRSZWRpcmVjdFVzZXIobnVsbCwgcmVzb2x2ZXJFeHRlcm4pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlVXNlckZvclJlZGlyZWN0KHVzZXIpIHtcclxuICAgIGNvbnN0IGV2ZW50SWQgPSBfZ2VuZXJhdGVFdmVudElkKGAke3VzZXIudWlkfTo6OmApO1xyXG4gICAgdXNlci5fcmVkaXJlY3RFdmVudElkID0gZXZlbnRJZDtcclxuICAgIGF3YWl0IHVzZXIuYXV0aC5fc2V0UmVkaXJlY3RVc2VyKHVzZXIpO1xyXG4gICAgYXdhaXQgdXNlci5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh1c2VyKTtcclxuICAgIHJldHVybiBldmVudElkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIFRoZSBhbW91bnQgb2YgdGltZSB0byBzdG9yZSB0aGUgVUlEcyBvZiBzZWVuIGV2ZW50czsgdGhpcyBpc1xyXG4vLyBzZXQgdG8gMTAgbWluIGJ5IGRlZmF1bHRcclxuY29uc3QgRVZFTlRfRFVQTElDQVRJT05fQ0FDSEVfRFVSQVRJT05fTVMgPSAxMCAqIDYwICogMTAwMDtcclxuY2xhc3MgQXV0aEV2ZW50TWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihhdXRoKSB7XHJcbiAgICAgICAgdGhpcy5hdXRoID0gYXV0aDtcclxuICAgICAgICB0aGlzLmNhY2hlZEV2ZW50VWlkcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLmNvbnN1bWVycyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGFzSGFuZGxlZFBvdGVudGlhbFJlZGlyZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyQ29uc3VtZXIoYXV0aEV2ZW50Q29uc3VtZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnN1bWVycy5hZGQoYXV0aEV2ZW50Q29uc3VtZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5pc0V2ZW50Rm9yQ29uc3VtZXIodGhpcy5xdWV1ZWRSZWRpcmVjdEV2ZW50LCBhdXRoRXZlbnRDb25zdW1lcikpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kVG9Db25zdW1lcih0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQsIGF1dGhFdmVudENvbnN1bWVyKTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlRXZlbnRUb0NhY2hlKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW5yZWdpc3RlckNvbnN1bWVyKGF1dGhFdmVudENvbnN1bWVyKSB7XHJcbiAgICAgICAgdGhpcy5jb25zdW1lcnMuZGVsZXRlKGF1dGhFdmVudENvbnN1bWVyKTtcclxuICAgIH1cclxuICAgIG9uRXZlbnQoZXZlbnQpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYmVlbiBoYW5kbGVkXHJcbiAgICAgICAgaWYgKHRoaXMuaGFzRXZlbnRCZWVuSGFuZGxlZChldmVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29uc3VtZXJzLmZvckVhY2goY29uc3VtZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0V2ZW50Rm9yQ29uc3VtZXIoZXZlbnQsIGNvbnN1bWVyKSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRUb0NvbnN1bWVyKGV2ZW50LCBjb25zdW1lcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVFdmVudFRvQ2FjaGUoZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzSGFuZGxlZFBvdGVudGlhbFJlZGlyZWN0IHx8ICFpc1JlZGlyZWN0RXZlbnQoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgc2VlbiBhIHJlZGlyZWN0IGJlZm9yZSwgb3IgdGhpcyBpcyBhIHBvcHVwIGV2ZW50LFxyXG4gICAgICAgICAgICAvLyBiYWlsIG5vd1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgPSB0cnVlO1xyXG4gICAgICAgIC8vIElmIHRoZSByZWRpcmVjdCB3YXNuJ3QgaGFuZGxlZCwgaGFuZyBvbiB0byBpdFxyXG4gICAgICAgIGlmICghaGFuZGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgPSBldmVudDtcclxuICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYW5kbGVkO1xyXG4gICAgfVxyXG4gICAgc2VuZFRvQ29uc3VtZXIoZXZlbnQsIGNvbnN1bWVyKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmIChldmVudC5lcnJvciAmJiAhaXNOdWxsUmVkaXJlY3RFdmVudChldmVudCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9ICgoX2EgPSBldmVudC5lcnJvci5jb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BsaXQoJ2F1dGgvJylbMV0pIHx8XHJcbiAgICAgICAgICAgICAgICBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi87XHJcbiAgICAgICAgICAgIGNvbnN1bWVyLm9uRXJyb3IoX2NyZWF0ZUVycm9yKHRoaXMuYXV0aCwgY29kZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3VtZXIub25BdXRoRXZlbnQoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlzRXZlbnRGb3JDb25zdW1lcihldmVudCwgY29uc3VtZXIpIHtcclxuICAgICAgICBjb25zdCBldmVudElkTWF0Y2hlcyA9IGNvbnN1bWVyLmV2ZW50SWQgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgKCEhZXZlbnQuZXZlbnRJZCAmJiBldmVudC5ldmVudElkID09PSBjb25zdW1lci5ldmVudElkKTtcclxuICAgICAgICByZXR1cm4gY29uc3VtZXIuZmlsdGVyLmluY2x1ZGVzKGV2ZW50LnR5cGUpICYmIGV2ZW50SWRNYXRjaGVzO1xyXG4gICAgfVxyXG4gICAgaGFzRXZlbnRCZWVuSGFuZGxlZChldmVudCkge1xyXG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gdGhpcy5sYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID49XHJcbiAgICAgICAgICAgIEVWRU5UX0RVUExJQ0FUSU9OX0NBQ0hFX0RVUkFUSU9OX01TKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkRXZlbnRVaWRzLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZEV2ZW50VWlkcy5oYXMoZXZlbnRVaWQoZXZlbnQpKTtcclxuICAgIH1cclxuICAgIHNhdmVFdmVudFRvQ2FjaGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmNhY2hlZEV2ZW50VWlkcy5hZGQoZXZlbnRVaWQoZXZlbnQpKTtcclxuICAgICAgICB0aGlzLmxhc3RQcm9jZXNzZWRFdmVudFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGV2ZW50VWlkKGUpIHtcclxuICAgIHJldHVybiBbZS50eXBlLCBlLmV2ZW50SWQsIGUuc2Vzc2lvbklkLCBlLnRlbmFudElkXS5maWx0ZXIodiA9PiB2KS5qb2luKCctJyk7XHJcbn1cclxuZnVuY3Rpb24gaXNOdWxsUmVkaXJlY3RFdmVudCh7IHR5cGUsIGVycm9yIH0pIHtcclxuICAgIHJldHVybiAodHlwZSA9PT0gXCJ1bmtub3duXCIgLyogVU5LTk9XTiAqLyAmJlxyXG4gICAgICAgIChlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuY29kZSkgPT09IGBhdXRoLyR7XCJuby1hdXRoLWV2ZW50XCIgLyogTk9fQVVUSF9FVkVOVCAqL31gKTtcclxufVxyXG5mdW5jdGlvbiBpc1JlZGlyZWN0RXZlbnQoZXZlbnQpIHtcclxuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJzaWduSW5WaWFSZWRpcmVjdFwiIC8qIFNJR05fSU5fVklBX1JFRElSRUNUICovOlxyXG4gICAgICAgIGNhc2UgXCJsaW5rVmlhUmVkaXJlY3RcIiAvKiBMSU5LX1ZJQV9SRURJUkVDVCAqLzpcclxuICAgICAgICBjYXNlIFwicmVhdXRoVmlhUmVkaXJlY3RcIiAvKiBSRUFVVEhfVklBX1JFRElSRUNUICovOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBjYXNlIFwidW5rbm93blwiIC8qIFVOS05PV04gKi86XHJcbiAgICAgICAgICAgIHJldHVybiBpc051bGxSZWRpcmVjdEV2ZW50KGV2ZW50KTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2dldFByb2plY3RDb25maWcoYXV0aCwgcmVxdWVzdCA9IHt9KSB7XHJcbiAgICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0KGF1dGgsIFwiR0VUXCIgLyogR0VUICovLCBcIi92MS9wcm9qZWN0c1wiIC8qIEdFVF9QUk9KRUNUX0NPTkZJRyAqLywgcmVxdWVzdCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgSVBfQUREUkVTU19SRUdFWCA9IC9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kLztcclxuY29uc3QgSFRUUF9SRUdFWCA9IC9eaHR0cHM/LztcclxuYXN5bmMgZnVuY3Rpb24gX3ZhbGlkYXRlT3JpZ2luKGF1dGgpIHtcclxuICAgIC8vIFNraXAgb3JpZ2luIHZhbGlkYXRpb24gaWYgd2UgYXJlIGluIGFuIGVtdWxhdGVkIGVudmlyb25tZW50XHJcbiAgICBpZiAoYXV0aC5jb25maWcuZW11bGF0b3IpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGF1dGhvcml6ZWREb21haW5zIH0gPSBhd2FpdCBfZ2V0UHJvamVjdENvbmZpZyhhdXRoKTtcclxuICAgIGZvciAoY29uc3QgZG9tYWluIG9mIGF1dGhvcml6ZWREb21haW5zKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKG1hdGNoRG9tYWluKGRvbWFpbikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0aGVyZSdzIGEgVVJMIGVycm9yOyBqdXN0IGNvbnRpbnVlIHNlYXJjaGluZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEluIHRoZSBvbGQgU0RLLCB0aGlzIGVycm9yIGFsc28gcHJvdmlkZXMgaGVscGZ1bCBtZXNzYWdlcy5cclxuICAgIF9mYWlsKGF1dGgsIFwidW5hdXRob3JpemVkLWRvbWFpblwiIC8qIElOVkFMSURfT1JJR0lOICovKTtcclxufVxyXG5mdW5jdGlvbiBtYXRjaERvbWFpbihleHBlY3RlZCkge1xyXG4gICAgY29uc3QgY3VycmVudFVybCA9IF9nZXRDdXJyZW50VXJsKCk7XHJcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSB9ID0gbmV3IFVSTChjdXJyZW50VXJsKTtcclxuICAgIGlmIChleHBlY3RlZC5zdGFydHNXaXRoKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJykpIHtcclxuICAgICAgICBjb25zdCBjZVVybCA9IG5ldyBVUkwoZXhwZWN0ZWQpO1xyXG4gICAgICAgIGlmIChjZVVybC5ob3N0bmFtZSA9PT0gJycgJiYgaG9zdG5hbWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiB3ZSdyZSBub3QgcGFyc2luZyBjaHJvbWUgVVJMcyBwcm9wZXJseVxyXG4gICAgICAgICAgICByZXR1cm4gKHByb3RvY29sID09PSAnY2hyb21lLWV4dGVuc2lvbjonICYmXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZC5yZXBsYWNlKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJywgJycpID09PVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVcmwucmVwbGFjZSgnY2hyb21lLWV4dGVuc2lvbjovLycsICcnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm90b2NvbCA9PT0gJ2Nocm9tZS1leHRlbnNpb246JyAmJiBjZVVybC5ob3N0bmFtZSA9PT0gaG9zdG5hbWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIUhUVFBfUkVHRVgudGVzdChwcm90b2NvbCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoSVBfQUREUkVTU19SRUdFWC50ZXN0KGV4cGVjdGVkKSkge1xyXG4gICAgICAgIC8vIFRoZSBkb21haW4gaGFzIHRvIGJlIGV4YWN0bHkgZXF1YWwgdG8gdGhlIHBhdHRlcm4sIGFzIGFuIElQIGRvbWFpbiB3aWxsXHJcbiAgICAgICAgLy8gb25seSBjb250YWluIHRoZSBJUCwgbm8gZXh0cmEgY2hhcmFjdGVyLlxyXG4gICAgICAgIHJldHVybiBob3N0bmFtZSA9PT0gZXhwZWN0ZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBEb3RzIGluIHBhdHRlcm4gc2hvdWxkIGJlIGVzY2FwZWQuXHJcbiAgICBjb25zdCBlc2NhcGVkRG9tYWluUGF0dGVybiA9IGV4cGVjdGVkLnJlcGxhY2UoL1xcLi9nLCAnXFxcXC4nKTtcclxuICAgIC8vIE5vbiBpcCBhZGRyZXNzIGRvbWFpbnMuXHJcbiAgICAvLyBkb21haW4uY29tID0gKi5kb21haW4uY29tIE9SIGRvbWFpbi5jb21cclxuICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXiguK1xcXFwuJyArIGVzY2FwZWREb21haW5QYXR0ZXJuICsgJ3wnICsgZXNjYXBlZERvbWFpblBhdHRlcm4gKyAnKSQnLCAnaScpO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QoaG9zdG5hbWUpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBORVRXT1JLX1RJTUVPVVQgPSBuZXcgRGVsYXkoMzAwMDAsIDYwMDAwKTtcclxuLyoqXHJcbiAqIFJlc2V0IHVubGFvZGVkIEdBcGkgbW9kdWxlcy4gSWYgZ2FwaS5sb2FkIGZhaWxzIGR1ZSB0byBhIG5ldHdvcmsgZXJyb3IsXHJcbiAqIGl0IHdpbGwgc3RvcCB3b3JraW5nIGFmdGVyIGEgcmV0cmlhbC4gVGhpcyBpcyBhIGhhY2sgdG8gZml4IHRoaXMgaXNzdWUuXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNldFVubG9hZGVkR2FwaU1vZHVsZXMoKSB7XHJcbiAgICAvLyBDbGVhciBsYXN0IGZhaWxlZCBnYXBpLmxvYWQgc3RhdGUgdG8gZm9yY2UgbmV4dCBnYXBpLmxvYWQgdG8gZmlyc3RcclxuICAgIC8vIGxvYWQgdGhlIGZhaWxlZCBnYXBpLmlmcmFtZXMgbW9kdWxlLlxyXG4gICAgLy8gR2V0IGdhcGl4LmJlYWNvbiBjb250ZXh0LlxyXG4gICAgY29uc3QgYmVhY29uID0gX3dpbmRvdygpLl9fX2pzbDtcclxuICAgIC8vIEdldCBjdXJyZW50IGhpbnQuXHJcbiAgICBpZiAoYmVhY29uID09PSBudWxsIHx8IGJlYWNvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmVhY29uLkgpIHtcclxuICAgICAgICAvLyBHZXQgZ2FwaSBoaW50LlxyXG4gICAgICAgIGZvciAoY29uc3QgaGludCBvZiBPYmplY3Qua2V5cyhiZWFjb24uSCkpIHtcclxuICAgICAgICAgICAgLy8gUmVxdWVzdGVkIG1vZHVsZXMuXHJcbiAgICAgICAgICAgIGJlYWNvbi5IW2hpbnRdLnIgPSBiZWFjb24uSFtoaW50XS5yIHx8IFtdO1xyXG4gICAgICAgICAgICAvLyBMb2FkZWQgbW9kdWxlcy5cclxuICAgICAgICAgICAgYmVhY29uLkhbaGludF0uTCA9IGJlYWNvbi5IW2hpbnRdLkwgfHwgW107XHJcbiAgICAgICAgICAgIC8vIFNldCByZXF1ZXN0ZWQgbW9kdWxlcyB0byBhIGNvcHkgb2YgdGhlIGxvYWRlZCBtb2R1bGVzLlxyXG4gICAgICAgICAgICBiZWFjb24uSFtoaW50XS5yID0gWy4uLmJlYWNvbi5IW2hpbnRdLkxdO1xyXG4gICAgICAgICAgICAvLyBDbGVhciBwZW5kaW5nIGNhbGxiYWNrcy5cclxuICAgICAgICAgICAgaWYgKGJlYWNvbi5DUCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZWFjb24uQ1AubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGZhaWxlZCBwZW5kaW5nIGNhbGxiYWNrcy5cclxuICAgICAgICAgICAgICAgICAgICBiZWFjb24uQ1BbaV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGxvYWRHYXBpKGF1dGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XHJcbiAgICAgICAgLy8gRnVuY3Rpb24gdG8gcnVuIHdoZW4gZ2FwaS5sb2FkIGlzIHJlYWR5LlxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRHYXBpSWZyYW1lKCkge1xyXG4gICAgICAgICAgICAvLyBUaGUgZGV2ZWxvcGVyIG1heSBoYXZlIHRyaWVkIHRvIHByZXZpb3VzbHkgcnVuIGdhcGkubG9hZCBhbmQgZmFpbGVkLlxyXG4gICAgICAgICAgICAvLyBSdW4gdGhpcyB0byBmaXggdGhhdC5cclxuICAgICAgICAgICAgcmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzKCk7XHJcbiAgICAgICAgICAgIGdhcGkubG9hZCgnZ2FwaS5pZnJhbWVzJywge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGdhcGkuaWZyYW1lcy5nZXRDb250ZXh0KCkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9udGltZW91dDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBhYm92ZSByZXNldCBtYXkgYmUgc3VmZmljaWVudCwgYnV0IGhhdmluZyB0aGlzIHJlc2V0IGFmdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFpbHVyZSBlbnN1cmVzIHRoYXQgaWYgdGhlIGRldmVsb3BlciBjYWxscyBnYXBpLmxvYWQgYWZ0ZXIgdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBpcyByZS1lc3RhYmxpc2hlZCBhbmQgYmVmb3JlIGFub3RoZXIgYXR0ZW1wdCB0byBlbWJlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBpZnJhbWUsIGl0IHdvdWxkIHdvcmsgYW5kIHdvdWxkIG5vdCBiZSBicm9rZW4gYmVjYXVzZSBvZiBvdXJcclxuICAgICAgICAgICAgICAgICAgICAvLyBmYWlsZWQgYXR0ZW1wdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaW1lb3V0IHdoZW4gZ2FwaS5pZnJhbWVzLklmcmFtZSBub3QgbG9hZGVkLlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0VW5sb2FkZWRHYXBpTW9kdWxlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChfY3JlYXRlRXJyb3IoYXV0aCwgXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIgLyogTkVUV09SS19SRVFVRVNUX0ZBSUxFRCAqLykpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IE5FVFdPUktfVElNRU9VVC5nZXQoKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChfYiA9IChfYSA9IF93aW5kb3coKS5nYXBpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWZyYW1lcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLklmcmFtZSkge1xyXG4gICAgICAgICAgICAvLyBJZiBnYXBpLmlmcmFtZXMuSWZyYW1lIGF2YWlsYWJsZSwgcmVzb2x2ZS5cclxuICAgICAgICAgICAgcmVzb2x2ZShnYXBpLmlmcmFtZXMuZ2V0Q29udGV4dCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoISEoKF9jID0gX3dpbmRvdygpLmdhcGkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sb2FkKSkge1xyXG4gICAgICAgICAgICAvLyBHYXBpIGxvYWRlciByZWFkeSwgbG9hZCBnYXBpLmlmcmFtZXMuXHJcbiAgICAgICAgICAgIGxvYWRHYXBpSWZyYW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgaWZyYW1lIGNhbGxiYWNrIHdoZW4gdGhpcyBpcyBjYWxsZWQgc28gYXMgbm90IHRvIG92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAvLyBhbnkgcHJldmlvdXMgZGVmaW5lZCBjYWxsYmFjay4gVGhpcyBoYXBwZW5zIGlmIHRoaXMgbWV0aG9kIGlzIGNhbGxlZFxyXG4gICAgICAgICAgICAvLyBtdWx0aXBsZSB0aW1lcyBpbiBwYXJhbGxlbCBhbmQgY291bGQgcmVzdWx0IGluIHRoZSBsYXRlciBjYWxsYmFja1xyXG4gICAgICAgICAgICAvLyBvdmVyd3JpdGluZyB0aGUgcHJldmlvdXMgb25lLiBUaGlzIHdvdWxkIGVuZCB1cCB3aXRoIGEgaWZyYW1lXHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQuXHJcbiAgICAgICAgICAgIGNvbnN0IGNiTmFtZSA9IF9nZW5lcmF0ZUNhbGxiYWNrTmFtZSgnaWZyYW1lZmNiJyk7XHJcbiAgICAgICAgICAgIC8vIEdBcGkgbG9hZGVyIG5vdCBhdmFpbGFibGUsIGR5bmFtaWNhbGx5IGxvYWQgcGxhdGZvcm0uanMuXHJcbiAgICAgICAgICAgIF93aW5kb3coKVtjYk5hbWVdID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gR0FwaSBsb2FkZXIgc2hvdWxkIGJlIHJlYWR5LlxyXG4gICAgICAgICAgICAgICAgaWYgKCEhZ2FwaS5sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEdhcGlJZnJhbWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdhcGkgbG9hZGVyIGZhaWxlZCwgdGhyb3cgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KF9jcmVhdGVFcnJvcihhdXRoLCBcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIiAvKiBORVRXT1JLX1JFUVVFU1RfRkFJTEVEICovKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIExvYWQgR0FwaSBsb2FkZXIuXHJcbiAgICAgICAgICAgIHJldHVybiBfbG9hZEpTKGBodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9hcGkuanM/b25sb2FkPSR7Y2JOYW1lfWApXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiByZWplY3QoZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAvLyBSZXNldCBjYWNoZWQgcHJvbWlzZSB0byBhbGxvdyBmb3IgcmV0cmlhbC5cclxuICAgICAgICBjYWNoZWRHQXBpTG9hZGVyID0gbnVsbDtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH0pO1xyXG59XHJcbmxldCBjYWNoZWRHQXBpTG9hZGVyID0gbnVsbDtcclxuZnVuY3Rpb24gX2xvYWRHYXBpKGF1dGgpIHtcclxuICAgIGNhY2hlZEdBcGlMb2FkZXIgPSBjYWNoZWRHQXBpTG9hZGVyIHx8IGxvYWRHYXBpKGF1dGgpO1xyXG4gICAgcmV0dXJuIGNhY2hlZEdBcGlMb2FkZXI7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IFBJTkdfVElNRU9VVCA9IG5ldyBEZWxheSg1MDAwLCAxNTAwMCk7XHJcbmNvbnN0IElGUkFNRV9QQVRIID0gJ19fL2F1dGgvaWZyYW1lJztcclxuY29uc3QgRU1VTEFURURfSUZSQU1FX1BBVEggPSAnZW11bGF0b3IvYXV0aC9pZnJhbWUnO1xyXG5jb25zdCBJRlJBTUVfQVRUUklCVVRFUyA9IHtcclxuICAgIHN0eWxlOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgdG9wOiAnLTEwMHB4JyxcclxuICAgICAgICB3aWR0aDogJzFweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMXB4J1xyXG4gICAgfSxcclxuICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcclxuICAgIHRhYmluZGV4OiAnLTEnXHJcbn07XHJcbi8vIE1hcCBmcm9tIGFwaUhvc3QgdG8gZW5kcG9pbnQgSUQgZm9yIHBhc3NpbmcgaW50byBpZnJhbWUuIEluIGN1cnJlbnQgU0RLLCBhcGlIb3N0IGNhbiBiZSBzZXQgdG9cclxuLy8gYW55dGhpbmcgKG5vdCBmcm9tIGEgbGlzdCBvZiBlbmRwb2ludHMgd2l0aCBJRHMgYXMgaW4gbGVnYWN5KSwgc28gdGhpcyBpcyB0aGUgY2xvc2VzdCB3ZSBjYW4gZ2V0LlxyXG5jb25zdCBFSURfRlJPTV9BUElIT1NUID0gbmV3IE1hcChbXHJcbiAgICBbXCJpZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb21cIiAvKiBBUElfSE9TVCAqLywgJ3AnXSxcclxuICAgIFsnc3RhZ2luZy1pZGVudGl0eXRvb2xraXQuc2FuZGJveC5nb29nbGVhcGlzLmNvbScsICdzJ10sXHJcbiAgICBbJ3Rlc3QtaWRlbnRpdHl0b29sa2l0LnNhbmRib3guZ29vZ2xlYXBpcy5jb20nLCAndCddIC8vIHRlc3RcclxuXSk7XHJcbmZ1bmN0aW9uIGdldElmcmFtZVVybChhdXRoKSB7XHJcbiAgICBjb25zdCBjb25maWcgPSBhdXRoLmNvbmZpZztcclxuICAgIF9hc3NlcnQoY29uZmlnLmF1dGhEb21haW4sIGF1dGgsIFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIgLyogTUlTU0lOR19BVVRIX0RPTUFJTiAqLyk7XHJcbiAgICBjb25zdCB1cmwgPSBjb25maWcuZW11bGF0b3JcclxuICAgICAgICA/IF9lbXVsYXRvclVybChjb25maWcsIEVNVUxBVEVEX0lGUkFNRV9QQVRIKVxyXG4gICAgICAgIDogYGh0dHBzOi8vJHthdXRoLmNvbmZpZy5hdXRoRG9tYWlufS8ke0lGUkFNRV9QQVRIfWA7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgYXBpS2V5OiBjb25maWcuYXBpS2V5LFxyXG4gICAgICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcclxuICAgICAgICB2OiBTREtfVkVSU0lPTlxyXG4gICAgfTtcclxuICAgIGNvbnN0IGVpZCA9IEVJRF9GUk9NX0FQSUhPU1QuZ2V0KGF1dGguY29uZmlnLmFwaUhvc3QpO1xyXG4gICAgaWYgKGVpZCkge1xyXG4gICAgICAgIHBhcmFtcy5laWQgPSBlaWQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZXdvcmtzID0gYXV0aC5fZ2V0RnJhbWV3b3JrcygpO1xyXG4gICAgaWYgKGZyYW1ld29ya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgcGFyYW1zLmZ3ID0gZnJhbWV3b3Jrcy5qb2luKCcsJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7dXJsfT8ke3F1ZXJ5c3RyaW5nKHBhcmFtcykuc2xpY2UoMSl9YDtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBfb3BlbklmcmFtZShhdXRoKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gYXdhaXQgX2xvYWRHYXBpKGF1dGgpO1xyXG4gICAgY29uc3QgZ2FwaSA9IF93aW5kb3coKS5nYXBpO1xyXG4gICAgX2Fzc2VydChnYXBpLCBhdXRoLCBcImludGVybmFsLWVycm9yXCIgLyogSU5URVJOQUxfRVJST1IgKi8pO1xyXG4gICAgcmV0dXJuIGNvbnRleHQub3Blbih7XHJcbiAgICAgICAgd2hlcmU6IGRvY3VtZW50LmJvZHksXHJcbiAgICAgICAgdXJsOiBnZXRJZnJhbWVVcmwoYXV0aCksXHJcbiAgICAgICAgbWVzc2FnZUhhbmRsZXJzRmlsdGVyOiBnYXBpLmlmcmFtZXMuQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSLFxyXG4gICAgICAgIGF0dHJpYnV0ZXM6IElGUkFNRV9BVFRSSUJVVEVTLFxyXG4gICAgICAgIGRvbnRjbGVhcjogdHJ1ZVxyXG4gICAgfSwgKGlmcmFtZSkgPT4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IGlmcmFtZS5yZXN0eWxlKHtcclxuICAgICAgICAgICAgLy8gUHJldmVudCBpZnJhbWUgZnJvbSBjbG9zaW5nIG9uIG1vdXNlIG91dC5cclxuICAgICAgICAgICAgc2V0SGlkZU9uTGVhdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgbmV0d29ya0Vycm9yID0gX2NyZWF0ZUVycm9yKGF1dGgsIFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiIC8qIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQgKi8pO1xyXG4gICAgICAgIC8vIENvbmZpcm0gaWZyYW1lIGlzIGNvcnJlY3RseSBsb2FkZWQuXHJcbiAgICAgICAgLy8gVG8gZmFsbGJhY2sgb24gZmFpbHVyZSwgc2V0IGEgdGltZW91dC5cclxuICAgICAgICBjb25zdCBuZXR3b3JrRXJyb3JUaW1lciA9IF93aW5kb3coKS5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldHdvcmtFcnJvcik7XHJcbiAgICAgICAgfSwgUElOR19USU1FT1VULmdldCgpKTtcclxuICAgICAgICAvLyBDbGVhciB0aW1lciBhbmQgcmVzb2x2ZSBwZW5kaW5nIGlmcmFtZSByZWFkeSBwcm9taXNlLlxyXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyVGltZXJBbmRSZXNvbHZlKCkge1xyXG4gICAgICAgICAgICBfd2luZG93KCkuY2xlYXJUaW1lb3V0KG5ldHdvcmtFcnJvclRpbWVyKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShpZnJhbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGlzIHJldHVybnMgYW4gSVRoZW5hYmxlLiBIb3dldmVyIHRoZSByZWplY3QgcGFydCBkb2VzIG5vdCBjYWxsXHJcbiAgICAgICAgLy8gd2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQuXHJcbiAgICAgICAgaWZyYW1lLnBpbmcoY2xlYXJUaW1lckFuZFJlc29sdmUpLnRoZW4oY2xlYXJUaW1lckFuZFJlc29sdmUsICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldHdvcmtFcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEJBU0VfUE9QVVBfT1BUSU9OUyA9IHtcclxuICAgIGxvY2F0aW9uOiAneWVzJyxcclxuICAgIHJlc2l6YWJsZTogJ3llcycsXHJcbiAgICBzdGF0dXNiYXI6ICd5ZXMnLFxyXG4gICAgdG9vbGJhcjogJ25vJ1xyXG59O1xyXG5jb25zdCBERUZBVUxUX1dJRFRIID0gNTAwO1xyXG5jb25zdCBERUZBVUxUX0hFSUdIVCA9IDYwMDtcclxuY29uc3QgVEFSR0VUX0JMQU5LID0gJ19ibGFuayc7XHJcbmNvbnN0IEZJUkVGT1hfRU1QVFlfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xyXG5jbGFzcyBBdXRoUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3Iod2luZG93KSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3cgPSB3aW5kb3c7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGVkRXZlbnQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud2luZG93KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX29wZW4oYXV0aCwgdXJsLCBuYW1lLCB3aWR0aCA9IERFRkFVTFRfV0lEVEgsIGhlaWdodCA9IERFRkFVTFRfSEVJR0hUKSB7XHJcbiAgICBjb25zdCB0b3AgPSBNYXRoLm1heCgod2luZG93LnNjcmVlbi5hdmFpbEhlaWdodCAtIGhlaWdodCkgLyAyLCAwKS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgbGVmdCA9IE1hdGgubWF4KCh3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGggLSB3aWR0aCkgLyAyLCAwKS50b1N0cmluZygpO1xyXG4gICAgbGV0IHRhcmdldCA9ICcnO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgQkFTRV9QT1BVUF9PUFRJT05TKSwgeyB3aWR0aDogd2lkdGgudG9TdHJpbmcoKSwgaGVpZ2h0OiBoZWlnaHQudG9TdHJpbmcoKSwgdG9wLFxyXG4gICAgICAgIGxlZnQgfSk7XHJcbiAgICAvLyBDaHJvbWUgaU9TIDcgYW5kIDggaXMgcmV0dXJuaW5nIGFuIHVuZGVmaW5lZCBwb3B1cCB3aW4gd2hlbiB0YXJnZXQgaXNcclxuICAgIC8vIHNwZWNpZmllZCwgZXZlbiB0aG91Z2ggdGhlIHBvcHVwIGlzIG5vdCBuZWNlc3NhcmlseSBibG9ja2VkLlxyXG4gICAgY29uc3QgdWEgPSBnZXRVQSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICAgIHRhcmdldCA9IF9pc0Nocm9tZUlPUyh1YSkgPyBUQVJHRVRfQkxBTksgOiBuYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKF9pc0ZpcmVmb3godWEpKSB7XHJcbiAgICAgICAgLy8gRmlyZWZveCBjb21wbGFpbnMgd2hlbiBpbnZhbGlkIFVSTHMgYXJlIHBvcHBlZCBvdXQuIEhhY2t5IHdheSB0byBieXBhc3MuXHJcbiAgICAgICAgdXJsID0gdXJsIHx8IEZJUkVGT1hfRU1QVFlfVVJMO1xyXG4gICAgICAgIC8vIEZpcmVmb3ggZGlzYWJsZXMgYnkgZGVmYXVsdCBzY3JvbGxpbmcgb24gcG9wdXAgd2luZG93cywgd2hpY2ggY2FuIGNyZWF0ZVxyXG4gICAgICAgIC8vIGlzc3VlcyB3aGVuIHRoZSB1c2VyIGhhcyBtYW55IEdvb2dsZSBhY2NvdW50cywgZm9yIGluc3RhbmNlLlxyXG4gICAgICAgIG9wdGlvbnMuc2Nyb2xsYmFycyA9ICd5ZXMnO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb3B0aW9uc1N0cmluZyA9IE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLnJlZHVjZSgoYWNjdW0sIFtrZXksIHZhbHVlXSkgPT4gYCR7YWNjdW19JHtrZXl9PSR7dmFsdWV9LGAsICcnKTtcclxuICAgIGlmIChfaXNJT1NTdGFuZGFsb25lKHVhKSAmJiB0YXJnZXQgIT09ICdfc2VsZicpIHtcclxuICAgICAgICBvcGVuQXNOZXdXaW5kb3dJT1ModXJsIHx8ICcnLCB0YXJnZXQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXV0aFBvcHVwKG51bGwpO1xyXG4gICAgfVxyXG4gICAgLy8gYWJvdXQ6YmxhbmsgZ2V0dGluZyBzYW5pdGl6ZWQgY2F1c2luZyBicm93c2VycyBsaWtlIElFL0VkZ2UgdG8gZGlzcGxheVxyXG4gICAgLy8gYnJpZWYgZXJyb3IgbWVzc2FnZSBiZWZvcmUgcmVkaXJlY3RpbmcgdG8gaGFuZGxlci5cclxuICAgIGNvbnN0IG5ld1dpbiA9IHdpbmRvdy5vcGVuKHVybCB8fCAnJywgdGFyZ2V0LCBvcHRpb25zU3RyaW5nKTtcclxuICAgIF9hc3NlcnQobmV3V2luLCBhdXRoLCBcInBvcHVwLWJsb2NrZWRcIiAvKiBQT1BVUF9CTE9DS0VEICovKTtcclxuICAgIC8vIEZsYWt5IG9uIElFIGVkZ2UsIGVuY2Fwc3VsYXRlIHdpdGggYSB0cnkgYW5kIGNhdGNoLlxyXG4gICAgdHJ5IHtcclxuICAgICAgICBuZXdXaW4uZm9jdXMoKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxuICAgIHJldHVybiBuZXcgQXV0aFBvcHVwKG5ld1dpbik7XHJcbn1cclxuZnVuY3Rpb24gb3BlbkFzTmV3V2luZG93SU9TKHVybCwgdGFyZ2V0KSB7XHJcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGVsLmhyZWYgPSB1cmw7XHJcbiAgICBlbC50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICBjb25zdCBjbGljayA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XHJcbiAgICBjbGljay5pbml0TW91c2VFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxLCBudWxsKTtcclxuICAgIGVsLmRpc3BhdGNoRXZlbnQoY2xpY2spO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBVUkwgZm9yIEF1dGhlbnRpY2F0aW9uIHdpZGdldCB3aGljaCB3aWxsIGluaXRpYXRlIHRoZSBPQXV0aCBoYW5kc2hha2VcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBXSURHRVRfUEFUSCA9ICdfXy9hdXRoL2hhbmRsZXInO1xyXG4vKipcclxuICogVVJMIGZvciBlbXVsYXRlZCBlbnZpcm9ubWVudFxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IEVNVUxBVE9SX1dJREdFVF9QQVRIID0gJ2VtdWxhdG9yL2F1dGgvaGFuZGxlcic7XHJcbmZ1bmN0aW9uIF9nZXRSZWRpcmVjdFVybChhdXRoLCBwcm92aWRlciwgYXV0aFR5cGUsIHJlZGlyZWN0VXJsLCBldmVudElkLCBhZGRpdGlvbmFsUGFyYW1zKSB7XHJcbiAgICBfYXNzZXJ0KGF1dGguY29uZmlnLmF1dGhEb21haW4sIGF1dGgsIFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIgLyogTUlTU0lOR19BVVRIX0RPTUFJTiAqLyk7XHJcbiAgICBfYXNzZXJ0KGF1dGguY29uZmlnLmFwaUtleSwgYXV0aCwgXCJpbnZhbGlkLWFwaS1rZXlcIiAvKiBJTlZBTElEX0FQSV9LRVkgKi8pO1xyXG4gICAgY29uc3QgcGFyYW1zID0ge1xyXG4gICAgICAgIGFwaUtleTogYXV0aC5jb25maWcuYXBpS2V5LFxyXG4gICAgICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcclxuICAgICAgICBhdXRoVHlwZSxcclxuICAgICAgICByZWRpcmVjdFVybCxcclxuICAgICAgICB2OiBTREtfVkVSU0lPTixcclxuICAgICAgICBldmVudElkXHJcbiAgICB9O1xyXG4gICAgaWYgKHByb3ZpZGVyIGluc3RhbmNlb2YgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKSB7XHJcbiAgICAgICAgcHJvdmlkZXIuc2V0RGVmYXVsdExhbmd1YWdlKGF1dGgubGFuZ3VhZ2VDb2RlKTtcclxuICAgICAgICBwYXJhbXMucHJvdmlkZXJJZCA9IHByb3ZpZGVyLnByb3ZpZGVySWQgfHwgJyc7XHJcbiAgICAgICAgaWYgKCFpc0VtcHR5KHByb3ZpZGVyLmdldEN1c3RvbVBhcmFtZXRlcnMoKSkpIHtcclxuICAgICAgICAgICAgcGFyYW1zLmN1c3RvbVBhcmFtZXRlcnMgPSBKU09OLnN0cmluZ2lmeShwcm92aWRlci5nZXRDdXN0b21QYXJhbWV0ZXJzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPIHNldCBhZGRpdGlvbmFsUGFyYW1zIGZyb20gdGhlIHByb3ZpZGVyIGFzIHdlbGw/XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYWRkaXRpb25hbFBhcmFtcyB8fCB7fSkpIHtcclxuICAgICAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvdmlkZXIgaW5zdGFuY2VvZiBCYXNlT0F1dGhQcm92aWRlcikge1xyXG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IHByb3ZpZGVyLmdldFNjb3BlcygpLmZpbHRlcihzY29wZSA9PiBzY29wZSAhPT0gJycpO1xyXG4gICAgICAgIGlmIChzY29wZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwYXJhbXMuc2NvcGVzID0gc2NvcGVzLmpvaW4oJywnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYXV0aC50ZW5hbnRJZCkge1xyXG4gICAgICAgIHBhcmFtcy50aWQgPSBhdXRoLnRlbmFudElkO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETzogbWF5YmUgc2V0IGVpZCBhcyBlbmRpcG9pbnRJZFxyXG4gICAgLy8gVE9ETzogbWF5YmUgc2V0IGZ3IGFzIEZyYW1ld29ya3Muam9pbihcIixcIilcclxuICAgIGNvbnN0IHBhcmFtc0RpY3QgPSBwYXJhbXM7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhwYXJhbXNEaWN0KSkge1xyXG4gICAgICAgIGlmIChwYXJhbXNEaWN0W2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkZWxldGUgcGFyYW1zRGljdFtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBgJHtnZXRIYW5kbGVyQmFzZShhdXRoKX0/JHtxdWVyeXN0cmluZyhwYXJhbXNEaWN0KS5zbGljZSgxKX1gO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhhbmRsZXJCYXNlKHsgY29uZmlnIH0pIHtcclxuICAgIGlmICghY29uZmlnLmVtdWxhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7Y29uZmlnLmF1dGhEb21haW59LyR7V0lER0VUX1BBVEh9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBfZW11bGF0b3JVcmwoY29uZmlnLCBFTVVMQVRPUl9XSURHRVRfUEFUSCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBzcGVjaWFsIHdlYiBzdG9yYWdlIGV2ZW50XHJcbiAqXHJcbiAqL1xyXG5jb25zdCBXRUJfU1RPUkFHRV9TVVBQT1JUX0tFWSA9ICd3ZWJTdG9yYWdlU3VwcG9ydCc7XHJcbmNsYXNzIEJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5pZnJhbWVzID0ge307XHJcbiAgICAgICAgdGhpcy5vcmlnaW5WYWxpZGF0aW9uUHJvbWlzZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdFBlcnNpc3RlbmNlID0gYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZTtcclxuICAgICAgICB0aGlzLl9jb21wbGV0ZVJlZGlyZWN0Rm4gPSBfZ2V0UmVkaXJlY3RSZXN1bHQ7XHJcbiAgICAgICAgdGhpcy5fb3ZlcnJpZGVSZWRpcmVjdFJlc3VsdCA9IF9vdmVycmlkZVJlZGlyZWN0UmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLy8gV3JhcHBpbmcgaW4gYXN5bmMgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgYXdhaXQgYW55d2hlcmUgaW4gb3JkZXJcclxuICAgIC8vIHRvIG1ha2Ugc3VyZSBlcnJvcnMgYXJlIHJhaXNlZCBhcyBwcm9taXNlIHJlamVjdGlvbnNcclxuICAgIGFzeW5jIF9vcGVuUG9wdXAoYXV0aCwgcHJvdmlkZXIsIGF1dGhUeXBlLCBldmVudElkKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGRlYnVnQXNzZXJ0KChfYSA9IHRoaXMuZXZlbnRNYW5hZ2Vyc1thdXRoLl9rZXkoKV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYW5hZ2VyLCAnX2luaXRpYWxpemUoKSBub3QgY2FsbGVkIGJlZm9yZSBfb3BlblBvcHVwKCknKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBfZ2V0UmVkaXJlY3RVcmwoYXV0aCwgcHJvdmlkZXIsIGF1dGhUeXBlLCBfZ2V0Q3VycmVudFVybCgpLCBldmVudElkKTtcclxuICAgICAgICByZXR1cm4gX29wZW4oYXV0aCwgdXJsLCBfZ2VuZXJhdGVFdmVudElkKCkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX29wZW5SZWRpcmVjdChhdXRoLCBwcm92aWRlciwgYXV0aFR5cGUsIGV2ZW50SWQpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLl9vcmlnaW5WYWxpZGF0aW9uKGF1dGgpO1xyXG4gICAgICAgIF9zZXRXaW5kb3dMb2NhdGlvbihfZ2V0UmVkaXJlY3RVcmwoYXV0aCwgcHJvdmlkZXIsIGF1dGhUeXBlLCBfZ2V0Q3VycmVudFVybCgpLCBldmVudElkKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHsgfSk7XHJcbiAgICB9XHJcbiAgICBfaW5pdGlhbGl6ZShhdXRoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXV0aC5fa2V5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRNYW5hZ2Vyc1trZXldKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbWFuYWdlciwgcHJvbWlzZSB9ID0gdGhpcy5ldmVudE1hbmFnZXJzW2tleV07XHJcbiAgICAgICAgICAgIGlmIChtYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1hbmFnZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVidWdBc3NlcnQocHJvbWlzZSwgJ0lmIG1hbmFnZXIgaXMgbm90IHNldCwgcHJvbWlzZSBzaG91bGQgYmUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmluaXRBbmRHZXRNYW5hZ2VyKGF1dGgpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2Vyc1trZXldID0geyBwcm9taXNlIH07XHJcbiAgICAgICAgLy8gSWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQsIHRoZSBrZXkgc2hvdWxkIGJlIHJlbW92ZWQgc28gdGhhdCB0aGVcclxuICAgICAgICAvLyBvcGVyYXRpb24gY2FuIGJlIHJldHJpZWQgbGF0ZXIuXHJcbiAgICAgICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50TWFuYWdlcnNba2V5XTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuICAgIGFzeW5jIGluaXRBbmRHZXRNYW5hZ2VyKGF1dGgpIHtcclxuICAgICAgICBjb25zdCBpZnJhbWUgPSBhd2FpdCBfb3BlbklmcmFtZShhdXRoKTtcclxuICAgICAgICBjb25zdCBtYW5hZ2VyID0gbmV3IEF1dGhFdmVudE1hbmFnZXIoYXV0aCk7XHJcbiAgICAgICAgaWZyYW1lLnJlZ2lzdGVyKCdhdXRoRXZlbnQnLCAoaWZyYW1lRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgX2Fzc2VydChpZnJhbWVFdmVudCA9PT0gbnVsbCB8fCBpZnJhbWVFdmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaWZyYW1lRXZlbnQuYXV0aEV2ZW50LCBhdXRoLCBcImludmFsaWQtYXV0aC1ldmVudFwiIC8qIElOVkFMSURfQVVUSF9FVkVOVCAqLyk7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IENvbnNpZGVyIHNwbGl0dGluZyByZWRpcmVjdCBhbmQgcG9wdXAgZXZlbnRzIGVhcmxpZXIgb25cclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlZCA9IG1hbmFnZXIub25FdmVudChpZnJhbWVFdmVudC5hdXRoRXZlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IGhhbmRsZWQgPyBcIkFDS1wiIC8qIEFDSyAqLyA6IFwiRVJST1JcIiAvKiBFUlJPUiAqLyB9O1xyXG4gICAgICAgIH0sIGdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVIpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2Vyc1thdXRoLl9rZXkoKV0gPSB7IG1hbmFnZXIgfTtcclxuICAgICAgICB0aGlzLmlmcmFtZXNbYXV0aC5fa2V5KCldID0gaWZyYW1lO1xyXG4gICAgICAgIHJldHVybiBtYW5hZ2VyO1xyXG4gICAgfVxyXG4gICAgX2lzSWZyYW1lV2ViU3RvcmFnZVN1cHBvcnRlZChhdXRoLCBjYikge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuaWZyYW1lc1thdXRoLl9rZXkoKV07XHJcbiAgICAgICAgaWZyYW1lLnNlbmQoV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVksIHsgdHlwZTogV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVkgfSwgcmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICBjb25zdCBpc1N1cHBvcnRlZCA9IChfYSA9IHJlc3VsdCA9PT0gbnVsbCB8fCByZXN1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3VsdFswXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW1dFQl9TVE9SQUdFX1NVUFBPUlRfS0VZXTtcclxuICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNiKCEhaXNTdXBwb3J0ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9mYWlsKGF1dGgsIFwiaW50ZXJuYWwtZXJyb3JcIiAvKiBJTlRFUk5BTF9FUlJPUiAqLyk7XHJcbiAgICAgICAgfSwgZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUik7XHJcbiAgICB9XHJcbiAgICBfb3JpZ2luVmFsaWRhdGlvbihhdXRoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXV0aC5fa2V5KCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9yaWdpblZhbGlkYXRpb25Qcm9taXNlc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV0gPSBfdmFsaWRhdGVPcmlnaW4oYXV0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpblZhbGlkYXRpb25Qcm9taXNlc1trZXldO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9zaG91bGRJbml0UHJvYWN0aXZlbHkoKSB7XHJcbiAgICAgICAgLy8gTW9iaWxlIGJyb3dzZXJzIGFuZCBTYWZhcmkgbmVlZCB0byBvcHRpbWlzdGljYWxseSBpbml0aWFsaXplXHJcbiAgICAgICAgcmV0dXJuIF9pc01vYmlsZUJyb3dzZXIoKSB8fCBfaXNTYWZhcmkoKSB8fCBfaXNJT1MoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0gc3VpdGFibGUgZm9yIGJyb3dzZXJcclxuICogYmFzZWQgYXBwbGljYXRpb25zLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyID0gQnJvd3NlclBvcHVwUmVkaXJlY3RSZXNvbHZlcjtcblxuY2xhc3MgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGZhY3RvcklkKSB7XHJcbiAgICAgICAgdGhpcy5mYWN0b3JJZCA9IGZhY3RvcklkO1xyXG4gICAgfVxyXG4gICAgX3Byb2Nlc3MoYXV0aCwgc2Vzc2lvbiwgZGlzcGxheU5hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKHNlc3Npb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiZW5yb2xsXCIgLyogRU5ST0xMICovOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmFsaXplRW5yb2xsKGF1dGgsIHNlc3Npb24uY3JlZGVudGlhbCwgZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlIFwic2lnbmluXCIgLyogU0lHTl9JTiAqLzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maW5hbGl6ZVNpZ25JbihhdXRoLCBzZXNzaW9uLmNyZWRlbnRpYWwpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlYnVnRmFpbCgndW5leHBlY3RlZCBNdWx0aUZhY3RvclNlc3Npb25UeXBlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiB7QGluaGVyaXRkb2MgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY2xhc3MgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwgZXh0ZW5kcyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY3JlZGVudGlhbCkge1xyXG4gICAgICAgIHN1cGVyKFwicGhvbmVcIiAvKiBQSE9ORSAqLyk7XHJcbiAgICAgICAgdGhpcy5jcmVkZW50aWFsID0gY3JlZGVudGlhbDtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHN0YXRpYyBfZnJvbUNyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwoY3JlZGVudGlhbCk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfZmluYWxpemVFbnJvbGwoYXV0aCwgaWRUb2tlbiwgZGlzcGxheU5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZmluYWxpemVFbnJvbGxQaG9uZU1mYShhdXRoLCB7XHJcbiAgICAgICAgICAgIGlkVG9rZW4sXHJcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IHRoaXMuY3JlZGVudGlhbC5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2ZpbmFsaXplU2lnbkluKGF1dGgsIG1mYVBlbmRpbmdDcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbmFsaXplU2lnbkluUGhvbmVNZmEoYXV0aCwge1xyXG4gICAgICAgICAgICBtZmFQZW5kaW5nQ3JlZGVudGlhbCxcclxuICAgICAgICAgICAgcGhvbmVWZXJpZmljYXRpb25JbmZvOiB0aGlzLmNyZWRlbnRpYWwuX21ha2VWZXJpZmljYXRpb25SZXF1ZXN0KClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYSB7QGxpbmsgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIFBob25lTXVsdGlGYWN0b3JHZW5lcmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvdmlkZXMgYSB7QGxpbmsgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn0gdG8gY29uZmlybSBvd25lcnNoaXAgb2YgdGhlIHBob25lIHNlY29uZCBmYWN0b3IuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBob25lQXV0aENyZWRlbnRpYWwgLSBBIGNyZWRlbnRpYWwgcHJvdmlkZWQgYnkge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWx9LlxyXG4gICAgICogQHJldHVybnMgQSB7QGxpbmsgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn0gd2hpY2ggY2FuIGJlIHVzZWQgd2l0aFxyXG4gICAgICoge0BsaW5rIE11bHRpRmFjdG9yUmVzb2x2ZXIucmVzb2x2ZVNpZ25Jbn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc2VydGlvbihjcmVkZW50aWFsKSB7XHJcbiAgICAgICAgcmV0dXJuIFBob25lTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsLl9mcm9tQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHBob25lIHNlY29uZCBmYWN0b3I6IGBwaG9uZWAuXHJcbiAqL1xyXG5QaG9uZU11bHRpRmFjdG9yR2VuZXJhdG9yLkZBQ1RPUl9JRCA9ICdwaG9uZSc7XG5cbnZhciBuYW1lID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xudmFyIHZlcnNpb24gPSBcIjAuMjAuMTBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgQXV0aEludGVyb3Age1xyXG4gICAgY29uc3RydWN0b3IoYXV0aCkge1xyXG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbExpc3RlbmVycyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGdldFVpZCgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdGhpcy5hc3NlcnRBdXRoQ29uZmlndXJlZCgpO1xyXG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5hdXRoLmN1cnJlbnRVc2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudWlkKSB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0VG9rZW4oZm9yY2VSZWZyZXNoKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnRBdXRoQ29uZmlndXJlZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXV0aC5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgICAgIGlmICghdGhpcy5hdXRoLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuYXV0aC5jdXJyZW50VXNlci5nZXRJZFRva2VuKGZvcmNlUmVmcmVzaCk7XHJcbiAgICAgICAgcmV0dXJuIHsgYWNjZXNzVG9rZW4gfTtcclxuICAgIH1cclxuICAgIGFkZEF1dGhUb2tlbkxpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnRBdXRoQ29uZmlndXJlZCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmludGVybmFsTGlzdGVuZXJzLmhhcyhsaXN0ZW5lcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMuYXV0aC5vbklkVG9rZW5DaGFuZ2VkKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKCgoX2EgPSB1c2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuKSB8fCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmludGVybmFsTGlzdGVuZXJzLnNldChsaXN0ZW5lciwgdW5zdWJzY3JpYmUpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUHJvYWN0aXZlUmVmcmVzaCgpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIobGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLmFzc2VydEF1dGhDb25maWd1cmVkKCk7XHJcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLmludGVybmFsTGlzdGVuZXJzLmdldChsaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKCF1bnN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUHJvYWN0aXZlUmVmcmVzaCgpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXV0aENvbmZpZ3VyZWQoKSB7XHJcbiAgICAgICAgX2Fzc2VydCh0aGlzLmF1dGguX2luaXRpYWxpemF0aW9uUHJvbWlzZSwgXCJkZXBlbmRlbnQtc2RrLWluaXRpYWxpemVkLWJlZm9yZS1hdXRoXCIgLyogREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIICovKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVByb2FjdGl2ZVJlZnJlc2goKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRoLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aC5fc3RvcFByb2FjdGl2ZVJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0VmVyc2lvbkZvclBsYXRmb3JtKGNsaWVudFBsYXRmb3JtKSB7XHJcbiAgICBzd2l0Y2ggKGNsaWVudFBsYXRmb3JtKSB7XHJcbiAgICAgICAgY2FzZSBcIk5vZGVcIiAvKiBOT0RFICovOlxyXG4gICAgICAgICAgICByZXR1cm4gJ25vZGUnO1xyXG4gICAgICAgIGNhc2UgXCJSZWFjdE5hdGl2ZVwiIC8qIFJFQUNUX05BVElWRSAqLzpcclxuICAgICAgICAgICAgcmV0dXJuICdybic7XHJcbiAgICAgICAgY2FzZSBcIldvcmtlclwiIC8qIFdPUktFUiAqLzpcclxuICAgICAgICAgICAgcmV0dXJuICd3ZWJ3b3JrZXInO1xyXG4gICAgICAgIGNhc2UgXCJDb3Jkb3ZhXCIgLyogQ09SRE9WQSAqLzpcclxuICAgICAgICAgICAgcmV0dXJuICdjb3Jkb3ZhJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJBdXRoKGNsaWVudFBsYXRmb3JtKSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChcImF1dGhcIiAvKiBBVVRIICovLCAoY29udGFpbmVyLCB7IG9wdGlvbnM6IGRlcHMgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdoZWFydGJlYXQnKTtcclxuICAgICAgICBjb25zdCB7IGFwaUtleSwgYXV0aERvbWFpbiB9ID0gYXBwLm9wdGlvbnM7XHJcbiAgICAgICAgcmV0dXJuICgoYXBwLCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIpID0+IHtcclxuICAgICAgICAgICAgX2Fzc2VydChhcGlLZXkgJiYgIWFwaUtleS5pbmNsdWRlcygnOicpLCBcImludmFsaWQtYXBpLWtleVwiIC8qIElOVkFMSURfQVBJX0tFWSAqLywgeyBhcHBOYW1lOiBhcHAubmFtZSB9KTtcclxuICAgICAgICAgICAgLy8gQXV0aCBkb21haW4gaXMgb3B0aW9uYWwgaWYgSWRQIHNpZ24gaW4gaXNuJ3QgYmVpbmcgdXNlZFxyXG4gICAgICAgICAgICBfYXNzZXJ0KCEoYXV0aERvbWFpbiA9PT0gbnVsbCB8fCBhdXRoRG9tYWluID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhdXRoRG9tYWluLmluY2x1ZGVzKCc6JykpLCBcImFyZ3VtZW50LWVycm9yXCIgLyogQVJHVU1FTlRfRVJST1IgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWU6IGFwcC5uYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBhcGlLZXksXHJcbiAgICAgICAgICAgICAgICBhdXRoRG9tYWluLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50UGxhdGZvcm0sXHJcbiAgICAgICAgICAgICAgICBhcGlIb3N0OiBcImlkZW50aXR5dG9vbGtpdC5nb29nbGVhcGlzLmNvbVwiIC8qIEFQSV9IT1NUICovLFxyXG4gICAgICAgICAgICAgICAgdG9rZW5BcGlIb3N0OiBcInNlY3VyZXRva2VuLmdvb2dsZWFwaXMuY29tXCIgLyogVE9LRU5fQVBJX0hPU1QgKi8sXHJcbiAgICAgICAgICAgICAgICBhcGlTY2hlbWU6IFwiaHR0cHNcIiAvKiBBUElfU0NIRU1FICovLFxyXG4gICAgICAgICAgICAgICAgc2RrQ2xpZW50VmVyc2lvbjogX2dldENsaWVudFZlcnNpb24oY2xpZW50UGxhdGZvcm0pXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGhJbnN0YW5jZSA9IG5ldyBBdXRoSW1wbChhcHAsIGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlciwgY29uZmlnKTtcclxuICAgICAgICAgICAgX2luaXRpYWxpemVBdXRoSW5zdGFuY2UoYXV0aEluc3RhbmNlLCBkZXBzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGF1dGhJbnN0YW5jZTtcclxuICAgICAgICB9KShhcHAsIGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlcik7XHJcbiAgICB9LCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLylcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBdXRoIGNhbiBvbmx5IGJlIGluaXRpYWxpemVkIGJ5IGV4cGxpY2l0bHkgY2FsbGluZyBnZXRBdXRoKCkgb3IgaW5pdGlhbGl6ZUF1dGgoKVxyXG4gICAgICAgICAqIEZvciB3aHkgd2UgZG8gdGhpcywgU2VlIGdvL2ZpcmViYXNlLW5leHQtYXV0aC1pbml0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLnNldEluc3RhbnRpYXRpb25Nb2RlKFwiRVhQTElDSVRcIiAvKiBFWFBMSUNJVCAqLylcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCZWNhdXNlIGFsbCBmaXJlYmFzZSBwcm9kdWN0cyB0aGF0IGRlcGVuZCBvbiBhdXRoIGRlcGVuZCBvbiBhdXRoLWludGVybmFsIGRpcmVjdGx5LFxyXG4gICAgICAgICAqIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSBhdXRoLWludGVybmFsIGFmdGVyIGF1dGggaXMgaW5pdGlhbGl6ZWQgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gb3RoZXIgZmlyZWJhc2UgcHJvZHVjdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLnNldEluc3RhbmNlQ3JlYXRlZENhbGxiYWNrKChjb250YWluZXIsIF9pbnN0YW5jZUlkZW50aWZpZXIsIF9pbnN0YW5jZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGF1dGhJbnRlcm5hbFByb3ZpZGVyID0gY29udGFpbmVyLmdldFByb3ZpZGVyKFwiYXV0aC1pbnRlcm5hbFwiIC8qIEFVVEhfSU5URVJOQUwgKi8pO1xyXG4gICAgICAgIGF1dGhJbnRlcm5hbFByb3ZpZGVyLmluaXRpYWxpemUoKTtcclxuICAgIH0pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KFwiYXV0aC1pbnRlcm5hbFwiIC8qIEFVVEhfSU5URVJOQUwgKi8sIGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgY29uc3QgYXV0aCA9IF9jYXN0QXV0aChjb250YWluZXIuZ2V0UHJvdmlkZXIoXCJhdXRoXCIgLyogQVVUSCAqLykuZ2V0SW1tZWRpYXRlKCkpO1xyXG4gICAgICAgIHJldHVybiAoYXV0aCA9PiBuZXcgQXV0aEludGVyb3AoYXV0aCkpKGF1dGgpO1xyXG4gICAgfSwgXCJQUklWQVRFXCIgLyogUFJJVkFURSAqLykuc2V0SW5zdGFudGlhdGlvbk1vZGUoXCJFWFBMSUNJVFwiIC8qIEVYUExJQ0lUICovKSk7XHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgZ2V0VmVyc2lvbkZvclBsYXRmb3JtKGNsaWVudFBsYXRmb3JtKSk7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9JRF9UT0tFTl9NQVhfQUdFID0gNSAqIDYwO1xyXG5jb25zdCBhdXRoSWRUb2tlbk1heEFnZSA9IGdldEV4cGVyaW1lbnRhbFNldHRpbmcoJ2F1dGhJZFRva2VuTWF4QWdlJykgfHwgREVGQVVMVF9JRF9UT0tFTl9NQVhfQUdFO1xyXG5sZXQgbGFzdFBvc3RlZElkVG9rZW4gPSBudWxsO1xyXG5jb25zdCBtaW50Q29va2llRmFjdG9yeSA9ICh1cmwpID0+IGFzeW5jICh1c2VyKSA9PiB7XHJcbiAgICBjb25zdCBpZFRva2VuUmVzdWx0ID0gdXNlciAmJiAoYXdhaXQgdXNlci5nZXRJZFRva2VuUmVzdWx0KCkpO1xyXG4gICAgY29uc3QgaWRUb2tlbkFnZSA9IGlkVG9rZW5SZXN1bHQgJiZcclxuICAgICAgICAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBEYXRlLnBhcnNlKGlkVG9rZW5SZXN1bHQuaXNzdWVkQXRUaW1lKSkgLyAxMDAwO1xyXG4gICAgaWYgKGlkVG9rZW5BZ2UgJiYgaWRUb2tlbkFnZSA+IGF1dGhJZFRva2VuTWF4QWdlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gU3BlY2lmaWNhbGx5IHRyaXAgbnVsbCA9PiB1bmRlZmluZWQgd2hlbiBsb2dnZWQgb3V0LCB0byBkZWxldGUgYW55IGV4aXN0aW5nIGNvb2tpZVxyXG4gICAgY29uc3QgaWRUb2tlbiA9IGlkVG9rZW5SZXN1bHQgPT09IG51bGwgfHwgaWRUb2tlblJlc3VsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaWRUb2tlblJlc3VsdC50b2tlbjtcclxuICAgIGlmIChsYXN0UG9zdGVkSWRUb2tlbiA9PT0gaWRUb2tlbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxhc3RQb3N0ZWRJZFRva2VuID0gaWRUb2tlbjtcclxuICAgIGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogaWRUb2tlbiA/ICdQT1NUJyA6ICdERUxFVEUnLFxyXG4gICAgICAgIGhlYWRlcnM6IGlkVG9rZW5cclxuICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtpZFRva2VufWBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IHt9XHJcbiAgICB9KTtcclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIEF1dGggaW5zdGFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0uXHJcbiAqIElmIG5vIGluc3RhbmNlIGV4aXN0cywgaW5pdGlhbGl6ZXMgYW4gQXV0aCBpbnN0YW5jZSB3aXRoIHBsYXRmb3JtLXNwZWNpZmljIGRlZmF1bHQgZGVwZW5kZW5jaWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIEZpcmViYXNlIEFwcC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXV0aChhcHAgPSBnZXRBcHAoKSkge1xyXG4gICAgY29uc3QgcHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnYXV0aCcpO1xyXG4gICAgaWYgKHByb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGF1dGggPSBpbml0aWFsaXplQXV0aChhcHAsIHtcclxuICAgICAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IGJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIsXHJcbiAgICAgICAgcGVyc2lzdGVuY2U6IFtcclxuICAgICAgICAgICAgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSxcclxuICAgICAgICAgICAgYnJvd3NlckxvY2FsUGVyc2lzdGVuY2UsXHJcbiAgICAgICAgICAgIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2VcclxuICAgICAgICBdXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGF1dGhUb2tlblN5bmNVcmwgPSBnZXRFeHBlcmltZW50YWxTZXR0aW5nKCdhdXRoVG9rZW5TeW5jVVJMJyk7XHJcbiAgICBpZiAoYXV0aFRva2VuU3luY1VybCkge1xyXG4gICAgICAgIGNvbnN0IG1pbnRDb29raWUgPSBtaW50Q29va2llRmFjdG9yeShhdXRoVG9rZW5TeW5jVXJsKTtcclxuICAgICAgICBiZWZvcmVBdXRoU3RhdGVDaGFuZ2VkKGF1dGgsIG1pbnRDb29raWUsICgpID0+IG1pbnRDb29raWUoYXV0aC5jdXJyZW50VXNlcikpO1xyXG4gICAgICAgIG9uSWRUb2tlbkNoYW5nZWQoYXV0aCwgdXNlciA9PiBtaW50Q29va2llKHVzZXIpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGF1dGhFbXVsYXRvckhvc3QgPSBnZXREZWZhdWx0RW11bGF0b3JIb3N0KCdhdXRoJyk7XHJcbiAgICBpZiAoYXV0aEVtdWxhdG9ySG9zdCkge1xyXG4gICAgICAgIGNvbm5lY3RBdXRoRW11bGF0b3IoYXV0aCwgYGh0dHA6Ly8ke2F1dGhFbXVsYXRvckhvc3R9YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXV0aDtcclxufVxyXG5yZWdpc3RlckF1dGgoXCJCcm93c2VyXCIgLyogQlJPV1NFUiAqLyk7XG5cbmV4cG9ydCB7IHNpZ25JbldpdGhDdXN0b21Ub2tlbiBhcyAkLCBBY3Rpb25Db2RlT3BlcmF0aW9uIGFzIEEsIGRlYnVnRXJyb3JNYXAgYXMgQiwgcHJvZEVycm9yTWFwIGFzIEMsIEFVVEhfRVJST1JfQ09ERVNfTUFQX0RPX05PVF9VU0VfSU5URVJOQUxMWSBhcyBELCBpbml0aWFsaXplQXV0aCBhcyBFLCBGYWN0b3JJZCBhcyBGLCBjb25uZWN0QXV0aEVtdWxhdG9yIGFzIEcsIEF1dGhDcmVkZW50aWFsIGFzIEgsIEVtYWlsQXV0aENyZWRlbnRpYWwgYXMgSSwgT0F1dGhDcmVkZW50aWFsIGFzIEosIFBob25lQXV0aENyZWRlbnRpYWwgYXMgSywgaW5NZW1vcnlQZXJzaXN0ZW5jZSBhcyBMLCBFbWFpbEF1dGhQcm92aWRlciBhcyBNLCBGYWNlYm9va0F1dGhQcm92aWRlciBhcyBOLCBPcGVyYXRpb25UeXBlIGFzIE8sIFBob25lQXV0aFByb3ZpZGVyIGFzIFAsIEdvb2dsZUF1dGhQcm92aWRlciBhcyBRLCBSZWNhcHRjaGFWZXJpZmllciBhcyBSLCBTaWduSW5NZXRob2QgYXMgUywgR2l0aHViQXV0aFByb3ZpZGVyIGFzIFQsIE9BdXRoUHJvdmlkZXIgYXMgVSwgU0FNTEF1dGhQcm92aWRlciBhcyBWLCBUd2l0dGVyQXV0aFByb3ZpZGVyIGFzIFcsIHNpZ25JbkFub255bW91c2x5IGFzIFgsIHNpZ25JbldpdGhDcmVkZW50aWFsIGFzIFksIGxpbmtXaXRoQ3JlZGVudGlhbCBhcyBaLCByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsIGFzIF8sIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UgYXMgYSwgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCBhcyBhMCwgY29uZmlybVBhc3N3b3JkUmVzZXQgYXMgYTEsIGFwcGx5QWN0aW9uQ29kZSBhcyBhMiwgY2hlY2tBY3Rpb25Db2RlIGFzIGEzLCB2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZSBhcyBhNCwgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkIGFzIGE1LCBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCBhcyBhNiwgc2VuZFNpZ25JbkxpbmtUb0VtYWlsIGFzIGE3LCBpc1NpZ25JbldpdGhFbWFpbExpbmsgYXMgYTgsIHNpZ25JbldpdGhFbWFpbExpbmsgYXMgYTksIEF1dGhFdmVudE1hbmFnZXIgYXMgYUEsIF9nZXRSZWRpcmVjdFJlc3VsdCBhcyBhQiwgX292ZXJyaWRlUmVkaXJlY3RSZXN1bHQgYXMgYUMsIF9jbGVhclJlZGlyZWN0T3V0Y29tZXMgYXMgYUQsIF9jYXN0QXV0aCBhcyBhRSwgVXNlckltcGwgYXMgYUYsIEF1dGhJbXBsIGFzIGFHLCBfZ2V0Q2xpZW50VmVyc2lvbiBhcyBhSCwgX2dlbmVyYXRlRXZlbnRJZCBhcyBhSSwgQXV0aFBvcHVwIGFzIGFKLCBGZXRjaFByb3ZpZGVyIGFzIGFLLCBTQU1MQXV0aENyZWRlbnRpYWwgYXMgYUwsIGZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsIGFzIGFhLCBzZW5kRW1haWxWZXJpZmljYXRpb24gYXMgYWIsIHZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsIGFzIGFjLCBBY3Rpb25Db2RlVVJMIGFzIGFkLCBwYXJzZUFjdGlvbkNvZGVVUkwgYXMgYWUsIHVwZGF0ZVByb2ZpbGUgYXMgYWYsIHVwZGF0ZUVtYWlsIGFzIGFnLCB1cGRhdGVQYXNzd29yZCBhcyBhaCwgZ2V0SWRUb2tlbiBhcyBhaSwgZ2V0SWRUb2tlblJlc3VsdCBhcyBhaiwgdW5saW5rIGFzIGFrLCBnZXRBZGRpdGlvbmFsVXNlckluZm8gYXMgYWwsIHJlbG9hZCBhcyBhbSwgZ2V0TXVsdGlGYWN0b3JSZXNvbHZlciBhcyBhbiwgbXVsdGlGYWN0b3IgYXMgYW8sIF9pc0lPUzdPcjggYXMgYXAsIGRlYnVnQXNzZXJ0IGFzIGFxLCBfaXNJT1MgYXMgYXIsIF9pc0FuZHJvaWQgYXMgYXMsIF9mYWlsIGFzIGF0LCBfZ2V0UmVkaXJlY3RVcmwgYXMgYXUsIF9nZXRQcm9qZWN0Q29uZmlnIGFzIGF2LCBfY3JlYXRlRXJyb3IgYXMgYXcsIF9hc3NlcnQgYXMgYXgsIF9nZXRJbnN0YW5jZSBhcyBheSwgX3BlcnNpc3RlbmNlS2V5TmFtZSBhcyBheiwgYnJvd3NlckxvY2FsUGVyc2lzdGVuY2UgYXMgYiwgc2lnbkluV2l0aFBvcHVwIGFzIGMsIGxpbmtXaXRoUG9wdXAgYXMgZCwgcmVhdXRoZW50aWNhdGVXaXRoUG9wdXAgYXMgZSwgc2lnbkluV2l0aFJlZGlyZWN0IGFzIGYsIGxpbmtXaXRoUmVkaXJlY3QgYXMgZywgcmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3QgYXMgaCwgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSBhcyBpLCBnZXRSZWRpcmVjdFJlc3VsdCBhcyBqLCBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyIGFzIGssIGxpbmtXaXRoUGhvbmVOdW1iZXIgYXMgbCwgUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvciBhcyBtLCBnZXRBdXRoIGFzIG4sIFByb3ZpZGVySWQgYXMgbywgc2V0UGVyc2lzdGVuY2UgYXMgcCwgb25JZFRva2VuQ2hhbmdlZCBhcyBxLCByZWF1dGhlbnRpY2F0ZVdpdGhQaG9uZU51bWJlciBhcyByLCBzaWduSW5XaXRoUGhvbmVOdW1iZXIgYXMgcywgYmVmb3JlQXV0aFN0YXRlQ2hhbmdlZCBhcyB0LCB1cGRhdGVQaG9uZU51bWJlciBhcyB1LCBvbkF1dGhTdGF0ZUNoYW5nZWQgYXMgdiwgdXNlRGV2aWNlTGFuZ3VhZ2UgYXMgdywgdXBkYXRlQ3VycmVudFVzZXIgYXMgeCwgc2lnbk91dCBhcyB5LCBkZWxldGVVc2VyIGFzIHogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LTkwOWJkOGY0LmpzLm1hcFxuIiwidmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBlc20gPSB7fTtcblxuLypcblxuIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG5cbnZhciBrLGdvb2c9Z29vZ3x8e30sbD1jb21tb25qc0dsb2JhbHx8c2VsZjtmdW5jdGlvbiBhYSgpe31mdW5jdGlvbiBiYShhKXt2YXIgYj10eXBlb2YgYTtiPVwib2JqZWN0XCIhPWI/YjphP0FycmF5LmlzQXJyYXkoYSk/XCJhcnJheVwiOmI6XCJudWxsXCI7cmV0dXJuIFwiYXJyYXlcIj09Ynx8XCJvYmplY3RcIj09YiYmXCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RofWZ1bmN0aW9uIHAoYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuIFwib2JqZWN0XCI9PWImJm51bGwhPWF8fFwiZnVuY3Rpb25cIj09Yn1mdW5jdGlvbiBjYShhKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsZGEpJiZhW2RhXXx8KGFbZGFdPSsrZWEpfXZhciBkYT1cImNsb3N1cmVfdWlkX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApLGVhPTA7ZnVuY3Rpb24gZmEoYSxiLGMpe3JldHVybiBhLmNhbGwuYXBwbHkoYS5iaW5kLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBoYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGUsZCk7cmV0dXJuIGEuYXBwbHkoYixlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBxKGEsYixjKXtGdW5jdGlvbi5wcm90b3R5cGUuYmluZCYmLTEhPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpP3E9ZmE6cT1oYTtyZXR1cm4gcS5hcHBseShudWxsLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBpYShhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1jLnNsaWNlKCk7ZC5wdXNoLmFwcGx5KGQsYXJndW1lbnRzKTtyZXR1cm4gYS5hcHBseSh0aGlzLGQpfX1mdW5jdGlvbiB0KGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLlg9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLldiPWZ1bmN0aW9uKGQsZSxmKXtmb3IodmFyIGg9QXJyYXkoYXJndW1lbnRzLmxlbmd0aC0yKSxuPTI7bjxhcmd1bWVudHMubGVuZ3RoO24rKyloW24tMl09YXJndW1lbnRzW25dO3JldHVybiBiLnByb3RvdHlwZVtlXS5hcHBseShkLGgpfTt9ZnVuY3Rpb24gdigpe3RoaXMucz10aGlzLnM7dGhpcy5vPXRoaXMubzt9dmFyIGphPTAsa2E9e307di5wcm90b3R5cGUucz0hMTt2LnByb3RvdHlwZS5uYT1mdW5jdGlvbigpe2lmKCF0aGlzLnMmJih0aGlzLnM9ITAsdGhpcy5NKCksMCE9amEpKXt2YXIgYT1jYSh0aGlzKTtkZWxldGUga2FbYV07fX07di5wcm90b3R5cGUuTT1mdW5jdGlvbigpe2lmKHRoaXMubylmb3IoO3RoaXMuby5sZW5ndGg7KXRoaXMuby5zaGlmdCgpKCk7fTtjb25zdCBsYT1BcnJheS5wcm90b3R5cGUuaW5kZXhPZj9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gXCJzdHJpbmdcIiE9PXR5cGVvZiBifHwxIT1iLmxlbmd0aD8tMTphLmluZGV4T2YoYiwwKTtmb3IobGV0IGM9MDtjPGEubGVuZ3RoO2MrKylpZihjIGluIGEmJmFbY109PT1iKXJldHVybiBjO3JldHVybiAtMX07ZnVuY3Rpb24gbWEoYSl7Y29uc3QgYj1hLmxlbmd0aDtpZigwPGIpe2NvbnN0IGM9QXJyYXkoYik7Zm9yKGxldCBkPTA7ZDxiO2QrKyljW2RdPWFbZF07cmV0dXJuIGN9cmV0dXJuIFtdfVxuZnVuY3Rpb24gbmEoYSxiKXtmb3IobGV0IGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKXtjb25zdCBkPWFyZ3VtZW50c1tjXTtpZihiYShkKSl7Y29uc3QgZT1hLmxlbmd0aHx8MCxmPWQubGVuZ3RofHwwO2EubGVuZ3RoPWUrZjtmb3IobGV0IGg9MDtoPGY7aCsrKWFbZStoXT1kW2hdO31lbHNlIGEucHVzaChkKTt9fWZ1bmN0aW9uIHcoYSxiKXt0aGlzLnR5cGU9YTt0aGlzLmc9dGhpcy50YXJnZXQ9Yjt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITE7fXcucHJvdG90eXBlLmg9ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7fTt2YXIgb2E9ZnVuY3Rpb24oKXtpZighbC5hZGRFdmVudExpc3RlbmVyfHwhT2JqZWN0LmRlZmluZVByb3BlcnR5KXJldHVybiAhMTt2YXIgYT0hMSxiPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7YT0hMDt9fSk7dHJ5e2wuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixhYSxiKSxsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsYWEsYik7fWNhdGNoKGMpe31yZXR1cm4gYX0oKTtmdW5jdGlvbiBwYShhKXtyZXR1cm4gL15bXFxzXFx4YTBdKiQvLnRlc3QoYSl9dmFyIHFhPVN0cmluZy5wcm90b3R5cGUudHJpbT9mdW5jdGlvbihhKXtyZXR1cm4gYS50cmltKCl9OmZ1bmN0aW9uKGEpe3JldHVybiAvXltcXHNcXHhhMF0qKFtcXHNcXFNdKj8pW1xcc1xceGEwXSokLy5leGVjKGEpWzFdfTtmdW5jdGlvbiByYShhLGIpe3JldHVybiBhPGI/LTE6YT5iPzE6MH1mdW5jdGlvbiBzYSgpe3ZhciBhPWwubmF2aWdhdG9yO3JldHVybiBhJiYoYT1hLnVzZXJBZ2VudCk/YTpcIlwifWZ1bmN0aW9uIHgoYSl7cmV0dXJuIC0xIT1zYSgpLmluZGV4T2YoYSl9ZnVuY3Rpb24gdGEoYSl7dGFbXCIgXCJdKGEpO3JldHVybiBhfXRhW1wiIFwiXT1hYTtmdW5jdGlvbiB1YShhKXt2YXIgYj12YTtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsOSk/Yls5XTpiWzldPWEoOSl9dmFyIHdhPXgoXCJPcGVyYVwiKSx5PXgoXCJUcmlkZW50XCIpfHx4KFwiTVNJRVwiKSx4YT14KFwiRWRnZVwiKSx5YT14YXx8eSx6YT14KFwiR2Vja29cIikmJiEoLTEhPXNhKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2Via2l0XCIpJiYheChcIkVkZ2VcIikpJiYhKHgoXCJUcmlkZW50XCIpfHx4KFwiTVNJRVwiKSkmJiF4KFwiRWRnZVwiKSxBYT0tMSE9c2EoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ3ZWJraXRcIikmJiF4KFwiRWRnZVwiKTtmdW5jdGlvbiBCYSgpe3ZhciBhPWwuZG9jdW1lbnQ7cmV0dXJuIGE/YS5kb2N1bWVudE1vZGU6dm9pZCAwfXZhciBFYTtcbmE6e3ZhciBGYT1cIlwiLEdhPWZ1bmN0aW9uKCl7dmFyIGE9c2EoKTtpZih6YSlyZXR1cm4gL3J2OihbXlxcKTtdKykoXFwpfDspLy5leGVjKGEpO2lmKHhhKXJldHVybiAvRWRnZVxcLyhbXFxkXFwuXSspLy5leGVjKGEpO2lmKHkpcmV0dXJuIC9cXGIoPzpNU0lFfHJ2KVs6IF0oW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTtpZihBYSlyZXR1cm4gL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZih3YSlyZXR1cm4gLyg/OlZlcnNpb24pWyBcXC9dPyhcXFMrKS8uZXhlYyhhKX0oKTtHYSYmKEZhPUdhP0dhWzFdOlwiXCIpO2lmKHkpe3ZhciBIYT1CYSgpO2lmKG51bGwhPUhhJiZIYT5wYXJzZUZsb2F0KEZhKSl7RWE9U3RyaW5nKEhhKTticmVhayBhfX1FYT1GYTt9dmFyIHZhPXt9O1xuZnVuY3Rpb24gSWEoKXtyZXR1cm4gdWEoZnVuY3Rpb24oKXtsZXQgYT0wO2NvbnN0IGI9cWEoU3RyaW5nKEVhKSkuc3BsaXQoXCIuXCIpLGM9cWEoXCI5XCIpLnNwbGl0KFwiLlwiKSxkPU1hdGgubWF4KGIubGVuZ3RoLGMubGVuZ3RoKTtmb3IobGV0IGg9MDswPT1hJiZoPGQ7aCsrKXt2YXIgZT1iW2hdfHxcIlwiLGY9Y1toXXx8XCJcIjtkb3tlPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGUpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07Zj0vKFxcZCopKFxcRCopKC4qKS8uZXhlYyhmKXx8W1wiXCIsXCJcIixcIlwiLFwiXCJdO2lmKDA9PWVbMF0ubGVuZ3RoJiYwPT1mWzBdLmxlbmd0aClicmVhazthPXJhKDA9PWVbMV0ubGVuZ3RoPzA6cGFyc2VJbnQoZVsxXSwxMCksMD09ZlsxXS5sZW5ndGg/MDpwYXJzZUludChmWzFdLDEwKSl8fHJhKDA9PWVbMl0ubGVuZ3RoLDA9PWZbMl0ubGVuZ3RoKXx8cmEoZVsyXSxmWzJdKTtlPWVbM107Zj1mWzNdO313aGlsZSgwPT1hKX1yZXR1cm4gMDw9YX0pfXZhciBKYTtcbmlmKGwuZG9jdW1lbnQmJnkpe3ZhciBLYT1CYSgpO0phPUthP0thOnBhcnNlSW50KEVhLDEwKXx8dm9pZCAwO31lbHNlIEphPXZvaWQgMDt2YXIgTGE9SmE7ZnVuY3Rpb24geihhLGIpe3cuY2FsbCh0aGlzLGE/YS50eXBlOlwiXCIpO3RoaXMucmVsYXRlZFRhcmdldD10aGlzLmc9dGhpcy50YXJnZXQ9bnVsbDt0aGlzLmJ1dHRvbj10aGlzLnNjcmVlblk9dGhpcy5zY3JlZW5YPXRoaXMuY2xpZW50WT10aGlzLmNsaWVudFg9MDt0aGlzLmtleT1cIlwiO3RoaXMubWV0YUtleT10aGlzLnNoaWZ0S2V5PXRoaXMuYWx0S2V5PXRoaXMuY3RybEtleT0hMTt0aGlzLnN0YXRlPW51bGw7dGhpcy5wb2ludGVySWQ9MDt0aGlzLnBvaW50ZXJUeXBlPVwiXCI7dGhpcy5pPW51bGw7aWYoYSl7dmFyIGM9dGhpcy50eXBlPWEudHlwZSxkPWEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2EuY2hhbmdlZFRvdWNoZXNbMF06bnVsbDt0aGlzLnRhcmdldD1hLnRhcmdldHx8YS5zcmNFbGVtZW50O3RoaXMuZz1iO2lmKGI9YS5yZWxhdGVkVGFyZ2V0KXtpZih6YSl7YTp7dHJ5e3RhKGIubm9kZU5hbWUpO3ZhciBlPSEwO2JyZWFrIGF9Y2F0Y2goZil7fWU9XG4hMTt9ZXx8KGI9bnVsbCk7fX1lbHNlIFwibW91c2VvdmVyXCI9PWM/Yj1hLmZyb21FbGVtZW50OlwibW91c2VvdXRcIj09YyYmKGI9YS50b0VsZW1lbnQpO3RoaXMucmVsYXRlZFRhcmdldD1iO2Q/KHRoaXMuY2xpZW50WD12b2lkIDAhPT1kLmNsaWVudFg/ZC5jbGllbnRYOmQucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWQuY2xpZW50WT9kLmNsaWVudFk6ZC5wYWdlWSx0aGlzLnNjcmVlblg9ZC5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1kLnNjcmVlbll8fDApOih0aGlzLmNsaWVudFg9dm9pZCAwIT09YS5jbGllbnRYP2EuY2xpZW50WDphLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1hLmNsaWVudFk/YS5jbGllbnRZOmEucGFnZVksdGhpcy5zY3JlZW5YPWEuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9YS5zY3JlZW5ZfHwwKTt0aGlzLmJ1dHRvbj1hLmJ1dHRvbjt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmN0cmxLZXk9YS5jdHJsS2V5O3RoaXMuYWx0S2V5PWEuYWx0S2V5O3RoaXMuc2hpZnRLZXk9XG5hLnNoaWZ0S2V5O3RoaXMubWV0YUtleT1hLm1ldGFLZXk7dGhpcy5wb2ludGVySWQ9YS5wb2ludGVySWR8fDA7dGhpcy5wb2ludGVyVHlwZT1cInN0cmluZ1wiPT09dHlwZW9mIGEucG9pbnRlclR5cGU/YS5wb2ludGVyVHlwZTpNYVthLnBvaW50ZXJUeXBlXXx8XCJcIjt0aGlzLnN0YXRlPWEuc3RhdGU7dGhpcy5pPWE7YS5kZWZhdWx0UHJldmVudGVkJiZ6LlguaC5jYWxsKHRoaXMpO319dCh6LHcpO3ZhciBNYT17MjpcInRvdWNoXCIsMzpcInBlblwiLDQ6XCJtb3VzZVwifTt6LnByb3RvdHlwZS5oPWZ1bmN0aW9uKCl7ei5YLmguY2FsbCh0aGlzKTt2YXIgYT10aGlzLmk7YS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6YS5yZXR1cm5WYWx1ZT0hMTt9O3ZhciBBPVwiY2xvc3VyZV9saXN0ZW5hYmxlX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKTt2YXIgTmE9MDtmdW5jdGlvbiBPYShhLGIsYyxkLGUpe3RoaXMubGlzdGVuZXI9YTt0aGlzLnByb3h5PW51bGw7dGhpcy5zcmM9Yjt0aGlzLnR5cGU9Yzt0aGlzLmNhcHR1cmU9ISFkO3RoaXMuaGE9ZTt0aGlzLmtleT0rK05hO3RoaXMuYmE9dGhpcy5lYT0hMTt9ZnVuY3Rpb24gUGEoYSl7YS5iYT0hMDthLmxpc3RlbmVyPW51bGw7YS5wcm94eT1udWxsO2Euc3JjPW51bGw7YS5oYT1udWxsO31mdW5jdGlvbiBRYShhLGIsYyl7Zm9yKGNvbnN0IGQgaW4gYSliLmNhbGwoYyxhW2RdLGQsYSk7fWZ1bmN0aW9uIFJhKGEpe2NvbnN0IGI9e307Zm9yKGNvbnN0IGMgaW4gYSliW2NdPWFbY107cmV0dXJuIGJ9Y29uc3QgU2E9XCJjb25zdHJ1Y3RvciBoYXNPd25Qcm9wZXJ0eSBpc1Byb3RvdHlwZU9mIHByb3BlcnR5SXNFbnVtZXJhYmxlIHRvTG9jYWxlU3RyaW5nIHRvU3RyaW5nIHZhbHVlT2ZcIi5zcGxpdChcIiBcIik7ZnVuY3Rpb24gVGEoYSxiKXtsZXQgYyxkO2ZvcihsZXQgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe2Q9YXJndW1lbnRzW2VdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2ZvcihsZXQgZj0wO2Y8U2EubGVuZ3RoO2YrKyljPVNhW2ZdLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKTt9fWZ1bmN0aW9uIFVhKGEpe3RoaXMuc3JjPWE7dGhpcy5nPXt9O3RoaXMuaD0wO31VYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS50b1N0cmluZygpO2E9dGhpcy5nW2ZdO2F8fChhPXRoaXMuZ1tmXT1bXSx0aGlzLmgrKyk7dmFyIGg9VmEoYSxiLGQsZSk7LTE8aD8oYj1hW2hdLGN8fChiLmVhPSExKSk6KGI9bmV3IE9hKGIsdGhpcy5zcmMsZiwhIWQsZSksYi5lYT1jLGEucHVzaChiKSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIFdhKGEsYil7dmFyIGM9Yi50eXBlO2lmKGMgaW4gYS5nKXt2YXIgZD1hLmdbY10sZT1sYShkLGIpLGY7KGY9MDw9ZSkmJkFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChkLGUsMSk7ZiYmKFBhKGIpLDA9PWEuZ1tjXS5sZW5ndGgmJihkZWxldGUgYS5nW2NdLGEuaC0tKSk7fX1cbmZ1bmN0aW9uIFZhKGEsYixjLGQpe2Zvcih2YXIgZT0wO2U8YS5sZW5ndGg7KytlKXt2YXIgZj1hW2VdO2lmKCFmLmJhJiZmLmxpc3RlbmVyPT1iJiZmLmNhcHR1cmU9PSEhYyYmZi5oYT09ZClyZXR1cm4gZX1yZXR1cm4gLTF9dmFyIFhhPVwiY2xvc3VyZV9sbV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksWWE9e307ZnVuY3Rpb24gJGEoYSxiLGMsZCxlKXtpZihkJiZkLm9uY2UpcmV0dXJuIGFiKGEsYixjLGQsZSk7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspJGEoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPWJiKGMpO3JldHVybiBhJiZhW0FdP2EuTihiLGMscChkKT8hIWQuY2FwdHVyZTohIWQsZSk6Y2IoYSxiLGMsITEsZCxlKX1cbmZ1bmN0aW9uIGNiKGEsYixjLGQsZSxmKXtpZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZVwiKTt2YXIgaD1wKGUpPyEhZS5jYXB0dXJlOiEhZSxuPWRiKGEpO258fChhW1hhXT1uPW5ldyBVYShhKSk7Yz1uLmFkZChiLGMsZCxoLGYpO2lmKGMucHJveHkpcmV0dXJuIGM7ZD1lYigpO2MucHJveHk9ZDtkLnNyYz1hO2QubGlzdGVuZXI9YztpZihhLmFkZEV2ZW50TGlzdGVuZXIpb2F8fChlPWgpLHZvaWQgMD09PWUmJihlPSExKSxhLmFkZEV2ZW50TGlzdGVuZXIoYi50b1N0cmluZygpLGQsZSk7ZWxzZSBpZihhLmF0dGFjaEV2ZW50KWEuYXR0YWNoRXZlbnQoZmIoYi50b1N0cmluZygpKSxkKTtlbHNlIGlmKGEuYWRkTGlzdGVuZXImJmEucmVtb3ZlTGlzdGVuZXIpYS5hZGRMaXN0ZW5lcihkKTtlbHNlIHRocm93IEVycm9yKFwiYWRkRXZlbnRMaXN0ZW5lciBhbmQgYXR0YWNoRXZlbnQgYXJlIHVuYXZhaWxhYmxlLlwiKTtyZXR1cm4gY31cbmZ1bmN0aW9uIGViKCl7ZnVuY3Rpb24gYShjKXtyZXR1cm4gYi5jYWxsKGEuc3JjLGEubGlzdGVuZXIsYyl9Y29uc3QgYj1nYjtyZXR1cm4gYX1mdW5jdGlvbiBhYihhLGIsYyxkLGUpe2lmKEFycmF5LmlzQXJyYXkoYikpe2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKWFiKGEsYltmXSxjLGQsZSk7cmV0dXJuIG51bGx9Yz1iYihjKTtyZXR1cm4gYSYmYVtBXT9hLk8oYixjLHAoZCk/ISFkLmNhcHR1cmU6ISFkLGUpOmNiKGEsYixjLCEwLGQsZSl9XG5mdW5jdGlvbiBoYihhLGIsYyxkLGUpe2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspaGIoYSxiW2ZdLGMsZCxlKTtlbHNlIChkPXAoZCk/ISFkLmNhcHR1cmU6ISFkLGM9YmIoYyksYSYmYVtBXSk/KGE9YS5pLGI9U3RyaW5nKGIpLnRvU3RyaW5nKCksYiBpbiBhLmcmJihmPWEuZ1tiXSxjPVZhKGYsYyxkLGUpLC0xPGMmJihQYShmW2NdKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZixjLDEpLDA9PWYubGVuZ3RoJiYoZGVsZXRlIGEuZ1tiXSxhLmgtLSkpKSk6YSYmKGE9ZGIoYSkpJiYoYj1hLmdbYi50b1N0cmluZygpXSxhPS0xLGImJihhPVZhKGIsYyxkLGUpKSwoYz0tMTxhP2JbYV06bnVsbCkmJmliKGMpKTt9XG5mdW5jdGlvbiBpYihhKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGEmJmEmJiFhLmJhKXt2YXIgYj1hLnNyYztpZihiJiZiW0FdKVdhKGIuaSxhKTtlbHNlIHt2YXIgYz1hLnR5cGUsZD1hLnByb3h5O2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj9iLnJlbW92ZUV2ZW50TGlzdGVuZXIoYyxkLGEuY2FwdHVyZSk6Yi5kZXRhY2hFdmVudD9iLmRldGFjaEV2ZW50KGZiKGMpLGQpOmIuYWRkTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXIoZCk7KGM9ZGIoYikpPyhXYShjLGEpLDA9PWMuaCYmKGMuc3JjPW51bGwsYltYYV09bnVsbCkpOlBhKGEpO319fWZ1bmN0aW9uIGZiKGEpe3JldHVybiBhIGluIFlhP1lhW2FdOllhW2FdPVwib25cIithfWZ1bmN0aW9uIGdiKGEsYil7aWYoYS5iYSlhPSEwO2Vsc2Uge2I9bmV3IHooYix0aGlzKTt2YXIgYz1hLmxpc3RlbmVyLGQ9YS5oYXx8YS5zcmM7YS5lYSYmaWIoYSk7YT1jLmNhbGwoZCxiKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBkYihhKXthPWFbWGFdO3JldHVybiBhIGluc3RhbmNlb2YgVWE/YTpudWxsfXZhciBqYj1cIl9fY2xvc3VyZV9ldmVudHNfZm5fXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCk7ZnVuY3Rpb24gYmIoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGE7YVtqYl18fChhW2piXT1mdW5jdGlvbihiKXtyZXR1cm4gYS5oYW5kbGVFdmVudChiKX0pO3JldHVybiBhW2piXX1mdW5jdGlvbiBCKCl7di5jYWxsKHRoaXMpO3RoaXMuaT1uZXcgVWEodGhpcyk7dGhpcy5QPXRoaXM7dGhpcy5JPW51bGw7fXQoQix2KTtCLnByb3RvdHlwZVtBXT0hMDtCLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2hiKHRoaXMsYSxiLGMsZCk7fTtcbmZ1bmN0aW9uIEMoYSxiKXt2YXIgYyxkPWEuSTtpZihkKWZvcihjPVtdO2Q7ZD1kLkkpYy5wdXNoKGQpO2E9YS5QO2Q9Yi50eXBlfHxiO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiliPW5ldyB3KGIsYSk7ZWxzZSBpZihiIGluc3RhbmNlb2YgdyliLnRhcmdldD1iLnRhcmdldHx8YTtlbHNlIHt2YXIgZT1iO2I9bmV3IHcoZCxhKTtUYShiLGUpO31lPSEwO2lmKGMpZm9yKHZhciBmPWMubGVuZ3RoLTE7MDw9ZjtmLS0pe3ZhciBoPWIuZz1jW2ZdO2U9a2IoaCxkLCEwLGIpJiZlO31oPWIuZz1hO2U9a2IoaCxkLCEwLGIpJiZlO2U9a2IoaCxkLCExLGIpJiZlO2lmKGMpZm9yKGY9MDtmPGMubGVuZ3RoO2YrKyloPWIuZz1jW2ZdLGU9a2IoaCxkLCExLGIpJiZlO31cbkIucHJvdG90eXBlLk09ZnVuY3Rpb24oKXtCLlguTS5jYWxsKHRoaXMpO2lmKHRoaXMuaSl7dmFyIGE9dGhpcy5pLGM7Zm9yKGMgaW4gYS5nKXtmb3IodmFyIGQ9YS5nW2NdLGU9MDtlPGQubGVuZ3RoO2UrKylQYShkW2VdKTtkZWxldGUgYS5nW2NdO2EuaC0tO319dGhpcy5JPW51bGw7fTtCLnByb3RvdHlwZS5OPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmkuYWRkKFN0cmluZyhhKSxiLCExLGMsZCl9O0IucHJvdG90eXBlLk89ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuaS5hZGQoU3RyaW5nKGEpLGIsITAsYyxkKX07XG5mdW5jdGlvbiBrYihhLGIsYyxkKXtiPWEuaS5nW1N0cmluZyhiKV07aWYoIWIpcmV0dXJuICEwO2I9Yi5jb25jYXQoKTtmb3IodmFyIGU9ITAsZj0wO2Y8Yi5sZW5ndGg7KytmKXt2YXIgaD1iW2ZdO2lmKGgmJiFoLmJhJiZoLmNhcHR1cmU9PWMpe3ZhciBuPWgubGlzdGVuZXIsdT1oLmhhfHxoLnNyYztoLmVhJiZXYShhLmksaCk7ZT0hMSE9PW4uY2FsbCh1LGQpJiZlO319cmV0dXJuIGUmJiFkLmRlZmF1bHRQcmV2ZW50ZWR9dmFyIGxiPWwuSlNPTi5zdHJpbmdpZnk7ZnVuY3Rpb24gbWIoKXt2YXIgYT1uYjtsZXQgYj1udWxsO2EuZyYmKGI9YS5nLGEuZz1hLmcubmV4dCxhLmd8fChhLmg9bnVsbCksYi5uZXh0PW51bGwpO3JldHVybiBifWNsYXNzIG9ie2NvbnN0cnVjdG9yKCl7dGhpcy5oPXRoaXMuZz1udWxsO31hZGQoYSxiKXtjb25zdCBjPXBiLmdldCgpO2Muc2V0KGEsYik7dGhpcy5oP3RoaXMuaC5uZXh0PWM6dGhpcy5nPWM7dGhpcy5oPWM7fX12YXIgcGI9bmV3IGNsYXNze2NvbnN0cnVjdG9yKGEsYil7dGhpcy5pPWE7dGhpcy5qPWI7dGhpcy5oPTA7dGhpcy5nPW51bGw7fWdldCgpe2xldCBhOzA8dGhpcy5oPyh0aGlzLmgtLSxhPXRoaXMuZyx0aGlzLmc9YS5uZXh0LGEubmV4dD1udWxsKTphPXRoaXMuaSgpO3JldHVybiBhfX0oKCk9Pm5ldyBxYixhPT5hLnJlc2V0KCkpO1xuY2xhc3MgcWJ7Y29uc3RydWN0b3IoKXt0aGlzLm5leHQ9dGhpcy5nPXRoaXMuaD1udWxsO31zZXQoYSxiKXt0aGlzLmg9YTt0aGlzLmc9Yjt0aGlzLm5leHQ9bnVsbDt9cmVzZXQoKXt0aGlzLm5leHQ9dGhpcy5nPXRoaXMuaD1udWxsO319ZnVuY3Rpb24gcmIoYSl7bC5zZXRUaW1lb3V0KCgpPT57dGhyb3cgYTt9LDApO31mdW5jdGlvbiBzYihhLGIpe3VifHx2YigpO3difHwodWIoKSx3Yj0hMCk7bmIuYWRkKGEsYik7fXZhciB1YjtmdW5jdGlvbiB2Yigpe3ZhciBhPWwuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7dWI9ZnVuY3Rpb24oKXthLnRoZW4oeGIpO307fXZhciB3Yj0hMSxuYj1uZXcgb2I7ZnVuY3Rpb24geGIoKXtmb3IodmFyIGE7YT1tYigpOyl7dHJ5e2EuaC5jYWxsKGEuZyk7fWNhdGNoKGMpe3JiKGMpO312YXIgYj1wYjtiLmooYSk7MTAwPmIuaCYmKGIuaCsrLGEubmV4dD1iLmcsYi5nPWEpO313Yj0hMTt9ZnVuY3Rpb24geWIoYSxiKXtCLmNhbGwodGhpcyk7dGhpcy5oPWF8fDE7dGhpcy5nPWJ8fGw7dGhpcy5qPXEodGhpcy5sYix0aGlzKTt0aGlzLmw9RGF0ZS5ub3coKTt9dCh5YixCKTtrPXliLnByb3RvdHlwZTtrLmNhPSExO2suUj1udWxsO2subGI9ZnVuY3Rpb24oKXtpZih0aGlzLmNhKXt2YXIgYT1EYXRlLm5vdygpLXRoaXMubDswPGEmJmE8LjgqdGhpcy5oP3RoaXMuUj10aGlzLmcuc2V0VGltZW91dCh0aGlzLmosdGhpcy5oLWEpOih0aGlzLlImJih0aGlzLmcuY2xlYXJUaW1lb3V0KHRoaXMuUiksdGhpcy5SPW51bGwpLEModGhpcyxcInRpY2tcIiksdGhpcy5jYSYmKHpiKHRoaXMpLHRoaXMuc3RhcnQoKSkpO319O2suc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmNhPSEwO3RoaXMuUnx8KHRoaXMuUj10aGlzLmcuc2V0VGltZW91dCh0aGlzLmosdGhpcy5oKSx0aGlzLmw9RGF0ZS5ub3coKSk7fTtcbmZ1bmN0aW9uIHpiKGEpe2EuY2E9ITE7YS5SJiYoYS5nLmNsZWFyVGltZW91dChhLlIpLGEuUj1udWxsKTt9ay5NPWZ1bmN0aW9uKCl7eWIuWC5NLmNhbGwodGhpcyk7emIodGhpcyk7ZGVsZXRlIHRoaXMuZzt9O2Z1bmN0aW9uIEFiKGEsYixjKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSljJiYoYT1xKGEsYykpO2Vsc2UgaWYoYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5oYW5kbGVFdmVudClhPXEoYS5oYW5kbGVFdmVudCxhKTtlbHNlIHRocm93IEVycm9yKFwiSW52YWxpZCBsaXN0ZW5lciBhcmd1bWVudFwiKTtyZXR1cm4gMjE0NzQ4MzY0NzxOdW1iZXIoYik/LTE6bC5zZXRUaW1lb3V0KGEsYnx8MCl9ZnVuY3Rpb24gQmIoYSl7YS5nPUFiKCgpPT57YS5nPW51bGw7YS5pJiYoYS5pPSExLEJiKGEpKTt9LGEuaik7Y29uc3QgYj1hLmg7YS5oPW51bGw7YS5tLmFwcGx5KG51bGwsYik7fWNsYXNzIENiIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihhLGIpe3N1cGVyKCk7dGhpcy5tPWE7dGhpcy5qPWI7dGhpcy5oPW51bGw7dGhpcy5pPSExO3RoaXMuZz1udWxsO31sKGEpe3RoaXMuaD1hcmd1bWVudHM7dGhpcy5nP3RoaXMuaT0hMDpCYih0aGlzKTt9TSgpe3N1cGVyLk0oKTt0aGlzLmcmJihsLmNsZWFyVGltZW91dCh0aGlzLmcpLHRoaXMuZz1udWxsLHRoaXMuaT0hMSx0aGlzLmg9bnVsbCk7fX1mdW5jdGlvbiBEKGEpe3YuY2FsbCh0aGlzKTt0aGlzLmg9YTt0aGlzLmc9e307fXQoRCx2KTt2YXIgRGI9W107ZnVuY3Rpb24gRWIoYSxiLGMsZCl7QXJyYXkuaXNBcnJheShjKXx8KGMmJihEYlswXT1jLnRvU3RyaW5nKCkpLGM9RGIpO2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj0kYShiLGNbZV0sZHx8YS5oYW5kbGVFdmVudCwhMSxhLmh8fGEpO2lmKCFmKWJyZWFrO2EuZ1tmLmtleV09Zjt9fWZ1bmN0aW9uIEZiKGEpe1FhKGEuZyxmdW5jdGlvbihiLGMpe3RoaXMuZy5oYXNPd25Qcm9wZXJ0eShjKSYmaWIoYik7fSxhKTthLmc9e307fUQucHJvdG90eXBlLk09ZnVuY3Rpb24oKXtELlguTS5jYWxsKHRoaXMpO0ZiKHRoaXMpO307RC5wcm90b3R5cGUuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcIkV2ZW50SGFuZGxlci5oYW5kbGVFdmVudCBub3QgaW1wbGVtZW50ZWRcIik7fTtmdW5jdGlvbiBHYigpe3RoaXMuZz0hMDt9R2IucHJvdG90eXBlLkFhPWZ1bmN0aW9uKCl7dGhpcy5nPSExO307ZnVuY3Rpb24gSGIoYSxiLGMsZCxlLGYpe2EuaW5mbyhmdW5jdGlvbigpe2lmKGEuZylpZihmKXt2YXIgaD1cIlwiO2Zvcih2YXIgbj1mLnNwbGl0KFwiJlwiKSx1PTA7dTxuLmxlbmd0aDt1Kyspe3ZhciBtPW5bdV0uc3BsaXQoXCI9XCIpO2lmKDE8bS5sZW5ndGgpe3ZhciByPW1bMF07bT1tWzFdO3ZhciBGPXIuc3BsaXQoXCJfXCIpO2g9Mjw9Ri5sZW5ndGgmJlwidHlwZVwiPT1GWzFdP2grKHIrXCI9XCIrbStcIiZcIik6aCsocitcIj1yZWRhY3RlZCZcIik7fX19ZWxzZSBoPW51bGw7ZWxzZSBoPWY7cmV0dXJuIFwiWE1MSFRUUCBSRVEgKFwiK2QrXCIpIFthdHRlbXB0IFwiK2UrXCJdOiBcIitiK1wiXFxuXCIrYytcIlxcblwiK2h9KTt9XG5mdW5jdGlvbiBJYihhLGIsYyxkLGUsZixoKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJYTUxIVFRQIFJFU1AgKFwiK2QrXCIpIFsgYXR0ZW1wdCBcIitlK1wiXTogXCIrYitcIlxcblwiK2MrXCJcXG5cIitmK1wiIFwiK2h9KTt9ZnVuY3Rpb24gRShhLGIsYyxkKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJYTUxIVFRQIFRFWFQgKFwiK2IrXCIpOiBcIitKYihhLGMpKyhkP1wiIFwiK2Q6XCJcIil9KTt9ZnVuY3Rpb24gS2IoYSxiKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJUSU1FT1VUOiBcIitifSk7fUdiLnByb3RvdHlwZS5pbmZvPWZ1bmN0aW9uKCl7fTtcbmZ1bmN0aW9uIEpiKGEsYil7aWYoIWEuZylyZXR1cm4gYjtpZighYilyZXR1cm4gbnVsbDt0cnl7dmFyIGM9SlNPTi5wYXJzZShiKTtpZihjKWZvcihhPTA7YTxjLmxlbmd0aDthKyspaWYoQXJyYXkuaXNBcnJheShjW2FdKSl7dmFyIGQ9Y1thXTtpZighKDI+ZC5sZW5ndGgpKXt2YXIgZT1kWzFdO2lmKEFycmF5LmlzQXJyYXkoZSkmJiEoMT5lLmxlbmd0aCkpe3ZhciBmPWVbMF07aWYoXCJub29wXCIhPWYmJlwic3RvcFwiIT1mJiZcImNsb3NlXCIhPWYpZm9yKHZhciBoPTE7aDxlLmxlbmd0aDtoKyspZVtoXT1cIlwiO319fXJldHVybiBsYihjKX1jYXRjaChuKXtyZXR1cm4gYn19dmFyIEc9e30sTGI9bnVsbDtmdW5jdGlvbiBNYigpe3JldHVybiBMYj1MYnx8bmV3IEJ9Ry5QYT1cInNlcnZlcnJlYWNoYWJpbGl0eVwiO2Z1bmN0aW9uIE5iKGEpe3cuY2FsbCh0aGlzLEcuUGEsYSk7fXQoTmIsdyk7ZnVuY3Rpb24gSChhKXtjb25zdCBiPU1iKCk7QyhiLG5ldyBOYihiLGEpKTt9Ry5TVEFUX0VWRU5UPVwic3RhdGV2ZW50XCI7ZnVuY3Rpb24gT2IoYSxiKXt3LmNhbGwodGhpcyxHLlNUQVRfRVZFTlQsYSk7dGhpcy5zdGF0PWI7fXQoT2Isdyk7ZnVuY3Rpb24gSShhKXtjb25zdCBiPU1iKCk7QyhiLG5ldyBPYihiLGEpKTt9Ry5RYT1cInRpbWluZ2V2ZW50XCI7ZnVuY3Rpb24gUGIoYSxiKXt3LmNhbGwodGhpcyxHLlFhLGEpO3RoaXMuc2l6ZT1iO310KFBiLHcpO1xuZnVuY3Rpb24gSihhLGIpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKFwiRm4gbXVzdCBub3QgYmUgbnVsbCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3JldHVybiBsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXthKCk7fSxiKX12YXIgUWI9e05PX0VSUk9SOjAsbWI6MSx6YjoyLHliOjMsdGI6NCx4Yjo1LEFiOjYsTWE6NyxUSU1FT1VUOjgsRGI6OX07dmFyIFJiPXtyYjpcImNvbXBsZXRlXCIsTmI6XCJzdWNjZXNzXCIsTmE6XCJlcnJvclwiLE1hOlwiYWJvcnRcIixGYjpcInJlYWR5XCIsR2I6XCJyZWFkeXN0YXRlY2hhbmdlXCIsVElNRU9VVDpcInRpbWVvdXRcIixCYjpcImluY3JlbWVudGFsZGF0YVwiLEViOlwicHJvZ3Jlc3NcIix1YjpcImRvd25sb2FkcHJvZ3Jlc3NcIixWYjpcInVwbG9hZHByb2dyZXNzXCJ9O2Z1bmN0aW9uIFNiKCl7fVNiLnByb3RvdHlwZS5oPW51bGw7ZnVuY3Rpb24gVGIoYSl7cmV0dXJuIGEuaHx8KGEuaD1hLmkoKSl9ZnVuY3Rpb24gVWIoKXt9dmFyIEs9e09QRU46XCJhXCIscWI6XCJiXCIsTmE6XCJjXCIsQ2I6XCJkXCJ9O2Z1bmN0aW9uIFZiKCl7dy5jYWxsKHRoaXMsXCJkXCIpO310KFZiLHcpO2Z1bmN0aW9uIFdiKCl7dy5jYWxsKHRoaXMsXCJjXCIpO310KFdiLHcpO3ZhciBYYjtmdW5jdGlvbiBZYigpe310KFliLFNiKTtZYi5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3JldHVybiBuZXcgWE1MSHR0cFJlcXVlc3R9O1liLnByb3RvdHlwZS5pPWZ1bmN0aW9uKCl7cmV0dXJuIHt9fTtYYj1uZXcgWWI7ZnVuY3Rpb24gTChhLGIsYyxkKXt0aGlzLmw9YTt0aGlzLmo9Yjt0aGlzLm09Yzt0aGlzLlU9ZHx8MTt0aGlzLlM9bmV3IEQodGhpcyk7dGhpcy5PPVpiO2E9eWE/MTI1OnZvaWQgMDt0aGlzLlQ9bmV3IHliKGEpO3RoaXMuSD1udWxsO3RoaXMuaT0hMTt0aGlzLnM9dGhpcy5BPXRoaXMudj10aGlzLks9dGhpcy5GPXRoaXMuVj10aGlzLkI9bnVsbDt0aGlzLkQ9W107dGhpcy5nPW51bGw7dGhpcy5DPTA7dGhpcy5vPXRoaXMudT1udWxsO3RoaXMuWT0tMTt0aGlzLkk9ITE7dGhpcy5OPTA7dGhpcy5MPW51bGw7dGhpcy4kPXRoaXMuSj10aGlzLlo9dGhpcy5QPSExO3RoaXMuaD1uZXcgJGI7fWZ1bmN0aW9uICRiKCl7dGhpcy5pPW51bGw7dGhpcy5nPVwiXCI7dGhpcy5oPSExO312YXIgWmI9NDVFMyxhYz17fSxiYz17fTtrPUwucHJvdG90eXBlO2suc2V0VGltZW91dD1mdW5jdGlvbihhKXt0aGlzLk89YTt9O1xuZnVuY3Rpb24gY2MoYSxiLGMpe2EuSz0xO2Eudj1kYyhNKGIpKTthLnM9YzthLlA9ITA7ZWMoYSxudWxsKTt9ZnVuY3Rpb24gZWMoYSxiKXthLkY9RGF0ZS5ub3coKTtOKGEpO2EuQT1NKGEudik7dmFyIGM9YS5BLGQ9YS5VO0FycmF5LmlzQXJyYXkoZCl8fChkPVtTdHJpbmcoZCldKTtmYyhjLmksXCJ0XCIsZCk7YS5DPTA7Yz1hLmwuSDthLmg9bmV3ICRiO2EuZz1nYyhhLmwsYz9iOm51bGwsIWEucyk7MDxhLk4mJihhLkw9bmV3IENiKHEoYS5MYSxhLGEuZyksYS5OKSk7RWIoYS5TLGEuZyxcInJlYWR5c3RhdGVjaGFuZ2VcIixhLmliKTtiPWEuSD9SYShhLkgpOnt9O2Eucz8oYS51fHwoYS51PVwiUE9TVFwiKSxiW1wiQ29udGVudC1UeXBlXCJdPVwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsYS5nLmRhKGEuQSxhLnUsYS5zLGIpKTooYS51PVwiR0VUXCIsYS5nLmRhKGEuQSxhLnUsbnVsbCxiKSk7SCgxKTtIYihhLmosYS51LGEuQSxhLm0sYS5VLGEucyk7fVxuay5pYj1mdW5jdGlvbihhKXthPWEudGFyZ2V0O2NvbnN0IGI9dGhpcy5MO2ImJjM9PU8oYSk/Yi5sKCk6dGhpcy5MYShhKTt9O1xuay5MYT1mdW5jdGlvbihhKXt0cnl7aWYoYT09dGhpcy5nKWE6e2NvbnN0IHI9Tyh0aGlzLmcpO3ZhciBiPXRoaXMuZy5FYSgpO2NvbnN0IEY9dGhpcy5nLmFhKCk7aWYoISgzPnIpJiYoMyE9cnx8eWF8fHRoaXMuZyYmKHRoaXMuaC5ofHx0aGlzLmcuZmEoKXx8aGModGhpcy5nKSkpKXt0aGlzLkl8fDQhPXJ8fDc9PWJ8fCg4PT1ifHwwPj1GP0goMyk6SCgyKSk7aWModGhpcyk7dmFyIGM9dGhpcy5nLmFhKCk7dGhpcy5ZPWM7YjppZihqYyh0aGlzKSl7dmFyIGQ9aGModGhpcy5nKTthPVwiXCI7dmFyIGU9ZC5sZW5ndGgsZj00PT1PKHRoaXMuZyk7aWYoIXRoaXMuaC5pKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIFRleHREZWNvZGVyKXtQKHRoaXMpO1EodGhpcyk7dmFyIGg9XCJcIjticmVhayBifXRoaXMuaC5pPW5ldyBsLlRleHREZWNvZGVyO31mb3IoYj0wO2I8ZTtiKyspdGhpcy5oLmg9ITAsYSs9dGhpcy5oLmkuZGVjb2RlKGRbYl0se3N0cmVhbTpmJiZiPT1lLTF9KTtkLnNwbGljZSgwLFxuZSk7dGhpcy5oLmcrPWE7dGhpcy5DPTA7aD10aGlzLmguZzt9ZWxzZSBoPXRoaXMuZy5mYSgpO3RoaXMuaT0yMDA9PWM7SWIodGhpcy5qLHRoaXMudSx0aGlzLkEsdGhpcy5tLHRoaXMuVSxyLGMpO2lmKHRoaXMuaSl7aWYodGhpcy5aJiYhdGhpcy5KKXtiOntpZih0aGlzLmcpe3ZhciBuLHU9dGhpcy5nO2lmKChuPXUuZz91LmcuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLUhUVFAtSW5pdGlhbC1SZXNwb25zZVwiKTpudWxsKSYmIXBhKG4pKXt2YXIgbT1uO2JyZWFrIGJ9fW09bnVsbDt9aWYoYz1tKUUodGhpcy5qLHRoaXMubSxjLFwiSW5pdGlhbCBoYW5kc2hha2UgcmVzcG9uc2UgdmlhIFgtSFRUUC1Jbml0aWFsLVJlc3BvbnNlXCIpLHRoaXMuSj0hMCxrYyh0aGlzLGMpO2Vsc2Uge3RoaXMuaT0hMTt0aGlzLm89MztJKDEyKTtQKHRoaXMpO1EodGhpcyk7YnJlYWsgYX19dGhpcy5QPyhsYyh0aGlzLHIsaCkseWEmJnRoaXMuaSYmMz09ciYmKEViKHRoaXMuUyx0aGlzLlQsXCJ0aWNrXCIsdGhpcy5oYiksXG50aGlzLlQuc3RhcnQoKSkpOihFKHRoaXMuaix0aGlzLm0saCxudWxsKSxrYyh0aGlzLGgpKTs0PT1yJiZQKHRoaXMpO3RoaXMuaSYmIXRoaXMuSSYmKDQ9PXI/bWModGhpcy5sLHRoaXMpOih0aGlzLmk9ITEsTih0aGlzKSkpO31lbHNlIDQwMD09YyYmMDxoLmluZGV4T2YoXCJVbmtub3duIFNJRFwiKT8odGhpcy5vPTMsSSgxMikpOih0aGlzLm89MCxJKDEzKSksUCh0aGlzKSxRKHRoaXMpO319fWNhdGNoKHIpe31maW5hbGx5e319O2Z1bmN0aW9uIGpjKGEpe3JldHVybiBhLmc/XCJHRVRcIj09YS51JiYyIT1hLksmJmEubC5EYTohMX1cbmZ1bmN0aW9uIGxjKGEsYixjKXtsZXQgZD0hMCxlO2Zvcig7IWEuSSYmYS5DPGMubGVuZ3RoOylpZihlPW5jKGEsYyksZT09YmMpezQ9PWImJihhLm89NCxJKDE0KSxkPSExKTtFKGEuaixhLm0sbnVsbCxcIltJbmNvbXBsZXRlIFJlc3BvbnNlXVwiKTticmVha31lbHNlIGlmKGU9PWFjKXthLm89NDtJKDE1KTtFKGEuaixhLm0sYyxcIltJbnZhbGlkIENodW5rXVwiKTtkPSExO2JyZWFrfWVsc2UgRShhLmosYS5tLGUsbnVsbCksa2MoYSxlKTtqYyhhKSYmZSE9YmMmJmUhPWFjJiYoYS5oLmc9XCJcIixhLkM9MCk7NCE9Ynx8MCE9Yy5sZW5ndGh8fGEuaC5ofHwoYS5vPTEsSSgxNiksZD0hMSk7YS5pPWEuaSYmZDtkPzA8Yy5sZW5ndGgmJiFhLiQmJihhLiQ9ITAsYj1hLmwsYi5nPT1hJiZiLiQmJiFiLksmJihiLmouaW5mbyhcIkdyZWF0LCBubyBidWZmZXJpbmcgcHJveHkgZGV0ZWN0ZWQuIEJ5dGVzIHJlY2VpdmVkOiBcIitjLmxlbmd0aCksb2MoYiksYi5LPSEwLEkoMTEpKSk6KEUoYS5qLGEubSxjLFxuXCJbSW52YWxpZCBDaHVua2VkIFJlc3BvbnNlXVwiKSxQKGEpLFEoYSkpO31rLmhiPWZ1bmN0aW9uKCl7aWYodGhpcy5nKXt2YXIgYT1PKHRoaXMuZyksYj10aGlzLmcuZmEoKTt0aGlzLkM8Yi5sZW5ndGgmJihpYyh0aGlzKSxsYyh0aGlzLGEsYiksdGhpcy5pJiY0IT1hJiZOKHRoaXMpKTt9fTtmdW5jdGlvbiBuYyhhLGIpe3ZhciBjPWEuQyxkPWIuaW5kZXhPZihcIlxcblwiLGMpO2lmKC0xPT1kKXJldHVybiBiYztjPU51bWJlcihiLnN1YnN0cmluZyhjLGQpKTtpZihpc05hTihjKSlyZXR1cm4gYWM7ZCs9MTtpZihkK2M+Yi5sZW5ndGgpcmV0dXJuIGJjO2I9Yi5zdWJzdHIoZCxjKTthLkM9ZCtjO3JldHVybiBifWsuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5JPSEwO1AodGhpcyk7fTtmdW5jdGlvbiBOKGEpe2EuVj1EYXRlLm5vdygpK2EuTztwYyhhLGEuTyk7fVxuZnVuY3Rpb24gcGMoYSxiKXtpZihudWxsIT1hLkIpdGhyb3cgRXJyb3IoXCJXYXRjaERvZyB0aW1lciBub3QgbnVsbFwiKTthLkI9SihxKGEuZ2IsYSksYik7fWZ1bmN0aW9uIGljKGEpe2EuQiYmKGwuY2xlYXJUaW1lb3V0KGEuQiksYS5CPW51bGwpO31rLmdiPWZ1bmN0aW9uKCl7dGhpcy5CPW51bGw7Y29uc3QgYT1EYXRlLm5vdygpOzA8PWEtdGhpcy5WPyhLYih0aGlzLmosdGhpcy5BKSwyIT10aGlzLksmJihIKDMpLEkoMTcpKSxQKHRoaXMpLHRoaXMubz0yLFEodGhpcykpOnBjKHRoaXMsdGhpcy5WLWEpO307ZnVuY3Rpb24gUShhKXswPT1hLmwuR3x8YS5JfHxtYyhhLmwsYSk7fWZ1bmN0aW9uIFAoYSl7aWMoYSk7dmFyIGI9YS5MO2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGIubmEmJmIubmEoKTthLkw9bnVsbDt6YihhLlQpO0ZiKGEuUyk7YS5nJiYoYj1hLmcsYS5nPW51bGwsYi5hYm9ydCgpLGIubmEoKSk7fVxuZnVuY3Rpb24ga2MoYSxiKXt0cnl7dmFyIGM9YS5sO2lmKDAhPWMuRyYmKGMuZz09YXx8cWMoYy5oLGEpKSlpZighYS5KJiZxYyhjLmgsYSkmJjM9PWMuRyl7dHJ5e3ZhciBkPWMuRmEuZy5wYXJzZShiKTt9Y2F0Y2gobSl7ZD1udWxsO31pZihBcnJheS5pc0FycmF5KGQpJiYzPT1kLmxlbmd0aCl7dmFyIGU9ZDtpZigwPT1lWzBdKWE6e2lmKCFjLnUpe2lmKGMuZylpZihjLmcuRiszRTM8YS5GKXJjKGMpLHNjKGMpO2Vsc2UgYnJlYWsgYTt0YyhjKTtJKDE4KTt9fWVsc2UgYy5CYT1lWzFdLDA8Yy5CYS1jLlQmJjM3NTAwPmVbMl0mJmMuTCYmMD09Yy5BJiYhYy52JiYoYy52PUoocShjLmNiLGMpLDZFMykpO2lmKDE+PXVjKGMuaCkmJmMuamEpe3RyeXtjLmphKCk7fWNhdGNoKG0pe31jLmphPXZvaWQgMDt9fWVsc2UgUihjLDExKTt9ZWxzZSBpZigoYS5KfHxjLmc9PWEpJiZyYyhjKSwhcGEoYikpZm9yKGU9Yy5GYS5nLnBhcnNlKGIpLGI9MDtiPGUubGVuZ3RoO2IrKyl7bGV0IG09ZVtiXTtjLlQ9XG5tWzBdO209bVsxXTtpZigyPT1jLkcpaWYoXCJjXCI9PW1bMF0pe2MuST1tWzFdO2Mua2E9bVsyXTtjb25zdCByPW1bM107bnVsbCE9ciYmKGMubWE9cixjLmouaW5mbyhcIlZFUj1cIitjLm1hKSk7Y29uc3QgRj1tWzRdO251bGwhPUYmJihjLkNhPUYsYy5qLmluZm8oXCJTVkVSPVwiK2MuQ2EpKTtjb25zdCBDYT1tWzVdO251bGwhPUNhJiZcIm51bWJlclwiPT09dHlwZW9mIENhJiYwPENhJiYoZD0xLjUqQ2EsYy5KPWQsYy5qLmluZm8oXCJiYWNrQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfPVwiK2QpKTtkPWM7Y29uc3QgWj1hLmc7aWYoWil7Y29uc3QgRGE9Wi5nP1ouZy5nZXRSZXNwb25zZUhlYWRlcihcIlgtQ2xpZW50LVdpcmUtUHJvdG9jb2xcIik6bnVsbDtpZihEYSl7dmFyIGY9ZC5oO2YuZ3x8LTE9PURhLmluZGV4T2YoXCJzcGR5XCIpJiYtMT09RGEuaW5kZXhPZihcInF1aWNcIikmJi0xPT1EYS5pbmRleE9mKFwiaDJcIil8fChmLmo9Zi5sLGYuZz1uZXcgU2V0LGYuaCYmKHZjKGYsZi5oKSxmLmg9bnVsbCkpO31pZihkLkQpe2NvbnN0IHRiPVxuWi5nP1ouZy5nZXRSZXNwb25zZUhlYWRlcihcIlgtSFRUUC1TZXNzaW9uLUlkXCIpOm51bGw7dGImJihkLnphPXRiLFMoZC5GLGQuRCx0YikpO319Yy5HPTM7Yy5sJiZjLmwueGEoKTtjLiQmJihjLlA9RGF0ZS5ub3coKS1hLkYsYy5qLmluZm8oXCJIYW5kc2hha2UgUlRUOiBcIitjLlArXCJtc1wiKSk7ZD1jO3ZhciBoPWE7ZC5zYT13YyhkLGQuSD9kLmthOm51bGwsZC5WKTtpZihoLkope3hjKGQuaCxoKTt2YXIgbj1oLHU9ZC5KO3UmJm4uc2V0VGltZW91dCh1KTtuLkImJihpYyhuKSxOKG4pKTtkLmc9aDt9ZWxzZSB5YyhkKTswPGMuaS5sZW5ndGgmJnpjKGMpO31lbHNlIFwic3RvcFwiIT1tWzBdJiZcImNsb3NlXCIhPW1bMF18fFIoYyw3KTtlbHNlIDM9PWMuRyYmKFwic3RvcFwiPT1tWzBdfHxcImNsb3NlXCI9PW1bMF0/XCJzdG9wXCI9PW1bMF0/UihjLDcpOkFjKGMpOlwibm9vcFwiIT1tWzBdJiZjLmwmJmMubC53YShtKSxjLkE9MCk7fUgoNCk7fWNhdGNoKG0pe319ZnVuY3Rpb24gQmMoYSl7aWYoYS5XJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlcpcmV0dXJuIGEuVygpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWFwJiZhIGluc3RhbmNlb2YgTWFwfHxcInVuZGVmaW5lZFwiIT09dHlwZW9mIFNldCYmYSBpbnN0YW5jZW9mIFNldClyZXR1cm4gQXJyYXkuZnJvbShhLnZhbHVlcygpKTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGEuc3BsaXQoXCJcIik7aWYoYmEoYSkpe2Zvcih2YXIgYj1bXSxjPWEubGVuZ3RoLGQ9MDtkPGM7ZCsrKWIucHVzaChhW2RdKTtyZXR1cm4gYn1iPVtdO2M9MDtmb3IoZCBpbiBhKWJbYysrXT1hW2RdO3JldHVybiBifVxuZnVuY3Rpb24gQ2MoYSl7aWYoYS5vYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5vYSlyZXR1cm4gYS5vYSgpO2lmKCFhLld8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEuVyl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNYXAmJmEgaW5zdGFuY2VvZiBNYXApcmV0dXJuIEFycmF5LmZyb20oYS5rZXlzKCkpO2lmKCEoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBTZXQmJmEgaW5zdGFuY2VvZiBTZXQpKXtpZihiYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYj1bXTthPWEubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGMpO3JldHVybiBifWI9W107Yz0wO2Zvcihjb25zdCBkIGluIGEpYltjKytdPWQ7cmV0dXJuIGJ9fX1cbmZ1bmN0aW9uIERjKGEsYil7aWYoYS5mb3JFYWNoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmZvckVhY2gpYS5mb3JFYWNoKGIsdm9pZCAwKTtlbHNlIGlmKGJhKGEpfHxcInN0cmluZ1wiPT09dHlwZW9mIGEpQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsdm9pZCAwKTtlbHNlIGZvcih2YXIgYz1DYyhhKSxkPUJjKGEpLGU9ZC5sZW5ndGgsZj0wO2Y8ZTtmKyspYi5jYWxsKHZvaWQgMCxkW2ZdLGMmJmNbZl0sYSk7fXZhciBFYz1SZWdFeHAoXCJeKD86KFteOi8/Iy5dKyk6KT8oPzovLyg/OihbXlxcXFxcXFxcLz8jXSopQCk/KFteXFxcXFxcXFwvPyNdKj8pKD86OihbMC05XSspKT8oPz1bXFxcXFxcXFwvPyNdfCQpKT8oW14/I10rKT8oPzpcXFxcPyhbXiNdKikpPyg/OiMoW1xcXFxzXFxcXFNdKikpPyRcIik7ZnVuY3Rpb24gRmMoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKTt9ZWxzZSBmPWFbY107YihmLGU/ZGVjb2RlVVJJQ29tcG9uZW50KGUucmVwbGFjZSgvXFwrL2csXCIgXCIpKTpcIlwiKTt9fX1mdW5jdGlvbiBUKGEsYil7dGhpcy5nPXRoaXMucz10aGlzLmo9XCJcIjt0aGlzLm09bnVsbDt0aGlzLm89dGhpcy5sPVwiXCI7dGhpcy5oPSExO2lmKGEgaW5zdGFuY2VvZiBUKXt0aGlzLmg9dm9pZCAwIT09Yj9iOmEuaDtHYyh0aGlzLGEuaik7dGhpcy5zPWEuczt0aGlzLmc9YS5nO0hjKHRoaXMsYS5tKTt0aGlzLmw9YS5sO2I9YS5pO3ZhciBjPW5ldyBJYztjLmk9Yi5pO2IuZyYmKGMuZz1uZXcgTWFwKGIuZyksYy5oPWIuaCk7SmModGhpcyxjKTt0aGlzLm89YS5vO31lbHNlIGEmJihjPVN0cmluZyhhKS5tYXRjaChFYykpPyh0aGlzLmg9ISFiLEdjKHRoaXMsY1sxXXx8XCJcIiwhMCksdGhpcy5zPUtjKGNbMl18fFwiXCIpLHRoaXMuZz1LYyhjWzNdfHxcIlwiLCEwKSxIYyh0aGlzLGNbNF0pLHRoaXMubD1LYyhjWzVdfHxcIlwiLCEwKSxKYyh0aGlzLGNbNl18fFwiXCIsITApLHRoaXMubz1LYyhjWzddfHxcIlwiKSk6KHRoaXMuaD0hIWIsdGhpcy5pPW5ldyBJYyhudWxsLHRoaXMuaCkpO31cblQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLmo7YiYmYS5wdXNoKExjKGIsTWMsITApLFwiOlwiKTt2YXIgYz10aGlzLmc7aWYoY3x8XCJmaWxlXCI9PWIpYS5wdXNoKFwiLy9cIiksKGI9dGhpcy5zKSYmYS5wdXNoKExjKGIsTWMsITApLFwiQFwiKSxhLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKSxjPXRoaXMubSxudWxsIT1jJiZhLnB1c2goXCI6XCIsU3RyaW5nKGMpKTtpZihjPXRoaXMubCl0aGlzLmcmJlwiL1wiIT1jLmNoYXJBdCgwKSYmYS5wdXNoKFwiL1wiKSxhLnB1c2goTGMoYyxcIi9cIj09Yy5jaGFyQXQoMCk/TmM6T2MsITApKTsoYz10aGlzLmkudG9TdHJpbmcoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLm8pJiZhLnB1c2goXCIjXCIsTGMoYyxQYykpO3JldHVybiBhLmpvaW4oXCJcIil9O2Z1bmN0aW9uIE0oYSl7cmV0dXJuIG5ldyBUKGEpfVxuZnVuY3Rpb24gR2MoYSxiLGMpe2Euaj1jP0tjKGIsITApOmI7YS5qJiYoYS5qPWEuai5yZXBsYWNlKC86JC8sXCJcIikpO31mdW5jdGlvbiBIYyhhLGIpe2lmKGIpe2I9TnVtYmVyKGIpO2lmKGlzTmFOKGIpfHwwPmIpdGhyb3cgRXJyb3IoXCJCYWQgcG9ydCBudW1iZXIgXCIrYik7YS5tPWI7fWVsc2UgYS5tPW51bGw7fWZ1bmN0aW9uIEpjKGEsYixjKXtiIGluc3RhbmNlb2YgSWM/KGEuaT1iLFFjKGEuaSxhLmgpKTooY3x8KGI9TGMoYixSYykpLGEuaT1uZXcgSWMoYixhLmgpKTt9ZnVuY3Rpb24gUyhhLGIsYyl7YS5pLnNldChiLGMpO31mdW5jdGlvbiBkYyhhKXtTKGEsXCJ6eFwiLE1hdGguZmxvb3IoMjE0NzQ4MzY0OCpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNikrTWF0aC5hYnMoTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpXkRhdGUubm93KCkpLnRvU3RyaW5nKDM2KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBLYyhhLGIpe3JldHVybiBhP2I/ZGVjb2RlVVJJKGEucmVwbGFjZSgvJTI1L2csXCIlMjUyNVwiKSk6ZGVjb2RlVVJJQ29tcG9uZW50KGEpOlwiXCJ9ZnVuY3Rpb24gTGMoYSxiLGMpe3JldHVybiBcInN0cmluZ1wiPT09dHlwZW9mIGE/KGE9ZW5jb2RlVVJJKGEpLnJlcGxhY2UoYixTYyksYyYmKGE9YS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLGEpOm51bGx9ZnVuY3Rpb24gU2MoYSl7YT1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuIFwiJVwiKyhhPj40JjE1KS50b1N0cmluZygxNikrKGEmMTUpLnRvU3RyaW5nKDE2KX12YXIgTWM9L1sjXFwvXFw/QF0vZyxPYz0vWyNcXD86XS9nLE5jPS9bI1xcP10vZyxSYz0vWyNcXD9AXS9nLFBjPS8jL2c7ZnVuY3Rpb24gSWMoYSxiKXt0aGlzLmg9dGhpcy5nPW51bGw7dGhpcy5pPWF8fG51bGw7dGhpcy5qPSEhYjt9XG5mdW5jdGlvbiBVKGEpe2EuZ3x8KGEuZz1uZXcgTWFwLGEuaD0wLGEuaSYmRmMoYS5pLGZ1bmN0aW9uKGIsYyl7YS5hZGQoZGVjb2RlVVJJQ29tcG9uZW50KGIucmVwbGFjZSgvXFwrL2csXCIgXCIpKSxjKTt9KSk7fWs9SWMucHJvdG90eXBlO2suYWRkPWZ1bmN0aW9uKGEsYil7VSh0aGlzKTt0aGlzLmk9bnVsbDthPVYodGhpcyxhKTt2YXIgYz10aGlzLmcuZ2V0KGEpO2N8fHRoaXMuZy5zZXQoYSxjPVtdKTtjLnB1c2goYik7dGhpcy5oKz0xO3JldHVybiB0aGlzfTtmdW5jdGlvbiBUYyhhLGIpe1UoYSk7Yj1WKGEsYik7YS5nLmhhcyhiKSYmKGEuaT1udWxsLGEuaC09YS5nLmdldChiKS5sZW5ndGgsYS5nLmRlbGV0ZShiKSk7fWZ1bmN0aW9uIFVjKGEsYil7VShhKTtiPVYoYSxiKTtyZXR1cm4gYS5nLmhhcyhiKX1cbmsuZm9yRWFjaD1mdW5jdGlvbihhLGIpe1UodGhpcyk7dGhpcy5nLmZvckVhY2goZnVuY3Rpb24oYyxkKXtjLmZvckVhY2goZnVuY3Rpb24oZSl7YS5jYWxsKGIsZSxkLHRoaXMpO30sdGhpcyk7fSx0aGlzKTt9O2sub2E9ZnVuY3Rpb24oKXtVKHRoaXMpO2NvbnN0IGE9QXJyYXkuZnJvbSh0aGlzLmcudmFsdWVzKCkpLGI9QXJyYXkuZnJvbSh0aGlzLmcua2V5cygpKSxjPVtdO2ZvcihsZXQgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXtjb25zdCBlPWFbZF07Zm9yKGxldCBmPTA7ZjxlLmxlbmd0aDtmKyspYy5wdXNoKGJbZF0pO31yZXR1cm4gY307ay5XPWZ1bmN0aW9uKGEpe1UodGhpcyk7bGV0IGI9W107aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKVVjKHRoaXMsYSkmJihiPWIuY29uY2F0KHRoaXMuZy5nZXQoVih0aGlzLGEpKSkpO2Vsc2Uge2E9QXJyYXkuZnJvbSh0aGlzLmcudmFsdWVzKCkpO2ZvcihsZXQgYz0wO2M8YS5sZW5ndGg7YysrKWI9Yi5jb25jYXQoYVtjXSk7fXJldHVybiBifTtcbmsuc2V0PWZ1bmN0aW9uKGEsYil7VSh0aGlzKTt0aGlzLmk9bnVsbDthPVYodGhpcyxhKTtVYyh0aGlzLGEpJiYodGhpcy5oLT10aGlzLmcuZ2V0KGEpLmxlbmd0aCk7dGhpcy5nLnNldChhLFtiXSk7dGhpcy5oKz0xO3JldHVybiB0aGlzfTtrLmdldD1mdW5jdGlvbihhLGIpe2lmKCFhKXJldHVybiBiO2E9dGhpcy5XKGEpO3JldHVybiAwPGEubGVuZ3RoP1N0cmluZyhhWzBdKTpifTtmdW5jdGlvbiBmYyhhLGIsYyl7VGMoYSxiKTswPGMubGVuZ3RoJiYoYS5pPW51bGwsYS5nLnNldChWKGEsYiksbWEoYykpLGEuaCs9Yy5sZW5ndGgpO31cbmsudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLmkpcmV0dXJuIHRoaXMuaTtpZighdGhpcy5nKXJldHVybiBcIlwiO2NvbnN0IGE9W10sYj1BcnJheS5mcm9tKHRoaXMuZy5rZXlzKCkpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO2NvbnN0IGY9ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkKSksaD10aGlzLlcoZCk7Zm9yKGQ9MDtkPGgubGVuZ3RoO2QrKyl7dmFyIGU9ZjtcIlwiIT09aFtkXSYmKGUrPVwiPVwiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaFtkXSkpKTthLnB1c2goZSk7fX1yZXR1cm4gdGhpcy5pPWEuam9pbihcIiZcIil9O2Z1bmN0aW9uIFYoYSxiKXtiPVN0cmluZyhiKTthLmomJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBRYyhhLGIpe2ImJiFhLmomJihVKGEpLGEuaT1udWxsLGEuZy5mb3JFYWNoKGZ1bmN0aW9uKGMsZCl7dmFyIGU9ZC50b0xvd2VyQ2FzZSgpO2QhPWUmJihUYyh0aGlzLGQpLGZjKHRoaXMsZSxjKSk7fSxhKSk7YS5qPWI7fXZhciBWYz1jbGFzc3tjb25zdHJ1Y3RvcihhLGIpe3RoaXMuaD1hO3RoaXMuZz1iO319O2Z1bmN0aW9uIFdjKGEpe3RoaXMubD1hfHxYYztsLlBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZz8oYT1sLnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoXCJuYXZpZ2F0aW9uXCIpLGE9MDxhLmxlbmd0aCYmKFwiaHFcIj09YVswXS5uZXh0SG9wUHJvdG9jb2x8fFwiaDJcIj09YVswXS5uZXh0SG9wUHJvdG9jb2wpKTphPSEhKGwuZyYmbC5nLkdhJiZsLmcuR2EoKSYmbC5nLkdhKCkuJGIpO3RoaXMuaj1hP3RoaXMubDoxO3RoaXMuZz1udWxsOzE8dGhpcy5qJiYodGhpcy5nPW5ldyBTZXQpO3RoaXMuaD1udWxsO3RoaXMuaT1bXTt9dmFyIFhjPTEwO2Z1bmN0aW9uIFljKGEpe3JldHVybiBhLmg/ITA6YS5nP2EuZy5zaXplPj1hLmo6ITF9ZnVuY3Rpb24gdWMoYSl7cmV0dXJuIGEuaD8xOmEuZz9hLmcuc2l6ZTowfWZ1bmN0aW9uIHFjKGEsYil7cmV0dXJuIGEuaD9hLmg9PWI6YS5nP2EuZy5oYXMoYik6ITF9ZnVuY3Rpb24gdmMoYSxiKXthLmc/YS5nLmFkZChiKTphLmg9Yjt9XG5mdW5jdGlvbiB4YyhhLGIpe2EuaCYmYS5oPT1iP2EuaD1udWxsOmEuZyYmYS5nLmhhcyhiKSYmYS5nLmRlbGV0ZShiKTt9V2MucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3RoaXMuaT1aYyh0aGlzKTtpZih0aGlzLmgpdGhpcy5oLmNhbmNlbCgpLHRoaXMuaD1udWxsO2Vsc2UgaWYodGhpcy5nJiYwIT09dGhpcy5nLnNpemUpe2Zvcihjb25zdCBhIG9mIHRoaXMuZy52YWx1ZXMoKSlhLmNhbmNlbCgpO3RoaXMuZy5jbGVhcigpO319O2Z1bmN0aW9uIFpjKGEpe2lmKG51bGwhPWEuaClyZXR1cm4gYS5pLmNvbmNhdChhLmguRCk7aWYobnVsbCE9YS5nJiYwIT09YS5nLnNpemUpe2xldCBiPWEuaTtmb3IoY29uc3QgYyBvZiBhLmcudmFsdWVzKCkpYj1iLmNvbmNhdChjLkQpO3JldHVybiBifXJldHVybiBtYShhLmkpfWZ1bmN0aW9uICRjKCl7fSRjLnByb3RvdHlwZS5zdHJpbmdpZnk9ZnVuY3Rpb24oYSl7cmV0dXJuIGwuSlNPTi5zdHJpbmdpZnkoYSx2b2lkIDApfTskYy5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIGwuSlNPTi5wYXJzZShhLHZvaWQgMCl9O2Z1bmN0aW9uIGFkKCl7dGhpcy5nPW5ldyAkYzt9ZnVuY3Rpb24gYmQoYSxiLGMpe2NvbnN0IGQ9Y3x8XCJcIjt0cnl7RGMoYSxmdW5jdGlvbihlLGYpe2xldCBoPWU7cChlKSYmKGg9bGIoZSkpO2IucHVzaChkK2YrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGgpKTt9KTt9Y2F0Y2goZSl7dGhyb3cgYi5wdXNoKGQrXCJ0eXBlPVwiK2VuY29kZVVSSUNvbXBvbmVudChcIl9iYWRtYXBcIikpLGU7fX1mdW5jdGlvbiBjZChhLGIpe2NvbnN0IGM9bmV3IEdiO2lmKGwuSW1hZ2Upe2NvbnN0IGQ9bmV3IEltYWdlO2Qub25sb2FkPWlhKGRkLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IGxvYWRlZFwiLCEwLGIpO2Qub25lcnJvcj1pYShkZCxjLGQsXCJUZXN0TG9hZEltYWdlOiBlcnJvclwiLCExLGIpO2Qub25hYm9ydD1pYShkZCxjLGQsXCJUZXN0TG9hZEltYWdlOiBhYm9ydFwiLCExLGIpO2Qub250aW1lb3V0PWlhKGRkLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IHRpbWVvdXRcIiwhMSxiKTtsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihkLm9udGltZW91dClkLm9udGltZW91dCgpO30sMUU0KTtkLnNyYz1hO31lbHNlIGIoITEpO31mdW5jdGlvbiBkZChhLGIsYyxkLGUpe3RyeXtiLm9ubG9hZD1udWxsLGIub25lcnJvcj1udWxsLGIub25hYm9ydD1udWxsLGIub250aW1lb3V0PW51bGwsZShkKTt9Y2F0Y2goZil7fX1mdW5jdGlvbiBlZChhKXt0aGlzLmw9YS5hY3x8bnVsbDt0aGlzLmo9YS5qYnx8ITE7fXQoZWQsU2IpO2VkLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBmZCh0aGlzLmwsdGhpcy5qKX07ZWQucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSh7fSk7ZnVuY3Rpb24gZmQoYSxiKXtCLmNhbGwodGhpcyk7dGhpcy5EPWE7dGhpcy51PWI7dGhpcy5tPXZvaWQgMDt0aGlzLnJlYWR5U3RhdGU9Z2Q7dGhpcy5zdGF0dXM9MDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPXRoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7dGhpcy52PW5ldyBIZWFkZXJzO3RoaXMuaD1udWxsO3RoaXMuQz1cIkdFVFwiO3RoaXMuQj1cIlwiO3RoaXMuZz0hMTt0aGlzLkE9dGhpcy5qPXRoaXMubD1udWxsO310KGZkLEIpO3ZhciBnZD0wO2s9ZmQucHJvdG90eXBlO1xuay5vcGVuPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5yZWFkeVN0YXRlIT1nZCl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJFcnJvciByZW9wZW5pbmcgYSBjb25uZWN0aW9uXCIpO3RoaXMuQz1hO3RoaXMuQj1iO3RoaXMucmVhZHlTdGF0ZT0xO2hkKHRoaXMpO307ay5zZW5kPWZ1bmN0aW9uKGEpe2lmKDEhPXRoaXMucmVhZHlTdGF0ZSl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJuZWVkIHRvIGNhbGwgb3BlbigpIGZpcnN0LiBcIik7dGhpcy5nPSEwO2NvbnN0IGI9e2hlYWRlcnM6dGhpcy52LG1ldGhvZDp0aGlzLkMsY3JlZGVudGlhbHM6dGhpcy5tLGNhY2hlOnZvaWQgMH07YSYmKGIuYm9keT1hKTsodGhpcy5EfHxsKS5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLkIsYikpLnRoZW4odGhpcy5XYS5iaW5kKHRoaXMpLHRoaXMuZ2EuYmluZCh0aGlzKSk7fTtcbmsuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7dGhpcy52PW5ldyBIZWFkZXJzO3RoaXMuc3RhdHVzPTA7dGhpcy5qJiZ0aGlzLmouY2FuY2VsKFwiUmVxdWVzdCB3YXMgYWJvcnRlZC5cIikuY2F0Y2goKCk9Pnt9KTsxPD10aGlzLnJlYWR5U3RhdGUmJnRoaXMuZyYmNCE9dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5nPSExLGlkKHRoaXMpKTt0aGlzLnJlYWR5U3RhdGU9Z2Q7fTtcbmsuV2E9ZnVuY3Rpb24oYSl7aWYodGhpcy5nJiYodGhpcy5sPWEsdGhpcy5ofHwodGhpcy5zdGF0dXM9dGhpcy5sLnN0YXR1cyx0aGlzLnN0YXR1c1RleHQ9dGhpcy5sLnN0YXR1c1RleHQsdGhpcy5oPWEuaGVhZGVycyx0aGlzLnJlYWR5U3RhdGU9MixoZCh0aGlzKSksdGhpcy5nJiYodGhpcy5yZWFkeVN0YXRlPTMsaGQodGhpcyksdGhpcy5nKSkpaWYoXCJhcnJheWJ1ZmZlclwiPT09dGhpcy5yZXNwb25zZVR5cGUpYS5hcnJheUJ1ZmZlcigpLnRoZW4odGhpcy5VYS5iaW5kKHRoaXMpLHRoaXMuZ2EuYmluZCh0aGlzKSk7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuUmVhZGFibGVTdHJlYW0mJlwiYm9keVwiaW4gYSl7dGhpcy5qPWEuYm9keS5nZXRSZWFkZXIoKTtpZih0aGlzLnUpe2lmKHRoaXMucmVzcG9uc2VUeXBlKXRocm93IEVycm9yKCdyZXNwb25zZVR5cGUgbXVzdCBiZSBlbXB0eSBmb3IgXCJzdHJlYW1CaW5hcnlDaHVua3NcIiBtb2RlIHJlc3BvbnNlcy4nKTt0aGlzLnJlc3BvbnNlPVxuW107fWVsc2UgdGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dD1cIlwiLHRoaXMuQT1uZXcgVGV4dERlY29kZXI7amQodGhpcyk7fWVsc2UgYS50ZXh0KCkudGhlbih0aGlzLlZhLmJpbmQodGhpcyksdGhpcy5nYS5iaW5kKHRoaXMpKTt9O2Z1bmN0aW9uIGpkKGEpe2Euai5yZWFkKCkudGhlbihhLlRhLmJpbmQoYSkpLmNhdGNoKGEuZ2EuYmluZChhKSk7fWsuVGE9ZnVuY3Rpb24oYSl7aWYodGhpcy5nKXtpZih0aGlzLnUmJmEudmFsdWUpdGhpcy5yZXNwb25zZS5wdXNoKGEudmFsdWUpO2Vsc2UgaWYoIXRoaXMudSl7dmFyIGI9YS52YWx1ZT9hLnZhbHVlOm5ldyBVaW50OEFycmF5KDApO2lmKGI9dGhpcy5BLmRlY29kZShiLHtzdHJlYW06IWEuZG9uZX0pKXRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQrPWI7fWEuZG9uZT9pZCh0aGlzKTpoZCh0aGlzKTszPT10aGlzLnJlYWR5U3RhdGUmJmpkKHRoaXMpO319O1xuay5WYT1mdW5jdGlvbihhKXt0aGlzLmcmJih0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PWEsaWQodGhpcykpO307ay5VYT1mdW5jdGlvbihhKXt0aGlzLmcmJih0aGlzLnJlc3BvbnNlPWEsaWQodGhpcykpO307ay5nYT1mdW5jdGlvbigpe3RoaXMuZyYmaWQodGhpcyk7fTtmdW5jdGlvbiBpZChhKXthLnJlYWR5U3RhdGU9NDthLmw9bnVsbDthLmo9bnVsbDthLkE9bnVsbDtoZChhKTt9ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGEsYil7dGhpcy52LmFwcGVuZChhLGIpO307ay5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5oP3RoaXMuaC5nZXQoYS50b0xvd2VyQ2FzZSgpKXx8XCJcIjpcIlwifTtcbmsuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaClyZXR1cm4gXCJcIjtjb25zdCBhPVtdLGI9dGhpcy5oLmVudHJpZXMoKTtmb3IodmFyIGM9Yi5uZXh0KCk7IWMuZG9uZTspYz1jLnZhbHVlLGEucHVzaChjWzBdK1wiOiBcIitjWzFdKSxjPWIubmV4dCgpO3JldHVybiBhLmpvaW4oXCJcXHJcXG5cIil9O2Z1bmN0aW9uIGhkKGEpe2Eub25yZWFkeXN0YXRlY2hhbmdlJiZhLm9ucmVhZHlzdGF0ZWNoYW5nZS5jYWxsKGEpO31PYmplY3QuZGVmaW5lUHJvcGVydHkoZmQucHJvdG90eXBlLFwid2l0aENyZWRlbnRpYWxzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBcImluY2x1ZGVcIj09PXRoaXMubX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMubT1hP1wiaW5jbHVkZVwiOlwic2FtZS1vcmlnaW5cIjt9fSk7dmFyIGtkPWwuSlNPTi5wYXJzZTtmdW5jdGlvbiBXKGEpe0IuY2FsbCh0aGlzKTt0aGlzLmhlYWRlcnM9bmV3IE1hcDt0aGlzLnU9YXx8bnVsbDt0aGlzLmg9ITE7dGhpcy5DPXRoaXMuZz1udWxsO3RoaXMuSD1cIlwiO3RoaXMubT0wO3RoaXMuaj1cIlwiO3RoaXMubD10aGlzLkY9dGhpcy52PXRoaXMuRD0hMTt0aGlzLkI9MDt0aGlzLkE9bnVsbDt0aGlzLko9bGQ7dGhpcy5LPXRoaXMuTD0hMTt9dChXLEIpO3ZhciBsZD1cIlwiLG1kPS9eaHR0cHM/JC9pLG5kPVtcIlBPU1RcIixcIlBVVFwiXTtrPVcucHJvdG90eXBlO2suS2E9ZnVuY3Rpb24oYSl7dGhpcy5MPWE7fTtcbmsuZGE9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodGhpcy5nKXRocm93IEVycm9yKFwiW2dvb2cubmV0LlhocklvXSBPYmplY3QgaXMgYWN0aXZlIHdpdGggYW5vdGhlciByZXF1ZXN0PVwiK3RoaXMuSCtcIjsgbmV3VXJpPVwiK2EpO2I9Yj9iLnRvVXBwZXJDYXNlKCk6XCJHRVRcIjt0aGlzLkg9YTt0aGlzLmo9XCJcIjt0aGlzLm09MDt0aGlzLkQ9ITE7dGhpcy5oPSEwO3RoaXMuZz10aGlzLnU/dGhpcy51LmcoKTpYYi5nKCk7dGhpcy5DPXRoaXMudT9UYih0aGlzLnUpOlRiKFhiKTt0aGlzLmcub25yZWFkeXN0YXRlY2hhbmdlPXEodGhpcy5IYSx0aGlzKTt0cnl7dGhpcy5GPSEwLHRoaXMuZy5vcGVuKGIsU3RyaW5nKGEpLCEwKSx0aGlzLkY9ITE7fWNhdGNoKGYpe29kKHRoaXMsZik7cmV0dXJufWE9Y3x8XCJcIjtjPW5ldyBNYXAodGhpcy5oZWFkZXJzKTtpZihkKWlmKE9iamVjdC5nZXRQcm90b3R5cGVPZihkKT09PU9iamVjdC5wcm90b3R5cGUpZm9yKHZhciBlIGluIGQpYy5zZXQoZSxkW2VdKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGQua2V5cyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0KWZvcihjb25zdCBmIG9mIGQua2V5cygpKWMuc2V0KGYsZC5nZXQoZikpO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIGlucHV0IHR5cGUgZm9yIG9wdF9oZWFkZXJzOiBcIitTdHJpbmcoZCkpO2Q9QXJyYXkuZnJvbShjLmtleXMoKSkuZmluZChmPT5cImNvbnRlbnQtdHlwZVwiPT1mLnRvTG93ZXJDYXNlKCkpO2U9bC5Gb3JtRGF0YSYmYSBpbnN0YW5jZW9mIGwuRm9ybURhdGE7ISgwPD1sYShuZCxiKSl8fGR8fGV8fGMuc2V0KFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtmb3IoY29uc3QgW2YsaF1vZiBjKXRoaXMuZy5zZXRSZXF1ZXN0SGVhZGVyKGYsaCk7dGhpcy5KJiYodGhpcy5nLnJlc3BvbnNlVHlwZT10aGlzLkopO1wid2l0aENyZWRlbnRpYWxzXCJpbiB0aGlzLmcmJnRoaXMuZy53aXRoQ3JlZGVudGlhbHMhPT10aGlzLkwmJih0aGlzLmcud2l0aENyZWRlbnRpYWxzPVxudGhpcy5MKTt0cnl7cGQodGhpcyksMDx0aGlzLkImJigodGhpcy5LPXFkKHRoaXMuZykpPyh0aGlzLmcudGltZW91dD10aGlzLkIsdGhpcy5nLm9udGltZW91dD1xKHRoaXMucWEsdGhpcykpOnRoaXMuQT1BYih0aGlzLnFhLHRoaXMuQix0aGlzKSksdGhpcy52PSEwLHRoaXMuZy5zZW5kKGEpLHRoaXMudj0hMTt9Y2F0Y2goZil7b2QodGhpcyxmKTt9fTtmdW5jdGlvbiBxZChhKXtyZXR1cm4geSYmSWEoKSYmXCJudW1iZXJcIj09PXR5cGVvZiBhLnRpbWVvdXQmJnZvaWQgMCE9PWEub250aW1lb3V0fWsucWE9ZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ29vZyYmdGhpcy5nJiYodGhpcy5qPVwiVGltZWQgb3V0IGFmdGVyIFwiK3RoaXMuQitcIm1zLCBhYm9ydGluZ1wiLHRoaXMubT04LEModGhpcyxcInRpbWVvdXRcIiksdGhpcy5hYm9ydCg4KSk7fTtcbmZ1bmN0aW9uIG9kKGEsYil7YS5oPSExO2EuZyYmKGEubD0hMCxhLmcuYWJvcnQoKSxhLmw9ITEpO2Euaj1iO2EubT01O3JkKGEpO3NkKGEpO31mdW5jdGlvbiByZChhKXthLkR8fChhLkQ9ITAsQyhhLFwiY29tcGxldGVcIiksQyhhLFwiZXJyb3JcIikpO31rLmFib3J0PWZ1bmN0aW9uKGEpe3RoaXMuZyYmdGhpcy5oJiYodGhpcy5oPSExLHRoaXMubD0hMCx0aGlzLmcuYWJvcnQoKSx0aGlzLmw9ITEsdGhpcy5tPWF8fDcsQyh0aGlzLFwiY29tcGxldGVcIiksQyh0aGlzLFwiYWJvcnRcIiksc2QodGhpcykpO307ay5NPWZ1bmN0aW9uKCl7dGhpcy5nJiYodGhpcy5oJiYodGhpcy5oPSExLHRoaXMubD0hMCx0aGlzLmcuYWJvcnQoKSx0aGlzLmw9ITEpLHNkKHRoaXMsITApKTtXLlguTS5jYWxsKHRoaXMpO307ay5IYT1mdW5jdGlvbigpe3RoaXMuc3x8KHRoaXMuRnx8dGhpcy52fHx0aGlzLmw/dGQodGhpcyk6dGhpcy5mYigpKTt9O2suZmI9ZnVuY3Rpb24oKXt0ZCh0aGlzKTt9O1xuZnVuY3Rpb24gdGQoYSl7aWYoYS5oJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZ29vZyYmKCFhLkNbMV18fDQhPU8oYSl8fDIhPWEuYWEoKSkpaWYoYS52JiY0PT1PKGEpKUFiKGEuSGEsMCxhKTtlbHNlIGlmKEMoYSxcInJlYWR5c3RhdGVjaGFuZ2VcIiksND09TyhhKSl7YS5oPSExO3RyeXtjb25zdCBuPWEuYWEoKTthOnN3aXRjaChuKXtjYXNlIDIwMDpjYXNlIDIwMTpjYXNlIDIwMjpjYXNlIDIwNDpjYXNlIDIwNjpjYXNlIDMwNDpjYXNlIDEyMjM6dmFyIGI9ITA7YnJlYWsgYTtkZWZhdWx0OmI9ITE7fXZhciBjO2lmKCEoYz1iKSl7dmFyIGQ7aWYoZD0wPT09bil7dmFyIGU9U3RyaW5nKGEuSCkubWF0Y2goRWMpWzFdfHxudWxsO2lmKCFlJiZsLnNlbGYmJmwuc2VsZi5sb2NhdGlvbil7dmFyIGY9bC5zZWxmLmxvY2F0aW9uLnByb3RvY29sO2U9Zi5zdWJzdHIoMCxmLmxlbmd0aC0xKTt9ZD0hbWQudGVzdChlP2UudG9Mb3dlckNhc2UoKTpcIlwiKTt9Yz1kO31pZihjKUMoYSxcImNvbXBsZXRlXCIpLEMoYSxcblwic3VjY2Vzc1wiKTtlbHNlIHthLm09Njt0cnl7dmFyIGg9MjxPKGEpP2EuZy5zdGF0dXNUZXh0OlwiXCI7fWNhdGNoKHUpe2g9XCJcIjt9YS5qPWgrXCIgW1wiK2EuYWEoKStcIl1cIjtyZChhKTt9fWZpbmFsbHl7c2QoYSk7fX19ZnVuY3Rpb24gc2QoYSxiKXtpZihhLmcpe3BkKGEpO2NvbnN0IGM9YS5nLGQ9YS5DWzBdP2FhOm51bGw7YS5nPW51bGw7YS5DPW51bGw7Ynx8QyhhLFwicmVhZHlcIik7dHJ5e2Mub25yZWFkeXN0YXRlY2hhbmdlPWQ7fWNhdGNoKGUpe319fWZ1bmN0aW9uIHBkKGEpe2EuZyYmYS5LJiYoYS5nLm9udGltZW91dD1udWxsKTthLkEmJihsLmNsZWFyVGltZW91dChhLkEpLGEuQT1udWxsKTt9ZnVuY3Rpb24gTyhhKXtyZXR1cm4gYS5nP2EuZy5yZWFkeVN0YXRlOjB9ay5hYT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gMjxPKHRoaXMpP3RoaXMuZy5zdGF0dXM6LTF9Y2F0Y2goYSl7cmV0dXJuIC0xfX07XG5rLmZhPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLmc/dGhpcy5nLnJlc3BvbnNlVGV4dDpcIlwifWNhdGNoKGEpe3JldHVybiBcIlwifX07ay5TYT1mdW5jdGlvbihhKXtpZih0aGlzLmcpe3ZhciBiPXRoaXMuZy5yZXNwb25zZVRleHQ7YSYmMD09Yi5pbmRleE9mKGEpJiYoYj1iLnN1YnN0cmluZyhhLmxlbmd0aCkpO3JldHVybiBrZChiKX19O2Z1bmN0aW9uIGhjKGEpe3RyeXtpZighYS5nKXJldHVybiBudWxsO2lmKFwicmVzcG9uc2VcImluIGEuZylyZXR1cm4gYS5nLnJlc3BvbnNlO3N3aXRjaChhLkope2Nhc2UgbGQ6Y2FzZSBcInRleHRcIjpyZXR1cm4gYS5nLnJlc3BvbnNlVGV4dDtjYXNlIFwiYXJyYXlidWZmZXJcIjppZihcIm1velJlc3BvbnNlQXJyYXlCdWZmZXJcImluIGEuZylyZXR1cm4gYS5nLm1velJlc3BvbnNlQXJyYXlCdWZmZXJ9cmV0dXJuIG51bGx9Y2F0Y2goYil7cmV0dXJuIG51bGx9fWsuRWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tfTtcbmsuT2E9ZnVuY3Rpb24oKXtyZXR1cm4gXCJzdHJpbmdcIj09PXR5cGVvZiB0aGlzLmo/dGhpcy5qOlN0cmluZyh0aGlzLmopfTtmdW5jdGlvbiB1ZChhKXtsZXQgYj1cIlwiO1FhKGEsZnVuY3Rpb24oYyxkKXtiKz1kO2IrPVwiOlwiO2IrPWM7Yis9XCJcXHJcXG5cIjt9KTtyZXR1cm4gYn1mdW5jdGlvbiB2ZChhLGIsYyl7YTp7Zm9yKGQgaW4gYyl7dmFyIGQ9ITE7YnJlYWsgYX1kPSEwO31kfHwoYz11ZChjKSxcInN0cmluZ1wiPT09dHlwZW9mIGE/KG51bGwhPWMmJmVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYykpKTpTKGEsYixjKSk7fWZ1bmN0aW9uIHdkKGEsYixjKXtyZXR1cm4gYyYmYy5pbnRlcm5hbENoYW5uZWxQYXJhbXM/Yy5pbnRlcm5hbENoYW5uZWxQYXJhbXNbYV18fGI6Yn1cbmZ1bmN0aW9uIHhkKGEpe3RoaXMuQ2E9MDt0aGlzLmk9W107dGhpcy5qPW5ldyBHYjt0aGlzLmthPXRoaXMuc2E9dGhpcy5GPXRoaXMuVj10aGlzLmc9dGhpcy56YT10aGlzLkQ9dGhpcy5pYT10aGlzLm89dGhpcy5TPXRoaXMucz1udWxsO3RoaXMuYWI9dGhpcy5VPTA7dGhpcy5aYT13ZChcImZhaWxGYXN0XCIsITEsYSk7dGhpcy5MPXRoaXMudj10aGlzLnU9dGhpcy5tPXRoaXMubD1udWxsO3RoaXMuWT0hMDt0aGlzLnBhPXRoaXMuQmE9dGhpcy5UPS0xO3RoaXMuWj10aGlzLkE9dGhpcy5DPTA7dGhpcy5YYT13ZChcImJhc2VSZXRyeURlbGF5TXNcIiw1RTMsYSk7dGhpcy5iYj13ZChcInJldHJ5RGVsYXlTZWVkTXNcIiwxRTQsYSk7dGhpcy4kYT13ZChcImZvcndhcmRDaGFubmVsTWF4UmV0cmllc1wiLDIsYSk7dGhpcy50YT13ZChcImZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNc1wiLDJFNCxhKTt0aGlzLnJhPWEmJmEueG1sSHR0cEZhY3Rvcnl8fHZvaWQgMDt0aGlzLkRhPWEmJmEuWmJ8fCExO1xudGhpcy5KPXZvaWQgMDt0aGlzLkg9YSYmYS5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyfHwhMTt0aGlzLkk9XCJcIjt0aGlzLmg9bmV3IFdjKGEmJmEuY29uY3VycmVudFJlcXVlc3RMaW1pdCk7dGhpcy5GYT1uZXcgYWQ7dGhpcy5PPWEmJmEuZmFzdEhhbmRzaGFrZXx8ITE7dGhpcy5OPWEmJmEuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzfHwhMTt0aGlzLk8mJnRoaXMuTiYmKHRoaXMuTj0hMSk7dGhpcy5ZYT1hJiZhLlhifHwhMTthJiZhLkFhJiZ0aGlzLmouQWEoKTthJiZhLmZvcmNlTG9uZ1BvbGxpbmcmJih0aGlzLlk9ITEpO3RoaXMuJD0hdGhpcy5PJiZ0aGlzLlkmJmEmJmEuZGV0ZWN0QnVmZmVyaW5nUHJveHl8fCExO3RoaXMuamE9dm9pZCAwO3RoaXMuUD0wO3RoaXMuSz0hMTt0aGlzLmxhPXRoaXMuQj1udWxsO31rPXhkLnByb3RvdHlwZTtrLm1hPTg7ay5HPTE7XG5mdW5jdGlvbiBBYyhhKXt5ZChhKTtpZigzPT1hLkcpe3ZhciBiPWEuVSsrLGM9TShhLkYpO1MoYyxcIlNJRFwiLGEuSSk7UyhjLFwiUklEXCIsYik7UyhjLFwiVFlQRVwiLFwidGVybWluYXRlXCIpO3pkKGEsYyk7Yj1uZXcgTChhLGEuaixiLHZvaWQgMCk7Yi5LPTI7Yi52PWRjKE0oYykpO2M9ITE7bC5uYXZpZ2F0b3ImJmwubmF2aWdhdG9yLnNlbmRCZWFjb24mJihjPWwubmF2aWdhdG9yLnNlbmRCZWFjb24oYi52LnRvU3RyaW5nKCksXCJcIikpOyFjJiZsLkltYWdlJiYoKG5ldyBJbWFnZSkuc3JjPWIudixjPSEwKTtjfHwoYi5nPWdjKGIubCxudWxsKSxiLmcuZGEoYi52KSk7Yi5GPURhdGUubm93KCk7TihiKTt9QWQoYSk7fWZ1bmN0aW9uIHNjKGEpe2EuZyYmKG9jKGEpLGEuZy5jYW5jZWwoKSxhLmc9bnVsbCk7fVxuZnVuY3Rpb24geWQoYSl7c2MoYSk7YS51JiYobC5jbGVhclRpbWVvdXQoYS51KSxhLnU9bnVsbCk7cmMoYSk7YS5oLmNhbmNlbCgpO2EubSYmKFwibnVtYmVyXCI9PT10eXBlb2YgYS5tJiZsLmNsZWFyVGltZW91dChhLm0pLGEubT1udWxsKTt9ZnVuY3Rpb24gemMoYSl7WWMoYS5oKXx8YS5tfHwoYS5tPSEwLHNiKGEuSmEsYSksYS5DPTApO31mdW5jdGlvbiBCZChhLGIpe2lmKHVjKGEuaCk+PWEuaC5qLShhLm0/MTowKSlyZXR1cm4gITE7aWYoYS5tKXJldHVybiBhLmk9Yi5ELmNvbmNhdChhLmkpLCEwO2lmKDE9PWEuR3x8Mj09YS5HfHxhLkM+PShhLlphPzA6YS4kYSkpcmV0dXJuICExO2EubT1KKHEoYS5KYSxhLGIpLENkKGEsYS5DKSk7YS5DKys7cmV0dXJuICEwfVxuay5KYT1mdW5jdGlvbihhKXtpZih0aGlzLm0paWYodGhpcy5tPW51bGwsMT09dGhpcy5HKXtpZighYSl7dGhpcy5VPU1hdGguZmxvb3IoMUU1Kk1hdGgucmFuZG9tKCkpO2E9dGhpcy5VKys7Y29uc3QgZT1uZXcgTCh0aGlzLHRoaXMuaixhLHZvaWQgMCk7bGV0IGY9dGhpcy5zO3RoaXMuUyYmKGY/KGY9UmEoZiksVGEoZix0aGlzLlMpKTpmPXRoaXMuUyk7bnVsbCE9PXRoaXMub3x8dGhpcy5OfHwoZS5IPWYsZj1udWxsKTtpZih0aGlzLk8pYTp7dmFyIGI9MDtmb3IodmFyIGM9MDtjPHRoaXMuaS5sZW5ndGg7YysrKXtiOnt2YXIgZD10aGlzLmlbY107aWYoXCJfX2RhdGFfX1wiaW4gZC5nJiYoZD1kLmcuX19kYXRhX18sXCJzdHJpbmdcIj09PXR5cGVvZiBkKSl7ZD1kLmxlbmd0aDticmVhayBifWQ9dm9pZCAwO31pZih2b2lkIDA9PT1kKWJyZWFrO2IrPWQ7aWYoNDA5NjxiKXtiPWM7YnJlYWsgYX1pZig0MDk2PT09Ynx8Yz09PXRoaXMuaS5sZW5ndGgtMSl7Yj1jKzE7YnJlYWsgYX19Yj0xRTM7fWVsc2UgYj1cbjFFMztiPURkKHRoaXMsZSxiKTtjPU0odGhpcy5GKTtTKGMsXCJSSURcIixhKTtTKGMsXCJDVkVSXCIsMjIpO3RoaXMuRCYmUyhjLFwiWC1IVFRQLVNlc3Npb24tSWRcIix0aGlzLkQpO3pkKHRoaXMsYyk7ZiYmKHRoaXMuTj9iPVwiaGVhZGVycz1cIitlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHVkKGYpKSkrXCImXCIrYjp0aGlzLm8mJnZkKGMsdGhpcy5vLGYpKTt2Yyh0aGlzLmgsZSk7dGhpcy5ZYSYmUyhjLFwiVFlQRVwiLFwiaW5pdFwiKTt0aGlzLk8/KFMoYyxcIiRyZXFcIixiKSxTKGMsXCJTSURcIixcIm51bGxcIiksZS5aPSEwLGNjKGUsYyxudWxsKSk6Y2MoZSxjLGIpO3RoaXMuRz0yO319ZWxzZSAzPT10aGlzLkcmJihhP0VkKHRoaXMsYSk6MD09dGhpcy5pLmxlbmd0aHx8WWModGhpcy5oKXx8RWQodGhpcykpO307XG5mdW5jdGlvbiBFZChhLGIpe3ZhciBjO2I/Yz1iLm06Yz1hLlUrKztjb25zdCBkPU0oYS5GKTtTKGQsXCJTSURcIixhLkkpO1MoZCxcIlJJRFwiLGMpO1MoZCxcIkFJRFwiLGEuVCk7emQoYSxkKTthLm8mJmEucyYmdmQoZCxhLm8sYS5zKTtjPW5ldyBMKGEsYS5qLGMsYS5DKzEpO251bGw9PT1hLm8mJihjLkg9YS5zKTtiJiYoYS5pPWIuRC5jb25jYXQoYS5pKSk7Yj1EZChhLGMsMUUzKTtjLnNldFRpbWVvdXQoTWF0aC5yb3VuZCguNSphLnRhKStNYXRoLnJvdW5kKC41KmEudGEqTWF0aC5yYW5kb20oKSkpO3ZjKGEuaCxjKTtjYyhjLGQsYik7fWZ1bmN0aW9uIHpkKGEsYil7YS5pYSYmUWEoYS5pYSxmdW5jdGlvbihjLGQpe1MoYixkLGMpO30pO2EubCYmRGMoe30sZnVuY3Rpb24oYyxkKXtTKGIsZCxjKTt9KTt9XG5mdW5jdGlvbiBEZChhLGIsYyl7Yz1NYXRoLm1pbihhLmkubGVuZ3RoLGMpO3ZhciBkPWEubD9xKGEubC5SYSxhLmwsYSk6bnVsbDthOnt2YXIgZT1hLmk7bGV0IGY9LTE7Zm9yKDs7KXtjb25zdCBoPVtcImNvdW50PVwiK2NdOy0xPT1mPzA8Yz8oZj1lWzBdLmgsaC5wdXNoKFwib2ZzPVwiK2YpKTpmPTA6aC5wdXNoKFwib2ZzPVwiK2YpO2xldCBuPSEwO2ZvcihsZXQgdT0wO3U8Yzt1Kyspe2xldCBtPWVbdV0uaDtjb25zdCByPWVbdV0uZzttLT1mO2lmKDA+bSlmPU1hdGgubWF4KDAsZVt1XS5oLTEwMCksbj0hMTtlbHNlIHRyeXtiZChyLGgsXCJyZXFcIittK1wiX1wiKTt9Y2F0Y2goRil7ZCYmZChyKTt9fWlmKG4pe2Q9aC5qb2luKFwiJlwiKTticmVhayBhfX19YT1hLmkuc3BsaWNlKDAsYyk7Yi5EPWE7cmV0dXJuIGR9ZnVuY3Rpb24geWMoYSl7YS5nfHxhLnV8fChhLlo9MSxzYihhLklhLGEpLGEuQT0wKTt9XG5mdW5jdGlvbiB0YyhhKXtpZihhLmd8fGEudXx8Mzw9YS5BKXJldHVybiAhMTthLlorKzthLnU9SihxKGEuSWEsYSksQ2QoYSxhLkEpKTthLkErKztyZXR1cm4gITB9ay5JYT1mdW5jdGlvbigpe3RoaXMudT1udWxsO0ZkKHRoaXMpO2lmKHRoaXMuJCYmISh0aGlzLkt8fG51bGw9PXRoaXMuZ3x8MD49dGhpcy5QKSl7dmFyIGE9Mip0aGlzLlA7dGhpcy5qLmluZm8oXCJCUCBkZXRlY3Rpb24gdGltZXIgZW5hYmxlZDogXCIrYSk7dGhpcy5CPUoocSh0aGlzLmViLHRoaXMpLGEpO319O2suZWI9ZnVuY3Rpb24oKXt0aGlzLkImJih0aGlzLkI9bnVsbCx0aGlzLmouaW5mbyhcIkJQIGRldGVjdGlvbiB0aW1lb3V0IHJlYWNoZWQuXCIpLHRoaXMuai5pbmZvKFwiQnVmZmVyaW5nIHByb3h5IGRldGVjdGVkIGFuZCBzd2l0Y2ggdG8gbG9uZy1wb2xsaW5nIVwiKSx0aGlzLkw9ITEsdGhpcy5LPSEwLEkoMTApLHNjKHRoaXMpLEZkKHRoaXMpKTt9O1xuZnVuY3Rpb24gb2MoYSl7bnVsbCE9YS5CJiYobC5jbGVhclRpbWVvdXQoYS5CKSxhLkI9bnVsbCk7fWZ1bmN0aW9uIEZkKGEpe2EuZz1uZXcgTChhLGEuaixcInJwY1wiLGEuWik7bnVsbD09PWEubyYmKGEuZy5IPWEucyk7YS5nLk49MDt2YXIgYj1NKGEuc2EpO1MoYixcIlJJRFwiLFwicnBjXCIpO1MoYixcIlNJRFwiLGEuSSk7UyhiLFwiQ0lcIixhLkw/XCIwXCI6XCIxXCIpO1MoYixcIkFJRFwiLGEuVCk7UyhiLFwiVFlQRVwiLFwieG1saHR0cFwiKTt6ZChhLGIpO2EubyYmYS5zJiZ2ZChiLGEubyxhLnMpO2EuSiYmYS5nLnNldFRpbWVvdXQoYS5KKTt2YXIgYz1hLmc7YT1hLmthO2MuSz0xO2Mudj1kYyhNKGIpKTtjLnM9bnVsbDtjLlA9ITA7ZWMoYyxhKTt9ay5jYj1mdW5jdGlvbigpe251bGwhPXRoaXMudiYmKHRoaXMudj1udWxsLHNjKHRoaXMpLHRjKHRoaXMpLEkoMTkpKTt9O2Z1bmN0aW9uIHJjKGEpe251bGwhPWEudiYmKGwuY2xlYXJUaW1lb3V0KGEudiksYS52PW51bGwpO31cbmZ1bmN0aW9uIG1jKGEsYil7dmFyIGM9bnVsbDtpZihhLmc9PWIpe3JjKGEpO29jKGEpO2EuZz1udWxsO3ZhciBkPTI7fWVsc2UgaWYocWMoYS5oLGIpKWM9Yi5ELHhjKGEuaCxiKSxkPTE7ZWxzZSByZXR1cm47aWYoMCE9YS5HKWlmKGEucGE9Yi5ZLGIuaSlpZigxPT1kKXtjPWIucz9iLnMubGVuZ3RoOjA7Yj1EYXRlLm5vdygpLWIuRjt2YXIgZT1hLkM7ZD1NYigpO0MoZCxuZXcgUGIoZCxjLGIsZSkpO3pjKGEpO31lbHNlIHljKGEpO2Vsc2UgaWYoZT1iLm8sMz09ZXx8MD09ZSYmMDxhLnBhfHwhKDE9PWQmJkJkKGEsYil8fDI9PWQmJnRjKGEpKSlzd2l0Y2goYyYmMDxjLmxlbmd0aCYmKGI9YS5oLGIuaT1iLmkuY29uY2F0KGMpKSxlKXtjYXNlIDE6UihhLDUpO2JyZWFrO2Nhc2UgNDpSKGEsMTApO2JyZWFrO2Nhc2UgMzpSKGEsNik7YnJlYWs7ZGVmYXVsdDpSKGEsMik7fX1cbmZ1bmN0aW9uIENkKGEsYil7bGV0IGM9YS5YYStNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqYS5iYik7YS5sfHwoYyo9Mik7cmV0dXJuIGMqYn1mdW5jdGlvbiBSKGEsYil7YS5qLmluZm8oXCJFcnJvciBjb2RlIFwiK2IpO2lmKDI9PWIpe3ZhciBjPW51bGw7YS5sJiYoYz1udWxsKTt2YXIgZD1xKGEua2IsYSk7Y3x8KGM9bmV3IFQoXCIvL3d3dy5nb29nbGUuY29tL2ltYWdlcy9jbGVhcmRvdC5naWZcIiksbC5sb2NhdGlvbiYmXCJodHRwXCI9PWwubG9jYXRpb24ucHJvdG9jb2x8fEdjKGMsXCJodHRwc1wiKSxkYyhjKSk7Y2QoYy50b1N0cmluZygpLGQpO31lbHNlIEkoMik7YS5HPTA7YS5sJiZhLmwudmEoYik7QWQoYSk7eWQoYSk7fWsua2I9ZnVuY3Rpb24oYSl7YT8odGhpcy5qLmluZm8oXCJTdWNjZXNzZnVsbHkgcGluZ2VkIGdvb2dsZS5jb21cIiksSSgyKSk6KHRoaXMuai5pbmZvKFwiRmFpbGVkIHRvIHBpbmcgZ29vZ2xlLmNvbVwiKSxJKDEpKTt9O1xuZnVuY3Rpb24gQWQoYSl7YS5HPTA7YS5sYT1bXTtpZihhLmwpe2NvbnN0IGI9WmMoYS5oKTtpZigwIT1iLmxlbmd0aHx8MCE9YS5pLmxlbmd0aCluYShhLmxhLGIpLG5hKGEubGEsYS5pKSxhLmguaS5sZW5ndGg9MCxtYShhLmkpLGEuaS5sZW5ndGg9MDthLmwudWEoKTt9fWZ1bmN0aW9uIHdjKGEsYixjKXt2YXIgZD1jIGluc3RhbmNlb2YgVD9NKGMpOm5ldyBUKGMsdm9pZCAwKTtpZihcIlwiIT1kLmcpYiYmKGQuZz1iK1wiLlwiK2QuZyksSGMoZCxkLm0pO2Vsc2Uge3ZhciBlPWwubG9jYXRpb247ZD1lLnByb3RvY29sO2I9Yj9iK1wiLlwiK2UuaG9zdG5hbWU6ZS5ob3N0bmFtZTtlPStlLnBvcnQ7dmFyIGY9bmV3IFQobnVsbCx2b2lkIDApO2QmJkdjKGYsZCk7YiYmKGYuZz1iKTtlJiZIYyhmLGUpO2MmJihmLmw9Yyk7ZD1mO31jPWEuRDtiPWEuemE7YyYmYiYmUyhkLGMsYik7UyhkLFwiVkVSXCIsYS5tYSk7emQoYSxkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIGdjKGEsYixjKXtpZihiJiYhYS5IKXRocm93IEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHNlY29uZGFyeSBkb21haW4gY2FwYWJsZSBYaHJJbyBvYmplY3QuXCIpO2I9YyYmYS5EYSYmIWEucmE/bmV3IFcobmV3IGVkKHtqYjohMH0pKTpuZXcgVyhhLnJhKTtiLkthKGEuSCk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2QoKXt9az1HZC5wcm90b3R5cGU7ay54YT1mdW5jdGlvbigpe307ay53YT1mdW5jdGlvbigpe307ay52YT1mdW5jdGlvbigpe307ay51YT1mdW5jdGlvbigpe307ay5SYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gSGQoKXtpZih5JiYhKDEwPD1OdW1iZXIoTGEpKSl0aHJvdyBFcnJvcihcIkVudmlyb25tZW50YWwgZXJyb3I6IG5vIGF2YWlsYWJsZSB0cmFuc3BvcnQuXCIpO31IZC5wcm90b3R5cGUuZz1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgWChhLGIpfTtcbmZ1bmN0aW9uIFgoYSxiKXtCLmNhbGwodGhpcyk7dGhpcy5nPW5ldyB4ZChiKTt0aGlzLmw9YTt0aGlzLmg9YiYmYi5tZXNzYWdlVXJsUGFyYW1zfHxudWxsO2E9YiYmYi5tZXNzYWdlSGVhZGVyc3x8bnVsbDtiJiZiLmNsaWVudFByb3RvY29sSGVhZGVyUmVxdWlyZWQmJihhP2FbXCJYLUNsaWVudC1Qcm90b2NvbFwiXT1cIndlYmNoYW5uZWxcIjphPXtcIlgtQ2xpZW50LVByb3RvY29sXCI6XCJ3ZWJjaGFubmVsXCJ9KTt0aGlzLmcucz1hO2E9YiYmYi5pbml0TWVzc2FnZUhlYWRlcnN8fG51bGw7YiYmYi5tZXNzYWdlQ29udGVudFR5cGUmJihhP2FbXCJYLVdlYkNoYW5uZWwtQ29udGVudC1UeXBlXCJdPWIubWVzc2FnZUNvbnRlbnRUeXBlOmE9e1wiWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZVwiOmIubWVzc2FnZUNvbnRlbnRUeXBlfSk7YiYmYi55YSYmKGE/YVtcIlgtV2ViQ2hhbm5lbC1DbGllbnQtUHJvZmlsZVwiXT1iLnlhOmE9e1wiWC1XZWJDaGFubmVsLUNsaWVudC1Qcm9maWxlXCI6Yi55YX0pO3RoaXMuZy5TPVxuYTsoYT1iJiZiLlliKSYmIXBhKGEpJiYodGhpcy5nLm89YSk7dGhpcy5BPWImJmIuc3VwcG9ydHNDcm9zc0RvbWFpblhocnx8ITE7dGhpcy52PWImJmIuc2VuZFJhd0pzb258fCExOyhiPWImJmIuaHR0cFNlc3Npb25JZFBhcmFtKSYmIXBhKGIpJiYodGhpcy5nLkQ9YixhPXRoaXMuaCxudWxsIT09YSYmYiBpbiBhJiYoYT10aGlzLmgsYiBpbiBhJiZkZWxldGUgYVtiXSkpO3RoaXMuaj1uZXcgWSh0aGlzKTt9dChYLEIpO1gucHJvdG90eXBlLm09ZnVuY3Rpb24oKXt0aGlzLmcubD10aGlzLmo7dGhpcy5BJiYodGhpcy5nLkg9ITApO3ZhciBhPXRoaXMuZyxiPXRoaXMubCxjPXRoaXMuaHx8dm9pZCAwO0koMCk7YS5WPWI7YS5pYT1jfHx7fTthLkw9YS5ZO2EuRj13YyhhLG51bGwsYS5WKTt6YyhhKTt9O1gucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7QWModGhpcy5nKTt9O1xuWC5wcm90b3R5cGUudT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmc7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYz17fTtjLl9fZGF0YV9fPWE7YT1jO31lbHNlIHRoaXMudiYmKGM9e30sYy5fX2RhdGFfXz1sYihhKSxhPWMpO2IuaS5wdXNoKG5ldyBWYyhiLmFiKyssYSkpOzM9PWIuRyYmemMoYik7fTtYLnByb3RvdHlwZS5NPWZ1bmN0aW9uKCl7dGhpcy5nLmw9bnVsbDtkZWxldGUgdGhpcy5qO0FjKHRoaXMuZyk7ZGVsZXRlIHRoaXMuZztYLlguTS5jYWxsKHRoaXMpO307ZnVuY3Rpb24gSWQoYSl7VmIuY2FsbCh0aGlzKTt2YXIgYj1hLl9fc21fXztpZihiKXthOntmb3IoY29uc3QgYyBpbiBiKXthPWM7YnJlYWsgYX1hPXZvaWQgMDt9aWYodGhpcy5pPWEpYT10aGlzLmksYj1udWxsIT09YiYmYSBpbiBiP2JbYV06dm9pZCAwO3RoaXMuZGF0YT1iO31lbHNlIHRoaXMuZGF0YT1hO310KElkLFZiKTtmdW5jdGlvbiBKZCgpe1diLmNhbGwodGhpcyk7dGhpcy5zdGF0dXM9MTt9dChKZCxXYik7XG5mdW5jdGlvbiBZKGEpe3RoaXMuZz1hO310KFksR2QpO1kucHJvdG90eXBlLnhhPWZ1bmN0aW9uKCl7Qyh0aGlzLmcsXCJhXCIpO307WS5wcm90b3R5cGUud2E9ZnVuY3Rpb24oYSl7Qyh0aGlzLmcsbmV3IElkKGEpKTt9O1kucHJvdG90eXBlLnZhPWZ1bmN0aW9uKGEpe0ModGhpcy5nLG5ldyBKZChhKSk7fTtZLnByb3RvdHlwZS51YT1mdW5jdGlvbigpe0ModGhpcy5nLFwiYlwiKTt9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5IZC5wcm90b3R5cGUuY3JlYXRlV2ViQ2hhbm5lbD1IZC5wcm90b3R5cGUuZztYLnByb3RvdHlwZS5zZW5kPVgucHJvdG90eXBlLnU7WC5wcm90b3R5cGUub3Blbj1YLnByb3RvdHlwZS5tO1gucHJvdG90eXBlLmNsb3NlPVgucHJvdG90eXBlLmNsb3NlO1FiLk5PX0VSUk9SPTA7UWIuVElNRU9VVD04O1FiLkhUVFBfRVJST1I9NjtSYi5DT01QTEVURT1cImNvbXBsZXRlXCI7VWIuRXZlbnRUeXBlPUs7Sy5PUEVOPVwiYVwiO0suQ0xPU0U9XCJiXCI7Sy5FUlJPUj1cImNcIjtLLk1FU1NBR0U9XCJkXCI7Qi5wcm90b3R5cGUubGlzdGVuPUIucHJvdG90eXBlLk47Vy5wcm90b3R5cGUubGlzdGVuT25jZT1XLnByb3RvdHlwZS5PO1cucHJvdG90eXBlLmdldExhc3RFcnJvcj1XLnByb3RvdHlwZS5PYTtXLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlPVcucHJvdG90eXBlLkVhO1cucHJvdG90eXBlLmdldFN0YXR1cz1XLnByb3RvdHlwZS5hYTtXLnByb3RvdHlwZS5nZXRSZXNwb25zZUpzb249Vy5wcm90b3R5cGUuU2E7XG5XLnByb3RvdHlwZS5nZXRSZXNwb25zZVRleHQ9Vy5wcm90b3R5cGUuZmE7Vy5wcm90b3R5cGUuc2VuZD1XLnByb3RvdHlwZS5kYTtXLnByb3RvdHlwZS5zZXRXaXRoQ3JlZGVudGlhbHM9Vy5wcm90b3R5cGUuS2E7dmFyIGNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQgPSBlc20uY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydD1mdW5jdGlvbigpe3JldHVybiBuZXcgSGR9O3ZhciBnZXRTdGF0RXZlbnRUYXJnZXQgPSBlc20uZ2V0U3RhdEV2ZW50VGFyZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIE1iKCl9O3ZhciBFcnJvckNvZGUgPSBlc20uRXJyb3JDb2RlPVFiO3ZhciBFdmVudFR5cGUgPSBlc20uRXZlbnRUeXBlPVJiO3ZhciBFdmVudCA9IGVzbS5FdmVudD1HO3ZhciBTdGF0ID0gZXNtLlN0YXQ9e3NiOjAsdmI6MSx3YjoyLFBiOjMsVWI6NCxSYjo1LFNiOjYsUWI6NyxPYjo4LFRiOjksUFJPWFk6MTAsTk9QUk9YWToxMSxNYjoxMixJYjoxMyxKYjoxNCxIYjoxNSxLYjoxNixMYjoxNyxvYjoxOCxuYjoxOSxwYjoyMH07XG52YXIgRmV0Y2hYbWxIdHRwRmFjdG9yeSA9IGVzbS5GZXRjaFhtbEh0dHBGYWN0b3J5PWVkO3ZhciBXZWJDaGFubmVsID0gZXNtLldlYkNoYW5uZWw9VWI7dmFyIFhocklvID0gZXNtLlhocklvPVc7XG5cbmV4cG9ydCB7IEVycm9yQ29kZSwgRXZlbnQsIEV2ZW50VHlwZSwgRmV0Y2hYbWxIdHRwRmFjdG9yeSwgU3RhdCwgV2ViQ2hhbm5lbCwgWGhySW8sIGNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQsIGVzbSBhcyBkZWZhdWx0LCBnZXRTdGF0RXZlbnRUYXJnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBfcmVnaXN0ZXJDb21wb25lbnQsIHJlZ2lzdGVyVmVyc2lvbiwgX2dldFByb3ZpZGVyLCBnZXRBcHAsIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UsIFNES19WRVJTSU9OIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2dlciwgTG9nTGV2ZWwgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IsIGNyZWF0ZU1vY2tVc2VyVG9rZW4sIGdldE1vZHVsYXJJbnN0YW5jZSwgZGVlcEVxdWFsLCBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQsIGdldFVBLCBpc0luZGV4ZWREQkF2YWlsYWJsZSwgaXNTYWZhcmkgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBYaHJJbywgRXZlbnRUeXBlLCBFcnJvckNvZGUsIGNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQsIGdldFN0YXRFdmVudFRhcmdldCwgRmV0Y2hYbWxIdHRwRmFjdG9yeSwgV2ViQ2hhbm5lbCwgRXZlbnQsIFN0YXQgfSBmcm9tICdAZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyJztcblxuY29uc3QgYiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTaW1wbGUgd3JhcHBlciBhcm91bmQgYSBudWxsYWJsZSBVSUQuIE1vc3RseSBleGlzdHMgdG8gbWFrZSBjb2RlIG1vcmVcbiAqIHJlYWRhYmxlLlxuICovXG5jbGFzcyBQIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudWlkID0gdDtcbiAgICB9XG4gICAgaXNBdXRoZW50aWNhdGVkKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPSB0aGlzLnVpZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGtleSByZXByZXNlbnRpbmcgdGhpcyB1c2VyLCBzdWl0YWJsZSBmb3IgaW5jbHVzaW9uIGluIGFcbiAgICAgKiBkaWN0aW9uYXJ5LlxuICAgICAqLyAgICB0b0tleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBdXRoZW50aWNhdGVkKCkgPyBcInVpZDpcIiArIHRoaXMudWlkIDogXCJhbm9ueW1vdXMtdXNlclwiO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHQudWlkID09PSB0aGlzLnVpZDtcbiAgICB9XG59XG5cbi8qKiBBIHVzZXIgd2l0aCBhIG51bGwgVUlELiAqLyBQLlVOQVVUSEVOVElDQVRFRCA9IG5ldyBQKG51bGwpLCBcbi8vIFRPRE8obWlrZWxlaGVuKTogTG9vayBpbnRvIGdldHRpbmcgYSBwcm9wZXIgdWlkLWVxdWl2YWxlbnQgZm9yXG4vLyBub24tRmlyZWJhc2VBdXRoIHByb3ZpZGVycy5cblAuR09PR0xFX0NSRURFTlRJQUxTID0gbmV3IFAoXCJnb29nbGUtY3JlZGVudGlhbHMtdWlkXCIpLCBQLkZJUlNUX1BBUlRZID0gbmV3IFAoXCJmaXJzdC1wYXJ0eS11aWRcIiksIFxuUC5NT0NLX1VTRVIgPSBuZXcgUChcIm1vY2stdXNlclwiKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmxldCB2ID0gXCI5LjEyLjFcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFYgPSBuZXcgTG9nZ2VyKFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiKTtcblxuLy8gSGVscGVyIG1ldGhvZHMgYXJlIG5lZWRlZCBiZWNhdXNlIHZhcmlhYmxlcyBjYW4ndCBiZSBleHBvcnRlZCBhcyByZWFkL3dyaXRlXG5mdW5jdGlvbiBTKCkge1xuICAgIHJldHVybiBWLmxvZ0xldmVsO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHZlcmJvc2l0eSBvZiBDbG91ZCBGaXJlc3RvcmUgbG9ncyAoZGVidWcsIGVycm9yLCBvciBzaWxlbnQpLlxuICpcbiAqIEBwYXJhbSBsb2dMZXZlbCAtIFRoZSB2ZXJib3NpdHkgeW91IHNldCBmb3IgYWN0aXZpdHkgYW5kIGVycm9yIGxvZ2dpbmcuIENhblxuICogICBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gKlxuICogICA8dWw+XG4gKiAgICAgPGxpPmBkZWJ1Z2AgZm9yIHRoZSBtb3N0IHZlcmJvc2UgbG9nZ2luZyBsZXZlbCwgcHJpbWFyaWx5IGZvclxuICogICAgIGRlYnVnZ2luZy48L2xpPlxuICogICAgIDxsaT5gZXJyb3JgIHRvIGxvZyBlcnJvcnMgb25seS48L2xpPlxuICogICAgIDxsaT48Y29kZT5gc2lsZW50YCB0byB0dXJuIG9mZiBsb2dnaW5nLjwvbGk+XG4gKiAgIDwvdWw+XG4gKi8gZnVuY3Rpb24gRCh0KSB7XG4gICAgVi5zZXRMb2dMZXZlbCh0KTtcbn1cblxuZnVuY3Rpb24gQyh0LCAuLi5lKSB7XG4gICAgaWYgKFYubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgY29uc3QgbiA9IGUubWFwKGspO1xuICAgICAgICBWLmRlYnVnKGBGaXJlc3RvcmUgKCR7dn0pOiAke3R9YCwgLi4ubik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB4KHQsIC4uLmUpIHtcbiAgICBpZiAoVi5sb2dMZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgICBjb25zdCBuID0gZS5tYXAoayk7XG4gICAgICAgIFYuZXJyb3IoYEZpcmVzdG9yZSAoJHt2fSk6ICR7dH1gLCAuLi5uKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gTih0LCAuLi5lKSB7XG4gICAgaWYgKFYubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuV0FSTikge1xuICAgICAgICBjb25zdCBuID0gZS5tYXAoayk7XG4gICAgICAgIFYud2FybihgRmlyZXN0b3JlICgke3Z9KTogJHt0fWAsIC4uLm4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhZGRpdGlvbmFsIGxvZyBwYXJhbWV0ZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gayh0KSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0O1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBlID0gdCwgSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIEpTT04gZmFpbGVkLCBqdXN0IGxvZyB0aGUgb2JqZWN0IGRpcmVjdGx5XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKiBGb3JtYXRzIGFuIG9iamVjdCBhcyBhIEpTT04gc3RyaW5nLCBzdWl0YWJsZSBmb3IgbG9nZ2luZy4gKi9cbiAgICB2YXIgZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICogTWVzc2FnZXMgYXJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICpcbiAqIFJldHVybnMgYG5ldmVyYCBhbmQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnM6XG4gKiBAZXhhbXBsZVxuICogbGV0IGZ1dHVyZVZhciA9IGZhaWwoJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAqLyBmdW5jdGlvbiBPKHQgPSBcIlVuZXhwZWN0ZWQgc3RhdGVcIikge1xuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICAgIGNvbnN0IGUgPSBgRklSRVNUT1JFICgke3Z9KSBJTlRFUk5BTCBBU1NFUlRJT04gRkFJTEVEOiBgICsgdDtcbiAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgRmlyZXN0b3JlRXJyb3IgaGVyZSBiZWNhdXNlIHRoZXNlIGFyZSBpbnRlcm5hbCBmYWlsdXJlc1xuICAgIC8vIHRoYXQgY2Fubm90IGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuIChBbHNvIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyXG4gICAgLy8gZGVwZW5kZW5jeSBiZXR3ZWVuIHRoZSBlcnJvciBhbmQgYXNzZXJ0IG1vZHVsZXMgd2hpY2ggZG9lc24ndCB3b3JrLilcbiAgICB0aHJvdyB4KGUpLCBuZXcgRXJyb3IoZSk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBNZXNzYWdlcyBhcmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMuXG4gKi8gZnVuY3Rpb24gTSh0LCBlKSB7XG4gICAgdCB8fCBPKCk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBUaGUgY29kZSBvZiBjYWxsc2l0ZXMgaW52b2tpbmcgdGhpcyBmdW5jdGlvbiBhcmUgc3RyaXBwZWQgb3V0IGluIHByb2R1Y3Rpb25cbiAqIGJ1aWxkcy4gQW55IHNpZGUtZWZmZWN0cyBvZiBjb2RlIHdpdGhpbiB0aGUgZGVidWdBc3NlcnQoKSBpbnZvY2F0aW9uIHdpbGwgbm90XG4gKiBoYXBwZW4gaW4gdGhpcyBjYXNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIEYodCwgZSkge1xuICAgIHQgfHwgTygpO1xufVxuXG4vKipcbiAqIENhc3RzIGBvYmpgIHRvIGBUYC4gSW4gbm9uLXByb2R1Y3Rpb24gYnVpbGRzLCB2ZXJpZmllcyB0aGF0IGBvYmpgIGlzIGFuXG4gKiBpbnN0YW5jZSBvZiBgVGAgYmVmb3JlIGNhc3RpbmcuXG4gKi8gZnVuY3Rpb24gJCh0LCBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5lKSB7XG4gICAgcmV0dXJuIHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IEIgPSB7XG4gICAgLy8gQ2F1c2VzIGFyZSBjb3BpZWQgZnJvbTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvYmNlZWM5NGVhNGZjNWYwMDg1ZDgxMjM1ZDhlMWMwNjc5OGRjMzQxYS9pbmNsdWRlL2dycGMlMkIlMkIvaW1wbC9jb2RlZ2VuL3N0YXR1c19jb2RlX2VudW0uaFxuICAgIC8qKiBOb3QgYW4gZXJyb3I7IHJldHVybmVkIG9uIHN1Y2Nlc3MuICovXG4gICAgT0s6IFwib2tcIixcbiAgICAvKiogVGhlIG9wZXJhdGlvbiB3YXMgY2FuY2VsbGVkICh0eXBpY2FsbHkgYnkgdGhlIGNhbGxlcikuICovXG4gICAgQ0FOQ0VMTEVEOiBcImNhbmNlbGxlZFwiLFxuICAgIC8qKiBVbmtub3duIGVycm9yIG9yIGFuIGVycm9yIGZyb20gYSBkaWZmZXJlbnQgZXJyb3IgZG9tYWluLiAqL1xuICAgIFVOS05PV046IFwidW5rbm93blwiLFxuICAgIC8qKlxuICAgICAqIENsaWVudCBzcGVjaWZpZWQgYW4gaW52YWxpZCBhcmd1bWVudC4gTm90ZSB0aGF0IHRoaXMgZGlmZmVycyBmcm9tXG4gICAgICogRkFJTEVEX1BSRUNPTkRJVElPTi4gSU5WQUxJRF9BUkdVTUVOVCBpbmRpY2F0ZXMgYXJndW1lbnRzIHRoYXQgYXJlXG4gICAgICogcHJvYmxlbWF0aWMgcmVnYXJkbGVzcyBvZiB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbSAoZS5nLiwgYSBtYWxmb3JtZWQgZmlsZVxuICAgICAqIG5hbWUpLlxuICAgICAqL1xuICAgIElOVkFMSURfQVJHVU1FTlQ6IFwiaW52YWxpZC1hcmd1bWVudFwiLFxuICAgIC8qKlxuICAgICAqIERlYWRsaW5lIGV4cGlyZWQgYmVmb3JlIG9wZXJhdGlvbiBjb3VsZCBjb21wbGV0ZS4gRm9yIG9wZXJhdGlvbnMgdGhhdFxuICAgICAqIGNoYW5nZSB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbSwgdGhpcyBlcnJvciBtYXkgYmUgcmV0dXJuZWQgZXZlbiBpZiB0aGVcbiAgICAgKiBvcGVyYXRpb24gaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuIEZvciBleGFtcGxlLCBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcbiAgICAgKiBmcm9tIGEgc2VydmVyIGNvdWxkIGhhdmUgYmVlbiBkZWxheWVkIGxvbmcgZW5vdWdoIGZvciB0aGUgZGVhZGxpbmUgdG9cbiAgICAgKiBleHBpcmUuXG4gICAgICovXG4gICAgREVBRExJTkVfRVhDRUVERUQ6IFwiZGVhZGxpbmUtZXhjZWVkZWRcIixcbiAgICAvKiogU29tZSByZXF1ZXN0ZWQgZW50aXR5IChlLmcuLCBmaWxlIG9yIGRpcmVjdG9yeSkgd2FzIG5vdCBmb3VuZC4gKi9cbiAgICBOT1RfRk9VTkQ6IFwibm90LWZvdW5kXCIsXG4gICAgLyoqXG4gICAgICogU29tZSBlbnRpdHkgdGhhdCB3ZSBhdHRlbXB0ZWQgdG8gY3JlYXRlIChlLmcuLCBmaWxlIG9yIGRpcmVjdG9yeSkgYWxyZWFkeVxuICAgICAqIGV4aXN0cy5cbiAgICAgKi9cbiAgICBBTFJFQURZX0VYSVNUUzogXCJhbHJlYWR5LWV4aXN0c1wiLFxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGV4ZWN1dGUgdGhlIHNwZWNpZmllZCBvcGVyYXRpb24uXG4gICAgICogUEVSTUlTU0lPTl9ERU5JRUQgbXVzdCBub3QgYmUgdXNlZCBmb3IgcmVqZWN0aW9ucyBjYXVzZWQgYnkgZXhoYXVzdGluZ1xuICAgICAqIHNvbWUgcmVzb3VyY2UgKHVzZSBSRVNPVVJDRV9FWEhBVVNURUQgaW5zdGVhZCBmb3IgdGhvc2UgZXJyb3JzKS5cbiAgICAgKiBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZSB1c2VkIGlmIHRoZSBjYWxsZXIgY2FuIG5vdCBiZSBpZGVudGlmaWVkXG4gICAgICogKHVzZSBVTkFVVEhFTlRJQ0FURUQgaW5zdGVhZCBmb3IgdGhvc2UgZXJyb3JzKS5cbiAgICAgKi9cbiAgICBQRVJNSVNTSU9OX0RFTklFRDogXCJwZXJtaXNzaW9uLWRlbmllZFwiLFxuICAgIC8qKlxuICAgICAqIFRoZSByZXF1ZXN0IGRvZXMgbm90IGhhdmUgdmFsaWQgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZm9yIHRoZVxuICAgICAqIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBVTkFVVEhFTlRJQ0FURUQ6IFwidW5hdXRoZW50aWNhdGVkXCIsXG4gICAgLyoqXG4gICAgICogU29tZSByZXNvdXJjZSBoYXMgYmVlbiBleGhhdXN0ZWQsIHBlcmhhcHMgYSBwZXItdXNlciBxdW90YSwgb3IgcGVyaGFwcyB0aGVcbiAgICAgKiBlbnRpcmUgZmlsZSBzeXN0ZW0gaXMgb3V0IG9mIHNwYWNlLlxuICAgICAqL1xuICAgIFJFU09VUkNFX0VYSEFVU1RFRDogXCJyZXNvdXJjZS1leGhhdXN0ZWRcIixcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gd2FzIHJlamVjdGVkIGJlY2F1c2UgdGhlIHN5c3RlbSBpcyBub3QgaW4gYSBzdGF0ZSByZXF1aXJlZCBmb3JcbiAgICAgKiB0aGUgb3BlcmF0aW9uJ3MgZXhlY3V0aW9uLiBGb3IgZXhhbXBsZSwgZGlyZWN0b3J5IHRvIGJlIGRlbGV0ZWQgbWF5IGJlXG4gICAgICogbm9uLWVtcHR5LCBhbiBybWRpciBvcGVyYXRpb24gaXMgYXBwbGllZCB0byBhIG5vbi1kaXJlY3RvcnksIGV0Yy5cbiAgICAgKlxuICAgICAqIEEgbGl0bXVzIHRlc3QgdGhhdCBtYXkgaGVscCBhIHNlcnZpY2UgaW1wbGVtZW50b3IgaW4gZGVjaWRpbmdcbiAgICAgKiBiZXR3ZWVuIEZBSUxFRF9QUkVDT05ESVRJT04sIEFCT1JURUQsIGFuZCBVTkFWQUlMQUJMRTpcbiAgICAgKiAgKGEpIFVzZSBVTkFWQUlMQUJMRSBpZiB0aGUgY2xpZW50IGNhbiByZXRyeSBqdXN0IHRoZSBmYWlsaW5nIGNhbGwuXG4gICAgICogIChiKSBVc2UgQUJPUlRFRCBpZiB0aGUgY2xpZW50IHNob3VsZCByZXRyeSBhdCBhIGhpZ2hlci1sZXZlbFxuICAgICAqICAgICAgKGUuZy4sIHJlc3RhcnRpbmcgYSByZWFkLW1vZGlmeS13cml0ZSBzZXF1ZW5jZSkuXG4gICAgICogIChjKSBVc2UgRkFJTEVEX1BSRUNPTkRJVElPTiBpZiB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW50aWxcbiAgICAgKiAgICAgIHRoZSBzeXN0ZW0gc3RhdGUgaGFzIGJlZW4gZXhwbGljaXRseSBmaXhlZC4gRS5nLiwgaWYgYW4gXCJybWRpclwiXG4gICAgICogICAgICBmYWlscyBiZWNhdXNlIHRoZSBkaXJlY3RvcnkgaXMgbm9uLWVtcHR5LCBGQUlMRURfUFJFQ09ORElUSU9OXG4gICAgICogICAgICBzaG91bGQgYmUgcmV0dXJuZWQgc2luY2UgdGhlIGNsaWVudCBzaG91bGQgbm90IHJldHJ5IHVubGVzc1xuICAgICAqICAgICAgdGhleSBoYXZlIGZpcnN0IGZpeGVkIHVwIHRoZSBkaXJlY3RvcnkgYnkgZGVsZXRpbmcgZmlsZXMgZnJvbSBpdC5cbiAgICAgKiAgKGQpIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgcGVyZm9ybXMgY29uZGl0aW9uYWxcbiAgICAgKiAgICAgIFJFU1QgR2V0L1VwZGF0ZS9EZWxldGUgb24gYSByZXNvdXJjZSBhbmQgdGhlIHJlc291cmNlIG9uIHRoZVxuICAgICAqICAgICAgc2VydmVyIGRvZXMgbm90IG1hdGNoIHRoZSBjb25kaXRpb24uIEUuZy4sIGNvbmZsaWN0aW5nXG4gICAgICogICAgICByZWFkLW1vZGlmeS13cml0ZSBvbiB0aGUgc2FtZSByZXNvdXJjZS5cbiAgICAgKi9cbiAgICBGQUlMRURfUFJFQ09ORElUSU9OOiBcImZhaWxlZC1wcmVjb25kaXRpb25cIixcbiAgICAvKipcbiAgICAgKiBUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLCB0eXBpY2FsbHkgZHVlIHRvIGEgY29uY3VycmVuY3kgaXNzdWUgbGlrZVxuICAgICAqIHNlcXVlbmNlciBjaGVjayBmYWlsdXJlcywgdHJhbnNhY3Rpb24gYWJvcnRzLCBldGMuXG4gICAgICpcbiAgICAgKiBTZWUgbGl0bXVzIHRlc3QgYWJvdmUgZm9yIGRlY2lkaW5nIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCxcbiAgICAgKiBhbmQgVU5BVkFJTEFCTEUuXG4gICAgICovXG4gICAgQUJPUlRFRDogXCJhYm9ydGVkXCIsXG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9uIHdhcyBhdHRlbXB0ZWQgcGFzdCB0aGUgdmFsaWQgcmFuZ2UuIEUuZy4sIHNlZWtpbmcgb3IgcmVhZGluZ1xuICAgICAqIHBhc3QgZW5kIG9mIGZpbGUuXG4gICAgICpcbiAgICAgKiBVbmxpa2UgSU5WQUxJRF9BUkdVTUVOVCwgdGhpcyBlcnJvciBpbmRpY2F0ZXMgYSBwcm9ibGVtIHRoYXQgbWF5IGJlIGZpeGVkXG4gICAgICogaWYgdGhlIHN5c3RlbSBzdGF0ZSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSAzMi1iaXQgZmlsZSBzeXN0ZW0gd2lsbFxuICAgICAqIGdlbmVyYXRlIElOVkFMSURfQVJHVU1FTlQgaWYgYXNrZWQgdG8gcmVhZCBhdCBhbiBvZmZzZXQgdGhhdCBpcyBub3QgaW4gdGhlXG4gICAgICogcmFuZ2UgWzAsMl4zMi0xXSwgYnV0IGl0IHdpbGwgZ2VuZXJhdGUgT1VUX09GX1JBTkdFIGlmIGFza2VkIHRvIHJlYWQgZnJvbVxuICAgICAqIGFuIG9mZnNldCBwYXN0IHRoZSBjdXJyZW50IGZpbGUgc2l6ZS5cbiAgICAgKlxuICAgICAqIFRoZXJlIGlzIGEgZmFpciBiaXQgb2Ygb3ZlcmxhcCBiZXR3ZWVuIEZBSUxFRF9QUkVDT05ESVRJT04gYW5kXG4gICAgICogT1VUX09GX1JBTkdFLiBXZSByZWNvbW1lbmQgdXNpbmcgT1VUX09GX1JBTkdFICh0aGUgbW9yZSBzcGVjaWZpYyBlcnJvcilcbiAgICAgKiB3aGVuIGl0IGFwcGxpZXMgc28gdGhhdCBjYWxsZXJzIHdobyBhcmUgaXRlcmF0aW5nIHRocm91Z2ggYSBzcGFjZSBjYW5cbiAgICAgKiBlYXNpbHkgbG9vayBmb3IgYW4gT1VUX09GX1JBTkdFIGVycm9yIHRvIGRldGVjdCB3aGVuIHRoZXkgYXJlIGRvbmUuXG4gICAgICovXG4gICAgT1VUX09GX1JBTkdFOiBcIm91dC1vZi1yYW5nZVwiLFxuICAgIC8qKiBPcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIG9yIG5vdCBzdXBwb3J0ZWQvZW5hYmxlZCBpbiB0aGlzIHNlcnZpY2UuICovXG4gICAgVU5JTVBMRU1FTlRFRDogXCJ1bmltcGxlbWVudGVkXCIsXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZXJyb3JzLiBNZWFucyBzb21lIGludmFyaWFudHMgZXhwZWN0ZWQgYnkgdW5kZXJseWluZyBTeXN0ZW0gaGFzXG4gICAgICogYmVlbiBicm9rZW4uIElmIHlvdSBzZWUgb25lIG9mIHRoZXNlIGVycm9ycywgU29tZXRoaW5nIGlzIHZlcnkgYnJva2VuLlxuICAgICAqL1xuICAgIElOVEVSTkFMOiBcImludGVybmFsXCIsXG4gICAgLyoqXG4gICAgICogVGhlIHNlcnZpY2UgaXMgY3VycmVudGx5IHVuYXZhaWxhYmxlLiBUaGlzIGlzIGEgbW9zdCBsaWtlbHkgYSB0cmFuc2llbnRcbiAgICAgKiBjb25kaXRpb24gYW5kIG1heSBiZSBjb3JyZWN0ZWQgYnkgcmV0cnlpbmcgd2l0aCBhIGJhY2tvZmYuXG4gICAgICpcbiAgICAgKiBTZWUgbGl0bXVzIHRlc3QgYWJvdmUgZm9yIGRlY2lkaW5nIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCxcbiAgICAgKiBhbmQgVU5BVkFJTEFCTEUuXG4gICAgICovXG4gICAgVU5BVkFJTEFCTEU6IFwidW5hdmFpbGFibGVcIixcbiAgICAvKiogVW5yZWNvdmVyYWJsZSBkYXRhIGxvc3Mgb3IgY29ycnVwdGlvbi4gKi9cbiAgICBEQVRBX0xPU1M6IFwiZGF0YS1sb3NzXCJcbn07XG5cbi8qKiBBbiBlcnJvciByZXR1cm5lZCBieSBhIEZpcmVzdG9yZSBvcGVyYXRpb24uICovIGNsYXNzIEwgZXh0ZW5kcyBGaXJlYmFzZUVycm9yIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBiYWNrZW5kIGVycm9yIGNvZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXJyb3IuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gZXJyb3IgZGVzY3JpcHRpb24uXG4gICAgICovXG4gICAgZSkge1xuICAgICAgICBzdXBlcih0LCBlKSwgdGhpcy5jb2RlID0gdCwgdGhpcy5tZXNzYWdlID0gZSwgXG4gICAgICAgIC8vIEhBQ0s6IFdlIHdyaXRlIGEgdG9TdHJpbmcgcHJvcGVydHkgZGlyZWN0bHkgYmVjYXVzZSBFcnJvciBpcyBub3QgYSByZWFsXG4gICAgICAgIC8vIGNsYXNzIGFuZCBzbyBpbmhlcml0YW5jZSBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseS4gV2UgY291bGQgYWx0ZXJuYXRpdmVseVxuICAgICAgICAvLyBkbyB0aGUgc2FtZSBcImJhY2stZG9vciBpbmhlcml0YW5jZVwiIHRyaWNrIHRoYXQgRmlyZWJhc2VFcnJvciBkb2VzLlxuICAgICAgICB0aGlzLnRvU3RyaW5nID0gKCkgPT4gYCR7dGhpcy5uYW1lfTogW2NvZGU9JHt0aGlzLmNvZGV9XTogJHt0aGlzLm1lc3NhZ2V9YDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIFUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHQsIHRoaXMucmVqZWN0ID0gZTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgcSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnVzZXIgPSBlLCB0aGlzLnR5cGUgPSBcIk9BdXRoXCIsIHRoaXMuaGVhZGVycyA9IG5ldyBNYXAsIHRoaXMuaGVhZGVycy5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHt0fWApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgeWllbGRzIGFuIGVtcHR5IHRva2VuLlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgSyB7XG4gICAgZ2V0VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG4gICAgc3RhcnQodCwgZSkge1xuICAgICAgICAvLyBGaXJlIHdpdGggaW5pdGlhbCB1c2VyLlxuICAgICAgICB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IGUoUC5VTkFVVEhFTlRJQ0FURUQpKSk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge31cbn1cblxuLyoqXG4gKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgcmV0dXJucyBhIGNvbnN0YW50IHRva2VuLiBVc2VkIGZvclxuICogZW11bGF0b3IgdG9rZW4gbW9ja2luZy5cbiAqLyBjbGFzcyBHIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0aGUgbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIHNldENoYW5nZUxpc3RlbmVyKClcbiAgICAgICAgICogVGhpcyBpc24ndCBhY3R1YWxseSBuZWNlc3Nhcnkgc2luY2UgdGhlIFVJRCBuZXZlciBjaGFuZ2VzLCBidXQgd2UgdXNlIHRoaXNcbiAgICAgICAgICogdG8gdmVyaWZ5IHRoZSBsaXN0ZW4gY29udHJhY3QgaXMgYWRoZXJlZCB0byBpbiB0ZXN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnRva2VuKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRva2VuKCkge31cbiAgICBzdGFydCh0LCBlKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBlLCBcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdXNlci5cbiAgICAgICAgdC5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiBlKHRoaXMudG9rZW4udXNlcikpKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgUSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnQgPSB0LCBcbiAgICAgICAgLyoqIFRyYWNrcyB0aGUgY3VycmVudCBVc2VyLiAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gUC5VTkFVVEhFTlRJQ0FURUQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ291bnRlciB1c2VkIHRvIGRldGVjdCBpZiB0aGUgdG9rZW4gY2hhbmdlZCB3aGlsZSBhIGdldFRva2VuIHJlcXVlc3Qgd2FzXG4gICAgICAgICAqIG91dHN0YW5kaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pID0gMCwgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hdXRoID0gbnVsbDtcbiAgICB9XG4gICAgc3RhcnQodCwgZSkge1xuICAgICAgICBsZXQgbiA9IHRoaXMuaTtcbiAgICAgICAgLy8gQSBjaGFuZ2UgbGlzdGVuZXIgdGhhdCBwcmV2ZW50cyBkb3VibGUtZmlyaW5nIGZvciB0aGUgc2FtZSB0b2tlbiBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHQgPT4gdGhpcy5pICE9PSBuID8gKG4gPSB0aGlzLmksIGUodCkpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8vIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSB3YWl0ZWQgb24gdG8gYmxvY2sgb24gdGhlIG5leHQgdG9rZW4gY2hhbmdlLlxuICAgICAgICAvLyBUaGlzIHByb21pc2UgaXMgcmUtY3JlYXRlZCBhZnRlciBlYWNoIGNoYW5nZS5cbiAgICAgICAgICAgICAgICBsZXQgaSA9IG5ldyBVO1xuICAgICAgICB0aGlzLm8gPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmkrKywgdGhpcy5jdXJyZW50VXNlciA9IHRoaXMudSgpLCBpLnJlc29sdmUoKSwgaSA9IG5ldyBVLCB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IHModGhpcy5jdXJyZW50VXNlcikpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBpO1xuICAgICAgICAgICAgdC5lbnF1ZXVlUmV0cnlhYmxlKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZS5wcm9taXNlLCBhd2FpdCBzKHRoaXMuY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCBvID0gdCA9PiB7XG4gICAgICAgICAgICBDKFwiRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcIkF1dGggZGV0ZWN0ZWRcIiksIHRoaXMuYXV0aCA9IHQsIHRoaXMuYXV0aC5hZGRBdXRoVG9rZW5MaXN0ZW5lcih0aGlzLm8pLCBcbiAgICAgICAgICAgIHIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50Lm9uSW5pdCgodCA9PiBvKHQpKSksIFxuICAgICAgICAvLyBPdXIgdXNlcnMgY2FuIGluaXRpYWxpemUgQXV0aCByaWdodCBhZnRlciBGaXJlc3RvcmUsIHNvIHdlIGdpdmUgaXRcbiAgICAgICAgLy8gYSBjaGFuY2UgdG8gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGNvbXBvbmVudCBmcmFtZXdvcmsgYmVmb3JlIHdlXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRvIHN0YXJ0IHVwIGluIHVuYXV0aGVudGljYXRlZCBtb2RlLlxuICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdCA/IG8odCkgOiAoXG4gICAgICAgICAgICAgICAgLy8gSWYgYXV0aCBpcyBzdGlsbCBub3QgYXZhaWxhYmxlLCBwcm9jZWVkIHdpdGggYG51bGxgIHVzZXJcbiAgICAgICAgICAgICAgICBDKFwiRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcIkF1dGggbm90IHlldCBkZXRlY3RlZFwiKSwgaS5yZXNvbHZlKCksIGkgPSBuZXcgVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCAwKSwgcigpO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgLy8gVGFrZSBub3RlIG9mIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB0b2tlbkNvdW50ZXIgc28gdGhhdCB0aGlzIG1ldGhvZFxuICAgICAgICAvLyBjYW4gZmFpbCAod2l0aCBhbiBBQk9SVEVEIGVycm9yKSBpZiB0aGVyZSBpcyBhIHRva2VuIGNoYW5nZSB3aGlsZSB0aGVcbiAgICAgICAgLy8gcmVxdWVzdCBpcyBvdXRzdGFuZGluZy5cbiAgICAgICAgY29uc3QgdCA9IHRoaXMuaSwgZSA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hdXRoID8gdGhpcy5hdXRoLmdldFRva2VuKGUpLnRoZW4oKGUgPT4gXG4gICAgICAgIC8vIENhbmNlbCB0aGUgcmVxdWVzdCBzaW5jZSB0aGUgdG9rZW4gY2hhbmdlZCB3aGlsZSB0aGUgcmVxdWVzdCB3YXNcbiAgICAgICAgLy8gb3V0c3RhbmRpbmcgc28gdGhlIHJlc3BvbnNlIGlzIHBvdGVudGlhbGx5IGZvciBhIHByZXZpb3VzIHVzZXIgKHdoaWNoXG4gICAgICAgIC8vIHVzZXIsIHdlIGNhbid0IGJlIHN1cmUpLlxuICAgICAgICB0aGlzLmkgIT09IHQgPyAoQyhcIkZpcmViYXNlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXJcIiwgXCJnZXRUb2tlbiBhYm9ydGVkIGR1ZSB0byB0b2tlbiBjaGFuZ2UuXCIpLCBcbiAgICAgICAgdGhpcy5nZXRUb2tlbigpKSA6IGUgPyAoTShcInN0cmluZ1wiID09IHR5cGVvZiBlLmFjY2Vzc1Rva2VuKSwgbmV3IHEoZS5hY2Nlc3NUb2tlbiwgdGhpcy5jdXJyZW50VXNlcikpIDogbnVsbCkpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gITA7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLmF1dGggJiYgdGhpcy5hdXRoLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKHRoaXMubyk7XG4gICAgfVxuICAgIC8vIEF1dGguZ2V0VWlkKCkgY2FuIHJldHVybiBudWxsIGV2ZW4gd2l0aCBhIHVzZXIgbG9nZ2VkIGluLiBJdCBpcyBiZWNhdXNlXG4gICAgLy8gZ2V0VWlkKCkgaXMgc3luY2hyb25vdXMsIGJ1dCB0aGUgYXV0aCBjb2RlIHBvcHVsYXRpbmcgVWlkIGlzIGFzeW5jaHJvbm91cy5cbiAgICAvLyBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgaW4gdGhlIEF1dGhUb2tlbkxpc3RlbmVyIGNhbGxiYWNrXG4gICAgLy8gdG8gZ3VhcmFudGVlIHRvIGdldCB0aGUgYWN0dWFsIHVzZXIuXG4gICAgdSgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuYXV0aCAmJiB0aGlzLmF1dGguZ2V0VWlkKCk7XG4gICAgICAgIHJldHVybiBNKG51bGwgPT09IHQgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCksIG5ldyBQKHQpO1xuICAgIH1cbn1cblxuLypcbiAqIEZpcnN0UGFydHlUb2tlbiBwcm92aWRlcyBhIGZyZXNoIHRva2VuIGVhY2ggdGltZSBpdHMgdmFsdWVcbiAqIGlzIHJlcXVlc3RlZCwgYmVjYXVzZSBpZiB0aGUgdG9rZW4gaXMgdG9vIG9sZCwgcmVxdWVzdHMgd2lsbCBiZSByZWplY3RlZC5cbiAqIFRlY2huaWNhbGx5IHRoaXMgbWF5IG5vIGxvbmdlciBiZSBuZWNlc3Nhcnkgc2luY2UgdGhlIFNESyBzaG91bGQgZ3JhY2VmdWxseVxuICogcmVjb3ZlciBmcm9tIHVuYXV0aGVudGljYXRlZCBlcnJvcnMgKHNlZSBiLzMzMTQ3ODE4IGZvciBjb250ZXh0KSwgYnV0IGl0J3NcbiAqIHNhZmVyIHRvIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIGFzLWlzLlxuICovIGNsYXNzIGoge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy5oID0gdCwgdGhpcy5sID0gZSwgdGhpcy5tID0gbiwgdGhpcy5nID0gcywgdGhpcy50eXBlID0gXCJGaXJzdFBhcnR5XCIsIHRoaXMudXNlciA9IFAuRklSU1RfUEFSVFksIFxuICAgICAgICB0aGlzLnAgPSBuZXcgTWFwO1xuICAgIH1cbiAgICAvKiogR2V0cyBhbiBhdXRob3JpemF0aW9uIHRva2VuLCB1c2luZyBhIHByb3ZpZGVkIGZhY3RvcnkgZnVuY3Rpb24sIG9yIGZhbGxpbmcgYmFjayB0byBGaXJzdCBQYXJ0eSBHQVBJLiAqLyAgICBJKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nID8gdGhpcy5nKCkgOiAoXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIHJlYWxseSBpcyBhIEdhcGkgY2xpZW50LlxuICAgICAgICBNKCEoXCJvYmplY3RcIiAhPSB0eXBlb2YgdGhpcy5oIHx8IG51bGwgPT09IHRoaXMuaCB8fCAhdGhpcy5oLmF1dGggfHwgIXRoaXMuaC5hdXRoLmdldEF1dGhIZWFkZXJWYWx1ZUZvckZpcnN0UGFydHkpKSwgXG4gICAgICAgIHRoaXMuaC5hdXRoLmdldEF1dGhIZWFkZXJWYWx1ZUZvckZpcnN0UGFydHkoW10pKTtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcnMoKSB7XG4gICAgICAgIHRoaXMucC5zZXQoXCJYLUdvb2ctQXV0aFVzZXJcIiwgdGhpcy5sKTtcbiAgICAgICAgLy8gVXNlIGFycmF5IG5vdGF0aW9uIHRvIHByZXZlbnQgbWluaWZpY2F0aW9uXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLkkoKTtcbiAgICAgICAgcmV0dXJuIHQgJiYgdGhpcy5wLnNldChcIkF1dGhvcml6YXRpb25cIiwgdCksIHRoaXMubSAmJiB0aGlzLnAuc2V0KFwiWC1Hb29nLUlhbS1BdXRob3JpemF0aW9uLVRva2VuXCIsIHRoaXMubSksIFxuICAgICAgICB0aGlzLnA7XG4gICAgfVxufVxuXG4vKlxuICogUHJvdmlkZXMgdXNlciBjcmVkZW50aWFscyByZXF1aXJlZCBmb3IgdGhlIEZpcmVzdG9yZSBKYXZhU2NyaXB0IFNES1xuICogdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyLCB1c2luZyB0ZWNobmlxdWUgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZVxuICogdG8gYXBwbGljYXRpb25zIGhvc3RlZCBieSBHb29nbGUuXG4gKi8gY2xhc3MgVyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLmggPSB0LCB0aGlzLmwgPSBlLCB0aGlzLm0gPSBuLCB0aGlzLmcgPSBzO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgaih0aGlzLmgsIHRoaXMubCwgdGhpcy5tLCB0aGlzLmcpKTtcbiAgICB9XG4gICAgc3RhcnQodCwgZSkge1xuICAgICAgICAvLyBGaXJlIHdpdGggaW5pdGlhbCB1aWQuXG4gICAgICAgIHQuZW5xdWV1ZVJldHJ5YWJsZSgoKCkgPT4gZShQLkZJUlNUX1BBUlRZKSkpO1xuICAgIH1cbiAgICBzaHV0ZG93bigpIHt9XG4gICAgaW52YWxpZGF0ZVRva2VuKCkge31cbn1cblxuY2xhc3MgeiB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdCwgdGhpcy50eXBlID0gXCJBcHBDaGVja1wiLCB0aGlzLmhlYWRlcnMgPSBuZXcgTWFwLCB0ICYmIHQubGVuZ3RoID4gMCAmJiB0aGlzLmhlYWRlcnMuc2V0KFwieC1maXJlYmFzZS1hcHBjaGVja1wiLCB0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5cbmNsYXNzIEgge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5UID0gdCwgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hcHBDaGVjayA9IG51bGwsIHRoaXMuQSA9IG51bGw7XG4gICAgfVxuICAgIHN0YXJ0KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHQgPT4ge1xuICAgICAgICAgICAgbnVsbCAhPSB0LmVycm9yICYmIEMoXCJGaXJlYmFzZUFwcENoZWNrVG9rZW5Qcm92aWRlclwiLCBgRXJyb3IgZ2V0dGluZyBBcHAgQ2hlY2sgdG9rZW47IHVzaW5nIHBsYWNlaG9sZGVyIHRva2VuIGluc3RlYWQuIEVycm9yOiAke3QuZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnRva2VuICE9PSB0aGlzLkE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BID0gdC50b2tlbiwgQyhcIkZpcmViYXNlQXBwQ2hlY2tUb2tlblByb3ZpZGVyXCIsIGBSZWNlaXZlZCAke24gPyBcIm5ld1wiIDogXCJleGlzdGluZ1wifSB0b2tlbi5gKSwgXG4gICAgICAgICAgICBuID8gZSh0LnRva2VuKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm8gPSBlID0+IHtcbiAgICAgICAgICAgIHQuZW5xdWV1ZVJldHJ5YWJsZSgoKCkgPT4gbihlKSkpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzID0gdCA9PiB7XG4gICAgICAgICAgICBDKFwiRmlyZWJhc2VBcHBDaGVja1Rva2VuUHJvdmlkZXJcIiwgXCJBcHBDaGVjayBkZXRlY3RlZFwiKSwgdGhpcy5hcHBDaGVjayA9IHQsIHRoaXMuYXBwQ2hlY2suYWRkVG9rZW5MaXN0ZW5lcih0aGlzLm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLlQub25Jbml0KCh0ID0+IHModCkpKSwgXG4gICAgICAgIC8vIE91ciB1c2VycyBjYW4gaW5pdGlhbGl6ZSBBcHBDaGVjayBhZnRlciBGaXJlc3RvcmUsIHNvIHdlIGdpdmUgaXRcbiAgICAgICAgLy8gYSBjaGFuY2UgdG8gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGNvbXBvbmVudCBmcmFtZXdvcmsuXG4gICAgICAgIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hcHBDaGVjaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLlQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdCA/IHModCkgOiBcbiAgICAgICAgICAgICAgICAvLyBJZiBBcHBDaGVjayBpcyBzdGlsbCBub3QgYXZhaWxhYmxlLCBwcm9jZWVkIHdpdGhvdXQgaXQuXG4gICAgICAgICAgICAgICAgQyhcIkZpcmViYXNlQXBwQ2hlY2tUb2tlblByb3ZpZGVyXCIsIFwiQXBwQ2hlY2sgbm90IHlldCBkZXRlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIDApO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hcHBDaGVjayA/IHRoaXMuYXBwQ2hlY2suZ2V0VG9rZW4odCkudGhlbigodCA9PiB0ID8gKE0oXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC50b2tlbiksIFxuICAgICAgICB0aGlzLkEgPSB0LnRva2VuLCBuZXcgeih0LnRva2VuKSkgOiBudWxsKSkgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHtcbiAgICAgICAgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMDtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuYXBwQ2hlY2sgJiYgdGhpcy5hcHBDaGVjay5yZW1vdmVUb2tlbkxpc3RlbmVyKHRoaXMubyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIEFwcENoZWNrIHRva2VuIHByb3ZpZGVyIHRoYXQgYWx3YXlzIHlpZWxkcyBhbiBlbXB0eSB0b2tlbi5cbiAqIEBpbnRlcm5hbFxuICovIGNsYXNzIEoge1xuICAgIGdldFRva2VuKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyB6KFwiXCIpKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRva2VuKCkge31cbiAgICBzdGFydCh0LCBlKSB7fVxuICAgIHNodXRkb3duKCkge31cbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBDcmVkZW50aWFsc1Byb3ZpZGVyIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZlxuICogdGhlIGNyZWRlbnRpYWxzIHBhc3NlZCBpbi5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogR2VuZXJhdGVzIGBuQnl0ZXNgIG9mIHJhbmRvbSBieXRlcy5cbiAqXG4gKiBJZiBgbkJ5dGVzIDwgMGAgLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gWSh0KSB7XG4gICAgLy8gUG9seWZpbGxzIGZvciBJRSBhbmQgV2ViV29ya2VyIGJ5IHVzaW5nIGBzZWxmYCBhbmQgYG1zQ3J5cHRvYCB3aGVuIGBjcnlwdG9gIGlzIG5vdCBhdmFpbGFibGUuXG4gICAgY29uc3QgZSA9IFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZiAmJiAoc2VsZi5jcnlwdG8gfHwgc2VsZi5tc0NyeXB0byksIG4gPSBuZXcgVWludDhBcnJheSh0KTtcbiAgICBpZiAoZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUuZ2V0UmFuZG9tVmFsdWVzKSBlLmdldFJhbmRvbVZhbHVlcyhuKTsgZWxzZSBcbiAgICAvLyBGYWxscyBiYWNrIHRvIE1hdGgucmFuZG9tXG4gICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0OyBlKyspIG5bZV0gPSBNYXRoLmZsb29yKDI1NiAqIE1hdGgucmFuZG9tKCkpO1xuICAgIHJldHVybiBuO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBYIHtcbiAgICBzdGF0aWMgUigpIHtcbiAgICAgICAgLy8gQWxwaGFudW1lcmljIGNoYXJhY3RlcnNcbiAgICAgICAgY29uc3QgdCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIiwgZSA9IE1hdGguZmxvb3IoMjU2IC8gdC5sZW5ndGgpICogdC5sZW5ndGg7XG4gICAgICAgIC8vIFRoZSBsYXJnZXN0IGJ5dGUgdmFsdWUgdGhhdCBpcyBhIG11bHRpcGxlIG9mIGBjaGFyLmxlbmd0aGAuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBcIlwiO1xuICAgICAgICBmb3IgKDtuLmxlbmd0aCA8IDIwOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBZKDQwKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7ICsraSkgXG4gICAgICAgICAgICAvLyBPbmx5IGFjY2VwdCB2YWx1ZXMgdGhhdCBhcmUgWzAsIG1heE11bHRpcGxlKSwgdGhpcyBlbnN1cmVzIHRoZXkgY2FuXG4gICAgICAgICAgICAvLyBiZSBldmVubHkgbWFwcGVkIHRvIGluZGljZXMgb2YgYGNoYXJzYCB2aWEgYSBtb2R1bG8gb3BlcmF0aW9uLlxuICAgICAgICAgICAgbi5sZW5ndGggPCAyMCAmJiBzW2ldIDwgZSAmJiAobiArPSB0LmNoYXJBdChzW2ldICUgdC5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFoodCwgZSkge1xuICAgIHJldHVybiB0IDwgZSA/IC0xIDogdCA+IGUgPyAxIDogMDtcbn1cblxuLyoqIEhlbHBlciB0byBjb21wYXJlIGFycmF5cyB1c2luZyBpc0VxdWFsKCkuICovIGZ1bmN0aW9uIHR0KHQsIGUsIG4pIHtcbiAgICByZXR1cm4gdC5sZW5ndGggPT09IGUubGVuZ3RoICYmIHQuZXZlcnkoKCh0LCBzKSA9PiBuKHQsIGVbc10pKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW1tZWRpYXRlIGxleGljb2dyYXBoaWNhbGx5LWZvbGxvd2luZyBzdHJpbmcuIFRoaXMgaXMgdXNlZnVsIHRvXG4gKiBjb25zdHJ1Y3QgYW4gaW5jbHVzaXZlIHJhbmdlIGZvciBpbmRleGVkZGIgaXRlcmF0b3JzLlxuICovIGZ1bmN0aW9uIGV0KHQpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGlucHV0IHN0cmluZywgd2l0aCBhbiBhZGRpdGlvbmFsIE5VTCBieXRlIGFwcGVuZGVkLlxuICAgIHJldHVybiB0ICsgXCJcXDBcIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoZSBlYXJsaWVzdCBkYXRlIHN1cHBvcnRlZCBieSBGaXJlc3RvcmUgdGltZXN0YW1wcyAoMDAwMS0wMS0wMVQwMDowMDowMFopLlxuLyoqXG4gKiBBIGBUaW1lc3RhbXBgIHJlcHJlc2VudHMgYSBwb2ludCBpbiB0aW1lIGluZGVwZW5kZW50IG9mIGFueSB0aW1lIHpvbmUgb3JcbiAqIGNhbGVuZGFyLCByZXByZXNlbnRlZCBhcyBzZWNvbmRzIGFuZCBmcmFjdGlvbnMgb2Ygc2Vjb25kcyBhdCBuYW5vc2Vjb25kXG4gKiByZXNvbHV0aW9uIGluIFVUQyBFcG9jaCB0aW1lLlxuICpcbiAqIEl0IGlzIGVuY29kZWQgdXNpbmcgdGhlIFByb2xlcHRpYyBHcmVnb3JpYW4gQ2FsZW5kYXIgd2hpY2ggZXh0ZW5kcyB0aGVcbiAqIEdyZWdvcmlhbiBjYWxlbmRhciBiYWNrd2FyZHMgdG8geWVhciBvbmUuIEl0IGlzIGVuY29kZWQgYXNzdW1pbmcgYWxsIG1pbnV0ZXNcbiAqIGFyZSA2MCBzZWNvbmRzIGxvbmcsIGkuZS4gbGVhcCBzZWNvbmRzIGFyZSBcInNtZWFyZWRcIiBzbyB0aGF0IG5vIGxlYXAgc2Vjb25kXG4gKiB0YWJsZSBpcyBuZWVkZWQgZm9yIGludGVycHJldGF0aW9uLiBSYW5nZSBpcyBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvXG4gKiA5OTk5LTEyLTMxVDIzOjU5OjU5Ljk5OTk5OTk5OVouXG4gKlxuICogRm9yIGV4YW1wbGVzIGFuZCBmdXJ0aGVyIHNwZWNpZmljYXRpb25zLCByZWZlciB0byB0aGVcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3Byb3RvYnVmL2Jsb2IvbWFzdGVyL3NyYy9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIHwgVGltZXN0YW1wIGRlZmluaXRpb259LlxuICovXG5jbGFzcyBudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBVVEMgdGltZSBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogICAgIDE5NzAtMDEtMDFUMDA6MDA6MDBaLiBNdXN0IGJlIGZyb20gMDAwMS0wMS0wMVQwMDowMDowMFogdG9cbiAgICAgKiAgICAgOTk5OS0xMi0zMVQyMzo1OTo1OVogaW5jbHVzaXZlLlxuICAgICAqIEBwYXJhbSBuYW5vc2Vjb25kcyAtIFRoZSBub24tbmVnYXRpdmUgZnJhY3Rpb25zIG9mIGEgc2Vjb25kIGF0IG5hbm9zZWNvbmRcbiAgICAgKiAgICAgcmVzb2x1dGlvbi4gTmVnYXRpdmUgc2Vjb25kIHZhbHVlcyB3aXRoIGZyYWN0aW9ucyBtdXN0IHN0aWxsIGhhdmVcbiAgICAgKiAgICAgbm9uLW5lZ2F0aXZlIG5hbm9zZWNvbmRzIHZhbHVlcyB0aGF0IGNvdW50IGZvcndhcmQgaW4gdGltZS4gTXVzdCBiZVxuICAgICAqICAgICBmcm9tIDAgdG8gOTk5LDk5OSw5OTkgaW5jbHVzaXZlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBVVEMgdGltZSBzaW5jZSBVbml4IGVwb2NoIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBmcmFjdGlvbnMgb2YgYSBzZWNvbmQgYXQgbmFub3NlY29uZCByZXNvbHV0aW9uLipcbiAgICAgKi9cbiAgICBlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY29uZHMgPSB0LCB0aGlzLm5hbm9zZWNvbmRzID0gZSwgZSA8IDApIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAoZSA+PSAxZTkpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAodCA8IC02MjEzNTU5NjgwMCkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcIlRpbWVzdGFtcCBzZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyB0KTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJyZWFrIGluIHRoZSB5ZWFyIDEwLDAwMC5cbiAgICAgICAgICAgICAgICBpZiAodCA+PSAyNTM0MDIzMDA4MDApIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIHdpdGggdGhlIGN1cnJlbnQgZGF0ZSwgd2l0aCBtaWxsaXNlY29uZCBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB0aW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgICovICAgIHN0YXRpYyBub3coKSB7XG4gICAgICAgIHJldHVybiBudC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBpbml0aWFsaXplIHRoZSBgVGltZXN0YW1wYCBmcm9tLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzIHRoZSBnaXZlblxuICAgICAqICAgICBkYXRlLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbURhdGUodCkge1xuICAgICAgICByZXR1cm4gbnQuZnJvbU1pbGxpcyh0LmdldFRpbWUoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIGZyb20gdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlsbGlzZWNvbmRzIC0gTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogICAgIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzIHRoZSBnaXZlblxuICAgICAqICAgICBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbU1pbGxpcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBNYXRoLmZsb29yKHQgLyAxZTMpLCBuID0gTWF0aC5mbG9vcigxZTYgKiAodCAtIDFlMyAqIGUpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBudChlLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBgVGltZXN0YW1wYCB0byBhIEphdmFTY3JpcHQgYERhdGVgIG9iamVjdC4gVGhpcyBjb252ZXJzaW9uXG4gICAgICogY2F1c2VzIGEgbG9zcyBvZiBwcmVjaXNpb24gc2luY2UgYERhdGVgIG9iamVjdHMgb25seSBzdXBwb3J0IG1pbGxpc2Vjb25kXG4gICAgICogcHJlY2lzaW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzXG4gICAgICogICAgIHRoaXMgYFRpbWVzdGFtcGAsIHdpdGggbWlsbGlzZWNvbmQgcHJlY2lzaW9uLlxuICAgICAqLyAgICB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnRvTWlsbGlzKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGBUaW1lc3RhbXBgIHRvIGEgbnVtZXJpYyB0aW1lc3RhbXAgKGluIG1pbGxpc2Vjb25kcyBzaW5jZVxuICAgICAqIGVwb2NoKS4gVGhpcyBvcGVyYXRpb24gY2F1c2VzIGEgbG9zcyBvZiBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcG9pbnQgaW4gdGltZSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgdGltZXN0YW1wLCByZXByZXNlbnRlZCBhc1xuICAgICAqICAgICB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqLyAgICB0b01pbGxpcygpIHtcbiAgICAgICAgcmV0dXJuIDFlMyAqIHRoaXMuc2Vjb25kcyArIHRoaXMubmFub3NlY29uZHMgLyAxZTY7XG4gICAgfVxuICAgIF9jb21wYXJlVG8odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRzID09PSB0LnNlY29uZHMgPyBaKHRoaXMubmFub3NlY29uZHMsIHQubmFub3NlY29uZHMpIDogWih0aGlzLnNlY29uZHMsIHQuc2Vjb25kcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBUaW1lc3RhbXBgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBUaGUgYFRpbWVzdGFtcGAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBgVGltZXN0YW1wYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Vjb25kcyA9PT0gdGhpcy5zZWNvbmRzICYmIHQubmFub3NlY29uZHMgPT09IHRoaXMubmFub3NlY29uZHM7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGBUaW1lc3RhbXBgLiAqLyAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiVGltZXN0YW1wKHNlY29uZHM9XCIgKyB0aGlzLnNlY29uZHMgKyBcIiwgbmFub3NlY29uZHM9XCIgKyB0aGlzLm5hbm9zZWNvbmRzICsgXCIpXCI7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBgVGltZXN0YW1wYC4gKi8gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2Vjb25kczogdGhpcy5zZWNvbmRzLFxuICAgICAgICAgICAgbmFub3NlY29uZHM6IHRoaXMubmFub3NlY29uZHNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBvYmplY3QgdG8gYSBwcmltaXRpdmUgc3RyaW5nLCB3aGljaCBhbGxvd3MgYFRpbWVzdGFtcGAgb2JqZWN0c1xuICAgICAqIHRvIGJlIGNvbXBhcmVkIHVzaW5nIHRoZSBgPmAsIGA8PWAsIGA+PWAgYW5kIGA+YCBvcGVyYXRvcnMuXG4gICAgICovICAgIHZhbHVlT2YoKSB7XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgb2YgdGhlIGZvcm0gPHNlY29uZHM+LjxuYW5vc2Vjb25kcz4gd2hlcmVcbiAgICAgICAgLy8gPHNlY29uZHM+IGlzIHRyYW5zbGF0ZWQgdG8gaGF2ZSBhIG5vbi1uZWdhdGl2ZSB2YWx1ZSBhbmQgYm90aCA8c2Vjb25kcz5cbiAgICAgICAgLy8gYW5kIDxuYW5vc2Vjb25kcz4gYXJlIGxlZnQtcGFkZGVkIHdpdGggemVyb2VzIHRvIGJlIGEgY29uc2lzdGVudCBsZW5ndGguXG4gICAgICAgIC8vIFN0cmluZ3Mgd2l0aCB0aGlzIGZvcm1hdCB0aGVuIGhhdmUgYSBsZXhpb2dyYXBoaWNhbCBvcmRlcmluZyB0aGF0IG1hdGNoZXNcbiAgICAgICAgLy8gdGhlIGV4cGVjdGVkIG9yZGVyaW5nLiBUaGUgPHNlY29uZHM+IHRyYW5zbGF0aW9uIGlzIGRvbmUgdG8gYXZvaWQgaGF2aW5nXG4gICAgICAgIC8vIGEgbGVhZGluZyBuZWdhdGl2ZSBzaWduIChpLmUuIGEgbGVhZGluZyAnLScgY2hhcmFjdGVyKSBpbiBpdHMgc3RyaW5nXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uLCB3aGljaCB3b3VsZCBhZmZlY3QgaXRzIGxleGlvZ3JhcGhpY2FsIG9yZGVyaW5nLlxuICAgICAgICBjb25zdCB0ID0gdGhpcy5zZWNvbmRzIC0gLTYyMTM1NTk2ODAwO1xuICAgICAgICAvLyBOb3RlOiBVcCB0byAxMiBkZWNpbWFsIGRpZ2l0cyBhcmUgcmVxdWlyZWQgdG8gcmVwcmVzZW50IGFsbCB2YWxpZFxuICAgICAgICAvLyAnc2Vjb25kcycgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodCkucGFkU3RhcnQoMTIsIFwiMFwiKSArIFwiLlwiICsgU3RyaW5nKHRoaXMubmFub3NlY29uZHMpLnBhZFN0YXJ0KDksIFwiMFwiKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgdmVyc2lvbiBvZiBhIGRvY3VtZW50IGluIEZpcmVzdG9yZS4gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgdmVyc2lvblxuICogdGltZXN0YW1wLCBzdWNoIGFzIHVwZGF0ZV90aW1lIG9yIHJlYWRfdGltZS5cbiAqLyBjbGFzcyBzdCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVGltZXN0YW1wKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzdCh0KTtcbiAgICB9XG4gICAgc3RhdGljIG1pbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzdChuZXcgbnQoMCwgMCkpO1xuICAgIH1cbiAgICBzdGF0aWMgbWF4KCkge1xuICAgICAgICByZXR1cm4gbmV3IHN0KG5ldyBudCgyNTM0MDIzMDA3OTksIDk5OTk5OTk5OSkpO1xuICAgIH1cbiAgICBjb21wYXJlVG8odCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAuX2NvbXBhcmVUbyh0LnRpbWVzdGFtcCk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAuaXNFcXVhbCh0LnRpbWVzdGFtcCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgbnVtYmVyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZXJzaW9uIGZvciB1c2UgaW4gc3BlYyB0ZXN0cy4gKi8gICAgdG9NaWNyb3NlY29uZHMoKSB7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gbWljcm9zZWNvbmRzLlxuICAgICAgICByZXR1cm4gMWU2ICogdGhpcy50aW1lc3RhbXAuc2Vjb25kcyArIHRoaXMudGltZXN0YW1wLm5hbm9zZWNvbmRzIC8gMWUzO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiU25hcHNob3RWZXJzaW9uKFwiICsgdGhpcy50aW1lc3RhbXAudG9TdHJpbmcoKSArIFwiKVwiO1xuICAgIH1cbiAgICB0b1RpbWVzdGFtcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUGF0aCByZXByZXNlbnRzIGFuIG9yZGVyZWQgc2VxdWVuY2Ugb2Ygc3RyaW5nIHNlZ21lbnRzLlxuICovXG5jbGFzcyBpdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICB2b2lkIDAgPT09IGUgPyBlID0gMCA6IGUgPiB0Lmxlbmd0aCAmJiBPKCksIHZvaWQgMCA9PT0gbiA/IG4gPSB0Lmxlbmd0aCAtIGUgOiBuID4gdC5sZW5ndGggLSBlICYmIE8oKSwgXG4gICAgICAgIHRoaXMuc2VnbWVudHMgPSB0LCB0aGlzLm9mZnNldCA9IGUsIHRoaXMubGVuID0gbjtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IGl0LmNvbXBhcmF0b3IodGhpcywgdCk7XG4gICAgfVxuICAgIGNoaWxkKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuc2VnbWVudHMuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMubGltaXQoKSk7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgaXQgPyB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgZS5wdXNoKHQpO1xuICAgICAgICB9KSkgOiBlLnB1c2godCksIHRoaXMuY29uc3RydWN0KGUpO1xuICAgIH1cbiAgICAvKiogVGhlIGluZGV4IG9mIG9uZSBwYXN0IHRoZSBsYXN0IHNlZ21lbnQgb2YgdGhlIHBhdGguICovICAgIGxpbWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKyB0aGlzLmxlbmd0aDtcbiAgICB9XG4gICAgcG9wRmlyc3QodCkge1xuICAgICAgICByZXR1cm4gdCA9IHZvaWQgMCA9PT0gdCA/IDEgOiB0LCB0aGlzLmNvbnN0cnVjdCh0aGlzLnNlZ21lbnRzLCB0aGlzLm9mZnNldCArIHQsIHRoaXMubGVuZ3RoIC0gdCk7XG4gICAgfVxuICAgIHBvcExhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdCh0aGlzLnNlZ21lbnRzLCB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgZmlyc3RTZWdtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c1t0aGlzLm9mZnNldF07XG4gICAgfVxuICAgIGxhc3RTZWdtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgZ2V0KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHNbdGhpcy5vZmZzZXQgKyB0XTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IHRoaXMubGVuZ3RoO1xuICAgIH1cbiAgICBpc1ByZWZpeE9mKHQpIHtcbiAgICAgICAgaWYgKHQubGVuZ3RoIDwgdGhpcy5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0aGlzLmxlbmd0aDsgZSsrKSBpZiAodGhpcy5nZXQoZSkgIT09IHQuZ2V0KGUpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgaXNJbW1lZGlhdGVQYXJlbnRPZih0KSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCArIDEgIT09IHQubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdGhpcy5sZW5ndGg7IGUrKykgaWYgKHRoaXMuZ2V0KGUpICE9PSB0LmdldChlKSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGZvckVhY2godCkge1xuICAgICAgICBmb3IgKGxldCBlID0gdGhpcy5vZmZzZXQsIG4gPSB0aGlzLmxpbWl0KCk7IGUgPCBuOyBlKyspIHQodGhpcy5zZWdtZW50c1tlXSk7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxpbWl0KCkpO1xuICAgIH1cbiAgICBzdGF0aWMgY29tcGFyYXRvcih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBNYXRoLm1pbih0Lmxlbmd0aCwgZS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IG47IHMrKykge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0KHMpLCBpID0gZS5nZXQocyk7XG4gICAgICAgICAgICBpZiAobiA8IGkpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChuID4gaSkgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQubGVuZ3RoIDwgZS5sZW5ndGggPyAtMSA6IHQubGVuZ3RoID4gZS5sZW5ndGggPyAxIDogMDtcbiAgICB9XG59XG5cbi8qKlxuICogQSBzbGFzaC1zZXBhcmF0ZWQgcGF0aCBmb3IgbmF2aWdhdGluZyByZXNvdXJjZXMgKGRvY3VtZW50cyBhbmQgY29sbGVjdGlvbnMpXG4gKiB3aXRoaW4gRmlyZXN0b3JlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNsYXNzIHJ0IGV4dGVuZHMgaXQge1xuICAgIGNvbnN0cnVjdCh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgcnQodCwgZSwgbik7XG4gICAgfVxuICAgIGNhbm9uaWNhbFN0cmluZygpIHtcbiAgICAgICAgLy8gTk9URTogVGhlIGNsaWVudCBpcyBpZ25vcmFudCBvZiBhbnkgcGF0aCBzZWdtZW50cyBjb250YWluaW5nIGVzY2FwZVxuICAgICAgICAvLyBzZXF1ZW5jZXMgKGUuZy4gX19pZDEyM19fKSBhbmQganVzdCBwYXNzZXMgdGhlbSB0aHJvdWdoIHJhdyAodGhleSBleGlzdFxuICAgICAgICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBmcmVxdWVudGx5KS5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvdXJjZSBwYXRoIGZyb20gdGhlIGdpdmVuIHNsYXNoLWRlbGltaXRlZCBzdHJpbmcuIElmIG11bHRpcGxlXG4gICAgICogYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYWxsIGNvbXBvbmVudHMgYXJlIGNvbWJpbmVkLiBMZWFkaW5nIGFuZCB0cmFpbGluZ1xuICAgICAqIHNsYXNoZXMgZnJvbSBhbGwgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21TdHJpbmcoLi4udCkge1xuICAgICAgICAvLyBOT1RFOiBUaGUgY2xpZW50IGlzIGlnbm9yYW50IG9mIGFueSBwYXRoIHNlZ21lbnRzIGNvbnRhaW5pbmcgZXNjYXBlXG4gICAgICAgIC8vIHNlcXVlbmNlcyAoZS5nLiBfX2lkMTIzX18pIGFuZCBqdXN0IHBhc3NlcyB0aGVtIHRocm91Z2ggcmF3ICh0aGV5IGV4aXN0XG4gICAgICAgIC8vIGZvciBsZWdhY3kgcmVhc29ucyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGZyZXF1ZW50bHkpLlxuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSB7XG4gICAgICAgICAgICBpZiAobi5pbmRleE9mKFwiLy9cIikgPj0gMCkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBzZWdtZW50ICgke259KS4gUGF0aHMgbXVzdCBub3QgY29udGFpbiAvLyBpbiB0aGVtLmApO1xuICAgICAgICAgICAgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhbGluZyBzbGFzaGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKC4uLm4uc3BsaXQoXCIvXCIpLmZpbHRlcigodCA9PiB0Lmxlbmd0aCA+IDApKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBydChlKTtcbiAgICB9XG4gICAgc3RhdGljIGVtcHR5UGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBydChbXSk7XG4gICAgfVxufVxuXG5jb25zdCBvdCA9IC9eW19hLXpBLVpdW19hLXpBLVowLTldKiQvO1xuXG4vKipcbiAqIEEgZG90LXNlcGFyYXRlZCBwYXRoIGZvciBuYXZpZ2F0aW5nIHN1Yi1vYmplY3RzIHdpdGhpbiBhIGRvY3VtZW50LlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgdXQgZXh0ZW5kcyBpdCB7XG4gICAgY29uc3RydWN0KHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB1dCh0LCBlLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgY291bGQgYmUgdXNlZCBhcyBhIHNlZ21lbnQgaW4gYSBmaWVsZCBwYXRoXG4gICAgICogd2l0aG91dCBlc2NhcGluZy5cbiAgICAgKi8gICAgc3RhdGljIGlzVmFsaWRJZGVudGlmaWVyKHQpIHtcbiAgICAgICAgcmV0dXJuIG90LnRlc3QodCk7XG4gICAgfVxuICAgIGNhbm9uaWNhbFN0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLm1hcCgodCA9PiAodCA9IHQucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2UoL2AvZywgXCJcXFxcYFwiKSwgXG4gICAgICAgIHV0LmlzVmFsaWRJZGVudGlmaWVyKHQpIHx8ICh0ID0gXCJgXCIgKyB0ICsgXCJgXCIpLCB0KSkpLmpvaW4oXCIuXCIpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGZpZWxkIHJlZmVyZW5jZXMgdGhlIGtleSBvZiBhIGRvY3VtZW50LlxuICAgICAqLyAgICBpc0tleUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gMSA9PT0gdGhpcy5sZW5ndGggJiYgXCJfX25hbWVfX1wiID09PSB0aGlzLmdldCgwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGZpZWxkIGRlc2lnbmF0aW5nIHRoZSBrZXkgb2YgYSBkb2N1bWVudC5cbiAgICAgKi8gICAgc3RhdGljIGtleUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gbmV3IHV0KFsgXCJfX25hbWVfX1wiIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBmaWVsZCBzdHJpbmcgZnJvbSB0aGUgZ2l2ZW4gc2VydmVyLWZvcm1hdHRlZCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiAtIFNwbGl0dGluZyB0aGUgZW1wdHkgc3RyaW5nIGlzIG5vdCBhbGxvd2VkIChmb3Igbm93IGF0IGxlYXN0KS5cbiAgICAgKiAtIEVtcHR5IHNlZ21lbnRzIHdpdGhpbiB0aGUgc3RyaW5nIChlLmcuIGlmIHRoZXJlIGFyZSB0d28gY29uc2VjdXRpdmVcbiAgICAgKiAgIHNlcGFyYXRvcnMpIGFyZSBub3QgYWxsb3dlZC5cbiAgICAgKlxuICAgICAqIFRPRE8oYi8zNzI0NDE1Nyk6IHdlIHNob3VsZCBtYWtlIHRoaXMgbW9yZSBzdHJpY3QuIFJpZ2h0IG5vdywgaXQgYWxsb3dzXG4gICAgICogbm9uLWlkZW50aWZpZXIgcGF0aCBjb21wb25lbnRzLCBldmVuIGlmIHRoZXkgYXJlbid0IGVzY2FwZWQuXG4gICAgICovICAgIHN0YXRpYyBmcm9tU2VydmVyRm9ybWF0KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICBsZXQgbiA9IFwiXCIsIHMgPSAwO1xuICAgICAgICBjb25zdCBpID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKDAgPT09IG4ubGVuZ3RoKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIGZpZWxkIHBhdGggKCR7dH0pLiBQYXRocyBtdXN0IG5vdCBiZSBlbXB0eSwgYmVnaW4gd2l0aCAnLicsIGVuZCB3aXRoICcuJywgb3IgY29udGFpbiAnLi4nYCk7XG4gICAgICAgICAgICBlLnB1c2gobiksIG4gPSBcIlwiO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgciA9ICExO1xuICAgICAgICBmb3IgKDtzIDwgdC5sZW5ndGg7ICkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHRbc107XG4gICAgICAgICAgICBpZiAoXCJcXFxcXCIgPT09IGUpIHtcbiAgICAgICAgICAgICAgICBpZiAocyArIDEgPT09IHQubGVuZ3RoKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiUGF0aCBoYXMgdHJhaWxpbmcgZXNjYXBlIGNoYXJhY3RlcjogXCIgKyB0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdFtzICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKFwiXFxcXFwiICE9PSBlICYmIFwiLlwiICE9PSBlICYmIFwiYFwiICE9PSBlKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiUGF0aCBoYXMgaW52YWxpZCBlc2NhcGUgc2VxdWVuY2U6IFwiICsgdCk7XG4gICAgICAgICAgICAgICAgbiArPSBlLCBzICs9IDI7XG4gICAgICAgICAgICB9IGVsc2UgXCJgXCIgPT09IGUgPyAociA9ICFyLCBzKyspIDogXCIuXCIgIT09IGUgfHwgciA/IChuICs9IGUsIHMrKykgOiAoaSgpLCBzKyspO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpKCksIHIpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJVbnRlcm1pbmF0ZWQgYCBpbiBwYXRoOiBcIiArIHQpO1xuICAgICAgICByZXR1cm4gbmV3IHV0KGUpO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHlQYXRoKCkge1xuICAgICAgICByZXR1cm4gbmV3IHV0KFtdKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGNsYXNzIGN0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUGF0aCh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgY3QocnQuZnJvbVN0cmluZyh0KSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tTmFtZSh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgY3QocnQuZnJvbVN0cmluZyh0KS5wb3BGaXJzdCg1KSk7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjdChydC5lbXB0eVBhdGgoKSk7XG4gICAgfVxuICAgIGdldCBjb2xsZWN0aW9uR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgucG9wTGFzdCgpLmxhc3RTZWdtZW50KCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIGRvY3VtZW50IGlzIGluIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbklkLiAqLyAgICBoYXNDb2xsZWN0aW9uSWQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmxlbmd0aCA+PSAyICYmIHRoaXMucGF0aC5nZXQodGhpcy5wYXRoLmxlbmd0aCAtIDIpID09PSB0O1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgY29sbGVjdGlvbiBncm91cCAoaS5lLiB0aGUgbmFtZSBvZiB0aGUgcGFyZW50IGNvbGxlY3Rpb24pIGZvciB0aGlzIGtleS4gKi8gICAgZ2V0Q29sbGVjdGlvbkdyb3VwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmdldCh0aGlzLnBhdGgubGVuZ3RoIC0gMik7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBmdWxseSBxdWFsaWZpZWQgcGF0aCB0byB0aGUgcGFyZW50IGNvbGxlY3Rpb24uICovICAgIGdldENvbGxlY3Rpb25QYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnBvcExhc3QoKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ICYmIDAgPT09IHJ0LmNvbXBhcmF0b3IodGhpcy5wYXRoLCB0LnBhdGgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC50b1N0cmluZygpO1xuICAgIH1cbiAgICBzdGF0aWMgY29tcGFyYXRvcih0LCBlKSB7XG4gICAgICAgIHJldHVybiBydC5jb21wYXJhdG9yKHQucGF0aCwgZS5wYXRoKTtcbiAgICB9XG4gICAgc3RhdGljIGlzRG9jdW1lbnRLZXkodCkge1xuICAgICAgICByZXR1cm4gdC5sZW5ndGggJSAyID09IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgZG9jdW1lbnQga2V5IHdpdGggdGhlIGdpdmVuIHNlZ21lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlZ21lbnRzIC0gVGhlIHNlZ21lbnRzIG9mIHRoZSBwYXRoIHRvIHRoZSBkb2N1bWVudFxuICAgICAqIEByZXR1cm5zIEEgbmV3IGluc3RhbmNlIG9mIERvY3VtZW50S2V5XG4gICAgICovICAgIHN0YXRpYyBmcm9tU2VnbWVudHModCkge1xuICAgICAgICByZXR1cm4gbmV3IGN0KG5ldyBydCh0LnNsaWNlKCkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRoZSBpbml0aWFsIG11dGF0aW9uIGJhdGNoIGlkIGZvciBlYWNoIGluZGV4LiBHZXRzIHVwZGF0ZWQgZHVyaW5nIGluZGV4XG4gKiBiYWNrZmlsbC5cbiAqL1xuLyoqXG4gKiBBbiBpbmRleCBkZWZpbml0aW9uIGZvciBmaWVsZCBpbmRleGVzIGluIEZpcmVzdG9yZS5cbiAqXG4gKiBFdmVyeSBpbmRleCBpcyBhc3NvY2lhdGVkIHdpdGggYSBjb2xsZWN0aW9uLiBUaGUgZGVmaW5pdGlvbiBjb250YWlucyBhIGxpc3RcbiAqIG9mIGZpZWxkcyBhbmQgdGhlaXIgaW5kZXgga2luZCAod2hpY2ggY2FuIGJlIGBBU0NFTkRJTkdgLCBgREVTQ0VORElOR2Agb3JcbiAqIGBDT05UQUlOU2AgZm9yIEFycmF5Q29udGFpbnMvQXJyYXlDb250YWluc0FueSBxdWVyaWVzKS5cbiAqXG4gKiBVbmxpa2UgdGhlIGJhY2tlbmQsIHRoZSBTREsgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGNvbGxlY3Rpb24gb3JcbiAqIGNvbGxlY3Rpb24gZ3JvdXAtc2NvcGVkIGluZGljZXMuIEV2ZXJ5IGluZGV4IGNhbiBiZSB1c2VkIGZvciBib3RoIHNpbmdsZVxuICogY29sbGVjdGlvbiBhbmQgY29sbGVjdGlvbiBncm91cCBxdWVyaWVzLlxuICovXG5jbGFzcyBhdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IElELiBSZXR1cm5zIC0xIGlmIHRoZSBpbmRleCBJRCBpcyBub3QgYXZhaWxhYmxlIChlLmcuIHRoZSBpbmRleFxuICAgICAqIGhhcyBub3QgeWV0IGJlZW4gcGVyc2lzdGVkKS5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKiogVGhlIGNvbGxlY3Rpb24gSUQgdGhpcyBpbmRleCBhcHBsaWVzIHRvLiAqL1xuICAgIGUsIFxuICAgIC8qKiBUaGUgZmllbGQgc2VnbWVudHMgZm9yIHRoaXMgaW5kZXguICovXG4gICAgbiwgXG4gICAgLyoqIFNob3dzIGhvdyB1cC10by1kYXRlIHRoZSBpbmRleCBpcyBmb3IgdGhlIGN1cnJlbnQgdXNlci4gKi9cbiAgICBzKSB7XG4gICAgICAgIHRoaXMuaW5kZXhJZCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy5maWVsZHMgPSBuLCB0aGlzLmluZGV4U3RhdGUgPSBzO1xuICAgIH1cbn1cblxuLyoqIEFuIElEIGZvciBhbiBpbmRleCB0aGF0IGhhcyBub3QgeWV0IGJlZW4gYWRkZWQgdG8gcGVyc2lzdGVuY2UuICAqL1xuLyoqIFJldHVybnMgdGhlIEFycmF5Q29udGFpbnMvQXJyYXlDb250YWluc0FueSBzZWdtZW50IGZvciB0aGlzIGluZGV4LiAqL1xuZnVuY3Rpb24gaHQodCkge1xuICAgIHJldHVybiB0LmZpZWxkcy5maW5kKCh0ID0+IDIgLyogQ09OVEFJTlMgKi8gPT09IHQua2luZCkpO1xufVxuXG4vKiogUmV0dXJucyBhbGwgZGlyZWN0aW9uYWwgKGFzY2VuZGluZy9kZXNjZW5kaW5nKSBzZWdtZW50cyBmb3IgdGhpcyBpbmRleC4gKi8gZnVuY3Rpb24gbHQodCkge1xuICAgIHJldHVybiB0LmZpZWxkcy5maWx0ZXIoKHQgPT4gMiAvKiBDT05UQUlOUyAqLyAhPT0gdC5raW5kKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JkZXIgb2YgdGhlIGRvY3VtZW50IGtleSBjb21wb25lbnQgZm9yIHRoZSBnaXZlbiBpbmRleC5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBXZWIgSW5kZXhlZERiIGltcGxlbWVudGF0aW9uLlxuICovXG4vKipcbiAqIENvbXBhcmVzIGluZGV4ZXMgYnkgY29sbGVjdGlvbiBncm91cCBhbmQgc2VnbWVudHMuIElnbm9yZXMgdXBkYXRlIHRpbWUgYW5kXG4gKiBpbmRleCBJRC5cbiAqL1xuZnVuY3Rpb24gZnQodCwgZSkge1xuICAgIGxldCBuID0gWih0LmNvbGxlY3Rpb25Hcm91cCwgZS5jb2xsZWN0aW9uR3JvdXApO1xuICAgIGlmICgwICE9PSBuKSByZXR1cm4gbjtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IE1hdGgubWluKHQuZmllbGRzLmxlbmd0aCwgZS5maWVsZHMubGVuZ3RoKTsgKytzKSBpZiAobiA9IF90KHQuZmllbGRzW3NdLCBlLmZpZWxkc1tzXSksIFxuICAgIDAgIT09IG4pIHJldHVybiBuO1xuICAgIHJldHVybiBaKHQuZmllbGRzLmxlbmd0aCwgZS5maWVsZHMubGVuZ3RoKTtcbn1cblxuLyoqIFJldHVybnMgYSBkZWJ1ZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZmllbGQgaW5kZXggKi8gYXQuVU5LTk9XTl9JRCA9IC0xO1xuXG4vKiogQW4gaW5kZXggY29tcG9uZW50IGNvbnNpc3Rpbmcgb2YgZmllbGQgcGF0aCBhbmQgaW5kZXggdHlwZS4gICovXG5jbGFzcyBkdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSBmaWVsZCBwYXRoIG9mIHRoZSBjb21wb25lbnQuICovXG4gICAgdCwgXG4gICAgLyoqIFRoZSBmaWVsZHMgc29ydGluZyBvcmRlci4gKi9cbiAgICBlKSB7XG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gdCwgdGhpcy5raW5kID0gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF90KHQsIGUpIHtcbiAgICBjb25zdCBuID0gdXQuY29tcGFyYXRvcih0LmZpZWxkUGF0aCwgZS5maWVsZFBhdGgpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IFoodC5raW5kLCBlLmtpbmQpO1xufVxuXG4vKipcbiAqIFN0b3JlcyB0aGUgXCJoaWdoIHdhdGVyIG1hcmtcIiB0aGF0IGluZGljYXRlcyBob3cgdXBkYXRlZCB0aGUgSW5kZXggaXMgZm9yIHRoZVxuICogY3VycmVudCB1c2VyLlxuICovIGNsYXNzIHd0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hlbiB0aGUgaW5kZXggd2FzIGxhc3QgdXBkYXRlZCAocmVsYXRpdmUgdG8gb3RoZXIgaW5kZXhlcykuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqIFRoZSB0aGUgbGF0ZXN0IGluZGV4ZWQgcmVhZCB0aW1lLCBkb2N1bWVudCBhbmQgYmF0Y2ggaWQuICovXG4gICAgZSkge1xuICAgICAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gdCwgdGhpcy5vZmZzZXQgPSBlO1xuICAgIH1cbiAgICAvKiogVGhlIHN0YXRlIG9mIGFuIGluZGV4IHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBiYWNrZmlsbGVkLiAqLyAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgd3QoMCwgeXQubWluKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9mZnNldCB0aGF0IG1hdGNoZXMgYWxsIGRvY3VtZW50cyB3aXRoIGEgcmVhZCB0aW1lIGhpZ2hlciB0aGFuXG4gKiBgcmVhZFRpbWVgLlxuICovIGZ1bmN0aW9uIG10KHQsIGUpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNyZWF0ZSBhbiBvZmZzZXQgdGhhdCBtYXRjaGVzIGFsbCBkb2N1bWVudHMgd2l0aCBhIHJlYWQgdGltZVxuICAgIC8vIGdyZWF0ZXIgdGhhbiB0aGUgcHJvdmlkZWQgcmVhZCB0aW1lLiBUbyBkbyBzbywgd2UgdGVjaG5pY2FsbHkgbmVlZCB0b1xuICAgIC8vIGNyZWF0ZSBhbiBvZmZzZXQgZm9yIGAocmVhZFRpbWUsIE1BWF9ET0NVTUVOVF9LRVkpYC4gV2hpbGUgd2UgY291bGQgdXNlXG4gICAgLy8gVW5pY29kZSBjb2RlcG9pbnRzIHRvIGdlbmVyYXRlIE1BWF9ET0NVTUVOVF9LRVksIGl0IGlzIG11Y2ggZWFzaWVyIHRvIHVzZVxuICAgIC8vIGAocmVhZFRpbWUgKyAxLCBEb2N1bWVudEtleS5lbXB0eSgpKWAgc2luY2UgYD4gRG9jdW1lbnRLZXkuZW1wdHkoKWAgbWF0Y2hlc1xuICAgIC8vIGFsbCB2YWxpZCBkb2N1bWVudCBJRHMuXG4gICAgY29uc3QgbiA9IHQudG9UaW1lc3RhbXAoKS5zZWNvbmRzLCBzID0gdC50b1RpbWVzdGFtcCgpLm5hbm9zZWNvbmRzICsgMSwgaSA9IHN0LmZyb21UaW1lc3RhbXAoMWU5ID09PSBzID8gbmV3IG50KG4gKyAxLCAwKSA6IG5ldyBudChuLCBzKSk7XG4gICAgcmV0dXJuIG5ldyB5dChpLCBjdC5lbXB0eSgpLCBlKTtcbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgb2Zmc2V0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkb2N1bWVudC4gKi8gZnVuY3Rpb24gZ3QodCkge1xuICAgIHJldHVybiBuZXcgeXQodC5yZWFkVGltZSwgdC5rZXksIC0xKTtcbn1cblxuLyoqXG4gKiBTdG9yZXMgdGhlIGxhdGVzdCByZWFkIHRpbWUsIGRvY3VtZW50IGFuZCBiYXRjaCBJRCB0aGF0IHdlcmUgcHJvY2Vzc2VkIGZvciBhblxuICogaW5kZXguXG4gKi8gY2xhc3MgeXQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBsYXRlc3QgcmVhZCB0aW1lIHZlcnNpb24gdGhhdCBoYXMgYmVlbiBpbmRleGVkIGJ5IEZpcmVzdG9yZSBmb3IgdGhpc1xuICAgICAqIGZpZWxkIGluZGV4LlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBrZXkgb2YgdGhlIGxhc3QgZG9jdW1lbnQgdGhhdCB3YXMgaW5kZXhlZCBmb3IgdGhpcyBxdWVyeS4gVXNlXG4gICAgICogYERvY3VtZW50S2V5LmVtcHR5KClgIGlmIG5vIGRvY3VtZW50IGhhcyBiZWVuIGluZGV4ZWQuXG4gICAgICovXG4gICAgZSwgXG4gICAgLypcbiAgICAgKiBUaGUgbGFyZ2VzdCBtdXRhdGlvbiBiYXRjaCBpZCB0aGF0J3MgYmVlbiBwcm9jZXNzZWQgYnkgRmlyZXN0b3JlLlxuICAgICAqL1xuICAgIG4pIHtcbiAgICAgICAgdGhpcy5yZWFkVGltZSA9IHQsIHRoaXMuZG9jdW1lbnRLZXkgPSBlLCB0aGlzLmxhcmdlc3RCYXRjaElkID0gbjtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYW4gb2Zmc2V0IHRoYXQgc29ydHMgYmVmb3JlIGFsbCByZWd1bGFyIG9mZnNldHMuICovICAgIHN0YXRpYyBtaW4oKSB7XG4gICAgICAgIHJldHVybiBuZXcgeXQoc3QubWluKCksIGN0LmVtcHR5KCksIC0xKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYW4gb2Zmc2V0IHRoYXQgc29ydHMgYWZ0ZXIgYWxsIHJlZ3VsYXIgb2Zmc2V0cy4gKi8gICAgc3RhdGljIG1heCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB5dChzdC5tYXgoKSwgY3QuZW1wdHkoKSwgLTEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHQodCwgZSkge1xuICAgIGxldCBuID0gdC5yZWFkVGltZS5jb21wYXJlVG8oZS5yZWFkVGltZSk7XG4gICAgcmV0dXJuIDAgIT09IG4gPyBuIDogKG4gPSBjdC5jb21wYXJhdG9yKHQuZG9jdW1lbnRLZXksIGUuZG9jdW1lbnRLZXkpLCAwICE9PSBuID8gbiA6IFoodC5sYXJnZXN0QmF0Y2hJZCwgZS5sYXJnZXN0QmF0Y2hJZCkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBJdCA9IFwiVGhlIGN1cnJlbnQgdGFiIGlzIG5vdCBpbiB0aGUgcmVxdWlyZWQgc3RhdGUgdG8gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4gSXQgbWlnaHQgYmUgbmVjZXNzYXJ5IHRvIHJlZnJlc2ggdGhlIGJyb3dzZXIgdGFiLlwiO1xuXG4vKipcbiAqIEEgYmFzZSBjbGFzcyByZXByZXNlbnRpbmcgYSBwZXJzaXN0ZW5jZSB0cmFuc2FjdGlvbiwgZW5jYXBzdWxhdGluZyBib3RoIHRoZVxuICogdHJhbnNhY3Rpb24ncyBzZXF1ZW5jZSBudW1iZXJzIGFzIHdlbGwgYXMgYSBsaXN0IG9mIG9uQ29tbWl0dGVkIGxpc3RlbmVycy5cbiAqXG4gKiBXaGVuIHlvdSBjYWxsIFBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCksIGl0IHdpbGwgY3JlYXRlIGEgdHJhbnNhY3Rpb24gYW5kXG4gKiBwYXNzIGl0IHRvIHlvdXIgY2FsbGJhY2suIFlvdSB0aGVuIHBhc3MgaXQgdG8gYW55IG1ldGhvZCB0aGF0IG9wZXJhdGVzXG4gKiBvbiBwZXJzaXN0ZW5jZS5cbiAqLyBjbGFzcyBUdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub25Db21taXR0ZWRMaXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgYWRkT25Db21taXR0ZWRMaXN0ZW5lcih0KSB7XG4gICAgICAgIHRoaXMub25Db21taXR0ZWRMaXN0ZW5lcnMucHVzaCh0KTtcbiAgICB9XG4gICAgcmFpc2VPbkNvbW1pdHRlZEV2ZW50KCkge1xuICAgICAgICB0aGlzLm9uQ29tbWl0dGVkTGlzdGVuZXJzLmZvckVhY2goKHQgPT4gdCgpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBWZXJpZmllcyB0aGUgZXJyb3IgdGhyb3duIGJ5IGEgTG9jYWxTdG9yZSBvcGVyYXRpb24uIElmIGEgTG9jYWxTdG9yZVxuICogb3BlcmF0aW9uIGZhaWxzIGJlY2F1c2UgdGhlIHByaW1hcnkgbGVhc2UgaGFzIGJlZW4gdGFrZW4gYnkgYW5vdGhlciBjbGllbnQsXG4gKiB3ZSBpZ25vcmUgdGhlIGVycm9yICh0aGUgcGVyc2lzdGVuY2UgbGF5ZXIgd2lsbCBpbW1lZGlhdGVseSBjYWxsXG4gKiBgYXBwbHlQcmltYXJ5TGVhc2VgIHRvIHByb3BhZ2F0ZSB0aGUgcHJpbWFyeSBzdGF0ZSBjaGFuZ2UpLiBBbGwgb3RoZXIgZXJyb3JzXG4gKiBhcmUgcmUtdGhyb3duLlxuICpcbiAqIEBwYXJhbSBlcnIgLSBBbiBlcnJvciByZXR1cm5lZCBieSBhIExvY2FsU3RvcmUgb3BlcmF0aW9uLlxuICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgd2UgcmVjb3ZlcmVkLCBvciB0aGUgb3JpZ2luYWwgZXJyb3IuXG4gKi8gYXN5bmMgZnVuY3Rpb24gRXQodCkge1xuICAgIGlmICh0LmNvZGUgIT09IEIuRkFJTEVEX1BSRUNPTkRJVElPTiB8fCB0Lm1lc3NhZ2UgIT09IEl0KSB0aHJvdyB0O1xuICAgIEMoXCJMb2NhbFN0b3JlXCIsIFwiVW5leHBlY3RlZGx5IGxvc3QgcHJpbWFyeSBsZWFzZVwiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUGVyc2lzdGVuY2VQcm9taXNlIGlzIGVzc2VudGlhbGx5IGEgcmUtaW1wbGVtZW50YXRpb24gb2YgUHJvbWlzZSBleGNlcHRcbiAqIGl0IGhhcyBhIC5uZXh0KCkgbWV0aG9kIGluc3RlYWQgb2YgLnRoZW4oKSBhbmQgLm5leHQoKSBhbmQgLmNhdGNoKCkgY2FsbGJhY2tzXG4gKiBhcmUgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGEgUGVyc2lzdGVuY2VQcm9taXNlIHJlc29sdmVzIHJhdGhlciB0aGFuXG4gKiBhc3luY2hyb25vdXNseSAoUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMgdXNlIHNldEltbWVkaWF0ZSgpIG9yIHNpbWlsYXIpLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGludGVyb3BlcmF0ZSB3aXRoIEluZGV4ZWREQiB3aGljaCB3aWxsIGF1dG9tYXRpY2FsbHlcbiAqIGNvbW1pdCB0cmFuc2FjdGlvbnMgaWYgY29udHJvbCBpcyByZXR1cm5lZCB0byB0aGUgZXZlbnQgbG9vcCB3aXRob3V0XG4gKiBzeW5jaHJvbm91c2x5IGluaXRpYXRpbmcgYW5vdGhlciBvcGVyYXRpb24gb24gdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIE5PVEU6IC50aGVuKCkgYW5kIC5jYXRjaCgpIG9ubHkgYWxsb3cgYSBzaW5nbGUgY29uc3VtZXIsIHVubGlrZSBub3JtYWxcbiAqIFByb21pc2VzLlxuICovIGNsYXNzIEF0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIC8vIE5PVEU6IG5leHQvY2F0Y2hDYWxsYmFjayB3aWxsIGFsd2F5cyBwb2ludCB0byBvdXIgb3duIHdyYXBwZXIgZnVuY3Rpb25zLFxuICAgICAgICAvLyBub3QgdGhlIHVzZXIncyByYXcgbmV4dCgpIG9yIGNhdGNoKCkgY2FsbGJhY2tzLlxuICAgICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGwsIHRoaXMuY2F0Y2hDYWxsYmFjayA9IG51bGwsIFxuICAgICAgICAvLyBXaGVuIHRoZSBvcGVyYXRpb24gcmVzb2x2ZXMsIHdlJ2xsIHNldCByZXN1bHQgb3IgZXJyb3IgYW5kIG1hcmsgaXNEb25lLlxuICAgICAgICB0aGlzLnJlc3VsdCA9IHZvaWQgMCwgdGhpcy5lcnJvciA9IHZvaWQgMCwgdGhpcy5pc0RvbmUgPSAhMSwgXG4gICAgICAgIC8vIFNldCB0byB0cnVlIHdoZW4gLnRoZW4oKSBvciAuY2F0Y2goKSBhcmUgY2FsbGVkIGFuZCBwcmV2ZW50cyBhZGRpdGlvbmFsXG4gICAgICAgIC8vIGNoYWluaW5nLlxuICAgICAgICB0aGlzLmNhbGxiYWNrQXR0YWNoZWQgPSAhMSwgdCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzRG9uZSA9ICEwLCB0aGlzLnJlc3VsdCA9IHQsIHRoaXMubmV4dENhbGxiYWNrICYmIFxuICAgICAgICAgICAgLy8gdmFsdWUgc2hvdWxkIGJlIGRlZmluZWQgdW5sZXNzIFQgaXMgVm9pZCwgYnV0IHdlIGNhbid0IGV4cHJlc3NcbiAgICAgICAgICAgIC8vIHRoYXQgaW4gdGhlIHR5cGUgc3lzdGVtLlxuICAgICAgICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sodCk7XG4gICAgICAgIH0pLCAodCA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzRG9uZSA9ICEwLCB0aGlzLmVycm9yID0gdCwgdGhpcy5jYXRjaENhbGxiYWNrICYmIHRoaXMuY2F0Y2hDYWxsYmFjayh0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjYXRjaCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQodm9pZCAwLCB0KTtcbiAgICB9XG4gICAgbmV4dCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxiYWNrQXR0YWNoZWQgJiYgTygpLCB0aGlzLmNhbGxiYWNrQXR0YWNoZWQgPSAhMCwgdGhpcy5pc0RvbmUgPyB0aGlzLmVycm9yID8gdGhpcy53cmFwRmFpbHVyZShlLCB0aGlzLmVycm9yKSA6IHRoaXMud3JhcFN1Y2Nlc3ModCwgdGhpcy5yZXN1bHQpIDogbmV3IEF0KCgobiwgcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBTdWNjZXNzKHQsIGUpLm5leHQobiwgcyk7XG4gICAgICAgICAgICB9LCB0aGlzLmNhdGNoQ2FsbGJhY2sgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBGYWlsdXJlKGUsIHQpLm5leHQobiwgcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHRvUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZXh0KHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHdyYXBVc2VyRnVuY3Rpb24odCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQoKTtcbiAgICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQXQgPyBlIDogQXQucmVzb2x2ZShlKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgcmV0dXJuIEF0LnJlamVjdCh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cmFwU3VjY2Vzcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0ID8gdGhpcy53cmFwVXNlckZ1bmN0aW9uKCgoKSA9PiB0KGUpKSkgOiBBdC5yZXNvbHZlKGUpO1xuICAgIH1cbiAgICB3cmFwRmFpbHVyZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0ID8gdGhpcy53cmFwVXNlckZ1bmN0aW9uKCgoKSA9PiB0KGUpKSkgOiBBdC5yZWplY3QoZSk7XG4gICAgfVxuICAgIHN0YXRpYyByZXNvbHZlKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIGUodCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIHJlamVjdCh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQXQoKChlLCBuKSA9PiB7XG4gICAgICAgICAgICBuKHQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHN0YXRpYyB3YWl0Rm9yKFxuICAgIC8vIEFjY2VwdCBhbGwgUHJvbWlzZSB0eXBlcyBpbiB3YWl0Rm9yKCkuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQXQoKChlLCBuKSA9PiB7XG4gICAgICAgICAgICBsZXQgcyA9IDAsIGkgPSAwLCByID0gITE7XG4gICAgICAgICAgICB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgICsrcywgdC5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICsraSwgciAmJiBpID09PSBzICYmIGUoKTtcbiAgICAgICAgICAgICAgICB9KSwgKHQgPT4gbih0KSkpO1xuICAgICAgICAgICAgfSkpLCByID0gITAsIGkgPT09IHMgJiYgZSgpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGFuIGFycmF5IG9mIHByZWRpY2F0ZSBmdW5jdGlvbnMgdGhhdCBhc3luY2hyb25vdXNseSBldmFsdWF0ZSB0byBhXG4gICAgICogYm9vbGVhbiwgaW1wbGVtZW50cyBhIHNob3J0LWNpcmN1aXRpbmcgYG9yYCBiZXR3ZWVuIHRoZSByZXN1bHRzLiBQcmVkaWNhdGVzXG4gICAgICogd2lsbCBiZSBldmFsdWF0ZWQgdW50aWwgb25lIG9mIHRoZW0gcmV0dXJucyBgdHJ1ZWAsIHRoZW4gc3RvcC4gVGhlIGZpbmFsXG4gICAgICogcmVzdWx0IHdpbGwgYmUgd2hldGhlciBhbnkgb2YgdGhlbSByZXR1cm5lZCBgdHJ1ZWAuXG4gICAgICovICAgIHN0YXRpYyBvcih0KSB7XG4gICAgICAgIGxldCBlID0gQXQucmVzb2x2ZSghMSk7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5uZXh0KCh0ID0+IHQgPyBBdC5yZXNvbHZlKHQpIDogbigpKSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBzdGF0aWMgZm9yRWFjaCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoKHQsIHMpID0+IHtcbiAgICAgICAgICAgIG4ucHVzaChlLmNhbGwodGhpcywgdCwgcykpO1xuICAgICAgICB9KSksIHRoaXMud2FpdEZvcihuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uY3VycmVudGx5IG1hcCBhbGwgYXJyYXkgZWxlbWVudHMgdGhyb3VnaCBhc3luY2hyb25vdXMgZnVuY3Rpb24uXG4gICAgICovICAgIHN0YXRpYyBtYXBBcnJheSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXQoKChuLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdC5sZW5ndGgsIHIgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgICAgICBsZXQgbyA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCB1ID0gMDsgdSA8IGk7IHUrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB1O1xuICAgICAgICAgICAgICAgIGUodFtjXSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJbY10gPSB0LCArK28sIG8gPT09IGkgJiYgbihyKTtcbiAgICAgICAgICAgICAgICB9KSwgKHQgPT4gcyh0KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIHJlY3Vyc2l2ZSBQZXJzaXN0ZW5jZVByb21pc2UgY2FsbHMsIHRoYXQgYXZvaWRzXG4gICAgICogcG90ZW50aWFsIG1lbW9yeSBwcm9ibGVtcyBmcm9tIHVuYm91bmRlZCBjaGFpbnMgb2YgcHJvbWlzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYGFjdGlvbmAgd2lsbCBiZSBjYWxsZWQgcmVwZWF0ZWRseSB3aGlsZSBgY29uZGl0aW9uYCBpcyB0cnVlLlxuICAgICAqLyAgICBzdGF0aWMgZG9XaGlsZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXQoKChuLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICEwID09PSB0KCkgPyBlKCkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpKCk7XG4gICAgICAgICAgICAgICAgfSksIHMpIDogbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGkoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFJlZmVyZW5jZXMgdG8gYHdpbmRvd2AgYXJlIGd1YXJkZWQgYnkgU2ltcGxlRGIuaXNBdmFpbGFibGUoKVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKipcbiAqIFdyYXBzIGFuIElEQlRyYW5zYWN0aW9uIGFuZCBleHBvc2VzIGEgc3RvcmUoKSBtZXRob2QgdG8gZ2V0IGEgaGFuZGxlIHRvIGFcbiAqIHNwZWNpZmljIG9iamVjdCBzdG9yZS5cbiAqL1xuY2xhc3MgUnQge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSB0LCB0aGlzLnRyYW5zYWN0aW9uID0gZSwgdGhpcy5hYm9ydGVkID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIEluZGV4ZWREYiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuUCA9IG5ldyBVLCB0aGlzLnRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLlAucmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aGlzLnRyYW5zYWN0aW9uLm9uYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICBlLmVycm9yID8gdGhpcy5QLnJlamVjdChuZXcgdnQodCwgZS5lcnJvcikpIDogdGhpcy5QLnJlc29sdmUoKTtcbiAgICAgICAgfSwgdGhpcy50cmFuc2FjdGlvbi5vbmVycm9yID0gZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0geHQoZS50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5QLnJlamVjdChuZXcgdnQodCwgbikpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgb3Blbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ0KGUsIHQudHJhbnNhY3Rpb24ocywgbikpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdnQoZSwgdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlAucHJvbWlzZTtcbiAgICB9XG4gICAgYWJvcnQodCkge1xuICAgICAgICB0ICYmIHRoaXMuUC5yZWplY3QodCksIHRoaXMuYWJvcnRlZCB8fCAoQyhcIlNpbXBsZURiXCIsIFwiQWJvcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQgPyB0Lm1lc3NhZ2UgOiBcIkNsaWVudC1pbml0aWF0ZWQgYWJvcnRcIiksIFxuICAgICAgICB0aGlzLmFib3J0ZWQgPSAhMCwgdGhpcy50cmFuc2FjdGlvbi5hYm9ydCgpKTtcbiAgICB9XG4gICAgVigpIHtcbiAgICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgVjMgSW5kZXhlZERCLCB3ZSBpbnZva2UgY29tbWl0KCkgZXhwbGljaXRseSB0b1xuICAgICAgICAvLyBzcGVlZCB1cCBpbmRleCBEQiBwcm9jZXNzaW5nIGlmIHRoZSBldmVudCBsb29wIHJlbWFpbnMgYmxvY2tzLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCB0ID0gdGhpcy50cmFuc2FjdGlvbjtcbiAgICAgICAgdGhpcy5hYm9ydGVkIHx8IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdC5jb21taXQgfHwgdC5jb21taXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFNpbXBsZURiU3RvcmU8S2V5VHlwZSwgVmFsdWVUeXBlPiBmb3IgdGhlIHNwZWNpZmllZCBzdG9yZS4gQWxsXG4gICAgICogb3BlcmF0aW9ucyBwZXJmb3JtZWQgb24gdGhlIFNpbXBsZURiU3RvcmUgaGFwcGVuIHdpdGhpbiB0aGUgY29udGV4dCBvZiB0aGlzXG4gICAgICogdHJhbnNhY3Rpb24gYW5kIGl0IGNhbm5vdCBiZSB1c2VkIGFueW1vcmUgb25jZSB0aGUgdHJhbnNhY3Rpb24gaXNcbiAgICAgKiBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgd2UgY2FuJ3QgYWN0dWFsbHkgZW5mb3JjZSB0aGF0IHRoZSBLZXlUeXBlIGFuZCBWYWx1ZVR5cGUgYXJlXG4gICAgICogY29ycmVjdCwgYnV0IHRoZXkgYWxsb3cgdHlwZSBzYWZldHkgdGhyb3VnaCB0aGUgcmVzdCBvZiB0aGUgY29uc3VtaW5nIGNvZGUuXG4gICAgICovICAgIHN0b3JlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMudHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodCk7XG4gICAgICAgIHJldHVybiBuZXcgU3QoZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGVzIGEgd3JhcHBlciBhcm91bmQgSW5kZXhlZERiIHdpdGggYSBzaW1wbGlmaWVkIGludGVyZmFjZSB0aGF0IHVzZXNcbiAqIFByb21pc2UtbGlrZSByZXR1cm4gdmFsdWVzIHRvIGNoYWluIG9wZXJhdGlvbnMuIFJlYWwgcHJvbWlzZXMgY2Fubm90IGJlIHVzZWRcbiAqIHNpbmNlIC50aGVuKCkgY29udGludWF0aW9ucyBhcmUgZXhlY3V0ZWQgYXN5bmNocm9ub3VzbHkgKGUuZy4gdmlhXG4gKiAuc2V0SW1tZWRpYXRlKSwgd2hpY2ggd291bGQgY2F1c2UgSW5kZXhlZERCIHRvIGVuZCB0aGUgdHJhbnNhY3Rpb24uXG4gKiBTZWUgUGVyc2lzdGVuY2VQcm9taXNlIGZvciBtb3JlIGRldGFpbHMuXG4gKi8gY2xhc3MgYnQge1xuICAgIC8qXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTaW1wbGVEYiB3cmFwcGVyIGZvciBJbmRleGVkRGIgZGF0YWJhc2UgYG5hbWVgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGB2ZXJzaW9uYCBtdXN0IG5vdCBiZSBhIGRvd25ncmFkZS4gSW5kZXhlZERCIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgKiBkb3duZ3JhZGluZyB0aGUgc2NoZW1hIHZlcnNpb24uIFdlIGN1cnJlbnRseSBkbyBub3Qgc3VwcG9ydCBhbnkgd2F5IHRvIGRvXG4gICAgICogdmVyc2lvbmluZyBvdXRzaWRlIG9mIEluZGV4ZWREQidzIHZlcnNpb25pbmcgbWVjaGFuaXNtLCBhcyBvbmx5XG4gICAgICogdmVyc2lvbi11cGdyYWRlIHRyYW5zYWN0aW9ucyBhcmUgYWxsb3dlZCB0byBkbyB0aGluZ3MgbGlrZSBjcmVhdGVcbiAgICAgKiBvYmplY3RzdG9yZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICB0aGlzLm5hbWUgPSB0LCB0aGlzLnZlcnNpb24gPSBlLCB0aGlzLlMgPSBuO1xuICAgICAgICAvLyBOT1RFOiBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE5NzA1MCwgdGhlXG4gICAgICAgIC8vIGJ1ZyB3ZSdyZSBjaGVja2luZyBmb3Igc2hvdWxkIGV4aXN0IGluIGlPUyA+PSAxMi4yIGFuZCA8IDEzLCBidXQgZm9yXG4gICAgICAgIC8vIHdoYXRldmVyIHJlYXNvbiBpdCdzIG11Y2ggaGFyZGVyIHRvIGhpdCBhZnRlciAxMi4yIHNvIHdlIG9ubHkgcHJvYWN0aXZlbHlcbiAgICAgICAgLy8gbG9nIG9uIDEyLjIuXG4gICAgICAgIDEyLjIgPT09IGJ0LkQoZ2V0VUEoKSkgJiYgeChcIkZpcmVzdG9yZSBwZXJzaXN0ZW5jZSBzdWZmZXJzIGZyb20gYSBidWcgaW4gaU9TIDEyLjIgU2FmYXJpIHRoYXQgbWF5IGNhdXNlIHlvdXIgYXBwIHRvIHN0b3Agd29ya2luZy4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS81NjQ5NjI5Ni8xMTA5MTUgZm9yIGRldGFpbHMgYW5kIGEgcG90ZW50aWFsIHdvcmthcm91bmQuXCIpO1xuICAgIH1cbiAgICAvKiogRGVsZXRlcyB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLiAqLyAgICBzdGF0aWMgZGVsZXRlKHQpIHtcbiAgICAgICAgcmV0dXJuIEMoXCJTaW1wbGVEYlwiLCBcIlJlbW92aW5nIGRhdGFiYXNlOlwiLCB0KSwgRHQod2luZG93LmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZSh0KSkudG9Qcm9taXNlKCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgSW5kZXhlZERCIGlzIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC4gKi8gICAgc3RhdGljIEMoKSB7XG4gICAgICAgIGlmICghaXNJbmRleGVkREJBdmFpbGFibGUoKSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoYnQuTigpKSByZXR1cm4gITA7XG4gICAgICAgIC8vIFdlIGV4dGVuc2l2ZWx5IHVzZSBpbmRleGVkIGFycmF5IHZhbHVlcyBhbmQgY29tcG91bmQga2V5cyxcbiAgICAgICAgLy8gd2hpY2ggSUUgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQuIEhvd2V2ZXIsIHRoZXkgc3RpbGwgaGF2ZSBpbmRleGVkREJcbiAgICAgICAgLy8gZGVmaW5lZCBvbiB0aGUgd2luZG93LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGVtIGhlcmUgYW5kIG1ha2Ugc3VyZVxuICAgICAgICAvLyB0byByZXR1cm4gdGhhdCBwZXJzaXN0ZW5jZSBpcyBub3QgZW5hYmxlZCBmb3IgdGhvc2UgYnJvd3NlcnMuXG4gICAgICAgIC8vIEZvciB0cmFja2luZyBzdXBwb3J0IG9mIHRoaXMgZmVhdHVyZSwgc2VlIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vc3RhdHVzL2luZGV4ZWRkYmFycmF5c2FuZG11bHRpZW50cnlzdXBwb3J0L1xuICAgICAgICAvLyBDaGVjayB0aGUgVUEgc3RyaW5nIHRvIGZpbmQgb3V0IHRoZSBicm93c2VyLlxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBnZXRVQSgpLCBlID0gYnQuRCh0KSwgbiA9IDAgPCBlICYmIGUgPCAxMCwgcyA9IGJ0LmsodCksIGkgPSAwIDwgcyAmJiBzIDwgNC41O1xuICAgICAgICAvLyBJRSAxMFxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4zOyBUcmlkZW50LzcuMDsgcnY6MTEuMCkgbGlrZSBHZWNrbyc7XG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsXG4gICAgICAgIC8vIGxpa2UgR2Vja28pIENocm9tZS8zOS4wLjIxNzEuNzEgU2FmYXJpLzUzNy4zNiBFZGdlLzEyLjAnO1xuICAgICAgICAvLyBpT1MgU2FmYXJpOiBEaXNhYmxlIGZvciB1c2VycyBydW5uaW5nIGlPUyB2ZXJzaW9uIDwgMTAuXG4gICAgICAgICAgICAgICAgcmV0dXJuICEodC5pbmRleE9mKFwiTVNJRSBcIikgPiAwIHx8IHQuaW5kZXhPZihcIlRyaWRlbnQvXCIpID4gMCB8fCB0LmluZGV4T2YoXCJFZGdlL1wiKSA+IDAgfHwgbiB8fCBpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBiYWNraW5nIEluZGV4ZWREQiBzdG9yZSBpcyB0aGUgTm9kZSBJbmRleGVkREJTaGltXG4gICAgICogKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0pLlxuICAgICAqLyAgICBzdGF0aWMgTigpIHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBwcm9jZXNzICYmIFwiWUVTXCIgPT09IChudWxsID09PSAodCA9IHByb2Nlc3MuZW52KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0Lk8pO1xuICAgIH1cbiAgICAvKiogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZnJvbSBhIHRyYW5zYWN0aW9uLiAqLyAgICBzdGF0aWMgTSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKGUpO1xuICAgIH1cbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgLyoqIFBhcnNlIFVzZXIgQWdlbnQgdG8gZGV0ZXJtaW5lIGlPUyB2ZXJzaW9uLiBSZXR1cm5zIC0xIGlmIG5vdCBmb3VuZC4gKi9cbiAgICBzdGF0aWMgRCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0Lm1hdGNoKC9pKD86cGhvbmV8cGFkfHBvZCkgb3MgKFtcXGRfXSspL2kpLCBuID0gZSA/IGVbMV0uc3BsaXQoXCJfXCIpLnNsaWNlKDAsIDIpLmpvaW4oXCIuXCIpIDogXCItMVwiO1xuICAgICAgICByZXR1cm4gTnVtYmVyKG4pO1xuICAgIH1cbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgLyoqIFBhcnNlIFVzZXIgQWdlbnQgdG8gZGV0ZXJtaW5lIEFuZHJvaWQgdmVyc2lvbi4gUmV0dXJucyAtMSBpZiBub3QgZm91bmQuICovXG4gICAgc3RhdGljIGsodCkge1xuICAgICAgICBjb25zdCBlID0gdC5tYXRjaCgvQW5kcm9pZCAoW1xcZC5dKykvaSksIG4gPSBlID8gZVsxXS5zcGxpdChcIi5cIikuc2xpY2UoMCwgMikuam9pbihcIi5cIikgOiBcIi0xXCI7XG4gICAgICAgIHJldHVybiBOdW1iZXIobik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UsIGNyZWF0aW5nIG9yIHVwZ3JhZGluZyBpdCBpZiBuZWNlc3NhcnkuXG4gICAgICovICAgIGFzeW5jIEYodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYiB8fCAoQyhcIlNpbXBsZURiXCIsIFwiT3BlbmluZyBkYXRhYmFzZTpcIiwgdGhpcy5uYW1lKSwgdGhpcy5kYiA9IGF3YWl0IG5ldyBQcm9taXNlKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBJbnZlc3RpZ2F0ZSBicm93c2VyIGNvbXBhdGliaWxpdHkuXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW5kZXhlZERCX0FQSS9Vc2luZ19JbmRleGVkREJcbiAgICAgICAgICAgIC8vIHN1Z2dlc3RzIElFOSBhbmQgb2xkZXIgV2ViS2l0IGJyb3dzZXJzIGhhbmRsZSB1cGdyYWRlXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnRseS4gVGhleSBleHBlY3Qgc2V0VmVyc2lvbiwgYXMgZGVzY3JpYmVkIGhlcmU6XG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSURCVmVyc2lvbkNoYW5nZVJlcXVlc3Qvc2V0VmVyc2lvblxuICAgICAgICAgICAgY29uc3QgcyA9IGluZGV4ZWREQi5vcGVuKHRoaXMubmFtZSwgdGhpcy52ZXJzaW9uKTtcbiAgICAgICAgICAgIHMub25zdWNjZXNzID0gdCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBlKG4pO1xuICAgICAgICAgICAgfSwgcy5vbmJsb2NrZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbihuZXcgdnQodCwgXCJDYW5ub3QgdXBncmFkZSBJbmRleGVkREIgc2NoZW1hIHdoaWxlIGFub3RoZXIgdGFiIGlzIG9wZW4uIENsb3NlIGFsbCB0YWJzIHRoYXQgYWNjZXNzIEZpcmVzdG9yZSBhbmQgcmVsb2FkIHRoaXMgcGFnZSB0byBwcm9jZWVkLlwiKSk7XG4gICAgICAgICAgICB9LCBzLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gZS50YXJnZXQuZXJyb3I7XG4gICAgICAgICAgICAgICAgXCJWZXJzaW9uRXJyb3JcIiA9PT0gcy5uYW1lID8gbihuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBGaXJlc3RvcmUgU0RLIHdhcyBwcmV2aW91c2x5IHVzZWQgYW5kIHNvIHRoZSBwZXJzaXN0ZWQgZGF0YSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB2ZXJzaW9uIG9mIHRoZSBTREsgeW91IGFyZSBub3cgdXNpbmcuIFRoZSBTREsgd2lsbCBvcGVyYXRlIHdpdGggcGVyc2lzdGVuY2UgZGlzYWJsZWQuIElmIHlvdSBuZWVkIHBlcnNpc3RlbmNlLCBwbGVhc2UgcmUtdXBncmFkZSB0byBhIG5ld2VyIHZlcnNpb24gb2YgdGhlIFNESyBvciBlbHNlIGNsZWFyIHRoZSBwZXJzaXN0ZWQgSW5kZXhlZERCIGRhdGEgZm9yIHlvdXIgYXBwIHRvIHN0YXJ0IGZyZXNoLlwiKSkgOiBcIkludmFsaWRTdGF0ZUVycm9yXCIgPT09IHMubmFtZSA/IG4obmV3IEwoQi5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlVuYWJsZSB0byBvcGVuIGFuIEluZGV4ZWREQiBjb25uZWN0aW9uLiBUaGlzIGNvdWxkIGJlIGR1ZSB0byBydW5uaW5nIGluIGEgcHJpdmF0ZSBicm93c2luZyBzZXNzaW9uIG9uIGEgYnJvd3NlciB3aG9zZSBwcml2YXRlIGJyb3dzaW5nIHNlc3Npb25zIGRvIG5vdCBzdXBwb3J0IEluZGV4ZWREQjogXCIgKyBzKSkgOiBuKG5ldyB2dCh0LCBzKSk7XG4gICAgICAgICAgICB9LCBzLm9udXBncmFkZW5lZWRlZCA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIEMoXCJTaW1wbGVEYlwiLCAnRGF0YWJhc2UgXCInICsgdGhpcy5uYW1lICsgJ1wiIHJlcXVpcmVzIHVwZ3JhZGUgZnJvbSB2ZXJzaW9uOicsIHQub2xkVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICB0aGlzLlMuJChlLCBzLnRyYW5zYWN0aW9uLCB0Lm9sZFZlcnNpb24sIHRoaXMudmVyc2lvbikubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBDKFwiU2ltcGxlRGJcIiwgXCJEYXRhYmFzZSB1cGdyYWRlIHRvIHZlcnNpb24gXCIgKyB0aGlzLnZlcnNpb24gKyBcIiBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkpLCB0aGlzLkIgJiYgKHRoaXMuZGIub252ZXJzaW9uY2hhbmdlID0gdCA9PiB0aGlzLkIodCkpLCB0aGlzLmRiO1xuICAgIH1cbiAgICBMKHQpIHtcbiAgICAgICAgdGhpcy5CID0gdCwgdGhpcy5kYiAmJiAodGhpcy5kYi5vbnZlcnNpb25jaGFuZ2UgPSBlID0+IHQoZSkpO1xuICAgIH1cbiAgICBhc3luYyBydW5UcmFuc2FjdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBcInJlYWRvbmx5XCIgPT09IGU7XG4gICAgICAgIGxldCByID0gMDtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgKytyO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRiID0gYXdhaXQgdGhpcy5GKHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBSdC5vcGVuKHRoaXMuZGIsIHQsIGkgPyBcInJlYWRvbmx5XCIgOiBcInJlYWR3cml0ZVwiLCBuKSwgciA9IHMoZSkubmV4dCgodCA9PiAoZS5WKCksIFxuICAgICAgICAgICAgICAgIHQpKSkuY2F0Y2goKHQgPT4gKFxuICAgICAgICAgICAgICAgIC8vIEFib3J0IHRoZSB0cmFuc2FjdGlvbiBpZiB0aGVyZSB3YXMgYW4gZXJyb3IuXG4gICAgICAgICAgICAgICAgZS5hYm9ydCh0KSwgQXQucmVqZWN0KHQpKSkpLnRvUHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIC8vIEFzIG5vdGVkIGFib3ZlLCBlcnJvcnMgYXJlIHByb3BhZ2F0ZWQgYnkgYWJvcnRpbmcgdGhlIHRyYW5zYWN0aW9uLiBTb1xuICAgICAgICAgICAgICAgIC8vIHdlIHN3YWxsb3cgYW55IGVycm9yIGhlcmUgdG8gYXZvaWQgdGhlIGJyb3dzZXIgbG9nZ2luZyBpdCBhcyB1bmhhbmRsZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuY2F0Y2goKCgpID0+IHt9KSksIFxuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZSAoaS5lLiBJbmRleGVkRGIncyBvbnN1Y2Nlc3MgZXZlbnQgdG9cbiAgICAgICAgICAgICAgICAvLyBmaXJlKSwgYnV0IHN0aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb25GblJlc3VsdCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNhbGxlci5cbiAgICAgICAgICAgICAgICBhd2FpdCBlLnYsIHI7XG4gICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQsIG4gPSBcIkZpcmViYXNlRXJyb3JcIiAhPT0gZS5uYW1lICYmIHIgPCAzO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oc2NobWlkdC1zZWJhc3RpYW4pOiBXZSBjb3VsZCBwcm9iYWJseSBiZSBzbWFydGVyIGFib3V0IHRoaXMgYW5kXG4gICAgICAgICAgICAgICAgLy8gbm90IHJldHJ5IGV4Y2VwdGlvbnMgdGhhdCBhcmUgbGlrZWx5IHVucmVjb3ZlcmFibGUgKHN1Y2ggYXMgcXVvdGFcbiAgICAgICAgICAgICAgICAvLyBleGNlZWRlZCBlcnJvcnMpLlxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbm5vdCB1c2UgYW4gaW5zdGFuY2VvZiBjaGVjayBmb3IgRmlyZXN0b3JlRXhjZXB0aW9uLCBzaW5jZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gaXMgd3JhcHBlZCBpbiBhIGdlbmVyaWMgZXJyb3IgYnkgb3VyIGFzeW5jL2F3YWl0IGhhbmRsaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQyhcIlNpbXBsZURiXCIsIFwiVHJhbnNhY3Rpb24gZmFpbGVkIHdpdGggZXJyb3I6XCIsIGUubWVzc2FnZSwgXCJSZXRyeWluZzpcIiwgbiksIFxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKSwgIW4pIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kYiAmJiB0aGlzLmRiLmNsb3NlKCksIHRoaXMuZGIgPSB2b2lkIDA7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgY29udHJvbGxlciBmb3IgaXRlcmF0aW5nIG92ZXIgYSBrZXkgcmFuZ2Ugb3IgaW5kZXguIEl0IGFsbG93cyBhbiBpdGVyYXRlXG4gKiBjYWxsYmFjayB0byBkZWxldGUgdGhlIGN1cnJlbnRseS1yZWZlcmVuY2VkIG9iamVjdCwgb3IganVtcCB0byBhIG5ldyBrZXlcbiAqIHdpdGhpbiB0aGUga2V5IHJhbmdlIG9yIGluZGV4LlxuICovIGNsYXNzIFB0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuVSA9IHQsIHRoaXMucSA9ICExLCB0aGlzLksgPSBudWxsO1xuICAgIH1cbiAgICBnZXQgaXNEb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xO1xuICAgIH1cbiAgICBnZXQgRygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSztcbiAgICB9XG4gICAgc2V0IGN1cnNvcih0KSB7XG4gICAgICAgIHRoaXMuVSA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBzdG9wIGl0ZXJhdGlvbiBhdCBhbnkgcG9pbnQuXG4gICAgICovICAgIGRvbmUoKSB7XG4gICAgICAgIHRoaXMucSA9ICEwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gc2tpcCB0byB0aGF0IG5leHQga2V5LCB3aGljaCBjb3VsZCBiZVxuICAgICAqIGFuIGluZGV4IG9yIGEgcHJpbWFyeSBrZXkuXG4gICAgICovICAgIGoodCkge1xuICAgICAgICB0aGlzLksgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGhlIGN1cnJlbnQgY3Vyc29yIHZhbHVlIGZyb20gdGhlIG9iamVjdCBzdG9yZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFlvdSBDQU5OT1QgZG8gdGhpcyB3aXRoIGEga2V5c09ubHkgcXVlcnkuXG4gICAgICovICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIER0KHRoaXMuVS5kZWxldGUoKSk7XG4gICAgfVxufVxuXG4vKiogQW4gZXJyb3IgdGhhdCB3cmFwcyBleGNlcHRpb25zIHRoYXQgdGhyb3duIGR1cmluZyBJbmRleGVkREIgZXhlY3V0aW9uLiAqLyBjbGFzcyB2dCBleHRlbmRzIEwge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoQi5VTkFWQUlMQUJMRSwgYEluZGV4ZWREQiB0cmFuc2FjdGlvbiAnJHt0fScgZmFpbGVkOiAke2V9YCksIHRoaXMubmFtZSA9IFwiSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvclwiO1xuICAgIH1cbn1cblxuLyoqIFZlcmlmaWVzIHdoZXRoZXIgYGVgIGlzIGFuIEluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IuICovIGZ1bmN0aW9uIFZ0KHQpIHtcbiAgICAvLyBVc2UgbmFtZSBlcXVhbGl0eSwgYXMgaW5zdGFuY2VvZiBjaGVja3Mgb24gZXJyb3JzIGRvbid0IHdvcmsgd2l0aCBlcnJvcnNcbiAgICAvLyB0aGF0IHdyYXAgb3RoZXIgZXJyb3JzLlxuICAgIHJldHVybiBcIkluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3JcIiA9PT0gdC5uYW1lO1xufVxuXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgYW4gSURCT2JqZWN0U3RvcmUgcHJvdmlkaW5nIGFuIEFQSSB0aGF0OlxuICpcbiAqIDEpIEhhcyBnZW5lcmljIEtleVR5cGUgLyBWYWx1ZVR5cGUgcGFyYW1ldGVycyB0byBwcm92aWRlIHN0cm9uZ2x5LXR5cGVkXG4gKiBtZXRob2RzIGZvciBhY3RpbmcgYWdhaW5zdCB0aGUgb2JqZWN0IHN0b3JlLlxuICogMikgRGVhbHMgd2l0aCBJbmRleGVkREIncyBvbnN1Y2Nlc3MgLyBvbmVycm9yIGV2ZW50IGNhbGxiYWNrcywgbWFraW5nIGV2ZXJ5XG4gKiBtZXRob2QgcmV0dXJuIGEgUGVyc2lzdGVuY2VQcm9taXNlIGluc3RlYWQuXG4gKiAzKSBQcm92aWRlcyBhIGhpZ2hlci1sZXZlbCBBUEkgdG8gYXZvaWQgbmVlZGluZyB0byBkbyBleGNlc3NpdmUgd3JhcHBpbmcgb2ZcbiAqIGludGVybWVkaWF0ZSBJbmRleGVkREIgdHlwZXMgKElEQkN1cnNvcldpdGhWYWx1ZSwgZXRjLilcbiAqLyBjbGFzcyBTdCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnN0b3JlID0gdDtcbiAgICB9XG4gICAgcHV0KHQsIGUpIHtcbiAgICAgICAgbGV0IG47XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUgPyAoQyhcIlNpbXBsZURiXCIsIFwiUFVUXCIsIHRoaXMuc3RvcmUubmFtZSwgdCwgZSksIG4gPSB0aGlzLnN0b3JlLnB1dChlLCB0KSkgOiAoQyhcIlNpbXBsZURiXCIsIFwiUFVUXCIsIHRoaXMuc3RvcmUubmFtZSwgXCI8YXV0by1rZXk+XCIsIHQpLCBcbiAgICAgICAgbiA9IHRoaXMuc3RvcmUucHV0KHQpKSwgRHQobik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgdmFsdWUgaW50byBhbiBPYmplY3QgU3RvcmUgYW5kIHJldHVybnMgdGhlIG5ldyBrZXkuIFNpbWlsYXIgdG9cbiAgICAgKiBJbmRleGVkRGIncyBgYWRkKClgLCB0aGlzIG1ldGhvZCB3aWxsIGZhaWwgb24gcHJpbWFyeSBrZXkgY29sbGlzaW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBvYmplY3QgdG8gd3JpdGUuXG4gICAgICogQHJldHVybnMgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gYWRkLlxuICAgICAqLyAgICBhZGQodCkge1xuICAgICAgICBDKFwiU2ltcGxlRGJcIiwgXCJBRERcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCB0KTtcbiAgICAgICAgcmV0dXJuIER0KHRoaXMuc3RvcmUuYWRkKHQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBrZXkgZnJvbSB0aGUgc3BlY2lmaWVkIHN0b3JlLCBvciBudWxsXG4gICAgICogaWYgbm8gb2JqZWN0IGV4aXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgICAqXG4gICAgICogQGtleSBUaGUga2V5IG9mIHRoZSBvYmplY3QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSBvciBudWxsIGlmIG5vIG9iamVjdCBleGlzdHMuXG4gICAgICovICAgIGdldCh0KSB7XG4gICAgICAgIC8vIFdlJ3JlIGRvaW5nIGFuIHVuc2FmZSBjYXN0IHRvIFZhbHVlVHlwZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIER0KHRoaXMuc3RvcmUuZ2V0KHQpKS5uZXh0KChlID0+IChcbiAgICAgICAgLy8gTm9ybWFsaXplIG5vbmV4aXN0ZW5jZSB0byBudWxsLlxuICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBudWxsKSwgQyhcIlNpbXBsZURiXCIsIFwiR0VUXCIsIHRoaXMuc3RvcmUubmFtZSwgdCwgZSksIGUpKSk7XG4gICAgfVxuICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIEMoXCJTaW1wbGVEYlwiLCBcIkRFTEVURVwiLCB0aGlzLnN0b3JlLm5hbWUsIHQpO1xuICAgICAgICByZXR1cm4gRHQodGhpcy5zdG9yZS5kZWxldGUodCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB3ZSBldmVyIG5lZWQgbW9yZSBvZiB0aGUgY291bnQgdmFyaWFudHMsIHdlIGNhbiBhZGQgb3ZlcmxvYWRzLiBGb3Igbm93LFxuICAgICAqIGFsbCB3ZSBuZWVkIGlzIHRvIGNvdW50IGV2ZXJ5dGhpbmcgaW4gYSBzdG9yZS5cbiAgICAgKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiByb3dzIGluIHRoZSBzdG9yZS5cbiAgICAgKi8gICAgY291bnQoKSB7XG4gICAgICAgIEMoXCJTaW1wbGVEYlwiLCBcIkNPVU5UXCIsIHRoaXMuc3RvcmUubmFtZSk7XG4gICAgICAgIHJldHVybiBEdCh0aGlzLnN0b3JlLmNvdW50KCkpO1xuICAgIH1cbiAgICBXKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMub3B0aW9ucyh0LCBlKTtcbiAgICAgICAgLy8gVXNlIGBnZXRBbGwoKWAgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgSW5kZXhlZERCIHYzLCBhcyBpdCBpcyByb3VnaGx5XG4gICAgICAgIC8vIDIwJSBmYXN0ZXIuIFVuZm9ydHVuYXRlbHksIGdldEFsbCgpIGRvZXMgbm90IHN1cHBvcnQgY3VzdG9tIGluZGljZXMuXG4gICAgICAgICAgICAgICAgaWYgKG4uaW5kZXggfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0aGlzLnN0b3JlLmdldEFsbCkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuY3Vyc29yKG4pLCBlID0gW107XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IKHQsICgodCwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGUucHVzaChuKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc3RvcmUuZ2V0QWxsKG4ucmFuZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICB0Lm9uZXJyb3IgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbih0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfSwgdC5vbnN1Y2Nlc3MgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZSh0LnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIGZpcnN0IGBjb3VudGAgZWxlbWVudHMgZnJvbSB0aGUgcHJvdmlkZWQgaW5kZXggcmFuZ2UuIExvYWRzIGFsbFxuICAgICAqIGVsZW1lbnRzIGlmIG5vIGxpbWl0IGlzIHByb3ZpZGVkLlxuICAgICAqLyAgICBKKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuc3RvcmUuZ2V0QWxsKHQsIG51bGwgPT09IGUgPyB2b2lkIDAgOiBlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIG4ub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGUodC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgfSwgbi5vbnN1Y2Nlc3MgPSBlID0+IHtcbiAgICAgICAgICAgICAgICB0KGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFkodCwgZSkge1xuICAgICAgICBDKFwiU2ltcGxlRGJcIiwgXCJERUxFVEUgQUxMXCIsIHRoaXMuc3RvcmUubmFtZSk7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLm9wdGlvbnModCwgZSk7XG4gICAgICAgIG4uWCA9ICExO1xuICAgICAgICBjb25zdCBzID0gdGhpcy5jdXJzb3Iobik7XG4gICAgICAgIHJldHVybiB0aGlzLkgocywgKCh0LCBlLCBuKSA9PiBuLmRlbGV0ZSgpKSk7XG4gICAgfVxuICAgIFoodCwgZSkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgZSA/IG4gPSB0IDogKG4gPSB7fSwgZSA9IHQpO1xuICAgICAgICBjb25zdCBzID0gdGhpcy5jdXJzb3Iobik7XG4gICAgICAgIHJldHVybiB0aGlzLkgocywgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYSBzdG9yZSwgYnV0IHdhaXRzIGZvciB0aGUgZ2l2ZW4gY2FsbGJhY2sgdG8gY29tcGxldGUgZm9yXG4gICAgICogZWFjaCBlbnRyeSBiZWZvcmUgaXRlcmF0aW5nIHRoZSBuZXh0IGVudHJ5LiBUaGlzIGFsbG93cyB0aGUgY2FsbGJhY2sgdG8gZG9cbiAgICAgKiBhc3luY2hyb25vdXMgd29yayB0byBkZXRlcm1pbmUgaWYgdGhpcyBpdGVyYXRpb24gc2hvdWxkIGNvbnRpbnVlLlxuICAgICAqXG4gICAgICogVGhlIHByb3ZpZGVkIGNhbGxiYWNrIHNob3VsZCByZXR1cm4gYHRydWVgIHRvIGNvbnRpbnVlIGl0ZXJhdGlvbiwgYW5kXG4gICAgICogYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovICAgIHR0KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuY3Vyc29yKHt9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGUub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB4dCh0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICAgICAgcyhlKTtcbiAgICAgICAgICAgIH0sIGUub25zdWNjZXNzID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGUudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBzID8gdChzLnByaW1hcnlLZXksIHMudmFsdWUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ID8gcy5jb250aW51ZSgpIDogbigpO1xuICAgICAgICAgICAgICAgIH0pKSA6IG4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgSCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdCgoKHMsIGkpID0+IHtcbiAgICAgICAgICAgIHQub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGkodC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgfSwgdC5vbnN1Y2Nlc3MgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICghaSkgcmV0dXJuIHZvaWQgcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgUHQoaSksIG8gPSBlKGkucHJpbWFyeUtleSwgaS52YWx1ZSwgcik7XG4gICAgICAgICAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBBdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gby5jYXRjaCgodCA9PiAoci5kb25lKCksIEF0LnJlamVjdCh0KSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbi5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByLmlzRG9uZSA/IHMoKSA6IG51bGwgPT09IHIuRyA/IGkuY29udGludWUoKSA6IGkuY29udGludWUoci5HKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBBdC53YWl0Rm9yKG4pKSk7XG4gICAgfVxuICAgIG9wdGlvbnModCwgZSkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IG4gPSB0IDogZSA9IHQpLCB7XG4gICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgIHJhbmdlOiBlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGN1cnNvcih0KSB7XG4gICAgICAgIGxldCBlID0gXCJuZXh0XCI7XG4gICAgICAgIGlmICh0LnJldmVyc2UgJiYgKGUgPSBcInByZXZcIiksIHQuaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnN0b3JlLmluZGV4KHQuaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIHQuWCA/IG4ub3BlbktleUN1cnNvcih0LnJhbmdlLCBlKSA6IG4ub3BlbkN1cnNvcih0LnJhbmdlLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5vcGVuQ3Vyc29yKHQucmFuZ2UsIGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBXcmFwcyBhbiBJREJSZXF1ZXN0IGluIGEgUGVyc2lzdGVuY2VQcm9taXNlLCB1c2luZyB0aGUgb25zdWNjZXNzIC8gb25lcnJvclxuICogaGFuZGxlcnMgdG8gcmVzb2x2ZSAvIHJlamVjdCB0aGUgUGVyc2lzdGVuY2VQcm9taXNlIGFzIGFwcHJvcHJpYXRlLlxuICovIGZ1bmN0aW9uIER0KHQpIHtcbiAgICByZXR1cm4gbmV3IEF0KCgoZSwgbikgPT4ge1xuICAgICAgICB0Lm9uc3VjY2VzcyA9IHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgIGUobik7XG4gICAgICAgIH0sIHQub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IHh0KHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIG4oZSk7XG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuXG4vLyBHdWFyZCBzbyB3ZSBvbmx5IHJlcG9ydCB0aGUgZXJyb3Igb25jZS5cbmxldCBDdCA9ICExO1xuXG5mdW5jdGlvbiB4dCh0KSB7XG4gICAgY29uc3QgZSA9IGJ0LkQoZ2V0VUEoKSk7XG4gICAgaWYgKGUgPj0gMTIuMiAmJiBlIDwgMTMpIHtcbiAgICAgICAgY29uc3QgZSA9IFwiQW4gaW50ZXJuYWwgZXJyb3Igd2FzIGVuY291bnRlcmVkIGluIHRoZSBJbmRleGVkIERhdGFiYXNlIHNlcnZlclwiO1xuICAgICAgICBpZiAodC5tZXNzYWdlLmluZGV4T2YoZSkgPj0gMCkge1xuICAgICAgICAgICAgLy8gV3JhcCBlcnJvciBpbiBhIG1vcmUgZGVzY3JpcHRpdmUgb25lLlxuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBMKFwiaW50ZXJuYWxcIiwgYElPU19JTkRFWEVEREJfQlVHMTogSW5kZXhlZERiIGhhcyB0aHJvd24gJyR7ZX0nLiBUaGlzIGlzIGxpa2VseSBkdWUgdG8gYW4gdW5hdm9pZGFibGUgYnVnIGluIGlPUy4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS81NjQ5NjI5Ni8xMTA5MTUgZm9yIGRldGFpbHMgYW5kIGEgcG90ZW50aWFsIHdvcmthcm91bmQuYCk7XG4gICAgICAgICAgICByZXR1cm4gQ3QgfHwgKEN0ID0gITAsIFxuICAgICAgICAgICAgLy8gVGhyb3cgYSBnbG9iYWwgZXhjZXB0aW9uIG91dHNpZGUgb2YgdGhpcyBwcm9taXNlIGNoYWluLCBmb3IgdGhlIHVzZXIgdG9cbiAgICAgICAgICAgIC8vIHBvdGVudGlhbGx5IGNhdGNoLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IHQ7XG4gICAgICAgICAgICB9KSwgMCkpLCB0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0O1xufVxuXG4vKiogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHNjaGVkdWxpbmcgb2YgSW5kZXggQmFja2ZpbGxlci4gKi9cbmNsYXNzIE50IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZSA9IHQsIHRoaXMuZXQgPSBlLCB0aGlzLnRhc2sgPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5udCgxNWUzKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy50YXNrICYmICh0aGlzLnRhc2suY2FuY2VsKCksIHRoaXMudGFzayA9IG51bGwpO1xuICAgIH1cbiAgICBnZXQgc3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMudGFzaztcbiAgICB9XG4gICAgbnQodCkge1xuICAgICAgICBDKFwiSW5kZXhCYWNraWxsZXJcIiwgYFNjaGVkdWxlZCBpbiAke3R9bXNgKSwgdGhpcy50YXNrID0gdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBZnRlckRlbGF5KFwiaW5kZXhfYmFja2ZpbGxcIiAvKiBJbmRleEJhY2tmaWxsICovICwgdCwgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEMoXCJJbmRleEJhY2tpbGxlclwiLCBgRG9jdW1lbnRzIHdyaXR0ZW46ICR7YXdhaXQgdGhpcy5ldC5zdCgpfWApO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIFZ0KHQpID8gQyhcIkluZGV4QmFja2lsbGVyXCIsIFwiSWdub3JpbmcgSW5kZXhlZERCIGVycm9yIGR1cmluZyBpbmRleCBiYWNrZmlsbDogXCIsIHQpIDogYXdhaXQgRXQodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm50KDZlNCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKiBJbXBsZW1lbnRzIHRoZSBzdGVwcyBmb3IgYmFja2ZpbGxpbmcgaW5kZXhlcy4gKi8gY2xhc3Mga3Qge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIExvY2FsU3RvcmUgcHJvdmlkZXMgYWNjZXNzIHRvIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFZpZXcuXG4gICAgICogVGhlc2UgcHJvcGVydGllcyB3aWxsIHVwZGF0ZSB3aGVuIHRoZSB1c2VyIGNoYW5nZXMuIENvbnNlcXVlbnRseSxcbiAgICAgKiBtYWtpbmcgYSBsb2NhbCBjb3B5IG9mIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFZpZXcgd2lsbCByZXF1aXJlXG4gICAgICogdXBkYXRlcyBvdmVyIHRpbWUuIFRoZSBzaW1wbGVyIHNvbHV0aW9uIGlzIHRvIHJlbHkgb24gTG9jYWxTdG9yZSB0byBoYXZlXG4gICAgICogYW4gdXAtdG8tZGF0ZSByZWZlcmVuY2VzIHRvIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFN0b3JlLlxuICAgICAqL1xuICAgIHQsIGUpIHtcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlID0gdCwgdGhpcy5wZXJzaXN0ZW5jZSA9IGU7XG4gICAgfVxuICAgIGFzeW5jIHN0KHQgPSA1MCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkJhY2tmaWxsIEluZGV4ZXNcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB0aGlzLml0KGUsIHQpKSk7XG4gICAgfVxuICAgIC8qKiBXcml0ZXMgaW5kZXggZW50cmllcyB1bnRpbCB0aGUgY2FwIGlzIHJlYWNoZWQuIFJldHVybnMgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgcHJvY2Vzc2VkLiAqLyAgICBpdCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgU2V0O1xuICAgICAgICBsZXQgcyA9IGUsIGkgPSAhMDtcbiAgICAgICAgcmV0dXJuIEF0LmRvV2hpbGUoKCgpID0+ICEwID09PSBpICYmIHMgPiAwKSwgKCgpID0+IHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIuZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlKHQpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGUgJiYgIW4uaGFzKGUpKSByZXR1cm4gQyhcIkluZGV4QmFja2lsbGVyXCIsIGBQcm9jZXNzaW5nIGNvbGxlY3Rpb246ICR7ZX1gKSwgXG4gICAgICAgICAgICB0aGlzLnJ0KHQsIGUsIHMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHMgLT0gdCwgbi5hZGQoZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpID0gITE7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IGUgLSBzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBlbnRyaWVzIGZvciB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbiBncm91cC4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyBwcm9jZXNzZWQuXG4gICAgICovICAgIHJ0KHQsIGUsIG4pIHtcbiAgICAgICAgLy8gVXNlIHRoZSBlYXJsaWVzdCBvZmZzZXQgb2YgYWxsIGZpZWxkIGluZGV4ZXMgdG8gcXVlcnkgdGhlIGxvY2FsIGNhY2hlLlxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlLmluZGV4TWFuYWdlci5nZXRNaW5PZmZzZXRGcm9tQ29sbGVjdGlvbkdyb3VwKHQsIGUpLm5leHQoKHMgPT4gdGhpcy5sb2NhbFN0b3JlLmxvY2FsRG9jdW1lbnRzLmdldE5leHREb2N1bWVudHModCwgZSwgcywgbikubmV4dCgobiA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5jaGFuZ2VzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIudXBkYXRlSW5kZXhFbnRyaWVzKHQsIGkpLm5leHQoKCgpID0+IHRoaXMub3QocywgbikpKS5uZXh0KChuID0+IChDKFwiSW5kZXhCYWNraWxsZXJcIiwgYFVwZGF0aW5nIG9mZnNldDogJHtufWApLCBcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIudXBkYXRlQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4pKSkpLm5leHQoKCgpID0+IGkuc2l6ZSkpO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIG5leHQgb2Zmc2V0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkb2N1bWVudHMuICovICAgIG90KHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSB0O1xuICAgICAgICByZXR1cm4gZS5jaGFuZ2VzLmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gZ3QoZSk7XG4gICAgICAgICAgICBwdChzLCBuKSA+IDAgJiYgKG4gPSBzKTtcbiAgICAgICAgfSkpLCBuZXcgeXQobi5yZWFkVGltZSwgbi5kb2N1bWVudEtleSwgTWF0aC5tYXgoZS5iYXRjaElkLCB0Lmxhcmdlc3RCYXRjaElkKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBgTGlzdGVuU2VxdWVuY2VgIGlzIGEgbW9ub3RvbmljIHNlcXVlbmNlLiBJdCBpcyBpbml0aWFsaXplZCB3aXRoIGEgbWluaW11bSB2YWx1ZSB0b1xuICogZXhjZWVkLiBBbGwgc3Vic2VxdWVudCBjYWxscyB0byBuZXh0IHdpbGwgcmV0dXJuIGluY3JlYXNpbmcgdmFsdWVzLiBJZiBwcm92aWRlZCB3aXRoIGFcbiAqIGBTZXF1ZW5jZU51bWJlclN5bmNlcmAsIGl0IHdpbGwgYWRkaXRpb25hbGx5IGJ1bXAgaXRzIG5leHQgdmFsdWUgd2hlbiB0b2xkIG9mIGEgbmV3IHZhbHVlLCBhc1xuICogd2VsbCBhcyB3cml0ZSBvdXQgc2VxdWVuY2UgbnVtYmVycyB0aGF0IGl0IHByb2R1Y2VzIHZpYSBgbmV4dCgpYC5cbiAqLyBjbGFzcyBPdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSB0LCBlICYmIChlLnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IHQgPT4gdGhpcy51dCh0KSwgdGhpcy5jdCA9IHQgPT4gZS53cml0ZVNlcXVlbmNlTnVtYmVyKHQpKTtcbiAgICB9XG4gICAgdXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID0gTWF0aC5tYXgodCwgdGhpcy5wcmV2aW91c1ZhbHVlKSwgdGhpcy5wcmV2aW91c1ZhbHVlO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCB0ID0gKyt0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLmN0ICYmIHRoaXMuY3QodCksIHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZnVuY3Rpb24gTXQodCkge1xuICAgIGxldCBlID0gMDtcbiAgICBmb3IgKGNvbnN0IG4gaW4gdCkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG4pICYmIGUrKztcbiAgICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gRnQodCwgZSkge1xuICAgIGZvciAoY29uc3QgbiBpbiB0KSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgbikgJiYgZShuLCB0W25dKTtcbn1cblxuZnVuY3Rpb24gJHQodCkge1xuICAgIGZvciAoY29uc3QgZSBpbiB0KSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIGUpKSByZXR1cm4gITE7XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gQW4gaW1tdXRhYmxlIHNvcnRlZCBtYXAgaW1wbGVtZW50YXRpb24sIGJhc2VkIG9uIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFja1xuLy8gdHJlZS5cbk90LmF0ID0gLTE7XG5cbmNsYXNzIEJ0IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuY29tcGFyYXRvciA9IHQsIHRoaXMucm9vdCA9IGUgfHwgVXQuRU1QVFk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQgb3IgcmVwbGFjZWQuXG4gICAgaW5zZXJ0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCdCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMucm9vdC5pbnNlcnQodCwgZSwgdGhpcy5jb21wYXJhdG9yKS5jb3B5KG51bGwsIG51bGwsIFV0LkJMQUNLLCBudWxsLCBudWxsKSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cbiAgICByZW1vdmUodCkge1xuICAgICAgICByZXR1cm4gbmV3IEJ0KHRoaXMuY29tcGFyYXRvciwgdGhpcy5yb290LnJlbW92ZSh0LCB0aGlzLmNvbXBhcmF0b3IpLmNvcHkobnVsbCwgbnVsbCwgVXQuQkxBQ0ssIG51bGwsIG51bGwpKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4ga2V5LCBvciBudWxsLlxuICAgIGdldCh0KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5yb290O1xuICAgICAgICBmb3IgKDshZS5pc0VtcHR5KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuY29tcGFyYXRvcih0LCBlLmtleSk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gbikgcmV0dXJuIGUudmFsdWU7XG4gICAgICAgICAgICBuIDwgMCA/IGUgPSBlLmxlZnQgOiBuID4gMCAmJiAoZSA9IGUucmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGlzIHNvcnRlZCBtYXAsIG9yIC0xIGlmIGl0IGRvZXNuJ3RcbiAgICAvLyBleGlzdC5cbiAgICBpbmRleE9mKHQpIHtcbiAgICAgICAgLy8gTnVtYmVyIG9mIG5vZGVzIHRoYXQgd2VyZSBwcnVuZWQgd2hlbiBkZXNjZW5kaW5nIHJpZ2h0XG4gICAgICAgIGxldCBlID0gMCwgbiA9IHRoaXMucm9vdDtcbiAgICAgICAgZm9yICg7IW4uaXNFbXB0eSgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLmNvbXBhcmF0b3IodCwgbi5rZXkpO1xuICAgICAgICAgICAgaWYgKDAgPT09IHMpIHJldHVybiBlICsgbi5sZWZ0LnNpemU7XG4gICAgICAgICAgICBzIDwgMCA/IG4gPSBuLmxlZnQgOiAoXG4gICAgICAgICAgICAvLyBDb3VudCBhbGwgbm9kZXMgbGVmdCBvZiB0aGUgbm9kZSBwbHVzIHRoZSBub2RlIGl0c2VsZlxuICAgICAgICAgICAgZSArPSBuLmxlZnQuc2l6ZSArIDEsIG4gPSBuLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb2RlIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIHRvdGFsIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbWFwLlxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LnNpemU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1pbmltdW0ga2V5IGluIHRoZSBtYXAuXG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm1pbktleSgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtYXhpbXVtIGtleSBpbiB0aGUgbWFwLlxuICAgIG1heEtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5tYXhLZXkoKTtcbiAgICB9XG4gICAgLy8gVHJhdmVyc2VzIHRoZSBtYXAgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxuICAgIC8vIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgaW5vcmRlclRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuaW5vcmRlclRyYXZlcnNhbCh0KTtcbiAgICB9XG4gICAgZm9yRWFjaCh0KSB7XG4gICAgICAgIHRoaXMuaW5vcmRlclRyYXZlcnNhbCgoKGUsIG4pID0+ICh0KGUsIG4pLCAhMSkpKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5vcmRlclRyYXZlcnNhbCgoKGUsIG4pID0+ICh0LnB1c2goYCR7ZX06JHtufWApLCAhMSkpKSwgYHske3Quam9pbihcIiwgXCIpfX1gO1xuICAgIH1cbiAgICAvLyBUcmF2ZXJzZXMgdGhlIG1hcCBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb25cbiAgICAvLyBmdW5jdGlvbiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzXG4gICAgLy8gYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgcmV2ZXJzZVRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QucmV2ZXJzZVRyYXZlcnNhbCh0KTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhbiBpdGVyYXRvciBvdmVyIHRoZSBTb3J0ZWRNYXAuXG4gICAgZ2V0SXRlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTHQodGhpcy5yb290LCBudWxsLCB0aGlzLmNvbXBhcmF0b3IsICExKTtcbiAgICB9XG4gICAgZ2V0SXRlcmF0b3JGcm9tKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMdCh0aGlzLnJvb3QsIHQsIHRoaXMuY29tcGFyYXRvciwgITEpO1xuICAgIH1cbiAgICBnZXRSZXZlcnNlSXRlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTHQodGhpcy5yb290LCBudWxsLCB0aGlzLmNvbXBhcmF0b3IsICEwKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbSh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTHQodGhpcy5yb290LCB0LCB0aGlzLmNvbXBhcmF0b3IsICEwKTtcbiAgICB9XG59XG5cbiAvLyBlbmQgU29ydGVkTWFwXG4vLyBBbiBpdGVyYXRvciBvdmVyIGFuIExMUkJOb2RlLlxuY2xhc3MgTHQge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy5pc1JldmVyc2UgPSBzLCB0aGlzLm5vZGVTdGFjayA9IFtdO1xuICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgIGZvciAoOyF0LmlzRW1wdHkoKTsgKSBpZiAoaSA9IGUgPyBuKHQua2V5LCBlKSA6IDEsIFxuICAgICAgICAvLyBmbGlwIHRoZSBjb21wYXJpc29uIGlmIHdlJ3JlIGdvaW5nIGluIHJldmVyc2VcbiAgICAgICAgZSAmJiBzICYmIChpICo9IC0xKSwgaSA8IDApIFxuICAgICAgICAvLyBUaGlzIG5vZGUgaXMgbGVzcyB0aGFuIG91ciBzdGFydCBrZXkuIGlnbm9yZSBpdFxuICAgICAgICB0ID0gdGhpcy5pc1JldmVyc2UgPyB0LmxlZnQgOiB0LnJpZ2h0OyBlbHNlIHtcbiAgICAgICAgICAgIGlmICgwID09PSBpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGV4YWN0bHkgZXF1YWwgdG8gb3VyIHN0YXJ0IGtleS4gUHVzaCBpdCBvbiB0aGUgc3RhY2ssXG4gICAgICAgICAgICAgICAgLy8gYnV0IHN0b3AgaXRlcmF0aW5nO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrLnB1c2godCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZ3JlYXRlciB0aGFuIG91ciBzdGFydCBrZXksIGFkZCBpdCB0byB0aGUgc3RhY2sgYW5kIG1vdmVcbiAgICAgICAgICAgIC8vIHRvIHRoZSBuZXh0IG9uZVxuICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2sucHVzaCh0KSwgdCA9IHRoaXMuaXNSZXZlcnNlID8gdC5yaWdodCA6IHQubGVmdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXROZXh0KCkge1xuICAgICAgICBsZXQgdCA9IHRoaXMubm9kZVN0YWNrLnBvcCgpO1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAga2V5OiB0LmtleSxcbiAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZSkgZm9yICh0ID0gdC5sZWZ0OyAhdC5pc0VtcHR5KCk7ICkgdGhpcy5ub2RlU3RhY2sucHVzaCh0KSwgdCA9IHQucmlnaHQ7IGVsc2UgZm9yICh0ID0gdC5yaWdodDsgIXQuaXNFbXB0eSgpOyApIHRoaXMubm9kZVN0YWNrLnB1c2godCksIFxuICAgICAgICB0ID0gdC5sZWZ0O1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgaGFzTmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVN0YWNrLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIHBlZWsoKSB7XG4gICAgICAgIGlmICgwID09PSB0aGlzLm5vZGVTdGFjay5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5ub2RlU3RhY2tbdGhpcy5ub2RlU3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHQua2V5LFxuICAgICAgICAgICAgdmFsdWU6IHQudmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbiAvLyBlbmQgU29ydGVkTWFwSXRlcmF0b3Jcbi8vIFJlcHJlc2VudHMgYSBub2RlIGluIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFjayB0cmVlLlxuY2xhc3MgVXQge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgdGhpcy5rZXkgPSB0LCB0aGlzLnZhbHVlID0gZSwgdGhpcy5jb2xvciA9IG51bGwgIT0gbiA/IG4gOiBVdC5SRUQsIHRoaXMubGVmdCA9IG51bGwgIT0gcyA/IHMgOiBVdC5FTVBUWSwgXG4gICAgICAgIHRoaXMucmlnaHQgPSBudWxsICE9IGkgPyBpIDogVXQuRU1QVFksIHRoaXMuc2l6ZSA9IHRoaXMubGVmdC5zaXplICsgMSArIHRoaXMucmlnaHQuc2l6ZTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZSwgb3B0aW9uYWxseSByZXBsYWNpbmcgcGllY2VzIG9mIGl0LlxuICAgIGNvcHkodCwgZSwgbiwgcywgaSkge1xuICAgICAgICByZXR1cm4gbmV3IFV0KG51bGwgIT0gdCA/IHQgOiB0aGlzLmtleSwgbnVsbCAhPSBlID8gZSA6IHRoaXMudmFsdWUsIG51bGwgIT0gbiA/IG4gOiB0aGlzLmNvbG9yLCBudWxsICE9IHMgPyBzIDogdGhpcy5sZWZ0LCBudWxsICE9IGkgPyBpIDogdGhpcy5yaWdodCk7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLy8gVHJhdmVyc2VzIHRoZSB0cmVlIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAvLyBmb3IgZWFjaCBub2RlLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgaW5vcmRlclRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuaW5vcmRlclRyYXZlcnNhbCh0KSB8fCB0KHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fCB0aGlzLnJpZ2h0Lmlub3JkZXJUcmF2ZXJzYWwodCk7XG4gICAgfVxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb25cbiAgICAvLyBmdW5jdGlvbiBmb3IgZWFjaCBub2RlLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgcmV2ZXJzZVRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LnJldmVyc2VUcmF2ZXJzYWwodCkgfHwgdCh0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHwgdGhpcy5sZWZ0LnJldmVyc2VUcmF2ZXJzYWwodCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1pbmltdW0gbm9kZSBpbiB0aGUgdHJlZS5cbiAgICBtaW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuaXNFbXB0eSgpID8gdGhpcyA6IHRoaXMubGVmdC5taW4oKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oKS5rZXk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxuICAgIG1heEtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuaXNFbXB0eSgpID8gdGhpcy5rZXkgOiB0aGlzLnJpZ2h0Lm1heEtleSgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlLCB3aXRoIHRoZSBrZXkvdmFsdWUgYWRkZWQuXG4gICAgaW5zZXJ0KHQsIGUsIG4pIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzO1xuICAgICAgICBjb25zdCBpID0gbih0LCBzLmtleSk7XG4gICAgICAgIHJldHVybiBzID0gaSA8IDAgPyBzLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgcy5sZWZ0Lmluc2VydCh0LCBlLCBuKSwgbnVsbCkgOiAwID09PSBpID8gcy5jb3B5KG51bGwsIGUsIG51bGwsIG51bGwsIG51bGwpIDogcy5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIHMucmlnaHQuaW5zZXJ0KHQsIGUsIG4pKSwgXG4gICAgICAgIHMuZml4VXAoKTtcbiAgICB9XG4gICAgcmVtb3ZlTWluKCkge1xuICAgICAgICBpZiAodGhpcy5sZWZ0LmlzRW1wdHkoKSkgcmV0dXJuIFV0LkVNUFRZO1xuICAgICAgICBsZXQgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0LmxlZnQuaXNSZWQoKSB8fCB0LmxlZnQubGVmdC5pc1JlZCgpIHx8ICh0ID0gdC5tb3ZlUmVkTGVmdCgpKSwgdCA9IHQuY29weShudWxsLCBudWxsLCBudWxsLCB0LmxlZnQucmVtb3ZlTWluKCksIG51bGwpLCBcbiAgICAgICAgdC5maXhVcCgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQgaXRlbSByZW1vdmVkLlxuICAgIHJlbW92ZSh0LCBlKSB7XG4gICAgICAgIGxldCBuLCBzID0gdGhpcztcbiAgICAgICAgaWYgKGUodCwgcy5rZXkpIDwgMCkgcy5sZWZ0LmlzRW1wdHkoKSB8fCBzLmxlZnQuaXNSZWQoKSB8fCBzLmxlZnQubGVmdC5pc1JlZCgpIHx8IChzID0gcy5tb3ZlUmVkTGVmdCgpKSwgXG4gICAgICAgIHMgPSBzLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgcy5sZWZ0LnJlbW92ZSh0LCBlKSwgbnVsbCk7IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHMubGVmdC5pc1JlZCgpICYmIChzID0gcy5yb3RhdGVSaWdodCgpKSwgcy5yaWdodC5pc0VtcHR5KCkgfHwgcy5yaWdodC5pc1JlZCgpIHx8IHMucmlnaHQubGVmdC5pc1JlZCgpIHx8IChzID0gcy5tb3ZlUmVkUmlnaHQoKSksIFxuICAgICAgICAgICAgMCA9PT0gZSh0LCBzLmtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5yaWdodC5pc0VtcHR5KCkpIHJldHVybiBVdC5FTVBUWTtcbiAgICAgICAgICAgICAgICBuID0gcy5yaWdodC5taW4oKSwgcyA9IHMuY29weShuLmtleSwgbi52YWx1ZSwgbnVsbCwgbnVsbCwgcy5yaWdodC5yZW1vdmVNaW4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzID0gcy5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIHMucmlnaHQucmVtb3ZlKHQsIGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcy5maXhVcCgpO1xuICAgIH1cbiAgICBpc1JlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3I7XG4gICAgfVxuICAgIC8vIFJldHVybnMgbmV3IHRyZWUgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVlZGVkIHJvdGF0aW9ucy5cbiAgICBmaXhVcCgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdC5yaWdodC5pc1JlZCgpICYmICF0LmxlZnQuaXNSZWQoKSAmJiAodCA9IHQucm90YXRlTGVmdCgpKSwgdC5sZWZ0LmlzUmVkKCkgJiYgdC5sZWZ0LmxlZnQuaXNSZWQoKSAmJiAodCA9IHQucm90YXRlUmlnaHQoKSksIFxuICAgICAgICB0LmxlZnQuaXNSZWQoKSAmJiB0LnJpZ2h0LmlzUmVkKCkgJiYgKHQgPSB0LmNvbG9yRmxpcCgpKSwgdDtcbiAgICB9XG4gICAgbW92ZVJlZExlZnQoKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5jb2xvckZsaXAoKTtcbiAgICAgICAgcmV0dXJuIHQucmlnaHQubGVmdC5pc1JlZCgpICYmICh0ID0gdC5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIHQucmlnaHQucm90YXRlUmlnaHQoKSksIFxuICAgICAgICB0ID0gdC5yb3RhdGVMZWZ0KCksIHQgPSB0LmNvbG9yRmxpcCgpKSwgdDtcbiAgICB9XG4gICAgbW92ZVJlZFJpZ2h0KCkge1xuICAgICAgICBsZXQgdCA9IHRoaXMuY29sb3JGbGlwKCk7XG4gICAgICAgIHJldHVybiB0LmxlZnQubGVmdC5pc1JlZCgpICYmICh0ID0gdC5yb3RhdGVSaWdodCgpLCB0ID0gdC5jb2xvckZsaXAoKSksIHQ7XG4gICAgfVxuICAgIHJvdGF0ZUxlZnQoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgVXQuUkVELCBudWxsLCB0aGlzLnJpZ2h0LmxlZnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsIHRoaXMuY29sb3IsIHQsIG51bGwpO1xuICAgIH1cbiAgICByb3RhdGVSaWdodCgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY29weShudWxsLCBudWxsLCBVdC5SRUQsIHRoaXMubGVmdC5yaWdodCwgbnVsbCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCBudWxsLCB0KTtcbiAgICB9XG4gICAgY29sb3JGbGlwKCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMubGVmdC5jb2xvciwgbnVsbCwgbnVsbCksIGUgPSB0aGlzLnJpZ2h0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMucmlnaHQuY29sb3IsIG51bGwsIG51bGwpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KG51bGwsIG51bGwsICF0aGlzLmNvbG9yLCB0LCBlKTtcbiAgICB9XG4gICAgLy8gRm9yIHRlc3RpbmcuXG4gICAgY2hlY2tNYXhEZXB0aCgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY2hlY2soKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIHQpIDw9IHRoaXMuc2l6ZSArIDE7XG4gICAgfVxuICAgIC8vIEluIGEgYmFsYW5jZWQgUkIgdHJlZSwgdGhlIGJsYWNrLWRlcHRoIChudW1iZXIgb2YgYmxhY2sgbm9kZXMpIGZyb20gcm9vdCB0b1xuICAgIC8vIGxlYXZlcyBpcyBlcXVhbCBvbiBib3RoIHNpZGVzLiAgVGhpcyBmdW5jdGlvbiB2ZXJpZmllcyB0aGF0IG9yIGFzc2VydHMuXG4gICAgY2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVkKCkgJiYgdGhpcy5sZWZ0LmlzUmVkKCkpIHRocm93IE8oKTtcbiAgICAgICAgaWYgKHRoaXMucmlnaHQuaXNSZWQoKSkgdGhyb3cgTygpO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5sZWZ0LmNoZWNrKCk7XG4gICAgICAgIGlmICh0ICE9PSB0aGlzLnJpZ2h0LmNoZWNrKCkpIHRocm93IE8oKTtcbiAgICAgICAgcmV0dXJuIHQgKyAodGhpcy5pc1JlZCgpID8gMCA6IDEpO1xuICAgIH1cbn1cblxuIC8vIGVuZCBMTFJCTm9kZVxuLy8gRW1wdHkgbm9kZSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgTExSQiB0cmVlcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5VdC5FTVBUWSA9IG51bGwsIFV0LlJFRCA9ICEwLCBVdC5CTEFDSyA9ICExO1xuXG4vLyBlbmQgTExSQkVtcHR5Tm9kZVxuVXQuRU1QVFkgPSBuZXcgXG4vLyBSZXByZXNlbnRzIGFuIGVtcHR5IG5vZGUgKGEgbGVhZiBub2RlIGluIHRoZSBSZWQtQmxhY2sgVHJlZSkuXG5jbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfVxuICAgIGdldCBjb2xvcigpIHtcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbiAgICBnZXQgbGVmdCgpIHtcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbiAgICBnZXQgcmlnaHQoKSB7XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICBjb3B5KHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkLlxuICAgIGluc2VydCh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXQodCwgZSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgcmVtb3ZlKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgaW5vcmRlclRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV2ZXJzZVRyYXZlcnNhbCh0KSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbWF4S2V5KCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaXNSZWQoKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLy8gRm9yIHRlc3RpbmcuXG4gICAgY2hlY2tNYXhEZXB0aCgpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBjaGVjaygpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU29ydGVkU2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGVsZW1lbnRzXG4gKiBpbiBvcmRlciBzcGVjaWZpZWQgYnkgdGhlIHByb3ZpZGVkIGNvbXBhcmF0b3IuXG4gKlxuICogTk9URTogaWYgcHJvdmlkZWQgY29tcGFyYXRvciByZXR1cm5zIDAgZm9yIHR3byBlbGVtZW50cywgd2UgY29uc2lkZXIgdGhlbSB0b1xuICogYmUgZXF1YWwhXG4gKi9cbmNsYXNzIHF0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuY29tcGFyYXRvciA9IHQsIHRoaXMuZGF0YSA9IG5ldyBCdCh0aGlzLmNvbXBhcmF0b3IpO1xuICAgIH1cbiAgICBoYXModCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5kYXRhLmdldCh0KTtcbiAgICB9XG4gICAgZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubWluS2V5KCk7XG4gICAgfVxuICAgIGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubWF4S2V5KCk7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnNpemU7XG4gICAgfVxuICAgIGluZGV4T2YodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmluZGV4T2YodCk7XG4gICAgfVxuICAgIC8qKiBJdGVyYXRlcyBlbGVtZW50cyBpbiBvcmRlciBkZWZpbmVkIGJ5IFwiY29tcGFyYXRvclwiICovICAgIGZvckVhY2godCkge1xuICAgICAgICB0aGlzLmRhdGEuaW5vcmRlclRyYXZlcnNhbCgoKGUsIG4pID0+ICh0KGUpLCAhMSkpKTtcbiAgICB9XG4gICAgLyoqIEl0ZXJhdGVzIG92ZXIgYGVsZW1gcyBzdWNoIHRoYXQ6IHJhbmdlWzBdICZsdDs9IGVsZW0gJmx0OyByYW5nZVsxXS4gKi8gICAgZm9yRWFjaEluUmFuZ2UodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yRnJvbSh0WzBdKTtcbiAgICAgICAgZm9yICg7bi5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgcyA9IG4uZ2V0TmV4dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29tcGFyYXRvcihzLmtleSwgdFsxXSkgPj0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgZShzLmtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBgZWxlbWBzIHN1Y2ggdGhhdDogc3RhcnQgJmx0Oz0gZWxlbSB1bnRpbCBmYWxzZSBpcyByZXR1cm5lZC5cbiAgICAgKi8gICAgZm9yRWFjaFdoaWxlKHQsIGUpIHtcbiAgICAgICAgbGV0IG47XG4gICAgICAgIGZvciAobiA9IHZvaWQgMCAhPT0gZSA/IHRoaXMuZGF0YS5nZXRJdGVyYXRvckZyb20oZSkgOiB0aGlzLmRhdGEuZ2V0SXRlcmF0b3IoKTsgbi5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgaWYgKCF0KG4uZ2V0TmV4dCgpLmtleSkpIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogRmluZHMgdGhlIGxlYXN0IGVsZW1lbnQgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBlbGVtYC4gKi8gICAgZmlyc3RBZnRlck9yRXF1YWwodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yRnJvbSh0KTtcbiAgICAgICAgcmV0dXJuIGUuaGFzTmV4dCgpID8gZS5nZXROZXh0KCkua2V5IDogbnVsbDtcbiAgICB9XG4gICAgZ2V0SXRlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgS3QodGhpcy5kYXRhLmdldEl0ZXJhdG9yKCkpO1xuICAgIH1cbiAgICBnZXRJdGVyYXRvckZyb20odCkge1xuICAgICAgICByZXR1cm4gbmV3IEt0KHRoaXMuZGF0YS5nZXRJdGVyYXRvckZyb20odCkpO1xuICAgIH1cbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGFuIGVsZW1lbnQgKi8gICAgYWRkKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weSh0aGlzLmRhdGEucmVtb3ZlKHQpLmluc2VydCh0LCAhMCkpO1xuICAgIH1cbiAgICAvKiogRGVsZXRlcyBhbiBlbGVtZW50ICovICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhcyh0KSA/IHRoaXMuY29weSh0aGlzLmRhdGEucmVtb3ZlKHQpKSA6IHRoaXM7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaXNFbXB0eSgpO1xuICAgIH1cbiAgICB1bmlvbldpdGgodCkge1xuICAgICAgICBsZXQgZSA9IHRoaXM7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBgcmVzdWx0YCBhbHdheXMgcmVmZXJzIHRvIHRoZSBsYXJnZXIgb25lIG9mIHRoZSB0d28gc2V0cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zaXplIDwgdC5zaXplICYmIChlID0gdCwgdCA9IHRoaXMpLCB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgZSA9IGUuYWRkKHQpO1xuICAgICAgICB9KSksIGU7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgcXQpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IHQuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yKCksIG4gPSB0LmRhdGEuZ2V0SXRlcmF0b3IoKTtcbiAgICAgICAgZm9yICg7ZS5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuZ2V0TmV4dCgpLmtleSwgcyA9IG4uZ2V0TmV4dCgpLmtleTtcbiAgICAgICAgICAgIGlmICgwICE9PSB0aGlzLmNvbXBhcmF0b3IodCwgcykpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0LnB1c2goZSk7XG4gICAgICAgIH0pKSwgdDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZSA9PiB0LnB1c2goZSkpKSwgXCJTb3J0ZWRTZXQoXCIgKyB0LnRvU3RyaW5nKCkgKyBcIilcIjtcbiAgICB9XG4gICAgY29weSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgcXQodGhpcy5jb21wYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIGUuZGF0YSA9IHQsIGU7XG4gICAgfVxufVxuXG5jbGFzcyBLdCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLml0ZXIgPSB0O1xuICAgIH1cbiAgICBnZXROZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVyLmdldE5leHQoKS5rZXk7XG4gICAgfVxuICAgIGhhc05leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZXIuaGFzTmV4dCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gc29ydGVkIHNldHMgZm9yIGVxdWFsaXR5IHVzaW5nIHRoZWlyIG5hdHVyYWwgb3JkZXJpbmcuIFRoZVxuICogbWV0aG9kIGNvbXB1dGVzIHRoZSBpbnRlcnNlY3Rpb24gYW5kIGludm9rZXMgYG9uQWRkYCBmb3IgZXZlcnkgZWxlbWVudCB0aGF0XG4gKiBpcyBpbiBgYWZ0ZXJgIGJ1dCBub3QgYGJlZm9yZWAuIGBvblJlbW92ZWAgaXMgaW52b2tlZCBmb3IgZXZlcnkgZWxlbWVudCBpblxuICogYGJlZm9yZWAgYnV0IG1pc3NpbmcgZnJvbSBgYWZ0ZXJgLlxuICpcbiAqIFRoZSBtZXRob2QgY3JlYXRlcyBhIGNvcHkgb2YgYm90aCBgYmVmb3JlYCBhbmQgYGFmdGVyYCBhbmQgcnVucyBpbiBPKG4gbG9nXG4gKiBuKSwgd2hlcmUgbiBpcyB0aGUgc2l6ZSBvZiB0aGUgdHdvIGxpc3RzLlxuICpcbiAqIEBwYXJhbSBiZWZvcmUgLSBUaGUgZWxlbWVudHMgdGhhdCBleGlzdCBpbiB0aGUgb3JpZ2luYWwgc2V0LlxuICogQHBhcmFtIGFmdGVyIC0gVGhlIGVsZW1lbnRzIHRvIGRpZmYgYWdhaW5zdCB0aGUgb3JpZ2luYWwgc2V0LlxuICogQHBhcmFtIGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmb3IgdGhlIGVsZW1lbnRzIGluIGJlZm9yZSBhbmQgYWZ0ZXIuXG4gKiBAcGFyYW0gb25BZGQgLSBBIGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZXZlcnkgZWxlbWVudCB0aGF0IGlzIHBhcnQgb2YgYFxuICogYWZ0ZXJgIGJ1dCBub3QgYGJlZm9yZWAuXG4gKiBAcGFyYW0gb25SZW1vdmUgLSBBIGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZXZlcnkgZWxlbWVudCB0aGF0IGlzIHBhcnQgb2ZcbiAqIGBiZWZvcmVgIGJ1dCBub3QgYGFmdGVyYC5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IGVsZW1lbnQgZnJvbSB0aGUgaXRlcmF0b3Igb3IgYHVuZGVmaW5lZGAgaWYgbm9uZSBhdmFpbGFibGUuXG4gKi9cbmZ1bmN0aW9uIEd0KHQpIHtcbiAgICByZXR1cm4gdC5oYXNOZXh0KCkgPyB0LmdldE5leHQoKSA6IHZvaWQgMDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgZmllbGRzIHRoYXQgY2FuIGJlIHVzZWQgdG8gcGFydGlhbGx5IHBhdGNoIGEgZG9jdW1lbnQuXG4gKiBGaWVsZE1hc2sgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIE9iamVjdFZhbHVlLlxuICogRXhhbXBsZXM6XG4gKiAgIGZvbyAtIE92ZXJ3cml0ZXMgZm9vIGVudGlyZWx5IHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLiBJZiBmb28gaXMgbm90XG4gKiAgICAgICAgIHByZXNlbnQgaW4gdGhlIGNvbXBhbmlvbiBPYmplY3RWYWx1ZSwgdGhlIGZpZWxkIGlzIGRlbGV0ZWQuXG4gKiAgIGZvby5iYXIgLSBPdmVyd3JpdGVzIG9ubHkgdGhlIGZpZWxkIGJhciBvZiB0aGUgb2JqZWN0IGZvby5cbiAqICAgICAgICAgICAgIElmIGZvbyBpcyBub3QgYW4gb2JqZWN0LCBmb28gaXMgcmVwbGFjZWQgd2l0aCBhbiBvYmplY3RcbiAqICAgICAgICAgICAgIGNvbnRhaW5pbmcgZm9vXG4gKi8gY2xhc3MgUXQge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0LCBcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0aW9uIG9mIEZpZWxkTWFza1xuICAgICAgICAvLyBTb3J0IHRoZSBmaWVsZCBtYXNrIHRvIHN1cHBvcnQgYEZpZWxkTWFzay5pc0VxdWFsKClgIGFuZCBhc3NlcnQgYmVsb3cuXG4gICAgICAgIHQuc29ydCh1dC5jb21wYXJhdG9yKTtcbiAgICB9XG4gICAgc3RhdGljIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gbmV3IFF0KFtdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBGaWVsZE1hc2sgb2JqZWN0IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBhZGRpbmcgYWxsIHRoZSBnaXZlblxuICAgICAqIGZpZWxkcyBwYXRocyB0byB0aGlzIGZpZWxkIG1hc2suXG4gICAgICovICAgIHVuaW9uV2l0aCh0KSB7XG4gICAgICAgIGxldCBlID0gbmV3IHF0KHV0LmNvbXBhcmF0b3IpO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5maWVsZHMpIGUgPSBlLmFkZCh0KTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIGUgPSBlLmFkZChuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdChlLnRvQXJyYXkoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgYGZpZWxkUGF0aGAgaXMgaW5jbHVkZWQgYnkgYXQgbGVhc3Qgb25lIGZpZWxkIGluIHRoaXMgZmllbGRcbiAgICAgKiBtYXNrLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBPKG4pIG9wZXJhdGlvbiwgd2hlcmUgYG5gIGlzIHRoZSBzaXplIG9mIHRoZSBmaWVsZCBtYXNrLlxuICAgICAqLyAgICBjb3ZlcnModCkge1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5maWVsZHMpIGlmIChlLmlzUHJlZml4T2YodCkpIHJldHVybiAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHR0KHRoaXMuZmllbGRzLCB0LmZpZWxkcywgKCh0LCBlKSA9PiB0LmlzRXF1YWwoZSkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQ29udmVydHMgYSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBiaW5hcnkgc3RyaW5nLiAqL1xuLyoqIFRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIEJhc2U2NCBjb252ZXJzaW9uIGZ1bmN0aW9ucyBhcmUgYXZhaWxhYmxlLiAqL1xuZnVuY3Rpb24ganQoKSB7XG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGF0b2I7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEltbXV0YWJsZSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBcInByb3RvXCIgYnl0ZSBzdHJpbmcuXG4gKlxuICogUHJvdG8gYnl0ZSBzdHJpbmdzIGNhbiBlaXRoZXIgYmUgQmFzZTY0LWVuY29kZWQgc3RyaW5ncyBvciBVaW50OEFycmF5cyB3aGVuXG4gKiBzZW50IG9uIHRoZSB3aXJlLiBUaGlzIGNsYXNzIGFic3RyYWN0cyBhd2F5IHRoaXMgZGlmZmVyZW50aWF0aW9uIGJ5IGhvbGRpbmdcbiAqIHRoZSBwcm90byBieXRlIHN0cmluZyBpbiBhIGNvbW1vbiBjbGFzcyB0aGF0IG11c3QgYmUgY29udmVydGVkIGludG8gYSBzdHJpbmdcbiAqIGJlZm9yZSBiZWluZyBzZW50IGFzIGEgcHJvdG8uXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBXdCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmJpbmFyeVN0cmluZyA9IHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmFzZTY0U3RyaW5nKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IGF0b2IodCk7XG4gICAgICAgIHJldHVybiBuZXcgV3QoZSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVWludDhBcnJheSh0KSB7XG4gICAgICAgIC8vIFRPRE8oaW5kZXhpbmcpOyBSZW1vdmUgdGhlIGNvcHkgb2YgdGhlIGJ5dGUgc3RyaW5nIGhlcmUgYXMgdGhpcyBtZXRob2RcbiAgICAgICAgLy8gaXMgZnJlcXVlbnRseSBjYWxsZWQgZHVyaW5nIGluZGV4aW5nLlxuICAgICAgICBjb25zdCBlID0gXG4gICAgICAgIC8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYW4gVWludDhhcnJheSB0byBhIGJpbmFyeSBzdHJpbmcuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbGV0IGUgPSBcIlwiO1xuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgKytuKSBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodFtuXSk7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGEgYmluYXJ5IHN0cmluZyB0byBhbiBVaW50OEFycmF5LlxuICovICh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBXdChlKTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHQgPCB0aGlzLmJpbmFyeVN0cmluZy5sZW5ndGggPyB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQodCsrKSxcbiAgICAgICAgICAgICAgICBkb25lOiAhMVxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gdCA9IHRoaXMuYmluYXJ5U3RyaW5nLCBidG9hKHQpO1xuICAgICAgICAvKiogQ29udmVydHMgYSBiaW5hcnkgc3RyaW5nIHRvIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nLiAqL1xuICAgICAgICB2YXIgdDtcbiAgICB9XG4gICAgdG9VaW50OEFycmF5KCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBVaW50OEFycmF5KHQubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykgZVtuXSA9IHQuY2hhckNvZGVBdChuKTtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgICAgIC8vIEEgUmVnRXhwIG1hdGNoaW5nIElTTyA4NjAxIFVUQyB0aW1lc3RhbXBzIHdpdGggb3B0aW9uYWwgZnJhY3Rpb24uXG4gICAgICAgICh0aGlzLmJpbmFyeVN0cmluZyk7XG4gICAgfVxuICAgIGFwcHJveGltYXRlQnl0ZVNpemUoKSB7XG4gICAgICAgIHJldHVybiAyICogdGhpcy5iaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgIH1cbiAgICBjb21wYXJlVG8odCkge1xuICAgICAgICByZXR1cm4gWih0aGlzLmJpbmFyeVN0cmluZywgdC5iaW5hcnlTdHJpbmcpO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmluYXJ5U3RyaW5nID09PSB0LmJpbmFyeVN0cmluZztcbiAgICB9XG59XG5cbld0LkVNUFRZX0JZVEVfU1RSSU5HID0gbmV3IFd0KFwiXCIpO1xuXG5jb25zdCB6dCA9IG5ldyBSZWdFeHAoL15cXGR7NH0tXFxkXFxkLVxcZFxcZFRcXGRcXGQ6XFxkXFxkOlxcZFxcZCg/OlxcLihcXGQrKSk/WiQvKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgcG9zc2libGUgUHJvdG8gdmFsdWVzIGZvciBhIHRpbWVzdGFtcCB2YWx1ZSBpbnRvIGEgXCJzZWNvbmRzIGFuZFxuICogbmFub3NcIiByZXByZXNlbnRhdGlvbi5cbiAqLyBmdW5jdGlvbiBIdCh0KSB7XG4gICAgLy8gVGhlIGpzb24gaW50ZXJmYWNlIChmb3IgdGhlIGJyb3dzZXIpIHdpbGwgcmV0dXJuIGFuIGlzbyB0aW1lc3RhbXAgc3RyaW5nLFxuICAgIC8vIHdoaWxlIHRoZSBwcm90byBqcyBsaWJyYXJ5IChmb3Igbm9kZSkgd2lsbCByZXR1cm4gYVxuICAgIC8vIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgaW5zdGFuY2UuXG4gICAgaWYgKE0oISF0KSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAvLyBUaGUgZGF0ZSBzdHJpbmcgY2FuIGhhdmUgaGlnaGVyIHByZWNpc2lvbiAobmFub3MpIHRoYW4gdGhlIERhdGUgY2xhc3NcbiAgICAgICAgLy8gKG1pbGxpcyksIHNvIHdlIGRvIHNvbWUgY3VzdG9tIHBhcnNpbmcgaGVyZS5cbiAgICAgICAgLy8gUGFyc2UgdGhlIG5hbm9zIHJpZ2h0IG91dCBvZiB0aGUgc3RyaW5nLlxuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIGNvbnN0IG4gPSB6dC5leGVjKHQpO1xuICAgICAgICBpZiAoTSghIW4pLCBuWzFdKSB7XG4gICAgICAgICAgICAvLyBQYWQgdGhlIGZyYWN0aW9uIG91dCB0byA5IGRpZ2l0cyAobmFub3MpLlxuICAgICAgICAgICAgbGV0IHQgPSBuWzFdO1xuICAgICAgICAgICAgdCA9ICh0ICsgXCIwMDAwMDAwMDBcIikuc3Vic3RyKDAsIDkpLCBlID0gTnVtYmVyKHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIHRoZSBkYXRlIHRvIGdldCB0aGUgc2Vjb25kcy5cbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IERhdGUodCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWNvbmRzOiBNYXRoLmZsb29yKHMuZ2V0VGltZSgpIC8gMWUzKSxcbiAgICAgICAgICAgIG5hbm9zOiBlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IEp0KHQuc2Vjb25kcyksXG4gICAgICAgIG5hbm9zOiBKdCh0Lm5hbm9zKVxuICAgIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIHBvc3NpYmxlIFByb3RvIHR5cGVzIGZvciBudW1iZXJzIGludG8gYSBKYXZhU2NyaXB0IG51bWJlci5cbiAqIFJldHVybnMgMCBpZiB0aGUgdmFsdWUgaXMgbm90IG51bWVyaWMuXG4gKi8gZnVuY3Rpb24gSnQodCkge1xuICAgIC8vIFRPRE8oYmpvcm5pY2spOiBIYW5kbGUgaW50NjQgZ3JlYXRlciB0aGFuIDUzIGJpdHMuXG4gICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgPyB0IDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IE51bWJlcih0KSA6IDA7XG59XG5cbi8qKiBDb252ZXJ0cyB0aGUgcG9zc2libGUgUHJvdG8gdHlwZXMgZm9yIEJsb2JzIGludG8gYSBCeXRlU3RyaW5nLiAqLyBmdW5jdGlvbiBZdCh0KSB7XG4gICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBXdC5mcm9tQmFzZTY0U3RyaW5nKHQpIDogV3QuZnJvbVVpbnQ4QXJyYXkodCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhbGx5LWFwcGxpZWQgU2VydmVyVGltZXN0YW1wLlxuICpcbiAqIFNlcnZlciBUaW1lc3RhbXBzIGFyZSBiYWNrZWQgYnkgTWFwVmFsdWVzIHRoYXQgY29udGFpbiBhbiBpbnRlcm5hbCBmaWVsZFxuICogYF9fdHlwZV9fYCB3aXRoIGEgdmFsdWUgb2YgYHNlcnZlcl90aW1lc3RhbXBgLiBUaGUgcHJldmlvdXMgdmFsdWUgYW5kIGxvY2FsXG4gKiB3cml0ZSB0aW1lIGFyZSBzdG9yZWQgaW4gaXRzIGBfX3ByZXZpb3VzX3ZhbHVlX19gIGFuZCBgX19sb2NhbF93cml0ZV90aW1lX19gXG4gKiBmaWVsZHMgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIE5vdGVzOlxuICogLSBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYXMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBhXG4gKiAgIHRyYW5zZm9ybS4gVGhleSBjYW4gb25seSBleGlzdCBpbiB0aGUgbG9jYWwgdmlldyBvZiBhIGRvY3VtZW50LiBUaGVyZWZvcmVcbiAqICAgdGhleSBkbyBub3QgbmVlZCB0byBiZSBwYXJzZWQgb3Igc2VyaWFsaXplZC5cbiAqIC0gV2hlbiBldmFsdWF0ZWQgbG9jYWxseSAoZS5nLiBmb3Igc25hcHNob3QuZGF0YSgpKSwgdGhleSBieSBkZWZhdWx0XG4gKiAgIGV2YWx1YXRlIHRvIGBudWxsYC4gVGhpcyBiZWhhdmlvciBjYW4gYmUgY29uZmlndXJlZCBieSBwYXNzaW5nIGN1c3RvbVxuICogICBGaWVsZFZhbHVlT3B0aW9ucyB0byB2YWx1ZSgpLlxuICogLSBXaXRoIHJlc3BlY3QgdG8gb3RoZXIgU2VydmVyVGltZXN0YW1wVmFsdWVzLCB0aGV5IHNvcnQgYnkgdGhlaXJcbiAqICAgbG9jYWxXcml0ZVRpbWUuXG4gKi8gZnVuY3Rpb24gWHQodCkge1xuICAgIHZhciBlLCBuO1xuICAgIHJldHVybiBcInNlcnZlcl90aW1lc3RhbXBcIiA9PT0gKG51bGwgPT09IChuID0gKChudWxsID09PSAoZSA9IG51bGwgPT0gdCA/IHZvaWQgMCA6IHQubWFwVmFsdWUpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuZmllbGRzKSB8fCB7fSkuX190eXBlX18pIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uc3RyaW5nVmFsdWUpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2VydmVyVGltZXN0YW1wIHByb3RvIHZhbHVlICh1c2luZyB0aGUgaW50ZXJuYWwgZm9ybWF0KS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgYmVmb3JlIHRoaXMgU2VydmVyVGltZXN0YW1wIHdhcyBzZXQuXG4gKlxuICogUHJlc2VydmluZyB0aGUgcHJldmlvdXMgdmFsdWVzIGFsbG93cyB0aGUgdXNlciB0byBkaXNwbGF5IHRoZSBsYXN0IHJlc29sZWRcbiAqIHZhbHVlIHVudGlsIHRoZSBiYWNrZW5kIHJlc3BvbmRzIHdpdGggdGhlIHRpbWVzdGFtcC5cbiAqL1xuZnVuY3Rpb24gWnQodCkge1xuICAgIGNvbnN0IGUgPSB0Lm1hcFZhbHVlLmZpZWxkcy5fX3ByZXZpb3VzX3ZhbHVlX187XG4gICAgcmV0dXJuIFh0KGUpID8gWnQoZSkgOiBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvY2FsIHRpbWUgYXQgd2hpY2ggdGhpcyB0aW1lc3RhbXAgd2FzIGZpcnN0IHNldC5cbiAqLyBmdW5jdGlvbiB0ZSh0KSB7XG4gICAgY29uc3QgZSA9IEh0KHQubWFwVmFsdWUuZmllbGRzLl9fbG9jYWxfd3JpdGVfdGltZV9fLnRpbWVzdGFtcFZhbHVlKTtcbiAgICByZXR1cm4gbmV3IG50KGUuc2Vjb25kcywgZS5uYW5vcyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIGVlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgRGF0YWJhc2VJbmZvIHVzaW5nIHRoZSBwcm92aWRlZCBob3N0LCBkYXRhYmFzZUlkIGFuZFxuICAgICAqIHBlcnNpc3RlbmNlS2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGFiYXNlSWQgLSBUaGUgZGF0YWJhc2UgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBhcHBJZCAtIFRoZSBGaXJlYmFzZSBBcHAgSWQuXG4gICAgICogQHBhcmFtIHBlcnNpc3RlbmNlS2V5IC0gQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBGaXJlc3RvcmUncyBsb2NhbFxuICAgICAqIHN0b3JhZ2UgKHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgZGF0YWJhc2VJZCkuXG4gICAgICogQHBhcmFtIGhvc3QgLSBUaGUgRmlyZXN0b3JlIGJhY2tlbmQgaG9zdCB0byBjb25uZWN0IHRvLlxuICAgICAqIEBwYXJhbSBzc2wgLSBXaGV0aGVyIHRvIHVzZSBTU0wgd2hlbiBjb25uZWN0aW5nLlxuICAgICAqIEBwYXJhbSBmb3JjZUxvbmdQb2xsaW5nIC0gV2hldGhlciB0byB1c2UgdGhlIGZvcmNlTG9uZ1BvbGxpbmcgb3B0aW9uXG4gICAgICogd2hlbiB1c2luZyBXZWJDaGFubmVsIGFzIHRoZSBuZXR3b3JrIHRyYW5zcG9ydC5cbiAgICAgKiBAcGFyYW0gYXV0b0RldGVjdExvbmdQb2xsaW5nIC0gV2hldGhlciB0byB1c2UgdGhlIGRldGVjdEJ1ZmZlcmluZ1Byb3h5XG4gICAgICogb3B0aW9uIHdoZW4gdXNpbmcgV2ViQ2hhbm5lbCBhcyB0aGUgbmV0d29yayB0cmFuc3BvcnQuXG4gICAgICogQHBhcmFtIHVzZUZldGNoU3RyZWFtcyBXaGV0aGVyIHRvIHVzZSB0aGUgRmV0Y2ggQVBJIGluc3RlYWQgb2ZcbiAgICAgKiBYTUxIVFRQUmVxdWVzdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGksIHIsIG8sIHUpIHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gdCwgdGhpcy5hcHBJZCA9IGUsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBuLCB0aGlzLmhvc3QgPSBzLCB0aGlzLnNzbCA9IGksIFxuICAgICAgICB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcgPSByLCB0aGlzLmF1dG9EZXRlY3RMb25nUG9sbGluZyA9IG8sIHRoaXMudXNlRmV0Y2hTdHJlYW1zID0gdTtcbiAgICB9XG59XG5cbi8qKiBUaGUgZGVmYXVsdCBkYXRhYmFzZSBuYW1lIGZvciBhIHByb2plY3QuICovXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRhdGFiYXNlIElEIGEgRmlyZXN0b3JlIGNsaWVudCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgbmUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSB0LCB0aGlzLmRhdGFiYXNlID0gZSB8fCBcIihkZWZhdWx0KVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgbmUoXCJcIiwgXCJcIik7XG4gICAgfVxuICAgIGdldCBpc0RlZmF1bHREYXRhYmFzZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiKGRlZmF1bHQpXCIgPT09IHRoaXMuZGF0YWJhc2U7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG5lICYmIHQucHJvamVjdElkID09PSB0aGlzLnByb2plY3RJZCAmJiB0LmRhdGFiYXNlID09PSB0aGlzLmRhdGFiYXNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YXJpYWJsZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIHNlKHQpIHtcbiAgICByZXR1cm4gbnVsbCA9PSB0O1xufVxuXG4vKiogUmV0dXJucyB3aGV0aGVyIHRoZSB2YWx1ZSByZXByZXNlbnRzIC0wLiAqLyBmdW5jdGlvbiBpZSh0KSB7XG4gICAgLy8gRGV0ZWN0IGlmIHRoZSB2YWx1ZSBpcyAtMC4wLiBCYXNlZCBvbiBwb2x5ZmlsbCBmcm9tXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAgcmV0dXJuIDAgPT09IHQgJiYgMSAvIHQgPT0gLTEgLyAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHZhbHVlIGlzIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIGludGVnZXIgcmFuZ2VcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0IGZvciBiZWluZyBhbiBpbnRlZ2VyIGFuZCBpbiB0aGUgc2FmZSByYW5nZVxuICovIGZ1bmN0aW9uIHJlKHQpIHtcbiAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiBOdW1iZXIuaXNJbnRlZ2VyKHQpICYmICFpZSh0KSAmJiB0IDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSICYmIHQgPj0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IG9lID0ge1xuICAgIG1hcFZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgX190eXBlX186IHtcbiAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZTogXCJfX21heF9fXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0sIHVlID0ge1xuICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbn07XG5cbi8qKiBFeHRyYWN0cyB0aGUgYmFja2VuZCdzIHR5cGUgb3JkZXIgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZS4gKi9cbmZ1bmN0aW9uIGNlKHQpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiB0ID8gMCAvKiBOdWxsVmFsdWUgKi8gOiBcImJvb2xlYW5WYWx1ZVwiIGluIHQgPyAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCB8fCBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IDIgLyogTnVtYmVyVmFsdWUgKi8gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IDMgLyogVGltZXN0YW1wVmFsdWUgKi8gOiBcInN0cmluZ1ZhbHVlXCIgaW4gdCA/IDUgLyogU3RyaW5nVmFsdWUgKi8gOiBcImJ5dGVzVmFsdWVcIiBpbiB0ID8gNiAvKiBCbG9iVmFsdWUgKi8gOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IDcgLyogUmVmVmFsdWUgKi8gOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8gOCAvKiBHZW9Qb2ludFZhbHVlICovIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IDkgLyogQXJyYXlWYWx1ZSAqLyA6IFwibWFwVmFsdWVcIiBpbiB0ID8gWHQodCkgPyA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDogRWUodCkgPyA5MDA3MTk5MjU0NzQwOTkxIC8qIE1heFZhbHVlICovIDogMTAgLyogT2JqZWN0VmFsdWUgKi8gOiBPKCk7XG59XG5cbi8qKiBUZXN0cyBgbGVmdGAgYW5kIGByaWdodGAgZm9yIGVxdWFsaXR5IGJhc2VkIG9uIHRoZSBiYWNrZW5kIHNlbWFudGljcy4gKi8gZnVuY3Rpb24gYWUodCwgZSkge1xuICAgIGlmICh0ID09PSBlKSByZXR1cm4gITA7XG4gICAgY29uc3QgbiA9IGNlKHQpO1xuICAgIGlmIChuICE9PSBjZShlKSkgcmV0dXJuICExO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwIC8qIE51bGxWYWx1ZSAqLyA6XG4gICAgICBjYXNlIDkwMDcxOTkyNTQ3NDA5OTEgLyogTWF4VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gITA7XG5cbiAgICAgIGNhc2UgMSAvKiBCb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gdC5ib29sZWFuVmFsdWUgPT09IGUuYm9vbGVhblZhbHVlO1xuXG4gICAgICBjYXNlIDQgLyogU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gdGUodCkuaXNFcXVhbCh0ZShlKSk7XG5cbiAgICAgIGNhc2UgMyAvKiBUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC50aW1lc3RhbXBWYWx1ZSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlLnRpbWVzdGFtcFZhbHVlICYmIHQudGltZXN0YW1wVmFsdWUubGVuZ3RoID09PSBlLnRpbWVzdGFtcFZhbHVlLmxlbmd0aCkgXG4gICAgICAgICAgICAvLyBVc2Ugc3RyaW5nIGVxdWFsaXR5IGZvciBJU08gODYwMSB0aW1lc3RhbXBzXG4gICAgICAgICAgICByZXR1cm4gdC50aW1lc3RhbXBWYWx1ZSA9PT0gZS50aW1lc3RhbXBWYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBIdCh0LnRpbWVzdGFtcFZhbHVlKSwgcyA9IEh0KGUudGltZXN0YW1wVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIG4uc2Vjb25kcyA9PT0gcy5zZWNvbmRzICYmIG4ubmFub3MgPT09IHMubmFub3M7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgNSAvKiBTdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiB0LnN0cmluZ1ZhbHVlID09PSBlLnN0cmluZ1ZhbHVlO1xuXG4gICAgICBjYXNlIDYgLyogQmxvYlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBZdCh0LmJ5dGVzVmFsdWUpLmlzRXF1YWwoWXQoZS5ieXRlc1ZhbHVlKSk7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgNyAvKiBSZWZWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiB0LnJlZmVyZW5jZVZhbHVlID09PSBlLnJlZmVyZW5jZVZhbHVlO1xuXG4gICAgICBjYXNlIDggLyogR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gSnQodC5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlKSA9PT0gSnQoZS5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlKSAmJiBKdCh0Lmdlb1BvaW50VmFsdWUubG9uZ2l0dWRlKSA9PT0gSnQoZS5nZW9Qb2ludFZhbHVlLmxvbmdpdHVkZSk7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgMiAvKiBOdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBpZiAoXCJpbnRlZ2VyVmFsdWVcIiBpbiB0ICYmIFwiaW50ZWdlclZhbHVlXCIgaW4gZSkgcmV0dXJuIEp0KHQuaW50ZWdlclZhbHVlKSA9PT0gSnQoZS5pbnRlZ2VyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKFwiZG91YmxlVmFsdWVcIiBpbiB0ICYmIFwiZG91YmxlVmFsdWVcIiBpbiBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IEp0KHQuZG91YmxlVmFsdWUpLCBzID0gSnQoZS5kb3VibGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4gPT09IHMgPyBpZShuKSA9PT0gaWUocykgOiBpc05hTihuKSAmJiBpc05hTihzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSA5IC8qIEFycmF5VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gdHQodC5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSwgZS5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSwgYWUpO1xuXG4gICAgICBjYXNlIDEwIC8qIE9iamVjdFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0Lm1hcFZhbHVlLmZpZWxkcyB8fCB7fSwgcyA9IGUubWFwVmFsdWUuZmllbGRzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKE10KG4pICE9PSBNdChzKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IGluIG4pIGlmIChuLmhhc093blByb3BlcnR5KHQpICYmICh2b2lkIDAgPT09IHNbdF0gfHwgIWFlKG5bdF0sIHNbdF0pKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIEFycmF5VmFsdWUgY29udGFpbnMgdGhlIHNwZWNpZmllZCBlbGVtZW50LiAqLyAodCwgZSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoZSh0LCBlKSB7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gKHQudmFsdWVzIHx8IFtdKS5maW5kKCh0ID0+IGFlKHQsIGUpKSk7XG59XG5cbmZ1bmN0aW9uIGxlKHQsIGUpIHtcbiAgICBpZiAodCA9PT0gZSkgcmV0dXJuIDA7XG4gICAgY29uc3QgbiA9IGNlKHQpLCBzID0gY2UoZSk7XG4gICAgaWYgKG4gIT09IHMpIHJldHVybiBaKG4sIHMpO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwIC8qIE51bGxWYWx1ZSAqLyA6XG4gICAgICBjYXNlIDkwMDcxOTkyNTQ3NDA5OTEgLyogTWF4VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgY2FzZSAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBaKHQuYm9vbGVhblZhbHVlLCBlLmJvb2xlYW5WYWx1ZSk7XG5cbiAgICAgIGNhc2UgMiAvKiBOdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gSnQodC5pbnRlZ2VyVmFsdWUgfHwgdC5kb3VibGVWYWx1ZSksIHMgPSBKdChlLmludGVnZXJWYWx1ZSB8fCBlLmRvdWJsZVZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuIDwgcyA/IC0xIDogbiA+IHMgPyAxIDogbiA9PT0gcyA/IDAgOiBcbiAgICAgICAgICAgIC8vIG9uZSBvciBib3RoIGFyZSBOYU4uXG4gICAgICAgICAgICBpc05hTihuKSA/IGlzTmFOKHMpID8gMCA6IC0xIDogMTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSAzIC8qIFRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZlKHQudGltZXN0YW1wVmFsdWUsIGUudGltZXN0YW1wVmFsdWUpO1xuXG4gICAgICBjYXNlIDQgLyogU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZmUodGUodCksIHRlKGUpKTtcblxuICAgICAgY2FzZSA1IC8qIFN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIFoodC5zdHJpbmdWYWx1ZSwgZS5zdHJpbmdWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNiAvKiBCbG9iVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IFl0KHQpLCBzID0gWXQoZSk7XG4gICAgICAgICAgICByZXR1cm4gbi5jb21wYXJlVG8ocyk7XG4gICAgICAgIH0odC5ieXRlc1ZhbHVlLCBlLmJ5dGVzVmFsdWUpO1xuXG4gICAgICBjYXNlIDcgLyogUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuc3BsaXQoXCIvXCIpLCBzID0gZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IG4ubGVuZ3RoICYmIHQgPCBzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFooblt0XSwgc1t0XSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGUpIHJldHVybiBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFoobi5sZW5ndGgsIHMubGVuZ3RoKTtcbiAgICAgICAgfSh0LnJlZmVyZW5jZVZhbHVlLCBlLnJlZmVyZW5jZVZhbHVlKTtcblxuICAgICAgY2FzZSA4IC8qIEdlb1BvaW50VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IFooSnQodC5sYXRpdHVkZSksIEp0KGUubGF0aXR1ZGUpKTtcbiAgICAgICAgICAgIGlmICgwICE9PSBuKSByZXR1cm4gbjtcbiAgICAgICAgICAgIHJldHVybiBaKEp0KHQubG9uZ2l0dWRlKSwgSnQoZS5sb25naXR1ZGUpKTtcbiAgICAgICAgfSh0Lmdlb1BvaW50VmFsdWUsIGUuZ2VvUG9pbnRWYWx1ZSk7XG5cbiAgICAgIGNhc2UgOSAvKiBBcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnZhbHVlcyB8fCBbXSwgcyA9IGUudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBuLmxlbmd0aCAmJiB0IDwgcy5sZW5ndGg7ICsrdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBsZShuW3RdLCBzW3RdKTtcbiAgICAgICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWihuLmxlbmd0aCwgcy5sZW5ndGgpO1xuICAgICAgICB9KHQuYXJyYXlWYWx1ZSwgZS5hcnJheVZhbHVlKTtcblxuICAgICAgY2FzZSAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gb2UubWFwVmFsdWUgJiYgZSA9PT0gb2UubWFwVmFsdWUpIHJldHVybiAwO1xuICAgICAgICAgICAgaWYgKHQgPT09IG9lLm1hcFZhbHVlKSByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChlID09PSBvZS5tYXBWYWx1ZSkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuZmllbGRzIHx8IHt9LCBzID0gT2JqZWN0LmtleXMobiksIGkgPSBlLmZpZWxkcyB8fCB7fSwgciA9IE9iamVjdC5rZXlzKGkpO1xuICAgICAgICAgICAgLy8gRXZlbiB0aG91Z2ggTWFwVmFsdWVzIGFyZSBsaWtlbHkgc29ydGVkIGNvcnJlY3RseSBiYXNlZCBvbiB0aGVpciBpbnNlcnRpb25cbiAgICAgICAgICAgIC8vIG9yZGVyIChlLmcuIHdoZW4gcmVjZWl2ZWQgZnJvbSB0aGUgYmFja2VuZCksIGxvY2FsIG1vZGlmaWNhdGlvbnMgY2FuIGJyaW5nXG4gICAgICAgICAgICAvLyBlbGVtZW50cyBvdXQgb2Ygb3JkZXIuIFdlIG5lZWQgdG8gcmUtc29ydCB0aGUgZWxlbWVudHMgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgICAgIC8vIGNhbm9uaWNhbCBJRHMgYXJlIGluZGVwZW5kZW50IG9mIGluc2VydGlvbiBvcmRlci5cbiAgICAgICAgICAgIHMuc29ydCgpLCByLnNvcnQoKTtcbiAgICAgICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgcy5sZW5ndGggJiYgdCA8IHIubGVuZ3RoOyArK3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gWihzW3RdLCByW3RdKTtcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gZSkgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGxlKG5bc1t0XV0sIGlbclt0XV0pO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBvKSByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBaKHMubGVuZ3RoLCByLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGNhbm9uaWNhbCBJRCBmb3IgdGhlIHByb3ZpZGVkIGZpZWxkIHZhbHVlIChhcyB1c2VkIGluIFRhcmdldFxuICogc2VyaWFsaXphdGlvbikuXG4gKi8gKHQubWFwVmFsdWUsIGUubWFwVmFsdWUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmZSh0LCBlKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiB0Lmxlbmd0aCA9PT0gZS5sZW5ndGgpIHJldHVybiBaKHQsIGUpO1xuICAgIGNvbnN0IG4gPSBIdCh0KSwgcyA9IEh0KGUpLCBpID0gWihuLnNlY29uZHMsIHMuc2Vjb25kcyk7XG4gICAgcmV0dXJuIDAgIT09IGkgPyBpIDogWihuLm5hbm9zLCBzLm5hbm9zKTtcbn1cblxuZnVuY3Rpb24gZGUodCkge1xuICAgIHJldHVybiBfZSh0KTtcbn1cblxuZnVuY3Rpb24gX2UodCkge1xuICAgIHJldHVybiBcIm51bGxWYWx1ZVwiIGluIHQgPyBcIm51bGxcIiA6IFwiYm9vbGVhblZhbHVlXCIgaW4gdCA/IFwiXCIgKyB0LmJvb2xlYW5WYWx1ZSA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCA/IFwiXCIgKyB0LmludGVnZXJWYWx1ZSA6IFwiZG91YmxlVmFsdWVcIiBpbiB0ID8gXCJcIiArIHQuZG91YmxlVmFsdWUgOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IEh0KHQpO1xuICAgICAgICByZXR1cm4gYHRpbWUoJHtlLnNlY29uZHN9LCR7ZS5uYW5vc30pYDtcbiAgICB9KHQudGltZXN0YW1wVmFsdWUpIDogXCJzdHJpbmdWYWx1ZVwiIGluIHQgPyB0LnN0cmluZ1ZhbHVlIDogXCJieXRlc1ZhbHVlXCIgaW4gdCA/IFl0KHQuYnl0ZXNWYWx1ZSkudG9CYXNlNjQoKSA6IFwicmVmZXJlbmNlVmFsdWVcIiBpbiB0ID8gKG4gPSB0LnJlZmVyZW5jZVZhbHVlLCBcbiAgICBjdC5mcm9tTmFtZShuKS50b1N0cmluZygpKSA6IFwiZ2VvUG9pbnRWYWx1ZVwiIGluIHQgPyBgZ2VvKCR7KGUgPSB0Lmdlb1BvaW50VmFsdWUpLmxhdGl0dWRlfSwke2UubG9uZ2l0dWRlfSlgIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbGV0IGUgPSBcIltcIiwgbiA9ICEwO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdC52YWx1ZXMgfHwgW10pIG4gPyBuID0gITEgOiBlICs9IFwiLFwiLCBlICs9IF9lKHMpO1xuICAgICAgICByZXR1cm4gZSArIFwiXVwiO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHJlZmVyZW5jZSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIGRhdGFiYXNlIGFuZCBrZXkuICovICh0LmFycmF5VmFsdWUpIDogXCJtYXBWYWx1ZVwiIGluIHQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEl0ZXJhdGlvbiBvcmRlciBpbiBKYXZhU2NyaXB0IGlzIG5vdCBndWFyYW50ZWVkLiBUbyBlbnN1cmUgdGhhdCB3ZSBnZW5lcmF0ZVxuICAgICAgICAvLyBtYXRjaGluZyBjYW5vbmljYWwgSURzIGZvciBpZGVudGljYWwgbWFwcywgd2UgbmVlZCB0byBzb3J0IHRoZSBrZXlzLlxuICAgICAgICBjb25zdCBlID0gT2JqZWN0LmtleXModC5maWVsZHMgfHwge30pLnNvcnQoKTtcbiAgICAgICAgbGV0IG4gPSBcIntcIiwgcyA9ICEwO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZSkgcyA/IHMgPSAhMSA6IG4gKz0gXCIsXCIsIG4gKz0gYCR7aX06JHtfZSh0LmZpZWxkc1tpXSl9YDtcbiAgICAgICAgcmV0dXJuIG4gKyBcIn1cIjtcbiAgICB9KHQubWFwVmFsdWUpIDogTygpO1xuICAgIHZhciBlLCBuO1xufVxuXG5mdW5jdGlvbiB3ZSh0LCBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVmZXJlbmNlVmFsdWU6IGBwcm9qZWN0cy8ke3QucHJvamVjdElkfS9kYXRhYmFzZXMvJHt0LmRhdGFiYXNlfS9kb2N1bWVudHMvJHtlLnBhdGguY2Fub25pY2FsU3RyaW5nKCl9YFxuICAgIH07XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBJbnRlZ2VyVmFsdWUgLiAqLyBmdW5jdGlvbiBtZSh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcImludGVnZXJWYWx1ZVwiIGluIHQ7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIERvdWJsZVZhbHVlLiAqL1xuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIEFycmF5VmFsdWUuICovXG5mdW5jdGlvbiBnZSh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcImFycmF5VmFsdWVcIiBpbiB0O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBOdWxsVmFsdWUuICovIGZ1bmN0aW9uIHllKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwibnVsbFZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIE5hTi4gKi8gZnVuY3Rpb24gcGUodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIHQgJiYgaXNOYU4oTnVtYmVyKHQuZG91YmxlVmFsdWUpKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgTWFwVmFsdWUuICovIGZ1bmN0aW9uIEllKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwibWFwVmFsdWVcIiBpbiB0O1xufVxuXG4vKiogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYC4gKi8gZnVuY3Rpb24gVGUodCkge1xuICAgIGlmICh0Lmdlb1BvaW50VmFsdWUpIHJldHVybiB7XG4gICAgICAgIGdlb1BvaW50VmFsdWU6IE9iamVjdC5hc3NpZ24oe30sIHQuZ2VvUG9pbnRWYWx1ZSlcbiAgICB9O1xuICAgIGlmICh0LnRpbWVzdGFtcFZhbHVlICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQudGltZXN0YW1wVmFsdWUpIHJldHVybiB7XG4gICAgICAgIHRpbWVzdGFtcFZhbHVlOiBPYmplY3QuYXNzaWduKHt9LCB0LnRpbWVzdGFtcFZhbHVlKVxuICAgIH07XG4gICAgaWYgKHQubWFwVmFsdWUpIHtcbiAgICAgICAgY29uc3QgZSA9IHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRnQodC5tYXBWYWx1ZS5maWVsZHMsICgodCwgbikgPT4gZS5tYXBWYWx1ZS5maWVsZHNbdF0gPSBUZShuKSkpLCBlO1xuICAgIH1cbiAgICBpZiAodC5hcnJheVZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8ICh0LmFycmF5VmFsdWUudmFsdWVzIHx8IFtdKS5sZW5ndGg7ICsrbikgZS5hcnJheVZhbHVlLnZhbHVlc1tuXSA9IFRlKHQuYXJyYXlWYWx1ZS52YWx1ZXNbbl0pO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHQpO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHRoZSBWYWx1ZSByZXByZXNlbnRzIHRoZSBjYW5vbmljYWwge0BsaW5rICNNQVhfVkFMVUV9IC4gKi8gZnVuY3Rpb24gRWUodCkge1xuICAgIHJldHVybiBcIl9fbWF4X19cIiA9PT0gKCgodC5tYXBWYWx1ZSB8fCB7fSkuZmllbGRzIHx8IHt9KS5fX3R5cGVfXyB8fCB7fSkuc3RyaW5nVmFsdWU7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBsb3dlc3QgdmFsdWUgZm9yIHRoZSBnaXZlbiB2YWx1ZSB0eXBlIChpbmNsdXNpdmUpLiAqLyBmdW5jdGlvbiBBZSh0KSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gdCA/IHVlIDogXCJib29sZWFuVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBib29sZWFuVmFsdWU6ICExXG4gICAgfSA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCB8fCBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgIH0gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgdGltZXN0YW1wVmFsdWU6IHtcbiAgICAgICAgICAgIHNlY29uZHM6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG4gICAgICAgIH1cbiAgICB9IDogXCJzdHJpbmdWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIHN0cmluZ1ZhbHVlOiBcIlwiXG4gICAgfSA6IFwiYnl0ZXNWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGJ5dGVzVmFsdWU6IFwiXCJcbiAgICB9IDogXCJyZWZlcmVuY2VWYWx1ZVwiIGluIHQgPyB3ZShuZS5lbXB0eSgpLCBjdC5lbXB0eSgpKSA6IFwiZ2VvUG9pbnRWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiAtOTAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IC0xODBcbiAgICAgICAgfVxuICAgIH0gOiBcImFycmF5VmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBhcnJheVZhbHVlOiB7fVxuICAgIH0gOiBcIm1hcFZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgfSA6IE8oKTtcbn1cblxuLyoqIFJldHVybnMgdGhlIGxhcmdlc3QgdmFsdWUgZm9yIHRoZSBnaXZlbiB2YWx1ZSB0eXBlIChleGNsdXNpdmUpLiAqLyBmdW5jdGlvbiBSZSh0KSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgYm9vbGVhblZhbHVlOiAhMVxuICAgIH0gOiBcImJvb2xlYW5WYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICB9IDogXCJpbnRlZ2VyVmFsdWVcIiBpbiB0IHx8IFwiZG91YmxlVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICB0aW1lc3RhbXBWYWx1ZToge1xuICAgICAgICAgICAgc2Vjb25kczogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbiAgICAgICAgfVxuICAgIH0gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgc3RyaW5nVmFsdWU6IFwiXCJcbiAgICB9IDogXCJzdHJpbmdWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGJ5dGVzVmFsdWU6IFwiXCJcbiAgICB9IDogXCJieXRlc1ZhbHVlXCIgaW4gdCA/IHdlKG5lLmVtcHR5KCksIGN0LmVtcHR5KCkpIDogXCJyZWZlcmVuY2VWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiAtOTAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IC0xODBcbiAgICAgICAgfVxuICAgIH0gOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBhcnJheVZhbHVlOiB7fVxuICAgIH0gOiBcImFycmF5VmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBtYXBWYWx1ZToge31cbiAgICB9IDogXCJtYXBWYWx1ZVwiIGluIHQgPyBvZSA6IE8oKTtcbn1cblxuZnVuY3Rpb24gYmUodCwgZSkge1xuICAgIGNvbnN0IG4gPSBsZSh0LnZhbHVlLCBlLnZhbHVlKTtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiB0LmluY2x1c2l2ZSAmJiAhZS5pbmNsdXNpdmUgPyAtMSA6ICF0LmluY2x1c2l2ZSAmJiBlLmluY2x1c2l2ZSA/IDEgOiAwO1xufVxuXG5mdW5jdGlvbiBQZSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IGxlKHQudmFsdWUsIGUudmFsdWUpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IHQuaW5jbHVzaXZlICYmICFlLmluY2x1c2l2ZSA/IDEgOiAhdC5pbmNsdXNpdmUgJiYgZS5pbmNsdXNpdmUgPyAtMSA6IDA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIE9iamVjdFZhbHVlIHJlcHJlc2VudHMgYSBNYXBWYWx1ZSBpbiB0aGUgRmlyZXN0b3JlIFByb3RvIGFuZCBvZmZlcnMgdGhlXG4gKiBhYmlsaXR5IHRvIGFkZCBhbmQgcmVtb3ZlIGZpZWxkcyAodmlhIHRoZSBPYmplY3RWYWx1ZUJ1aWxkZXIpLlxuICovIGNsYXNzIHZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0O1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgdmUoe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aCBvciBudWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSB0aGUgcGF0aCB0byBzZWFyY2hcbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgYXQgdGhlIHBhdGggb3IgbnVsbCBpZiB0aGUgcGF0aCBpcyBub3Qgc2V0LlxuICAgICAqLyAgICBmaWVsZCh0KSB7XG4gICAgICAgIGlmICh0LmlzRW1wdHkoKSkgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGggLSAxOyArK24pIGlmIChlID0gKGUubWFwVmFsdWUuZmllbGRzIHx8IHt9KVt0LmdldChuKV0sIFxuICAgICAgICAgICAgIUllKGUpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBlID0gKGUubWFwVmFsdWUuZmllbGRzIHx8IHt9KVt0Lmxhc3RTZWdtZW50KCldLCBlIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmllbGQgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZmllbGQgcGF0aCB0byBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKi8gICAgc2V0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5nZXRGaWVsZHNNYXAodC5wb3BMYXN0KCkpW3QubGFzdFNlZ21lbnQoKV0gPSBUZShlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJvdmlkZWQgZmllbGRzIHRvIHRoZSBwcm92aWRlZCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSAtIEEgbWFwIG9mIGZpZWxkcyB0byB2YWx1ZXMgKG9yIG51bGwgZm9yIGRlbGV0ZXMpLlxuICAgICAqLyAgICBzZXRBbGwodCkge1xuICAgICAgICBsZXQgZSA9IHV0LmVtcHR5UGF0aCgpLCBuID0ge30sIHMgPSBbXTtcbiAgICAgICAgdC5mb3JFYWNoKCgodCwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFlLmlzSW1tZWRpYXRlUGFyZW50T2YoaSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgdGhlIGFjY3VtdWxhdGVkIGNoYW5nZXMgYXQgdGhpcyBwYXJlbnQgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5nZXRGaWVsZHNNYXAoZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseUNoYW5nZXModCwgbiwgcyksIG4gPSB7fSwgcyA9IFtdLCBlID0gaS5wb3BMYXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID8gbltpLmxhc3RTZWdtZW50KCldID0gVGUodCkgOiBzLnB1c2goaS5sYXN0U2VnbWVudCgpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBpID0gdGhpcy5nZXRGaWVsZHNNYXAoZSk7XG4gICAgICAgIHRoaXMuYXBwbHlDaGFuZ2VzKGksIG4sIHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBmaWVsZCBhdCB0aGUgc3BlY2lmaWVkIHBhdGguIElmIHRoZXJlIGlzIG5vIGZpZWxkIGF0IHRoZVxuICAgICAqIHNwZWNpZmllZCBwYXRoLCBub3RoaW5nIGlzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCAtIFRoZSBmaWVsZCBwYXRoIHRvIHJlbW92ZS5cbiAgICAgKi8gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZmllbGQodC5wb3BMYXN0KCkpO1xuICAgICAgICBJZShlKSAmJiBlLm1hcFZhbHVlLmZpZWxkcyAmJiBkZWxldGUgZS5tYXBWYWx1ZS5maWVsZHNbdC5sYXN0U2VnbWVudCgpXTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiBhZSh0aGlzLnZhbHVlLCB0LnZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwIHRoYXQgY29udGFpbnMgdGhlIGxlYWYgZWxlbWVudCBvZiBgcGF0aGAuIElmIHRoZSBwYXJlbnRcbiAgICAgKiBlbnRyeSBkb2VzIG5vdCB5ZXQgZXhpc3QsIG9yIGlmIGl0IGlzIG5vdCBhIG1hcCwgYSBuZXcgbWFwIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAgKi8gICAgZ2V0RmllbGRzTWFwKHQpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBlLm1hcFZhbHVlLmZpZWxkcyB8fCAoZS5tYXBWYWx1ZSA9IHtcbiAgICAgICAgICAgIGZpZWxkczoge31cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7ICsrbikge1xuICAgICAgICAgICAgbGV0IHMgPSBlLm1hcFZhbHVlLmZpZWxkc1t0LmdldChuKV07XG4gICAgICAgICAgICBJZShzKSAmJiBzLm1hcFZhbHVlLmZpZWxkcyB8fCAocyA9IHtcbiAgICAgICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZS5tYXBWYWx1ZS5maWVsZHNbdC5nZXQobildID0gcyksIGUgPSBzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLm1hcFZhbHVlLmZpZWxkcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYGZpZWxkc01hcGAgYnkgYWRkaW5nLCByZXBsYWNpbmcgb3IgZGVsZXRpbmcgdGhlIHNwZWNpZmllZFxuICAgICAqIGVudHJpZXMuXG4gICAgICovICAgIGFwcGx5Q2hhbmdlcyh0LCBlLCBuKSB7XG4gICAgICAgIEZ0KGUsICgoZSwgbikgPT4gdFtlXSA9IG4pKTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIGRlbGV0ZSB0W2VdO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB2ZShUZSh0aGlzLnZhbHVlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBGaWVsZE1hc2sgYnVpbHQgZnJvbSBhbGwgZmllbGRzIGluIGEgTWFwVmFsdWUuXG4gKi8gZnVuY3Rpb24gVmUodCkge1xuICAgIGNvbnN0IGUgPSBbXTtcbiAgICByZXR1cm4gRnQodC5maWVsZHMsICgodCwgbikgPT4ge1xuICAgICAgICBjb25zdCBzID0gbmV3IHV0KFsgdCBdKTtcbiAgICAgICAgaWYgKEllKG4pKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gVmUobi5tYXBWYWx1ZSkuZmllbGRzO1xuICAgICAgICAgICAgaWYgKDAgPT09IHQubGVuZ3RoKSBcbiAgICAgICAgICAgIC8vIFByZXNlcnZlIHRoZSBlbXB0eSBtYXAgYnkgYWRkaW5nIGl0IHRvIHRoZSBGaWVsZE1hc2suXG4gICAgICAgICAgICBlLnB1c2gocyk7IGVsc2UgXG4gICAgICAgICAgICAvLyBGb3IgbmVzdGVkIGFuZCBub24tZW1wdHkgT2JqZWN0VmFsdWVzLCBhZGQgdGhlIEZpZWxkUGF0aCBvZiB0aGVcbiAgICAgICAgICAgIC8vIGxlYWYgbm9kZXMuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdCkgZS5wdXNoKHMuY2hpbGQobikpO1xuICAgICAgICB9IGVsc2UgXG4gICAgICAgIC8vIEZvciBuZXN0ZWQgYW5kIG5vbi1lbXB0eSBPYmplY3RWYWx1ZXMsIGFkZCB0aGUgRmllbGRQYXRoIG9mIHRoZSBsZWFmXG4gICAgICAgIC8vIG5vZGVzLlxuICAgICAgICBlLnB1c2gocyk7XG4gICAgfSkpLCBuZXcgUXQoZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBkb2N1bWVudCBpbiBGaXJlc3RvcmUgd2l0aCBhIGtleSwgdmVyc2lvbiwgZGF0YSBhbmQgd2hldGhlciBpdFxuICogaGFzIGxvY2FsIG11dGF0aW9ucyBhcHBsaWVkIHRvIGl0LlxuICpcbiAqIERvY3VtZW50cyBjYW4gdHJhbnNpdGlvbiBiZXR3ZWVuIHN0YXRlcyB2aWEgYGNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQoKWAsXG4gKiBgY29udmVydFRvTm9Eb2N1bWVudCgpYCBhbmQgYGNvbnZlcnRUb1Vua25vd25Eb2N1bWVudCgpYC4gSWYgYSBkb2N1bWVudCBkb2VzXG4gKiBub3QgdHJhbnNpdGlvbiB0byBvbmUgb2YgdGhlc2Ugc3RhdGVzIGV2ZW4gYWZ0ZXIgYWxsIG11dGF0aW9ucyBoYXZlIGJlZW5cbiAqIGFwcGxpZWQsIGBpc1ZhbGlkRG9jdW1lbnQoKWAgcmV0dXJucyBmYWxzZSBhbmQgdGhlIGRvY3VtZW50IHNob3VsZCBiZSByZW1vdmVkXG4gKiBmcm9tIGFsbCB2aWV3cy5cbiAqLyBjbGFzcyBTZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICB0aGlzLmtleSA9IHQsIHRoaXMuZG9jdW1lbnRUeXBlID0gZSwgdGhpcy52ZXJzaW9uID0gbiwgdGhpcy5yZWFkVGltZSA9IHMsIHRoaXMuZGF0YSA9IGksIFxuICAgICAgICB0aGlzLmRvY3VtZW50U3RhdGUgPSByO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZG9jdW1lbnQgd2l0aCBubyBrbm93biB2ZXJzaW9uIG9yIGRhdGEsIGJ1dCB3aGljaCBjYW4gc2VydmUgYXNcbiAgICAgKiBiYXNlIGRvY3VtZW50IGZvciBtdXRhdGlvbnMuXG4gICAgICovICAgIHN0YXRpYyBuZXdJbnZhbGlkRG9jdW1lbnQodCkge1xuICAgICAgICByZXR1cm4gbmV3IFNlKHQsIDAgLyogSU5WQUxJRCAqLyAsIHN0Lm1pbigpLCBzdC5taW4oKSwgdmUuZW1wdHkoKSwgMCAvKiBTWU5DRUQgKi8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gZXhpc3Qgd2l0aCB0aGUgZ2l2ZW4gZGF0YSBhdCB0aGVcbiAgICAgKiBnaXZlbiB2ZXJzaW9uLlxuICAgICAqLyAgICBzdGF0aWMgbmV3Rm91bmREb2N1bWVudCh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2UodCwgMSAvKiBGT1VORF9ET0NVTUVOVCAqLyAsIGUsIHN0Lm1pbigpLCBuLCAwIC8qIFNZTkNFRCAqLyk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gbm90IGV4aXN0IGF0IHRoZSBnaXZlbiB2ZXJzaW9uLiAqLyAgICBzdGF0aWMgbmV3Tm9Eb2N1bWVudCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2UodCwgMiAvKiBOT19ET0NVTUVOVCAqLyAsIGUsIHN0Lm1pbigpLCB2ZS5lbXB0eSgpLCAwIC8qIFNZTkNFRCAqLyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgdGhhdCBpcyBrbm93biB0byBleGlzdCBhdCB0aGUgZ2l2ZW4gdmVyc2lvbiBidXRcbiAgICAgKiB3aG9zZSBkYXRhIGlzIG5vdCBrbm93biAoZS5nLiBhIGRvY3VtZW50IHRoYXQgd2FzIHVwZGF0ZWQgd2l0aG91dCBhIGtub3duXG4gICAgICogYmFzZSBkb2N1bWVudCkuXG4gICAgICovICAgIHN0YXRpYyBuZXdVbmtub3duRG9jdW1lbnQodCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNlKHQsIDMgLyogVU5LTk9XTl9ET0NVTUVOVCAqLyAsIGUsIHN0Lm1pbigpLCB2ZS5lbXB0eSgpLCAyIC8qIEhBU19DT01NSVRURURfTVVUQVRJT05TICovKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgZG9jdW1lbnQgdHlwZSB0byBpbmRpY2F0ZSB0aGF0IGl0IGV4aXN0cyBhbmQgdGhhdCBpdHMgdmVyc2lvblxuICAgICAqIGFuZCBkYXRhIGFyZSBrbm93bi5cbiAgICAgKi8gICAgY29udmVydFRvRm91bmREb2N1bWVudCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnNpb24gPSB0LCB0aGlzLmRvY3VtZW50VHlwZSA9IDEgLyogRk9VTkRfRE9DVU1FTlQgKi8gLCB0aGlzLmRhdGEgPSBlLCBcbiAgICAgICAgdGhpcy5kb2N1bWVudFN0YXRlID0gMCAvKiBTWU5DRUQgKi8gLCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBkb2N1bWVudCB0eXBlIHRvIGluZGljYXRlIHRoYXQgaXQgZG9lc24ndCBleGlzdCBhdCB0aGUgZ2l2ZW5cbiAgICAgKiB2ZXJzaW9uLlxuICAgICAqLyAgICBjb252ZXJ0VG9Ob0RvY3VtZW50KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyc2lvbiA9IHQsIHRoaXMuZG9jdW1lbnRUeXBlID0gMiAvKiBOT19ET0NVTUVOVCAqLyAsIHRoaXMuZGF0YSA9IHZlLmVtcHR5KCksIFxuICAgICAgICB0aGlzLmRvY3VtZW50U3RhdGUgPSAwIC8qIFNZTkNFRCAqLyAsIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGRvY3VtZW50IHR5cGUgdG8gaW5kaWNhdGUgdGhhdCBpdCBleGlzdHMgYXQgYSBnaXZlbiB2ZXJzaW9uIGJ1dFxuICAgICAqIHRoYXQgaXRzIGRhdGEgaXMgbm90IGtub3duIChlLmcuIGEgZG9jdW1lbnQgdGhhdCB3YXMgdXBkYXRlZCB3aXRob3V0IGEga25vd25cbiAgICAgKiBiYXNlIGRvY3VtZW50KS5cbiAgICAgKi8gICAgY29udmVydFRvVW5rbm93bkRvY3VtZW50KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyc2lvbiA9IHQsIHRoaXMuZG9jdW1lbnRUeXBlID0gMyAvKiBVTktOT1dOX0RPQ1VNRU5UICovICwgdGhpcy5kYXRhID0gdmUuZW1wdHkoKSwgXG4gICAgICAgIHRoaXMuZG9jdW1lbnRTdGF0ZSA9IDIgLyogSEFTX0NPTU1JVFRFRF9NVVRBVElPTlMgKi8gLCB0aGlzO1xuICAgIH1cbiAgICBzZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50U3RhdGUgPSAyIC8qIEhBU19DT01NSVRURURfTVVUQVRJT05TICovICwgdGhpcztcbiAgICB9XG4gICAgc2V0SGFzTG9jYWxNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50U3RhdGUgPSAxIC8qIEhBU19MT0NBTF9NVVRBVElPTlMgKi8gLCB0aGlzLnZlcnNpb24gPSBzdC5taW4oKSwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIHNldFJlYWRUaW1lKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFRpbWUgPSB0LCB0aGlzO1xuICAgIH1cbiAgICBnZXQgaGFzTG9jYWxNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiAxIC8qIEhBU19MT0NBTF9NVVRBVElPTlMgKi8gPT09IHRoaXMuZG9jdW1lbnRTdGF0ZTtcbiAgICB9XG4gICAgZ2V0IGhhc0NvbW1pdHRlZE11dGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIDIgLyogSEFTX0NPTU1JVFRFRF9NVVRBVElPTlMgKi8gPT09IHRoaXMuZG9jdW1lbnRTdGF0ZTtcbiAgICB9XG4gICAgZ2V0IGhhc1BlbmRpbmdXcml0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0xvY2FsTXV0YXRpb25zIHx8IHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xuICAgIH1cbiAgICBpc1ZhbGlkRG9jdW1lbnQoKSB7XG4gICAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi8gIT09IHRoaXMuZG9jdW1lbnRUeXBlO1xuICAgIH1cbiAgICBpc0ZvdW5kRG9jdW1lbnQoKSB7XG4gICAgICAgIHJldHVybiAxIC8qIEZPVU5EX0RPQ1VNRU5UICovID09PSB0aGlzLmRvY3VtZW50VHlwZTtcbiAgICB9XG4gICAgaXNOb0RvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMiAvKiBOT19ET0NVTUVOVCAqLyA9PT0gdGhpcy5kb2N1bWVudFR5cGU7XG4gICAgfVxuICAgIGlzVW5rbm93bkRvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMyAvKiBVTktOT1dOX0RPQ1VNRU5UICovID09PSB0aGlzLmRvY3VtZW50VHlwZTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgU2UgJiYgdGhpcy5rZXkuaXNFcXVhbCh0LmtleSkgJiYgdGhpcy52ZXJzaW9uLmlzRXF1YWwodC52ZXJzaW9uKSAmJiB0aGlzLmRvY3VtZW50VHlwZSA9PT0gdC5kb2N1bWVudFR5cGUgJiYgdGhpcy5kb2N1bWVudFN0YXRlID09PSB0LmRvY3VtZW50U3RhdGUgJiYgdGhpcy5kYXRhLmlzRXF1YWwodC5kYXRhKTtcbiAgICB9XG4gICAgbXV0YWJsZUNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2UodGhpcy5rZXksIHRoaXMuZG9jdW1lbnRUeXBlLCB0aGlzLnZlcnNpb24sIHRoaXMucmVhZFRpbWUsIHRoaXMuZGF0YS5jbG9uZSgpLCB0aGlzLmRvY3VtZW50U3RhdGUpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBEb2N1bWVudCgke3RoaXMua2V5fSwgJHt0aGlzLnZlcnNpb259LCAke0pTT04uc3RyaW5naWZ5KHRoaXMuZGF0YS52YWx1ZSl9LCB7ZG9jdW1lbnRUeXBlOiAke3RoaXMuZG9jdW1lbnRUeXBlfX0pLCB7ZG9jdW1lbnRTdGF0ZTogJHt0aGlzLmRvY3VtZW50U3RhdGV9fSlgO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0aGUgdmFsdWUgZm9yIGZpZWxkIGBmaWVsZGAgaW4gdGhlIHByb3ZpZGVkIGRvY3VtZW50cy4gVGhyb3dzIGlmXG4gKiB0aGUgZmllbGQgZG9lcyBub3QgZXhpc3QgaW4gYm90aCBkb2N1bWVudHMuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nXG5jbGFzcyBEZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSA9IG51bGwsIG4gPSBbXSwgcyA9IFtdLCBpID0gbnVsbCwgciA9IG51bGwsIG8gPSBudWxsKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy5vcmRlckJ5ID0gbiwgdGhpcy5maWx0ZXJzID0gcywgdGhpcy5saW1pdCA9IGksIFxuICAgICAgICB0aGlzLnN0YXJ0QXQgPSByLCB0aGlzLmVuZEF0ID0gbywgdGhpcy5odCA9IG51bGw7XG4gICAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGEgVGFyZ2V0IHdpdGggYSBwYXRoIGFuZCBvcHRpb25hbCBhZGRpdGlvbmFsIHF1ZXJ5IGNvbnN0cmFpbnRzLlxuICogUGF0aCBtdXN0IGN1cnJlbnRseSBiZSBlbXB0eSBpZiB0aGlzIGlzIGEgY29sbGVjdGlvbiBncm91cCBxdWVyeS5cbiAqXG4gKiBOT1RFOiB5b3Ugc2hvdWxkIGFsd2F5cyBjb25zdHJ1Y3QgYFRhcmdldGAgZnJvbSBgUXVlcnkudG9UYXJnZXRgIGluc3RlYWQgb2ZcbiAqIHVzaW5nIHRoaXMgZmFjdG9yeSBtZXRob2QsIGJlY2F1c2UgYFF1ZXJ5YCBwcm92aWRlcyBhbiBpbXBsaWNpdCBgb3JkZXJCeWBcbiAqIHByb3BlcnR5LlxuICovIGZ1bmN0aW9uIENlKHQsIGUgPSBudWxsLCBuID0gW10sIHMgPSBbXSwgaSA9IG51bGwsIHIgPSBudWxsLCBvID0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgRGUodCwgZSwgbiwgcywgaSwgciwgbyk7XG59XG5cbmZ1bmN0aW9uIHhlKHQpIHtcbiAgICBjb25zdCBlID0gJCh0KTtcbiAgICBpZiAobnVsbCA9PT0gZS5odCkge1xuICAgICAgICBsZXQgdCA9IGUucGF0aC5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICAgICAgbnVsbCAhPT0gZS5jb2xsZWN0aW9uR3JvdXAgJiYgKHQgKz0gXCJ8Y2c6XCIgKyBlLmNvbGxlY3Rpb25Hcm91cCksIHQgKz0gXCJ8ZjpcIiwgdCArPSBlLmZpbHRlcnMubWFwKCh0ID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZSA9IHQpLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpICsgZS5vcC50b1N0cmluZygpICsgZGUoZS52YWx1ZSk7XG4gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgfSkpLmpvaW4oXCIsXCIpLCB0ICs9IFwifG9iOlwiLCB0ICs9IGUub3JkZXJCeS5tYXAoKHQgPT4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgLy8gVE9ETyhiLzI5MTgzMTY1KTogTWFrZSB0aGlzIGNvbGxpc2lvbiByb2J1c3QuXG4gICAgICAgICAgICByZXR1cm4gdC5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSArIHQuZGlyO1xuICAgICAgICB9KHQpKSkuam9pbihcIixcIiksIHNlKGUubGltaXQpIHx8ICh0ICs9IFwifGw6XCIsIHQgKz0gZS5saW1pdCksIGUuc3RhcnRBdCAmJiAodCArPSBcInxsYjpcIiwgXG4gICAgICAgIHQgKz0gZS5zdGFydEF0LmluY2x1c2l2ZSA/IFwiYjpcIiA6IFwiYTpcIiwgdCArPSBlLnN0YXJ0QXQucG9zaXRpb24ubWFwKCh0ID0+IGRlKHQpKSkuam9pbihcIixcIikpLCBcbiAgICAgICAgZS5lbmRBdCAmJiAodCArPSBcInx1YjpcIiwgdCArPSBlLmVuZEF0LmluY2x1c2l2ZSA/IFwiYTpcIiA6IFwiYjpcIiwgdCArPSBlLmVuZEF0LnBvc2l0aW9uLm1hcCgodCA9PiBkZSh0KSkpLmpvaW4oXCIsXCIpKSwgXG4gICAgICAgIGUuaHQgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gZS5odDtcbn1cblxuZnVuY3Rpb24gTmUodCkge1xuICAgIGxldCBlID0gdC5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgIHJldHVybiBudWxsICE9PSB0LmNvbGxlY3Rpb25Hcm91cCAmJiAoZSArPSBcIiBjb2xsZWN0aW9uR3JvdXA9XCIgKyB0LmNvbGxlY3Rpb25Hcm91cCksIFxuICAgIHQuZmlsdGVycy5sZW5ndGggPiAwICYmIChlICs9IGAsIGZpbHRlcnM6IFske3QuZmlsdGVycy5tYXAoKHQgPT4ge1xuICAgICAgICByZXR1cm4gYCR7KGUgPSB0KS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKX0gJHtlLm9wfSAke2RlKGUudmFsdWUpfWA7XG4gICAgICAgIC8qKiBSZXR1cm5zIGEgZGVidWcgZGVzY3JpcHRpb24gZm9yIGBmaWx0ZXJgLiAqL1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgLyoqIEZpbHRlciB0aGF0IG1hdGNoZXMgb24ga2V5IGZpZWxkcyAoaS5lLiAnX19uYW1lX18nKS4gKi8gICAgfSkpLmpvaW4oXCIsIFwiKX1dYCksIFxuICAgIHNlKHQubGltaXQpIHx8IChlICs9IFwiLCBsaW1pdDogXCIgKyB0LmxpbWl0KSwgdC5vcmRlckJ5Lmxlbmd0aCA+IDAgJiYgKGUgKz0gYCwgb3JkZXJCeTogWyR7dC5vcmRlckJ5Lm1hcCgodCA9PiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBgJHt0LmZpZWxkLmNhbm9uaWNhbFN0cmluZygpfSAoJHt0LmRpcn0pYDtcbiAgICB9KHQpKSkuam9pbihcIiwgXCIpfV1gKSwgdC5zdGFydEF0ICYmIChlICs9IFwiLCBzdGFydEF0OiBcIiwgZSArPSB0LnN0YXJ0QXQuaW5jbHVzaXZlID8gXCJiOlwiIDogXCJhOlwiLCBcbiAgICBlICs9IHQuc3RhcnRBdC5wb3NpdGlvbi5tYXAoKHQgPT4gZGUodCkpKS5qb2luKFwiLFwiKSksIHQuZW5kQXQgJiYgKGUgKz0gXCIsIGVuZEF0OiBcIiwgXG4gICAgZSArPSB0LmVuZEF0LmluY2x1c2l2ZSA/IFwiYTpcIiA6IFwiYjpcIiwgZSArPSB0LmVuZEF0LnBvc2l0aW9uLm1hcCgodCA9PiBkZSh0KSkpLmpvaW4oXCIsXCIpKSwgXG4gICAgYFRhcmdldCgke2V9KWA7XG59XG5cbmZ1bmN0aW9uIGtlKHQsIGUpIHtcbiAgICBpZiAodC5saW1pdCAhPT0gZS5saW1pdCkgcmV0dXJuICExO1xuICAgIGlmICh0Lm9yZGVyQnkubGVuZ3RoICE9PSBlLm9yZGVyQnkubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lm9yZGVyQnkubGVuZ3RoOyBuKyspIGlmICghSmUodC5vcmRlckJ5W25dLCBlLm9yZGVyQnlbbl0pKSByZXR1cm4gITE7XG4gICAgaWYgKHQuZmlsdGVycy5sZW5ndGggIT09IGUuZmlsdGVycy5sZW5ndGgpIHJldHVybiAhMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQuZmlsdGVycy5sZW5ndGg7IGkrKykgaWYgKG4gPSB0LmZpbHRlcnNbaV0sIHMgPSBlLmZpbHRlcnNbaV0sIFxuICAgIG4ub3AgIT09IHMub3AgfHwgIW4uZmllbGQuaXNFcXVhbChzLmZpZWxkKSB8fCAhYWUobi52YWx1ZSwgcy52YWx1ZSkpIHJldHVybiAhMTtcbiAgICB2YXIgbiwgcztcbiAgICByZXR1cm4gdC5jb2xsZWN0aW9uR3JvdXAgPT09IGUuY29sbGVjdGlvbkdyb3VwICYmICghIXQucGF0aC5pc0VxdWFsKGUucGF0aCkgJiYgKCEhWGUodC5zdGFydEF0LCBlLnN0YXJ0QXQpICYmIFhlKHQuZW5kQXQsIGUuZW5kQXQpKSk7XG59XG5cbmZ1bmN0aW9uIE9lKHQpIHtcbiAgICByZXR1cm4gY3QuaXNEb2N1bWVudEtleSh0LnBhdGgpICYmIG51bGwgPT09IHQuY29sbGVjdGlvbkdyb3VwICYmIDAgPT09IHQuZmlsdGVycy5sZW5ndGg7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBmaWVsZCBmaWx0ZXJzIHRoYXQgdGFyZ2V0IHRoZSBnaXZlbiBmaWVsZCBwYXRoLiAqLyBmdW5jdGlvbiBNZSh0LCBlKSB7XG4gICAgcmV0dXJuIHQuZmlsdGVycy5maWx0ZXIoKHQgPT4gdCBpbnN0YW5jZW9mIEJlICYmIHQuZmllbGQuaXNFcXVhbChlKSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlcyB0aGF0IGFyZSB1c2VkIGluIEFSUkFZX0NPTlRBSU5TIG9yIEFSUkFZX0NPTlRBSU5TX0FOWVxuICogZmlsdGVycy4gUmV0dXJucyBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHN1Y2ggZmlsdGVycy5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSB0byB1c2UgYXMgdGhlIGxvd2VyIGJvdW5kIGZvciBhc2NlbmRpbmcgaW5kZXggc2VnbWVudCBhdFxuICogdGhlIHByb3ZpZGVkIGBmaWVsZFBhdGhgIChvciB0aGUgdXBwZXIgYm91bmQgZm9yIGFuIGRlc2NlbmRpbmcgc2VnbWVudCkuXG4gKi9cbmZ1bmN0aW9uIEZlKHQsIGUsIG4pIHtcbiAgICBsZXQgcyA9IHVlLCBpID0gITA7XG4gICAgLy8gUHJvY2VzcyBhbGwgZmlsdGVycyB0byBmaW5kIGEgdmFsdWUgZm9yIHRoZSBjdXJyZW50IGZpZWxkIHNlZ21lbnRcbiAgICBmb3IgKGNvbnN0IG4gb2YgTWUodCwgZSkpIHtcbiAgICAgICAgbGV0IHQgPSB1ZSwgZSA9ICEwO1xuICAgICAgICBzd2l0Y2ggKG4ub3ApIHtcbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIExFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHQgPSBBZShuLnZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIj09XCIgLyogRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJpblwiIC8qIElOICovIDpcbiAgICAgICAgICBjYXNlIFwiPj1cIiAvKiBHUkVBVEVSX1RIQU5fT1JfRVFVQUwgKi8gOlxuICAgICAgICAgICAgdCA9IG4udmFsdWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI+XCIgLyogR1JFQVRFUl9USEFOICovIDpcbiAgICAgICAgICAgIHQgPSBuLnZhbHVlLCBlID0gITE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgY2FzZSBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyA6XG4gICAgICAgICAgICB0ID0gdWU7XG4gLy8gUmVtYWluaW5nIGZpbHRlcnMgY2Fubm90IGJlIHVzZWQgYXMgbG93ZXIgYm91bmRzLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgYmUoe1xuICAgICAgICAgICAgdmFsdWU6IHMsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGlcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6IHQsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGVcbiAgICAgICAgfSkgPCAwICYmIChzID0gdCwgaSA9IGUpO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBhZGRpdGlvbmFsIGJvdW5kLCBjb21wYXJlIHRoZSB2YWx1ZXMgYWdhaW5zdCB0aGUgZXhpc3RpbmdcbiAgICAvLyByYW5nZSB0byBzZWUgaWYgd2UgY2FuIG5hcnJvdyB0aGUgc2NvcGUuXG4gICAgICAgIGlmIChudWxsICE9PSBuKSBmb3IgKGxldCByID0gMDsgciA8IHQub3JkZXJCeS5sZW5ndGg7ICsrcikge1xuICAgICAgICBpZiAodC5vcmRlckJ5W3JdLmZpZWxkLmlzRXF1YWwoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuLnBvc2l0aW9uW3JdO1xuICAgICAgICAgICAgYmUoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBzLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogaVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogbi5pbmNsdXNpdmVcbiAgICAgICAgICAgIH0pIDwgMCAmJiAocyA9IHQsIGkgPSBuLmluY2x1c2l2ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcyxcbiAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSB0byB1c2UgYXMgdGhlIHVwcGVyIGJvdW5kIGZvciBhc2NlbmRpbmcgaW5kZXggc2VnbWVudCBhdFxuICogdGhlIHByb3ZpZGVkIGBmaWVsZFBhdGhgIChvciB0aGUgbG93ZXIgYm91bmQgZm9yIGEgZGVzY2VuZGluZyBzZWdtZW50KS5cbiAqLyBmdW5jdGlvbiAkZSh0LCBlLCBuKSB7XG4gICAgbGV0IHMgPSBvZSwgaSA9ICEwO1xuICAgIC8vIFByb2Nlc3MgYWxsIGZpbHRlcnMgdG8gZmluZCBhIHZhbHVlIGZvciB0aGUgY3VycmVudCBmaWVsZCBzZWdtZW50XG4gICAgZm9yIChjb25zdCBuIG9mIE1lKHQsIGUpKSB7XG4gICAgICAgIGxldCB0ID0gb2UsIGUgPSAhMDtcbiAgICAgICAgc3dpdGNoIChuLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICBjYXNlIFwiPlwiIC8qIEdSRUFURVJfVEhBTiAqLyA6XG4gICAgICAgICAgICB0ID0gUmUobi52YWx1ZSksIGUgPSAhMTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIj09XCIgLyogRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJpblwiIC8qIElOICovIDpcbiAgICAgICAgICBjYXNlIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi8gOlxuICAgICAgICAgICAgdCA9IG4udmFsdWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI8XCIgLyogTEVTU19USEFOICovIDpcbiAgICAgICAgICAgIHQgPSBuLnZhbHVlLCBlID0gITE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgY2FzZSBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyA6XG4gICAgICAgICAgICB0ID0gb2U7XG4gLy8gUmVtYWluaW5nIGZpbHRlcnMgY2Fubm90IGJlIHVzZWQgYXMgdXBwZXIgYm91bmRzLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgUGUoe1xuICAgICAgICAgICAgdmFsdWU6IHMsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGlcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6IHQsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGVcbiAgICAgICAgfSkgPiAwICYmIChzID0gdCwgaSA9IGUpO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBhZGRpdGlvbmFsIGJvdW5kLCBjb21wYXJlIHRoZSB2YWx1ZXMgYWdhaW5zdCB0aGUgZXhpc3RpbmdcbiAgICAvLyByYW5nZSB0byBzZWUgaWYgd2UgY2FuIG5hcnJvdyB0aGUgc2NvcGUuXG4gICAgICAgIGlmIChudWxsICE9PSBuKSBmb3IgKGxldCByID0gMDsgciA8IHQub3JkZXJCeS5sZW5ndGg7ICsrcikge1xuICAgICAgICBpZiAodC5vcmRlckJ5W3JdLmZpZWxkLmlzRXF1YWwoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuLnBvc2l0aW9uW3JdO1xuICAgICAgICAgICAgUGUoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBzLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogaVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogbi5pbmNsdXNpdmVcbiAgICAgICAgICAgIH0pID4gMCAmJiAocyA9IHQsIGkgPSBuLmluY2x1c2l2ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcyxcbiAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgfTtcbn1cblxuLyoqIFJldHVybnMgdGhlIG51bWJlciBvZiBzZWdtZW50cyBvZiBhIHBlcmZlY3QgaW5kZXggZm9yIHRoaXMgdGFyZ2V0LiAqLyBjbGFzcyBCZSBleHRlbmRzIGNsYXNzIHt9IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZmllbGQgPSB0LCB0aGlzLm9wID0gZSwgdGhpcy52YWx1ZSA9IG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmaWx0ZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKi8gICAgc3RhdGljIGNyZWF0ZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0LmlzS2V5RmllbGQoKSA/IFwiaW5cIiAvKiBJTiAqLyA9PT0gZSB8fCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyA9PT0gZSA/IHRoaXMubHQodCwgZSwgbikgOiBuZXcgTGUodCwgZSwgbikgOiBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gPT09IGUgPyBuZXcgR2UodCwgbikgOiBcImluXCIgLyogSU4gKi8gPT09IGUgPyBuZXcgUWUodCwgbikgOiBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyA9PT0gZSA/IG5ldyBqZSh0LCBuKSA6IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSBlID8gbmV3IFdlKHQsIG4pIDogbmV3IEJlKHQsIGUsIG4pO1xuICAgIH1cbiAgICBzdGF0aWMgbHQodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gXCJpblwiIC8qIElOICovID09PSBlID8gbmV3IFVlKHQsIG4pIDogbmV3IHFlKHQsIG4pO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuZGF0YS5maWVsZCh0aGlzLmZpZWxkKTtcbiAgICAgICAgLy8gVHlwZXMgZG8gbm90IGhhdmUgdG8gbWF0Y2ggaW4gTk9UX0VRVUFMIGZpbHRlcnMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiIT1cIiAvKiBOT1RfRVFVQUwgKi8gPT09IHRoaXMub3AgPyBudWxsICE9PSBlICYmIHRoaXMuZnQobGUoZSwgdGhpcy52YWx1ZSkpIDogbnVsbCAhPT0gZSAmJiBjZSh0aGlzLnZhbHVlKSA9PT0gY2UoZSkgJiYgdGhpcy5mdChsZShlLCB0aGlzLnZhbHVlKSk7XG4gICAgICAgIC8vIE9ubHkgY29tcGFyZSB0eXBlcyB3aXRoIG1hdGNoaW5nIGJhY2tlbmQgb3JkZXIgKHN1Y2ggYXMgZG91YmxlIGFuZCBpbnQpLlxuICAgICAgICB9XG4gICAgZnQodCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3ApIHtcbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIExFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdCA8IDA7XG5cbiAgICAgICAgICBjYXNlIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPD0gMDtcblxuICAgICAgICAgIGNhc2UgXCI9PVwiIC8qIEVRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiAwID09PSB0O1xuXG4gICAgICAgICAgY2FzZSBcIiE9XCIgLyogTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiAwICE9PSB0O1xuXG4gICAgICAgICAgY2FzZSBcIj5cIiAvKiBHUkVBVEVSX1RIQU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPiAwO1xuXG4gICAgICAgICAgY2FzZSBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiB0ID49IDA7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIE8oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkdCgpIHtcbiAgICAgICAgcmV0dXJuIFsgXCI8XCIgLyogTEVTU19USEFOICovICwgXCI8PVwiIC8qIExFU1NfVEhBTl9PUl9FUVVBTCAqLyAsIFwiPlwiIC8qIEdSRUFURVJfVEhBTiAqLyAsIFwiPj1cIiAvKiBHUkVBVEVSX1RIQU5fT1JfRVFVQUwgKi8gLCBcIiE9XCIgLyogTk9UX0VRVUFMICovICwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gXS5pbmRleE9mKHRoaXMub3ApID49IDA7XG4gICAgfVxufVxuXG5jbGFzcyBMZSBleHRlbmRzIEJlIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKHQsIGUsIG4pLCB0aGlzLmtleSA9IGN0LmZyb21OYW1lKG4ucmVmZXJlbmNlVmFsdWUpO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IGN0LmNvbXBhcmF0b3IodC5rZXksIHRoaXMua2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnQoZSk7XG4gICAgfVxufVxuXG4vKiogRmlsdGVyIHRoYXQgbWF0Y2hlcyBvbiBrZXkgZmllbGRzIHdpdGhpbiBhbiBhcnJheS4gKi8gY2xhc3MgVWUgZXh0ZW5kcyBCZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBcImluXCIgLyogSU4gKi8gLCBlKSwgdGhpcy5rZXlzID0gS2UoXCJpblwiIC8qIElOICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzLnNvbWUoKGUgPT4gZS5pc0VxdWFsKHQua2V5KSkpO1xuICAgIH1cbn1cblxuLyoqIEZpbHRlciB0aGF0IG1hdGNoZXMgb24ga2V5IGZpZWxkcyBub3QgcHJlc2VudCB3aXRoaW4gYW4gYXJyYXkuICovIGNsYXNzIHFlIGV4dGVuZHMgQmUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gLCBlKSwgdGhpcy5rZXlzID0gS2UoXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gLCBlKTtcbiAgICB9XG4gICAgbWF0Y2hlcyh0KSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5rZXlzLnNvbWUoKGUgPT4gZS5pc0VxdWFsKHQua2V5KSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gS2UodCwgZSkge1xuICAgIHZhciBuO1xuICAgIHJldHVybiAoKG51bGwgPT09IChuID0gZS5hcnJheVZhbHVlKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLnZhbHVlcykgfHwgW10pLm1hcCgodCA9PiBjdC5mcm9tTmFtZSh0LnJlZmVyZW5jZVZhbHVlKSkpO1xufVxuXG4vKiogQSBGaWx0ZXIgdGhhdCBpbXBsZW1lbnRzIHRoZSBhcnJheS1jb250YWlucyBvcGVyYXRvci4gKi8gY2xhc3MgR2UgZXh0ZW5kcyBCZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gLCBlKTtcbiAgICB9XG4gICAgbWF0Y2hlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LmRhdGEuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBnZShlKSAmJiBoZShlLmFycmF5VmFsdWUsIHRoaXMudmFsdWUpO1xuICAgIH1cbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgSU4gb3BlcmF0b3IuICovIGNsYXNzIFFlIGV4dGVuZHMgQmUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgXCJpblwiIC8qIElOICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBoZSh0aGlzLnZhbHVlLmFycmF5VmFsdWUsIGUpO1xuICAgIH1cbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgbm90LWluIG9wZXJhdG9yLiAqLyBjbGFzcyBqZSBleHRlbmRzIEJlIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKHQsIFwibm90LWluXCIgLyogTk9UX0lOICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICBpZiAoaGUodGhpcy52YWx1ZS5hcnJheVZhbHVlLCB7XG4gICAgICAgICAgICBudWxsVmFsdWU6IFwiTlVMTF9WQUxVRVwiXG4gICAgICAgIH0pKSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGUgPSB0LmRhdGEuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBlICYmICFoZSh0aGlzLnZhbHVlLmFycmF5VmFsdWUsIGUpO1xuICAgIH1cbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgYXJyYXktY29udGFpbnMtYW55IG9wZXJhdG9yLiAqLyBjbGFzcyBXZSBleHRlbmRzIEJlIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKHQsIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gISghZ2UoZSkgfHwgIWUuYXJyYXlWYWx1ZS52YWx1ZXMpICYmIGUuYXJyYXlWYWx1ZS52YWx1ZXMuc29tZSgodCA9PiBoZSh0aGlzLnZhbHVlLmFycmF5VmFsdWUsIHQpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBib3VuZCBvZiBhIHF1ZXJ5LlxuICpcbiAqIFRoZSBib3VuZCBpcyBzcGVjaWZpZWQgd2l0aCB0aGUgZ2l2ZW4gY29tcG9uZW50cyByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBhbmRcbiAqIHdoZXRoZXIgaXQncyBqdXN0IGJlZm9yZSBvciBqdXN0IGFmdGVyIHRoZSBwb3NpdGlvbiAocmVsYXRpdmUgdG8gd2hhdGV2ZXIgdGhlXG4gKiBxdWVyeSBvcmRlciBpcykuXG4gKlxuICogVGhlIHBvc2l0aW9uIHJlcHJlc2VudHMgYSBsb2dpY2FsIGluZGV4IHBvc2l0aW9uIGZvciBhIHF1ZXJ5LiBJdCdzIGEgcHJlZml4XG4gKiBvZiB2YWx1ZXMgZm9yIHRoZSAocG90ZW50aWFsbHkgaW1wbGljaXQpIG9yZGVyIGJ5IGNsYXVzZXMgb2YgYSBxdWVyeS5cbiAqXG4gKiBCb3VuZCBwcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZG9jdW1lbnQgY29tZXMgYmVmb3JlIG9yXG4gKiBhZnRlciBhIGJvdW5kLiBUaGlzIGlzIGluZmx1ZW5jZWQgYnkgd2hldGhlciB0aGUgcG9zaXRpb24gaXMganVzdCBiZWZvcmUgb3JcbiAqIGp1c3QgYWZ0ZXIgdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAqLyBjbGFzcyB6ZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdCwgdGhpcy5pbmNsdXNpdmUgPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBvcmRlcmluZyBvbiBhIGZpZWxkLCBpbiBzb21lIERpcmVjdGlvbi4gRGlyZWN0aW9uIGRlZmF1bHRzIHRvIEFTQ0VORElORy5cbiAqLyBjbGFzcyBIZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSA9IFwiYXNjXCIgLyogQVNDRU5ESU5HICovKSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSB0LCB0aGlzLmRpciA9IGU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBKZSh0LCBlKSB7XG4gICAgcmV0dXJuIHQuZGlyID09PSBlLmRpciAmJiB0LmZpZWxkLmlzRXF1YWwoZS5maWVsZCk7XG59XG5cbmZ1bmN0aW9uIFllKHQsIGUsIG4pIHtcbiAgICBsZXQgcyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0LnBvc2l0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlW2ldLCBvID0gdC5wb3NpdGlvbltpXTtcbiAgICAgICAgaWYgKHIuZmllbGQuaXNLZXlGaWVsZCgpKSBzID0gY3QuY29tcGFyYXRvcihjdC5mcm9tTmFtZShvLnJlZmVyZW5jZVZhbHVlKSwgbi5rZXkpOyBlbHNlIHtcbiAgICAgICAgICAgIHMgPSBsZShvLCBuLmRhdGEuZmllbGQoci5maWVsZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImRlc2NcIiAvKiBERVNDRU5ESU5HICovID09PSByLmRpciAmJiAocyAqPSAtMSksIDAgIT09IHMpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBkb2N1bWVudCBzb3J0cyBhZnRlciBhIGJvdW5kIHVzaW5nIHRoZSBwcm92aWRlZCBzb3J0XG4gKiBvcmRlci5cbiAqLyBmdW5jdGlvbiBYZSh0LCBlKSB7XG4gICAgaWYgKG51bGwgPT09IHQpIHJldHVybiBudWxsID09PSBlO1xuICAgIGlmIChudWxsID09PSBlKSByZXR1cm4gITE7XG4gICAgaWYgKHQuaW5jbHVzaXZlICE9PSBlLmluY2x1c2l2ZSB8fCB0LnBvc2l0aW9uLmxlbmd0aCAhPT0gZS5wb3NpdGlvbi5sZW5ndGgpIHJldHVybiAhMTtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQucG9zaXRpb24ubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgaWYgKCFhZSh0LnBvc2l0aW9uW25dLCBlLnBvc2l0aW9uW25dKSkgcmV0dXJuICExO1xuICAgIH1cbiAgICByZXR1cm4gITA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFF1ZXJ5IGVuY2Fwc3VsYXRlcyBhbGwgdGhlIHF1ZXJ5IGF0dHJpYnV0ZXMgd2Ugc3VwcG9ydCBpbiB0aGUgU0RLLiBJdCBjYW5cbiAqIGJlIHJ1biBhZ2FpbnN0IHRoZSBMb2NhbFN0b3JlLCBhcyB3ZWxsIGFzIGJlIGNvbnZlcnRlZCB0byBhIGBUYXJnZXRgIHRvXG4gKiBxdWVyeSB0aGUgUmVtb3RlU3RvcmUgcmVzdWx0cy5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovIGNsYXNzIFplIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIFF1ZXJ5IHdpdGggYSBwYXRoIGFuZCBvcHRpb25hbCBhZGRpdGlvbmFsIHF1ZXJ5IGNvbnN0cmFpbnRzLlxuICAgICAqIFBhdGggbXVzdCBjdXJyZW50bHkgYmUgZW1wdHkgaWYgdGhpcyBpcyBhIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSA9IG51bGwsIG4gPSBbXSwgcyA9IFtdLCBpID0gbnVsbCwgciA9IFwiRlwiIC8qIEZpcnN0ICovICwgbyA9IG51bGwsIHUgPSBudWxsKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy5leHBsaWNpdE9yZGVyQnkgPSBuLCB0aGlzLmZpbHRlcnMgPSBzLCBcbiAgICAgICAgdGhpcy5saW1pdCA9IGksIHRoaXMubGltaXRUeXBlID0gciwgdGhpcy5zdGFydEF0ID0gbywgdGhpcy5lbmRBdCA9IHUsIHRoaXMuX3QgPSBudWxsLCBcbiAgICAgICAgLy8gVGhlIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgb2YgdGhpcyBgUXVlcnlgIGluc3RhbmNlLlxuICAgICAgICB0aGlzLnd0ID0gbnVsbCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0O1xuICAgIH1cbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgUXVlcnkgaW5zdGFuY2Ugd2l0aCB0aGUgb3B0aW9ucyBwcm92aWRlZC4gKi8gZnVuY3Rpb24gdG4odCwgZSwgbiwgcywgaSwgciwgbywgdSkge1xuICAgIHJldHVybiBuZXcgWmUodCwgZSwgbiwgcywgaSwgciwgbywgdSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgbmV3IFF1ZXJ5IGZvciBhIHF1ZXJ5IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzIGF0IGBwYXRoYCAqLyBmdW5jdGlvbiBlbih0KSB7XG4gICAgcmV0dXJuIG5ldyBaZSh0KTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gY29udmVydCBhIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcnkgaW50byBhIGNvbGxlY3Rpb24gcXVlcnkgYXQgYVxuICogc3BlY2lmaWMgcGF0aC4gVGhpcyBpcyB1c2VkIHdoZW4gZXhlY3V0aW5nIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcmllcywgc2luY2VcbiAqIHdlIGhhdmUgdG8gc3BsaXQgdGhlIHF1ZXJ5IGludG8gYSBzZXQgb2YgY29sbGVjdGlvbiBxdWVyaWVzIGF0IG11bHRpcGxlXG4gKiBwYXRocy5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBxdWVyeSBkb2VzIG5vdCBzcGVjaWZ5IGFueSBxdWVyeSBjb25zdHJhaW50cyB0aGF0XG4gKiBjb3VsZCByZW1vdmUgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbm4odCkge1xuICAgIHJldHVybiAwID09PSB0LmZpbHRlcnMubGVuZ3RoICYmIG51bGwgPT09IHQubGltaXQgJiYgbnVsbCA9PSB0LnN0YXJ0QXQgJiYgbnVsbCA9PSB0LmVuZEF0ICYmICgwID09PSB0LmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggfHwgMSA9PT0gdC5leHBsaWNpdE9yZGVyQnkubGVuZ3RoICYmIHQuZXhwbGljaXRPcmRlckJ5WzBdLmZpZWxkLmlzS2V5RmllbGQoKSk7XG59XG5cbmZ1bmN0aW9uIHNuKHQpIHtcbiAgICByZXR1cm4gdC5leHBsaWNpdE9yZGVyQnkubGVuZ3RoID4gMCA/IHQuZXhwbGljaXRPcmRlckJ5WzBdLmZpZWxkIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcm4odCkge1xuICAgIGZvciAoY29uc3QgZSBvZiB0LmZpbHRlcnMpIGlmIChlLmR0KCkpIHJldHVybiBlLmZpZWxkO1xuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbnkgb2YgdGhlIHByb3ZpZGVkIE9wZXJhdG9ycyBhcmUgaW5jbHVkZWQgaW4gdGhlIHF1ZXJ5IGFuZFxuICogcmV0dXJucyB0aGUgZmlyc3Qgb25lIHRoYXQgaXMsIG9yIG51bGwgaWYgbm9uZSBhcmUuXG4gKi9cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgY29sbGVjdGlvbiBncm91cCByYXRoZXIgdGhhbiBhIHNwZWNpZmljXG4gKiBjb2xsZWN0aW9uLlxuICovXG5mdW5jdGlvbiBvbih0KSB7XG4gICAgcmV0dXJuIG51bGwgIT09IHQuY29sbGVjdGlvbkdyb3VwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGltcGxpY2l0IG9yZGVyIGJ5IGNvbnN0cmFpbnQgdGhhdCBpcyB1c2VkIHRvIGV4ZWN1dGUgdGhlIFF1ZXJ5LFxuICogd2hpY2ggY2FuIGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvcmRlciBieSBjb25zdHJhaW50cyB0aGUgdXNlciBwcm92aWRlZCAoZS5nLlxuICogdGhlIFNESyBhbmQgYmFja2VuZCBhbHdheXMgb3JkZXJzIGJ5IGBfX25hbWVfX2ApLlxuICovIGZ1bmN0aW9uIHVuKHQpIHtcbiAgICBjb25zdCBlID0gJCh0KTtcbiAgICBpZiAobnVsbCA9PT0gZS5fdCkge1xuICAgICAgICBlLl90ID0gW107XG4gICAgICAgIGNvbnN0IHQgPSBybihlKSwgbiA9IHNuKGUpO1xuICAgICAgICBpZiAobnVsbCAhPT0gdCAmJiBudWxsID09PSBuKSBcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gaW1wbGljaXRseSBhZGQga2V5IG9yZGVyaW5nLCB3ZSBtdXN0IGFsc28gYWRkIHRoZVxuICAgICAgICAvLyBpbmVxdWFsaXR5IGZpbHRlciBmaWVsZCBmb3IgaXQgdG8gYmUgYSB2YWxpZCBxdWVyeS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHRoZSBkZWZhdWx0IGluZXF1YWxpdHkgZmllbGQgYW5kIGtleSBvcmRlcmluZyBpcyBhc2NlbmRpbmcuXG4gICAgICAgIHQuaXNLZXlGaWVsZCgpIHx8IGUuX3QucHVzaChuZXcgSGUodCkpLCBlLl90LnB1c2gobmV3IEhlKHV0LmtleUZpZWxkKCksIFwiYXNjXCIgLyogQVNDRU5ESU5HICovKSk7IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHQgPSAhMTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBlLmV4cGxpY2l0T3JkZXJCeSkgZS5fdC5wdXNoKG4pLCBuLmZpZWxkLmlzS2V5RmllbGQoKSAmJiAodCA9ICEwKTtcbiAgICAgICAgICAgIGlmICghdCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgaW1wbGljaXQga2V5IG9yZGVyaW5nIGFsd2F5cyBtYXRjaGVzIHRoZSBsYXN0XG4gICAgICAgICAgICAgICAgLy8gZXhwbGljaXQgb3JkZXIgYnlcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5leHBsaWNpdE9yZGVyQnkubGVuZ3RoID4gMCA/IGUuZXhwbGljaXRPcmRlckJ5W2UuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCAtIDFdLmRpciA6IFwiYXNjXCIgLyogQVNDRU5ESU5HICovO1xuICAgICAgICAgICAgICAgIGUuX3QucHVzaChuZXcgSGUodXQua2V5RmllbGQoKSwgdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlLl90O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgYFF1ZXJ5YCBpbnN0YW5jZSB0byBpdCdzIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gY24odCkge1xuICAgIGNvbnN0IGUgPSAkKHQpO1xuICAgIGlmICghZS53dCkgaWYgKFwiRlwiIC8qIEZpcnN0ICovID09PSBlLmxpbWl0VHlwZSkgZS53dCA9IENlKGUucGF0aCwgZS5jb2xsZWN0aW9uR3JvdXAsIHVuKGUpLCBlLmZpbHRlcnMsIGUubGltaXQsIGUuc3RhcnRBdCwgZS5lbmRBdCk7IGVsc2Uge1xuICAgICAgICAvLyBGbGlwIHRoZSBvcmRlckJ5IGRpcmVjdGlvbnMgc2luY2Ugd2Ugd2FudCB0aGUgbGFzdCByZXN1bHRzXG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHVuKGUpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA9PT0gbi5kaXIgPyBcImFzY1wiIC8qIEFTQ0VORElORyAqLyA6IFwiZGVzY1wiIC8qIERFU0NFTkRJTkcgKi87XG4gICAgICAgICAgICB0LnB1c2gobmV3IEhlKG4uZmllbGQsIGUpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBuZWVkIHRvIHN3YXAgdGhlIGN1cnNvcnMgdG8gbWF0Y2ggdGhlIG5vdy1mbGlwcGVkIHF1ZXJ5IG9yZGVyaW5nLlxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmVuZEF0ID8gbmV3IHplKGUuZW5kQXQucG9zaXRpb24sIGUuZW5kQXQuaW5jbHVzaXZlKSA6IG51bGwsIHMgPSBlLnN0YXJ0QXQgPyBuZXcgemUoZS5zdGFydEF0LnBvc2l0aW9uLCBlLnN0YXJ0QXQuaW5jbHVzaXZlKSA6IG51bGw7XG4gICAgICAgIC8vIE5vdyByZXR1cm4gYXMgYSBMaW1pdFR5cGUuRmlyc3QgcXVlcnkuXG4gICAgICAgIGUud3QgPSBDZShlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCB0LCBlLmZpbHRlcnMsIGUubGltaXQsIG4sIHMpO1xuICAgIH1cbiAgICByZXR1cm4gZS53dDtcbn1cblxuZnVuY3Rpb24gYW4odCwgZSwgbikge1xuICAgIHJldHVybiBuZXcgWmUodC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgdC5maWx0ZXJzLnNsaWNlKCksIGUsIG4sIHQuc3RhcnRBdCwgdC5lbmRBdCk7XG59XG5cbmZ1bmN0aW9uIGhuKHQsIGUpIHtcbiAgICByZXR1cm4ga2UoY24odCksIGNuKGUpKSAmJiB0LmxpbWl0VHlwZSA9PT0gZS5saW1pdFR5cGU7XG59XG5cbi8vIFRPRE8oYi8yOTE4MzE2NSk6IFRoaXMgaXMgdXNlZCB0byBnZXQgYSB1bmlxdWUgc3RyaW5nIGZyb20gYSBxdWVyeSB0bywgZm9yXG4vLyBleGFtcGxlLCB1c2UgYXMgYSBkaWN0aW9uYXJ5IGtleSwgYnV0IHRoZSBpbXBsZW1lbnRhdGlvbiBpcyBzdWJqZWN0IHRvXG4vLyBjb2xsaXNpb25zLiBNYWtlIGl0IGNvbGxpc2lvbi1mcmVlLlxuZnVuY3Rpb24gbG4odCkge1xuICAgIHJldHVybiBgJHt4ZShjbih0KSl9fGx0OiR7dC5saW1pdFR5cGV9YDtcbn1cblxuZnVuY3Rpb24gZm4odCkge1xuICAgIHJldHVybiBgUXVlcnkodGFyZ2V0PSR7TmUoY24odCkpfTsgbGltaXRUeXBlPSR7dC5saW1pdFR5cGV9KWA7XG59XG5cbi8qKiBSZXR1cm5zIHdoZXRoZXIgYGRvY2AgbWF0Y2hlcyB0aGUgY29uc3RyYWludHMgb2YgYHF1ZXJ5YC4gKi8gZnVuY3Rpb24gZG4odCwgZSkge1xuICAgIHJldHVybiBlLmlzRm91bmREb2N1bWVudCgpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUua2V5LnBhdGg7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0LmNvbGxlY3Rpb25Hcm91cCA/IGUua2V5Lmhhc0NvbGxlY3Rpb25JZCh0LmNvbGxlY3Rpb25Hcm91cCkgJiYgdC5wYXRoLmlzUHJlZml4T2YobikgOiBjdC5pc0RvY3VtZW50S2V5KHQucGF0aCkgPyB0LnBhdGguaXNFcXVhbChuKSA6IHQucGF0aC5pc0ltbWVkaWF0ZVBhcmVudE9mKG4pO1xuICAgIH1cbiAgICAvKipcbiAqIEEgZG9jdW1lbnQgbXVzdCBoYXZlIGEgdmFsdWUgZm9yIGV2ZXJ5IG9yZGVyaW5nIGNsYXVzZSBpbiBvcmRlciB0byBzaG93IHVwXG4gKiBpbiB0aGUgcmVzdWx0cy5cbiAqLyAodCwgZSkgJiYgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdC5leHBsaWNpdE9yZGVyQnkpIFxuICAgICAgICAvLyBvcmRlciBieSBrZXkgYWx3YXlzIG1hdGNoZXNcbiAgICAgICAgaWYgKCFuLmZpZWxkLmlzS2V5RmllbGQoKSAmJiBudWxsID09PSBlLmRhdGEuZmllbGQobi5maWVsZCkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0odCwgZSkgJiYgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdC5maWx0ZXJzKSBpZiAoIW4ubWF0Y2hlcyhlKSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIC8qKiBNYWtlcyBzdXJlIGEgZG9jdW1lbnQgaXMgd2l0aGluIHRoZSBib3VuZHMsIGlmIHByb3ZpZGVkLiAqLyAodCwgZSkgJiYgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAodC5zdGFydEF0ICYmICFcbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBkb2N1bWVudCBzb3J0cyBiZWZvcmUgYSBib3VuZCB1c2luZyB0aGUgcHJvdmlkZWQgc29ydFxuICogb3JkZXIuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgY29uc3QgcyA9IFllKHQsIGUsIG4pO1xuICAgICAgICAgICAgcmV0dXJuIHQuaW5jbHVzaXZlID8gcyA8PSAwIDogcyA8IDA7XG4gICAgICAgIH0odC5zdGFydEF0LCB1bih0KSwgZSkpIHJldHVybiAhMTtcbiAgICAgICAgaWYgKHQuZW5kQXQgJiYgIWZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBZZSh0LCBlLCBuKTtcbiAgICAgICAgICAgIHJldHVybiB0LmluY2x1c2l2ZSA/IHMgPj0gMCA6IHMgPiAwO1xuICAgICAgICB9KHQuZW5kQXQsIHVuKHQpLCBlKSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIC8qKlxuICogUmV0dXJucyB0aGUgY29sbGVjdGlvbiBncm91cCB0aGF0IHRoaXMgcXVlcnkgdGFyZ2V0cy5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBXZWIgU0RLIHRvIGZhY2lsaXRhdGUgbXVsdGktdGFiXG4gKiBzeW5jaHJvbml6YXRpb24gZm9yIHF1ZXJ5IHJlc3VsdHMuXG4gKi8gKHQsIGUpO1xufVxuXG5mdW5jdGlvbiBfbih0KSB7XG4gICAgcmV0dXJuIHQuY29sbGVjdGlvbkdyb3VwIHx8ICh0LnBhdGgubGVuZ3RoICUgMiA9PSAxID8gdC5wYXRoLmxhc3RTZWdtZW50KCkgOiB0LnBhdGguZ2V0KHQucGF0aC5sZW5ndGggLSAyKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSB0d28gZG9jdW1lbnRzXG4gKiBiYXNlZCBvbiB0aGUgUXVlcnkncyBvcmRlcmluZyBjb25zdHJhaW50LlxuICovIGZ1bmN0aW9uIHduKHQpIHtcbiAgICByZXR1cm4gKGUsIG4pID0+IHtcbiAgICAgICAgbGV0IHMgPSAhMTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHVuKHQpKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbW4oaSwgZSwgbik7XG4gICAgICAgICAgICBpZiAoMCAhPT0gdCkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBzID0gcyB8fCBpLmZpZWxkLmlzS2V5RmllbGQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBtbih0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IHQuZmllbGQuaXNLZXlGaWVsZCgpID8gY3QuY29tcGFyYXRvcihlLmtleSwgbi5rZXkpIDogZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gZS5kYXRhLmZpZWxkKHQpLCBpID0gbi5kYXRhLmZpZWxkKHQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gcyAmJiBudWxsICE9PSBpID8gbGUocywgaSkgOiBPKCk7XG4gICAgfSh0LmZpZWxkLCBlLCBuKTtcbiAgICBzd2l0Y2ggKHQuZGlyKSB7XG4gICAgICBjYXNlIFwiYXNjXCIgLyogQVNDRU5ESU5HICovIDpcbiAgICAgICAgcmV0dXJuIHM7XG5cbiAgICAgIGNhc2UgXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA6XG4gICAgICAgIHJldHVybiAtMSAqIHM7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGFuIERvdWJsZVZhbHVlIGZvciBgdmFsdWVgIHRoYXQgaXMgZW5jb2RlZCBiYXNlZCB0aGUgc2VyaWFsaXplcidzXG4gKiBgdXNlUHJvdG8zSnNvbmAgc2V0dGluZy5cbiAqLyBmdW5jdGlvbiBnbih0LCBlKSB7XG4gICAgaWYgKHQuZ3QpIHtcbiAgICAgICAgaWYgKGlzTmFOKGUpKSByZXR1cm4ge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IFwiTmFOXCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGUgPT09IDEgLyAwKSByZXR1cm4ge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IFwiSW5maW5pdHlcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSA9PT0gLTEgLyAwKSByZXR1cm4ge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IFwiLUluZmluaXR5XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZG91YmxlVmFsdWU6IGllKGUpID8gXCItMFwiIDogZVxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBJbnRlZ2VyVmFsdWUgZm9yIGB2YWx1ZWAuXG4gKi8gZnVuY3Rpb24geW4odCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGludGVnZXJWYWx1ZTogXCJcIiArIHRcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBudW1iZXIgdGhhdCdzIGFwcHJvcHJpYXRlIHRvIHB1dCBpbnRvIGEgcHJvdG8uXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIEludGVnZXJWYWx1ZSBpZiBpdCBjYW4gc2FmZWx5IHJlcHJlc2VudCB0aGUgdmFsdWUsXG4gKiBvdGhlcndpc2UgYSBEb3VibGVWYWx1ZSBpcyByZXR1cm5lZC5cbiAqLyBmdW5jdGlvbiBwbih0LCBlKSB7XG4gICAgcmV0dXJuIHJlKGUpID8geW4oZSkgOiBnbih0LCBlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBVc2VkIHRvIHJlcHJlc2VudCBhIGZpZWxkIHRyYW5zZm9ybSBvbiBhIG11dGF0aW9uLiAqLyBjbGFzcyBJbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBzdHJ1Y3R1cmFsIHR5cGUgb2YgYFRyYW5zZm9ybU9wZXJhdGlvbmAgaXMgdW5pcXVlLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy81NDUxXG4gICAgICAgIHRoaXMuXyA9IHZvaWQgMDtcbiAgICB9XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGxvY2FsIHRyYW5zZm9ybSByZXN1bHQgYWdhaW5zdCB0aGUgcHJvdmlkZWQgYHByZXZpb3VzVmFsdWVgLFxuICogb3B0aW9uYWxseSB1c2luZyB0aGUgcHJvdmlkZWQgbG9jYWxXcml0ZVRpbWUuXG4gKi8gZnVuY3Rpb24gVG4odCwgZSwgbikge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgUm4gPyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBfX3R5cGVfXzoge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZTogXCJzZXJ2ZXJfdGltZXN0YW1wXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9fbG9jYWxfd3JpdGVfdGltZV9fOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzOiB0LnNlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW5vczogdC5uYW5vc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZSAmJiAobi5maWVsZHMuX19wcmV2aW91c192YWx1ZV9fID0gZSksIHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiBuXG4gICAgICAgIH07XG4gICAgfShuLCBlKSA6IHQgaW5zdGFuY2VvZiBibiA/IFBuKHQsIGUpIDogdCBpbnN0YW5jZW9mIHZuID8gVm4odCwgZSkgOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogU2luY2UgSmF2YVNjcmlwdCdzIGludGVnZXIgYXJpdGhtZXRpYyBpcyBsaW1pdGVkIHRvIDUzIGJpdFxuICAgICAgICAvLyBwcmVjaXNpb24gYW5kIHJlc29sdmVzIG92ZXJmbG93cyBieSByZWR1Y2luZyBwcmVjaXNpb24sIHdlIGRvIG5vdFxuICAgICAgICAvLyBtYW51YWxseSBjYXAgb3ZlcmZsb3dzIGF0IDJeNjMuXG4gICAgICAgIGNvbnN0IG4gPSBBbih0LCBlKSwgcyA9IERuKG4pICsgRG4odC55dCk7XG4gICAgICAgIHJldHVybiBtZShuKSAmJiBtZSh0Lnl0KSA/IHluKHMpIDogZ24odC5JdCwgcyk7XG4gICAgfSh0LCBlKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIGZpbmFsIHRyYW5zZm9ybSByZXN1bHQgYWZ0ZXIgdGhlIHRyYW5zZm9ybSBoYXMgYmVlbiBhY2tub3dsZWRnZWRcbiAqIGJ5IHRoZSBzZXJ2ZXIsIHBvdGVudGlhbGx5IHVzaW5nIHRoZSBzZXJ2ZXItcHJvdmlkZWQgdHJhbnNmb3JtUmVzdWx0LlxuICovIGZ1bmN0aW9uIEVuKHQsIGUsIG4pIHtcbiAgICAvLyBUaGUgc2VydmVyIGp1c3Qgc2VuZHMgbnVsbCBhcyB0aGUgdHJhbnNmb3JtIHJlc3VsdCBmb3IgYXJyYXkgb3BlcmF0aW9ucyxcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIGNhbGN1bGF0ZSBhIHJlc3VsdCB0aGUgc2FtZSBhcyB3ZSBkbyBmb3IgbG9jYWxcbiAgICAvLyBhcHBsaWNhdGlvbnMuXG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBibiA/IFBuKHQsIGUpIDogdCBpbnN0YW5jZW9mIHZuID8gVm4odCwgZSkgOiBuO1xufVxuXG4vKipcbiAqIElmIHRoaXMgdHJhbnNmb3JtIG9wZXJhdGlvbiBpcyBub3QgaWRlbXBvdGVudCwgcmV0dXJucyB0aGUgYmFzZSB2YWx1ZSB0b1xuICogcGVyc2lzdCBmb3IgdGhpcyB0cmFuc2Zvcm0uIElmIGEgYmFzZSB2YWx1ZSBpcyByZXR1cm5lZCwgdGhlIHRyYW5zZm9ybVxuICogb3BlcmF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXNcbiAqIGFscmVhZHkgYmVlbiB1cGRhdGVkLlxuICpcbiAqIEJhc2UgdmFsdWVzIHByb3ZpZGUgY29uc2lzdGVudCBiZWhhdmlvciBmb3Igbm9uLWlkZW1wb3RlbnQgdHJhbnNmb3JtcyBhbmRcbiAqIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZSBsYXRlbmN5LWNvbXBlbnNhdGVkIHZhbHVlIGV2ZW4gaWYgdGhlIGJhY2tlbmRcbiAqIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlIHRyYW5zZm9ybSBvcGVyYXRpb24uIFRoZSBiYXNlIHZhbHVlIGlzIG51bGwgZm9yXG4gKiBpZGVtcG90ZW50IHRyYW5zZm9ybXMsIGFzIHRoZXkgY2FuIGJlIHJlLXBsYXllZCBldmVuIGlmIHRoZSBiYWNrZW5kIGhhc1xuICogYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybnMgYSBiYXNlIHZhbHVlIHRvIHN0b3JlIGFsb25nIHdpdGggdGhlIG11dGF0aW9uLCBvciBudWxsIGZvclxuICogaWRlbXBvdGVudCB0cmFuc2Zvcm1zLlxuICovIGZ1bmN0aW9uIEFuKHQsIGUpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIFNuID8gbWUobiA9IGUpIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuICEhdCAmJiBcImRvdWJsZVZhbHVlXCIgaW4gdDtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGVpdGhlciBhbiBJbnRlZ2VyVmFsdWUgb3IgYSBEb3VibGVWYWx1ZS4gKi8gKG4pID8gZSA6IHtcbiAgICAgICAgaW50ZWdlclZhbHVlOiAwXG4gICAgfSA6IG51bGw7XG4gICAgdmFyIG47XG59XG5cbi8qKiBUcmFuc2Zvcm1zIGEgdmFsdWUgaW50byBhIHNlcnZlci1nZW5lcmF0ZWQgdGltZXN0YW1wLiAqL1xuY2xhc3MgUm4gZXh0ZW5kcyBJbiB7fVxuXG4vKiogVHJhbnNmb3JtcyBhbiBhcnJheSB2YWx1ZSB2aWEgYSB1bmlvbiBvcGVyYXRpb24uICovIGNsYXNzIGJuIGV4dGVuZHMgSW4ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5lbGVtZW50cyA9IHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBQbih0LCBlKSB7XG4gICAgY29uc3QgbiA9IENuKGUpO1xuICAgIGZvciAoY29uc3QgZSBvZiB0LmVsZW1lbnRzKSBuLnNvbWUoKHQgPT4gYWUodCwgZSkpKSB8fCBuLnB1c2goZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKiogVHJhbnNmb3JtcyBhbiBhcnJheSB2YWx1ZSB2aWEgYSByZW1vdmUgb3BlcmF0aW9uLiAqLyBjbGFzcyB2biBleHRlbmRzIEluIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZWxlbWVudHMgPSB0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gVm4odCwgZSkge1xuICAgIGxldCBuID0gQ24oZSk7XG4gICAgZm9yIChjb25zdCBlIG9mIHQuZWxlbWVudHMpIG4gPSBuLmZpbHRlcigodCA9PiAhYWUodCwgZSkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IG5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgYmFja2VuZCBzZW1hbnRpY3MgZm9yIGxvY2FsbHkgY29tcHV0ZWQgTlVNRVJJQ19BREQgKGluY3JlbWVudClcbiAqIHRyYW5zZm9ybXMuIENvbnZlcnRzIGFsbCBmaWVsZCB2YWx1ZXMgdG8gaW50ZWdlcnMgb3IgZG91YmxlcywgYnV0IHVubGlrZSB0aGVcbiAqIGJhY2tlbmQgZG9lcyBub3QgY2FwIGludGVnZXIgdmFsdWVzIGF0IDJeNjMuIEluc3RlYWQsIEphdmFTY3JpcHQgbnVtYmVyXG4gKiBhcml0aG1ldGljIGlzIHVzZWQgYW5kIHByZWNpc2lvbiBsb3NzIGNhbiBvY2N1ciBmb3IgdmFsdWVzIGdyZWF0ZXIgdGhhbiAyXjUzLlxuICovIGNsYXNzIFNuIGV4dGVuZHMgSW4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5JdCA9IHQsIHRoaXMueXQgPSBlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gRG4odCkge1xuICAgIHJldHVybiBKdCh0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcbn1cblxuZnVuY3Rpb24gQ24odCkge1xuICAgIHJldHVybiBnZSh0KSAmJiB0LmFycmF5VmFsdWUudmFsdWVzID8gdC5hcnJheVZhbHVlLnZhbHVlcy5zbGljZSgpIDogW107XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQSBmaWVsZCBwYXRoIGFuZCB0aGUgVHJhbnNmb3JtT3BlcmF0aW9uIHRvIHBlcmZvcm0gdXBvbiBpdC4gKi8gY2xhc3MgeG4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IHQsIHRoaXMudHJhbnNmb3JtID0gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIE5uKHQsIGUpIHtcbiAgICByZXR1cm4gdC5maWVsZC5pc0VxdWFsKGUuZmllbGQpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBibiAmJiBlIGluc3RhbmNlb2YgYm4gfHwgdCBpbnN0YW5jZW9mIHZuICYmIGUgaW5zdGFuY2VvZiB2biA/IHR0KHQuZWxlbWVudHMsIGUuZWxlbWVudHMsIGFlKSA6IHQgaW5zdGFuY2VvZiBTbiAmJiBlIGluc3RhbmNlb2YgU24gPyBhZSh0Lnl0LCBlLnl0KSA6IHQgaW5zdGFuY2VvZiBSbiAmJiBlIGluc3RhbmNlb2YgUm47XG4gICAgfSh0LnRyYW5zZm9ybSwgZS50cmFuc2Zvcm0pO1xufVxuXG4vKiogVGhlIHJlc3VsdCBvZiBzdWNjZXNzZnVsbHkgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byB0aGUgYmFja2VuZC4gKi9cbmNsYXNzIGtuIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBhdCB3aGljaCB0aGUgbXV0YXRpb24gd2FzIGNvbW1pdHRlZDpcbiAgICAgKlxuICAgICAqIC0gRm9yIG1vc3Qgb3BlcmF0aW9ucywgdGhpcyBpcyB0aGUgdXBkYXRlVGltZSBpbiB0aGUgV3JpdGVSZXN1bHQuXG4gICAgICogLSBGb3IgZGVsZXRlcywgdGhlIGNvbW1pdFRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgKGJlY2F1c2UgZGVsZXRlcyBhcmVcbiAgICAgKiAgIG5vdCBzdG9yZWQgYW5kIGhhdmUgbm8gdXBkYXRlVGltZSkuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlc2UgdmVyc2lvbnMgY2FuIGJlIGRpZmZlcmVudDogTm8tb3Agd3JpdGVzIHdpbGwgbm90IGNoYW5nZVxuICAgICAqIHRoZSB1cGRhdGVUaW1lIGV2ZW4gdGhvdWdoIHRoZSBjb21taXRUaW1lIGFkdmFuY2VzLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHRpbmcgZmllbGRzIHJldHVybmVkIGZyb20gdGhlIGJhY2tlbmQgYWZ0ZXIgYSBtdXRhdGlvblxuICAgICAqIGNvbnRhaW5pbmcgZmllbGQgdHJhbnNmb3JtcyBoYXMgYmVlbiBjb21taXR0ZWQuIENvbnRhaW5zIG9uZSBGaWVsZFZhbHVlXG4gICAgICogZm9yIGVhY2ggRmllbGRUcmFuc2Zvcm0gdGhhdCB3YXMgaW4gdGhlIG11dGF0aW9uLlxuICAgICAqXG4gICAgICogV2lsbCBiZSBlbXB0eSBpZiB0aGUgbXV0YXRpb24gZGlkIG5vdCBjb250YWluIGFueSBmaWVsZCB0cmFuc2Zvcm1zLlxuICAgICAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdCwgdGhpcy50cmFuc2Zvcm1SZXN1bHRzID0gZTtcbiAgICB9XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHByZWNvbmRpdGlvbiBmb3IgYSBtdXRhdGlvbi4gVGhpcyBmb2xsb3dzIHRoZSBtb2RlbCB0aGF0IHRoZVxuICogYmFja2VuZCBhY2NlcHRzIHdpdGggdGhlIHNwZWNpYWwgY2FzZSBvZiBhbiBleHBsaWNpdCBcImVtcHR5XCIgcHJlY29uZGl0aW9uXG4gKiAobWVhbmluZyBubyBwcmVjb25kaXRpb24pLlxuICovIGNsYXNzIE9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGltZSA9IHQsIHRoaXMuZXhpc3RzID0gZTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZW1wdHkgUHJlY29uZGl0aW9uLiAqLyAgICBzdGF0aWMgbm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPbjtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIHdpdGggYW4gZXhpc3RzIGZsYWcuICovICAgIHN0YXRpYyBleGlzdHModCkge1xuICAgICAgICByZXR1cm4gbmV3IE9uKHZvaWQgMCwgdCk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IFByZWNvbmRpdGlvbiBiYXNlZCBvbiBhIHZlcnNpb24gYSBkb2N1bWVudCBleGlzdHMgYXQuICovICAgIHN0YXRpYyB1cGRhdGVUaW1lKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPbih0KTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgd2hldGhlciB0aGlzIFByZWNvbmRpdGlvbiBpcyBlbXB0eS4gKi8gICAgZ2V0IGlzTm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdGhpcy51cGRhdGVUaW1lICYmIHZvaWQgMCA9PT0gdGhpcy5leGlzdHM7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leGlzdHMgPT09IHQuZXhpc3RzICYmICh0aGlzLnVwZGF0ZVRpbWUgPyAhIXQudXBkYXRlVGltZSAmJiB0aGlzLnVwZGF0ZVRpbWUuaXNFcXVhbCh0LnVwZGF0ZVRpbWUpIDogIXQudXBkYXRlVGltZSk7XG4gICAgfVxufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHRoZSBwcmVjb25kaXRpb25zIGlzIHZhbGlkIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQuICovIGZ1bmN0aW9uIE1uKHQsIGUpIHtcbiAgICByZXR1cm4gdm9pZCAwICE9PSB0LnVwZGF0ZVRpbWUgPyBlLmlzRm91bmREb2N1bWVudCgpICYmIGUudmVyc2lvbi5pc0VxdWFsKHQudXBkYXRlVGltZSkgOiB2b2lkIDAgPT09IHQuZXhpc3RzIHx8IHQuZXhpc3RzID09PSBlLmlzRm91bmREb2N1bWVudCgpO1xufVxuXG4vKipcbiAqIEEgbXV0YXRpb24gZGVzY3JpYmVzIGEgc2VsZi1jb250YWluZWQgY2hhbmdlIHRvIGEgZG9jdW1lbnQuIE11dGF0aW9ucyBjYW5cbiAqIGNyZWF0ZSwgcmVwbGFjZSwgZGVsZXRlLCBhbmQgdXBkYXRlIHN1YnNldHMgb2YgZG9jdW1lbnRzLlxuICpcbiAqIE11dGF0aW9ucyBub3Qgb25seSBhY3Qgb24gdGhlIHZhbHVlIG9mIHRoZSBkb2N1bWVudCBidXQgYWxzbyBpdHMgdmVyc2lvbi5cbiAqXG4gKiBGb3IgbG9jYWwgbXV0YXRpb25zIChtdXRhdGlvbnMgdGhhdCBoYXZlbid0IGJlZW4gY29tbWl0dGVkIHlldCksIHdlIHByZXNlcnZlXG4gKiB0aGUgZXhpc3RpbmcgdmVyc2lvbiBmb3IgU2V0IGFuZCBQYXRjaCBtdXRhdGlvbnMuIEZvciBEZWxldGUgbXV0YXRpb25zLCB3ZVxuICogcmVzZXQgdGhlIHZlcnNpb24gdG8gMC5cbiAqXG4gKiBIZXJlJ3MgdGhlIGV4cGVjdGVkIHRyYW5zaXRpb24gdGFibGUuXG4gKlxuICogTVVUQVRJT04gICAgICAgICAgIEFQUExJRUQgVE8gICAgICAgICAgICBSRVNVTFRTIElOXG4gKlxuICogU2V0TXV0YXRpb24gICAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFNldE11dGF0aW9uICAgICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgRG9jdW1lbnQodjApXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgSW52YWxpZERvY3VtZW50KHYwKSAgIERvY3VtZW50KHYwKVxuICogUGF0Y2hNdXRhdGlvbiAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBJbnZhbGlkRG9jdW1lbnQodjApICAgVW5rbm93bkRvY3VtZW50KHYzKVxuICogRGVsZXRlTXV0YXRpb24gICAgIERvY3VtZW50KHYzKSAgICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIE5vRG9jdW1lbnQodjMpICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIEludmFsaWREb2N1bWVudCh2MCkgICBOb0RvY3VtZW50KHYwKVxuICpcbiAqIEZvciBhY2tub3dsZWRnZWQgbXV0YXRpb25zLCB3ZSB1c2UgdGhlIHVwZGF0ZVRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgYXNcbiAqIHRoZSByZXN1bHRpbmcgdmVyc2lvbiBmb3IgU2V0IGFuZCBQYXRjaCBtdXRhdGlvbnMuIEFzIGRlbGV0ZXMgaGF2ZSBub1xuICogZXhwbGljaXQgdXBkYXRlIHRpbWUsIHdlIHVzZSB0aGUgY29tbWl0VGltZSBvZiB0aGUgV3JpdGVSZXNwb25zZSBmb3JcbiAqIERlbGV0ZSBtdXRhdGlvbnMuXG4gKlxuICogSWYgYSBtdXRhdGlvbiBpcyBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmQgYnV0IGZhaWxzIHRoZSBwcmVjb25kaXRpb24gY2hlY2tcbiAqIGxvY2FsbHksIHdlIHRyYW5zaXRpb24gdG8gYW4gYFVua25vd25Eb2N1bWVudGAgYW5kIHJlbHkgb24gV2F0Y2ggdG8gc2VuZCB1c1xuICogdGhlIHVwZGF0ZWQgdmVyc2lvbi5cbiAqXG4gKiBGaWVsZCB0cmFuc2Zvcm1zIGFyZSB1c2VkIG9ubHkgd2l0aCBQYXRjaCBhbmQgU2V0IE11dGF0aW9ucy4gV2UgdXNlIHRoZVxuICogYHVwZGF0ZVRyYW5zZm9ybXNgIG1lc3NhZ2UgdG8gc3RvcmUgdHJhbnNmb3JtcywgcmF0aGVyIHRoYW4gdGhlIGB0cmFuc2Zvcm1zYHNcbiAqIG1lc3NhZ2VzLlxuICpcbiAqICMjIFN1YmNsYXNzaW5nIE5vdGVzXG4gKlxuICogRXZlcnkgdHlwZSBvZiBtdXRhdGlvbiBuZWVkcyB0byBpbXBsZW1lbnQgaXRzIG93biBhcHBseVRvUmVtb3RlRG9jdW1lbnQoKSBhbmRcbiAqIGFwcGx5VG9Mb2NhbFZpZXcoKSB0byBpbXBsZW1lbnQgdGhlIGFjdHVhbCBiZWhhdmlvciBvZiBhcHBseWluZyB0aGUgbXV0YXRpb25cbiAqIHRvIHNvbWUgc291cmNlIGRvY3VtZW50IChzZWUgYHNldE11dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50KClgIGZvciBhblxuICogZXhhbXBsZSkuXG4gKi8gY2xhc3MgRm4ge31cblxuLyoqXG4gKiBBIHV0aWxpdHkgbWV0aG9kIHRvIGNhbGN1bGF0ZSBhIGBNdXRhdGlvbmAgcmVwcmVzZW50aW5nIHRoZSBvdmVybGF5IGZyb20gdGhlXG4gKiBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIGFuZCBhIGBGaWVsZE1hc2tgIHJlcHJlc2VudGluZyB0aGUgZmllbGRzIHRoYXRcbiAqIGFyZSBtdXRhdGVkIGJ5IHRoZSBsb2NhbCBtdXRhdGlvbnMuXG4gKi8gZnVuY3Rpb24gJG4odCwgZSkge1xuICAgIGlmICghdC5oYXNMb2NhbE11dGF0aW9ucyB8fCBlICYmIDAgPT09IGUuZmllbGRzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgLy8gbWFzayBpcyBudWxsIHdoZW4gc2V0cyBvciBkZWxldGVzIGFyZSBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IGRvY3VtZW50LlxuICAgICAgICBpZiAobnVsbCA9PT0gZSkgcmV0dXJuIHQuaXNOb0RvY3VtZW50KCkgPyBuZXcgem4odC5rZXksIE9uLm5vbmUoKSkgOiBuZXcgS24odC5rZXksIHQuZGF0YSwgT24ubm9uZSgpKTtcbiAgICB7XG4gICAgICAgIGNvbnN0IG4gPSB0LmRhdGEsIHMgPSB2ZS5lbXB0eSgpO1xuICAgICAgICBsZXQgaSA9IG5ldyBxdCh1dC5jb21wYXJhdG9yKTtcbiAgICAgICAgZm9yIChsZXQgdCBvZiBlLmZpZWxkcykgaWYgKCFpLmhhcyh0KSkge1xuICAgICAgICAgICAgbGV0IGUgPSBuLmZpZWxkKHQpO1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGRlbGV0aW5nIGEgbmVzdGVkIGZpZWxkLCB3ZSB0YWtlIHRoZSBpbW1lZGlhdGUgcGFyZW50IGFzXG4gICAgICAgICAgICAvLyB0aGUgbWFzayB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgcmVzdWx0aW5nIG11dGF0aW9uLlxuICAgICAgICAgICAgLy8gSnVzdGlmaWNhdGlvbjogTmVzdGVkIGZpZWxkcyBjYW4gY3JlYXRlIHBhcmVudCBmaWVsZHMgaW1wbGljaXRseS4gSWZcbiAgICAgICAgICAgIC8vIG9ubHkgYSBsZWFmIGVudHJ5IGlzIGRlbGV0ZWQgaW4gbGF0ZXIgbXV0YXRpb25zLCB0aGUgcGFyZW50IGZpZWxkXG4gICAgICAgICAgICAvLyBzaG91bGQgc3RpbGwgcmVtYWluLCBidXQgd2UgbWF5IGhhdmUgbG9zdCB0aGlzIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAgLy8gQ29uc2lkZXIgbXV0YXRpb24gKGZvby5iYXIgMSksIHRoZW4gbXV0YXRpb24gKGZvby5iYXIgZGVsZXRlKCkpLlxuICAgICAgICAgICAgLy8gVGhpcyBsZWF2ZXMgdGhlIGZpbmFsIHJlc3VsdCAoZm9vLCB7fSkuIERlc3BpdGUgdGhlIGZhY3QgdGhhdCBgZG9jYFxuICAgICAgICAgICAgLy8gaGFzIHRoZSBjb3JyZWN0IHJlc3VsdCwgYGZvb2AgaXMgbm90IGluIGBtYXNrYCwgYW5kIHRoZSByZXN1bHRpbmdcbiAgICAgICAgICAgIC8vIG11dGF0aW9uIHdvdWxkIG1pc3MgYGZvb2AuXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBlICYmIHQubGVuZ3RoID4gMSAmJiAodCA9IHQucG9wTGFzdCgpLCBlID0gbi5maWVsZCh0KSksIG51bGwgPT09IGUgPyBzLmRlbGV0ZSh0KSA6IHMuc2V0KHQsIGUpLCBcbiAgICAgICAgICAgIGkgPSBpLmFkZCh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEduKHQua2V5LCBzLCBuZXcgUXQoaS50b0FycmF5KCkpLCBPbi5ub25lKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgbXV0YXRpb24gdG8gdGhlIGdpdmVuIGRvY3VtZW50IGZvciB0aGUgcHVycG9zZXMgb2YgY29tcHV0aW5nIGFcbiAqIG5ldyByZW1vdGUgZG9jdW1lbnQuIElmIHRoZSBpbnB1dCBkb2N1bWVudCBkb2Vzbid0IG1hdGNoIHRoZSBleHBlY3RlZCBzdGF0ZVxuICogKGUuZy4gaXQgaXMgaW52YWxpZCBvciBvdXRkYXRlZCksIHRoZSBkb2N1bWVudCB0eXBlIG1heSB0cmFuc2l0aW9uIHRvXG4gKiB1bmtub3duLlxuICpcbiAqIEBwYXJhbSBtdXRhdGlvbiAtIFRoZSBtdXRhdGlvbiB0byBhcHBseS5cbiAqIEBwYXJhbSBkb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0byBtdXRhdGUuIFRoZSBpbnB1dCBkb2N1bWVudCBjYW4gYmUgYW5cbiAqICAgICBpbnZhbGlkIGRvY3VtZW50IGlmIHRoZSBjbGllbnQgaGFzIG5vIGtub3dsZWRnZSBvZiB0aGUgcHJlLW11dGF0aW9uIHN0YXRlXG4gKiAgICAgb2YgdGhlIGRvY3VtZW50LlxuICogQHBhcmFtIG11dGF0aW9uUmVzdWx0IC0gVGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgbXV0YXRpb24gZnJvbSB0aGUgYmFja2VuZC5cbiAqLyBmdW5jdGlvbiBCbih0LCBlLCBuKSB7XG4gICAgdCBpbnN0YW5jZW9mIEtuID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBVbmxpa2Ugc2V0TXV0YXRpb25BcHBseVRvTG9jYWxWaWV3LCBpZiB3ZSdyZSBhcHBseWluZyBhIG11dGF0aW9uIHRvIGFcbiAgICAgICAgLy8gcmVtb3RlIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uXG4gICAgICAgIC8vIG11c3QgaGF2ZSBoZWxkLlxuICAgICAgICBjb25zdCBzID0gdC52YWx1ZS5jbG9uZSgpLCBpID0gam4odC5maWVsZFRyYW5zZm9ybXMsIGUsIG4udHJhbnNmb3JtUmVzdWx0cyk7XG4gICAgICAgIHMuc2V0QWxsKGkpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQobi52ZXJzaW9uLCBzKS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9KHQsIGUsIG4pIDogdCBpbnN0YW5jZW9mIEduID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAoIU1uKHQucHJlY29uZGl0aW9uLCBlKSkgXG4gICAgICAgIC8vIFNpbmNlIHRoZSBtdXRhdGlvbiB3YXMgbm90IHJlamVjdGVkLCB3ZSBrbm93IHRoYXQgdGhlIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtYXRjaGVkIG9uIHRoZSBiYWNrZW5kLiBXZSB0aGVyZWZvcmUgbXVzdCBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgdmVyc2lvblxuICAgICAgICAvLyBvZiB0aGUgZG9jdW1lbnQgaW4gb3VyIGNhY2hlIGFuZCBjb252ZXJ0IHRvIGFuIFVua25vd25Eb2N1bWVudCB3aXRoIGFcbiAgICAgICAgLy8ga25vd24gdXBkYXRlVGltZS5cbiAgICAgICAgcmV0dXJuIHZvaWQgZS5jb252ZXJ0VG9Vbmtub3duRG9jdW1lbnQobi52ZXJzaW9uKTtcbiAgICAgICAgY29uc3QgcyA9IGpuKHQuZmllbGRUcmFuc2Zvcm1zLCBlLCBuLnRyYW5zZm9ybVJlc3VsdHMpLCBpID0gZS5kYXRhO1xuICAgICAgICBpLnNldEFsbChRbih0KSksIGkuc2V0QWxsKHMpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQobi52ZXJzaW9uLCBpKS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9KHQsIGUsIG4pIDogZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBVbmxpa2UgYXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhIHJlbW90ZVxuICAgICAgICAvLyBkb2N1bWVudCB0aGUgc2VydmVyIGhhcyBhY2NlcHRlZCB0aGUgbXV0YXRpb24gc28gdGhlIHByZWNvbmRpdGlvbiBtdXN0XG4gICAgICAgIC8vIGhhdmUgaGVsZC5cbiAgICAgICAgZS5jb252ZXJ0VG9Ob0RvY3VtZW50KG4udmVyc2lvbikuc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCk7XG4gICAgfSgwLCBlLCBuKTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgbXV0YXRpb24gdG8gdGhlIGdpdmVuIGRvY3VtZW50IGZvciB0aGUgcHVycG9zZXMgb2YgY29tcHV0aW5nXG4gKiB0aGUgbmV3IGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudC4gSWYgdGhlIGlucHV0IGRvY3VtZW50IGRvZXNuJ3QgbWF0Y2ggdGhlXG4gKiBleHBlY3RlZCBzdGF0ZSwgdGhlIGRvY3VtZW50IGlzIG5vdCBtb2RpZmllZC5cbiAqXG4gKiBAcGFyYW0gbXV0YXRpb24gLSBUaGUgbXV0YXRpb24gdG8gYXBwbHkuXG4gKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gbXV0YXRlLiBUaGUgaW5wdXQgZG9jdW1lbnQgY2FuIGJlIGFuXG4gKiAgICAgaW52YWxpZCBkb2N1bWVudCBpZiB0aGUgY2xpZW50IGhhcyBubyBrbm93bGVkZ2Ugb2YgdGhlIHByZS1tdXRhdGlvbiBzdGF0ZVxuICogICAgIG9mIHRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSBwcmV2aW91c01hc2sgLSBUaGUgZmllbGRzIHRoYXQgaGF2ZSBiZWVuIHVwZGF0ZWQgYmVmb3JlIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24uXG4gKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgLSBBIHRpbWVzdGFtcCBpbmRpY2F0aW5nIHRoZSBsb2NhbCB3cml0ZSB0aW1lIG9mIHRoZVxuICogICAgIGJhdGNoIHRoaXMgbXV0YXRpb24gaXMgYSBwYXJ0IG9mLlxuICogQHJldHVybnMgQSBgRmllbGRNYXNrYCByZXByZXNlbnRpbmcgdGhlIGZpZWxkcyB0aGF0IGFyZSBjaGFuZ2VkIGJ5IGFwcGx5aW5nIHRoaXMgbXV0YXRpb24uXG4gKi8gZnVuY3Rpb24gTG4odCwgZSwgbiwgcykge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgS24gPyBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGlmICghTW4odC5wcmVjb25kaXRpb24sIGUpKSBcbiAgICAgICAgLy8gVGhlIG11dGF0aW9uIGZhaWxlZCB0byBhcHBseSAoZS5nLiBhIGRvY3VtZW50IElEIGNyZWF0ZWQgd2l0aCBhZGQoKVxuICAgICAgICAvLyBjYXVzZWQgYSBuYW1lIGNvbGxpc2lvbikuXG4gICAgICAgIHJldHVybiBuO1xuICAgICAgICBjb25zdCBpID0gdC52YWx1ZS5jbG9uZSgpLCByID0gV24odC5maWVsZFRyYW5zZm9ybXMsIHMsIGUpO1xuICAgICAgICByZXR1cm4gaS5zZXRBbGwociksIGUuY29udmVydFRvRm91bmREb2N1bWVudChlLnZlcnNpb24sIGkpLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsO1xuIC8vIFNldE11dGF0aW9uIG92ZXJ3cml0ZXMgYWxsIGZpZWxkcy5cbiAgICAgICAgfVxuICAgIC8qKlxuICogQSBtdXRhdGlvbiB0aGF0IG1vZGlmaWVzIGZpZWxkcyBvZiB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoIHRoZVxuICogZ2l2ZW4gdmFsdWVzLiBUaGUgdmFsdWVzIGFyZSBhcHBsaWVkIHRocm91Z2ggYSBmaWVsZCBtYXNrOlxuICpcbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiBib3RoIHRoZSBtYXNrIGFuZCB0aGUgdmFsdWVzLCB0aGUgY29ycmVzcG9uZGluZyBmaWVsZFxuICogICAgaXMgdXBkYXRlZC5cbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiBuZWl0aGVyIHRoZSBtYXNrIG5vciB0aGUgdmFsdWVzLCB0aGUgY29ycmVzcG9uZGluZ1xuICogICAgZmllbGQgaXMgdW5tb2RpZmllZC5cbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiB0aGUgbWFzayBidXQgbm90IGluIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkXG4gKiAgICBpcyBkZWxldGVkLlxuICogICogV2hlbiBhIGZpZWxkIGlzIG5vdCBpbiB0aGUgbWFzayBidXQgaXMgaW4gdGhlIHZhbHVlcywgdGhlIHZhbHVlcyBtYXAgaXNcbiAqICAgIGlnbm9yZWQuXG4gKi8gKHQsIGUsIG4sIHMpIDogdCBpbnN0YW5jZW9mIEduID8gZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICBpZiAoIU1uKHQucHJlY29uZGl0aW9uLCBlKSkgcmV0dXJuIG47XG4gICAgICAgIGNvbnN0IGkgPSBXbih0LmZpZWxkVHJhbnNmb3JtcywgcywgZSksIHIgPSBlLmRhdGE7XG4gICAgICAgIGlmIChyLnNldEFsbChRbih0KSksIHIuc2V0QWxsKGkpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQoZS52ZXJzaW9uLCByKS5zZXRIYXNMb2NhbE11dGF0aW9ucygpLCBcbiAgICAgICAgbnVsbCA9PT0gbikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuLnVuaW9uV2l0aCh0LmZpZWxkTWFzay5maWVsZHMpLnVuaW9uV2l0aCh0LmZpZWxkVHJhbnNmb3Jtcy5tYXAoKHQgPT4gdC5maWVsZCkpKTtcbiAgICB9XG4gICAgLyoqXG4gKiBSZXR1cm5zIGEgRmllbGRQYXRoL1ZhbHVlIG1hcCB3aXRoIHRoZSBjb250ZW50IG9mIHRoZSBQYXRjaE11dGF0aW9uLlxuICovICh0LCBlLCBuLCBzKSA6IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgaWYgKE1uKHQucHJlY29uZGl0aW9uLCBlKSkgcmV0dXJuIGUuY29udmVydFRvTm9Eb2N1bWVudChlLnZlcnNpb24pLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gKiBBIG11dGF0aW9uIHRoYXQgdmVyaWZpZXMgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoXG4gKiB0aGUgcHJvdmlkZWQgcHJlY29uZGl0aW9uLlxuICpcbiAqIFRoZSBgdmVyaWZ5YCBvcGVyYXRpb24gaXMgb25seSB1c2VkIGluIFRyYW5zYWN0aW9ucywgYW5kIHRoaXMgY2xhc3Mgc2VydmVzXG4gKiBwcmltYXJpbHkgdG8gZmFjaWxpdGF0ZSBzZXJpYWxpemF0aW9uIGludG8gcHJvdG9zLlxuICovICh0LCBlLCBuKTtcbn1cblxuLyoqXG4gKiBJZiB0aGlzIG11dGF0aW9uIGlzIG5vdCBpZGVtcG90ZW50LCByZXR1cm5zIHRoZSBiYXNlIHZhbHVlIHRvIHBlcnNpc3Qgd2l0aFxuICogdGhpcyBtdXRhdGlvbi4gSWYgYSBiYXNlIHZhbHVlIGlzIHJldHVybmVkLCB0aGUgbXV0YXRpb24gaXMgYWx3YXlzIGFwcGxpZWRcbiAqIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGJhc2UgdmFsdWUgaXMgYSBzcGFyc2Ugb2JqZWN0IHRoYXQgY29uc2lzdHMgb2Ygb25seSB0aGUgZG9jdW1lbnRcbiAqIGZpZWxkcyBmb3Igd2hpY2ggdGhpcyBtdXRhdGlvbiBjb250YWlucyBhIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybWF0aW9uXG4gKiAoZS5nLiBhIG51bWVyaWMgaW5jcmVtZW50KS4gVGhlIHByb3ZpZGVkIHZhbHVlIGd1YXJhbnRlZXMgY29uc2lzdGVudFxuICogYmVoYXZpb3IgZm9yIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybXMgYW5kIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZVxuICogbGF0ZW5jeS1jb21wZW5zYXRlZCB2YWx1ZSBldmVuIGlmIHRoZSBiYWNrZW5kIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlXG4gKiBtdXRhdGlvbi4gVGhlIGJhc2UgdmFsdWUgaXMgbnVsbCBmb3IgaWRlbXBvdGVudCBtdXRhdGlvbnMsIGFzIHRoZXkgY2FuIGJlXG4gKiByZS1wbGF5ZWQgZXZlbiBpZiB0aGUgYmFja2VuZCBoYXMgYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybnMgYSBiYXNlIHZhbHVlIHRvIHN0b3JlIGFsb25nIHdpdGggdGhlIG11dGF0aW9uLCBvciBudWxsIGZvclxuICogaWRlbXBvdGVudCBtdXRhdGlvbnMuXG4gKi8gZnVuY3Rpb24gVW4odCwgZSkge1xuICAgIGxldCBuID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHMgb2YgdC5maWVsZFRyYW5zZm9ybXMpIHtcbiAgICAgICAgY29uc3QgdCA9IGUuZGF0YS5maWVsZChzLmZpZWxkKSwgaSA9IEFuKHMudHJhbnNmb3JtLCB0IHx8IG51bGwpO1xuICAgICAgICBudWxsICE9IGkgJiYgKG51bGwgPT09IG4gJiYgKG4gPSB2ZS5lbXB0eSgpKSwgbi5zZXQocy5maWVsZCwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gbiB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiBxbih0LCBlKSB7XG4gICAgcmV0dXJuIHQudHlwZSA9PT0gZS50eXBlICYmICghIXQua2V5LmlzRXF1YWwoZS5rZXkpICYmICghIXQucHJlY29uZGl0aW9uLmlzRXF1YWwoZS5wcmVjb25kaXRpb24pICYmICghIWZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiB2b2lkIDAgPT09IGUgfHwgISghdCB8fCAhZSkgJiYgdHQodCwgZSwgKCh0LCBlKSA9PiBObih0LCBlKSkpO1xuICAgIH0odC5maWVsZFRyYW5zZm9ybXMsIGUuZmllbGRUcmFuc2Zvcm1zKSAmJiAoMCAvKiBTZXQgKi8gPT09IHQudHlwZSA/IHQudmFsdWUuaXNFcXVhbChlLnZhbHVlKSA6IDEgLyogUGF0Y2ggKi8gIT09IHQudHlwZSB8fCB0LmRhdGEuaXNFcXVhbChlLmRhdGEpICYmIHQuZmllbGRNYXNrLmlzRXF1YWwoZS5maWVsZE1hc2spKSkpKTtcbn1cblxuLyoqXG4gKiBBIG11dGF0aW9uIHRoYXQgY3JlYXRlcyBvciByZXBsYWNlcyB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoIHRoZVxuICogb2JqZWN0IHZhbHVlIGNvbnRlbnRzLlxuICovIGNsYXNzIEtuIGV4dGVuZHMgRm4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMgPSBbXSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmtleSA9IHQsIHRoaXMudmFsdWUgPSBlLCB0aGlzLnByZWNvbmRpdGlvbiA9IG4sIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gcywgXG4gICAgICAgIHRoaXMudHlwZSA9IDAgLyogU2V0ICovO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgR24gZXh0ZW5kcyBGbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSA9IFtdKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMua2V5ID0gdCwgdGhpcy5kYXRhID0gZSwgdGhpcy5maWVsZE1hc2sgPSBuLCB0aGlzLnByZWNvbmRpdGlvbiA9IHMsIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGksIHRoaXMudHlwZSA9IDEgLyogUGF0Y2ggKi87XG4gICAgfVxuICAgIGdldEZpZWxkTWFzaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRNYXNrO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUW4odCkge1xuICAgIGNvbnN0IGUgPSBuZXcgTWFwO1xuICAgIHJldHVybiB0LmZpZWxkTWFzay5maWVsZHMuZm9yRWFjaCgobiA9PiB7XG4gICAgICAgIGlmICghbi5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0LmRhdGEuZmllbGQobik7XG4gICAgICAgICAgICBlLnNldChuLCBzKTtcbiAgICAgICAgfVxuICAgIH0pKSwgZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbGlzdCBvZiBcInRyYW5zZm9ybSByZXN1bHRzXCIgKGEgdHJhbnNmb3JtIHJlc3VsdCBpcyBhIGZpZWxkIHZhbHVlXG4gKiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBhIHRyYW5zZm9ybSkgZm9yIHVzZSBhZnRlciBhIG11dGF0aW9uXG4gKiBjb250YWluaW5nIHRyYW5zZm9ybXMgaGFzIGJlZW4gYWNrbm93bGVkZ2VkIGJ5IHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyAtIFRoZSBmaWVsZCB0cmFuc2Zvcm1zIHRvIGFwcGx5IHRoZSByZXN1bHQgdG8uXG4gKiBAcGFyYW0gbXV0YWJsZURvY3VtZW50IC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRvY3VtZW50IGFmdGVyIGFwcGx5aW5nIGFsbFxuICogcHJldmlvdXMgbXV0YXRpb25zLlxuICogQHBhcmFtIHNlcnZlclRyYW5zZm9ybVJlc3VsdHMgLSBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAqIEByZXR1cm5zIFRoZSB0cmFuc2Zvcm0gcmVzdWx0cyBsaXN0LlxuICovIGZ1bmN0aW9uIGpuKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gbmV3IE1hcDtcbiAgICBNKHQubGVuZ3RoID09PSBuLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHIgPSB0W2ldLCBvID0gci50cmFuc2Zvcm0sIHUgPSBlLmRhdGEuZmllbGQoci5maWVsZCk7XG4gICAgICAgIHMuc2V0KHIuZmllbGQsIEVuKG8sIHUsIG5baV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGxpc3Qgb2YgXCJ0cmFuc2Zvcm0gcmVzdWx0c1wiIChhIHRyYW5zZm9ybSByZXN1bHQgaXMgYSBmaWVsZCB2YWx1ZVxuICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSB0cmFuc2Zvcm0pIGZvciB1c2Ugd2hlbiBhcHBseWluZyBhXG4gKiB0cmFuc2Zvcm0gbG9jYWxseS5cbiAqXG4gKiBAcGFyYW0gZmllbGRUcmFuc2Zvcm1zIC0gVGhlIGZpZWxkIHRyYW5zZm9ybXMgdG8gYXBwbHkgdGhlIHJlc3VsdCB0by5cbiAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSAtIFRoZSBsb2NhbCB0aW1lIG9mIHRoZSBtdXRhdGlvbiAodXNlZCB0b1xuICogICAgIGdlbmVyYXRlIFNlcnZlclRpbWVzdGFtcFZhbHVlcykuXG4gKiBAcGFyYW0gbXV0YWJsZURvY3VtZW50IC0gVGhlIGRvY3VtZW50IHRvIGFwcGx5IHRyYW5zZm9ybXMgb24uXG4gKiBAcmV0dXJucyBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgbGlzdC5cbiAqLyBmdW5jdGlvbiBXbih0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IG5ldyBNYXA7XG4gICAgZm9yIChjb25zdCBpIG9mIHQpIHtcbiAgICAgICAgY29uc3QgdCA9IGkudHJhbnNmb3JtLCByID0gbi5kYXRhLmZpZWxkKGkuZmllbGQpO1xuICAgICAgICBzLnNldChpLmZpZWxkLCBUbih0LCByLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG4vKiogQSBtdXRhdGlvbiB0aGF0IGRlbGV0ZXMgdGhlIGRvY3VtZW50IGF0IHRoZSBnaXZlbiBrZXkuICovIGNsYXNzIHpuIGV4dGVuZHMgRm4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5rZXkgPSB0LCB0aGlzLnByZWNvbmRpdGlvbiA9IGUsIHRoaXMudHlwZSA9IDIgLyogRGVsZXRlICovICwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBbXTtcbiAgICB9XG4gICAgZ2V0RmllbGRNYXNrKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIEhuIGV4dGVuZHMgRm4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5rZXkgPSB0LCB0aGlzLnByZWNvbmRpdGlvbiA9IGUsIHRoaXMudHlwZSA9IDMgLyogVmVyaWZ5ICovICwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBbXTtcbiAgICB9XG4gICAgZ2V0RmllbGRNYXNrKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIEpuIHtcbiAgICAvLyBUT0RPKGIvMzMwNzgxNjMpOiBqdXN0IHVzZSBzaW1wbGVzdCBmb3JtIG9mIGV4aXN0ZW5jZSBmaWx0ZXIgZm9yIG5vd1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBFcnJvciBDb2RlcyBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQgd2F5cyBHUlBDIGNhbiBmYWlsLiBUaGVzZSBhcmUgY29waWVkXG4gKiBkaXJlY3RseSBmcm9tIEdSUEMncyBzb3VyY2VzIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dycGMvZ3JwYy9ibG9iL2JjZWVjOTRlYTRmYzVmMDA4NWQ4MTIzNWQ4ZTFjMDY3OThkYzM0MWEvaW5jbHVkZS9ncnBjJTJCJTJCL2ltcGwvY29kZWdlbi9zdGF0dXNfY29kZV9lbnVtLmhcbiAqXG4gKiBJbXBvcnRhbnQhIFRoZSBuYW1lcyBvZiB0aGVzZSBpZGVudGlmaWVycyBtYXR0ZXIgYmVjYXVzZSB0aGUgc3RyaW5nIGZvcm1zXG4gKiBhcmUgdXNlZCBmb3IgcmV2ZXJzZSBsb29rdXBzIGZyb20gdGhlIHdlYmNoYW5uZWwgc3RyZWFtLiBEbyBOT1QgY2hhbmdlIHRoZVxuICogbmFtZXMgb2YgdGhlc2UgaWRlbnRpZmllcnMgb3IgY2hhbmdlIHRoaXMgaW50byBhIGNvbnN0IGVudW0uXG4gKi8gdmFyIFluLCBYbjtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgY29kZSByZXByZXNlbnRzIGEgcGVybWFuZW50IGVycm9yIHdoZW4gcmVjZWl2ZWRcbiAqIGluIHJlc3BvbnNlIHRvIGEgbm9uLXdyaXRlIG9wZXJhdGlvbi5cbiAqXG4gKiBTZWUgaXNQZXJtYW5lbnRXcml0ZUVycm9yIGZvciBjbGFzc2lmeWluZyB3cml0ZSBlcnJvcnMuXG4gKi9cbmZ1bmN0aW9uIFpuKHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG5cbiAgICAgIGNhc2UgQi5DQU5DRUxMRUQ6XG4gICAgICBjYXNlIEIuVU5LTk9XTjpcbiAgICAgIGNhc2UgQi5ERUFETElORV9FWENFRURFRDpcbiAgICAgIGNhc2UgQi5SRVNPVVJDRV9FWEhBVVNURUQ6XG4gICAgICBjYXNlIEIuSU5URVJOQUw6XG4gICAgICBjYXNlIEIuVU5BVkFJTEFCTEU6XG4gLy8gVW5hdXRoZW50aWNhdGVkIG1lYW5zIHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggb3VyIHRva2VuIGFuZCB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIHJldHJ5IHdpdGggbmV3IGNyZWRlbnRpYWxzIHdoaWNoIHdpbGwgaGFwcGVuIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAgICAgIGNhc2UgQi5VTkFVVEhFTlRJQ0FURUQ6XG4gICAgICAgIHJldHVybiAhMTtcblxuICAgICAgY2FzZSBCLklOVkFMSURfQVJHVU1FTlQ6XG4gICAgICBjYXNlIEIuTk9UX0ZPVU5EOlxuICAgICAgY2FzZSBCLkFMUkVBRFlfRVhJU1RTOlxuICAgICAgY2FzZSBCLlBFUk1JU1NJT05fREVOSUVEOlxuICAgICAgY2FzZSBCLkZBSUxFRF9QUkVDT05ESVRJT046XG4gLy8gQWJvcnRlZCBtaWdodCBiZSByZXRyaWVkIGluIHNvbWUgc2NlbmFyaW9zLCBidXQgdGhhdCBpcyBkZXBlbmRhbnQgb25cbiAgICAgICAgLy8gdGhlIGNvbnRleHQgYW5kIHNob3VsZCBoYW5kbGVkIGluZGl2aWR1YWxseSBieSB0aGUgY2FsbGluZyBjb2RlLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2FwaXMvZGVzaWduL2Vycm9ycy5cbiAgICAgICAgICAgICAgY2FzZSBCLkFCT1JURUQ6XG4gICAgICBjYXNlIEIuT1VUX09GX1JBTkdFOlxuICAgICAgY2FzZSBCLlVOSU1QTEVNRU5URUQ6XG4gICAgICBjYXNlIEIuREFUQV9MT1NTOlxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBlcnJvciBjb2RlIHJlcHJlc2VudHMgYSBwZXJtYW5lbnQgZXJyb3Igd2hlbiByZWNlaXZlZFxuICogaW4gcmVzcG9uc2UgdG8gYSB3cml0ZSBvcGVyYXRpb24uXG4gKlxuICogV3JpdGUgb3BlcmF0aW9ucyBtdXN0IGJlIGhhbmRsZWQgc3BlY2lhbGx5IGJlY2F1c2UgYXMgb2YgYi8xMTk0Mzc3NjQsIEFCT1JURURcbiAqIGVycm9ycyBvbiB0aGUgd3JpdGUgc3RyZWFtIHNob3VsZCBiZSByZXRyaWVkIHRvbyAoZXZlbiB0aG91Z2ggQUJPUlRFRCBlcnJvcnNcbiAqIGFyZSBub3QgZ2VuZXJhbGx5IHJldHJ5YWJsZSkuXG4gKlxuICogTm90ZSB0aGF0IGR1cmluZyB0aGUgaW5pdGlhbCBoYW5kc2hha2Ugb24gdGhlIHdyaXRlIHN0cmVhbSBhbiBBQk9SVEVEIGVycm9yXG4gKiBzaWduYWxzIHRoYXQgd2Ugc2hvdWxkIGRpc2NhcmQgb3VyIHN0cmVhbSB0b2tlbiAoaS5lLiBpdCBpcyBwZXJtYW5lbnQpLiBUaGlzXG4gKiBtZWFucyBhIGhhbmRzaGFrZSBlcnJvciBzaG91bGQgYmUgY2xhc3NpZmllZCB3aXRoIGlzUGVybWFuZW50RXJyb3IsIGFib3ZlLlxuICovXG4vKipcbiAqIE1hcHMgYW4gZXJyb3IgQ29kZSBmcm9tIEdSUEMgc3RhdHVzIGNvZGUgbnVtYmVyLCBsaWtlIDAsIDEsIG9yIDE0LiBUaGVzZVxuICogYXJlIG5vdCB0aGUgc2FtZSBhcyBIVFRQIHN0YXR1cyBjb2Rlcy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgQ29kZSBlcXVpdmFsZW50IHRvIHRoZSBnaXZlbiBHUlBDIHN0YXR1cyBjb2RlLiBGYWlscyBpZiB0aGVyZVxuICogICAgIGlzIG5vIG1hdGNoLlxuICovXG5mdW5jdGlvbiB0cyh0KSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gdCkgXG4gICAgLy8gVGhpcyBzaG91bGRuJ3Qgbm9ybWFsbHkgaGFwcGVuLCBidXQgaW4gY2VydGFpbiBlcnJvciBjYXNlcyAobGlrZSB0cnlpbmdcbiAgICAvLyB0byBzZW5kIGludmFsaWQgcHJvdG8gbWVzc2FnZXMpIHdlIG1heSBnZXQgYW4gZXJyb3Igd2l0aCBubyBHUlBDIGNvZGUuXG4gICAgcmV0dXJuIHgoXCJHUlBDIGVycm9yIGhhcyBubyAuY29kZVwiKSwgQi5VTktOT1dOO1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSBZbi5PSzpcbiAgICAgICAgcmV0dXJuIEIuT0s7XG5cbiAgICAgIGNhc2UgWW4uQ0FOQ0VMTEVEOlxuICAgICAgICByZXR1cm4gQi5DQU5DRUxMRUQ7XG5cbiAgICAgIGNhc2UgWW4uVU5LTk9XTjpcbiAgICAgICAgcmV0dXJuIEIuVU5LTk9XTjtcblxuICAgICAgY2FzZSBZbi5ERUFETElORV9FWENFRURFRDpcbiAgICAgICAgcmV0dXJuIEIuREVBRExJTkVfRVhDRUVERUQ7XG5cbiAgICAgIGNhc2UgWW4uUkVTT1VSQ0VfRVhIQVVTVEVEOlxuICAgICAgICByZXR1cm4gQi5SRVNPVVJDRV9FWEhBVVNURUQ7XG5cbiAgICAgIGNhc2UgWW4uSU5URVJOQUw6XG4gICAgICAgIHJldHVybiBCLklOVEVSTkFMO1xuXG4gICAgICBjYXNlIFluLlVOQVZBSUxBQkxFOlxuICAgICAgICByZXR1cm4gQi5VTkFWQUlMQUJMRTtcblxuICAgICAgY2FzZSBZbi5VTkFVVEhFTlRJQ0FURUQ6XG4gICAgICAgIHJldHVybiBCLlVOQVVUSEVOVElDQVRFRDtcblxuICAgICAgY2FzZSBZbi5JTlZBTElEX0FSR1VNRU5UOlxuICAgICAgICByZXR1cm4gQi5JTlZBTElEX0FSR1VNRU5UO1xuXG4gICAgICBjYXNlIFluLk5PVF9GT1VORDpcbiAgICAgICAgcmV0dXJuIEIuTk9UX0ZPVU5EO1xuXG4gICAgICBjYXNlIFluLkFMUkVBRFlfRVhJU1RTOlxuICAgICAgICByZXR1cm4gQi5BTFJFQURZX0VYSVNUUztcblxuICAgICAgY2FzZSBZbi5QRVJNSVNTSU9OX0RFTklFRDpcbiAgICAgICAgcmV0dXJuIEIuUEVSTUlTU0lPTl9ERU5JRUQ7XG5cbiAgICAgIGNhc2UgWW4uRkFJTEVEX1BSRUNPTkRJVElPTjpcbiAgICAgICAgcmV0dXJuIEIuRkFJTEVEX1BSRUNPTkRJVElPTjtcblxuICAgICAgY2FzZSBZbi5BQk9SVEVEOlxuICAgICAgICByZXR1cm4gQi5BQk9SVEVEO1xuXG4gICAgICBjYXNlIFluLk9VVF9PRl9SQU5HRTpcbiAgICAgICAgcmV0dXJuIEIuT1VUX09GX1JBTkdFO1xuXG4gICAgICBjYXNlIFluLlVOSU1QTEVNRU5URUQ6XG4gICAgICAgIHJldHVybiBCLlVOSU1QTEVNRU5URUQ7XG5cbiAgICAgIGNhc2UgWW4uREFUQV9MT1NTOlxuICAgICAgICByZXR1cm4gQi5EQVRBX0xPU1M7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEhUVFAgcmVzcG9uc2UncyBlcnJvciBzdGF0dXMgdG8gdGhlIGVxdWl2YWxlbnQgZXJyb3IgY29kZS5cbiAqXG4gKiBAcGFyYW0gc3RhdHVzIC0gQW4gSFRUUCBlcnJvciByZXNwb25zZSBzdGF0dXMgKFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICogXCJVTktOT1dOXCIsIGV0Yy4pXG4gKiBAcmV0dXJucyBUaGUgZXF1aXZhbGVudCBDb2RlLiBOb24tbWF0Y2hpbmcgcmVzcG9uc2VzIGFyZSBtYXBwZWQgdG9cbiAqICAgICBDb2RlLlVOS05PV04uXG4gKi8gKFhuID0gWW4gfHwgKFluID0ge30pKVtYbi5PSyA9IDBdID0gXCJPS1wiLCBYbltYbi5DQU5DRUxMRUQgPSAxXSA9IFwiQ0FOQ0VMTEVEXCIsIFxuWG5bWG4uVU5LTk9XTiA9IDJdID0gXCJVTktOT1dOXCIsIFhuW1huLklOVkFMSURfQVJHVU1FTlQgPSAzXSA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiLCBcblhuW1huLkRFQURMSU5FX0VYQ0VFREVEID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCIsIFhuW1huLk5PVF9GT1VORCA9IDVdID0gXCJOT1RfRk9VTkRcIiwgXG5YbltYbi5BTFJFQURZX0VYSVNUUyA9IDZdID0gXCJBTFJFQURZX0VYSVNUU1wiLCBYbltYbi5QRVJNSVNTSU9OX0RFTklFRCA9IDddID0gXCJQRVJNSVNTSU9OX0RFTklFRFwiLCBcblhuW1huLlVOQVVUSEVOVElDQVRFRCA9IDE2XSA9IFwiVU5BVVRIRU5USUNBVEVEXCIsIFhuW1huLlJFU09VUkNFX0VYSEFVU1RFRCA9IDhdID0gXCJSRVNPVVJDRV9FWEhBVVNURURcIiwgXG5YbltYbi5GQUlMRURfUFJFQ09ORElUSU9OID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIiwgWG5bWG4uQUJPUlRFRCA9IDEwXSA9IFwiQUJPUlRFRFwiLCBcblhuW1huLk9VVF9PRl9SQU5HRSA9IDExXSA9IFwiT1VUX09GX1JBTkdFXCIsIFhuW1huLlVOSU1QTEVNRU5URUQgPSAxMl0gPSBcIlVOSU1QTEVNRU5URURcIiwgXG5YbltYbi5JTlRFUk5BTCA9IDEzXSA9IFwiSU5URVJOQUxcIiwgWG5bWG4uVU5BVkFJTEFCTEUgPSAxNF0gPSBcIlVOQVZBSUxBQkxFXCIsIFhuW1huLkRBVEFfTE9TUyA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgbWFwIGltcGxlbWVudGF0aW9uIHRoYXQgdXNlcyBvYmplY3RzIGFzIGtleXMuIE9iamVjdHMgbXVzdCBoYXZlIGFuXG4gKiBhc3NvY2lhdGVkIGVxdWFscyBmdW5jdGlvbiBhbmQgbXVzdCBiZSBpbW11dGFibGUuIEVudHJpZXMgaW4gdGhlIG1hcCBhcmVcbiAqIHN0b3JlZCB0b2dldGhlciB3aXRoIHRoZSBrZXkgYmVpbmcgcHJvZHVjZWQgZnJvbSB0aGUgbWFwS2V5Rm4uIFRoaXMgbWFwXG4gKiBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgY29sbGlzaW9ucyBvZiBrZXlzLlxuICovXG5jbGFzcyBlcyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLm1hcEtleUZuID0gdCwgdGhpcy5lcXVhbHNGbiA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGlubmVyIG1hcCBmb3IgYSBrZXkvdmFsdWUgcGFpci4gRHVlIHRvIHRoZSBwb3NzaWJpbGl0eSBvZiBjb2xsaXNpb25zIHdlXG4gICAgICAgICAqIGtlZXAgYSBsaXN0IG9mIGVudHJpZXMgdGhhdCB3ZSBkbyBhIGxpbmVhciBzZWFyY2ggdGhyb3VnaCB0byBmaW5kIGFuIGFjdHVhbFxuICAgICAgICAgKiBtYXRjaC4gTm90ZSB0aGF0IGNvbGxpc2lvbnMgc2hvdWxkIGJlIHJhcmUsIHNvIHdlIHN0aWxsIGV4cGVjdCBuZWFyXG4gICAgICAgICAqIGNvbnN0YW50IHRpbWUgbG9va3VwcyBpbiBwcmFjdGljZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5uZXIgPSB7fSwgXG4gICAgICAgIC8qKiBUaGUgbnVtYmVyIG9mIGVudHJpZXMgc3RvcmVkIGluIHRoZSBtYXAgKi9cbiAgICAgICAgdGhpcy5pbm5lclNpemUgPSAwO1xuICAgIH1cbiAgICAvKiogR2V0IGEgdmFsdWUgZm9yIHRoaXMga2V5LCBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgZXhpc3QuICovICAgIGdldCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLm1hcEtleUZuKHQpLCBuID0gdGhpcy5pbm5lcltlXTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gbikgZm9yIChjb25zdCBbZSwgc10gb2YgbikgaWYgKHRoaXMuZXF1YWxzRm4oZSwgdCkpIHJldHVybiBzO1xuICAgIH1cbiAgICBoYXModCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmdldCh0KTtcbiAgICB9XG4gICAgLyoqIFB1dCB0aGlzIGtleSBhbmQgdmFsdWUgaW4gdGhlIG1hcC4gKi8gICAgc2V0KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMubWFwS2V5Rm4odCksIHMgPSB0aGlzLmlubmVyW25dO1xuICAgICAgICBpZiAodm9pZCAwID09PSBzKSByZXR1cm4gdGhpcy5pbm5lcltuXSA9IFsgWyB0LCBlIF0gXSwgdm9pZCB0aGlzLmlubmVyU2l6ZSsrO1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHMubGVuZ3RoOyBuKyspIGlmICh0aGlzLmVxdWFsc0ZuKHNbbl1bMF0sIHQpKSBcbiAgICAgICAgLy8gVGhpcyBpcyB1cGRhdGluZyBhbiBleGlzdGluZyBlbnRyeSBhbmQgZG9lcyBub3QgaW5jcmVhc2UgYGlubmVyU2l6ZWAuXG4gICAgICAgIHJldHVybiB2b2lkIChzW25dID0gWyB0LCBlIF0pO1xuICAgICAgICBzLnB1c2goWyB0LCBlIF0pLCB0aGlzLmlubmVyU2l6ZSsrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhpcyBrZXkgZnJvbSB0aGUgbWFwLiBSZXR1cm5zIGEgYm9vbGVhbiBpZiBhbnl0aGluZyB3YXMgZGVsZXRlZC5cbiAgICAgKi8gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMubWFwS2V5Rm4odCksIG4gPSB0aGlzLmlubmVyW2VdO1xuICAgICAgICBpZiAodm9pZCAwID09PSBuKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgbi5sZW5ndGg7IHMrKykgaWYgKHRoaXMuZXF1YWxzRm4obltzXVswXSwgdCkpIHJldHVybiAxID09PSBuLmxlbmd0aCA/IGRlbGV0ZSB0aGlzLmlubmVyW2VdIDogbi5zcGxpY2UocywgMSksIFxuICAgICAgICB0aGlzLmlubmVyU2l6ZS0tLCAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICBmb3JFYWNoKHQpIHtcbiAgICAgICAgRnQodGhpcy5pbm5lciwgKChlLCBuKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlLCBzXSBvZiBuKSB0KGUsIHMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAkdCh0aGlzLmlubmVyKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJTaXplO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgbnMgPSBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIHNzKCkge1xuICAgIHJldHVybiBucztcbn1cblxuY29uc3QgaXMgPSBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIHJzKC4uLnQpIHtcbiAgICBsZXQgZSA9IGlzO1xuICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5pbnNlcnQobi5rZXksIG4pO1xuICAgIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBvcyh0KSB7XG4gICAgbGV0IGUgPSBpcztcbiAgICByZXR1cm4gdC5mb3JFYWNoKCgodCwgbikgPT4gZSA9IGUuaW5zZXJ0KHQsIG4ub3ZlcmxheWVkRG9jdW1lbnQpKSksIGU7XG59XG5cbmZ1bmN0aW9uIHVzKCkge1xuICAgIHJldHVybiBhcygpO1xufVxuXG5mdW5jdGlvbiBjcygpIHtcbiAgICByZXR1cm4gYXMoKTtcbn1cblxuZnVuY3Rpb24gYXMoKSB7XG4gICAgcmV0dXJuIG5ldyBlcygodCA9PiB0LnRvU3RyaW5nKCkpLCAoKHQsIGUpID0+IHQuaXNFcXVhbChlKSkpO1xufVxuXG5jb25zdCBocyA9IG5ldyBCdChjdC5jb21wYXJhdG9yKTtcblxuY29uc3QgbHMgPSBuZXcgcXQoY3QuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIGZzKC4uLnQpIHtcbiAgICBsZXQgZSA9IGxzO1xuICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5hZGQobik7XG4gICAgcmV0dXJuIGU7XG59XG5cbmNvbnN0IGRzID0gbmV3IHF0KFopO1xuXG5mdW5jdGlvbiBfcygpIHtcbiAgICByZXR1cm4gZHM7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGV2ZW50IGZyb20gdGhlIFJlbW90ZVN0b3JlLiBJdCBpcyBzcGxpdCBpbnRvIHRhcmdldENoYW5nZXMgKGNoYW5nZXMgdG8gdGhlXG4gKiBzdGF0ZSBvciB0aGUgc2V0IG9mIGRvY3VtZW50cyBpbiBvdXIgd2F0Y2hlZCB0YXJnZXRzKSBhbmQgZG9jdW1lbnRVcGRhdGVzXG4gKiAoY2hhbmdlcyB0byB0aGUgYWN0dWFsIGRvY3VtZW50cykuXG4gKi8gY2xhc3Mgd3Mge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBzbmFwc2hvdCB2ZXJzaW9uIHRoaXMgZXZlbnQgYnJpbmdzIHVzIHVwIHRvLCBvciBNSU4gaWYgbm90IHNldC5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBBIG1hcCBmcm9tIHRhcmdldCB0byBjaGFuZ2VzIHRvIHRoZSB0YXJnZXQuIFNlZSBUYXJnZXRDaGFuZ2UuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgdGFyZ2V0cyB0aGF0IGlzIGtub3duIHRvIGJlIGluY29uc2lzdGVudC4gTGlzdGVucyBmb3IgdGhlc2VcbiAgICAgKiB0YXJnZXRzIHNob3VsZCBiZSByZS1lc3RhYmxpc2hlZCB3aXRob3V0IHJlc3VtZSB0b2tlbnMuXG4gICAgICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2Ygd2hpY2ggZG9jdW1lbnRzIGhhdmUgY2hhbmdlZCBvciBiZWVuIGRlbGV0ZWQsIGFsb25nIHdpdGggdGhlXG4gICAgICogZG9jJ3MgbmV3IHZhbHVlcyAoaWYgbm90IGRlbGV0ZWQpLlxuICAgICAqL1xuICAgIHMsIFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHdoaWNoIGRvY3VtZW50IHVwZGF0ZXMgYXJlIGR1ZSBvbmx5IHRvIGxpbWJvIHJlc29sdXRpb24gdGFyZ2V0cy5cbiAgICAgKi9cbiAgICBpKSB7XG4gICAgICAgIHRoaXMuc25hcHNob3RWZXJzaW9uID0gdCwgdGhpcy50YXJnZXRDaGFuZ2VzID0gZSwgdGhpcy50YXJnZXRNaXNtYXRjaGVzID0gbiwgdGhpcy5kb2N1bWVudFVwZGF0ZXMgPSBzLCBcbiAgICAgICAgdGhpcy5yZXNvbHZlZExpbWJvRG9jdW1lbnRzID0gaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSEFDSzogVmlld3MgcmVxdWlyZSBSZW1vdGVFdmVudHMgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHZpZXcgaXNcbiAgICAgKiBDVVJSRU5ULCBidXQgc2Vjb25kYXJ5IHRhYnMgZG9uJ3QgcmVjZWl2ZSByZW1vdGUgZXZlbnRzLiBTbyB0aGlzIG1ldGhvZCBpc1xuICAgICAqIHVzZWQgdG8gY3JlYXRlIGEgc3ludGhlc2l6ZWQgUmVtb3RlRXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBhcHBseSBhXG4gICAgICogQ1VSUkVOVCBzdGF0dXMgY2hhbmdlIHRvIGEgVmlldywgZm9yIHF1ZXJpZXMgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnQgdGFiLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcbiAgICBzdGF0aWMgY3JlYXRlU3ludGhlc2l6ZWRSZW1vdGVFdmVudEZvckN1cnJlbnRDaGFuZ2UodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IE1hcDtcbiAgICAgICAgcmV0dXJuIHMuc2V0KHQsIG1zLmNyZWF0ZVN5bnRoZXNpemVkVGFyZ2V0Q2hhbmdlRm9yQ3VycmVudENoYW5nZSh0LCBlLCBuKSksIG5ldyB3cyhzdC5taW4oKSwgcywgX3MoKSwgc3MoKSwgZnMoKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgVGFyZ2V0Q2hhbmdlIHNwZWNpZmllcyB0aGUgc2V0IG9mIGNoYW5nZXMgZm9yIGEgc3BlY2lmaWMgdGFyZ2V0IGFzIHBhcnQgb2ZcbiAqIGEgUmVtb3RlRXZlbnQuIFRoZXNlIGNoYW5nZXMgdHJhY2sgd2hpY2ggZG9jdW1lbnRzIGFyZSBhZGRlZCwgbW9kaWZpZWQgb3JcbiAqIHJlbW92ZWQsIGFzIHdlbGwgYXMgdGhlIHRhcmdldCdzIHJlc3VtZSB0b2tlbiBhbmQgd2hldGhlciB0aGUgdGFyZ2V0IGlzXG4gKiBtYXJrZWQgQ1VSUkVOVC5cbiAqIFRoZSBhY3R1YWwgY2hhbmdlcyAqdG8qIGRvY3VtZW50cyBhcmUgbm90IHBhcnQgb2YgdGhlIFRhcmdldENoYW5nZSBzaW5jZVxuICogZG9jdW1lbnRzIG1heSBiZSBwYXJ0IG9mIG11bHRpcGxlIHRhcmdldHMuXG4gKi8gY2xhc3MgbXMge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgcXVlcnkgdG8gYmUgcmVzdW1lZFxuICAgICAqIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdCBtYXRjaGVzIHRoZVxuICAgICAqIHF1ZXJ5LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpbiB0aW1lIGZyb20gd2hpY2hcbiAgICAgKiB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBcImN1cnJlbnRcIiAoc3luY2VkKSBzdGF0dXMgb2YgdGhpcyB0YXJnZXQuIE5vdGUgdGhhdCBcImN1cnJlbnRcIlxuICAgICAqIGhhcyBzcGVjaWFsIG1lYW5pbmcgaW4gdGhlIFJQQyBwcm90b2NvbCB0aGF0IGltcGxpZXMgdGhhdCBhIHRhcmdldCBpc1xuICAgICAqIGJvdGggdXAtdG8tZGF0ZSBhbmQgY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSB3YXRjaCBzdHJlYW0uXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIG5ld2x5IGFzc2lnbmVkIHRvIHRoaXMgdGFyZ2V0IGFzIHBhcnQgb2ZcbiAgICAgKiB0aGlzIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICBuLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgYWxyZWFkeSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBidXQgcmVjZWl2ZWRcbiAgICAgKiBhbiB1cGRhdGUgZHVyaW5nIHRoaXMgcmVtb3RlIGV2ZW50LlxuICAgICAqL1xuICAgIHMsIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSByZW1vdmVkIGZyb20gdGhpcyB0YXJnZXQgYXMgcGFydCBvZiB0aGlzXG4gICAgICogcmVtb3RlIGV2ZW50LlxuICAgICAqL1xuICAgIGkpIHtcbiAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHQsIHRoaXMuY3VycmVudCA9IGUsIHRoaXMuYWRkZWREb2N1bWVudHMgPSBuLCB0aGlzLm1vZGlmaWVkRG9jdW1lbnRzID0gcywgXG4gICAgICAgIHRoaXMucmVtb3ZlZERvY3VtZW50cyA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gY3JlYXRlIGEgc3ludGhlc2l6ZWQgVGFyZ2V0Q2hhbmdlcyB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAgICogYXBwbHkgYSBDVVJSRU5UIHN0YXR1cyBjaGFuZ2UgdG8gYSBWaWV3IChmb3IgcXVlcmllcyBleGVjdXRlZCBpbiBhIGRpZmZlcmVudFxuICAgICAqIHRhYikgb3IgZm9yIG5ldyBxdWVyaWVzICh0byByYWlzZSBzbmFwc2hvdHMgd2l0aCBjb3JyZWN0IENVUlJFTlQgc3RhdHVzKS5cbiAgICAgKi8gICAgc3RhdGljIGNyZWF0ZVN5bnRoZXNpemVkVGFyZ2V0Q2hhbmdlRm9yQ3VycmVudENoYW5nZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgbXMobiwgZSwgZnMoKSwgZnMoKSwgZnMoKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2hhbmdlZCBkb2N1bWVudCBhbmQgYSBsaXN0IG9mIHRhcmdldCBpZHMgdG8gd2hpY2ggdGhpcyBjaGFuZ2VcbiAqIGFwcGxpZXMuXG4gKlxuICogSWYgZG9jdW1lbnQgaGFzIGJlZW4gZGVsZXRlZCBOb0RvY3VtZW50IHdpbGwgYmUgcHJvdmlkZWQuXG4gKi8gY2xhc3MgZ3Mge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgbmV3IGRvY3VtZW50IGFwcGxpZXMgdG8gYWxsIG9mIHRoZXNlIHRhcmdldHMuICovXG4gICAgdCwgXG4gICAgLyoqIFRoZSBuZXcgZG9jdW1lbnQgaXMgcmVtb3ZlZCBmcm9tIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xuICAgIGUsIFxuICAgIC8qKiBUaGUga2V5IG9mIHRoZSBkb2N1bWVudCBmb3IgdGhpcyBjaGFuZ2UuICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogVGhlIG5ldyBkb2N1bWVudCBvciBOb0RvY3VtZW50IGlmIGl0IHdhcyBkZWxldGVkLiBJcyBudWxsIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IHdlbnQgb3V0IG9mIHZpZXcgd2l0aG91dCB0aGUgc2VydmVyIHNlbmRpbmcgYSBuZXcgZG9jdW1lbnQuXG4gICAgICovXG4gICAgcykge1xuICAgICAgICB0aGlzLlR0ID0gdCwgdGhpcy5yZW1vdmVkVGFyZ2V0SWRzID0gZSwgdGhpcy5rZXkgPSBuLCB0aGlzLkV0ID0gcztcbiAgICB9XG59XG5cbmNsYXNzIHlzIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0LCB0aGlzLkF0ID0gZTtcbiAgICB9XG59XG5cbmNsYXNzIHBzIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogV2hhdCBraW5kIG9mIGNoYW5nZSBvY2N1cnJlZCB0byB0aGUgd2F0Y2ggdGFyZ2V0LiAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgdGFyZ2V0IElEcyB0aGF0IHdlcmUgYWRkZWQvcmVtb3ZlZC9zZXQuICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSB0YXJnZXQgdG8gYmVcbiAgICAgKiByZXN1bWVkIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdFxuICAgICAqIG1hdGNoZXMgdGhlIHRhcmdldC4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW5cbiAgICAgKiB0aW1lIGZyb20gd2hpY2ggdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKi9cbiAgICBuID0gV3QuRU1QVFlfQllURV9TVFJJTkdcbiAgICAvKiogQW4gUlBDIGVycm9yIGluZGljYXRpbmcgd2h5IHRoZSB3YXRjaCBmYWlsZWQuICovICwgcyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHQsIHRoaXMudGFyZ2V0SWRzID0gZSwgdGhpcy5yZXN1bWVUb2tlbiA9IG4sIHRoaXMuY2F1c2UgPSBzO1xuICAgIH1cbn1cblxuLyoqIFRyYWNrcyB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBXYXRjaCB0YXJnZXQuICovIGNsYXNzIElzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgcGVuZGluZyByZXNwb25zZXMgKGFkZHMgb3IgcmVtb3ZlcykgdGhhdCB3ZSBhcmUgd2FpdGluZyBvbi5cbiAgICAgICAgICogV2Ugb25seSBjb25zaWRlciB0YXJnZXRzIGFjdGl2ZSB0aGF0IGhhdmUgbm8gcGVuZGluZyByZXNwb25zZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlJ0ID0gMCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgZG9jdW1lbnQgY2hhbmdlcyBzaW5jZSB0aGUgbGFzdCByYWlzZWQgc25hcHNob3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZXNlIGNoYW5nZXMgYXJlIGNvbnRpbnVvdXNseSB1cGRhdGVkIGFzIHdlIHJlY2VpdmUgZG9jdW1lbnQgdXBkYXRlcyBhbmRcbiAgICAgICAgICogYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMgYWdhaW5zdCB0aGUgbGFzdCBpc3N1ZWQgc25hcHNob3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJ0ID0gQXMoKSwgXG4gICAgICAgIC8qKiBTZWUgcHVibGljIGdldHRlcnMgZm9yIGV4cGxhbmF0aW9ucyBvZiB0aGVzZSBmaWVsZHMuICovXG4gICAgICAgIHRoaXMuUHQgPSBXdC5FTVBUWV9CWVRFX1NUUklORywgdGhpcy52dCA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyB0YXJnZXQgc3RhdGUgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBuZXh0IHNuYXBzaG90LiBXZVxuICAgICAgICAgKiBpbml0aWFsaXplIHRvIHRydWUgc28gdGhhdCBuZXdseS1hZGRlZCB0YXJnZXRzIGFyZSBpbmNsdWRlZCBpbiB0aGUgbmV4dFxuICAgICAgICAgKiBSZW1vdGVFdmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuVnQgPSAhMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgYmVlbiBtYXJrZWQgJ2N1cnJlbnQnLlxuICAgICAqXG4gICAgICogJ0N1cnJlbnQnIGhhcyBzcGVjaWFsIG1lYW5pbmcgaW4gdGhlIFJQQyBwcm90b2NvbDogSXQgaW1wbGllcyB0aGF0IHRoZVxuICAgICAqIFdhdGNoIGJhY2tlbmQgaGFzIHNlbnQgdXMgYWxsIGNoYW5nZXMgdXAgdG8gdGhlIHBvaW50IGF0IHdoaWNoIHRoZSB0YXJnZXRcbiAgICAgKiB3YXMgYWRkZWQgYW5kIHRoYXQgdGhlIHRhcmdldCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIHdhdGNoXG4gICAgICogc3RyZWFtLlxuICAgICAqLyAgICBnZXQgY3VycmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudnQ7XG4gICAgfVxuICAgIC8qKiBUaGUgbGFzdCByZXN1bWUgdG9rZW4gc2VudCB0byB1cyBmb3IgdGhpcyB0YXJnZXQuICovICAgIGdldCByZXN1bWVUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUHQ7XG4gICAgfVxuICAgIC8qKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IGhhcyBwZW5kaW5nIHRhcmdldCBhZGRzIG9yIHRhcmdldCByZW1vdmVzLiAqLyAgICBnZXQgU3QoKSB7XG4gICAgICAgIHJldHVybiAwICE9PSB0aGlzLlJ0O1xuICAgIH1cbiAgICAvKiogV2hldGhlciB3ZSBoYXZlIG1vZGlmaWVkIGFueSBzdGF0ZSB0aGF0IHNob3VsZCB0cmlnZ2VyIGEgc25hcHNob3QuICovICAgIGdldCBEdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIHJlc3VtZSB0b2tlbiB0byB0aGUgVGFyZ2V0Q2hhbmdlLCBidXQgb25seSB3aGVuIGl0IGhhcyBhIG5ld1xuICAgICAqIHZhbHVlLiBFbXB0eSByZXN1bWVUb2tlbnMgYXJlIGRpc2NhcmRlZC5cbiAgICAgKi8gICAgQ3QodCkge1xuICAgICAgICB0LmFwcHJveGltYXRlQnl0ZVNpemUoKSA+IDAgJiYgKHRoaXMuVnQgPSAhMCwgdGhpcy5QdCA9IHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGFyZ2V0IGNoYW5nZSBmcm9tIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogVG8gcmVzZXQgdGhlIGRvY3VtZW50IGNoYW5nZXMgYWZ0ZXIgcmFpc2luZyB0aGlzIHNuYXBzaG90LCBjYWxsXG4gICAgICogYGNsZWFyUGVuZGluZ0NoYW5nZXMoKWAuXG4gICAgICovICAgIHh0KCkge1xuICAgICAgICBsZXQgdCA9IGZzKCksIGUgPSBmcygpLCBuID0gZnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnQuZm9yRWFjaCgoKHMsIGkpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIHQgPSB0LmFkZChzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogTW9kaWZpZWQgKi8gOlxuICAgICAgICAgICAgICAgIGUgPSBlLmFkZChzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgICAgICAgICAgbiA9IG4uYWRkKHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgTygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIG5ldyBtcyh0aGlzLlB0LCB0aGlzLnZ0LCB0LCBlLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBkb2N1bWVudCBjaGFuZ2VzIGFuZCBzZXRzIGBoYXNQZW5kaW5nQ2hhbmdlc2AgdG8gZmFsc2UuXG4gICAgICovICAgIE50KCkge1xuICAgICAgICB0aGlzLlZ0ID0gITEsIHRoaXMuYnQgPSBBcygpO1xuICAgIH1cbiAgICBrdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuVnQgPSAhMCwgdGhpcy5idCA9IHRoaXMuYnQuaW5zZXJ0KHQsIGUpO1xuICAgIH1cbiAgICBPdCh0KSB7XG4gICAgICAgIHRoaXMuVnQgPSAhMCwgdGhpcy5idCA9IHRoaXMuYnQucmVtb3ZlKHQpO1xuICAgIH1cbiAgICBNdCgpIHtcbiAgICAgICAgdGhpcy5SdCArPSAxO1xuICAgIH1cbiAgICBGdCgpIHtcbiAgICAgICAgdGhpcy5SdCAtPSAxO1xuICAgIH1cbiAgICAkdCgpIHtcbiAgICAgICAgdGhpcy5WdCA9ICEwLCB0aGlzLnZ0ID0gITA7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgaGVscGVyIGNsYXNzIHRvIGFjY3VtdWxhdGUgd2F0Y2ggY2hhbmdlcyBpbnRvIGEgUmVtb3RlRXZlbnQuXG4gKi9cbmNsYXNzIFRzIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuQnQgPSB0LCBcbiAgICAgICAgLyoqIFRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhbGwgdHJhY2tlZCB0YXJnZXRzLiAqL1xuICAgICAgICB0aGlzLkx0ID0gbmV3IE1hcCwgXG4gICAgICAgIC8qKiBLZWVwcyB0cmFjayBvZiB0aGUgZG9jdW1lbnRzIHRvIHVwZGF0ZSBzaW5jZSB0aGUgbGFzdCByYWlzZWQgc25hcHNob3QuICovXG4gICAgICAgIHRoaXMuVXQgPSBzcygpLCBcbiAgICAgICAgLyoqIEEgbWFwcGluZyBvZiBkb2N1bWVudCBrZXlzIHRvIHRoZWlyIHNldCBvZiB0YXJnZXQgSURzLiAqL1xuICAgICAgICB0aGlzLnF0ID0gRXMoKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgdGFyZ2V0cyB3aXRoIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy4gVGhlc2UgdGFyZ2V0cyBhcmVcbiAgICAgICAgICoga25vd24gdG8gYmUgaW5jb25zaXN0ZW50IGFuZCB0aGVpciBsaXN0ZW5zIG5lZWRzIHRvIGJlIHJlLWVzdGFibGlzaGVkIGJ5XG4gICAgICAgICAqIFJlbW90ZVN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LdCA9IG5ldyBxdChaKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGFuZCBhZGRzIHRoZSBEb2N1bWVudFdhdGNoQ2hhbmdlIHRvIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLlxuICAgICAqLyAgICBHdCh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0LlR0KSB0LkV0ICYmIHQuRXQuaXNGb3VuZERvY3VtZW50KCkgPyB0aGlzLlF0KGUsIHQuRXQpIDogdGhpcy5qdChlLCB0LmtleSwgdC5FdCk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0LnJlbW92ZWRUYXJnZXRJZHMpIHRoaXMuanQoZSwgdC5rZXksIHQuRXQpO1xuICAgIH1cbiAgICAvKiogUHJvY2Vzc2VzIGFuZCBhZGRzIHRoZSBXYXRjaFRhcmdldENoYW5nZSB0byB0aGUgY3VycmVudCBzZXQgb2YgY2hhbmdlcy4gKi8gICAgV3QodCkge1xuICAgICAgICB0aGlzLmZvckVhY2hUYXJnZXQodCwgKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuenQoZSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAwIC8qIE5vQ2hhbmdlICovIDpcbiAgICAgICAgICAgICAgICB0aGlzLkh0KGUpICYmIG4uQ3QodC5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxIC8qIEFkZGVkICovIDpcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxuICAgICAgICAgICAgICAgIG4uRnQoKSwgbi5TdCB8fCBcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgZnJlc2hseSBhZGRlZCB0YXJnZXQsIHNvIHdlIG5lZWQgdG8gcmVzZXQgYW55IHN0YXRlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSBoYWQgcHJldmlvdXNseS4gVGhpcyBjYW4gaGFwcGVuIGUuZy4gd2hlbiByZW1vdmUgYW5kIGFkZFxuICAgICAgICAgICAgICAgIC8vIGJhY2sgYSB0YXJnZXQgZm9yIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgICAgICAgICAgICBuLk50KCksIG4uQ3QodC5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiByZW1vdmVkIHRhcmdldHMgdG8gd2UgY2FuIHBvc3QtZmlsdGVyIGFuZFxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbnkgdGFyZ2V0IGNoYW5nZXMuXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBkZWNyZW1lbnQgdGhlIG51bWJlciBvZiBwZW5kaW5nIGFja3MgbmVlZGVkIGZyb20gd2F0Y2hcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhpcyB0YXJnZXRJZC5cbiAgICAgICAgICAgICAgICBuLkZ0KCksIG4uU3QgfHwgdGhpcy5yZW1vdmVUYXJnZXQoZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAzIC8qIEN1cnJlbnQgKi8gOlxuICAgICAgICAgICAgICAgIHRoaXMuSHQoZSkgJiYgKG4uJHQoKSwgbi5DdCh0LnJlc3VtZVRva2VuKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA0IC8qIFJlc2V0ICovIDpcbiAgICAgICAgICAgICAgICB0aGlzLkh0KGUpICYmIChcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdGFyZ2V0IGFuZCBzeW50aGVzaXplcyByZW1vdmVzIGZvciBhbGwgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMuIFRoZSBiYWNrZW5kIHdpbGwgcmUtYWRkIGFueSBkb2N1bWVudHMgdGhhdCBzdGlsbFxuICAgICAgICAgICAgICAgIC8vIG1hdGNoIHRoZSB0YXJnZXQgYmVmb3JlIGl0IHNlbmRzIHRoZSBuZXh0IGdsb2JhbCBzbmFwc2hvdC5cbiAgICAgICAgICAgICAgICB0aGlzLkp0KGUpLCBuLkN0KHQucmVzdW1lVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIE8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGFsbCB0YXJnZXRJZHMgdGhhdCB0aGUgd2F0Y2ggY2hhbmdlIGFwcGxpZXMgdG86IGVpdGhlciB0aGVcbiAgICAgKiB0YXJnZXRJZHMgZXhwbGljaXRseSBsaXN0ZWQgaW4gdGhlIGNoYW5nZSBvciB0aGUgdGFyZ2V0SWRzIG9mIGFsbCBjdXJyZW50bHlcbiAgICAgKiBhY3RpdmUgdGFyZ2V0cy5cbiAgICAgKi8gICAgZm9yRWFjaFRhcmdldCh0LCBlKSB7XG4gICAgICAgIHQudGFyZ2V0SWRzLmxlbmd0aCA+IDAgPyB0LnRhcmdldElkcy5mb3JFYWNoKGUpIDogdGhpcy5MdC5mb3JFYWNoKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgdGhpcy5IdChuKSAmJiBlKG4pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZXhpc3RlbmNlIGZpbHRlcnMgYW5kIHN5bnRoZXNpemVzIGRlbGV0ZXMgZm9yIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAqIFRhcmdldHMgdGhhdCBhcmUgaW52YWxpZGF0ZWQgYnkgZmlsdGVyIG1pc21hdGNoZXMgYXJlIGFkZGVkIHRvXG4gICAgICogYHBlbmRpbmdUYXJnZXRSZXNldHNgLlxuICAgICAqLyAgICBZdCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LnRhcmdldElkLCBuID0gdC5BdC5jb3VudCwgcyA9IHRoaXMuWHQoZSk7XG4gICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gcy50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoT2UodCkpIGlmICgwID09PSBuKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV4aXN0ZW5jZSBmaWx0ZXIgdG9sZCB1cyB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QuIFdlIGRlZHVjZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhpcyBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCBhbmQgYXBwbHkgYSBkZWxldGVkIGRvY3VtZW50IHRvXG4gICAgICAgICAgICAgICAgLy8gb3VyIHVwZGF0ZXMuIFdpdGhvdXQgYXBwbHlpbmcgdGhpcyBkZWxldGVkIGRvY3VtZW50IHRoZXJlIG1pZ2h0IGJlXG4gICAgICAgICAgICAgICAgLy8gYW5vdGhlciBxdWVyeSB0aGF0IHdpbGwgcmFpc2UgdGhpcyBkb2N1bWVudCBhcyBwYXJ0IG9mIGEgc25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyB1bnRpbCBpdCBpcyByZXNvbHZlZCwgZXNzZW50aWFsbHkgZXhwb3NpbmcgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuXG4gICAgICAgICAgICAgICAgLy8gcXVlcmllcy5cbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IGN0KHQucGF0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5qdChlLCBuLCBTZS5uZXdOb0RvY3VtZW50KG4sIHN0Lm1pbigpKSk7XG4gICAgICAgICAgICB9IGVsc2UgTSgxID09PSBuKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5adChlKSAhPT0gbiAmJiAoXG4gICAgICAgICAgICAgICAgLy8gRXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaDogV2UgcmVzZXQgdGhlIG1hcHBpbmcgYW5kIHJhaXNlIGEgbmV3XG4gICAgICAgICAgICAgICAgLy8gc25hcHNob3Qgd2l0aCBgaXNGcm9tQ2FjaGU6dHJ1ZWAuXG4gICAgICAgICAgICAgICAgdGhpcy5KdChlKSwgdGhpcy5LdCA9IHRoaXMuS3QuYWRkKGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY3VycmVudGx5IGFjY3VtdWxhdGVkIHN0YXRlIGludG8gYSByZW1vdGUgZXZlbnQgYXQgdGhlXG4gICAgICogcHJvdmlkZWQgc25hcHNob3QgdmVyc2lvbi4gUmVzZXRzIHRoZSBhY2N1bXVsYXRlZCBjaGFuZ2VzIGJlZm9yZSByZXR1cm5pbmcuXG4gICAgICovICAgIHRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBNYXA7XG4gICAgICAgIHRoaXMuTHQuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLlh0KHMpO1xuICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICBpZiAobi5jdXJyZW50ICYmIE9lKGkudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb2N1bWVudCBxdWVyaWVzIGZvciBkb2N1bWVudCB0aGF0IGRvbid0IGV4aXN0IGNhbiBwcm9kdWNlIGFuIGVtcHR5XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdCBzZXQuIFRvIHVwZGF0ZSBvdXIgbG9jYWwgY2FjaGUsIHdlIHN5bnRoZXNpemUgYSBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgaWYgd2UgaGF2ZSBub3QgcHJldmlvdXNseSByZWNlaXZlZCB0aGUgZG9jdW1lbnQuIFRoaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzb2x2ZXMgdGhlIGxpbWJvIHN0YXRlIG9mIHRoZSBkb2N1bWVudCwgcmVtb3ZpbmcgaXQgZnJvbVxuICAgICAgICAgICAgICAgICAgICAvLyBsaW1ib0RvY3VtZW50UmVmcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBJZGVhbGx5IHdlIHdvdWxkIGhhdmUgYW4gZXhwbGljaXQgbG9va3VwIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkIHJlc3VsdGluZyBpbiBhbiBleHBsaWNpdCBkZWxldGUgbWVzc2FnZSBhbmQgd2UgY291bGRcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoaXMgc3BlY2lhbCBsb2dpYy5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBjdChpLnRhcmdldC5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdGhpcy5VdC5nZXQoZSkgfHwgdGhpcy5lZShzLCBlKSB8fCB0aGlzLmp0KHMsIGUsIFNlLm5ld05vRG9jdW1lbnQoZSwgdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuLkR0ICYmIChlLnNldChzLCBuLnh0KCkpLCBuLk50KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIGxldCBuID0gZnMoKTtcbiAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2V0IG9mIGxpbWJvLW9ubHkgZG9jdW1lbnQgdXBkYXRlcyBhcyB0aGUgR0MgbG9naWNcbiAgICAgICAgLy8gc3BlY2lhbC1jYXNlcyBkb2N1bWVudHMgdGhhdCBkbyBub3QgYXBwZWFyIGluIHRoZSB0YXJnZXQgY2FjaGUuXG4gICAgICAgIFxuICAgICAgICAvLyBUT0RPKGdzb2x0aXMpOiBFeHBhbmQgb24gdGhpcyBjb21tZW50IG9uY2UgR0MgaXMgYXZhaWxhYmxlIGluIHRoZSBKU1xuICAgICAgICAvLyBjbGllbnQuXG4gICAgICAgICAgICAgICAgdGhpcy5xdC5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHMgPSAhMDtcbiAgICAgICAgICAgIGUuZm9yRWFjaFdoaWxlKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5YdCh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWUgfHwgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gPT09IGUucHVycG9zZSB8fCAocyA9ICExLCAhMSk7XG4gICAgICAgICAgICB9KSksIHMgJiYgKG4gPSBuLmFkZCh0KSk7XG4gICAgICAgIH0pKSwgdGhpcy5VdC5mb3JFYWNoKCgoZSwgbikgPT4gbi5zZXRSZWFkVGltZSh0KSkpO1xuICAgICAgICBjb25zdCBzID0gbmV3IHdzKHQsIGUsIHRoaXMuS3QsIHRoaXMuVXQsIG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5VdCA9IHNzKCksIHRoaXMucXQgPSBFcygpLCB0aGlzLkt0ID0gbmV3IHF0KFopLCBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBwcm92aWRlZCBkb2N1bWVudCB0byB0aGUgaW50ZXJuYWwgbGlzdCBvZiBkb2N1bWVudCB1cGRhdGVzIGFuZFxuICAgICAqIGl0cyBkb2N1bWVudCBrZXkgdG8gdGhlIGdpdmVuIHRhcmdldCdzIG1hcHBpbmcuXG4gICAgICovXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICBRdCh0LCBlKSB7XG4gICAgICAgIGlmICghdGhpcy5IdCh0KSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5lZSh0LCBlLmtleSkgPyAyIC8qIE1vZGlmaWVkICovIDogMCAvKiBBZGRlZCAqLztcbiAgICAgICAgdGhpcy56dCh0KS5rdChlLmtleSwgbiksIHRoaXMuVXQgPSB0aGlzLlV0Lmluc2VydChlLmtleSwgZSksIHRoaXMucXQgPSB0aGlzLnF0Lmluc2VydChlLmtleSwgdGhpcy5uZShlLmtleSkuYWRkKHQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgZnJvbSB0aGUgdGFyZ2V0IG1hcHBpbmcuIElmIHRoZVxuICAgICAqIGRvY3VtZW50IG5vIGxvbmdlciBtYXRjaGVzIHRoZSB0YXJnZXQsIGJ1dCB0aGUgZG9jdW1lbnQncyBzdGF0ZSBpcyBzdGlsbFxuICAgICAqIGtub3duIChlLmcuIHdlIGtub3cgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIGRlbGV0ZWQgb3Igd2UgcmVjZWl2ZWQgdGhlIGNoYW5nZVxuICAgICAqIHRoYXQgY2F1c2VkIHRoZSBmaWx0ZXIgbWlzbWF0Y2gpLCB0aGUgbmV3IGRvY3VtZW50IGNhbiBiZSBwcm92aWRlZFxuICAgICAqIHRvIHVwZGF0ZSB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLlxuICAgICAqL1xuICAgIC8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAganQodCwgZSwgbikge1xuICAgICAgICBpZiAoIXRoaXMuSHQodCkpIHJldHVybjtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuenQodCk7XG4gICAgICAgIHRoaXMuZWUodCwgZSkgPyBzLmt0KGUsIDEgLyogUmVtb3ZlZCAqLykgOiBcbiAgICAgICAgLy8gVGhlIGRvY3VtZW50IG1heSBoYXZlIGVudGVyZWQgYW5kIGxlZnQgdGhlIHRhcmdldCBiZWZvcmUgd2UgcmFpc2VkIGFcbiAgICAgICAgLy8gc25hcHNob3QsIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgY2hhbmdlLlxuICAgICAgICBzLk90KGUpLCB0aGlzLnF0ID0gdGhpcy5xdC5pbnNlcnQoZSwgdGhpcy5uZShlKS5kZWxldGUodCkpLCBuICYmICh0aGlzLlV0ID0gdGhpcy5VdC5pbnNlcnQoZSwgbikpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQodCkge1xuICAgICAgICB0aGlzLkx0LmRlbGV0ZSh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBjb3VudCBvZiBkb2N1bWVudHMgaW4gdGhlIHRhcmdldC4gVGhpcyBpbmNsdWRlcyBib3RoXG4gICAgICogdGhlIG51bWJlciBvZiBkb2N1bWVudHMgdGhhdCB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdG8gYmUgcGFydCBvZiB0aGVcbiAgICAgKiB0YXJnZXQgYXMgd2VsbCBhcyBhbnkgYWNjdW11bGF0ZWQgY2hhbmdlcy5cbiAgICAgKi8gICAgWnQodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy56dCh0KS54dCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5CdC5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHQpLnNpemUgKyBlLmFkZGVkRG9jdW1lbnRzLnNpemUgLSBlLnJlbW92ZWREb2N1bWVudHMuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBudW1iZXIgb2YgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaCBiZWZvcmUgd2UgY2FuIGNvbnNpZGVyIHRoZVxuICAgICAqIHNlcnZlciB0byBiZSAnaW4tc3luYycgd2l0aCB0aGUgY2xpZW50J3MgYWN0aXZlIHRhcmdldHMuXG4gICAgICovICAgIE10KHQpIHtcbiAgICAgICAgdGhpcy56dCh0KS5NdCgpO1xuICAgIH1cbiAgICB6dCh0KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5MdC5nZXQodCk7XG4gICAgICAgIHJldHVybiBlIHx8IChlID0gbmV3IElzLCB0aGlzLkx0LnNldCh0LCBlKSksIGU7XG4gICAgfVxuICAgIG5lKHQpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzLnF0LmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgcXQoWiksIHRoaXMucXQgPSB0aGlzLnF0Lmluc2VydCh0LCBlKSksIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIHVzZXIgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldCAoYnkgY2FsbGluZ1xuICAgICAqIGBnZXRUYXJnZXREYXRhRm9yVGFyZ2V0KClgKSBhbmQgdGhhdCB3ZSBhcmUgbm90IHdhaXRpbmcgZm9yIHBlbmRpbmcgQUREc1xuICAgICAqIGZyb20gd2F0Y2guXG4gICAgICovICAgIEh0KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG51bGwgIT09IHRoaXMuWHQodCk7XG4gICAgICAgIHJldHVybiBlIHx8IEMoXCJXYXRjaENoYW5nZUFnZ3JlZ2F0b3JcIiwgXCJEZXRlY3RlZCBpbmFjdGl2ZSB0YXJnZXRcIiwgdCksIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFRhcmdldERhdGEgZm9yIGFuIGFjdGl2ZSB0YXJnZXQgKGkuZS4gYSB0YXJnZXQgdGhhdCB0aGUgdXNlclxuICAgICAqIGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhhdCBoYXMgbm8gb3V0c3RhbmRpbmcgdGFyZ2V0IGNoYW5nZSByZXF1ZXN0cykuXG4gICAgICovICAgIFh0KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuTHQuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSAmJiBlLlN0ID8gbnVsbCA6IHRoaXMuQnQuc2UodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgc3RhdGUgb2YgYSBXYXRjaCB0YXJnZXQgdG8gaXRzIGluaXRpYWwgc3RhdGUgKGUuZy4gc2V0c1xuICAgICAqICdjdXJyZW50JyB0byBmYWxzZSwgY2xlYXJzIHRoZSByZXN1bWUgdG9rZW4gYW5kIHJlbW92ZXMgaXRzIHRhcmdldCBtYXBwaW5nXG4gICAgICogZnJvbSBhbGwgZG9jdW1lbnRzKS5cbiAgICAgKi8gICAgSnQodCkge1xuICAgICAgICB0aGlzLkx0LnNldCh0LCBuZXcgSXMpO1xuICAgICAgICB0aGlzLkJ0LmdldFJlbW90ZUtleXNGb3JUYXJnZXQodCkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmp0KHQsIGUsIC8qdXBkYXRlZERvY3VtZW50PSovIG51bGwpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdGhlIGRvY3VtZW50IHRvIGJlIHBhcnQgb2YgdGhlXG4gICAgICogc3BlY2lmaWVkIHRhcmdldC5cbiAgICAgKi8gICAgZWUodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5CdC5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHQpLmhhcyhlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEVzKCkge1xuICAgIHJldHVybiBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG59XG5cbmZ1bmN0aW9uIEFzKCkge1xuICAgIHJldHVybiBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IFJzID0gKCgpID0+IHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgICBhc2M6IFwiQVNDRU5ESU5HXCIsXG4gICAgICAgIGRlc2M6IFwiREVTQ0VORElOR1wiXG4gICAgfTtcbiAgICByZXR1cm4gdDtcbn0pKCksIGJzID0gKCgpID0+IHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgICBcIjxcIjogXCJMRVNTX1RIQU5cIixcbiAgICAgICAgXCI8PVwiOiBcIkxFU1NfVEhBTl9PUl9FUVVBTFwiLFxuICAgICAgICBcIj5cIjogXCJHUkVBVEVSX1RIQU5cIixcbiAgICAgICAgXCI+PVwiOiBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFwiLFxuICAgICAgICBcIj09XCI6IFwiRVFVQUxcIixcbiAgICAgICAgXCIhPVwiOiBcIk5PVF9FUVVBTFwiLFxuICAgICAgICBcImFycmF5LWNvbnRhaW5zXCI6IFwiQVJSQVlfQ09OVEFJTlNcIixcbiAgICAgICAgaW46IFwiSU5cIixcbiAgICAgICAgXCJub3QtaW5cIjogXCJOT1RfSU5cIixcbiAgICAgICAgXCJhcnJheS1jb250YWlucy1hbnlcIjogXCJBUlJBWV9DT05UQUlOU19BTllcIlxuICAgIH07XG4gICAgcmV0dXJuIHQ7XG59KSgpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIEpzb25PYmplY3QgdmFsdWVzIGZvciB0aGUgRGF0YXN0b3JlIEFQSSBzdWl0YWJsZSBmb3JcbiAqIHNlbmRpbmcgdG8gZWl0aGVyIEdSUEMgc3R1YiBtZXRob2RzIG9yIHZpYSB0aGUgSlNPTi9IVFRQIFJFU1QgQVBJLlxuICpcbiAqIFRoZSBzZXJpYWxpemVyIHN1cHBvcnRzIGJvdGggUHJvdG9idWYuanMgYW5kIFByb3RvMyBKU09OIGZvcm1hdHMuIEJ5XG4gKiBzZXR0aW5nIGB1c2VQcm90bzNKc29uYCB0byB0cnVlLCB0aGUgc2VyaWFsaXplciB3aWxsIHVzZSB0aGUgUHJvdG8zIEpTT05cbiAqIGZvcm1hdC5cbiAqXG4gKiBGb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgUHJvdG8zIEpTT04gZm9ybWF0IGNoZWNrXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zI2pzb25cbiAqXG4gKiBUT0RPKGtsaW10KTogV2UgY2FuIHJlbW92ZSB0aGUgZGF0YWJhc2VJZCBhcmd1bWVudCBpZiB3ZSBrZWVwIHRoZSBmdWxsXG4gKiByZXNvdXJjZSBuYW1lIGluIGRvY3VtZW50cy5cbiAqL1xuY2xhc3MgUHMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gdCwgdGhpcy5ndCA9IGU7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBEYXRlIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW50byBhIHByb3RvLlxuICovXG5mdW5jdGlvbiB2cyh0LCBlKSB7XG4gICAgaWYgKHQuZ3QpIHtcbiAgICAgICAgcmV0dXJuIGAke25ldyBEYXRlKDFlMyAqIGUuc2Vjb25kcykudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqLywgXCJcIikucmVwbGFjZShcIlpcIiwgXCJcIil9LiR7KFwiMDAwMDAwMDAwXCIgKyBlLm5hbm9zZWNvbmRzKS5zbGljZSgtOSl9WmA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IFwiXCIgKyBlLnNlY29uZHMsXG4gICAgICAgIG5hbm9zOiBlLm5hbm9zZWNvbmRzXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGJ5dGVzIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW4gYSBwcm90by5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5mdW5jdGlvbiBWcyh0LCBlKSB7XG4gICAgcmV0dXJuIHQuZ3QgPyBlLnRvQmFzZTY0KCkgOiBlLnRvVWludDhBcnJheSgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBCeXRlU3RyaW5nIGJhc2VkIG9uIHRoZSBwcm90byBzdHJpbmcgdmFsdWUuXG4gKi8gZnVuY3Rpb24gU3ModCwgZSkge1xuICAgIHJldHVybiB2cyh0LCBlLnRvVGltZXN0YW1wKCkpO1xufVxuXG5mdW5jdGlvbiBEcyh0KSB7XG4gICAgcmV0dXJuIE0oISF0KSwgc3QuZnJvbVRpbWVzdGFtcChmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBIdCh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBudChlLnNlY29uZHMsIGUubmFub3MpO1xuICAgIH0odCkpO1xufVxuXG5mdW5jdGlvbiBDcyh0LCBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBydChbIFwicHJvamVjdHNcIiwgdC5wcm9qZWN0SWQsIFwiZGF0YWJhc2VzXCIsIHQuZGF0YWJhc2UgXSk7XG4gICAgfSh0KS5jaGlsZChcImRvY3VtZW50c1wiKS5jaGlsZChlKS5jYW5vbmljYWxTdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24geHModCkge1xuICAgIGNvbnN0IGUgPSBydC5mcm9tU3RyaW5nKHQpO1xuICAgIHJldHVybiBNKGlpKGUpKSwgZTtcbn1cblxuZnVuY3Rpb24gTnModCwgZSkge1xuICAgIHJldHVybiBDcyh0LmRhdGFiYXNlSWQsIGUucGF0aCk7XG59XG5cbmZ1bmN0aW9uIGtzKHQsIGUpIHtcbiAgICBjb25zdCBuID0geHMoZSk7XG4gICAgaWYgKG4uZ2V0KDEpICE9PSB0LmRhdGFiYXNlSWQucHJvamVjdElkKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiVHJpZWQgdG8gZGVzZXJpYWxpemUga2V5IGZyb20gZGlmZmVyZW50IHByb2plY3Q6IFwiICsgbi5nZXQoMSkgKyBcIiB2cyBcIiArIHQuZGF0YWJhc2VJZC5wcm9qZWN0SWQpO1xuICAgIGlmIChuLmdldCgzKSAhPT0gdC5kYXRhYmFzZUlkLmRhdGFiYXNlKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiVHJpZWQgdG8gZGVzZXJpYWxpemUga2V5IGZyb20gZGlmZmVyZW50IGRhdGFiYXNlOiBcIiArIG4uZ2V0KDMpICsgXCIgdnMgXCIgKyB0LmRhdGFiYXNlSWQuZGF0YWJhc2UpO1xuICAgIHJldHVybiBuZXcgY3QoJHMobikpO1xufVxuXG5mdW5jdGlvbiBPcyh0LCBlKSB7XG4gICAgcmV0dXJuIENzKHQuZGF0YWJhc2VJZCwgZSk7XG59XG5cbmZ1bmN0aW9uIE1zKHQpIHtcbiAgICBjb25zdCBlID0geHModCk7XG4gICAgLy8gSW4gdjFiZXRhMSBxdWVyaWVzIGZvciBjb2xsZWN0aW9ucyBhdCB0aGUgcm9vdCBkaWQgbm90IGhhdmUgYSB0cmFpbGluZ1xuICAgIC8vIFwiL2RvY3VtZW50c1wiLiBJbiB2MSBhbGwgcmVzb3VyY2UgcGF0aHMgY29udGFpbiBcIi9kb2N1bWVudHNcIi4gUHJlc2VydmUgdGhlXG4gICAgLy8gYWJpbGl0eSB0byByZWFkIHRoZSB2MWJldGExIGZvcm0gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBxdWVyaWVzIHBlcnNpc3RlZFxuICAgIC8vIGluIHRoZSBsb2NhbCB0YXJnZXQgY2FjaGUuXG4gICAgICAgIHJldHVybiA0ID09PSBlLmxlbmd0aCA/IHJ0LmVtcHR5UGF0aCgpIDogJHMoZSk7XG59XG5cbmZ1bmN0aW9uIEZzKHQpIHtcbiAgICByZXR1cm4gbmV3IHJ0KFsgXCJwcm9qZWN0c1wiLCB0LmRhdGFiYXNlSWQucHJvamVjdElkLCBcImRhdGFiYXNlc1wiLCB0LmRhdGFiYXNlSWQuZGF0YWJhc2UgXSkuY2Fub25pY2FsU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uICRzKHQpIHtcbiAgICByZXR1cm4gTSh0Lmxlbmd0aCA+IDQgJiYgXCJkb2N1bWVudHNcIiA9PT0gdC5nZXQoNCkpLCB0LnBvcEZpcnN0KDUpO1xufVxuXG4vKiogQ3JlYXRlcyBhIERvY3VtZW50IHByb3RvIGZyb20ga2V5IGFuZCBmaWVsZHMgKGJ1dCBubyBjcmVhdGUvdXBkYXRlIHRpbWUpICovIGZ1bmN0aW9uIEJzKHQsIGUsIG4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBOcyh0LCBlKSxcbiAgICAgICAgZmllbGRzOiBuLnZhbHVlLm1hcFZhbHVlLmZpZWxkc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIExzKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0ga3ModCwgZS5uYW1lKSwgaSA9IERzKGUudXBkYXRlVGltZSksIHIgPSBuZXcgdmUoe1xuICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgZmllbGRzOiBlLmZpZWxkc1xuICAgICAgICB9XG4gICAgfSksIG8gPSBTZS5uZXdGb3VuZERvY3VtZW50KHMsIGksIHIpO1xuICAgIHJldHVybiBuICYmIG8uc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCksIG4gPyBvLnNldEhhc0NvbW1pdHRlZE11dGF0aW9ucygpIDogbztcbn1cblxuZnVuY3Rpb24gVXModCwgZSkge1xuICAgIHJldHVybiBcImZvdW5kXCIgaW4gZSA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgTSghIWUuZm91bmQpLCBlLmZvdW5kLm5hbWUsIGUuZm91bmQudXBkYXRlVGltZTtcbiAgICAgICAgY29uc3QgbiA9IGtzKHQsIGUuZm91bmQubmFtZSksIHMgPSBEcyhlLmZvdW5kLnVwZGF0ZVRpbWUpLCBpID0gbmV3IHZlKHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiBlLmZvdW5kLmZpZWxkc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFNlLm5ld0ZvdW5kRG9jdW1lbnQobiwgcywgaSk7XG4gICAgfSh0LCBlKSA6IFwibWlzc2luZ1wiIGluIGUgPyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIE0oISFlLm1pc3NpbmcpLCBNKCEhZS5yZWFkVGltZSk7XG4gICAgICAgIGNvbnN0IG4gPSBrcyh0LCBlLm1pc3NpbmcpLCBzID0gRHMoZS5yZWFkVGltZSk7XG4gICAgICAgIHJldHVybiBTZS5uZXdOb0RvY3VtZW50KG4sIHMpO1xuICAgIH0odCwgZSkgOiBPKCk7XG59XG5cbmZ1bmN0aW9uIHFzKHQsIGUpIHtcbiAgICBsZXQgbjtcbiAgICBpZiAoXCJ0YXJnZXRDaGFuZ2VcIiBpbiBlKSB7XG4gICAgICAgIGUudGFyZ2V0Q2hhbmdlO1xuICAgICAgICAvLyBwcm90bzMgZGVmYXVsdCB2YWx1ZSBpcyB1bnNldCBpbiBKU09OICh1bmRlZmluZWQpLCBzbyB1c2UgJ05PX0NIQU5HRSdcbiAgICAgICAgLy8gaWYgdW5zZXRcbiAgICAgICAgY29uc3QgcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIk5PX0NIQU5HRVwiID09PSB0ID8gMCAvKiBOb0NoYW5nZSAqLyA6IFwiQUREXCIgPT09IHQgPyAxIC8qIEFkZGVkICovIDogXCJSRU1PVkVcIiA9PT0gdCA/IDIgLyogUmVtb3ZlZCAqLyA6IFwiQ1VSUkVOVFwiID09PSB0ID8gMyAvKiBDdXJyZW50ICovIDogXCJSRVNFVFwiID09PSB0ID8gNCAvKiBSZXNldCAqLyA6IE8oKTtcbiAgICAgICAgfShlLnRhcmdldENoYW5nZS50YXJnZXRDaGFuZ2VUeXBlIHx8IFwiTk9fQ0hBTkdFXCIpLCBpID0gZS50YXJnZXRDaGFuZ2UudGFyZ2V0SWRzIHx8IFtdLCByID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZ3QgPyAoTSh2b2lkIDAgPT09IGUgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSksIFd0LmZyb21CYXNlNjRTdHJpbmcoZSB8fCBcIlwiKSkgOiAoTSh2b2lkIDAgPT09IGUgfHwgZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpLCBcbiAgICAgICAgICAgIFd0LmZyb21VaW50OEFycmF5KGUgfHwgbmV3IFVpbnQ4QXJyYXkpKTtcbiAgICAgICAgfSh0LCBlLnRhcmdldENoYW5nZS5yZXN1bWVUb2tlbiksIG8gPSBlLnRhcmdldENoYW5nZS5jYXVzZSwgdSA9IG8gJiYgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHZvaWQgMCA9PT0gdC5jb2RlID8gQi5VTktOT1dOIDogdHModC5jb2RlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTChlLCB0Lm1lc3NhZ2UgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgbnVtYmVyIChvciBudWxsKSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG9cbiAqIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXG4gKiBETyBOT1QgVVNFIFRISVMgRk9SIEFOWVRISU5HIEVMU0UuXG4gKiBUaGlzIG1ldGhvZCBjaGVhdHMuIEl0J3MgdHlwZWQgYXMgcmV0dXJuaW5nIFwibnVtYmVyXCIgYmVjYXVzZSB0aGF0J3Mgd2hhdFxuICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUuIEJ1dCBHUlBDIGFjdHVhbGx5XG4gKiBleHBlY3RzIGEgeyB2YWx1ZTogPG51bWJlcj4gfSBzdHJ1Y3QuXG4gKi8gKG8pO1xuICAgICAgICBuID0gbmV3IHBzKHMsIGksIHIsIHUgfHwgbnVsbCk7XG4gICAgfSBlbHNlIGlmIChcImRvY3VtZW50Q2hhbmdlXCIgaW4gZSkge1xuICAgICAgICBlLmRvY3VtZW50Q2hhbmdlO1xuICAgICAgICBjb25zdCBzID0gZS5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgcy5kb2N1bWVudCwgcy5kb2N1bWVudC5uYW1lLCBzLmRvY3VtZW50LnVwZGF0ZVRpbWU7XG4gICAgICAgIGNvbnN0IGkgPSBrcyh0LCBzLmRvY3VtZW50Lm5hbWUpLCByID0gRHMocy5kb2N1bWVudC51cGRhdGVUaW1lKSwgbyA9IG5ldyB2ZSh7XG4gICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgIGZpZWxkczogcy5kb2N1bWVudC5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHUgPSBTZS5uZXdGb3VuZERvY3VtZW50KGksIHIsIG8pLCBjID0gcy50YXJnZXRJZHMgfHwgW10sIGEgPSBzLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgIG4gPSBuZXcgZ3MoYywgYSwgdS5rZXksIHUpO1xuICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudERlbGV0ZVwiIGluIGUpIHtcbiAgICAgICAgZS5kb2N1bWVudERlbGV0ZTtcbiAgICAgICAgY29uc3QgcyA9IGUuZG9jdW1lbnREZWxldGU7XG4gICAgICAgIHMuZG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IGkgPSBrcyh0LCBzLmRvY3VtZW50KSwgciA9IHMucmVhZFRpbWUgPyBEcyhzLnJlYWRUaW1lKSA6IHN0Lm1pbigpLCBvID0gU2UubmV3Tm9Eb2N1bWVudChpLCByKSwgdSA9IHMucmVtb3ZlZFRhcmdldElkcyB8fCBbXTtcbiAgICAgICAgbiA9IG5ldyBncyhbXSwgdSwgby5rZXksIG8pO1xuICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudFJlbW92ZVwiIGluIGUpIHtcbiAgICAgICAgZS5kb2N1bWVudFJlbW92ZTtcbiAgICAgICAgY29uc3QgcyA9IGUuZG9jdW1lbnRSZW1vdmU7XG4gICAgICAgIHMuZG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IGkgPSBrcyh0LCBzLmRvY3VtZW50KSwgciA9IHMucmVtb3ZlZFRhcmdldElkcyB8fCBbXTtcbiAgICAgICAgbiA9IG5ldyBncyhbXSwgciwgaSwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCEoXCJmaWx0ZXJcIiBpbiBlKSkgcmV0dXJuIE8oKTtcbiAgICAgICAge1xuICAgICAgICAgICAgZS5maWx0ZXI7XG4gICAgICAgICAgICBjb25zdCB0ID0gZS5maWx0ZXI7XG4gICAgICAgICAgICB0LnRhcmdldElkO1xuICAgICAgICAgICAgY29uc3QgcyA9IHQuY291bnQgfHwgMCwgaSA9IG5ldyBKbihzKSwgciA9IHQudGFyZ2V0SWQ7XG4gICAgICAgICAgICBuID0gbmV3IHlzKHIsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBLcyh0LCBlKSB7XG4gICAgbGV0IG47XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBLbikgbiA9IHtcbiAgICAgICAgdXBkYXRlOiBCcyh0LCBlLmtleSwgZS52YWx1ZSlcbiAgICB9OyBlbHNlIGlmIChlIGluc3RhbmNlb2Ygem4pIG4gPSB7XG4gICAgICAgIGRlbGV0ZTogTnModCwgZS5rZXkpXG4gICAgfTsgZWxzZSBpZiAoZSBpbnN0YW5jZW9mIEduKSBuID0ge1xuICAgICAgICB1cGRhdGU6IEJzKHQsIGUua2V5LCBlLmRhdGEpLFxuICAgICAgICB1cGRhdGVNYXNrOiBzaShlLmZpZWxkTWFzaylcbiAgICB9OyBlbHNlIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIEhuKSkgcmV0dXJuIE8oKTtcbiAgICAgICAgbiA9IHtcbiAgICAgICAgICAgIHZlcmlmeTogTnModCwgZS5rZXkpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBlLmZpZWxkVHJhbnNmb3Jtcy5sZW5ndGggPiAwICYmIChuLnVwZGF0ZVRyYW5zZm9ybXMgPSBlLmZpZWxkVHJhbnNmb3Jtcy5tYXAoKHQgPT4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZS50cmFuc2Zvcm07XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgUm4pIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICBzZXRUb1NlcnZlclZhbHVlOiBcIlJFUVVFU1RfVElNRVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgYm4pIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICBhcHBlbmRNaXNzaW5nRWxlbWVudHM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IG4uZWxlbWVudHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiB2bikgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkUGF0aDogZS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSxcbiAgICAgICAgICAgIHJlbW92ZUFsbEZyb21BcnJheToge1xuICAgICAgICAgICAgICAgIHZhbHVlczogbi5lbGVtZW50c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIFNuKSByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGRQYXRoOiBlLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpLFxuICAgICAgICAgICAgaW5jcmVtZW50OiBuLnl0XG4gICAgICAgIH07XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9KDAsIHQpKSkpLCBlLnByZWNvbmRpdGlvbi5pc05vbmUgfHwgKG4uY3VycmVudERvY3VtZW50ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBlLnVwZGF0ZVRpbWUgPyB7XG4gICAgICAgICAgICB1cGRhdGVUaW1lOiBTcyh0LCBlLnVwZGF0ZVRpbWUpXG4gICAgICAgIH0gOiB2b2lkIDAgIT09IGUuZXhpc3RzID8ge1xuICAgICAgICAgICAgZXhpc3RzOiBlLmV4aXN0c1xuICAgICAgICB9IDogTygpO1xuICAgIH0odCwgZS5wcmVjb25kaXRpb24pKSwgbjtcbn1cblxuZnVuY3Rpb24gR3ModCwgZSkge1xuICAgIGNvbnN0IG4gPSBlLmN1cnJlbnREb2N1bWVudCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdC51cGRhdGVUaW1lID8gT24udXBkYXRlVGltZShEcyh0LnVwZGF0ZVRpbWUpKSA6IHZvaWQgMCAhPT0gdC5leGlzdHMgPyBPbi5leGlzdHModC5leGlzdHMpIDogT24ubm9uZSgpO1xuICAgIH0oZS5jdXJyZW50RG9jdW1lbnQpIDogT24ubm9uZSgpLCBzID0gZS51cGRhdGVUcmFuc2Zvcm1zID8gZS51cGRhdGVUcmFuc2Zvcm1zLm1hcCgoZSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGxldCBuID0gbnVsbDtcbiAgICAgICAgaWYgKFwic2V0VG9TZXJ2ZXJWYWx1ZVwiIGluIGUpIE0oXCJSRVFVRVNUX1RJTUVcIiA9PT0gZS5zZXRUb1NlcnZlclZhbHVlKSwgbiA9IG5ldyBSbjsgZWxzZSBpZiAoXCJhcHBlbmRNaXNzaW5nRWxlbWVudHNcIiBpbiBlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZS5hcHBlbmRNaXNzaW5nRWxlbWVudHMudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgbiA9IG5ldyBibih0KTtcbiAgICAgICAgfSBlbHNlIGlmIChcInJlbW92ZUFsbEZyb21BcnJheVwiIGluIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLnJlbW92ZUFsbEZyb21BcnJheS52YWx1ZXMgfHwgW107XG4gICAgICAgICAgICBuID0gbmV3IHZuKHQpO1xuICAgICAgICB9IGVsc2UgXCJpbmNyZW1lbnRcIiBpbiBlID8gbiA9IG5ldyBTbih0LCBlLmluY3JlbWVudCkgOiBPKCk7XG4gICAgICAgIGNvbnN0IHMgPSB1dC5mcm9tU2VydmVyRm9ybWF0KGUuZmllbGRQYXRoKTtcbiAgICAgICAgcmV0dXJuIG5ldyB4bihzLCBuKTtcbiAgICB9KHQsIGUpKSkgOiBbXTtcbiAgICBpZiAoZS51cGRhdGUpIHtcbiAgICAgICAgZS51cGRhdGUubmFtZTtcbiAgICAgICAgY29uc3QgaSA9IGtzKHQsIGUudXBkYXRlLm5hbWUpLCByID0gbmV3IHZlKHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiBlLnVwZGF0ZS5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlLnVwZGF0ZU1hc2spIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZmllbGRQYXRocyB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFF0KGUubWFwKCh0ID0+IHV0LmZyb21TZXJ2ZXJGb3JtYXQodCkpKSk7XG4gICAgICAgICAgICB9KGUudXBkYXRlTWFzayk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEduKGksIHIsIHQsIG4sIHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgS24oaSwgciwgbiwgcyk7XG4gICAgfVxuICAgIGlmIChlLmRlbGV0ZSkge1xuICAgICAgICBjb25zdCBzID0ga3ModCwgZS5kZWxldGUpO1xuICAgICAgICByZXR1cm4gbmV3IHpuKHMsIG4pO1xuICAgIH1cbiAgICBpZiAoZS52ZXJpZnkpIHtcbiAgICAgICAgY29uc3QgcyA9IGtzKHQsIGUudmVyaWZ5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBIbihzLCBuKTtcbiAgICB9XG4gICAgcmV0dXJuIE8oKTtcbn1cblxuZnVuY3Rpb24gUXModCwgZSkge1xuICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID4gMCA/IChNKHZvaWQgMCAhPT0gZSksIHQubWFwKCh0ID0+IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gTk9URTogRGVsZXRlcyBkb24ndCBoYXZlIGFuIHVwZGF0ZVRpbWUuXG4gICAgICAgIGxldCBuID0gdC51cGRhdGVUaW1lID8gRHModC51cGRhdGVUaW1lKSA6IERzKGUpO1xuICAgICAgICByZXR1cm4gbi5pc0VxdWFsKHN0Lm1pbigpKSAmJiAoXG4gICAgICAgIC8vIFRoZSBGaXJlc3RvcmUgRW11bGF0b3IgY3VycmVudGx5IHJldHVybnMgYW4gdXBkYXRlIHRpbWUgb2YgMCBmb3JcbiAgICAgICAgLy8gZGVsZXRlcyBvZiBub24tZXhpc3RpbmcgZG9jdW1lbnRzIChyYXRoZXIgdGhhbiBudWxsKS4gVGhpcyBicmVha3MgdGhlXG4gICAgICAgIC8vIHRlc3QgXCJnZXQgZGVsZXRlZCBkb2Mgd2hpbGUgb2ZmbGluZSB3aXRoIHNvdXJjZT1jYWNoZVwiIGFzIE5vRG9jdW1lbnRzXG4gICAgICAgIC8vIHdpdGggdmVyc2lvbiAwIGFyZSBmaWx0ZXJlZCBieSBJbmRleGVkRGIncyBSZW1vdGVEb2N1bWVudENhY2hlLlxuICAgICAgICAvLyBUT0RPKCMyMTQ5KTogUmVtb3ZlIHRoaXMgd2hlbiBFbXVsYXRvciBpcyBmaXhlZFxuICAgICAgICBuID0gRHMoZSkpLCBuZXcga24obiwgdC50cmFuc2Zvcm1SZXN1bHRzIHx8IFtdKTtcbiAgICB9KHQsIGUpKSkpIDogW107XG59XG5cbmZ1bmN0aW9uIGpzKHQsIGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkb2N1bWVudHM6IFsgT3ModCwgZS5wYXRoKSBdXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gV3ModCwgZSkge1xuICAgIC8vIERpc3NlY3QgdGhlIHBhdGggaW50byBwYXJlbnQsIGNvbGxlY3Rpb25JZCwgYW5kIG9wdGlvbmFsIGtleSBmaWx0ZXIuXG4gICAgY29uc3QgbiA9IHtcbiAgICAgICAgc3RydWN0dXJlZFF1ZXJ5OiB7fVxuICAgIH0sIHMgPSBlLnBhdGg7XG4gICAgbnVsbCAhPT0gZS5jb2xsZWN0aW9uR3JvdXAgPyAobi5wYXJlbnQgPSBPcyh0LCBzKSwgbi5zdHJ1Y3R1cmVkUXVlcnkuZnJvbSA9IFsge1xuICAgICAgICBjb2xsZWN0aW9uSWQ6IGUuY29sbGVjdGlvbkdyb3VwLFxuICAgICAgICBhbGxEZXNjZW5kYW50czogITBcbiAgICB9IF0pIDogKG4ucGFyZW50ID0gT3ModCwgcy5wb3BMYXN0KCkpLCBuLnN0cnVjdHVyZWRRdWVyeS5mcm9tID0gWyB7XG4gICAgICAgIGNvbGxlY3Rpb25JZDogcy5sYXN0U2VnbWVudCgpXG4gICAgfSBdKTtcbiAgICBjb25zdCBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoMCA9PT0gdC5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgZSA9IHQubWFwKCh0ID0+IFxuICAgICAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmIChcIj09XCIgLyogRVFVQUwgKi8gPT09IHQub3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocGUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogWnModC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OQU5cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoeWUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogWnModC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OVUxMXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiIT1cIiAvKiBOT1RfRVFVQUwgKi8gPT09IHQub3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocGUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogWnModC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OT1RfTkFOXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHllKHQudmFsdWUpKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1bmFyeUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFpzKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3A6IFwiSVNfTk9UX05VTExcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmllbGRGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFpzKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICBvcDogWHModC5vcCksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0KSkpO1xuICAgICAgICBpZiAoMSA9PT0gZS5sZW5ndGgpIHJldHVybiBlWzBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcG9zaXRlRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgb3A6IFwiQU5EXCIsXG4gICAgICAgICAgICAgICAgZmlsdGVyczogZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0oZS5maWx0ZXJzKTtcbiAgICBpICYmIChuLnN0cnVjdHVyZWRRdWVyeS53aGVyZSA9IGkpO1xuICAgIGNvbnN0IHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICgwID09PSB0Lmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gdC5tYXAoKHQgPT4gXG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogWnModC5maWVsZCksXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBZcyh0LmRpcilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0odCkpKTtcbiAgICB9KGUub3JkZXJCeSk7XG4gICAgciAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkub3JkZXJCeSA9IHIpO1xuICAgIGNvbnN0IG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0Lmd0IHx8IHNlKGUpID8gZSA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBlXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICogUmV0dXJucyBhIG51bWJlciAob3IgbnVsbCkgZnJvbSBhIGdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlIHByb3RvLlxuICovICh0LCBlLmxpbWl0KTtcbiAgICB2YXIgdTtcbiAgICByZXR1cm4gbnVsbCAhPT0gbyAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkubGltaXQgPSBvKSwgZS5zdGFydEF0ICYmIChuLnN0cnVjdHVyZWRRdWVyeS5zdGFydEF0ID0ge1xuICAgICAgICBiZWZvcmU6ICh1ID0gZS5zdGFydEF0KS5pbmNsdXNpdmUsXG4gICAgICAgIHZhbHVlczogdS5wb3NpdGlvblxuICAgIH0pLCBlLmVuZEF0ICYmIChuLnN0cnVjdHVyZWRRdWVyeS5lbmRBdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJlZm9yZTogIXQuaW5jbHVzaXZlLFxuICAgICAgICAgICAgdmFsdWVzOiB0LnBvc2l0aW9uXG4gICAgICAgIH07XG4gICAgfShlLmVuZEF0KSksIG47XG59XG5cbmZ1bmN0aW9uIHpzKHQpIHtcbiAgICBsZXQgZSA9IE1zKHQucGFyZW50KTtcbiAgICBjb25zdCBuID0gdC5zdHJ1Y3R1cmVkUXVlcnksIHMgPSBuLmZyb20gPyBuLmZyb20ubGVuZ3RoIDogMDtcbiAgICBsZXQgaSA9IG51bGw7XG4gICAgaWYgKHMgPiAwKSB7XG4gICAgICAgIE0oMSA9PT0gcyk7XG4gICAgICAgIGNvbnN0IHQgPSBuLmZyb21bMF07XG4gICAgICAgIHQuYWxsRGVzY2VuZGFudHMgPyBpID0gdC5jb2xsZWN0aW9uSWQgOiBlID0gZS5jaGlsZCh0LmNvbGxlY3Rpb25JZCk7XG4gICAgfVxuICAgIGxldCByID0gW107XG4gICAgbi53aGVyZSAmJiAociA9IEpzKG4ud2hlcmUpKTtcbiAgICBsZXQgbyA9IFtdO1xuICAgIG4ub3JkZXJCeSAmJiAobyA9IG4ub3JkZXJCeS5tYXAoKHQgPT4gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IEhlKHRpKHQuZmllbGQpLCBcbiAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIkFTQ0VORElOR1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImFzY1wiIC8qIEFTQ0VORElORyAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiREVTQ0VORElOR1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgKHQuZGlyZWN0aW9uKSk7XG4gICAgfSh0KSkpKTtcbiAgICBsZXQgdSA9IG51bGw7XG4gICAgbi5saW1pdCAmJiAodSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbGV0IGU7XG4gICAgICAgIHJldHVybiBlID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgdCA/IHQudmFsdWUgOiB0LCBzZShlKSA/IG51bGwgOiBlO1xuICAgIH0obi5saW1pdCkpO1xuICAgIGxldCBjID0gbnVsbDtcbiAgICBuLnN0YXJ0QXQgJiYgKGMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSAhIXQuYmVmb3JlLCBuID0gdC52YWx1ZXMgfHwgW107XG4gICAgICAgIHJldHVybiBuZXcgemUobiwgZSk7XG4gICAgfShuLnN0YXJ0QXQpKTtcbiAgICBsZXQgYSA9IG51bGw7XG4gICAgcmV0dXJuIG4uZW5kQXQgJiYgKGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSAhdC5iZWZvcmUsIG4gPSB0LnZhbHVlcyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyB6ZShuLCBlKTtcbiAgICB9XG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgIChuLmVuZEF0KSksIHRuKGUsIGksIG8sIHIsIHUsIFwiRlwiIC8qIEZpcnN0ICovICwgYywgYSk7XG59XG5cbmZ1bmN0aW9uIEhzKHQsIGUpIHtcbiAgICBjb25zdCBuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICBjYXNlIDAgLyogTGlzdGVuICovIDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgY2FzZSAxIC8qIEV4aXN0ZW5jZUZpbHRlck1pc21hdGNoICovIDpcbiAgICAgICAgICAgIHJldHVybiBcImV4aXN0ZW5jZS1maWx0ZXItbWlzbWF0Y2hcIjtcblxuICAgICAgICAgIGNhc2UgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFwibGltYm8tZG9jdW1lbnRcIjtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gTygpO1xuICAgICAgICB9XG4gICAgfSgwLCBlLnB1cnBvc2UpO1xuICAgIHJldHVybiBudWxsID09IG4gPyBudWxsIDoge1xuICAgICAgICBcImdvb2ctbGlzdGVuLXRhZ3NcIjogblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIEpzKHQpIHtcbiAgICByZXR1cm4gdCA/IHZvaWQgMCAhPT0gdC51bmFyeUZpbHRlciA/IFsgbmkodCkgXSA6IHZvaWQgMCAhPT0gdC5maWVsZEZpbHRlciA/IFsgZWkodCkgXSA6IHZvaWQgMCAhPT0gdC5jb21wb3NpdGVGaWx0ZXIgPyB0LmNvbXBvc2l0ZUZpbHRlci5maWx0ZXJzLm1hcCgodCA9PiBKcyh0KSkpLnJlZHVjZSgoKHQsIGUpID0+IHQuY29uY2F0KGUpKSkgOiBPKCkgOiBbXTtcbn1cblxuZnVuY3Rpb24gWXModCkge1xuICAgIHJldHVybiBSc1t0XTtcbn1cblxuZnVuY3Rpb24gWHModCkge1xuICAgIHJldHVybiBic1t0XTtcbn1cblxuZnVuY3Rpb24gWnModCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZpZWxkUGF0aDogdC5jYW5vbmljYWxTdHJpbmcoKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRpKHQpIHtcbiAgICByZXR1cm4gdXQuZnJvbVNlcnZlckZvcm1hdCh0LmZpZWxkUGF0aCk7XG59XG5cbmZ1bmN0aW9uIGVpKHQpIHtcbiAgICByZXR1cm4gQmUuY3JlYXRlKHRpKHQuZmllbGRGaWx0ZXIuZmllbGQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgIGNhc2UgXCJFUVVBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPT1cIiAvKiBFUVVBTCAqLztcblxuICAgICAgICAgIGNhc2UgXCJOT1RfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIiE9XCIgLyogTk9UX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkdSRUFURVJfVEhBTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPlwiIC8qIEdSRUFURVJfVEhBTiAqLztcblxuICAgICAgICAgIGNhc2UgXCJHUkVBVEVSX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkxFU1NfVEhBTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPFwiIC8qIExFU1NfVEhBTiAqLztcblxuICAgICAgICAgIGNhc2UgXCJMRVNTX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIjw9XCIgLyogTEVTU19USEFOX09SX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovO1xuXG4gICAgICAgICAgY2FzZSBcIklOXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJpblwiIC8qIElOICovO1xuXG4gICAgICAgICAgY2FzZSBcIk5PVF9JTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibm90LWluXCIgLyogTk9UX0lOICovO1xuXG4gICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TX0FOWVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgIH1cbiAgICB9KHQuZmllbGRGaWx0ZXIub3ApLCB0LmZpZWxkRmlsdGVyLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gbmkodCkge1xuICAgIHN3aXRjaCAodC51bmFyeUZpbHRlci5vcCkge1xuICAgICAgY2FzZSBcIklTX05BTlwiOlxuICAgICAgICBjb25zdCBlID0gdGkodC51bmFyeUZpbHRlci5maWVsZCk7XG4gICAgICAgIHJldHVybiBCZS5jcmVhdGUoZSwgXCI9PVwiIC8qIEVRVUFMICovICwge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBcIklTX05VTExcIjpcbiAgICAgICAgY29uc3QgbiA9IHRpKHQudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICByZXR1cm4gQmUuY3JlYXRlKG4sIFwiPT1cIiAvKiBFUVVBTCAqLyAsIHtcbiAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgXCJJU19OT1RfTkFOXCI6XG4gICAgICAgIGNvbnN0IHMgPSB0aSh0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIEJlLmNyZWF0ZShzLCBcIiE9XCIgLyogTk9UX0VRVUFMICovICwge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBcIklTX05PVF9OVUxMXCI6XG4gICAgICAgIGNvbnN0IGkgPSB0aSh0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIEJlLmNyZWF0ZShpLCBcIiE9XCIgLyogTk9UX0VRVUFMICovICwge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9KTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIE8oKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNpKHQpIHtcbiAgICBjb25zdCBlID0gW107XG4gICAgcmV0dXJuIHQuZmllbGRzLmZvckVhY2goKHQgPT4gZS5wdXNoKHQuY2Fub25pY2FsU3RyaW5nKCkpKSksIHtcbiAgICAgICAgZmllbGRQYXRoczogZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGlpKHQpIHtcbiAgICAvLyBSZXNvdXJjZSBuYW1lcyBoYXZlIGF0IGxlYXN0IDQgY29tcG9uZW50cyAocHJvamVjdCBJRCwgZGF0YWJhc2UgSUQpXG4gICAgcmV0dXJuIHQubGVuZ3RoID49IDQgJiYgXCJwcm9qZWN0c1wiID09PSB0LmdldCgwKSAmJiBcImRhdGFiYXNlc1wiID09PSB0LmdldCgyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRW5jb2RlcyBhIHJlc291cmNlIHBhdGggaW50byBhIEluZGV4ZWREYi1jb21wYXRpYmxlIHN0cmluZyBmb3JtLlxuICovXG5mdW5jdGlvbiByaSh0KSB7XG4gICAgbGV0IGUgPSBcIlwiO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykgZS5sZW5ndGggPiAwICYmIChlID0gdWkoZSkpLCBlID0gb2kodC5nZXQobiksIGUpO1xuICAgIHJldHVybiB1aShlKTtcbn1cblxuLyoqIEVuY29kZXMgYSBzaW5nbGUgc2VnbWVudCBvZiBhIHJlc291cmNlIHBhdGggaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIG9pKHQsIGUpIHtcbiAgICBsZXQgbiA9IGU7XG4gICAgY29uc3QgcyA9IHQubGVuZ3RoO1xuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgczsgZSsrKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0LmNoYXJBdChlKTtcbiAgICAgICAgc3dpdGNoIChzKSB7XG4gICAgICAgICAgY2FzZSBcIlxcMFwiOlxuICAgICAgICAgICAgbiArPSBcIlx1MDAwMVx1MDAxMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDAxXCI6XG4gICAgICAgICAgICBuICs9IFwiXHUwMDAxXHUwMDExXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuICs9IHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKiBFbmNvZGVzIGEgcGF0aCBzZXBhcmF0b3IgaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIHVpKHQpIHtcbiAgICByZXR1cm4gdCArIFwiXHUwMDAxXHUwMDAxXCI7XG59XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgZ2l2ZW4gSW5kZXhlZERiLWNvbXBhdGlibGUgc3RyaW5nIGZvcm0gb2YgYSByZXNvdXJjZSBwYXRoIGludG9cbiAqIGEgUmVzb3VyY2VQYXRoIGluc3RhbmNlLiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgbm90IHN1aXRhYmxlIGZvciB1c2Ugd2l0aFxuICogZGVjb2RpbmcgcmVzb3VyY2UgbmFtZXMgZnJvbSB0aGUgc2VydmVyOyB0aG9zZSBhcmUgT25lIFBsYXRmb3JtIGZvcm1hdFxuICogc3RyaW5ncy5cbiAqLyBmdW5jdGlvbiBjaSh0KSB7XG4gICAgLy8gRXZlbnQgdGhlIGVtcHR5IHBhdGggbXVzdCBlbmNvZGUgYXMgYSBwYXRoIG9mIGF0IGxlYXN0IGxlbmd0aCAyLiBBIHBhdGhcbiAgICAvLyB3aXRoIGV4YWN0bHkgMiBtdXN0IGJlIHRoZSBlbXB0eSBwYXRoLlxuICAgIGNvbnN0IGUgPSB0Lmxlbmd0aDtcbiAgICBpZiAoTShlID49IDIpLCAyID09PSBlKSByZXR1cm4gTShcIlx1MDAwMVwiID09PSB0LmNoYXJBdCgwKSAmJiBcIlx1MDAwMVwiID09PSB0LmNoYXJBdCgxKSksIHJ0LmVtcHR5UGF0aCgpO1xuICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIGNhbm5vdCBleGlzdCBwYXN0IHRoZSBzZWNvbmQtdG8tbGFzdCBwb3NpdGlvbiBpbiB0aGVcbiAgICAvLyBzb3VyY2UgdmFsdWUuXG4gICAgICAgIGNvbnN0IG4gPSBlIC0gMiwgcyA9IFtdO1xuICAgIGxldCBpID0gXCJcIjtcbiAgICBmb3IgKGxldCByID0gMDsgciA8IGU7ICkge1xuICAgICAgICAvLyBUaGUgbGFzdCB0d28gY2hhcmFjdGVycyBvZiBhIHZhbGlkIGVuY29kZWQgcGF0aCBtdXN0IGJlIGEgc2VwYXJhdG9yLCBzb1xuICAgICAgICAvLyB0aGVyZSBtdXN0IGJlIGFuIGVuZCB0byB0aGlzIHNlZ21lbnQuXG4gICAgICAgIGNvbnN0IGUgPSB0LmluZGV4T2YoXCJcdTAwMDFcIiwgcik7XG4gICAgICAgIChlIDwgMCB8fCBlID4gbikgJiYgTygpO1xuICAgICAgICBzd2l0Y2ggKHQuY2hhckF0KGUgKyAxKSkge1xuICAgICAgICAgIGNhc2UgXCJcdTAwMDFcIjpcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnN1YnN0cmluZyhyLCBlKTtcbiAgICAgICAgICAgIGxldCBvO1xuICAgICAgICAgICAgMCA9PT0gaS5sZW5ndGggPyBcbiAgICAgICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhIHNlZ21lbnQgdGhhdCBleGNsdWRlcyBcXDBcbiAgICAgICAgICAgIC8vIGFuZCBcXDAwMVxuICAgICAgICAgICAgbyA9IG4gOiAoaSArPSBuLCBvID0gaSwgaSA9IFwiXCIpLCBzLnB1c2gobyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJcdTAwMTBcIjpcbiAgICAgICAgICAgIGkgKz0gdC5zdWJzdHJpbmcociwgZSksIGkgKz0gXCJcXDBcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlx1MDAxMVwiOlxuICAgICAgICAgICAgLy8gVGhlIGVzY2FwZSBjaGFyYWN0ZXIgY2FuIGJlIHVzZWQgaW4gdGhlIG91dHB1dCB0byBlbmNvZGUgaXRzZWxmLlxuICAgICAgICAgICAgaSArPSB0LnN1YnN0cmluZyhyLCBlICsgMSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBPKCk7XG4gICAgICAgIH1cbiAgICAgICAgciA9IGUgKyAyO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHJ0KHMpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBhaSA9IFsgXCJ1c2VySWRcIiwgXCJiYXRjaElkXCIgXTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG5hbWUgJ293bmVyJyBpcyBjaG9zZW4gdG8gZW5zdXJlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGhcbiAqIG9sZGVyIGNsaWVudHMgdGhhdCBvbmx5IHN1cHBvcnRlZCBzaW5nbGUgbG9ja2VkIGFjY2VzcyB0byB0aGUgcGVyc2lzdGVuY2VcbiAqIGxheWVyLlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBbdXNlcklkLCBlbmNvZGVkUGF0aF0ga2V5IGZvciB1c2UgaW4gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnNcbiAqIGluZGV4IHRvIGl0ZXJhdGUgb3ZlciBhbGwgYXQgZG9jdW1lbnQgbXV0YXRpb25zIGZvciBhIGdpdmVuIHBhdGggb3IgbG93ZXIuXG4gKi9cbmZ1bmN0aW9uIGhpKHQsIGUpIHtcbiAgICByZXR1cm4gWyB0LCByaShlKSBdO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdWxsIGluZGV4IGtleSBvZiBbdXNlcklkLCBlbmNvZGVkUGF0aCwgYmF0Y2hJZF0gZm9yIGluc2VydGluZ1xuICogYW5kIGRlbGV0aW5nIGludG8gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnMgaW5kZXguXG4gKi8gZnVuY3Rpb24gbGkodCwgZSwgbikge1xuICAgIHJldHVybiBbIHQsIHJpKGUpLCBuIF07XG59XG5cbi8qKlxuICogQmVjYXVzZSB3ZSBzdG9yZSBhbGwgdGhlIHVzZWZ1bCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBzdG9yZSBpbiB0aGUga2V5LFxuICogdGhlcmUgaXMgbm8gdXNlZnVsIGluZm9ybWF0aW9uIHRvIHN0b3JlIGFzIHRoZSB2YWx1ZS4gVGhlIHJhdyAodW5lbmNvZGVkKVxuICogcGF0aCBjYW5ub3QgYmUgc3RvcmVkIGJlY2F1c2UgSW5kZXhlZERiIGRvZXNuJ3Qgc3RvcmUgcHJvdG90eXBlXG4gKiBpbmZvcm1hdGlvbi5cbiAqLyBjb25zdCBmaSA9IHt9LCBkaSA9IFsgXCJwcmVmaXhQYXRoXCIsIFwiY29sbGVjdGlvbkdyb3VwXCIsIFwicmVhZFRpbWVcIiwgXCJkb2N1bWVudElkXCIgXSwgX2kgPSBbIFwicHJlZml4UGF0aFwiLCBcImNvbGxlY3Rpb25Hcm91cFwiLCBcImRvY3VtZW50SWRcIiBdLCB3aSA9IFsgXCJjb2xsZWN0aW9uR3JvdXBcIiwgXCJyZWFkVGltZVwiLCBcInByZWZpeFBhdGhcIiwgXCJkb2N1bWVudElkXCIgXSwgbWkgPSBbIFwiY2Fub25pY2FsSWRcIiwgXCJ0YXJnZXRJZFwiIF0sIGdpID0gWyBcInRhcmdldElkXCIsIFwicGF0aFwiIF0sIHlpID0gWyBcInBhdGhcIiwgXCJ0YXJnZXRJZFwiIF0sIHBpID0gWyBcImNvbGxlY3Rpb25JZFwiLCBcInBhcmVudFwiIF0sIElpID0gWyBcImluZGV4SWRcIiwgXCJ1aWRcIiBdLCBUaSA9IFsgXCJ1aWRcIiwgXCJzZXF1ZW5jZU51bWJlclwiIF0sIEVpID0gWyBcImluZGV4SWRcIiwgXCJ1aWRcIiwgXCJhcnJheVZhbHVlXCIsIFwiZGlyZWN0aW9uYWxWYWx1ZVwiLCBcIm9yZGVyZWREb2N1bWVudEtleVwiLCBcImRvY3VtZW50S2V5XCIgXSwgQWkgPSBbIFwiaW5kZXhJZFwiLCBcInVpZFwiLCBcIm9yZGVyZWREb2N1bWVudEtleVwiIF0sIFJpID0gWyBcInVzZXJJZFwiLCBcImNvbGxlY3Rpb25QYXRoXCIsIFwiZG9jdW1lbnRJZFwiIF0sIGJpID0gWyBcInVzZXJJZFwiLCBcImNvbGxlY3Rpb25QYXRoXCIsIFwibGFyZ2VzdEJhdGNoSWRcIiBdLCBQaSA9IFsgXCJ1c2VySWRcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwgXCJsYXJnZXN0QmF0Y2hJZFwiIF0sIHZpID0gWyAuLi5bIC4uLlsgLi4uWyAuLi5bIFwibXV0YXRpb25RdWV1ZXNcIiwgXCJtdXRhdGlvbnNcIiwgXCJkb2N1bWVudE11dGF0aW9uc1wiLCBcInJlbW90ZURvY3VtZW50c1wiLCBcInRhcmdldHNcIiwgXCJvd25lclwiLCBcInRhcmdldEdsb2JhbFwiLCBcInRhcmdldERvY3VtZW50c1wiIF0sIFwiY2xpZW50TWV0YWRhdGFcIiBdLCBcInJlbW90ZURvY3VtZW50R2xvYmFsXCIgXSwgXCJjb2xsZWN0aW9uUGFyZW50c1wiIF0sIFwiYnVuZGxlc1wiLCBcIm5hbWVkUXVlcmllc1wiIF0sIFZpID0gWyAuLi52aSwgXCJkb2N1bWVudE92ZXJsYXlzXCIgXSwgU2kgPSBbIFwibXV0YXRpb25RdWV1ZXNcIiwgXCJtdXRhdGlvbnNcIiwgXCJkb2N1bWVudE11dGF0aW9uc1wiLCBcInJlbW90ZURvY3VtZW50c1YxNFwiLCBcInRhcmdldHNcIiwgXCJvd25lclwiLCBcInRhcmdldEdsb2JhbFwiLCBcInRhcmdldERvY3VtZW50c1wiLCBcImNsaWVudE1ldGFkYXRhXCIsIFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIiwgXCJjb2xsZWN0aW9uUGFyZW50c1wiLCBcImJ1bmRsZXNcIiwgXCJuYW1lZFF1ZXJpZXNcIiwgXCJkb2N1bWVudE92ZXJsYXlzXCIgXSwgRGkgPSBTaSwgQ2kgPSBbIC4uLkRpLCBcImluZGV4Q29uZmlndXJhdGlvblwiLCBcImluZGV4U3RhdGVcIiwgXCJpbmRleEVudHJpZXNcIiBdO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgeGkgZXh0ZW5kcyBUdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmllID0gdCwgdGhpcy5jdXJyZW50U2VxdWVuY2VOdW1iZXIgPSBlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gTmkodCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgIHJldHVybiBidC5NKG4uaWUsIGUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGJhdGNoIG9mIG11dGF0aW9ucyB0aGF0IHdpbGwgYmUgc2VudCBhcyBvbmUgdW5pdCB0byB0aGUgYmFja2VuZC5cbiAqLyBjbGFzcyBraSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgdW5pcXVlIElEIG9mIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogQHBhcmFtIGxvY2FsV3JpdGVUaW1lIC0gVGhlIG9yaWdpbmFsIHdyaXRlIHRpbWUgb2YgdGhpcyBtdXRhdGlvbi5cbiAgICAgKiBAcGFyYW0gYmFzZU11dGF0aW9ucyAtIE11dGF0aW9ucyB0aGF0IGFyZSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBiYXNlXG4gICAgICogdmFsdWVzIHdoZW4gdGhpcyBtdXRhdGlvbiBpcyBhcHBsaWVkIGxvY2FsbHkuIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9jYWxseVxuICAgICAqIG92ZXJ3cml0ZSB2YWx1ZXMgdGhhdCBhcmUgcGVyc2lzdGVkIGluIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUuIEJhc2VcbiAgICAgKiBtdXRhdGlvbnMgYXJlIG5ldmVyIHNlbnQgdG8gdGhlIGJhY2tlbmQuXG4gICAgICogQHBhcmFtIG11dGF0aW9ucyAtIFRoZSB1c2VyLXByb3ZpZGVkIG11dGF0aW9ucyBpbiB0aGlzIG11dGF0aW9uIGJhdGNoLlxuICAgICAqIFVzZXItcHJvdmlkZWQgbXV0YXRpb25zIGFyZSBhcHBsaWVkIGJvdGggbG9jYWxseSBhbmQgcmVtb3RlbHkgb24gdGhlXG4gICAgICogYmFja2VuZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMuYmF0Y2hJZCA9IHQsIHRoaXMubG9jYWxXcml0ZVRpbWUgPSBlLCB0aGlzLmJhc2VNdXRhdGlvbnMgPSBuLCB0aGlzLm11dGF0aW9ucyA9IHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYWxsIHRoZSBtdXRhdGlvbnMgaW4gdGhpcyBNdXRhdGlvbkJhdGNoIHRvIHRoZSBzcGVjaWZpZWQgZG9jdW1lbnRcbiAgICAgKiB0byBjb21wdXRlIHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGRvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBiYXRjaFJlc3VsdCAtIFRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIE11dGF0aW9uQmF0Y2ggdG8gdGhlXG4gICAgICogYmFja2VuZC5cbiAgICAgKi8gICAgYXBwbHlUb1JlbW90ZURvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUubXV0YXRpb25SZXN1bHRzO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHRoaXMubXV0YXRpb25zLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5tdXRhdGlvbnNbZV07XG4gICAgICAgICAgICBpZiAocy5rZXkuaXNFcXVhbCh0LmtleSkpIHtcbiAgICAgICAgICAgICAgICBCbihzLCB0LCBuW2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBvZiBhIGRvY3VtZW50IGdpdmVuIGFsbCB0aGUgbXV0YXRpb25zIGluIHRoaXNcbiAgICAgKiBiYXRjaC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0byBhcHBseSBtdXRhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIG11dGF0ZWRGaWVsZHMgLSBGaWVsZHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBiZWZvcmUgYXBwbHlpbmcgdGhpcyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgKiBAcmV0dXJucyBBIGBGaWVsZE1hc2tgIHJlcHJlc2VudGluZyBhbGwgdGhlIGZpZWxkcyB0aGF0IGFyZSBtdXRhdGVkLlxuICAgICAqLyAgICBhcHBseVRvTG9jYWxWaWV3KHQsIGUpIHtcbiAgICAgICAgLy8gRmlyc3QsIGFwcGx5IHRoZSBiYXNlIHN0YXRlLiBUaGlzIGFsbG93cyB1cyB0byBhcHBseSBub24taWRlbXBvdGVudFxuICAgICAgICAvLyB0cmFuc2Zvcm0gYWdhaW5zdCBhIGNvbnNpc3RlbnQgc2V0IG9mIHZhbHVlcy5cbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHRoaXMuYmFzZU11dGF0aW9ucykgbi5rZXkuaXNFcXVhbCh0LmtleSkgJiYgKGUgPSBMbihuLCB0LCBlLCB0aGlzLmxvY2FsV3JpdGVUaW1lKSk7XG4gICAgICAgIC8vIFNlY29uZCwgYXBwbHkgYWxsIHVzZXItcHJvdmlkZWQgbXV0YXRpb25zLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLm11dGF0aW9ucykgbi5rZXkuaXNFcXVhbCh0LmtleSkgJiYgKGUgPSBMbihuLCB0LCBlLCB0aGlzLmxvY2FsV3JpdGVUaW1lKSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBmb3IgYWxsIHByb3ZpZGVkIGRvY3VtZW50cyBnaXZlbiB0aGUgbXV0YXRpb25zIGluXG4gICAgICogdGhpcyBiYXRjaC4gUmV0dXJucyBhIGBEb2N1bWVudEtleWAgdG8gYE11dGF0aW9uYCBtYXAgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgKiByZXBsYWNlIGFsbCB0aGUgbXV0YXRpb24gYXBwbGljYXRpb25zLlxuICAgICAqLyAgICBhcHBseVRvTG9jYWxEb2N1bWVudFNldCh0LCBlKSB7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBPKG5eMikuIElmIHdlIGFwcGx5IHRoZSBtdXRhdGlvbnNcbiAgICAgICAgLy8gZGlyZWN0bHkgKGFzIGRvbmUgaW4gYGFwcGx5VG9Mb2NhbFZpZXcoKWApLCB3ZSBjYW4gcmVkdWNlIHRoZSBjb21wbGV4aXR5XG4gICAgICAgIC8vIHRvIE8obikuXG4gICAgICAgIGNvbnN0IG4gPSBjcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMuZm9yRWFjaCgocyA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdC5nZXQocy5rZXkpLCByID0gaS5vdmVybGF5ZWREb2N1bWVudDtcbiAgICAgICAgICAgIC8vIFRPRE8obXV0YWJsZWRvY3VtZW50cyk6IFRoaXMgbWV0aG9kIHNob3VsZCB0YWtlIGEgTXV0YWJsZURvY3VtZW50TWFwXG4gICAgICAgICAgICAvLyBhbmQgd2Ugc2hvdWxkIHJlbW92ZSB0aGlzIGNhc3QuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IHRoaXMuYXBwbHlUb0xvY2FsVmlldyhyLCBpLm11dGF0ZWRGaWVsZHMpO1xuICAgICAgICAgICAgLy8gU2V0IG11dGF0ZWRGaWVsZHMgdG8gbnVsbCBpZiB0aGUgZG9jdW1lbnQgaXMgb25seSBmcm9tIGxvY2FsIG11dGF0aW9ucy5cbiAgICAgICAgICAgIC8vIFRoaXMgY3JlYXRlcyBhIFNldCBvciBEZWxldGUgbXV0YXRpb24sIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGNyZWF0ZSBhXG4gICAgICAgICAgICAvLyBwYXRjaCBtdXRhdGlvbiBhcyB0aGUgb3ZlcmxheS5cbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLmhhcyhzLmtleSkgPyBudWxsIDogbztcbiAgICAgICAgICAgIGNvbnN0IHUgPSAkbihyLCBvKTtcbiAgICAgICAgICAgIG51bGwgIT09IHUgJiYgbi5zZXQocy5rZXksIHUpLCByLmlzVmFsaWREb2N1bWVudCgpIHx8IHIuY29udmVydFRvTm9Eb2N1bWVudChzdC5taW4oKSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLnJlZHVjZSgoKHQsIGUpID0+IHQuYWRkKGUua2V5KSksIGZzKCkpO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmF0Y2hJZCA9PT0gdC5iYXRjaElkICYmIHR0KHRoaXMubXV0YXRpb25zLCB0Lm11dGF0aW9ucywgKCh0LCBlKSA9PiBxbih0LCBlKSkpICYmIHR0KHRoaXMuYmFzZU11dGF0aW9ucywgdC5iYXNlTXV0YXRpb25zLCAoKHQsIGUpID0+IHFuKHQsIGUpKSk7XG4gICAgfVxufVxuXG4vKiogVGhlIHJlc3VsdCBvZiBhcHBseWluZyBhIG11dGF0aW9uIGJhdGNoIHRvIHRoZSBiYWNrZW5kLiAqLyBjbGFzcyBPaSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgXG4gICAgLyoqXG4gICAgICogQSBwcmUtY29tcHV0ZWQgbWFwcGluZyBmcm9tIGVhY2ggbXV0YXRlZCBkb2N1bWVudCB0byB0aGUgcmVzdWx0aW5nXG4gICAgICogdmVyc2lvbi5cbiAgICAgKi9cbiAgICBzKSB7XG4gICAgICAgIHRoaXMuYmF0Y2ggPSB0LCB0aGlzLmNvbW1pdFZlcnNpb24gPSBlLCB0aGlzLm11dGF0aW9uUmVzdWx0cyA9IG4sIHRoaXMuZG9jVmVyc2lvbnMgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE11dGF0aW9uQmF0Y2hSZXN1bHQgZm9yIHRoZSBnaXZlbiBiYXRjaCBhbmQgcmVzdWx0cy4gVGhlcmVcbiAgICAgKiBtdXN0IGJlIG9uZSByZXN1bHQgZm9yIGVhY2ggbXV0YXRpb24gaW4gdGhlIGJhdGNoLiBUaGlzIHN0YXRpYyBmYWN0b3J5XG4gICAgICogY2FjaGVzIGEgZG9jdW1lbnQ9Jmd0O3ZlcnNpb24gbWFwcGluZyAoZG9jVmVyc2lvbnMpLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbSh0LCBlLCBuKSB7XG4gICAgICAgIE0odC5tdXRhdGlvbnMubGVuZ3RoID09PSBuLmxlbmd0aCk7XG4gICAgICAgIGxldCBzID0gaHM7XG4gICAgICAgIGNvbnN0IGkgPSB0Lm11dGF0aW9ucztcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBpLmxlbmd0aDsgdCsrKSBzID0gcy5pbnNlcnQoaVt0XS5rZXksIG5bdF0udmVyc2lvbik7XG4gICAgICAgIHJldHVybiBuZXcgT2kodCwgZSwgbiwgcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhbiBvdmVybGF5IGNvbXB1dGVkIGJ5IEZpcmVzdG9yZS5cbiAqXG4gKiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBhIG11dGF0aW9uIGFuZCB0aGUgbGFyZ2VzdCBiYXRjaCBpZCBpbiBGaXJlc3RvcmUgd2hlblxuICogdGhlIG11dGF0aW9uIHdhcyBjcmVhdGVkLlxuICovIGNsYXNzIE1pIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMubGFyZ2VzdEJhdGNoSWQgPSB0LCB0aGlzLm11dGF0aW9uID0gZTtcbiAgICB9XG4gICAgZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbi5rZXk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdCAmJiB0aGlzLm11dGF0aW9uID09PSB0Lm11dGF0aW9uO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBPdmVybGF5e1xcbiAgICAgIGxhcmdlc3RCYXRjaElkOiAke3RoaXMubGFyZ2VzdEJhdGNoSWR9LFxcbiAgICAgIG11dGF0aW9uOiAke3RoaXMubXV0YXRpb24udG9TdHJpbmcoKX1cXG4gICAgfWA7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbW11dGFibGUgc2V0IG9mIG1ldGFkYXRhIHRoYXQgdGhlIGxvY2FsIHN0b3JlIHRyYWNrcyBmb3IgZWFjaCB0YXJnZXQuXG4gKi8gY2xhc3MgRmkge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgdGFyZ2V0IGJlaW5nIGxpc3RlbmVkIHRvLiAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgSUQgdG8gd2hpY2ggdGhlIHRhcmdldCBjb3JyZXNwb25kczsgQXNzaWduZWQgYnkgdGhlXG4gICAgICogTG9jYWxTdG9yZSBmb3IgdXNlciBsaXN0ZW5zIGFuZCBieSB0aGUgU3luY0VuZ2luZSBmb3IgbGltYm8gd2F0Y2hlcy5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKiogVGhlIHB1cnBvc2Ugb2YgdGhlIHRhcmdldC4gKi9cbiAgICBuLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBsYXN0IHRyYW5zYWN0aW9uIGR1cmluZyB3aGljaCB0aGlzIHRhcmdldCBkYXRhXG4gICAgICogd2FzIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIHMsIFxuICAgIC8qKiBUaGUgbGF0ZXN0IHNuYXBzaG90IHZlcnNpb24gc2VlbiBmb3IgdGhpcyB0YXJnZXQuICovXG4gICAgaSA9IHN0Lm1pbigpXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gc25hcHNob3QgdmVyc2lvbiBhdCB3aGljaCB0aGUgYXNzb2NpYXRlZCB2aWV3XG4gICAgICogY29udGFpbmVkIG5vIGxpbWJvIGRvY3VtZW50cy5cbiAgICAgKi8gLCByID0gc3QubWluKClcbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHRhcmdldCB0byBiZVxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YSB0aGF0XG4gICAgICogbWF0Y2hlcyB0aGUgdGFyZ2V0LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpblxuICAgICAqIHRpbWUgZnJvbSB3aGljaCB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxuICAgICAqLyAsIG8gPSBXdC5FTVBUWV9CWVRFX1NUUklORykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHQsIHRoaXMudGFyZ2V0SWQgPSBlLCB0aGlzLnB1cnBvc2UgPSBuLCB0aGlzLnNlcXVlbmNlTnVtYmVyID0gcywgdGhpcy5zbmFwc2hvdFZlcnNpb24gPSBpLCBcbiAgICAgICAgdGhpcy5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uID0gciwgdGhpcy5yZXN1bWVUb2tlbiA9IG87XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBzZXF1ZW5jZSBudW1iZXIuICovICAgIHdpdGhTZXF1ZW5jZU51bWJlcih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRmkodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMucHVycG9zZSwgdCwgdGhpcy5zbmFwc2hvdFZlcnNpb24sIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgdGhpcy5yZXN1bWVUb2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIHJlc3VtZSB0b2tlbiBhbmRcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uLlxuICAgICAqLyAgICB3aXRoUmVzdW1lVG9rZW4odCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZpKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIGUsIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIGxhc3QgbGltYm8gZnJlZVxuICAgICAqIHNuYXBzaG90IHZlcnNpb24gbnVtYmVyLlxuICAgICAqLyAgICB3aXRoTGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRmkodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMucHVycG9zZSwgdGhpcy5zZXF1ZW5jZU51bWJlciwgdGhpcy5zbmFwc2hvdFZlcnNpb24sIHQsIHRoaXMucmVzdW1lVG9rZW4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBTZXJpYWxpemVyIGZvciB2YWx1ZXMgc3RvcmVkIGluIHRoZSBMb2NhbFN0b3JlLiAqLyBjbGFzcyAkaSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnJlID0gdDtcbiAgICB9XG59XG5cbi8qKiBEZWNvZGVzIGEgcmVtb3RlIGRvY3VtZW50IGZyb20gc3RvcmFnZSBsb2NhbGx5IHRvIGEgRG9jdW1lbnQuICovIGZ1bmN0aW9uIEJpKHQsIGUpIHtcbiAgICBsZXQgbjtcbiAgICBpZiAoZS5kb2N1bWVudCkgbiA9IExzKHQucmUsIGUuZG9jdW1lbnQsICEhZS5oYXNDb21taXR0ZWRNdXRhdGlvbnMpOyBlbHNlIGlmIChlLm5vRG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3QgdCA9IGN0LmZyb21TZWdtZW50cyhlLm5vRG9jdW1lbnQucGF0aCksIHMgPSBLaShlLm5vRG9jdW1lbnQucmVhZFRpbWUpO1xuICAgICAgICBuID0gU2UubmV3Tm9Eb2N1bWVudCh0LCBzKSwgZS5oYXNDb21taXR0ZWRNdXRhdGlvbnMgJiYgbi5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWUudW5rbm93bkRvY3VtZW50KSByZXR1cm4gTygpO1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ID0gY3QuZnJvbVNlZ21lbnRzKGUudW5rbm93bkRvY3VtZW50LnBhdGgpLCBzID0gS2koZS51bmtub3duRG9jdW1lbnQudmVyc2lvbik7XG4gICAgICAgICAgICBuID0gU2UubmV3VW5rbm93bkRvY3VtZW50KHQsIHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlLnJlYWRUaW1lICYmIG4uc2V0UmVhZFRpbWUoZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IG50KHRbMF0sIHRbMV0pO1xuICAgICAgICByZXR1cm4gc3QuZnJvbVRpbWVzdGFtcChlKTtcbiAgICB9KGUucmVhZFRpbWUpKSwgbjtcbn1cblxuLyoqIEVuY29kZXMgYSBkb2N1bWVudCBmb3Igc3RvcmFnZSBsb2NhbGx5LiAqLyBmdW5jdGlvbiBMaSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IGUua2V5LCBzID0ge1xuICAgICAgICBwcmVmaXhQYXRoOiBuLmdldENvbGxlY3Rpb25QYXRoKCkucG9wTGFzdCgpLnRvQXJyYXkoKSxcbiAgICAgICAgY29sbGVjdGlvbkdyb3VwOiBuLmNvbGxlY3Rpb25Hcm91cCxcbiAgICAgICAgZG9jdW1lbnRJZDogbi5wYXRoLmxhc3RTZWdtZW50KCksXG4gICAgICAgIHJlYWRUaW1lOiBVaShlLnJlYWRUaW1lKSxcbiAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiBlLmhhc0NvbW1pdHRlZE11dGF0aW9uc1xuICAgIH07XG4gICAgaWYgKGUuaXNGb3VuZERvY3VtZW50KCkpIHMuZG9jdW1lbnQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBOcyh0LCBlLmtleSksXG4gICAgICAgICAgICBmaWVsZHM6IGUuZGF0YS52YWx1ZS5tYXBWYWx1ZS5maWVsZHMsXG4gICAgICAgICAgICB1cGRhdGVUaW1lOiB2cyh0LCBlLnZlcnNpb24udG9UaW1lc3RhbXAoKSlcbiAgICAgICAgfTtcbiAgICB9KHQucmUsIGUpOyBlbHNlIGlmIChlLmlzTm9Eb2N1bWVudCgpKSBzLm5vRG9jdW1lbnQgPSB7XG4gICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgIHJlYWRUaW1lOiBxaShlLnZlcnNpb24pXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGlmICghZS5pc1Vua25vd25Eb2N1bWVudCgpKSByZXR1cm4gTygpO1xuICAgICAgICBzLnVua25vd25Eb2N1bWVudCA9IHtcbiAgICAgICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgICAgICB2ZXJzaW9uOiBxaShlLnZlcnNpb24pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBVaSh0KSB7XG4gICAgY29uc3QgZSA9IHQudG9UaW1lc3RhbXAoKTtcbiAgICByZXR1cm4gWyBlLnNlY29uZHMsIGUubmFub3NlY29uZHMgXTtcbn1cblxuZnVuY3Rpb24gcWkodCkge1xuICAgIGNvbnN0IGUgPSB0LnRvVGltZXN0YW1wKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogZS5zZWNvbmRzLFxuICAgICAgICBuYW5vc2Vjb25kczogZS5uYW5vc2Vjb25kc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIEtpKHQpIHtcbiAgICBjb25zdCBlID0gbmV3IG50KHQuc2Vjb25kcywgdC5uYW5vc2Vjb25kcyk7XG4gICAgcmV0dXJuIHN0LmZyb21UaW1lc3RhbXAoZSk7XG59XG5cbi8qKiBFbmNvZGVzIGEgYmF0Y2ggb2YgbXV0YXRpb25zIGludG8gYSBEYk11dGF0aW9uQmF0Y2ggZm9yIGxvY2FsIHN0b3JhZ2UuICovXG4vKiogRGVjb2RlcyBhIERiTXV0YXRpb25CYXRjaCBpbnRvIGEgTXV0YXRpb25CYXRjaCAqL1xuZnVuY3Rpb24gR2kodCwgZSkge1xuICAgIGNvbnN0IG4gPSAoZS5iYXNlTXV0YXRpb25zIHx8IFtdKS5tYXAoKGUgPT4gR3ModC5yZSwgZSkpKTtcbiAgICAvLyBTcXVhc2ggb2xkIHRyYW5zZm9ybSBtdXRhdGlvbnMgaW50byBleGlzdGluZyBwYXRjaCBvciBzZXQgbXV0YXRpb25zLlxuICAgIC8vIFRoZSByZXBsYWNlbWVudCBvZiByZXByZXNlbnRpbmcgYHRyYW5zZm9ybXNgIHdpdGggYHVwZGF0ZV90cmFuc2Zvcm1zYFxuICAgIC8vIG9uIHRoZSBTREsgbWVhbnMgdGhhdCBvbGQgYHRyYW5zZm9ybWAgbXV0YXRpb25zIHN0b3JlZCBpbiBJbmRleGVkREIgbmVlZFxuICAgIC8vIHRvIGJlIHVwZGF0ZWQgdG8gYHVwZGF0ZV90cmFuc2Zvcm1zYC5cbiAgICAvLyBUT0RPKGIvMTc0NjA4Mzc0KTogUmVtb3ZlIHRoaXMgY29kZSBvbmNlIHdlIHBlcmZvcm0gYSBzY2hlbWEgbWlncmF0aW9uLlxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGUubXV0YXRpb25zLmxlbmd0aCAtIDE7ICsrdCkge1xuICAgICAgICBjb25zdCBuID0gZS5tdXRhdGlvbnNbdF07XG4gICAgICAgIGlmICh0ICsgMSA8IGUubXV0YXRpb25zLmxlbmd0aCAmJiB2b2lkIDAgIT09IGUubXV0YXRpb25zW3QgKyAxXS50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLm11dGF0aW9uc1t0ICsgMV07XG4gICAgICAgICAgICBuLnVwZGF0ZVRyYW5zZm9ybXMgPSBzLnRyYW5zZm9ybS5maWVsZFRyYW5zZm9ybXMsIGUubXV0YXRpb25zLnNwbGljZSh0ICsgMSwgMSksIFxuICAgICAgICAgICAgKyt0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHMgPSBlLm11dGF0aW9ucy5tYXAoKGUgPT4gR3ModC5yZSwgZSkpKSwgaSA9IG50LmZyb21NaWxsaXMoZS5sb2NhbFdyaXRlVGltZU1zKTtcbiAgICByZXR1cm4gbmV3IGtpKGUuYmF0Y2hJZCwgaSwgbiwgcyk7XG59XG5cbi8qKiBEZWNvZGVzIGEgRGJUYXJnZXQgaW50byBUYXJnZXREYXRhICovIGZ1bmN0aW9uIFFpKHQpIHtcbiAgICBjb25zdCBlID0gS2kodC5yZWFkVGltZSksIG4gPSB2b2lkIDAgIT09IHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA/IEtpKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbikgOiBzdC5taW4oKTtcbiAgICBsZXQgcztcbiAgICB2YXIgaTtcbiAgICByZXR1cm4gdm9pZCAwICE9PSB0LnF1ZXJ5LmRvY3VtZW50cyA/IChNKDEgPT09IChpID0gdC5xdWVyeSkuZG9jdW1lbnRzLmxlbmd0aCksIFxuICAgIHMgPSBjbihlbihNcyhpLmRvY3VtZW50c1swXSkpKSkgOiBzID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gY24oenModCkpO1xuICAgIH0odC5xdWVyeSksIG5ldyBGaShzLCB0LnRhcmdldElkLCAwIC8qIExpc3RlbiAqLyAsIHQubGFzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBlLCBuLCBXdC5mcm9tQmFzZTY0U3RyaW5nKHQucmVzdW1lVG9rZW4pKTtcbn1cblxuLyoqIEVuY29kZXMgVGFyZ2V0RGF0YSBpbnRvIGEgRGJUYXJnZXQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi8gZnVuY3Rpb24gamkodCwgZSkge1xuICAgIGNvbnN0IG4gPSBxaShlLnNuYXBzaG90VmVyc2lvbiksIHMgPSBxaShlLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24pO1xuICAgIGxldCBpO1xuICAgIGkgPSBPZShlLnRhcmdldCkgPyBqcyh0LnJlLCBlLnRhcmdldCkgOiBXcyh0LnJlLCBlLnRhcmdldCk7XG4gICAgLy8gV2UgY2FuJ3Qgc3RvcmUgdGhlIHJlc3VtZVRva2VuIGFzIGEgQnl0ZVN0cmluZyBpbiBJbmRleGVkRGIsIHNvIHdlXG4gICAgLy8gY29udmVydCBpdCB0byBhIGJhc2U2NCBzdHJpbmcgZm9yIHN0b3JhZ2UuXG4gICAgICAgIGNvbnN0IHIgPSBlLnJlc3VtZVRva2VuLnRvQmFzZTY0KCk7XG4gICAgLy8gbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIGFsd2F5cyAwIHVudGlsIHdlIGRvIHJlYWwgR0MuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldElkOiBlLnRhcmdldElkLFxuICAgICAgICBjYW5vbmljYWxJZDogeGUoZS50YXJnZXQpLFxuICAgICAgICByZWFkVGltZTogbixcbiAgICAgICAgcmVzdW1lVG9rZW46IHIsXG4gICAgICAgIGxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjogZS5zZXF1ZW5jZU51bWJlcixcbiAgICAgICAgbGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbjogcyxcbiAgICAgICAgcXVlcnk6IGlcbiAgICB9O1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciBmaWd1cmluZyBvdXQgd2hhdCBraW5kIG9mIHF1ZXJ5IGhhcyBiZWVuIHN0b3JlZC5cbiAqL1xuLyoqXG4gKiBFbmNvZGVzIGEgYEJ1bmRsZWRRdWVyeWAgZnJvbSBidW5kbGUgcHJvdG8gdG8gYSBRdWVyeSBvYmplY3QuXG4gKlxuICogVGhpcyByZWNvbnN0cnVjdHMgdGhlIG9yaWdpbmFsIHF1ZXJ5IHVzZWQgdG8gYnVpbGQgdGhlIGJ1bmRsZSBiZWluZyBsb2FkZWQsXG4gKiBpbmNsdWRpbmcgZmVhdHVyZXMgZXhpc3RzIG9ubHkgaW4gU0RLcyAoZm9yIGV4YW1wbGU6IGxpbWl0LXRvLWxhc3QpLlxuICovXG5mdW5jdGlvbiBXaSh0KSB7XG4gICAgY29uc3QgZSA9IHpzKHtcbiAgICAgICAgcGFyZW50OiB0LnBhcmVudCxcbiAgICAgICAgc3RydWN0dXJlZFF1ZXJ5OiB0LnN0cnVjdHVyZWRRdWVyeVxuICAgIH0pO1xuICAgIHJldHVybiBcIkxBU1RcIiA9PT0gdC5saW1pdFR5cGUgPyBhbihlLCBlLmxpbWl0LCBcIkxcIiAvKiBMYXN0ICovKSA6IGU7XG59XG5cbi8qKiBFbmNvZGVzIGEgTmFtZWRRdWVyeSBwcm90byBvYmplY3QgdG8gYSBOYW1lZFF1ZXJ5IG1vZGVsIG9iamVjdC4gKi9cbi8qKiBFbmNvZGVzIGEgRGJEb2N1bWVudE92ZXJsYXkgb2JqZWN0IHRvIGFuIE92ZXJsYXkgbW9kZWwgb2JqZWN0LiAqL1xuZnVuY3Rpb24gemkodCwgZSkge1xuICAgIHJldHVybiBuZXcgTWkoZS5sYXJnZXN0QmF0Y2hJZCwgR3ModC5yZSwgZS5vdmVybGF5TXV0YXRpb24pKTtcbn1cblxuLyoqIERlY29kZXMgYW4gT3ZlcmxheSBtb2RlbCBvYmplY3QgaW50byBhIERiRG9jdW1lbnRPdmVybGF5IG9iamVjdC4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgRGJEb2N1bWVudE92ZXJsYXlLZXkgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gdXNlciBhbmRcbiAqIGRvY3VtZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gSGkodCwgZSkge1xuICAgIGNvbnN0IG4gPSBlLnBhdGgubGFzdFNlZ21lbnQoKTtcbiAgICByZXR1cm4gWyB0LCByaShlLnBhdGgucG9wTGFzdCgpKSwgbiBdO1xufVxuXG5mdW5jdGlvbiBKaSh0LCBlLCBuLCBzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZXhJZDogdCxcbiAgICAgICAgdWlkOiBlLnVpZCB8fCBcIlwiLFxuICAgICAgICBzZXF1ZW5jZU51bWJlcjogbixcbiAgICAgICAgcmVhZFRpbWU6IHFpKHMucmVhZFRpbWUpLFxuICAgICAgICBkb2N1bWVudEtleTogcmkocy5kb2N1bWVudEtleS5wYXRoKSxcbiAgICAgICAgbGFyZ2VzdEJhdGNoSWQ6IHMubGFyZ2VzdEJhdGNoSWRcbiAgICB9O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBZaSB7XG4gICAgZ2V0QnVuZGxlTWV0YWRhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gWGkodCkuZ2V0KGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKHQpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IChlID0gdCkuYnVuZGxlSWQsXG4gICAgICAgICAgICAgICAgY3JlYXRlVGltZTogS2koZS5jcmVhdGVUaW1lKSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBlLnZlcnNpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiogRW5jb2RlcyBhIERiQnVuZGxlIHRvIGEgQnVuZGxlTWV0YWRhdGEgb2JqZWN0LiAqL1xuICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAvKiogRW5jb2RlcyBhIEJ1bmRsZU1ldGFkYXRhIHRvIGEgRGJCdW5kbGUuICovICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNhdmVCdW5kbGVNZXRhZGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBYaSh0KS5wdXQoe1xuICAgICAgICAgICAgYnVuZGxlSWQ6IChuID0gZSkuaWQsXG4gICAgICAgICAgICBjcmVhdGVUaW1lOiBxaShEcyhuLmNyZWF0ZVRpbWUpKSxcbiAgICAgICAgICAgIHZlcnNpb246IG4udmVyc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIC8qKiBFbmNvZGVzIGEgRGJOYW1lZFF1ZXJ5IHRvIGEgTmFtZWRRdWVyeS4gKi8gICAgfVxuICAgIGdldE5hbWVkUXVlcnkodCwgZSkge1xuICAgICAgICByZXR1cm4gWmkodCkuZ2V0KGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKHQpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogKGUgPSB0KS5uYW1lLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBXaShlLmJ1bmRsZWRRdWVyeSksXG4gICAgICAgICAgICAgICAgcmVhZFRpbWU6IEtpKGUucmVhZFRpbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAvKiogRW5jb2RlcyBhIE5hbWVkUXVlcnkgZnJvbSBhIGJ1bmRsZSBwcm90byB0byBhIERiTmFtZWRRdWVyeS4gKi8gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc2F2ZU5hbWVkUXVlcnkodCwgZSkge1xuICAgICAgICByZXR1cm4gWmkodCkucHV0KGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdC5uYW1lLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBxaShEcyh0LnJlYWRUaW1lKSksXG4gICAgICAgICAgICAgICAgYnVuZGxlZFF1ZXJ5OiB0LmJ1bmRsZWRRdWVyeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfShlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgYnVuZGxlcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gWGkodCkge1xuICAgIHJldHVybiBOaSh0LCBcImJ1bmRsZXNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBuYW1lZFF1ZXJpZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIFppKHQpIHtcbiAgICByZXR1cm4gTmkodCwgXCJuYW1lZFF1ZXJpZXNcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIERvY3VtZW50T3ZlcmxheUNhY2hlIHVzaW5nIEluZGV4ZWREYi5cbiAqLyBjbGFzcyB0ciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgLSBUaGUgZG9jdW1lbnQgc2VyaWFsaXplci5cbiAgICAgKiBAcGFyYW0gdXNlcklkIC0gVGhlIHVzZXJJZCBmb3Igd2hpY2ggd2UgYXJlIGFjY2Vzc2luZyBvdmVybGF5cy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuSXQgPSB0LCB0aGlzLnVzZXJJZCA9IGU7XG4gICAgfVxuICAgIHN0YXRpYyBvZSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnVpZCB8fCBcIlwiO1xuICAgICAgICByZXR1cm4gbmV3IHRyKHQsIG4pO1xuICAgIH1cbiAgICBnZXRPdmVybGF5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGVyKHQpLmdldChIaSh0aGlzLnVzZXJJZCwgZSkpLm5leHQoKHQgPT4gdCA/IHppKHRoaXMuSXQsIHQpIDogbnVsbCkpO1xuICAgIH1cbiAgICBnZXRPdmVybGF5cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB1cygpO1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaChlLCAoZSA9PiB0aGlzLmdldE92ZXJsYXkodCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBudWxsICE9PSB0ICYmIG4uc2V0KGUsIHQpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIHNhdmVPdmVybGF5cyh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoKG4sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgTWkoZSwgaSk7XG4gICAgICAgICAgICBzLnB1c2godGhpcy51ZSh0LCByKSk7XG4gICAgICAgIH0pKSwgQXQud2FpdEZvcihzKTtcbiAgICB9XG4gICAgcmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBTZXQ7XG4gICAgICAgIC8vIEdldCB0aGUgc2V0IG9mIHVuaXF1ZSBjb2xsZWN0aW9uIHBhdGhzLlxuICAgICAgICAgICAgICAgIGUuZm9yRWFjaCgodCA9PiBzLmFkZChyaSh0LmdldENvbGxlY3Rpb25QYXRoKCkpKSkpO1xuICAgICAgICBjb25zdCBpID0gW107XG4gICAgICAgIHJldHVybiBzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IElEQktleVJhbmdlLmJvdW5kKFsgdGhpcy51c2VySWQsIGUsIG4gXSwgWyB0aGlzLnVzZXJJZCwgZSwgbiArIDEgXSwgXG4gICAgICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCk7XG4gICAgICAgICAgICBpLnB1c2goZXIodCkuWShcImNvbGxlY3Rpb25QYXRoT3ZlcmxheUluZGV4XCIsIHMpKTtcbiAgICAgICAgfSkpLCBBdC53YWl0Rm9yKGkpO1xuICAgIH1cbiAgICBnZXRPdmVybGF5c0ZvckNvbGxlY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gdXMoKSwgaSA9IHJpKGUpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgaSwgbiBdLCBbIHRoaXMudXNlcklkLCBpLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIGVyKHQpLlcoXCJjb2xsZWN0aW9uUGF0aE92ZXJsYXlJbmRleFwiLCByKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHppKHRoaXMuSXQsIGUpO1xuICAgICAgICAgICAgICAgIHMuc2V0KHQuZ2V0S2V5KCksIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gdXMoKTtcbiAgICAgICAgbGV0IHI7XG4gICAgICAgIC8vIFdlIHdhbnQgYmF0Y2ggSURzIGxhcmdlciB0aGFuIGBzaW5jZUJhdGNoSWRgLCBhbmQgc28gdGhlIGxvd2VyIGJvdW5kXG4gICAgICAgIC8vIGlzIG5vdCBpbmNsdXNpdmUuXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IElEQktleVJhbmdlLmJvdW5kKFsgdGhpcy51c2VySWQsIGUsIG4gXSwgWyB0aGlzLnVzZXJJZCwgZSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMCk7XG4gICAgICAgIHJldHVybiBlcih0KS5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcImNvbGxlY3Rpb25Hcm91cE92ZXJsYXlJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IG9cbiAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBkbyBub3Qgd2FudCB0byByZXR1cm4gcGFydGlhbCBiYXRjaCBvdmVybGF5cywgZXZlbiBpZiB0aGUgc2l6ZVxuICAgICAgICAgICAgLy8gb2YgdGhlIHJlc3VsdCBzZXQgZXhjZWVkcyB0aGUgZ2l2ZW4gYGNvdW50YCBhcmd1bWVudC4gVGhlcmVmb3JlLCB3ZVxuICAgICAgICAgICAgLy8gY29udGludWUgdG8gYWdncmVnYXRlIHJlc3VsdHMgZXZlbiBhZnRlciB0aGUgcmVzdWx0IHNpemUgZXhjZWVkc1xuICAgICAgICAgICAgLy8gYGNvdW50YCBpZiB0aGVyZSBhcmUgbW9yZSBvdmVybGF5cyBmcm9tIHRoZSBgY3VycmVudEJhdGNoSWRgLlxuICAgICAgICAgICAgY29uc3QgbyA9IHppKHRoaXMuSXQsIGUpO1xuICAgICAgICAgICAgaS5zaXplKCkgPCBzIHx8IG8ubGFyZ2VzdEJhdGNoSWQgPT09IHIgPyAoaS5zZXQoby5nZXRLZXkoKSwgbyksIHIgPSBvLmxhcmdlc3RCYXRjaElkKSA6IG4uZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICB1ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBlcih0KS5wdXQoZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgY29uc3QgW3MsIGksIHJdID0gSGkoZSwgbi5tdXRhdGlvbi5rZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvblBhdGg6IGksXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRJZDogcixcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IG4ubXV0YXRpb24ua2V5LmdldENvbGxlY3Rpb25Hcm91cCgpLFxuICAgICAgICAgICAgICAgIGxhcmdlc3RCYXRjaElkOiBuLmxhcmdlc3RCYXRjaElkLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlNdXRhdGlvbjogS3ModC5yZSwgbi5tdXRhdGlvbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0odGhpcy5JdCwgdGhpcy51c2VySWQsIGUpKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBkb2N1bWVudCBvdmVybGF5IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBlcih0KSB7XG4gICAgcmV0dXJuIE5pKHQsIFwiZG9jdW1lbnRPdmVybGF5c1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIE5vdGU6IFRoaXMgY29kZSBpcyBjb3BpZWQgZnJvbSB0aGUgYmFja2VuZC4gQ29kZSB0aGF0IGlzIG5vdCB1c2VkIGJ5XG4vLyBGaXJlc3RvcmUgd2FzIHJlbW92ZWQuXG4vKiogRmlyZXN0b3JlIGluZGV4IHZhbHVlIHdyaXRlci4gICovXG5jbGFzcyBuciB7XG4gICAgY29uc3RydWN0b3IoKSB7fVxuICAgIC8vIFRoZSB3cml0ZSBtZXRob2RzIGJlbG93IHNob3J0LWNpcmN1aXQgd3JpdGluZyB0ZXJtaW5hdG9ycyBmb3IgdmFsdWVzXG4gICAgLy8gY29udGFpbmluZyBhICh0ZXJtaW5hdGluZykgdHJ1bmNhdGVkIHZhbHVlLlxuICAgIC8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSByZXN1bHRpbmcgZW5jb2RpbmcgZm9yOlxuICAgIC8vIFtcImJhclwiLCBbMiwgXCJmb29cIl1dIC0+IChTVFJJTkcsIFwiYmFyXCIsIFRFUk0sIEFSUkFZLCBOVU1CRVIsIDIsIFNUUklORywgXCJmb29cIiwgVEVSTSwgVEVSTSwgVEVSTSlcbiAgICAvLyBbXCJiYXJcIiwgWzIsIHRydW5jYXRlZChcImZvb1wiKV1dIC0+IChTVFJJTkcsIFwiYmFyXCIsIFRFUk0sIEFSUkFZLCBOVU1CRVIsIDIsIFNUUklORywgXCJmb29cIiwgVFJVTkMpXG4gICAgLy8gW1wiYmFyXCIsIHRydW5jYXRlZChbXCJmb29cIl0pXSAtPiAoU1RSSU5HLCBcImJhclwiLCBURVJNLCBBUlJBWS4gU1RSSU5HLCBcImZvb1wiLCBURVJNLCBUUlVOQylcbiAgICAvKiogV3JpdGVzIGFuIGluZGV4IHZhbHVlLiAgKi9cbiAgICBjZSh0LCBlKSB7XG4gICAgICAgIHRoaXMuYWUodCwgZSksIFxuICAgICAgICAvLyBXcml0ZSBzZXBhcmF0b3IgdG8gc3BsaXQgaW5kZXggdmFsdWVzXG4gICAgICAgIC8vIChzZWUgZ28vZmlyZXN0b3JlLXN0b3JhZ2UtZm9ybWF0I2VuY29kaW5ncykuXG4gICAgICAgIGUuaGUoKTtcbiAgICB9XG4gICAgYWUodCwgZSkge1xuICAgICAgICBpZiAoXCJudWxsVmFsdWVcIiBpbiB0KSB0aGlzLmxlKGUsIDUpOyBlbHNlIGlmIChcImJvb2xlYW5WYWx1ZVwiIGluIHQpIHRoaXMubGUoZSwgMTApLCBcbiAgICAgICAgZS5mZSh0LmJvb2xlYW5WYWx1ZSA/IDEgOiAwKTsgZWxzZSBpZiAoXCJpbnRlZ2VyVmFsdWVcIiBpbiB0KSB0aGlzLmxlKGUsIDE1KSwgZS5mZShKdCh0LmludGVnZXJWYWx1ZSkpOyBlbHNlIGlmIChcImRvdWJsZVZhbHVlXCIgaW4gdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IEp0KHQuZG91YmxlVmFsdWUpO1xuICAgICAgICAgICAgaXNOYU4obikgPyB0aGlzLmxlKGUsIDEzKSA6ICh0aGlzLmxlKGUsIDE1KSwgaWUobikgPyBcbiAgICAgICAgICAgIC8vIC0wLjAsIDAgYW5kIDAuMCBhcmUgYWxsIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICAgICAgICAgIGUuZmUoMCkgOiBlLmZlKG4pKTtcbiAgICAgICAgfSBlbHNlIGlmIChcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQudGltZXN0YW1wVmFsdWU7XG4gICAgICAgICAgICB0aGlzLmxlKGUsIDIwKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgbiA/IGUuZGUobikgOiAoZS5kZShgJHtuLnNlY29uZHMgfHwgXCJcIn1gKSwgZS5mZShuLm5hbm9zIHx8IDApKTtcbiAgICAgICAgfSBlbHNlIGlmIChcInN0cmluZ1ZhbHVlXCIgaW4gdCkgdGhpcy5fZSh0LnN0cmluZ1ZhbHVlLCBlKSwgdGhpcy53ZShlKTsgZWxzZSBpZiAoXCJieXRlc1ZhbHVlXCIgaW4gdCkgdGhpcy5sZShlLCAzMCksIFxuICAgICAgICBlLm1lKFl0KHQuYnl0ZXNWYWx1ZSkpLCB0aGlzLndlKGUpOyBlbHNlIGlmIChcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCkgdGhpcy5nZSh0LnJlZmVyZW5jZVZhbHVlLCBlKTsgZWxzZSBpZiAoXCJnZW9Qb2ludFZhbHVlXCIgaW4gdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2VvUG9pbnRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMubGUoZSwgNDUpLCBlLmZlKG4ubGF0aXR1ZGUgfHwgMCksIGUuZmUobi5sb25naXR1ZGUgfHwgMCk7XG4gICAgICAgIH0gZWxzZSBcIm1hcFZhbHVlXCIgaW4gdCA/IEVlKHQpID8gdGhpcy5sZShlLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgOiAodGhpcy55ZSh0Lm1hcFZhbHVlLCBlKSwgXG4gICAgICAgIHRoaXMud2UoZSkpIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/ICh0aGlzLnBlKHQuYXJyYXlWYWx1ZSwgZSksIHRoaXMud2UoZSkpIDogTygpO1xuICAgIH1cbiAgICBfZSh0LCBlKSB7XG4gICAgICAgIHRoaXMubGUoZSwgMjUpLCB0aGlzLkllKHQsIGUpO1xuICAgIH1cbiAgICBJZSh0LCBlKSB7XG4gICAgICAgIGUuZGUodCk7XG4gICAgfVxuICAgIHllKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHQuZmllbGRzIHx8IHt9O1xuICAgICAgICB0aGlzLmxlKGUsIDU1KTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIE9iamVjdC5rZXlzKG4pKSB0aGlzLl9lKHQsIGUpLCB0aGlzLmFlKG5bdF0sIGUpO1xuICAgIH1cbiAgICBwZSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0LnZhbHVlcyB8fCBbXTtcbiAgICAgICAgdGhpcy5sZShlLCA1MCk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBuKSB0aGlzLmFlKHQsIGUpO1xuICAgIH1cbiAgICBnZSh0LCBlKSB7XG4gICAgICAgIHRoaXMubGUoZSwgMzcpO1xuICAgICAgICBjdC5mcm9tTmFtZSh0KS5wYXRoLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5sZShlLCA2MCksIHRoaXMuSWUodCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgbGUodCwgZSkge1xuICAgICAgICB0LmZlKGUpO1xuICAgIH1cbiAgICB3ZSh0KSB7XG4gICAgICAgIC8vIFdoaWxlIHRoZSBTREsgZG9lcyBub3QgaW1wbGVtZW50IHRydW5jYXRpb24sIHRoZSB0cnVuY2F0aW9uIG1hcmtlciBpc1xuICAgICAgICAvLyB1c2VkIHRvIHRlcm1pbmF0ZSBhbGwgdmFyaWFibGUgbGVuZ3RoIHZhbHVlcyAod2hpY2ggYXJlIHN0cmluZ3MsIGJ5dGVzLFxuICAgICAgICAvLyByZWZlcmVuY2VzLCBhcnJheXMgYW5kIG1hcHMpLlxuICAgICAgICB0LmZlKDIpO1xuICAgIH1cbn1cblxubnIuVGUgPSBuZXcgbnI7XG5cbi8qKlxuICogQ291bnRzIHRoZSBudW1iZXIgb2YgemVyb3MgaW4gYSBieXRlLlxuICpcbiAqIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gKi9cbmZ1bmN0aW9uIHNyKHQpIHtcbiAgICBpZiAoMCA9PT0gdCkgcmV0dXJuIDg7XG4gICAgbGV0IGUgPSAwO1xuICAgIHJldHVybiB0ID4+IDQgPT0gMCAmJiAoXG4gICAgLy8gVGVzdCBpZiB0aGUgZmlyc3QgZm91ciBiaXRzIGFyZSB6ZXJvLlxuICAgIGUgKz0gNCwgdCA8PD0gNCksIHQgPj4gNiA9PSAwICYmIChcbiAgICAvLyBUZXN0IGlmIHRoZSBmaXJzdCB0d28gKG9yIG5leHQgdHdvKSBiaXRzIGFyZSB6ZXJvLlxuICAgIGUgKz0gMiwgdCA8PD0gMiksIHQgPj4gNyA9PSAwICYmIChcbiAgICAvLyBUZXN0IGlmIHRoZSByZW1haW5pbmcgYml0IGlzIHplcm8uXG4gICAgZSArPSAxKSwgZTtcbn1cblxuLyoqIENvdW50cyB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3MgaW4gdGhlIGdpdmVuIGJ5dGUgYXJyYXkuICovXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBcInZhbHVlXCIuIExlYWRpbmcgemVybyBieXRlc1xuICogYXJlIHNraXBwZWQuXG4gKi9cbmZ1bmN0aW9uIGlyKHQpIHtcbiAgICAvLyBUaGlzIGlzIGp1c3QgdGhlIG51bWJlciBvZiBieXRlcyBmb3IgdGhlIHVuc2lnbmVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gICAgY29uc3QgZSA9IDY0IC0gZnVuY3Rpb24odCkge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgODsgKytuKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gc3IoMjU1ICYgdFtuXSk7XG4gICAgICAgICAgICBpZiAoZSArPSBzLCA4ICE9PSBzKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTtcbiAgICB9KHQpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoZSAvIDgpO1xufVxuXG4vKipcbiAqIE9yZGVyZWRDb2RlV3JpdGVyIGlzIGEgbWluaW1hbC1hbGxvY2F0aW9uIGltcGxlbWVudGF0aW9uIG9mIHRoZSB3cml0aW5nXG4gKiBiZWhhdmlvciBkZWZpbmVkIGJ5IHRoZSBiYWNrZW5kLlxuICpcbiAqIFRoZSBjb2RlIGlzIHBvcnRlZCBmcm9tIGl0cyBKYXZhIGNvdW50ZXJwYXJ0LlxuICovIGNsYXNzIHJyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheSgxMDI0KSwgdGhpcy5wb3NpdGlvbiA9IDA7XG4gICAgfVxuICAgIEVlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBsZXQgbiA9IGUubmV4dCgpO1xuICAgICAgICBmb3IgKDshbi5kb25lOyApIHRoaXMuQWUobi52YWx1ZSksIG4gPSBlLm5leHQoKTtcbiAgICAgICAgdGhpcy5SZSgpO1xuICAgIH1cbiAgICBiZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgbGV0IG4gPSBlLm5leHQoKTtcbiAgICAgICAgZm9yICg7IW4uZG9uZTsgKSB0aGlzLlBlKG4udmFsdWUpLCBuID0gZS5uZXh0KCk7XG4gICAgICAgIHRoaXMudmUoKTtcbiAgICB9XG4gICAgLyoqIFdyaXRlcyB1dGY4IGJ5dGVzIGludG8gdGhpcyBieXRlIHNlcXVlbmNlLCBhc2NlbmRpbmcuICovICAgIFZlKHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBpZiAodCA8IDEyOCkgdGhpcy5BZSh0KTsgZWxzZSBpZiAodCA8IDIwNDgpIHRoaXMuQWUoOTYwIHwgdCA+Pj4gNiksIHRoaXMuQWUoMTI4IHwgNjMgJiB0KTsgZWxzZSBpZiAoZSA8IFwiXFx1ZDgwMFwiIHx8IFwiXFx1ZGJmZlwiIDwgZSkgdGhpcy5BZSg0ODAgfCB0ID4+PiAxMiksIFxuICAgICAgICAgICAgdGhpcy5BZSgxMjggfCA2MyAmIHQgPj4+IDYpLCB0aGlzLkFlKDEyOCB8IDYzICYgdCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNvZGVQb2ludEF0KDApO1xuICAgICAgICAgICAgICAgIHRoaXMuQWUoMjQwIHwgdCA+Pj4gMTgpLCB0aGlzLkFlKDEyOCB8IDYzICYgdCA+Pj4gMTIpLCB0aGlzLkFlKDEyOCB8IDYzICYgdCA+Pj4gNiksIFxuICAgICAgICAgICAgICAgIHRoaXMuQWUoMTI4IHwgNjMgJiB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLlJlKCk7XG4gICAgfVxuICAgIC8qKiBXcml0ZXMgdXRmOCBieXRlcyBpbnRvIHRoaXMgYnl0ZSBzZXF1ZW5jZSwgZGVzY2VuZGluZyAqLyAgICBTZSh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgaWYgKHQgPCAxMjgpIHRoaXMuUGUodCk7IGVsc2UgaWYgKHQgPCAyMDQ4KSB0aGlzLlBlKDk2MCB8IHQgPj4+IDYpLCB0aGlzLlBlKDEyOCB8IDYzICYgdCk7IGVsc2UgaWYgKGUgPCBcIlxcdWQ4MDBcIiB8fCBcIlxcdWRiZmZcIiA8IGUpIHRoaXMuUGUoNDgwIHwgdCA+Pj4gMTIpLCBcbiAgICAgICAgICAgIHRoaXMuUGUoMTI4IHwgNjMgJiB0ID4+PiA2KSwgdGhpcy5QZSgxMjggfCA2MyAmIHQpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5jb2RlUG9pbnRBdCgwKTtcbiAgICAgICAgICAgICAgICB0aGlzLlBlKDI0MCB8IHQgPj4+IDE4KSwgdGhpcy5QZSgxMjggfCA2MyAmIHQgPj4+IDEyKSwgdGhpcy5QZSgxMjggfCA2MyAmIHQgPj4+IDYpLCBcbiAgICAgICAgICAgICAgICB0aGlzLlBlKDEyOCB8IDYzICYgdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52ZSgpO1xuICAgIH1cbiAgICBEZSh0KSB7XG4gICAgICAgIC8vIFZhbHVlcyBhcmUgZW5jb2RlZCB3aXRoIGEgc2luZ2xlIGJ5dGUgbGVuZ3RoIHByZWZpeCwgZm9sbG93ZWQgYnkgdGhlXG4gICAgICAgIC8vIGFjdHVhbCB2YWx1ZSBpbiBiaWctZW5kaWFuIGZvcm1hdCB3aXRoIGxlYWRpbmcgMCBieXRlcyBkcm9wcGVkLlxuICAgICAgICBjb25zdCBlID0gdGhpcy5DZSh0KSwgbiA9IGlyKGUpO1xuICAgICAgICB0aGlzLnhlKDEgKyBuKSwgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IDI1NSAmIG47XG4gICAgICAgIC8vIFdyaXRlIHRoZSBsZW5ndGhcbiAgICAgICAgZm9yIChsZXQgdCA9IGUubGVuZ3RoIC0gbjsgdCA8IGUubGVuZ3RoOyArK3QpIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSAyNTUgJiBlW3RdO1xuICAgIH1cbiAgICBOZSh0KSB7XG4gICAgICAgIC8vIFZhbHVlcyBhcmUgZW5jb2RlZCB3aXRoIGEgc2luZ2xlIGJ5dGUgbGVuZ3RoIHByZWZpeCwgZm9sbG93ZWQgYnkgdGhlXG4gICAgICAgIC8vIGludmVydGVkIHZhbHVlIGluIGJpZy1lbmRpYW4gZm9ybWF0IHdpdGggbGVhZGluZyAwIGJ5dGVzIGRyb3BwZWQuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLkNlKHQpLCBuID0gaXIoZSk7XG4gICAgICAgIHRoaXMueGUoMSArIG4pLCB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gfigyNTUgJiBuKTtcbiAgICAgICAgLy8gV3JpdGUgdGhlIGxlbmd0aFxuICAgICAgICBmb3IgKGxldCB0ID0gZS5sZW5ndGggLSBuOyB0IDwgZS5sZW5ndGg7ICsrdCkgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IH4oMjU1ICYgZVt0XSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0aGUgXCJpbmZpbml0eVwiIGJ5dGUgc2VxdWVuY2UgdGhhdCBzb3J0cyBhZnRlciBhbGwgb3RoZXIgYnl0ZVxuICAgICAqIHNlcXVlbmNlcyB3cml0dGVuIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKi8gICAga2UoKSB7XG4gICAgICAgIHRoaXMuT2UoMjU1KSwgdGhpcy5PZSgyNTUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdGhlIFwiaW5maW5pdHlcIiBieXRlIHNlcXVlbmNlIHRoYXQgc29ydHMgYmVmb3JlIGFsbCBvdGhlciBieXRlXG4gICAgICogc2VxdWVuY2VzIHdyaXR0ZW4gaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKi8gICAgTWUoKSB7XG4gICAgICAgIHRoaXMuRmUoMjU1KSwgdGhpcy5GZSgyNTUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGJ1ZmZlciBzdWNoIHRoYXQgaXQgaXMgdGhlIHNhbWUgYXMgd2hlbiBpdCB3YXMgbmV3bHlcbiAgICAgKiBjb25zdHJ1Y3RlZC5cbiAgICAgKi8gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgIH1cbiAgICBzZWVkKHQpIHtcbiAgICAgICAgdGhpcy54ZSh0Lmxlbmd0aCksIHRoaXMuYnVmZmVyLnNldCh0LCB0aGlzLnBvc2l0aW9uKSwgdGhpcy5wb3NpdGlvbiArPSB0Lmxlbmd0aDtcbiAgICB9XG4gICAgLyoqIE1ha2VzIGEgY29weSBvZiB0aGUgZW5jb2RlZCBieXRlcyBpbiB0aGlzIGJ1ZmZlci4gICovICAgICRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMCwgdGhpcy5wb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYHZhbGAgaW50byBhbiBlbmNvZGluZyBzbyB0aGF0IHRoZSBvcmRlciBtYXRjaGVzIHRoZSBJRUVFIDc1NFxuICAgICAqIGZsb2F0aW5nLXBvaW50IGNvbXBhcmlzb24gcmVzdWx0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uczpcbiAgICAgKiAgIC0wLjAgPCAwLjBcbiAgICAgKiAgIGFsbCBub24tTmFOIDwgTmFOXG4gICAgICogICBOYU4gPSBOYU5cbiAgICAgKi8gICAgQ2UodCkge1xuICAgICAgICBjb25zdCBlID0gXG4gICAgICAgIC8qKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgbnVtYmVyIHRvIGEgYnl0ZSBhcnJheSAodXNpbmcgYmlnIGVuZGlhbiBlbmNvZGluZykuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDgpKTtcbiAgICAgICAgICAgIHJldHVybiBlLnNldEZsb2F0NjQoMCwgdCwgLyogbGl0dGxlRW5kaWFuPSAqLyAhMSksIG5ldyBVaW50OEFycmF5KGUuYnVmZmVyKTtcbiAgICAgICAgfSh0KSwgbiA9IDAgIT0gKDEyOCAmIGVbMF0pO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZmlyc3QgYml0IGlzIHNldC4gV2UgdXNlIGEgYml0IG1hc2sgc2luY2UgdmFsdWVbMF0gaXNcbiAgICAgICAgLy8gZW5jb2RlZCBhcyBhIG51bWJlciBmcm9tIDAgdG8gMjU1LlxuICAgICAgICAgICAgICAgIC8vIFJldmVydCB0aGUgdHdvIGNvbXBsZW1lbnQgdG8gZ2V0IG5hdHVyYWwgb3JkZXJpbmdcbiAgICAgICAgZVswXSBePSBuID8gMjU1IDogMTI4O1xuICAgICAgICBmb3IgKGxldCB0ID0gMTsgdCA8IGUubGVuZ3RoOyArK3QpIGVbdF0gXj0gbiA/IDI1NSA6IDA7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICAvKiogV3JpdGVzIGEgc2luZ2xlIGJ5dGUgYXNjZW5kaW5nIHRvIHRoZSBidWZmZXIuICovICAgIEFlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IDI1NSAmIHQ7XG4gICAgICAgIDAgPT09IGUgPyAodGhpcy5PZSgwKSwgdGhpcy5PZSgyNTUpKSA6IDI1NSA9PT0gZSA/ICh0aGlzLk9lKDI1NSksIHRoaXMuT2UoMCkpIDogdGhpcy5PZShlKTtcbiAgICB9XG4gICAgLyoqIFdyaXRlcyBhIHNpbmdsZSBieXRlIGRlc2NlbmRpbmcgdG8gdGhlIGJ1ZmZlci4gICovICAgIFBlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IDI1NSAmIHQ7XG4gICAgICAgIDAgPT09IGUgPyAodGhpcy5GZSgwKSwgdGhpcy5GZSgyNTUpKSA6IDI1NSA9PT0gZSA/ICh0aGlzLkZlKDI1NSksIHRoaXMuRmUoMCkpIDogdGhpcy5GZSh0KTtcbiAgICB9XG4gICAgUmUoKSB7XG4gICAgICAgIHRoaXMuT2UoMCksIHRoaXMuT2UoMSk7XG4gICAgfVxuICAgIHZlKCkge1xuICAgICAgICB0aGlzLkZlKDApLCB0aGlzLkZlKDEpO1xuICAgIH1cbiAgICBPZSh0KSB7XG4gICAgICAgIHRoaXMueGUoMSksIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSB0O1xuICAgIH1cbiAgICBGZSh0KSB7XG4gICAgICAgIHRoaXMueGUoMSksIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSB+dDtcbiAgICB9XG4gICAgeGUodCkge1xuICAgICAgICBjb25zdCBlID0gdCArIHRoaXMucG9zaXRpb247XG4gICAgICAgIGlmIChlIDw9IHRoaXMuYnVmZmVyLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAvLyBUcnkgZG91YmxpbmcuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSAyICogdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICAvLyBTdGlsbCBub3QgYmlnIGVub3VnaD8gSnVzdCBhbGxvY2F0ZSB0aGUgcmlnaHQgc2l6ZS5cbiAgICAgICAgICAgICAgICBuIDwgZSAmJiAobiA9IGUpO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyBidWZmZXIuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgICBzLnNldCh0aGlzLmJ1ZmZlciksIC8vIGNvcHkgb2xkIGRhdGFcbiAgICAgICAgdGhpcy5idWZmZXIgPSBzO1xuICAgIH1cbn1cblxuY2xhc3Mgb3Ige1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5CZSA9IHQ7XG4gICAgfVxuICAgIG1lKHQpIHtcbiAgICAgICAgdGhpcy5CZS5FZSh0KTtcbiAgICB9XG4gICAgZGUodCkge1xuICAgICAgICB0aGlzLkJlLlZlKHQpO1xuICAgIH1cbiAgICBmZSh0KSB7XG4gICAgICAgIHRoaXMuQmUuRGUodCk7XG4gICAgfVxuICAgIGhlKCkge1xuICAgICAgICB0aGlzLkJlLmtlKCk7XG4gICAgfVxufVxuXG5jbGFzcyB1ciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLkJlID0gdDtcbiAgICB9XG4gICAgbWUodCkge1xuICAgICAgICB0aGlzLkJlLmJlKHQpO1xuICAgIH1cbiAgICBkZSh0KSB7XG4gICAgICAgIHRoaXMuQmUuU2UodCk7XG4gICAgfVxuICAgIGZlKHQpIHtcbiAgICAgICAgdGhpcy5CZS5OZSh0KTtcbiAgICB9XG4gICAgaGUoKSB7XG4gICAgICAgIHRoaXMuQmUuTWUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBgRGlyZWN0aW9uYWxJbmRleEJ5dGVFbmNvZGVyYCB1c2luZyBgT3JkZXJlZENvZGVXcml0ZXJgIGZvciB0aGVcbiAqIGFjdHVhbCBlbmNvZGluZy5cbiAqLyBjbGFzcyBjciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuQmUgPSBuZXcgcnIsIHRoaXMuTGUgPSBuZXcgb3IodGhpcy5CZSksIHRoaXMuVWUgPSBuZXcgdXIodGhpcy5CZSk7XG4gICAgfVxuICAgIHNlZWQodCkge1xuICAgICAgICB0aGlzLkJlLnNlZWQodCk7XG4gICAgfVxuICAgIHFlKHQpIHtcbiAgICAgICAgcmV0dXJuIDAgLyogQVNDRU5ESU5HICovID09PSB0ID8gdGhpcy5MZSA6IHRoaXMuVWU7XG4gICAgfVxuICAgICRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5CZS4kZSgpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5CZS5yZXNldCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBSZXByZXNlbnRzIGFuIGluZGV4IGVudHJ5IHNhdmVkIGJ5IHRoZSBTREsgaW4gcGVyc2lzdGVkIHN0b3JhZ2UuICovIGNsYXNzIGFyIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMuaW5kZXhJZCA9IHQsIHRoaXMuZG9jdW1lbnRLZXkgPSBlLCB0aGlzLmFycmF5VmFsdWUgPSBuLCB0aGlzLmRpcmVjdGlvbmFsVmFsdWUgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEluZGV4RW50cnkgZW50cnkgdGhhdCBzb3J0cyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY3VycmVudFxuICAgICAqIGRpcmVjdGlvbmFsIHZhbHVlLlxuICAgICAqLyAgICBLZSgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZGlyZWN0aW9uYWxWYWx1ZS5sZW5ndGgsIGUgPSAwID09PSB0IHx8IDI1NSA9PT0gdGhpcy5kaXJlY3Rpb25hbFZhbHVlW3QgLSAxXSA/IHQgKyAxIDogdCwgbiA9IG5ldyBVaW50OEFycmF5KGUpO1xuICAgICAgICByZXR1cm4gbi5zZXQodGhpcy5kaXJlY3Rpb25hbFZhbHVlLCAwKSwgZSAhPT0gdCA/IG4uc2V0KFsgMCBdLCB0aGlzLmRpcmVjdGlvbmFsVmFsdWUubGVuZ3RoKSA6ICsrbltuLmxlbmd0aCAtIDFdLCBcbiAgICAgICAgbmV3IGFyKHRoaXMuaW5kZXhJZCwgdGhpcy5kb2N1bWVudEtleSwgdGhpcy5hcnJheVZhbHVlLCBuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhyKHQsIGUpIHtcbiAgICBsZXQgbiA9IHQuaW5kZXhJZCAtIGUuaW5kZXhJZDtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiAobiA9IGxyKHQuYXJyYXlWYWx1ZSwgZS5hcnJheVZhbHVlKSwgMCAhPT0gbiA/IG4gOiAobiA9IGxyKHQuZGlyZWN0aW9uYWxWYWx1ZSwgZS5kaXJlY3Rpb25hbFZhbHVlKSwgXG4gICAgMCAhPT0gbiA/IG4gOiBjdC5jb21wYXJhdG9yKHQuZG9jdW1lbnRLZXksIGUuZG9jdW1lbnRLZXkpKSk7XG59XG5cbmZ1bmN0aW9uIGxyKHQsIGUpIHtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubGVuZ3RoICYmIG4gPCBlLmxlbmd0aDsgKytuKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0W25dIC0gZVtuXTtcbiAgICAgICAgaWYgKDAgIT09IHMpIHJldHVybiBzO1xuICAgIH1cbiAgICByZXR1cm4gdC5sZW5ndGggLSBlLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBsaWdodCBxdWVyeSBwbGFubmVyIGZvciBGaXJlc3RvcmUuXG4gKlxuICogVGhpcyBjbGFzcyBtYXRjaGVzIGEgYEZpZWxkSW5kZXhgIGFnYWluc3QgYSBGaXJlc3RvcmUgUXVlcnkgYFRhcmdldGAuIEl0XG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBnaXZlbiBpbmRleCBjYW4gYmUgdXNlZCB0byBzZXJ2ZSB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3djYXNlcyBzb21lIHBvc3NpYmxlIGluZGV4IGNvbmZpZ3VyYXRpb25zOlxuICpcbiAqIFF1ZXJ5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEluZGV4XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0MsIGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz09JywgJ2EnKS53aGVyZSgnYicsICc9PScsICdiJykgICAgICAgICB8IGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKSAgICAgICAgICAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz49JywgJ2EnKS5vcmRlckJ5KCdhJywgJ2Rlc2MnKSAgICAgICAgICB8IGEgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKS5vcmRlckJ5KCdiJykgICAgIHwgYSBBU0MsIGIgQVNDXG4gKiB3aGVyZSgnYScsICc+PScsICdhJykub3JkZXJCeSgnYScpLm9yZGVyQnkoJ2InKSAgICAgfCBhIEFTQ1xuICogd2hlcmUoJ2EnLCAnYXJyYXktY29udGFpbnMnLCAnYScpLm9yZGVyQnkoJ2InKSAgICAgIHwgYSBDT05UQUlOUywgYiBBU0NFTkRJTkdcbiAqIHdoZXJlKCdhJywgJ2FycmF5LWNvbnRhaW5zJywgJ2EnKS5vcmRlckJ5KCdiJykgICAgICB8IGEgQ09OVEFJTlNcbiAqLyBjbGFzcyBmciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZCA9IG51bGwgIT0gdC5jb2xsZWN0aW9uR3JvdXAgPyB0LmNvbGxlY3Rpb25Hcm91cCA6IHQucGF0aC5sYXN0U2VnbWVudCgpLCBcbiAgICAgICAgdGhpcy5HZSA9IHQub3JkZXJCeSwgdGhpcy5RZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5maWx0ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZTtcbiAgICAgICAgICAgIHQuZHQoKSA/IHRoaXMuamUgPSB0IDogdGhpcy5RZS5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgaW5kZXggY2FuIGJlIHVzZWQgdG8gc2VydmUgdGhlIFRhcmdldEluZGV4TWF0Y2hlcidzXG4gICAgICogdGFyZ2V0LlxuICAgICAqXG4gICAgICogQW4gaW5kZXggaXMgY29uc2lkZXJlZCBjYXBhYmxlIG9mIHNlcnZpbmcgdGhlIHRhcmdldCB3aGVuOlxuICAgICAqIC0gVGhlIHRhcmdldCB1c2VzIGFsbCBpbmRleCBzZWdtZW50cyBmb3IgaXRzIGZpbHRlcnMgYW5kIG9yZGVyQnkgY2xhdXNlcy5cbiAgICAgKiAgIFRoZSB0YXJnZXQgY2FuIGhhdmUgYWRkaXRpb25hbCBmaWx0ZXIgYW5kIG9yZGVyQnkgY2xhdXNlcywgYnV0IG5vdFxuICAgICAqICAgZmV3ZXIuXG4gICAgICogLSBJZiBhbiBBcnJheUNvbnRhaW5zL0FycmF5Q29udGFpbnNBbnlmaWx0ZXIgaXMgdXNlZCwgdGhlIGluZGV4IG11c3QgYWxzb1xuICAgICAqICAgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgYENPTlRBSU5TYCBzZWdtZW50LlxuICAgICAqIC0gQWxsIGRpcmVjdGlvbmFsIGluZGV4IHNlZ21lbnRzIGNhbiBiZSBtYXBwZWQgdG8gdGhlIHRhcmdldCBhcyBhIHNlcmllcyBvZlxuICAgICAqICAgZXF1YWxpdHkgZmlsdGVycywgYSBzaW5nbGUgaW5lcXVhbGl0eSBmaWx0ZXIgYW5kIGEgc2VyaWVzIG9mIG9yZGVyQnlcbiAgICAgKiAgIGNsYXVzZXMuXG4gICAgICogLSBUaGUgc2VnbWVudHMgdGhhdCByZXByZXNlbnQgdGhlIGVxdWFsaXR5IGZpbHRlcnMgbWF5IGFwcGVhciBvdXQgb2Ygb3JkZXIuXG4gICAgICogLSBUaGUgb3B0aW9uYWwgc2VnbWVudCBmb3IgdGhlIGluZXF1YWxpdHkgZmlsdGVyIG11c3QgYXBwZWFyIGFmdGVyIGFsbFxuICAgICAqICAgZXF1YWxpdHkgc2VnbWVudHMuXG4gICAgICogLSBUaGUgc2VnbWVudHMgdGhhdCByZXByZXNlbnQgdGhhdCBvcmRlckJ5IGNsYXVzZSBvZiB0aGUgdGFyZ2V0IG11c3QgYXBwZWFyXG4gICAgICogICBpbiBvcmRlciBhZnRlciBhbGwgZXF1YWxpdHkgYW5kIGluZXF1YWxpdHkgc2VnbWVudHMuIFNpbmdsZSBvcmRlckJ5XG4gICAgICogICBjbGF1c2VzIGNhbm5vdCBiZSBza2lwcGVkLCBidXQgYSBjb250aW51b3VzIG9yZGVyQnkgc3VmZml4IG1heSBiZVxuICAgICAqICAgb21pdHRlZC5cbiAgICAgKi8gICAgV2UodCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhcnJheSBlbGVtZW50LCBmaW5kIGEgbWF0Y2hpbmcgZmlsdGVyLlxuICAgICAgICBjb25zdCBlID0gaHQodCk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGUgJiYgIXRoaXMuemUoZSkpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgbiA9IGx0KHQpO1xuICAgICAgICBsZXQgcyA9IDAsIGkgPSAwO1xuICAgICAgICAvLyBQcm9jZXNzIGFsbCBlcXVhbGl0aWVzIGZpcnN0LiBFcXVhbGl0aWVzIGNhbiBhcHBlYXIgb3V0IG9mIG9yZGVyLlxuICAgICAgICBmb3IgKDtzIDwgbi5sZW5ndGggJiYgdGhpcy56ZShuW3NdKTsgKytzKSA7XG4gICAgICAgIC8vIElmIHdlIGFscmVhZHkgaGF2ZSBwcm9jZXNzZWQgYWxsIHNlZ21lbnRzLCBhbGwgc2VnbWVudHMgYXJlIHVzZWQgdG8gc2VydmVcbiAgICAgICAgLy8gdGhlIGVxdWFsaXR5IGZpbHRlcnMgYW5kIHdlIGRvIG5vdCBuZWVkIHRvIG1hcCBhbnkgc2VnbWVudHMgdG8gdGhlXG4gICAgICAgIC8vIHRhcmdldCdzIGluZXF1YWxpdHkgYW5kIG9yZGVyQnkgY2xhdXNlcy5cbiAgICAgICAgICAgICAgICBpZiAocyA9PT0gbi5sZW5ndGgpIHJldHVybiAhMDtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gaW5lcXVhbGl0eSBmaWx0ZXIsIHRoZSBuZXh0IHNlZ21lbnQgbXVzdCBtYXRjaCBib3RoIHRoZVxuICAgICAgICAvLyBmaWx0ZXIgYW5kIHRoZSBmaXJzdCBvcmRlckJ5IGNsYXVzZS5cbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0aGlzLmplKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbltzXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5IZSh0aGlzLmplLCB0KSB8fCAhdGhpcy5KZSh0aGlzLkdlW2krK10sIHQpKSByZXR1cm4gITE7XG4gICAgICAgICAgICArK3M7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIHJlbWFpbmluZyBzZWdtZW50cyBuZWVkIHRvIHJlcHJlc2VudCB0aGUgcHJlZml4IG9mIHRoZSB0YXJnZXQnc1xuICAgICAgICAvLyBvcmRlckJ5LlxuICAgICAgICAgICAgICAgIGZvciAoO3MgPCBuLmxlbmd0aDsgKytzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbltzXTtcbiAgICAgICAgICAgIGlmIChpID49IHRoaXMuR2UubGVuZ3RoIHx8ICF0aGlzLkplKHRoaXMuR2VbaSsrXSwgdCkpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIHplKHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuUWUpIGlmICh0aGlzLkhlKGUsIHQpKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgSGUodCwgZSkge1xuICAgICAgICBpZiAodm9pZCAwID09PSB0IHx8ICF0LmZpZWxkLmlzRXF1YWwoZS5maWVsZFBhdGgpKSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IG4gPSBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gPT09IHQub3AgfHwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IHQub3A7XG4gICAgICAgIHJldHVybiAyIC8qIENPTlRBSU5TICovID09PSBlLmtpbmQgPT09IG47XG4gICAgfVxuICAgIEplKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICEhdC5maWVsZC5pc0VxdWFsKGUuZmllbGRQYXRoKSAmJiAoMCAvKiBBU0NFTkRJTkcgKi8gPT09IGUua2luZCAmJiBcImFzY1wiIC8qIEFTQ0VORElORyAqLyA9PT0gdC5kaXIgfHwgMSAvKiBERVNDRU5ESU5HICovID09PSBlLmtpbmQgJiYgXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA9PT0gdC5kaXIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW4tbWVtb3J5IGltcGxlbWVudGF0aW9uIG9mIEluZGV4TWFuYWdlci5cbiAqLyBjbGFzcyBkciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuWWUgPSBuZXcgX3I7XG4gICAgfVxuICAgIGFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWUuYWRkKGUpLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldENvbGxlY3Rpb25QYXJlbnRzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUodGhpcy5ZZS5nZXRFbnRyaWVzKGUpKTtcbiAgICB9XG4gICAgYWRkRmllbGRJbmRleCh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGRlbGV0ZUZpZWxkSW5kZXgodCwgZSkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ1RhcmdldCh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBnZXRJbmRleFR5cGUodCwgZSkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSgwIC8qIE5PTkUgKi8pO1xuICAgIH1cbiAgICBnZXRGaWVsZEluZGV4ZXModCwgZSkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZShbXSk7XG4gICAgfVxuICAgIGdldE5leHRDb2xsZWN0aW9uR3JvdXBUb1VwZGF0ZSh0KSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXQodCwgZSkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh5dC5taW4oKSk7XG4gICAgfVxuICAgIGdldE1pbk9mZnNldEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh5dC5taW4oKSk7XG4gICAgfVxuICAgIHVwZGF0ZUNvbGxlY3Rpb25Hcm91cCh0LCBlLCBuKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4RW50cmllcyh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBjb2xsZWN0aW9uLXBhcmVudCBpbmRleCBleHBvc2VkIGJ5IE1lbW9yeUluZGV4TWFuYWdlci5cbiAqIEFsc28gdXNlZCBmb3IgaW4tbWVtb3J5IGNhY2hpbmcgYnkgSW5kZXhlZERiSW5kZXhNYW5hZ2VyIGFuZCBpbml0aWFsIGluZGV4IHBvcHVsYXRpb25cbiAqIGluIGluZGV4ZWRkYl9zY2hlbWEudHNcbiAqLyBjbGFzcyBfciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSB7fTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBmYWxzZSBpZiB0aGUgZW50cnkgYWxyZWFkeSBleGlzdGVkLlxuICAgIGFkZCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0Lmxhc3RTZWdtZW50KCksIG4gPSB0LnBvcExhc3QoKSwgcyA9IHRoaXMuaW5kZXhbZV0gfHwgbmV3IHF0KHJ0LmNvbXBhcmF0b3IpLCBpID0gIXMuaGFzKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleFtlXSA9IHMuYWRkKG4pLCBpO1xuICAgIH1cbiAgICBoYXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5sYXN0U2VnbWVudCgpLCBuID0gdC5wb3BMYXN0KCksIHMgPSB0aGlzLmluZGV4W2VdO1xuICAgICAgICByZXR1cm4gcyAmJiBzLmhhcyhuKTtcbiAgICB9XG4gICAgZ2V0RW50cmllcyh0KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5pbmRleFt0XSB8fCBuZXcgcXQocnQuY29tcGFyYXRvcikpLnRvQXJyYXkoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IHdyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5cbi8qKlxuICogQSBwZXJzaXN0ZWQgaW1wbGVtZW50YXRpb24gb2YgSW5kZXhNYW5hZ2VyLlxuICpcbiAqIFBPUlRJTkcgTk9URTogVW5saWtlIGlPUyBhbmQgQW5kcm9pZCwgdGhlIFdlYiBTREsgZG9lcyBub3QgbWVtb2l6ZSBpbmRleFxuICogZGF0YSBhcyBpdCBzdXBwb3J0cyBtdWx0aS10YWIgYWNjZXNzLlxuICovXG5jbGFzcyBtciB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnVzZXIgPSB0LCB0aGlzLmRhdGFiYXNlSWQgPSBlLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGluLW1lbW9yeSBjb3B5IG9mIHRoZSBpbmRleCBlbnRyaWVzIHdlJ3ZlIGFscmVhZHkgd3JpdHRlbiBzaW5jZSB0aGUgU0RLXG4gICAgICAgICAqIGxhdW5jaGVkLiBVc2VkIHRvIGF2b2lkIHJlLXdyaXRpbmcgdGhlIHNhbWUgZW50cnkgcmVwZWF0ZWRseS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyAqTk9UKiBhIGNvbXBsZXRlIGNhY2hlIG9mIHdoYXQncyBpbiBwZXJzaXN0ZW5jZSBhbmQgc28gY2FuIG5ldmVyIGJlXG4gICAgICAgICAqIHVzZWQgdG8gc2F0aXNmeSByZWFkcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuWGUgPSBuZXcgX3IsIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBmcm9tIGEgdGFyZ2V0IHRvIGl0cyBlcXVpdmFsZW50IGxpc3Qgb2Ygc3ViLXRhcmdldHMuIEVhY2ggc3ViLXRhcmdldFxuICAgICAgICAgKiBjb250YWlucyBvbmx5IG9uZSB0ZXJtIGZyb20gdGhlIHRhcmdldCdzIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtIChETkYpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5aZSA9IG5ldyBlcygodCA9PiB4ZSh0KSksICgodCwgZSkgPT4ga2UodCwgZSkpKSwgdGhpcy51aWQgPSB0LnVpZCB8fCBcIlwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGVudHJ5IHRvIHRoZSBjb2xsZWN0aW9uIHBhcmVudCBpbmRleC5cbiAgICAgKlxuICAgICAqIFJlcGVhdGVkIGNhbGxzIGZvciB0aGUgc2FtZSBjb2xsZWN0aW9uUGF0aCBzaG91bGQgYmUgYXZvaWRlZCB3aXRoaW4gYVxuICAgICAqIHRyYW5zYWN0aW9uIGFzIEluZGV4ZWREYkluZGV4TWFuYWdlciBvbmx5IGNhY2hlcyB3cml0ZXMgb25jZSBhIHRyYW5zYWN0aW9uXG4gICAgICogaGFzIGJlZW4gY29tbWl0dGVkLlxuICAgICAqLyAgICBhZGRUb0NvbGxlY3Rpb25QYXJlbnRJbmRleCh0LCBlKSB7XG4gICAgICAgIGlmICghdGhpcy5YZS5oYXMoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmxhc3RTZWdtZW50KCksIHMgPSBlLnBvcExhc3QoKTtcbiAgICAgICAgICAgIHQuYWRkT25Db21taXR0ZWRMaXN0ZW5lcigoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY29sbGVjdGlvbiB0byB0aGUgaW4gbWVtb3J5IGNhY2hlIG9ubHkgaWYgdGhlIHRyYW5zYWN0aW9uIHdhc1xuICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NmdWxseSBjb21taXR0ZWQuXG4gICAgICAgICAgICAgICAgdGhpcy5YZS5hZGQoZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBpID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogbixcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHJpKHMpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGdyKHQpLnB1dChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRDb2xsZWN0aW9uUGFyZW50cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXSwgcyA9IElEQktleVJhbmdlLmJvdW5kKFsgZSwgXCJcIiBdLCBbIGV0KGUpLCBcIlwiIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIGdyKHQpLlcocykubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY29sbGVjdGlvbklkIGd1YXJkIHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgKGFuZCBpc24ndCBhcyBsb25nXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UncmUgcnVubmluZyBpbiBhIHJlYWwgYnJvd3NlciksIGJ1dCB0aGVyZSdzIGEgYnVnIGluXG4gICAgICAgICAgICAgICAgLy8gaW5kZXhlZGRic2hpbSB0aGF0IGJyZWFrcyBvdXIgcmFuZ2UgaW4gb3VyIHRlc3RzIHJ1bm5pbmcgaW4gbm9kZTpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0vaXNzdWVzLzMzNFxuICAgICAgICAgICAgICAgIGlmIChzLmNvbGxlY3Rpb25JZCAhPT0gZSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgbi5wdXNoKGNpKHMucGFyZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBhZGRGaWVsZEluZGV4KHQsIGUpIHtcbiAgICAgICAgLy8gVE9ETyhpbmRleGluZyk6IFZlcmlmeSB0aGF0IHRoZSBhdXRvLWluY3JlbWVudGluZyBpbmRleCBJRCB3b3JrcyBpblxuICAgICAgICAvLyBTYWZhcmkgJiBGaXJlZm94LlxuICAgICAgICBjb25zdCBuID0gcHIodCksIHMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGluZGV4SWQ6IHQuaW5kZXhJZCxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IHQuY29sbGVjdGlvbkdyb3VwLFxuICAgICAgICAgICAgICAgIGZpZWxkczogdC5maWVsZHMubWFwKCh0ID0+IFsgdC5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIHQua2luZCBdKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSk7XG4gICAgICAgIGRlbGV0ZSBzLmluZGV4SWQ7XG4gICAgICAgIC8vIGBpbmRleElkYCBpcyBhdXRvLXBvcHVsYXRlZCBieSBJbmRleGVkRGJcbiAgICAgICAgY29uc3QgaSA9IG4uYWRkKHMpO1xuICAgICAgICBpZiAoZS5pbmRleFN0YXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gSXIodCk7XG4gICAgICAgICAgICByZXR1cm4gaS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICBuLnB1dChKaSh0LCB0aGlzLnVzZXIsIGUuaW5kZXhTdGF0ZS5zZXF1ZW5jZU51bWJlciwgZS5pbmRleFN0YXRlLm9mZnNldCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpLm5leHQoKTtcbiAgICB9XG4gICAgZGVsZXRlRmllbGRJbmRleCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBwcih0KSwgcyA9IElyKHQpLCBpID0geXIodCk7XG4gICAgICAgIHJldHVybiBuLmRlbGV0ZShlLmluZGV4SWQpLm5leHQoKCgpID0+IHMuZGVsZXRlKElEQktleVJhbmdlLmJvdW5kKFsgZS5pbmRleElkIF0sIFsgZS5pbmRleElkICsgMSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCkpKSkubmV4dCgoKCkgPT4gaS5kZWxldGUoSURCS2V5UmFuZ2UuYm91bmQoWyBlLmluZGV4SWQgXSwgWyBlLmluZGV4SWQgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKSkpKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdUYXJnZXQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0geXIodCk7XG4gICAgICAgIGxldCBzID0gITA7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcgTWFwO1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaCh0aGlzLnRuKGUpLCAoZSA9PiB0aGlzLmVuKHQsIGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgcyAmJiAocyA9ICEhdCksIGkuc2V0KGUsIHQpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gZnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIEF0LmZvckVhY2goaSwgKChpLCByKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvO1xuICAgICAgICAgICAgICAgICAgICBDKFwiSW5kZXhlZERiSW5kZXhNYW5hZ2VyXCIsIGBVc2luZyBpbmRleCAke28gPSBpLCBgaWQ9JHtvLmluZGV4SWR9fGNnPSR7by5jb2xsZWN0aW9uR3JvdXB9fGY9JHtvLmZpZWxkcy5tYXAoKHQgPT4gYCR7dC5maWVsZFBhdGh9OiR7dC5raW5kfWApKS5qb2luKFwiLFwiKX1gfSB0byBleGVjdXRlICR7eGUoZSl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaHQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBuKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBNZSh0LCBuLmZpZWxkUGF0aCkpIHN3aXRjaCAoZS5vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS52YWx1ZS5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXktY29udGFpbnNcIiAvKiBBUlJBWV9DT05UQUlOUyAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgZS52YWx1ZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGFyZSBub3QgYXJyYXkgZmlsdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyB0aGUgbGlzdCBvZiB2YWx1ZXMgdGhhdCBhcmUgdXNlZCBpbiAhPSBvciBOT1RfSU4gZmlsdGVycy4gUmV0dXJuc1xuICogYG51bGxgIGlmIHRoZXJlIGFyZSBubyBzdWNoIGZpbHRlcnMuXG4gKi8gKHIsIGkpLCBjID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBNYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgbHQoZSkpIGZvciAoY29uc3QgZSBvZiBNZSh0LCBzLmZpZWxkUGF0aCkpIHN3aXRjaCAoZS5vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBFUVVBTCAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpblwiIC8qIElOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmNvZGUgZXF1YWxpdHkgcHJlZml4LCB3aGljaCBpcyBlbmNvZGVkIGluIHRoZSBpbmRleCB2YWx1ZSBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgaW5lcXVhbGl0eSAoZS5nLiBgYSA9PSAnYScgJiYgYiAhPSAnYidgIGlzIGVuY29kZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBgdmFsdWUgIT0gJ2FiJ2ApLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0KHMuZmllbGRQYXRoLmNhbm9uaWNhbFN0cmluZygpLCBlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogTk9UX0lOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiE9XCIgLyogTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RJbi9Ob3RFcXVhbCBpcyBhbHdheXMgYSBzdWZmaXguIFRoZXJlIGNhbm5vdCBiZSBhbnkgcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VnbWVudHMgYW5kIGhlbmNlIHdlIGNhbiByZXR1cm4gZWFybHkgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZXQocy5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIGUudmFsdWUpLCBBcnJheS5mcm9tKG4udmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIG5vdEluIGJvdW5kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyBhIGxvd2VyIGJvdW5kIG9mIGZpZWxkIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQgdG9cbiAqIHNjYW4gdGhlIGluZGV4IGRlZmluZWQgYnkgYGZpZWxkSW5kZXhgLiBSZXR1cm5zIGBNSU5fVkFMVUVgIGlmIG5vIGxvd2VyIGJvdW5kXG4gKiBleGlzdHMuXG4gKi8gKHIsIGkpLCBhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHNlZ21lbnQsIHJldHJpZXZlIGEgbG93ZXIgYm91bmQgaWYgdGhlcmUgaXMgYSBzdWl0YWJsZSBmaWx0ZXIgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0QXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgbHQoZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gMCAvKiBBU0NFTkRJTkcgKi8gPT09IGkua2luZCA/IEZlKHQsIGkuZmllbGRQYXRoLCB0LnN0YXJ0QXQpIDogJGUodCwgaS5maWVsZFBhdGgsIHQuc3RhcnRBdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5wdXNoKGUudmFsdWUpLCBzICYmIChzID0gZS5pbmNsdXNpdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB6ZShuLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKipcbiAqIFJldHVybnMgYW4gdXBwZXIgYm91bmQgb2YgZmllbGQgdmFsdWVzIHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gZW5kaW5nIHBvaW50XG4gKiB3aGVuIHNjYW5uaW5nIHRoZSBpbmRleCBkZWZpbmVkIGJ5IGBmaWVsZEluZGV4YC4gUmV0dXJucyBgTUFYX1ZBTFVFYCBpZiBub1xuICogdXBwZXIgYm91bmQgZXhpc3RzLlxuICovIChyLCBpKSwgaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBzZWdtZW50LCByZXRyaWV2ZSBhbiB1cHBlciBib3VuZCBpZiB0aGVyZSBpcyBhIHN1aXRhYmxlIGZpbHRlciBvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kQXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgbHQoZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gMCAvKiBBU0NFTkRJTkcgKi8gPT09IGkua2luZCA/ICRlKHQsIGkuZmllbGRQYXRoLCB0LmVuZEF0KSA6IEZlKHQsIGkuZmllbGRQYXRoLCB0LmVuZEF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2goZS52YWx1ZSksIHMgJiYgKHMgPSBlLmluY2x1c2l2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHplKG4sIHMpO1xuICAgICAgICAgICAgICAgICAgICB9KHIsIGkpLCBsID0gdGhpcy5ubihpLCByLCBhKSwgZiA9IHRoaXMubm4oaSwgciwgaCksIGQgPSB0aGlzLnNuKGksIHIsIGMpLCBfID0gdGhpcy5ybihpLmluZGV4SWQsIHUsIGwsIGEuaW5jbHVzaXZlLCBmLCBoLmluY2x1c2l2ZSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBBdC5mb3JFYWNoKF8sIChpID0+IG4uSihpLCBlLmxpbWl0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGN0LmZyb21TZWdtZW50cyhlLmRvY3VtZW50S2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmhhcyhuKSB8fCAodCA9IHQuYWRkKG4pLCBzLnB1c2gobikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgICAgICAgICB9KSkubmV4dCgoKCkgPT4gcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUobnVsbCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdG4odCkge1xuICAgICAgICBsZXQgZSA9IHRoaXMuWmUuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSB8fCAoXG4gICAgICAgIC8vIFRPRE8ob3JxdWVyeSk6IEltcGxlbWVudCBETkYgdHJhbnNmb3JtXG4gICAgICAgIGUgPSBbIHQgXSwgdGhpcy5aZS5zZXQodCwgZSksIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEga2V5IHJhbmdlIHF1ZXJ5IG9uIGBEYkluZGV4RW50cnlTdG9yZWAgdGhhdCB1bmlvbnMgYWxsXG4gICAgICogYm91bmRzLlxuICAgICAqLyAgICBybih0LCBlLCBuLCBzLCBpLCByLCBvKSB7XG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgdG90YWwgaW5kZXggc2NhbnMgd2UgdW5pb24gdG9nZXRoZXIuIFRoaXMgaXMgc2ltaWxhciB0byBhXG4gICAgICAgIC8vIGRpc3RyaWJ1dGVkIG5vcm1hbCBmb3JtLCBidXQgYWRhcHRlZCBmb3IgYXJyYXkgdmFsdWVzLiBXZSBjcmVhdGUgYSBzaW5nbGVcbiAgICAgICAgLy8gaW5kZXggcmFuZ2UgcGVyIHZhbHVlIGluIGFuIEFSUkFZX0NPTlRBSU5TIG9yIEFSUkFZX0NPTlRBSU5TX0FOWSBmaWx0ZXJcbiAgICAgICAgLy8gY29tYmluZWQgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIHF1ZXJ5IGJvdW5kcy5cbiAgICAgICAgY29uc3QgdSA9IChudWxsICE9IGUgPyBlLmxlbmd0aCA6IDEpICogTWF0aC5tYXgobi5sZW5ndGgsIGkubGVuZ3RoKSwgYyA9IHUgLyAobnVsbCAhPSBlID8gZS5sZW5ndGggOiAxKSwgYSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBoID0gMDsgaCA8IHU7ICsraCkge1xuICAgICAgICAgICAgY29uc3QgdSA9IGUgPyB0aGlzLm9uKGVbaCAvIGNdKSA6IHdyLCBsID0gdGhpcy51bih0LCB1LCBuW2ggJSBjXSwgcyksIGYgPSB0aGlzLmNuKHQsIHUsIGlbaCAlIGNdLCByKSwgZCA9IG8ubWFwKChlID0+IHRoaXMudW4odCwgdSwgZSwgXG4gICAgICAgICAgICAvKiBpbmNsdXNpdmU9ICovICEwKSkpO1xuICAgICAgICAgICAgYS5wdXNoKC4uLnRoaXMuY3JlYXRlUmFuZ2UobCwgZiwgZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICAvKiogR2VuZXJhdGVzIHRoZSBsb3dlciBib3VuZCBmb3IgYGFycmF5VmFsdWVgIGFuZCBgZGlyZWN0aW9uYWxWYWx1ZWAuICovICAgIHVuKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBhcih0LCBjdC5lbXB0eSgpLCBlLCBuKTtcbiAgICAgICAgcmV0dXJuIHMgPyBpIDogaS5LZSgpO1xuICAgIH1cbiAgICAvKiogR2VuZXJhdGVzIHRoZSB1cHBlciBib3VuZCBmb3IgYGFycmF5VmFsdWVgIGFuZCBgZGlyZWN0aW9uYWxWYWx1ZWAuICovICAgIGNuKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBhcih0LCBjdC5lbXB0eSgpLCBlLCBuKTtcbiAgICAgICAgcmV0dXJuIHMgPyBpLktlKCkgOiBpO1xuICAgIH1cbiAgICBlbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgZnIoZSksIHMgPSBudWxsICE9IGUuY29sbGVjdGlvbkdyb3VwID8gZS5jb2xsZWN0aW9uR3JvdXAgOiBlLnBhdGgubGFzdFNlZ21lbnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGRJbmRleGVzKHQsIHMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbmRleCB3aXRoIHRoZSBtb3N0IG51bWJlciBvZiBzZWdtZW50cy5cbiAgICAgICAgICAgIGxldCBlID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiB0KSB7XG4gICAgICAgICAgICAgICAgbi5XZShzKSAmJiAoIWUgfHwgcy5maWVsZHMubGVuZ3RoID4gZS5maWVsZHMubGVuZ3RoKSAmJiAoZSA9IHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0SW5kZXhUeXBlKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSAyIC8qIEZVTEwgKi87XG4gICAgICAgIHJldHVybiBBdC5mb3JFYWNoKHRoaXMudG4oZSksIChlID0+IHRoaXMuZW4odCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB0ID8gMCAvKiBOT05FICovICE9PSBuICYmIHQuZmllbGRzLmxlbmd0aCA8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZSA9IG5ldyBxdCh1dC5jb21wYXJhdG9yKSwgbiA9ICExO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiB0LmZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhvcnF1ZXJ5KTogVXNlIHRoZSBmbGF0dGVuZWQgZmlsdGVycyBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzO1xuICAgICAgICAgICAgICAgICAgICAvLyBfX25hbWVfXyBpcyBub3QgYW4gZXhwbGljaXQgc2VnbWVudCBvZiBhbnkgaW5kZXgsIHNvIHdlIGRvbid0IG5lZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gY291bnQgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5maWVsZC5pc0tleUZpZWxkKCkgfHwgKFxuICAgICAgICAgICAgICAgICAgICAvLyBBUlJBWV9DT05UQUlOUyBvciBBUlJBWV9DT05UQUlOU19BTlkgZmlsdGVycyBtdXN0IGJlIGNvdW50ZWQgc2VwYXJhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGluc3RhbmNlLCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIGFuIGluZGV4IGZvciBcImEgQVJSQVkgYSBBU0NcIi4gRXZlblxuICAgICAgICAgICAgICAgICAgICAvLyB0aG91Z2ggdGhlc2UgYXJlIG9uIHRoZSBzYW1lIGZpZWxkLCB0aGV5IHNob3VsZCBiZSBjb3VudGVkIGFzIHR3b1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXBhcmF0ZSBzZWdtZW50cyBpbiBhbiBpbmRleC5cbiAgICAgICAgICAgICAgICAgICAgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovID09PSB0Lm9wIHx8IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSB0Lm9wID8gbiA9ICEwIDogZSA9IGUuYWRkKHQuZmllbGQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQub3JkZXJCeSkgXG4gICAgICAgICAgICAgICAgLy8gX19uYW1lX18gaXMgbm90IGFuIGV4cGxpY2l0IHNlZ21lbnQgb2YgYW55IGluZGV4LCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY291bnQgaXQuXG4gICAgICAgICAgICAgICAgbi5maWVsZC5pc0tleUZpZWxkKCkgfHwgKGUgPSBlLmFkZChuLmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc2l6ZSArIChuID8gMSA6IDApO1xuICAgICAgICAgICAgfShlKSAmJiAobiA9IDEgLyogUEFSVElBTCAqLykgOiBuID0gMCAvKiBOT05FICovO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJ5dGUgZW5jb2RlZCBmb3JtIG9mIHRoZSBkaXJlY3Rpb25hbCB2YWx1ZXMgaW4gdGhlIGZpZWxkIGluZGV4LlxuICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBoYXZlIGFsbCBmaWVsZHMgc3BlY2lmaWVkIGluIHRoZVxuICAgICAqIGluZGV4LlxuICAgICAqLyAgICBhbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgY3I7XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiBsdCh0KSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuZGF0YS5maWVsZChzLmZpZWxkUGF0aCk7XG4gICAgICAgICAgICBpZiAobnVsbCA9PSB0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuLnFlKHMua2luZCk7XG4gICAgICAgICAgICBuci5UZS5jZSh0LCBpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbi4kZSgpO1xuICAgIH1cbiAgICAvKiogRW5jb2RlcyBhIHNpbmdsZSB2YWx1ZSB0byB0aGUgYXNjZW5kaW5nIGluZGV4IGZvcm1hdC4gKi8gICAgb24odCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IGNyO1xuICAgICAgICByZXR1cm4gbnIuVGUuY2UodCwgZS5xZSgwIC8qIEFTQ0VORElORyAqLykpLCBlLiRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZW5jb2RlZCBmb3JtIG9mIHRoZSBkb2N1bWVudCBrZXkgdGhhdCBzb3J0cyBiYXNlZCBvbiB0aGUga2V5XG4gICAgICogb3JkZXJpbmcgb2YgdGhlIGZpZWxkIGluZGV4LlxuICAgICAqLyAgICBobih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgY3I7XG4gICAgICAgIHJldHVybiBuci5UZS5jZSh3ZSh0aGlzLmRhdGFiYXNlSWQsIGUpLCBuLnFlKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBsdCh0KTtcbiAgICAgICAgICAgIHJldHVybiAwID09PSBlLmxlbmd0aCA/IDAgLyogQVNDRU5ESU5HICovIDogZVtlLmxlbmd0aCAtIDFdLmtpbmQ7XG4gICAgICAgIH0odCkpKSwgbi4kZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBmaWVsZCB2YWx1ZXMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLlxuICAgICAqIEZvciBJTiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBzbih0LCBlLCBuKSB7XG4gICAgICAgIGlmIChudWxsID09PSBuKSByZXR1cm4gW107XG4gICAgICAgIGxldCBzID0gW107XG4gICAgICAgIHMucHVzaChuZXcgY3IpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgciBvZiBsdCh0KSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5baSsrXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBzKSBpZiAodGhpcy5sbihlLCByLmZpZWxkUGF0aCkgJiYgZ2UodCkpIHMgPSB0aGlzLmZuKHMsIHIsIHQpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbi5xZShyLmtpbmQpO1xuICAgICAgICAgICAgICAgIG5yLlRlLmNlKHQsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRuKHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBib3VuZHMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLiBGb3IgSU5cbiAgICAgKiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBubih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNuKHQsIGUsIG4ucG9zaXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgYnl0ZSByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGVuY29kZXJzLiAqLyAgICBkbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgKytuKSBlW25dID0gdFtuXS4kZSgpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNlcGFyYXRlIGVuY29kZXIgZm9yIGVhY2ggZWxlbWVudCBvZiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBtZXRob2QgYXBwZW5kcyBlYWNoIHZhbHVlIHRvIGFsbCBleGlzdGluZyBlbmNvZGVycyAoZS5nLiBmaWx0ZXIoXCJhXCIsXG4gICAgICogXCI9PVwiLCBcImExXCIpLmZpbHRlcihcImJcIiwgXCJpblwiLCBbXCJiMVwiLCBcImIyXCJdKSBiZWNvbWVzIFtcImExLGIxXCIsIFwiYTEsYjJcIl0pLiBBXG4gICAgICogbGlzdCBvZiBuZXcgZW5jb2RlcnMgaXMgcmV0dXJuZWQuXG4gICAgICovICAgIGZuKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IFsgLi4udCBdLCBpID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBuLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdKSBmb3IgKGNvbnN0IG4gb2Ygcykge1xuICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBjcjtcbiAgICAgICAgICAgIHMuc2VlZChuLiRlKCkpLCBuci5UZS5jZSh0LCBzLnFlKGUua2luZCkpLCBpLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIGxuKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICEhdC5maWx0ZXJzLmZpbmQoKHQgPT4gdCBpbnN0YW5jZW9mIEJlICYmIHQuZmllbGQuaXNFcXVhbChlKSAmJiAoXCJpblwiIC8qIElOICovID09PSB0Lm9wIHx8IFwibm90LWluXCIgLyogTk9UX0lOICovID09PSB0Lm9wKSkpO1xuICAgIH1cbiAgICBnZXRGaWVsZEluZGV4ZXModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gcHIodCksIHMgPSBJcih0KTtcbiAgICAgICAgcmV0dXJuIChlID8gbi5XKFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgSURCS2V5UmFuZ2UuYm91bmQoZSwgZSkpIDogbi5XKCkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIEF0LmZvckVhY2godCwgKHQgPT4gcy5nZXQoWyB0LmluZGV4SWQsIHRoaXMudWlkIF0pLm5leHQoKG4gPT4ge1xuICAgICAgICAgICAgICAgIGUucHVzaChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlID8gbmV3IHd0KGUuc2VxdWVuY2VOdW1iZXIsIG5ldyB5dChLaShlLnJlYWRUaW1lKSwgbmV3IGN0KGNpKGUuZG9jdW1lbnRLZXkpKSwgZS5sYXJnZXN0QmF0Y2hJZCkpIDogd3QuZW1wdHkoKSwgcyA9IHQuZmllbGRzLm1hcCgoKFt0LCBlXSkgPT4gbmV3IGR0KHV0LmZyb21TZXJ2ZXJGb3JtYXQodCksIGUpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYXQodC5pbmRleElkLCB0LmNvbGxlY3Rpb25Hcm91cCwgcywgbik7XG4gICAgICAgICAgICAgICAgfSh0LCBuKSk7XG4gICAgICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGRJbmRleGVzKHQpLm5leHQoKHQgPT4gMCA9PT0gdC5sZW5ndGggPyBudWxsIDogKHQuc29ydCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmluZGV4U3RhdGUuc2VxdWVuY2VOdW1iZXIgLSBlLmluZGV4U3RhdGUuc2VxdWVuY2VOdW1iZXI7XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiBaKHQuY29sbGVjdGlvbkdyb3VwLCBlLmNvbGxlY3Rpb25Hcm91cCk7XG4gICAgICAgIH0pKSwgdFswXS5jb2xsZWN0aW9uR3JvdXApKSk7XG4gICAgfVxuICAgIHVwZGF0ZUNvbGxlY3Rpb25Hcm91cCh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBwcih0KSwgaSA9IElyKHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbih0KS5uZXh0KCh0ID0+IHMuVyhcImNvbGxlY3Rpb25Hcm91cEluZGV4XCIsIElEQktleVJhbmdlLmJvdW5kKGUsIGUpKS5uZXh0KChlID0+IEF0LmZvckVhY2goZSwgKGUgPT4gaS5wdXQoSmkoZS5pbmRleElkLCB0aGlzLnVzZXIsIHQsIG4pKSkpKSkpKTtcbiAgICB9XG4gICAgdXBkYXRlSW5kZXhFbnRyaWVzKHQsIGUpIHtcbiAgICAgICAgLy8gUG9ydGluZyBOb3RlOiBgZ2V0RmllbGRJbmRleGVzKClgIG9uIFdlYiBkb2VzIG5vdCBjYWNoZSBpbmRleCBsb29rdXBzIGFzXG4gICAgICAgIC8vIGl0IGNvdWxkIGJlIHVzZWQgYWNyb3NzIGRpZmZlcmVudCBJbmRleGVkREIgdHJhbnNhY3Rpb25zLiBBcyBhbnkgY2FjaGVkXG4gICAgICAgIC8vIGRhdGEgbWlnaHQgYmUgaW52YWxpZGF0ZWQgYnkgb3RoZXIgbXVsdGktdGFiIGNsaWVudHMsIHdlIGNhbiBvbmx5IHRydXN0XG4gICAgICAgIC8vIGRhdGEgd2l0aGluIGEgc2luZ2xlIEluZGV4ZWREQiB0cmFuc2FjdGlvbi4gV2UgdGhlcmVmb3JlIGFkZCBhIGNhY2hlXG4gICAgICAgIC8vIGhlcmUuXG4gICAgICAgIGNvbnN0IG4gPSBuZXcgTWFwO1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaChlLCAoKGUsIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuLmdldChlLmNvbGxlY3Rpb25Hcm91cCk7XG4gICAgICAgICAgICByZXR1cm4gKGkgPyBBdC5yZXNvbHZlKGkpIDogdGhpcy5nZXRGaWVsZEluZGV4ZXModCwgZS5jb2xsZWN0aW9uR3JvdXApKS5uZXh0KChpID0+IChuLnNldChlLmNvbGxlY3Rpb25Hcm91cCwgaSksIFxuICAgICAgICAgICAgQXQuZm9yRWFjaChpLCAobiA9PiB0aGlzLnduKHQsIGUsIG4pLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLm1uKHMsIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmlzRXF1YWwoaSkgPyBBdC5yZXNvbHZlKCkgOiB0aGlzLmduKHQsIHMsIG4sIGUsIGkpO1xuICAgICAgICAgICAgfSkpKSkpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgeW4odCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4geXIodCkucHV0KHtcbiAgICAgICAgICAgIGluZGV4SWQ6IHMuaW5kZXhJZCxcbiAgICAgICAgICAgIHVpZDogdGhpcy51aWQsXG4gICAgICAgICAgICBhcnJheVZhbHVlOiBzLmFycmF5VmFsdWUsXG4gICAgICAgICAgICBkaXJlY3Rpb25hbFZhbHVlOiBzLmRpcmVjdGlvbmFsVmFsdWUsXG4gICAgICAgICAgICBvcmRlcmVkRG9jdW1lbnRLZXk6IHRoaXMuaG4obiwgZS5rZXkpLFxuICAgICAgICAgICAgZG9jdW1lbnRLZXk6IGUua2V5LnBhdGgudG9BcnJheSgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiB5cih0KS5kZWxldGUoWyBzLmluZGV4SWQsIHRoaXMudWlkLCBzLmFycmF5VmFsdWUsIHMuZGlyZWN0aW9uYWxWYWx1ZSwgdGhpcy5obihuLCBlLmtleSksIGUua2V5LnBhdGgudG9BcnJheSgpIF0pO1xuICAgIH1cbiAgICB3bih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSB5cih0KTtcbiAgICAgICAgbGV0IGkgPSBuZXcgcXQoaHIpO1xuICAgICAgICByZXR1cm4gcy5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcImRvY3VtZW50S2V5SW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBJREJLZXlSYW5nZS5vbmx5KFsgbi5pbmRleElkLCB0aGlzLnVpZCwgdGhpcy5obihuLCBlKSBdKVxuICAgICAgICB9LCAoKHQsIHMpID0+IHtcbiAgICAgICAgICAgIGkgPSBpLmFkZChuZXcgYXIobi5pbmRleElkLCBlLCBzLmFycmF5VmFsdWUsIHMuZGlyZWN0aW9uYWxWYWx1ZSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyB0aGUgaW5kZXggZW50cmllcyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50LiAqLyAgICBtbih0LCBlKSB7XG4gICAgICAgIGxldCBuID0gbmV3IHF0KGhyKTtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuYW4oZSwgdCk7XG4gICAgICAgIGlmIChudWxsID09IHMpIHJldHVybiBuO1xuICAgICAgICBjb25zdCBpID0gaHQoZSk7XG4gICAgICAgIGlmIChudWxsICE9IGkpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0LmRhdGEuZmllbGQoaS5maWVsZFBhdGgpO1xuICAgICAgICAgICAgaWYgKGdlKHIpKSBmb3IgKGNvbnN0IGkgb2Ygci5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSkgbiA9IG4uYWRkKG5ldyBhcihlLmluZGV4SWQsIHQua2V5LCB0aGlzLm9uKGkpLCBzKSk7XG4gICAgICAgIH0gZWxzZSBuID0gbi5hZGQobmV3IGFyKGUuaW5kZXhJZCwgdC5rZXksIHdyLCBzKSk7XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBpbmRleCBlbnRyaWVzIGZvciB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgYnkgZGVsZXRpbmcgZW50cmllc1xuICAgICAqIHRoYXQgYXJlIG5vIGxvbmdlciByZWZlcmVuY2VkIGluIGBuZXdFbnRyaWVzYCBhbmQgYWRkaW5nIGFsbCBuZXdseSBhZGRlZFxuICAgICAqIGVudHJpZXMuXG4gICAgICovICAgIGduKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgQyhcIkluZGV4ZWREYkluZGV4TWFuYWdlclwiLCBcIlVwZGF0aW5nIGluZGV4IGVudHJpZXMgZm9yIGRvY3VtZW50ICclcydcIiwgZS5rZXkpO1xuICAgICAgICBjb25zdCByID0gW107XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgICAgICBjb25zdCByID0gdC5nZXRJdGVyYXRvcigpLCBvID0gZS5nZXRJdGVyYXRvcigpO1xuICAgICAgICAgICAgbGV0IHUgPSBHdChyKSwgYyA9IEd0KG8pO1xuICAgICAgICAgICAgLy8gV2FsayB0aHJvdWdoIHRoZSB0d28gc2V0cyBhdCB0aGUgc2FtZSB0aW1lLCB1c2luZyB0aGUgb3JkZXJpbmcgZGVmaW5lZCBieVxuICAgICAgICAgICAgLy8gYGNvbXBhcmF0b3JgLlxuICAgICAgICAgICAgZm9yICg7dSB8fCBjOyApIHtcbiAgICAgICAgICAgICAgICBsZXQgdCA9ICExLCBlID0gITE7XG4gICAgICAgICAgICAgICAgaWYgKHUgJiYgYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbih1LCBjKTtcbiAgICAgICAgICAgICAgICAgICAgcyA8IDAgPyBcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgd2FzIHJlbW92ZWQgaWYgdGhlIG5leHQgZWxlbWVudCBpbiBvdXIgb3JkZXJlZFxuICAgICAgICAgICAgICAgICAgICAvLyB3YWxrdGhyb3VnaCBpcyBvbmx5IGluIGBiZWZvcmVgLlxuICAgICAgICAgICAgICAgICAgICBlID0gITAgOiBzID4gMCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IHdhcyBhZGRlZCBpZiB0aGUgbmV4dCBlbGVtZW50IGluIG91ciBvcmRlcmVkIHdhbGt0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIG9ubHkgaW4gYGFmdGVyYC5cbiAgICAgICAgICAgICAgICAgICAgdCA9ICEwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbnVsbCAhPSB1ID8gZSA9ICEwIDogdCA9ICEwO1xuICAgICAgICAgICAgICAgIHQgPyAocyhjKSwgYyA9IEd0KG8pKSA6IGUgPyAoaSh1KSwgdSA9IEd0KHIpKSA6ICh1ID0gR3QociksIGMgPSBHdChvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0ocywgaSwgaHIsIChcbiAgICAgICAgLyogb25BZGQ9ICovIHMgPT4ge1xuICAgICAgICAgICAgci5wdXNoKHRoaXMueW4odCwgZSwgbiwgcykpO1xuICAgICAgICB9KSwgKFxuICAgICAgICAvKiBvblJlbW92ZT0gKi8gcyA9PiB7XG4gICAgICAgICAgICByLnB1c2godGhpcy5wbih0LCBlLCBuLCBzKSk7XG4gICAgICAgIH0pKSwgQXQud2FpdEZvcihyKTtcbiAgICB9XG4gICAgX24odCkge1xuICAgICAgICBsZXQgZSA9IDE7XG4gICAgICAgIHJldHVybiBJcih0KS5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcInNlcXVlbmNlTnVtYmVySW5kZXhcIixcbiAgICAgICAgICAgIHJldmVyc2U6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IElEQktleVJhbmdlLnVwcGVyQm91bmQoWyB0aGlzLnVpZCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgXSlcbiAgICAgICAgfSwgKCh0LCBuLCBzKSA9PiB7XG4gICAgICAgICAgICBzLmRvbmUoKSwgZSA9IG4uc2VxdWVuY2VOdW1iZXIgKyAxO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHNldCBvZiBJREIgcmFuZ2VzIHRoYXQgc3BsaXRzIHRoZSBleGlzdGluZyByYW5nZSBhbmQgZXhjbHVkZXNcbiAgICAgKiBhbnkgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGBub3RJblZhbHVlYCBmcm9tIHRoZXNlIHJhbmdlcy4gQXMgYW4gZXhhbXBsZSxcbiAgICAgKiAnW2ZvbyA+IDIgJiYgZm9vICE9IDNdYCBiZWNvbWVzICBgW2ZvbyA+IDIgJiYgPCAzLCBmb28gPiAzXWAuXG4gICAgICovICAgIGNyZWF0ZVJhbmdlKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gVGhlIG5vdEluIHZhbHVlcyBuZWVkIHRvIGJlIHNvcnRlZCBhbmQgdW5pcXVlIHNvIHRoYXQgd2UgY2FuIHJldHVybiBhXG4gICAgICAgIC8vIHNvcnRlZCBzZXQgb2Ygbm9uLW92ZXJsYXBwaW5nIHJhbmdlcy5cbiAgICAgICAgbiA9IG4uc29ydCgoKHQsIGUpID0+IGhyKHQsIGUpKSkuZmlsdGVyKCgodCwgZSwgbikgPT4gIWUgfHwgMCAhPT0gaHIodCwgbltlIC0gMV0pKSk7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgcy5wdXNoKHQpO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygbikge1xuICAgICAgICAgICAgY29uc3QgbiA9IGhyKGksIHQpLCByID0gaHIoaSwgZSk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gbikgXG4gICAgICAgICAgICAvLyBgbm90SW5WYWx1ZWAgaXMgdGhlIGxvd2VyIGJvdW5kLiBXZSB0aGVyZWZvcmUgbmVlZCB0byByYWlzZSB0aGUgYm91bmRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBuZXh0IHZhbHVlLlxuICAgICAgICAgICAgc1swXSA9IHQuS2UoKTsgZWxzZSBpZiAobiA+IDAgJiYgciA8IDApIFxuICAgICAgICAgICAgLy8gYG5vdEluVmFsdWVgIGlzIGluIHRoZSBtaWRkbGUgb2YgdGhlIHJhbmdlXG4gICAgICAgICAgICBzLnB1c2goaSksIHMucHVzaChpLktlKCkpOyBlbHNlIGlmIChyID4gMCkgXG4gICAgICAgICAgICAvLyBgbm90SW5WYWx1ZWAgKGFuZCBhbGwgZm9sbG93aW5nIHZhbHVlcykgYXJlIG91dCBvZiB0aGUgcmFuZ2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHMucHVzaChlKTtcbiAgICAgICAgY29uc3QgaSA9IFtdO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHMubGVuZ3RoOyB0ICs9IDIpIGkucHVzaChJREJLZXlSYW5nZS5ib3VuZChbIHNbdF0uaW5kZXhJZCwgdGhpcy51aWQsIHNbdF0uYXJyYXlWYWx1ZSwgc1t0XS5kaXJlY3Rpb25hbFZhbHVlLCB3ciwgW10gXSwgWyBzW3QgKyAxXS5pbmRleElkLCB0aGlzLnVpZCwgc1t0ICsgMV0uYXJyYXlWYWx1ZSwgc1t0ICsgMV0uZGlyZWN0aW9uYWxWYWx1ZSwgd3IsIFtdIF0pKTtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIGdldE1pbk9mZnNldEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGaWVsZEluZGV4ZXModCwgZSkubmV4dChUcik7XG4gICAgfVxuICAgIGdldE1pbk9mZnNldCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBBdC5tYXBBcnJheSh0aGlzLnRuKGUpLCAoZSA9PiB0aGlzLmVuKHQsIGUpLm5leHQoKHQgPT4gdCB8fCBPKCkpKSkpLm5leHQoVHIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGNvbGxlY3Rpb25QYXJlbnRzXG4gKiBkb2N1bWVudCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBncih0KSB7XG4gICAgcmV0dXJuIE5pKHQsIFwiY29sbGVjdGlvblBhcmVudHNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBpbmRleCBlbnRyeSBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24geXIodCkge1xuICAgIHJldHVybiBOaSh0LCBcImluZGV4RW50cmllc1wiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGluZGV4IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHByKHQpIHtcbiAgICByZXR1cm4gTmkodCwgXCJpbmRleENvbmZpZ3VyYXRpb25cIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBpbmRleCBzdGF0ZSBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gSXIodCkge1xuICAgIHJldHVybiBOaSh0LCBcImluZGV4U3RhdGVcIik7XG59XG5cbmZ1bmN0aW9uIFRyKHQpIHtcbiAgICBNKDAgIT09IHQubGVuZ3RoKTtcbiAgICBsZXQgZSA9IHRbMF0uaW5kZXhTdGF0ZS5vZmZzZXQsIG4gPSBlLmxhcmdlc3RCYXRjaElkO1xuICAgIGZvciAobGV0IHMgPSAxOyBzIDwgdC5sZW5ndGg7IHMrKykge1xuICAgICAgICBjb25zdCBpID0gdFtzXS5pbmRleFN0YXRlLm9mZnNldDtcbiAgICAgICAgcHQoaSwgZSkgPCAwICYmIChlID0gaSksIG4gPCBpLmxhcmdlc3RCYXRjaElkICYmIChuID0gaS5sYXJnZXN0QmF0Y2hJZCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgeXQoZS5yZWFkVGltZSwgZS5kb2N1bWVudEtleSwgbik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IEVyID0ge1xuICAgIGRpZFJ1bjogITEsXG4gICAgc2VxdWVuY2VOdW1iZXJzQ29sbGVjdGVkOiAwLFxuICAgIHRhcmdldHNSZW1vdmVkOiAwLFxuICAgIGRvY3VtZW50c1JlbW92ZWQ6IDBcbn07XG5cbmNsYXNzIEFyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvLyBXaGVuIHdlIGF0dGVtcHQgdG8gY29sbGVjdCwgd2Ugd2lsbCBvbmx5IGRvIHNvIGlmIHRoZSBjYWNoZSBzaXplIGlzIGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAgLy8gdGhyZXNob2xkLiBQYXNzaW5nIGBDT0xMRUNUSU9OX0RJU0FCTEVEYCBoZXJlIHdpbGwgY2F1c2UgY29sbGVjdGlvbiB0byBhbHdheXMgYmUgc2tpcHBlZC5cbiAgICB0LCBcbiAgICAvLyBUaGUgcGVyY2VudGFnZSBvZiBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgd2Ugd2lsbCBhdHRlbXB0IHRvIGNvbGxlY3RcbiAgICBlLCBcbiAgICAvLyBBIGNhcCBvbiB0aGUgdG90YWwgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgdGhhdCB3aWxsIGJlIGNvbGxlY3RlZC4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIHVzIGZyb20gY29sbGVjdGluZyBhIGh1Z2UgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgaWYgdGhlIGNhY2hlIGhhcyBncm93biB2ZXJ5IGxhcmdlLlxuICAgIG4pIHtcbiAgICAgICAgdGhpcy5jYWNoZVNpemVDb2xsZWN0aW9uVGhyZXNob2xkID0gdCwgdGhpcy5wZXJjZW50aWxlVG9Db2xsZWN0ID0gZSwgdGhpcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0ID0gbjtcbiAgICB9XG4gICAgc3RhdGljIHdpdGhDYWNoZVNpemUodCkge1xuICAgICAgICByZXR1cm4gbmV3IEFyKHQsIEFyLkRFRkFVTFRfQ09MTEVDVElPTl9QRVJDRU5USUxFLCBBci5ERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRGVsZXRlIGEgbXV0YXRpb24gYmF0Y2ggYW5kIHRoZSBhc3NvY2lhdGVkIGRvY3VtZW50IG11dGF0aW9ucy5cbiAqIEByZXR1cm5zIEEgUGVyc2lzdGVuY2VQcm9taXNlIG9mIHRoZSBkb2N1bWVudCBtdXRhdGlvbnMgdGhhdCB3ZXJlIHJlbW92ZWQuXG4gKi9cbmZ1bmN0aW9uIFJyKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gdC5zdG9yZShcIm11dGF0aW9uc1wiKSwgaSA9IHQuc3RvcmUoXCJkb2N1bWVudE11dGF0aW9uc1wiKSwgciA9IFtdLCBvID0gSURCS2V5UmFuZ2Uub25seShuLmJhdGNoSWQpO1xuICAgIGxldCB1ID0gMDtcbiAgICBjb25zdCBjID0gcy5aKHtcbiAgICAgICAgcmFuZ2U6IG9cbiAgICB9LCAoKHQsIGUsIG4pID0+ICh1KyssIG4uZGVsZXRlKCkpKSk7XG4gICAgci5wdXNoKGMubmV4dCgoKCkgPT4ge1xuICAgICAgICBNKDEgPT09IHUpO1xuICAgIH0pKSk7XG4gICAgY29uc3QgYSA9IFtdO1xuICAgIGZvciAoY29uc3QgdCBvZiBuLm11dGF0aW9ucykge1xuICAgICAgICBjb25zdCBzID0gbGkoZSwgdC5rZXkucGF0aCwgbi5iYXRjaElkKTtcbiAgICAgICAgci5wdXNoKGkuZGVsZXRlKHMpKSwgYS5wdXNoKHQua2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIEF0LndhaXRGb3IocikubmV4dCgoKCkgPT4gYSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXBwcm94aW1hdGUgc2l6ZSBmb3IgdGhlIGdpdmVuIGRvY3VtZW50LlxuICovIGZ1bmN0aW9uIGJyKHQpIHtcbiAgICBpZiAoIXQpIHJldHVybiAwO1xuICAgIGxldCBlO1xuICAgIGlmICh0LmRvY3VtZW50KSBlID0gdC5kb2N1bWVudDsgZWxzZSBpZiAodC51bmtub3duRG9jdW1lbnQpIGUgPSB0LnVua25vd25Eb2N1bWVudDsgZWxzZSB7XG4gICAgICAgIGlmICghdC5ub0RvY3VtZW50KSB0aHJvdyBPKCk7XG4gICAgICAgIGUgPSB0Lm5vRG9jdW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlKS5sZW5ndGg7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQSBtdXRhdGlvbiBxdWV1ZSBmb3IgYSBzcGVjaWZpYyB1c2VyLCBiYWNrZWQgYnkgSW5kZXhlZERCLiAqLyBBci5ERUZBVUxUX0NPTExFQ1RJT05fUEVSQ0VOVElMRSA9IDEwLCBcbkFyLkRFRkFVTFRfTUFYX1NFUVVFTkNFX05VTUJFUlNfVE9fQ09MTEVDVCA9IDFlMywgQXIuREVGQVVMVCA9IG5ldyBBcig0MTk0MzA0MCwgQXIuREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUsIEFyLkRFRkFVTFRfTUFYX1NFUVVFTkNFX05VTUJFUlNfVE9fQ09MTEVDVCksIFxuQXIuRElTQUJMRUQgPSBuZXcgQXIoLTEsIDAsIDApO1xuXG5jbGFzcyBQciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIG5vcm1hbGl6ZWQgdXNlcklkIChlLmcuIG51bGwgVUlEID0+IFwiXCIgdXNlcklkKSB1c2VkIHRvIHN0b3JlIC9cbiAgICAgKiByZXRyaWV2ZSBtdXRhdGlvbnMuXG4gICAgICovXG4gICAgdCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLnVzZXJJZCA9IHQsIHRoaXMuSXQgPSBlLCB0aGlzLmluZGV4TWFuYWdlciA9IG4sIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBzLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlcyB0aGUgZG9jdW1lbnQga2V5cyBmb3IgcGVuZGluZyBtdXRhdGlvbiBiYXRjaGVzLiBJZiB0aGUgbXV0YXRpb25cbiAgICAgICAgICogaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIEluZGV4ZWREYiwgdGhlIGNhY2hlZCB2YWx1ZSBtYXkgY29udGludWUgdG9cbiAgICAgICAgICogYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgYmF0Y2gncyBkb2N1bWVudCBrZXlzLiBUbyByZW1vdmUgYSBjYWNoZWQgdmFsdWVcbiAgICAgICAgICogbG9jYWxseSwgYHJlbW92ZUNhY2hlZE11dGF0aW9uS2V5cygpYCBzaG91bGQgYmUgaW52b2tlZCBlaXRoZXIgZGlyZWN0bHlcbiAgICAgICAgICogb3IgdGhyb3VnaCBgcmVtb3ZlTXV0YXRpb25CYXRjaGVzKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaXRoIG11bHRpLXRhYiwgd2hlbiB0aGUgcHJpbWFyeSBjbGllbnQgYWNrbm93bGVkZ2VzIG9yIHJlamVjdHMgYSBtdXRhdGlvbixcbiAgICAgICAgICogdGhpcyBjYWNoZSBpcyB1c2VkIGJ5IHNlY29uZGFyeSBjbGllbnRzIHRvIGludmFsaWRhdGUgdGhlIGxvY2FsXG4gICAgICAgICAqIHZpZXcgb2YgdGhlIGRvY3VtZW50cyB0aGF0IHdlcmUgcHJldmlvdXNseSBhZmZlY3RlZCBieSB0aGUgbXV0YXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgICAgICB0aGlzLkluID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyLlxuICAgICAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhIG11dGF0aW9uIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyIC0gVGhlIHNlcmlhbGl6ZXIgdG8gdXNlIHdoZW4gcGVyc2lzdGluZyB0byBJbmRleGVkRGIuXG4gICAgICovICAgIHN0YXRpYyBvZSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIC8vIFRPRE8obWNnKTogRmlndXJlIG91dCB3aGF0IGNvbnN0cmFpbnRzIHRoZXJlIGFyZSBvbiB1c2VySURzXG4gICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIGFyZSB0aGVyZSBhbnkgcmVzZXJ2ZWQgY2hhcmFjdGVycz8gYXJlIGVtcHR5IGlkcyBhbGxvd2VkP1xuICAgICAgICAvLyBGb3IgdGhlIG1vbWVudCBzdG9yZSB0aGVzZSB0b2dldGhlciBpbiB0aGUgc2FtZSBtdXRhdGlvbnMgdGFibGUgYXNzdW1pbmdcbiAgICAgICAgLy8gdGhhdCBlbXB0eSB1c2VySURzIGFyZW4ndCBhbGxvd2VkLlxuICAgICAgICBNKFwiXCIgIT09IHQudWlkKTtcbiAgICAgICAgY29uc3QgaSA9IHQuaXNBdXRoZW50aWNhdGVkKCkgPyB0LnVpZCA6IFwiXCI7XG4gICAgICAgIHJldHVybiBuZXcgUHIoaSwgZSwgbiwgcyk7XG4gICAgfVxuICAgIGNoZWNrRW1wdHkodCkge1xuICAgICAgICBsZXQgZSA9ICEwO1xuICAgICAgICBjb25zdCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIF0sIFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgcmV0dXJuIFZyKHQpLlooe1xuICAgICAgICAgICAgaW5kZXg6IFwidXNlck11dGF0aW9uc0luZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogblxuICAgICAgICB9LCAoKHQsIG4sIHMpID0+IHtcbiAgICAgICAgICAgIGUgPSAhMSwgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgfVxuICAgIGFkZE11dGF0aW9uQmF0Y2godCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gU3IodCksIHIgPSBWcih0KTtcbiAgICAgICAgLy8gVGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWUgKGFuZCBGaXJlZm94KSBkb2VzIG5vdCBoYW5kbGVcbiAgICAgICAgLy8gY29tcG91bmQgaW5kaWNlcyB0aGF0IGluY2x1ZGUgYXV0by1nZW5lcmF0ZWQga2V5cyBjb3JyZWN0bHkuIFRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBpbmRleCBlbnRyeSBpcyBhZGRlZCBjb3JyZWN0bHkgaW4gYWxsIGJyb3dzZXJzLCB3ZSBwZXJmb3JtIHR3b1xuICAgICAgICAvLyB3cml0ZXM6IFRoZSBmaXJzdCB3cml0ZSBpcyB1c2VkIHRvIHJldHJpZXZlIHRoZSBuZXh0IGF1dG8tZ2VuZXJhdGVkIEJhdGNoXG4gICAgICAgIC8vIElELCBhbmQgdGhlIHNlY29uZCB3cml0ZSBwb3B1bGF0ZXMgdGhlIGluZGV4IGFuZCBzdG9yZXMgdGhlIGFjdHVhbFxuICAgICAgICAvLyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03MDE5NzJcbiAgICAgICAgLy8gV2Ugd3JpdGUgYW4gZW1wdHkgb2JqZWN0IHRvIG9idGFpbiBrZXlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHIuYWRkKHt9KS5uZXh0KChvID0+IHtcbiAgICAgICAgICAgIE0oXCJudW1iZXJcIiA9PSB0eXBlb2Ygbyk7XG4gICAgICAgICAgICBjb25zdCB1ID0gbmV3IGtpKG8sIGUsIG4sIHMpLCBjID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLmJhc2VNdXRhdGlvbnMubWFwKChlID0+IEtzKHQucmUsIGUpKSksIGkgPSBuLm11dGF0aW9ucy5tYXAoKGUgPT4gS3ModC5yZSwgZSkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIGJhdGNoSWQ6IG4uYmF0Y2hJZCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxXcml0ZVRpbWVNczogbi5sb2NhbFdyaXRlVGltZS50b01pbGxpcygpLFxuICAgICAgICAgICAgICAgICAgICBiYXNlTXV0YXRpb25zOiBzLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbnM6IGlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSh0aGlzLkl0LCB0aGlzLnVzZXJJZCwgdSksIGEgPSBbXTtcbiAgICAgICAgICAgIGxldCBoID0gbmV3IHF0KCgodCwgZSkgPT4gWih0LmNhbm9uaWNhbFN0cmluZygpLCBlLmNhbm9uaWNhbFN0cmluZygpKSkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbGkodGhpcy51c2VySWQsIHQua2V5LnBhdGgsIG8pO1xuICAgICAgICAgICAgICAgIGggPSBoLmFkZCh0LmtleS5wYXRoLnBvcExhc3QoKSksIGEucHVzaChyLnB1dChjKSksIGEucHVzaChpLnB1dChlLCBmaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGguZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgYS5wdXNoKHRoaXMuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIGUpKTtcbiAgICAgICAgICAgIH0pKSwgdC5hZGRPbkNvbW1pdHRlZExpc3RlbmVyKCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5JbltvXSA9IHUua2V5cygpO1xuICAgICAgICAgICAgfSkpLCBBdC53YWl0Rm9yKGEpLm5leHQoKCgpID0+IHUpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBsb29rdXBNdXRhdGlvbkJhdGNoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFZyKHQpLmdldChlKS5uZXh0KCh0ID0+IHQgPyAoTSh0LnVzZXJJZCA9PT0gdGhpcy51c2VySWQpLCBHaSh0aGlzLkl0LCB0KSkgOiBudWxsKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvY3VtZW50IGtleXMgZm9yIHRoZSBtdXRhdGlvbiBiYXRjaCB3aXRoIHRoZSBnaXZlbiBiYXRjaElkLlxuICAgICAqIEZvciBwcmltYXJ5IGNsaWVudHMsIHRoaXMgbWV0aG9kIHJldHVybnMgYG51bGxgIGFmdGVyXG4gICAgICogYHJlbW92ZU11dGF0aW9uQmF0Y2hlcygpYCBoYXMgYmVlbiBjYWxsZWQuIFNlY29uZGFyeSBjbGllbnRzIHJldHVybiBhXG4gICAgICogY2FjaGVkIHJlc3VsdCB1bnRpbCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIGlzIGludm9rZWQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICBUbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkluW2VdID8gQXQucmVzb2x2ZSh0aGlzLkluW2VdKSA6IHRoaXMubG9va3VwTXV0YXRpb25CYXRjaCh0LCBlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQua2V5cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkluW2VdID0gbiwgbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldE5leHRNdXRhdGlvbkJhdGNoQWZ0ZXJCYXRjaElkKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUgKyAxLCBzID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChbIHRoaXMudXNlcklkLCBuIF0pO1xuICAgICAgICBsZXQgaSA9IG51bGw7XG4gICAgICAgIHJldHVybiBWcih0KS5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcInVzZXJNdXRhdGlvbnNJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgfSwgKCh0LCBlLCBzKSA9PiB7XG4gICAgICAgICAgICBlLnVzZXJJZCA9PT0gdGhpcy51c2VySWQgJiYgKE0oZS5iYXRjaElkID49IG4pLCBpID0gR2kodGhpcy5JdCwgZSkpLCBzLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgZ2V0SGlnaGVzdFVuYWNrbm93bGVkZ2VkQmF0Y2hJZCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBJREJLZXlSYW5nZS51cHBlckJvdW5kKFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgbGV0IG4gPSAtMTtcbiAgICAgICAgcmV0dXJuIFZyKHQpLlooe1xuICAgICAgICAgICAgaW5kZXg6IFwidXNlck11dGF0aW9uc0luZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogZSxcbiAgICAgICAgICAgIHJldmVyc2U6ICEwXG4gICAgICAgIH0sICgodCwgZSwgcykgPT4ge1xuICAgICAgICAgICAgbiA9IGUuYmF0Y2hJZCwgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBJREJLZXlSYW5nZS5ib3VuZChbIHRoaXMudXNlcklkLCAtMSBdLCBbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIHJldHVybiBWcih0KS5XKFwidXNlck11dGF0aW9uc0luZGV4XCIsIGUpLm5leHQoKHQgPT4gdC5tYXAoKHQgPT4gR2kodGhpcy5JdCwgdCkpKSkpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleSh0LCBlKSB7XG4gICAgICAgIC8vIFNjYW4gdGhlIGRvY3VtZW50LW11dGF0aW9uIGluZGV4IHN0YXJ0aW5nIHdpdGggYSBwcmVmaXggc3RhcnRpbmcgd2l0aFxuICAgICAgICAvLyB0aGUgZ2l2ZW4gZG9jdW1lbnRLZXkuXG4gICAgICAgIGNvbnN0IG4gPSBoaSh0aGlzLnVzZXJJZCwgZS5wYXRoKSwgcyA9IElEQktleVJhbmdlLmxvd2VyQm91bmQobiksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIFNyKHQpLlooe1xuICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgfSwgKChuLCBzLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbbywgdSwgY10gPSBuLCBhID0gY2kodSk7XG4gICAgICAgICAgICAvLyBPbmx5IGNvbnNpZGVyIHJvd3MgbWF0Y2hpbmcgZXhhY3RseSB0aGUgc3BlY2lmaWMga2V5IG9mXG4gICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAvLyBvcmRlciB0ZXJtaW5hdG9ycyBiZWZvcmUgcGF0aCBzZXBhcmF0b3JzLCB3ZSdsbCBlbmNvdW50ZXIgYWxsXG4gICAgICAgICAgICAvLyB0aGUgaW5kZXggcm93cyBmb3IgZG9jdW1lbnRLZXkgY29udGlndW91c2x5LiBJbiBwYXJ0aWN1bGFyLCBhbGxcbiAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgIC8vIGRvY3VtZW50cyBuZXN0ZWQgaW4gYSBzdWJjb2xsZWN0aW9uIGJlbmVhdGggZG9jdW1lbnRLZXkgc28gd2VcbiAgICAgICAgICAgIC8vIGNhbiBzdG9wIGFzIHNvb24gYXMgd2UgaGl0IGFueSBzdWNoIHJvdy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSB0aGlzLnVzZXJJZCAmJiBlLnBhdGguaXNFcXVhbChhKSkgXG4gICAgICAgICAgICAvLyBMb29rIHVwIHRoZSBtdXRhdGlvbiBiYXRjaCBpbiB0aGUgc3RvcmUuXG4gICAgICAgICAgICByZXR1cm4gVnIodCkuZ2V0KGMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdCkgdGhyb3cgTygpO1xuICAgICAgICAgICAgICAgIE0odC51c2VySWQgPT09IHRoaXMudXNlcklkKSwgaS5wdXNoKEdpKHRoaXMuSXQsIHQpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHIuZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleXModCwgZSkge1xuICAgICAgICBsZXQgbiA9IG5ldyBxdChaKTtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBoaSh0aGlzLnVzZXJJZCwgZS5wYXRoKSwgciA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoaSksIG8gPSBTcih0KS5aKHtcbiAgICAgICAgICAgICAgICByYW5nZTogclxuICAgICAgICAgICAgfSwgKCh0LCBzLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3IsIG8sIHVdID0gdCwgYyA9IGNpKG8pO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID09PSB0aGlzLnVzZXJJZCAmJiBlLnBhdGguaXNFcXVhbChjKSA/IG4gPSBuLmFkZCh1KSA6IGkuZG9uZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcy5wdXNoKG8pO1xuICAgICAgICB9KSksIEF0LndhaXRGb3IocykubmV4dCgoKCkgPT4gdGhpcy5Fbih0LCBuKSkpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdRdWVyeSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnBhdGgsIHMgPSBuLmxlbmd0aCArIDEsIGkgPSBoaSh0aGlzLnVzZXJJZCwgbiksIHIgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKGkpO1xuICAgICAgICAvLyBDb2xsZWN0IHVwIHVuaXF1ZSBiYXRjaElEcyBlbmNvdW50ZXJlZCBkdXJpbmcgYSBzY2FuIG9mIHRoZSBpbmRleC4gVXNlIGFcbiAgICAgICAgLy8gU29ydGVkU2V0IHRvIGFjY3VtdWxhdGUgYmF0Y2ggSURzIHNvIHRoZXkgY2FuIGJlIHRyYXZlcnNlZCBpbiBvcmRlciBpbiBhXG4gICAgICAgIC8vIHNjYW4gb2YgdGhlIG1haW4gdGFibGUuXG4gICAgICAgIGxldCBvID0gbmV3IHF0KFopO1xuICAgICAgICByZXR1cm4gU3IodCkuWih7XG4gICAgICAgICAgICByYW5nZTogclxuICAgICAgICB9LCAoKHQsIGUsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtyLCB1LCBjXSA9IHQsIGEgPSBjaSh1KTtcbiAgICAgICAgICAgIHIgPT09IHRoaXMudXNlcklkICYmIG4uaXNQcmVmaXhPZihhKSA/IFxuICAgICAgICAgICAgLy8gUm93cyB3aXRoIGRvY3VtZW50IGtleXMgbW9yZSB0aGFuIG9uZSBzZWdtZW50IGxvbmdlciB0aGFuIHRoZVxuICAgICAgICAgICAgLy8gcXVlcnkgcGF0aCBjYW4ndCBiZSBtYXRjaGVzLiBGb3IgZXhhbXBsZSwgYSBxdWVyeSBvbiAncm9vbXMnXG4gICAgICAgICAgICAvLyBjYW4ndCBtYXRjaCB0aGUgZG9jdW1lbnQgL3Jvb21zL2FiYy9tZXNzYWdlcy94eXguXG4gICAgICAgICAgICAvLyBUT0RPKG1jZyk6IHdlJ2xsIG5lZWQgYSBkaWZmZXJlbnQgc2Nhbm5lciB3aGVuIHdlIGltcGxlbWVudFxuICAgICAgICAgICAgLy8gYW5jZXN0b3IgcXVlcmllcy5cbiAgICAgICAgICAgIGEubGVuZ3RoID09PSBzICYmIChvID0gby5hZGQoYykpIDogaS5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB0aGlzLkVuKHQsIG8pKSk7XG4gICAgfVxuICAgIEVuKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IFtdLCBzID0gW107XG4gICAgICAgIC8vIFRPRE8ocm9ja3dvb2QpOiBJbXBsZW1lbnQgdGhpcyB1c2luZyBpdGVyYXRlLlxuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIHMucHVzaChWcih0KS5nZXQoZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHQpIHRocm93IE8oKTtcbiAgICAgICAgICAgICAgICBNKHQudXNlcklkID09PSB0aGlzLnVzZXJJZCksIG4ucHVzaChHaSh0aGlzLkl0LCB0KSk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSksIEF0LndhaXRGb3IocykubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICByZW1vdmVNdXRhdGlvbkJhdGNoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFJyKHQuaWUsIHRoaXMudXNlcklkLCBlKS5uZXh0KChuID0+ICh0LmFkZE9uQ29tbWl0dGVkTGlzdGVuZXIoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuQW4oZS5iYXRjaElkKTtcbiAgICAgICAgfSkpLCBBdC5mb3JFYWNoKG4sIChlID0+IHRoaXMucmVmZXJlbmNlRGVsZWdhdGUubWFya1BvdGVudGlhbGx5T3JwaGFuZWQodCwgZSkpKSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBjYWNoZWQga2V5cyBmb3IgYSBtdXRhdGlvbiBiYXRjaC4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlXG4gICAgICogY2FsbGVkIGJ5IHNlY29uZGFyeSBjbGllbnRzIGFmdGVyIHRoZXkgcHJvY2VzcyBtdXRhdGlvbiB1cGRhdGVzLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGRvZXMgbm90IGhhdmUgdG8gYmUgY2FsbGVkIGZyb20gcHJpbWFyeSBjbGllbnRzIGFzXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgY2FjaGUgZW50cmllcyBhcmUgY2xlYXJlZCB3aGVuIGFuIGFja25vd2xlZGdlZCBvclxuICAgICAqIHJlamVjdGVkIGJhdGNoIGlzIHJlbW92ZWQgZnJvbSB0aGUgbXV0YXRpb24gcXVldWUuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seVxuICAgIEFuKHQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuSW5bdF07XG4gICAgfVxuICAgIHBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tFbXB0eSh0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGlmICghZSkgcmV0dXJuIEF0LnJlc29sdmUoKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZXJlIGFyZSBubyBlbnRyaWVzIGluIHRoZSBkb2N1bWVudE11dGF0aW9ucyBpbmRleCBpZlxuICAgICAgICAgICAgLy8gdGhlIHF1ZXVlIGlzIGVtcHR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyB0aGlzLnVzZXJJZCBdKTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBTcih0KS5aKHtcbiAgICAgICAgICAgICAgICByYW5nZTogblxuICAgICAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRbMF0gPT09IHRoaXMudXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBjaSh0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgcy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBuLmRvbmUoKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgTSgwID09PSBzLmxlbmd0aCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkodCwgZSkge1xuICAgICAgICByZXR1cm4gdnIodCwgdGhpcy51c2VySWQsIGUpO1xuICAgIH1cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5IChzdGF0ZSBpcyBoZWxkIGluIG1lbW9yeSBpbiBvdGhlciBjbGllbnRzKS5cbiAgICAvKiogUmV0dXJucyB0aGUgbXV0YXRpb24gcXVldWUncyBtZXRhZGF0YSBmcm9tIEluZGV4ZWREYi4gKi9cbiAgICBSbih0KSB7XG4gICAgICAgIHJldHVybiBEcih0KS5nZXQodGhpcy51c2VySWQpLm5leHQoKHQgPT4gdCB8fCB7XG4gICAgICAgICAgICB1c2VySWQ6IHRoaXMudXNlcklkLFxuICAgICAgICAgICAgbGFzdEFja25vd2xlZGdlZEJhdGNoSWQ6IC0xLFxuICAgICAgICAgICAgbGFzdFN0cmVhbVRva2VuOiBcIlwiXG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyIGNvbnRhaW5zIGEgcGVuZGluZ1xuICogICAgICAgICBtdXRhdGlvbiBmb3IgdGhlIGdpdmVuIGtleS5cbiAqLyBmdW5jdGlvbiB2cih0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IGhpKGUsIG4ucGF0aCksIGkgPSBzWzFdLCByID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChzKTtcbiAgICBsZXQgbyA9ICExO1xuICAgIHJldHVybiBTcih0KS5aKHtcbiAgICAgICAgcmFuZ2U6IHIsXG4gICAgICAgIFg6ICEwXG4gICAgfSwgKCh0LCBuLCBzKSA9PiB7XG4gICAgICAgIGNvbnN0IFtyLCB1LCAvKmJhdGNoSUQqLyBjXSA9IHQ7XG4gICAgICAgIHIgPT09IGUgJiYgdSA9PT0gaSAmJiAobyA9ICEwKSwgcy5kb25lKCk7XG4gICAgfSkpLm5leHQoKCgpID0+IG8pKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbXV0YXRpb24gcXVldWUgY29udGFpbnMgdGhlIGdpdmVuIGRvY3VtZW50LiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9ucyBvYmplY3Qgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIFZyKHQpIHtcbiAgICByZXR1cm4gTmkodCwgXCJtdXRhdGlvbnNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBtdXRhdGlvblF1ZXVlcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gU3IodCkge1xuICAgIHJldHVybiBOaSh0LCBcImRvY3VtZW50TXV0YXRpb25zXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25RdWV1ZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIERyKHQpIHtcbiAgICByZXR1cm4gTmkodCwgXCJtdXRhdGlvblF1ZXVlc1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBPZmZzZXQgdG8gZW5zdXJlIG5vbi1vdmVybGFwcGluZyB0YXJnZXQgaWRzLiAqL1xuLyoqXG4gKiBHZW5lcmF0ZXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIHRhcmdldCBJRHMgZm9yIHNlbmRpbmcgdGFyZ2V0cyB0byB0aGVcbiAqIHdhdGNoIHN0cmVhbS5cbiAqXG4gKiBUaGUgY2xpZW50IGNvbnN0cnVjdHMgdHdvIGdlbmVyYXRvcnMsIG9uZSBmb3IgdGhlIHRhcmdldCBjYWNoZSwgYW5kIG9uZSBmb3JcbiAqIGZvciB0aGUgc3luYyBlbmdpbmUgKHRvIGdlbmVyYXRlIGxpbWJvIGRvY3VtZW50cyB0YXJnZXRzKS4gVGhlc2VcbiAqIGdlbmVyYXRvcnMgcHJvZHVjZSBub24tb3ZlcmxhcHBpbmcgSURzIChieSB1c2luZyBldmVuIGFuZCBvZGQgSURzXG4gKiByZXNwZWN0aXZlbHkpLlxuICpcbiAqIEJ5IHNlcGFyYXRpbmcgdGhlIHRhcmdldCBJRCBzcGFjZSwgdGhlIHF1ZXJ5IGNhY2hlIGNhbiBnZW5lcmF0ZSB0YXJnZXQgSURzXG4gKiB0aGF0IHBlcnNpc3QgYWNyb3NzIGNsaWVudCByZXN0YXJ0cywgd2hpbGUgc3luYyBlbmdpbmUgY2FuIGluZGVwZW5kZW50bHlcbiAqIGdlbmVyYXRlIGluLW1lbW9yeSB0YXJnZXQgSURzIHRoYXQgYXJlIHRyYW5zaWVudCBhbmQgY2FuIGJlIHJldXNlZCBhZnRlciBhXG4gKiByZXN0YXJ0LlxuICovXG5jbGFzcyBDciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmJuID0gdDtcbiAgICB9XG4gICAgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm4gKz0gMiwgdGhpcy5ibjtcbiAgICB9XG4gICAgc3RhdGljIFBuKCkge1xuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNhY2hlIGdlbmVyYXRvciBtdXN0IHJldHVybiAnMicgaW4gaXRzIGZpcnN0IGNhbGwgdG8gYG5leHQoKWBcbiAgICAgICAgLy8gYXMgdGhlcmUgaXMgbm8gZGlmZmVyZW50aWF0aW9uIGluIHRoZSBwcm90b2NvbCBsYXllciBiZXR3ZWVuIGFuIHVuc2V0XG4gICAgICAgIC8vIG51bWJlciBhbmQgdGhlIG51bWJlciAnMCcuIElmIHdlIHdlcmUgdG8gc2VudCBhIHRhcmdldCB3aXRoIHRhcmdldCBJRFxuICAgICAgICAvLyAnMCcsIHRoZSBiYWNrZW5kIHdvdWxkIGNvbnNpZGVyIGl0IHVuc2V0IGFuZCByZXBsYWNlIGl0IHdpdGggaXRzIG93biBJRC5cbiAgICAgICAgcmV0dXJuIG5ldyBDcigwKTtcbiAgICB9XG4gICAgc3RhdGljIHZuKCkge1xuICAgICAgICAvLyBTeW5jIGVuZ2luZSBhc3NpZ25zIHRhcmdldCBJRHMgZm9yIGxpbWJvIGRvY3VtZW50IGRldGVjdGlvbi5cbiAgICAgICAgcmV0dXJuIG5ldyBDcigtMSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyB4ciB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gdCwgdGhpcy5JdCA9IGU7XG4gICAgfVxuICAgIC8vIFBPUlRJTkcgTk9URTogV2UgZG9uJ3QgY2FjaGUgZ2xvYmFsIG1ldGFkYXRhIGZvciB0aGUgdGFyZ2V0IGNhY2hlLCBzaW5jZVxuICAgIC8vIHNvbWUgb2YgaXQgKGluIHBhcnRpY3VsYXIgYGhpZ2hlc3RUYXJnZXRJZGApIGNhbiBiZSBtb2RpZmllZCBieSBzZWNvbmRhcnlcbiAgICAvLyB0YWJzLiBXZSBjb3VsZCBwZXJoYXBzIGJlIG1vcmUgZ3JhbnVsYXIgKGFuZCBlLmcuIHN0aWxsIGNhY2hlXG4gICAgLy8gYGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb25gIGluIG1lbW9yeSkgYnV0IGZvciBzaW1wbGljaXR5IHdlIGN1cnJlbnRseSBnb1xuICAgIC8vIHRvIEluZGV4ZWREYiB3aGVuZXZlciB3ZSBuZWVkIHRvIHJlYWQgbWV0YWRhdGEuIFdlIGNhbiByZXZpc2l0IGlmIGl0IHR1cm5zXG4gICAgLy8gb3V0IHRvIGhhdmUgYSBtZWFuaW5nZnVsIHBlcmZvcm1hbmNlIGltcGFjdC5cbiAgICBhbGxvY2F0ZVRhcmdldElkKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVm4odCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gbmV3IENyKGUuaGlnaGVzdFRhcmdldElkKTtcbiAgICAgICAgICAgIHJldHVybiBlLmhpZ2hlc3RUYXJnZXRJZCA9IG4ubmV4dCgpLCB0aGlzLlNuKHQsIGUpLm5leHQoKCgpID0+IGUuaGlnaGVzdFRhcmdldElkKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlZuKHQpLm5leHQoKHQgPT4gc3QuZnJvbVRpbWVzdGFtcChuZXcgbnQodC5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uLnNlY29uZHMsIHQubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbi5uYW5vc2Vjb25kcykpKSk7XG4gICAgfVxuICAgIGdldEhpZ2hlc3RTZXF1ZW5jZU51bWJlcih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlZuKHQpLm5leHQoKHQgPT4gdC5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIpKTtcbiAgICB9XG4gICAgc2V0VGFyZ2V0c01ldGFkYXRhKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVm4odCkubmV4dCgocyA9PiAocy5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSBlLCBuICYmIChzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBuLnRvVGltZXN0YW1wKCkpLCBcbiAgICAgICAgZSA+IHMuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyICYmIChzLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUpLCB0aGlzLlNuKHQsIHMpKSkpO1xuICAgIH1cbiAgICBhZGRUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRG4odCwgZSkubmV4dCgoKCkgPT4gdGhpcy5Wbih0KS5uZXh0KChuID0+IChuLnRhcmdldENvdW50ICs9IDEsIHRoaXMuQ24oZSwgbiksIFxuICAgICAgICB0aGlzLlNuKHQsIG4pKSkpKSk7XG4gICAgfVxuICAgIHVwZGF0ZVRhcmdldERhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ebih0LCBlKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0RGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIGUudGFyZ2V0SWQpLm5leHQoKCgpID0+IE5yKHQpLmRlbGV0ZShlLnRhcmdldElkKSkpLm5leHQoKCgpID0+IHRoaXMuVm4odCkpKS5uZXh0KChlID0+IChNKGUudGFyZ2V0Q291bnQgPiAwKSwgXG4gICAgICAgIGUudGFyZ2V0Q291bnQgLT0gMSwgdGhpcy5Tbih0LCBlKSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJvcHMgYW55IHRhcmdldHMgd2l0aCBzZXF1ZW5jZSBudW1iZXIgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSB1cHBlciBib3VuZCwgZXhjZXB0aW5nIHRob3NlXG4gICAgICogcHJlc2VudCBpbiBgYWN0aXZlVGFyZ2V0SWRzYC4gRG9jdW1lbnQgYXNzb2NpYXRpb25zIGZvciB0aGUgcmVtb3ZlZCB0YXJnZXRzIGFyZSBhbHNvIHJlbW92ZWQuXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRhcmdldHMgcmVtb3ZlZC5cbiAgICAgKi8gICAgcmVtb3ZlVGFyZ2V0cyh0LCBlLCBuKSB7XG4gICAgICAgIGxldCBzID0gMDtcbiAgICAgICAgY29uc3QgaSA9IFtdO1xuICAgICAgICByZXR1cm4gTnIodCkuWigoKHIsIG8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBRaShvKTtcbiAgICAgICAgICAgIHUuc2VxdWVuY2VOdW1iZXIgPD0gZSAmJiBudWxsID09PSBuLmdldCh1LnRhcmdldElkKSAmJiAocysrLCBpLnB1c2godGhpcy5yZW1vdmVUYXJnZXREYXRhKHQsIHUpKSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBBdC53YWl0Rm9yKGkpKSkubmV4dCgoKCkgPT4gcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIHByb3ZpZGVkIGZ1bmN0aW9uIHdpdGggZWFjaCBgVGFyZ2V0RGF0YWAgdGhhdCB3ZSBoYXZlIGNhY2hlZC5cbiAgICAgKi8gICAgZm9yRWFjaFRhcmdldCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBOcih0KS5aKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IFFpKG4pO1xuICAgICAgICAgICAgZShzKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBWbih0KSB7XG4gICAgICAgIHJldHVybiBrcih0KS5nZXQoXCJ0YXJnZXRHbG9iYWxLZXlcIikubmV4dCgodCA9PiAoTShudWxsICE9PSB0KSwgdCkpKTtcbiAgICB9XG4gICAgU24odCwgZSkge1xuICAgICAgICByZXR1cm4ga3IodCkucHV0KFwidGFyZ2V0R2xvYmFsS2V5XCIsIGUpO1xuICAgIH1cbiAgICBEbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBOcih0KS5wdXQoamkodGhpcy5JdCwgZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbi1wbGFjZSB1cGRhdGVzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSB0byBhY2NvdW50IGZvciB2YWx1ZXMgaW4gdGhlIGdpdmVuXG4gICAgICogVGFyZ2V0RGF0YS4gU2F2aW5nIGlzIGRvbmUgc2VwYXJhdGVseS4gUmV0dXJucyB0cnVlIGlmIHRoZXJlIHdlcmUgYW55XG4gICAgICogY2hhbmdlcyB0byB0aGUgbWV0YWRhdGEuXG4gICAgICovICAgIENuKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSAhMTtcbiAgICAgICAgcmV0dXJuIHQudGFyZ2V0SWQgPiBlLmhpZ2hlc3RUYXJnZXRJZCAmJiAoZS5oaWdoZXN0VGFyZ2V0SWQgPSB0LnRhcmdldElkLCBuID0gITApLCBcbiAgICAgICAgdC5zZXF1ZW5jZU51bWJlciA+IGUuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyICYmIChlLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IHQuc2VxdWVuY2VOdW1iZXIsIFxuICAgICAgICBuID0gITApLCBuO1xuICAgIH1cbiAgICBnZXRUYXJnZXRDb3VudCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlZuKHQpLm5leHQoKHQgPT4gdC50YXJnZXRDb3VudCkpO1xuICAgIH1cbiAgICBnZXRUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgLy8gSXRlcmF0aW5nIGJ5IHRoZSBjYW5vbmljYWxJZCBtYXkgeWllbGQgbW9yZSB0aGFuIG9uZSByZXN1bHQgYmVjYXVzZVxuICAgICAgICAvLyBjYW5vbmljYWxJZCB2YWx1ZXMgYXJlIG5vdCByZXF1aXJlZCB0byBiZSB1bmlxdWUgcGVyIHRhcmdldC4gVGhpcyBxdWVyeVxuICAgICAgICAvLyBkZXBlbmRzIG9uIHRoZSBxdWVyeVRhcmdldHMgaW5kZXggdG8gYmUgZWZmaWNpZW50LlxuICAgICAgICBjb25zdCBuID0geGUoZSksIHMgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSBdLCBbIG4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgbGV0IGkgPSBudWxsO1xuICAgICAgICByZXR1cm4gTnIodCkuWih7XG4gICAgICAgICAgICByYW5nZTogcyxcbiAgICAgICAgICAgIGluZGV4OiBcInF1ZXJ5VGFyZ2V0c0luZGV4XCJcbiAgICAgICAgfSwgKCh0LCBuLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gUWkobik7XG4gICAgICAgICAgICAvLyBBZnRlciBmaW5kaW5nIGEgcG90ZW50aWFsIG1hdGNoLCBjaGVjayB0aGF0IHRoZSB0YXJnZXQgaXNcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGVxdWFsIHRvIHRoZSByZXF1ZXN0ZWQgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICAgICAga2UoZSwgci50YXJnZXQpICYmIChpID0gciwgcy5kb25lKCkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICBhZGRNYXRjaGluZ0tleXModCwgZSwgbikge1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IFRoZSByZXZlcnNlIGluZGV4IChkb2N1bWVudHNUYXJnZXRzKSBpcyBtYWludGFpbmVkIGJ5XG4gICAgICAgIC8vIEluZGV4ZWREYi5cbiAgICAgICAgY29uc3QgcyA9IFtdLCBpID0gT3IodCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IHJpKGUucGF0aCk7XG4gICAgICAgICAgICBzLnB1c2goaS5wdXQoe1xuICAgICAgICAgICAgICAgIHRhcmdldElkOiBuLFxuICAgICAgICAgICAgICAgIHBhdGg6IHJcbiAgICAgICAgICAgIH0pKSwgcy5wdXNoKHRoaXMucmVmZXJlbmNlRGVsZWdhdGUuYWRkUmVmZXJlbmNlKHQsIG4sIGUpKTtcbiAgICAgICAgfSkpLCBBdC53YWl0Rm9yKHMpO1xuICAgIH1cbiAgICByZW1vdmVNYXRjaGluZ0tleXModCwgZSwgbikge1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IFRoZSByZXZlcnNlIGluZGV4IChkb2N1bWVudHNUYXJnZXRzKSBpcyBtYWludGFpbmVkIGJ5XG4gICAgICAgIC8vIEluZGV4ZWREYi5cbiAgICAgICAgY29uc3QgcyA9IE9yKHQpO1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaChlLCAoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gcmkoZS5wYXRoKTtcbiAgICAgICAgICAgIHJldHVybiBBdC53YWl0Rm9yKFsgcy5kZWxldGUoWyBuLCBpIF0pLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLnJlbW92ZVJlZmVyZW5jZSh0LCBuLCBlKSBdKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBPcih0KSwgcyA9IElEQktleVJhbmdlLmJvdW5kKFsgZSBdLCBbIGUgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIG4uZGVsZXRlKHMpO1xuICAgIH1cbiAgICBnZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBJREJLZXlSYW5nZS5ib3VuZChbIGUgXSwgWyBlICsgMSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCksIHMgPSBPcih0KTtcbiAgICAgICAgbGV0IGkgPSBmcygpO1xuICAgICAgICByZXR1cm4gcy5aKHtcbiAgICAgICAgICAgIHJhbmdlOiBuLFxuICAgICAgICAgICAgWDogITBcbiAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gY2kodFsxXSksIHIgPSBuZXcgY3Qocyk7XG4gICAgICAgICAgICBpID0gaS5hZGQocik7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIGNvbnRhaW5zS2V5KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHJpKGUucGF0aCksIHMgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4gXSwgWyBldChuKSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgcmV0dXJuIE9yKHQpLlooe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIixcbiAgICAgICAgICAgIFg6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgfSwgKChbdCwgZV0sIG4sIHMpID0+IHtcbiAgICAgICAgICAgIC8vIEhhdmluZyBhIHNlbnRpbmVsIHJvdyBmb3IgYSBkb2N1bWVudCBkb2VzIG5vdCBjb3VudCBhcyBjb250YWluaW5nIHRoYXQgZG9jdW1lbnQ7XG4gICAgICAgICAgICAvLyBGb3IgdGhlIHRhcmdldCBjYWNoZSwgY29udGFpbmluZyB0aGUgZG9jdW1lbnQgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHBhcnQgb2Ygc29tZVxuICAgICAgICAgICAgLy8gdGFyZ2V0LlxuICAgICAgICAgICAgMCAhPT0gdCAmJiAoaSsrLCBzLmRvbmUoKSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpID4gMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhIFRhcmdldERhdGEgZW50cnkgYnkgdGFyZ2V0IElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldElkIC0gVGhlIHRhcmdldCBJRCBvZiB0aGUgVGFyZ2V0RGF0YSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIFRoZSBjYWNoZWQgVGFyZ2V0RGF0YSBlbnRyeSwgb3IgbnVsbCBpZiB0aGUgY2FjaGUgaGFzIG5vIGVudHJ5IGZvclxuICAgICAqIHRoZSB0YXJnZXQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICBzZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBOcih0KS5nZXQoZSkubmV4dCgodCA9PiB0ID8gUWkodCkgOiBudWxsKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcXVlcmllcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gTnIodCkge1xuICAgIHJldHVybiBOaSh0LCBcInRhcmdldHNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSB0YXJnZXQgZ2xvYmFscyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24ga3IodCkge1xuICAgIHJldHVybiBOaSh0LCBcInRhcmdldEdsb2JhbFwiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGRvY3VtZW50IHRhcmdldCBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gT3IodCkge1xuICAgIHJldHVybiBOaSh0LCBcInRhcmdldERvY3VtZW50c1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gZnVuY3Rpb24gTXIoW3QsIGVdLCBbbiwgc10pIHtcbiAgICBjb25zdCBpID0gWih0LCBuKTtcbiAgICByZXR1cm4gMCA9PT0gaSA/IFooZSwgcykgOiBpO1xufVxuXG4vKipcbiAqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBudGggc2VxdWVuY2UgbnVtYmVyLiBLZWVwcyBhIHJvbGxpbmcgYnVmZmVyIG9mIHRoZVxuICogbG93ZXN0IG4gdmFsdWVzIHBhc3NlZCB0byBgYWRkRWxlbWVudGAsIGFuZCBmaW5hbGx5IHJlcG9ydHMgdGhlIGxhcmdlc3Qgb2ZcbiAqIHRoZW0gaW4gYG1heFZhbHVlYC5cbiAqLyBjbGFzcyBGciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnhuID0gdCwgdGhpcy5idWZmZXIgPSBuZXcgcXQoTXIpLCB0aGlzLk5uID0gMDtcbiAgICB9XG4gICAga24oKSB7XG4gICAgICAgIHJldHVybiArK3RoaXMuTm47XG4gICAgfVxuICAgIE9uKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFsgdCwgdGhpcy5rbigpIF07XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5zaXplIDwgdGhpcy54bikgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5hZGQoZSk7IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuYnVmZmVyLmxhc3QoKTtcbiAgICAgICAgICAgIE1yKGUsIHQpIDwgMCAmJiAodGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5kZWxldGUodCkuYWRkKGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIC8vIEd1YXJhbnRlZWQgdG8gYmUgbm9uLWVtcHR5LiBJZiB3ZSBkZWNpZGUgd2UgYXJlIG5vdCBjb2xsZWN0aW5nIGFueVxuICAgICAgICAvLyBzZXF1ZW5jZSBudW1iZXJzLCBudGhTZXF1ZW5jZU51bWJlciBiZWxvdyBzaG9ydC1jaXJjdWl0cy4gSWYgd2UgaGF2ZVxuICAgICAgICAvLyBkZWNpZGVkIHRoYXQgd2UgYXJlIGNvbGxlY3RpbmcgbiBzZXF1ZW5jZSBudW1iZXJzLCBpdCdzIGJlY2F1c2UgbiBpcyBzb21lXG4gICAgICAgIC8vIHBlcmNlbnRhZ2Ugb2YgdGhlIGV4aXN0aW5nIHNlcXVlbmNlIG51bWJlcnMuIFRoYXQgbWVhbnMgd2Ugc2hvdWxkIG5ldmVyXG4gICAgICAgIC8vIGJlIGluIGEgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSBjb2xsZWN0aW5nIHNlcXVlbmNlIG51bWJlcnMgYnV0IGRvbid0XG4gICAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYW55LlxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGFzdCgpWzBdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2NoZWR1bGluZyBvZiBMUlUgZ2FyYmFnZSBjb2xsZWN0aW9uLiBJdCBoYW5kbGVzIGNoZWNraW5nXG4gKiB3aGV0aGVyIG9yIG5vdCBHQyBpcyBlbmFibGVkLCBhcyB3ZWxsIGFzIHdoaWNoIGRlbGF5IHRvIHVzZSBiZWZvcmUgdGhlIG5leHQgcnVuLlxuICovIGNsYXNzICRyIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IHQsIHRoaXMuYXN5bmNRdWV1ZSA9IGUsIHRoaXMubG9jYWxTdG9yZSA9IG4sIHRoaXMuTW4gPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgLTEgIT09IHRoaXMuZ2FyYmFnZUNvbGxlY3Rvci5wYXJhbXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCAmJiB0aGlzLkZuKDZlNCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuTW4gJiYgKHRoaXMuTW4uY2FuY2VsKCksIHRoaXMuTW4gPSBudWxsKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLk1uO1xuICAgIH1cbiAgICBGbih0KSB7XG4gICAgICAgIEMoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIGBHYXJiYWdlIGNvbGxlY3Rpb24gc2NoZWR1bGVkIGluICR7dH1tc2ApLCB0aGlzLk1uID0gdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBZnRlckRlbGF5KFwibHJ1X2dhcmJhZ2VfY29sbGVjdGlvblwiIC8qIExydUdhcmJhZ2VDb2xsZWN0aW9uICovICwgdCwgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuTW4gPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvY2FsU3RvcmUuY29sbGVjdEdhcmJhZ2UodGhpcy5nYXJiYWdlQ29sbGVjdG9yKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBWdCh0KSA/IEMoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiSWdub3JpbmcgSW5kZXhlZERCIGVycm9yIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb246IFwiLCB0KSA6IGF3YWl0IEV0KHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5GbigzZTUpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4vKiogSW1wbGVtZW50cyB0aGUgc3RlcHMgZm9yIExSVSBnYXJiYWdlIGNvbGxlY3Rpb24uICovIGNsYXNzIEJyIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuJG4gPSB0LCB0aGlzLnBhcmFtcyA9IGU7XG4gICAgfVxuICAgIGNhbGN1bGF0ZVRhcmdldENvdW50KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG4uQm4odCkubmV4dCgodCA9PiBNYXRoLmZsb29yKGUgLyAxMDAgKiB0KSkpO1xuICAgIH1cbiAgICBudGhTZXF1ZW5jZU51bWJlcih0LCBlKSB7XG4gICAgICAgIGlmICgwID09PSBlKSByZXR1cm4gQXQucmVzb2x2ZShPdC5hdCk7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgRnIoZSk7XG4gICAgICAgIHJldHVybiB0aGlzLiRuLmZvckVhY2hUYXJnZXQodCwgKHQgPT4gbi5Pbih0LnNlcXVlbmNlTnVtYmVyKSkpLm5leHQoKCgpID0+IHRoaXMuJG4uTG4odCwgKHQgPT4gbi5Pbih0KSkpKSkubmV4dCgoKCkgPT4gbi5tYXhWYWx1ZSkpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG4ucmVtb3ZlVGFyZ2V0cyh0LCBlLCBuKTtcbiAgICB9XG4gICAgcmVtb3ZlT3JwaGFuZWREb2N1bWVudHModCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kbi5yZW1vdmVPcnBoYW5lZERvY3VtZW50cyh0LCBlKTtcbiAgICB9XG4gICAgY29sbGVjdCh0LCBlKSB7XG4gICAgICAgIHJldHVybiAtMSA9PT0gdGhpcy5wYXJhbXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCA/IChDKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBcIkdhcmJhZ2UgY29sbGVjdGlvbiBza2lwcGVkOyBkaXNhYmxlZFwiKSwgXG4gICAgICAgIEF0LnJlc29sdmUoRXIpKSA6IHRoaXMuZ2V0Q2FjaGVTaXplKHQpLm5leHQoKG4gPT4gbiA8IHRoaXMucGFyYW1zLmNhY2hlU2l6ZUNvbGxlY3Rpb25UaHJlc2hvbGQgPyAoQyhcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgYEdhcmJhZ2UgY29sbGVjdGlvbiBza2lwcGVkOyBDYWNoZSBzaXplICR7bn0gaXMgbG93ZXIgdGhhbiB0aHJlc2hvbGQgJHt0aGlzLnBhcmFtcy5jYWNoZVNpemVDb2xsZWN0aW9uVGhyZXNob2xkfWApLCBcbiAgICAgICAgRXIpIDogdGhpcy5Vbih0LCBlKSkpO1xuICAgIH1cbiAgICBnZXRDYWNoZVNpemUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kbi5nZXRDYWNoZVNpemUodCk7XG4gICAgfVxuICAgIFVuKHQsIGUpIHtcbiAgICAgICAgbGV0IG4sIHMsIGksIHIsIG8sIGMsIGE7XG4gICAgICAgIGNvbnN0IGggPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVUYXJnZXRDb3VudCh0LCB0aGlzLnBhcmFtcy5wZXJjZW50aWxlVG9Db2xsZWN0KS5uZXh0KChlID0+IChcbiAgICAgICAgLy8gQ2FwIGF0IHRoZSBjb25maWd1cmVkIG1heFxuICAgICAgICBlID4gdGhpcy5wYXJhbXMubWF4aW11bVNlcXVlbmNlTnVtYmVyc1RvQ29sbGVjdCA/IChDKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgQ2FwcGluZyBzZXF1ZW5jZSBudW1iZXJzIHRvIGNvbGxlY3QgZG93biB0byB0aGUgbWF4aW11bSBvZiAke3RoaXMucGFyYW1zLm1heGltdW1TZXF1ZW5jZU51bWJlcnNUb0NvbGxlY3R9IGZyb20gJHtlfWApLCBcbiAgICAgICAgcyA9IHRoaXMucGFyYW1zLm1heGltdW1TZXF1ZW5jZU51bWJlcnNUb0NvbGxlY3QpIDogcyA9IGUsIHIgPSBEYXRlLm5vdygpLCB0aGlzLm50aFNlcXVlbmNlTnVtYmVyKHQsIHMpKSkpLm5leHQoKHMgPT4gKG4gPSBzLCBcbiAgICAgICAgbyA9IERhdGUubm93KCksIHRoaXMucmVtb3ZlVGFyZ2V0cyh0LCBuLCBlKSkpKS5uZXh0KChlID0+IChpID0gZSwgYyA9IERhdGUubm93KCksIFxuICAgICAgICB0aGlzLnJlbW92ZU9ycGhhbmVkRG9jdW1lbnRzKHQsIG4pKSkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKGEgPSBEYXRlLm5vdygpLCBTKCkgPD0gTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgICAgICAgICBDKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgTFJVIEdhcmJhZ2UgQ29sbGVjdGlvblxcblxcdENvdW50ZWQgdGFyZ2V0cyBpbiAke3IgLSBofW1zXFxuXFx0RGV0ZXJtaW5lZCBsZWFzdCByZWNlbnRseSB1c2VkICR7c30gaW4gYCArIChvIC0gcikgKyBcIm1zXFxuXCIgKyBgXFx0UmVtb3ZlZCAke2l9IHRhcmdldHMgaW4gYCArIChjIC0gbykgKyBcIm1zXFxuXCIgKyBgXFx0UmVtb3ZlZCAke3R9IGRvY3VtZW50cyBpbiBgICsgKGEgLSBjKSArIFwibXNcXG5cIiArIGBUb3RhbCBEdXJhdGlvbjogJHthIC0gaH1tc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGRpZFJ1bjogITAsXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VOdW1iZXJzQ29sbGVjdGVkOiBzLFxuICAgICAgICAgICAgICAgIHRhcmdldHNSZW1vdmVkOiBpLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50c1JlbW92ZWQ6IHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFByb3ZpZGVzIExSVSBmdW5jdGlvbmFsaXR5IGZvciBJbmRleGVkREIgcGVyc2lzdGVuY2UuICovXG5jbGFzcyBMciB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmRiID0gdCwgdGhpcy5nYXJiYWdlQ29sbGVjdG9yID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCcih0LCBlKTtcbiAgICAgICAgfSh0aGlzLCBlKTtcbiAgICB9XG4gICAgQm4odCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5xbih0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0VGFyZ2V0Q2FjaGUoKS5nZXRUYXJnZXRDb3VudCh0KS5uZXh0KCh0ID0+IGUubmV4dCgoZSA9PiB0ICsgZSkpKSk7XG4gICAgfVxuICAgIHFuKHQpIHtcbiAgICAgICAgbGV0IGUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5Mbih0LCAodCA9PiB7XG4gICAgICAgICAgICBlKys7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgfVxuICAgIGZvckVhY2hUYXJnZXQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRUYXJnZXRDYWNoZSgpLmZvckVhY2hUYXJnZXQodCwgZSk7XG4gICAgfVxuICAgIExuKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuS24odCwgKCh0LCBuKSA9PiBlKG4pKSk7XG4gICAgfVxuICAgIGFkZFJlZmVyZW5jZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBVcih0LCBuKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIFVyKHQsIG4pO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0VGFyZ2V0Q2FjaGUoKS5yZW1vdmVUYXJnZXRzKHQsIGUsIG4pO1xuICAgIH1cbiAgICBtYXJrUG90ZW50aWFsbHlPcnBoYW5lZCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBVcih0LCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGFueXRoaW5nIHdvdWxkIHByZXZlbnQgdGhpcyBkb2N1bWVudCBmcm9tIGJlaW5nIGdhcmJhZ2VcbiAgICAgKiBjb2xsZWN0ZWQsIGdpdmVuIHRoYXQgdGhlIGRvY3VtZW50IGluIHF1ZXN0aW9uIGlzIG5vdCBwcmVzZW50IGluIGFueVxuICAgICAqIHRhcmdldHMgYW5kIGhhcyBhIHNlcXVlbmNlIG51bWJlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHVwcGVyIGJvdW5kIGZvclxuICAgICAqIHRoZSBjb2xsZWN0aW9uIHJ1bi5cbiAgICAgKi8gICAgR24odCwgZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgbGV0IG4gPSAhMTtcbiAgICAgICAgICAgIHJldHVybiBEcih0KS50dCgocyA9PiB2cih0LCBzLCBlKS5uZXh0KCh0ID0+ICh0ICYmIChuID0gITApLCBBdC5yZXNvbHZlKCF0KSkpKSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICAgICAgfSh0LCBlKTtcbiAgICB9XG4gICAgcmVtb3ZlT3JwaGFuZWREb2N1bWVudHModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5kYi5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCkubmV3Q2hhbmdlQnVmZmVyKCksIHMgPSBbXTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5Lbih0LCAoKHIsIG8pID0+IHtcbiAgICAgICAgICAgIGlmIChvIDw9IGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5Hbih0LCByKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlKSBcbiAgICAgICAgICAgICAgICAgICAgLy8gT3VyIHNpemUgYWNjb3VudGluZyByZXF1aXJlcyB1cyB0byByZWFkIGFsbCBkb2N1bWVudHMgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpKyssIG4uZ2V0RW50cnkodCwgcikubmV4dCgoKCkgPT4gKG4ucmVtb3ZlRW50cnkociwgc3QubWluKCkpLCBPcih0KS5kZWxldGUoWyAwLCByaShyLnBhdGgpIF0pKSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBzLnB1c2goZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBBdC53YWl0Rm9yKHMpKSkubmV4dCgoKCkgPT4gbi5hcHBseSh0KSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUud2l0aFNlcXVlbmNlTnVtYmVyKHQuY3VycmVudFNlcXVlbmNlTnVtYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0VGFyZ2V0Q2FjaGUoKS51cGRhdGVUYXJnZXREYXRhKHQsIG4pO1xuICAgIH1cbiAgICB1cGRhdGVMaW1ib0RvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFVyKHQsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIHByb3ZpZGVkIGZ1bmN0aW9uIGZvciBlYWNoIGRvY3VtZW50IGluIHRoZSBjYWNoZSB0aGF0IGlzICdvcnBoYW5lZCcuIE9ycGhhbmVkXG4gICAgICogbWVhbnMgbm90IGEgcGFydCBvZiBhbnkgdGFyZ2V0LCBzbyB0aGUgb25seSBlbnRyeSBpbiB0aGUgdGFyZ2V0LWRvY3VtZW50IGluZGV4IGZvclxuICAgICAqIHRoYXQgZG9jdW1lbnQgd2lsbCBiZSB0aGUgc2VudGluZWwgcm93ICh0YXJnZXRJZCAwKSwgd2hpY2ggd2lsbCBhbHNvIGhhdmUgdGhlIHNlcXVlbmNlXG4gICAgICogbnVtYmVyIGZvciB0aGUgbGFzdCB0aW1lIHRoZSBkb2N1bWVudCB3YXMgYWNjZXNzZWQuXG4gICAgICovICAgIEtuKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IE9yKHQpO1xuICAgICAgICBsZXQgcywgaSA9IE90LmF0O1xuICAgICAgICByZXR1cm4gbi5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcImRvY3VtZW50VGFyZ2V0c0luZGV4XCJcbiAgICAgICAgfSwgKChbdCwgbl0sIHtwYXRoOiByLCBzZXF1ZW5jZU51bWJlcjogb30pID0+IHtcbiAgICAgICAgICAgIDAgPT09IHQgPyAoXG4gICAgICAgICAgICAvLyBpZiBuZXh0VG9SZXBvcnQgaXMgdmFsaWQsIHJlcG9ydCBpdCwgdGhpcyBpcyBhIG5ldyBrZXkgc28gdGhlXG4gICAgICAgICAgICAvLyBsYXN0IG9uZSBtdXN0IG5vdCBiZSBhIG1lbWJlciBvZiBhbnkgdGFyZ2V0cy5cbiAgICAgICAgICAgIGkgIT09IE90LmF0ICYmIGUobmV3IGN0KGNpKHMpKSwgaSksIFxuICAgICAgICAgICAgLy8gc2V0IG5leHRUb1JlcG9ydCB0byBiZSB0aGlzIHNlcXVlbmNlIG51bWJlci4gSXQncyB0aGUgbmV4dCBvbmUgd2VcbiAgICAgICAgICAgIC8vIG1pZ2h0IHJlcG9ydCwgaWYgd2UgZG9uJ3QgZmluZCBhbnkgdGFyZ2V0cyBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgc2VxdWVuY2UgbnVtYmVyIG11c3QgYmUgZGVmaW5lZCB3aGVuIHRoZSB0YXJnZXRJZFxuICAgICAgICAgICAgLy8gaXMgMC5cbiAgICAgICAgICAgIGkgPSBvLCBzID0gcikgOiBcbiAgICAgICAgICAgIC8vIHNldCBuZXh0VG9SZXBvcnQgdG8gYmUgaW52YWxpZCwgd2Uga25vdyB3ZSBkb24ndCBuZWVkIHRvIHJlcG9ydFxuICAgICAgICAgICAgLy8gdGhpcyBvbmUgc2luY2Ugd2UgZm91bmQgYSB0YXJnZXQgZm9yIGl0LlxuICAgICAgICAgICAgaSA9IE90LmF0O1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgLy8gU2luY2Ugd2UgcmVwb3J0IHNlcXVlbmNlIG51bWJlcnMgYWZ0ZXIgZ2V0dGluZyB0byB0aGUgbmV4dCBrZXksIHdlXG4gICAgICAgICAgICAvLyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBsYXN0IGtleSB3ZSBpdGVyYXRlZCBvdmVyIHdhcyBhbiBvcnBoYW5lZFxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgYW5kIHJlcG9ydCBpdC5cbiAgICAgICAgICAgIGkgIT09IE90LmF0ICYmIGUobmV3IGN0KGNpKHMpKSwgaSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0Q2FjaGVTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpLmdldFNpemUodCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBVcih0LCBlKSB7XG4gICAgcmV0dXJuIE9yKHQpLnB1dChcbiAgICAvKipcbiAqIEByZXR1cm5zIEEgdmFsdWUgc3VpdGFibGUgZm9yIHdyaXRpbmcgYSBzZW50aW5lbCByb3cgaW4gdGhlIHRhcmdldC1kb2N1bWVudFxuICogc3RvcmUuXG4gKi9cbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YXJnZXRJZDogMCxcbiAgICAgICAgICAgIHBhdGg6IHJpKHQucGF0aCksXG4gICAgICAgICAgICBzZXF1ZW5jZU51bWJlcjogZVxuICAgICAgICB9O1xuICAgIH0oZSwgdC5jdXJyZW50U2VxdWVuY2VOdW1iZXIpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW4tbWVtb3J5IGJ1ZmZlciBvZiBlbnRyaWVzIHRvIGJlIHdyaXR0ZW4gdG8gYSBSZW1vdGVEb2N1bWVudENhY2hlLlxuICogSXQgY2FuIGJlIHVzZWQgdG8gYmF0Y2ggdXAgYSBzZXQgb2YgY2hhbmdlcyB0byBiZSB3cml0dGVuIHRvIHRoZSBjYWNoZSwgYnV0XG4gKiBhZGRpdGlvbmFsbHkgc3VwcG9ydHMgcmVhZGluZyBlbnRyaWVzIGJhY2sgd2l0aCB0aGUgYGdldEVudHJ5KClgIG1ldGhvZCxcbiAqIGZhbGxpbmcgYmFjayB0byB0aGUgdW5kZXJseWluZyBSZW1vdGVEb2N1bWVudENhY2hlIGlmIG5vIGVudHJ5IGlzXG4gKiBidWZmZXJlZC5cbiAqXG4gKiBFbnRyaWVzIGFkZGVkIHRvIHRoZSBjYWNoZSAqbXVzdCogYmUgcmVhZCBmaXJzdC4gVGhpcyBpcyB0byBmYWNpbGl0YXRlXG4gKiBjYWxjdWxhdGluZyB0aGUgc2l6ZSBkZWx0YSBvZiB0aGUgcGVuZGluZyBjaGFuZ2VzLlxuICpcbiAqIFBPUlRJTkcgTk9URTogVGhpcyBjbGFzcyB3YXMgaW1wbGVtZW50ZWQgdGhlbiByZW1vdmVkIGZyb20gb3RoZXIgcGxhdGZvcm1zLlxuICogSWYgYnl0ZS1jb3VudGluZyBlbmRzIHVwIGJlaW5nIG5lZWRlZCBvbiB0aGUgb3RoZXIgcGxhdGZvcm1zLCBjb25zaWRlclxuICogcG9ydGluZyB0aGlzIGNsYXNzIGFzIHBhcnQgb2YgdGhhdCBpbXBsZW1lbnRhdGlvbiB3b3JrLlxuICovIGNsYXNzIHFyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQSBtYXBwaW5nIG9mIGRvY3VtZW50IGtleSB0byB0aGUgbmV3IGNhY2hlIGVudHJ5IHRoYXQgc2hvdWxkIGJlIHdyaXR0ZW4uXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBlcygodCA9PiB0LnRvU3RyaW5nKCkpLCAoKHQsIGUpID0+IHQuaXNFcXVhbChlKSkpLCB0aGlzLmNoYW5nZXNBcHBsaWVkID0gITE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1ZmZlcnMgYSBgUmVtb3RlRG9jdW1lbnRDYWNoZS5hZGRFbnRyeSgpYCBjYWxsLlxuICAgICAqXG4gICAgICogWW91IGNhbiBvbmx5IG1vZGlmeSBkb2N1bWVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiByZXRyaWV2ZWQgdmlhXG4gICAgICogYGdldEVudHJ5KCkvZ2V0RW50cmllcygpYCAoZW5mb3JjZWQgdmlhIEluZGV4ZWREYnMgYGFwcGx5KClgKS5cbiAgICAgKi8gICAgYWRkRW50cnkodCkge1xuICAgICAgICB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKSwgdGhpcy5jaGFuZ2VzLnNldCh0LmtleSwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1ZmZlcnMgYSBgUmVtb3RlRG9jdW1lbnRDYWNoZS5yZW1vdmVFbnRyeSgpYCBjYWxsLlxuICAgICAqXG4gICAgICogWW91IGNhbiBvbmx5IHJlbW92ZSBkb2N1bWVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiByZXRyaWV2ZWQgdmlhXG4gICAgICogYGdldEVudHJ5KCkvZ2V0RW50cmllcygpYCAoZW5mb3JjZWQgdmlhIEluZGV4ZWREYnMgYGFwcGx5KClgKS5cbiAgICAgKi8gICAgcmVtb3ZlRW50cnkodCwgZSkge1xuICAgICAgICB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKSwgdGhpcy5jaGFuZ2VzLnNldCh0LCBTZS5uZXdJbnZhbGlkRG9jdW1lbnQodCkuc2V0UmVhZFRpbWUoZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhbiBlbnRyeSBpbiB0aGUgY2FjaGUuIFRoZSBidWZmZXJlZCBjaGFuZ2VzIHdpbGwgZmlyc3QgYmUgY2hlY2tlZCxcbiAgICAgKiBhbmQgaWYgbm8gYnVmZmVyZWQgY2hhbmdlIGFwcGxpZXMsIHRoaXMgd2lsbCBmb3J3YXJkIHRvXG4gICAgICogYFJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gLSBUaGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggdG8gcGVyZm9ybSBhbnkgcGVyc2lzdGVuY2VcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXkgLSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIFRoZSBjYWNoZWQgZG9jdW1lbnQgb3IgYW4gaW52YWxpZCBkb2N1bWVudCBpZiB3ZSBoYXZlIG5vdGhpbmdcbiAgICAgKiBjYWNoZWQuXG4gICAgICovICAgIGdldEVudHJ5KHQsIGUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3RBcHBsaWVkKCk7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmNoYW5nZXMuZ2V0KGUpO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBuID8gQXQucmVzb2x2ZShuKSA6IHRoaXMuZ2V0RnJvbUNhY2hlKHQsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBzZXZlcmFsIGVudHJpZXMgaW4gdGhlIGNhY2hlLCBmb3J3YXJkaW5nIHRvXG4gICAgICogYFJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gLSBUaGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggdG8gcGVyZm9ybSBhbnkgcGVyc2lzdGVuY2VcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXlzIC0gVGhlIGtleXMgb2YgdGhlIGVudHJpZXMgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBBIG1hcCBvZiBjYWNoZWQgZG9jdW1lbnRzLCBpbmRleGVkIGJ5IGtleS4gSWYgYW4gZW50cnkgY2Fubm90IGJlXG4gICAgICogICAgIGZvdW5kLCB0aGUgY29ycmVzcG9uZGluZyBrZXkgd2lsbCBiZSBtYXBwZWQgdG8gYW4gaW52YWxpZCBkb2N1bWVudC5cbiAgICAgKi8gICAgZ2V0RW50cmllcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFsbEZyb21DYWNoZSh0LCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBidWZmZXJlZCBjaGFuZ2VzIHRvIHRoZSB1bmRlcmx5aW5nIFJlbW90ZURvY3VtZW50Q2FjaGUsIHVzaW5nXG4gICAgICogdGhlIHByb3ZpZGVkIHRyYW5zYWN0aW9uLlxuICAgICAqLyAgICBhcHBseSh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKSwgdGhpcy5jaGFuZ2VzQXBwbGllZCA9ICEwLCB0aGlzLmFwcGx5Q2hhbmdlcyh0KTtcbiAgICB9XG4gICAgLyoqIEhlbHBlciB0byBhc3NlcnQgdGhpcy5jaGFuZ2VzIGlzIG5vdCBudWxsICAqLyAgICBhc3NlcnROb3RBcHBsaWVkKCkge31cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIFJlbW90ZURvY3VtZW50Q2FjaGUgZm9yIEluZGV4ZWREYi4gVG8gY29uc3RydWN0LCBpbnZva2VcbiAqIGBuZXdJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlKClgLlxuICovIGNsYXNzIEtyIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuSXQgPSB0O1xuICAgIH1cbiAgICBzZXRJbmRleE1hbmFnZXIodCkge1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHN1cHBsaWVkIGVudHJpZXMgdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgYXJlIHJlcXVpcmVkIHRvIGdvIHRocm91Z2ggdGhlIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyXG4gICAgICogcmV0dXJuZWQgYnkgYG5ld0NoYW5nZUJ1ZmZlcigpYCB0byBlbnN1cmUgcHJvcGVyIGFjY291bnRpbmcgb2YgbWV0YWRhdGEuXG4gICAgICovICAgIGFkZEVudHJ5KHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIFdyKHQpLnB1dChuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGRvY3VtZW50IGZyb20gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGByZW1vdmVFbnRyeWAgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAgdG8gZW5zdXJlIHByb3BlciBhY2NvdW50aW5nIG9mIG1ldGFkYXRhLlxuICAgICAqLyAgICByZW1vdmVFbnRyeSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBXcih0KS5kZWxldGUoXG4gICAgICAgIC8qKlxuICogUmV0dXJucyBhIGtleSB0aGF0IGNhbiBiZSB1c2VkIGZvciBkb2N1bWVudCBsb29rdXBzIHZpYSB0aGUgcHJpbWFyeSBrZXkgb2ZcbiAqIHRoZSBEYlJlbW90ZURvY3VtZW50IG9iamVjdCBzdG9yZS5cbiAqL1xuICAgICAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5wYXRoLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIHJldHVybiBbIFxuICAgICAgICAgICAgLyogcHJlZml4IHBhdGggKi8gbi5zbGljZSgwLCBuLmxlbmd0aCAtIDIpLCBcbiAgICAgICAgICAgIC8qIGNvbGxlY3Rpb24gaWQgKi8gbltuLmxlbmd0aCAtIDJdLCBVaShlKSwgXG4gICAgICAgICAgICAvKiBkb2N1bWVudCBpZCAqLyBuW24ubGVuZ3RoIC0gMV0gXTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJldHVybnMgYSBrZXkgdGhhdCBjYW4gYmUgdXNlZCBmb3IgZG9jdW1lbnQgbG9va3VwcyBvbiB0aGVcbiAqIGBEYlJlbW90ZURvY3VtZW50RG9jdW1lbnRDb2xsZWN0aW9uR3JvdXBJbmRleGAgaW5kZXguXG4gKi8gKGUsIG4pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBjYWNoZSBzaXplLlxuICAgICAqXG4gICAgICogQ2FsbGVycyB0byBgYWRkRW50cnkoKWAgYW5kIGByZW1vdmVFbnRyeSgpYCAqbXVzdCogY2FsbCB0aGlzIGFmdGVyd2FyZHMgdG8gdXBkYXRlIHRoZVxuICAgICAqIGNhY2hlJ3MgbWV0YWRhdGEuXG4gICAgICovICAgIHVwZGF0ZU1ldGFkYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEodCkubmV4dCgobiA9PiAobi5ieXRlU2l6ZSArPSBlLCB0aGlzLlFuKHQsIG4pKSkpO1xuICAgIH1cbiAgICBnZXRFbnRyeSh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gU2UubmV3SW52YWxpZERvY3VtZW50KGUpO1xuICAgICAgICByZXR1cm4gV3IodCkuWih7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2Uub25seSh6cihlKSlcbiAgICAgICAgfSwgKCh0LCBzKSA9PiB7XG4gICAgICAgICAgICBuID0gdGhpcy5qbihlLCBzKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgYW4gZW50cnkgaW4gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50S2V5IC0gVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2FjaGVkIGRvY3VtZW50IGVudHJ5IGFuZCBpdHMgc2l6ZS5cbiAgICAgKi8gICAgV24odCwgZSkge1xuICAgICAgICBsZXQgbiA9IHtcbiAgICAgICAgICAgIHNpemU6IDAsXG4gICAgICAgICAgICBkb2N1bWVudDogU2UubmV3SW52YWxpZERvY3VtZW50KGUpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBXcih0KS5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcImRvY3VtZW50S2V5SW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBJREJLZXlSYW5nZS5vbmx5KHpyKGUpKVxuICAgICAgICB9LCAoKHQsIHMpID0+IHtcbiAgICAgICAgICAgIG4gPSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMuam4oZSwgcyksXG4gICAgICAgICAgICAgICAgc2l6ZTogYnIocylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIGdldEVudHJpZXModCwgZSkge1xuICAgICAgICBsZXQgbiA9IHNzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnpuKHQsIGUsICgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuam4odCwgZSk7XG4gICAgICAgICAgICBuID0gbi5pbnNlcnQodCwgcyk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIHNldmVyYWwgZW50cmllcyBpbiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXlzIC0gVGhlIHNldCBvZiBrZXlzIGVudHJpZXMgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBBIG1hcCBvZiBkb2N1bWVudHMgaW5kZXhlZCBieSBrZXkgYW5kIGEgbWFwIG9mIHNpemVzIGluZGV4ZWQgYnlcbiAgICAgKiAgICAga2V5ICh6ZXJvIGlmIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCkuXG4gICAgICovICAgIEhuKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSBzcygpLCBzID0gbmV3IEJ0KGN0LmNvbXBhcmF0b3IpO1xuICAgICAgICByZXR1cm4gdGhpcy56bih0LCBlLCAoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmpuKHQsIGUpO1xuICAgICAgICAgICAgbiA9IG4uaW5zZXJ0KHQsIGkpLCBzID0gcy5pbnNlcnQodCwgYnIoZSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gKHtcbiAgICAgICAgICAgIGRvY3VtZW50czogbixcbiAgICAgICAgICAgIEpuOiBzXG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIHpuKHQsIGUsIG4pIHtcbiAgICAgICAgaWYgKGUuaXNFbXB0eSgpKSByZXR1cm4gQXQucmVzb2x2ZSgpO1xuICAgICAgICBsZXQgcyA9IG5ldyBxdChKcik7XG4gICAgICAgIGUuZm9yRWFjaCgodCA9PiBzID0gcy5hZGQodCkpKTtcbiAgICAgICAgY29uc3QgaSA9IElEQktleVJhbmdlLmJvdW5kKHpyKHMuZmlyc3QoKSksIHpyKHMubGFzdCgpKSksIHIgPSBzLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGxldCBvID0gci5nZXROZXh0KCk7XG4gICAgICAgIHJldHVybiBXcih0KS5aKHtcbiAgICAgICAgICAgIGluZGV4OiBcImRvY3VtZW50S2V5SW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBpXG4gICAgICAgIH0sICgodCwgZSwgcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IGN0LmZyb21TZWdtZW50cyhbIC4uLmUucHJlZml4UGF0aCwgZS5jb2xsZWN0aW9uR3JvdXAsIGUuZG9jdW1lbnRJZCBdKTtcbiAgICAgICAgICAgIC8vIEdvIHRocm91Z2gga2V5cyBub3QgZm91bmQgaW4gY2FjaGUuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDtvICYmIEpyKG8sIGkpIDwgMDsgKSBuKG8sIG51bGwpLCBvID0gci5nZXROZXh0KCk7XG4gICAgICAgICAgICBvICYmIG8uaXNFcXVhbChpKSAmJiAoXG4gICAgICAgICAgICAvLyBLZXkgZm91bmQgaW4gY2FjaGUuXG4gICAgICAgICAgICBuKG8sIGUpLCBvID0gci5oYXNOZXh0KCkgPyByLmdldE5leHQoKSA6IG51bGwpLCBcbiAgICAgICAgICAgIC8vIFNraXAgdG8gdGhlIG5leHQga2V5IChpZiB0aGVyZSBpcyBvbmUpLlxuICAgICAgICAgICAgbyA/IHMuaih6cihvKSkgOiBzLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBrZXlzIGFyZSBub3QgaW4gdGhlIGNhY2hlLiBPbmUgY2FzZSB3aGVyZSBgaXRlcmF0ZWBcbiAgICAgICAgICAgIC8vIGFib3ZlIHdvbid0IGdvIHRocm91Z2ggdGhlbSBpcyB3aGVuIHRoZSBjYWNoZSBpcyBlbXB0eS5cbiAgICAgICAgICAgIGZvciAoO287ICkgbihvLCBudWxsKSwgbyA9IHIuaGFzTmV4dCgpID8gci5nZXROZXh0KCkgOiBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21Db2xsZWN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IFsgZS5wb3BMYXN0KCkudG9BcnJheSgpLCBlLmxhc3RTZWdtZW50KCksIFVpKG4ucmVhZFRpbWUpLCBuLmRvY3VtZW50S2V5LnBhdGguaXNFbXB0eSgpID8gXCJcIiA6IG4uZG9jdW1lbnRLZXkucGF0aC5sYXN0U2VnbWVudCgpIF0sIGkgPSBbIGUucG9wTGFzdCgpLnRvQXJyYXkoKSwgZS5sYXN0U2VnbWVudCgpLCBbIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBdLCBcIlwiIF07XG4gICAgICAgIHJldHVybiBXcih0KS5XKElEQktleVJhbmdlLmJvdW5kKHMsIGksICEwKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBsZXQgZSA9IHNzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmpuKGN0LmZyb21TZWdtZW50cyhuLnByZWZpeFBhdGguY29uY2F0KG4uY29sbGVjdGlvbkdyb3VwLCBuLmRvY3VtZW50SWQpKSwgbik7XG4gICAgICAgICAgICAgICAgZSA9IGUuaW5zZXJ0KHQua2V5LCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykge1xuICAgICAgICBsZXQgaSA9IHNzKCk7XG4gICAgICAgIGNvbnN0IHIgPSBIcihlLCBuKSwgbyA9IEhyKGUsIHl0Lm1heCgpKTtcbiAgICAgICAgcmV0dXJuIFdyKHQpLlooe1xuICAgICAgICAgICAgaW5kZXg6IFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBJREJLZXlSYW5nZS5ib3VuZChyLCBvLCAhMClcbiAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5qbihjdC5mcm9tU2VnbWVudHMoZS5wcmVmaXhQYXRoLmNvbmNhdChlLmNvbGxlY3Rpb25Hcm91cCwgZS5kb2N1bWVudElkKSksIGUpO1xuICAgICAgICAgICAgaSA9IGkuaW5zZXJ0KHIua2V5LCByKSwgaS5zaXplID09PSBzICYmIG4uZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICBuZXdDaGFuZ2VCdWZmZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IFFyKHRoaXMsICEhdCAmJiB0LnRyYWNrUmVtb3ZhbHMpO1xuICAgIH1cbiAgICBnZXRTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEodCkubmV4dCgodCA9PiB0LmJ5dGVTaXplKSk7XG4gICAgfVxuICAgIGdldE1ldGFkYXRhKHQpIHtcbiAgICAgICAgcmV0dXJuIGpyKHQpLmdldChcInJlbW90ZURvY3VtZW50R2xvYmFsS2V5XCIpLm5leHQoKHQgPT4gKE0oISF0KSwgdCkpKTtcbiAgICB9XG4gICAgUW4odCwgZSkge1xuICAgICAgICByZXR1cm4ganIodCkucHV0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIiwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYGRiUmVtb3RlRG9jYCBhbmQgcmV0dXJucyB0aGUgZG9jdW1lbnQgKG9yIGFuIGludmFsaWQgZG9jdW1lbnQgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIGZvcm1hdCB1c2VkIGZvciBzZW50aW5lbCBkZWxldGVzKS5cbiAgICAgKi8gICAgam4odCwgZSkge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IEJpKHRoaXMuSXQsIGUpO1xuICAgICAgICAgICAgLy8gV2hldGhlciB0aGUgZG9jdW1lbnQgaXMgYSBzZW50aW5lbCByZW1vdmFsIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoZVxuICAgICAgICAgICAgLy8gYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodC5pc05vRG9jdW1lbnQoKSAmJiB0LnZlcnNpb24uaXNFcXVhbChzdC5taW4oKSkpKSByZXR1cm4gdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU2UubmV3SW52YWxpZERvY3VtZW50KHQpO1xuICAgIH1cbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZS4gKi8gZnVuY3Rpb24gR3IodCkge1xuICAgIHJldHVybiBuZXcgS3IodCk7XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgZGV0YWlscyBvZiBhZGRpbmcgYW5kIHVwZGF0aW5nIGRvY3VtZW50cyBpbiB0aGUgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAqXG4gKiBVbmxpa2UgdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyLCB0aGUgSW5kZXhlZERiIGltcGxlbWVudGF0aW9uIGNvbXB1dGVzIHRoZSBzaXplXG4gKiBkZWx0YSBmb3IgYWxsIHN1Ym1pdHRlZCBjaGFuZ2VzLiBUaGlzIGF2b2lkcyBoYXZpbmcgdG8gcmUtcmVhZCBhbGwgZG9jdW1lbnRzIGZyb20gSW5kZXhlZERiXG4gKiB3aGVuIHdlIGFwcGx5IHRoZSBjaGFuZ2VzLlxuICovIGNsYXNzIFFyIGV4dGVuZHMgcXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudENhY2hlIC0gVGhlIEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUgdG8gYXBwbHkgdGhlIGNoYW5nZXMgdG8uXG4gICAgICogQHBhcmFtIHRyYWNrUmVtb3ZhbHMgLSBXaGV0aGVyIHRvIGNyZWF0ZSBzZW50aW5lbCBkZWxldGVzIHRoYXQgY2FuIGJlIHRyYWNrZWQgYnlcbiAgICAgKiBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5ZbiA9IHQsIHRoaXMudHJhY2tSZW1vdmFscyA9IGUsIFxuICAgICAgICAvLyBBIG1hcCBvZiBkb2N1bWVudCBzaXplcyBhbmQgcmVhZCB0aW1lcyBwcmlvciB0byBhcHBseWluZyB0aGUgY2hhbmdlcyBpblxuICAgICAgICAvLyB0aGlzIGJ1ZmZlci5cbiAgICAgICAgdGhpcy5YbiA9IG5ldyBlcygodCA9PiB0LnRvU3RyaW5nKCkpLCAoKHQsIGUpID0+IHQuaXNFcXVhbChlKSkpO1xuICAgIH1cbiAgICBhcHBseUNoYW5nZXModCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGxldCBuID0gMCwgcyA9IG5ldyBxdCgoKHQsIGUpID0+IFoodC5jYW5vbmljYWxTdHJpbmcoKSwgZS5jYW5vbmljYWxTdHJpbmcoKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5mb3JFYWNoKCgoaSwgcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuWG4uZ2V0KGkpO1xuICAgICAgICAgICAgaWYgKGUucHVzaCh0aGlzLlluLnJlbW92ZUVudHJ5KHQsIGksIG8ucmVhZFRpbWUpKSwgci5pc1ZhbGlkRG9jdW1lbnQoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBMaSh0aGlzLlluLkl0LCByKTtcbiAgICAgICAgICAgICAgICBzID0gcy5hZGQoaS5wYXRoLnBvcExhc3QoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGJyKHUpO1xuICAgICAgICAgICAgICAgIG4gKz0gYyAtIG8uc2l6ZSwgZS5wdXNoKHRoaXMuWW4uYWRkRW50cnkodCwgaSwgdSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuIC09IG8uc2l6ZSwgdGhpcy50cmFja1JlbW92YWxzKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gdHJhY2sgcmVtb3ZhbHMsIHdlIHN0b3JlIGEgXCJzZW50aW5lbCBkZWxldGVcIiBpbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBSZW1vdGVEb2N1bWVudENhY2hlLiBUaGlzIGVudHJ5IGlzIHJlcHJlc2VudGVkIGJ5IGEgTm9Eb2N1bWVudFxuICAgICAgICAgICAgICAgIC8vIHdpdGggYSB2ZXJzaW9uIG9mIDAgYW5kIGlnbm9yZWQgYnkgYG1heWJlRGVjb2RlRG9jdW1lbnQoKWAgYnV0XG4gICAgICAgICAgICAgICAgLy8gcHJlc2VydmVkIGluIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWAuXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IExpKHRoaXMuWW4uSXQsIHIuY29udmVydFRvTm9Eb2N1bWVudChzdC5taW4oKSkpO1xuICAgICAgICAgICAgICAgIGUucHVzaCh0aGlzLlluLmFkZEVudHJ5KHQsIGksIG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBzLmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgZS5wdXNoKHRoaXMuWW4uaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIG4pKTtcbiAgICAgICAgfSkpLCBlLnB1c2godGhpcy5Zbi51cGRhdGVNZXRhZGF0YSh0LCBuKSksIEF0LndhaXRGb3IoZSk7XG4gICAgfVxuICAgIGdldEZyb21DYWNoZSh0LCBlKSB7XG4gICAgICAgIC8vIFJlY29yZCB0aGUgc2l6ZSBvZiBldmVyeXRoaW5nIHdlIGxvYWQgZnJvbSB0aGUgY2FjaGUgc28gd2UgY2FuIGNvbXB1dGUgYSBkZWx0YSBsYXRlci5cbiAgICAgICAgcmV0dXJuIHRoaXMuWW4uV24odCwgZSkubmV4dCgodCA9PiAodGhpcy5Ybi5zZXQoZSwge1xuICAgICAgICAgICAgc2l6ZTogdC5zaXplLFxuICAgICAgICAgICAgcmVhZFRpbWU6IHQuZG9jdW1lbnQucmVhZFRpbWVcbiAgICAgICAgfSksIHQuZG9jdW1lbnQpKSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21DYWNoZSh0LCBlKSB7XG4gICAgICAgIC8vIFJlY29yZCB0aGUgc2l6ZSBvZiBldmVyeXRoaW5nIHdlIGxvYWQgZnJvbSB0aGUgY2FjaGUgc28gd2UgY2FuIGNvbXB1dGVcbiAgICAgICAgLy8gYSBkZWx0YSBsYXRlci5cbiAgICAgICAgcmV0dXJuIHRoaXMuWW4uSG4odCwgZSkubmV4dCgoKHtkb2N1bWVudHM6IHQsIEpuOiBlfSkgPT4gKFxuICAgICAgICAvLyBOb3RlOiBgZ2V0QWxsRnJvbUNhY2hlYCByZXR1cm5zIHR3byBtYXBzIGluc3RlYWQgb2YgYSBzaW5nbGUgbWFwIGZyb21cbiAgICAgICAgLy8ga2V5cyB0byBgRG9jdW1lbnRTaXplRW50cnlgcy4gVGhpcyBpcyB0byBhbGxvdyByZXR1cm5pbmcgdGhlXG4gICAgICAgIC8vIGBNdXRhYmxlRG9jdW1lbnRNYXBgIGRpcmVjdGx5LCB3aXRob3V0IGEgY29udmVyc2lvbi5cbiAgICAgICAgZS5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgdGhpcy5Ybi5zZXQoZSwge1xuICAgICAgICAgICAgICAgIHNpemU6IG4sXG4gICAgICAgICAgICAgICAgcmVhZFRpbWU6IHQuZ2V0KGUpLnJlYWRUaW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCB0KSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24ganIodCkge1xuICAgIHJldHVybiBOaSh0LCBcInJlbW90ZURvY3VtZW50R2xvYmFsXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcmVtb3RlRG9jdW1lbnRzIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBXcih0KSB7XG4gICAgcmV0dXJuIE5pKHQsIFwicmVtb3RlRG9jdW1lbnRzVjE0XCIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBrZXkgdGhhdCBjYW4gYmUgdXNlZCBmb3IgZG9jdW1lbnQgbG9va3VwcyBvbiB0aGVcbiAqIGBEYlJlbW90ZURvY3VtZW50RG9jdW1lbnRLZXlJbmRleGAgaW5kZXguXG4gKi8gZnVuY3Rpb24genIodCkge1xuICAgIGNvbnN0IGUgPSB0LnBhdGgudG9BcnJheSgpO1xuICAgIHJldHVybiBbIFxuICAgIC8qIHByZWZpeCBwYXRoICovIGUuc2xpY2UoMCwgZS5sZW5ndGggLSAyKSwgXG4gICAgLyogY29sbGVjdGlvbiBpZCAqLyBlW2UubGVuZ3RoIC0gMl0sIFxuICAgIC8qIGRvY3VtZW50IGlkICovIGVbZS5sZW5ndGggLSAxXSBdO1xufVxuXG5mdW5jdGlvbiBIcih0LCBlKSB7XG4gICAgY29uc3QgbiA9IGUuZG9jdW1lbnRLZXkucGF0aC50b0FycmF5KCk7XG4gICAgcmV0dXJuIFsgXG4gICAgLyogY29sbGVjdGlvbiBpZCAqLyB0LCBVaShlLnJlYWRUaW1lKSwgXG4gICAgLyogcHJlZml4IHBhdGggKi8gbi5zbGljZSgwLCBuLmxlbmd0aCAtIDIpLCBcbiAgICAvKiBkb2N1bWVudCBpZCAqLyBuLmxlbmd0aCA+IDAgPyBuW24ubGVuZ3RoIC0gMV0gOiBcIlwiIF07XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciB0aGF0IGNvbXBhcmVzIGRvY3VtZW50IGtleXMgYWNjb3JkaW5nIHRvIHRoZSBwcmltYXJ5IGtleSBzb3J0aW5nXG4gKiB1c2VkIGJ5IHRoZSBgRGJSZW1vdGVEb2N1bWVudERvY3VtZW50YCBzdG9yZSAoYnkgcHJlZml4IHBhdGgsIGNvbGxlY3Rpb24gaWRcbiAqIGFuZCB0aGVuIGRvY3VtZW50IElEKS5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovIGZ1bmN0aW9uIEpyKHQsIGUpIHtcbiAgICBjb25zdCBuID0gdC5wYXRoLnRvQXJyYXkoKSwgcyA9IGUucGF0aC50b0FycmF5KCk7XG4gICAgLy8gVGhlIG9yZGVyaW5nIGlzIGJhc2VkIG9uIGh0dHBzOi8vY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9ibGluay8rL2ZlNWMyMWZlZjk0ZGFlNzFjMWMzMzQ0Nzc1YjhkOGE3ZjdlNmQ5ZWMvU291cmNlL21vZHVsZXMvaW5kZXhlZGRiL0lEQktleS5jcHAjNzRcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChsZXQgdCA9IDA7IHQgPCBuLmxlbmd0aCAtIDIgJiYgdCA8IHMubGVuZ3RoIC0gMjsgKyt0KSBpZiAoaSA9IFooblt0XSwgc1t0XSksIFxuICAgIGkpIHJldHVybiBpO1xuICAgIHJldHVybiBpID0gWihuLmxlbmd0aCwgcy5sZW5ndGgpLCBpIHx8IChpID0gWihuW24ubGVuZ3RoIC0gMl0sIHNbcy5sZW5ndGggLSAyXSksIFxuICAgIGkgfHwgWihuW24ubGVuZ3RoIC0gMV0sIHNbcy5sZW5ndGggLSAxXSkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTY2hlbWEgVmVyc2lvbiBmb3IgdGhlIFdlYiBjbGllbnQ6XG4gKiAxLiAgSW5pdGlhbCB2ZXJzaW9uIGluY2x1ZGluZyBNdXRhdGlvbiBRdWV1ZSwgUXVlcnkgQ2FjaGUsIGFuZCBSZW1vdGVcbiAqICAgICBEb2N1bWVudCBDYWNoZVxuICogMi4gIFVzZWQgdG8gZW5zdXJlIGEgdGFyZ2V0R2xvYmFsIG9iamVjdCBleGlzdHMgYW5kIGFkZCB0YXJnZXRDb3VudCB0byBpdC4gTm9cbiAqICAgICBsb25nZXIgcmVxdWlyZWQgYmVjYXVzZSBtaWdyYXRpb24gMyB1bmNvbmRpdGlvbmFsbHkgY2xlYXJzIGl0LlxuICogMy4gIERyb3BwZWQgYW5kIHJlLWNyZWF0ZWQgUXVlcnkgQ2FjaGUgdG8gZGVhbCB3aXRoIGNhY2hlIGNvcnJ1cHRpb24gcmVsYXRlZFxuICogICAgIHRvIGxpbWJvIHJlc29sdXRpb24uIEFkZHJlc3Nlc1xuICogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1pb3Mtc2RrL2lzc3Vlcy8xNTQ4XG4gKiA0LiAgTXVsdGktVGFiIFN1cHBvcnQuXG4gKiA1LiAgUmVtb3ZhbCBvZiBoZWxkIHdyaXRlIGFja3MuXG4gKiA2LiAgQ3JlYXRlIGRvY3VtZW50IGdsb2JhbCBmb3IgdHJhY2tpbmcgZG9jdW1lbnQgY2FjaGUgc2l6ZS5cbiAqIDcuICBFbnN1cmUgZXZlcnkgY2FjaGVkIGRvY3VtZW50IGhhcyBhIHNlbnRpbmVsIHJvdyB3aXRoIGEgc2VxdWVuY2UgbnVtYmVyLlxuICogOC4gIEFkZCBjb2xsZWN0aW9uLXBhcmVudCBpbmRleCBmb3IgQ29sbGVjdGlvbiBHcm91cCBxdWVyaWVzLlxuICogOS4gIENoYW5nZSBSZW1vdGVEb2N1bWVudENoYW5nZXMgc3RvcmUgdG8gYmUga2V5ZWQgYnkgcmVhZFRpbWUgcmF0aGVyIHRoYW5cbiAqICAgICBhbiBhdXRvLWluY3JlbWVudGluZyBJRC4gVGhpcyBpcyByZXF1aXJlZCBmb3IgSW5kZXgtRnJlZSBxdWVyaWVzLlxuICogMTAuIFJld3JpdGUgdGhlIGNhbm9uaWNhbCBJRHMgdG8gdGhlIGV4cGxpY2l0IFByb3RvYnVmLWJhc2VkIGZvcm1hdC5cbiAqIDExLiBBZGQgYnVuZGxlcyBhbmQgbmFtZWRfcXVlcmllcyBmb3IgYnVuZGxlIHN1cHBvcnQuXG4gKiAxMi4gQWRkIGRvY3VtZW50IG92ZXJsYXlzLlxuICogMTMuIFJld3JpdGUgdGhlIGtleXMgb2YgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSB0byBhbGxvdyBmb3IgZWZmaWNpZW50XG4gKiAgICAgZG9jdW1lbnQgbG9va3VwIHZpYSBgZ2V0QWxsKClgLlxuICogMTQuIEFkZCBvdmVybGF5cy5cbiAqIDE1LiBBZGQgaW5kZXhpbmcgc3VwcG9ydC5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2FsIHZpZXcgKG92ZXJsYXkpIG9mIGEgZG9jdW1lbnQsIGFuZCB0aGUgZmllbGRzIHRoYXQgYXJlXG4gKiBsb2NhbGx5IG11dGF0ZWQuXG4gKi9cbmNsYXNzIFlyIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgZmllbGRzIHRoYXQgYXJlIGxvY2FsbHkgbXV0YXRlZCBieSBwYXRjaCBtdXRhdGlvbnMuIElmIHRoZSBvdmVybGF5ZWRcbiAgICAgKiBkb2N1bWVudCBpcyBmcm9tIHNldCBvciBkZWxldGUgbXV0YXRpb25zLCB0aGlzIHJldHVybnMgbnVsbC5cbiAgICAgKi9cbiAgICBlKSB7XG4gICAgICAgIHRoaXMub3ZlcmxheWVkRG9jdW1lbnQgPSB0LCB0aGlzLm11dGF0ZWRGaWVsZHMgPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSByZWFkb25seSB2aWV3IG9mIHRoZSBsb2NhbCBzdGF0ZSBvZiBhbGwgZG9jdW1lbnRzIHdlJ3JlIHRyYWNraW5nIChpLmUuIHdlXG4gKiBoYXZlIGEgY2FjaGVkIHZlcnNpb24gaW4gcmVtb3RlRG9jdW1lbnRDYWNoZSBvciBsb2NhbCBtdXRhdGlvbnMgZm9yIHRoZVxuICogZG9jdW1lbnQpLiBUaGUgdmlldyBpcyBjb21wdXRlZCBieSBhcHBseWluZyB0aGUgbXV0YXRpb25zIGluIHRoZVxuICogTXV0YXRpb25RdWV1ZSB0byB0aGUgUmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAqLyBjbGFzcyBYciB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUgPSB0LCB0aGlzLm11dGF0aW9uUXVldWUgPSBlLCB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlID0gbiwgXG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudCBpZGVudGlmaWVkIGJ5IGBrZXlgLlxuICAgICAqXG4gICAgICogQHJldHVybnMgTG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnQgb3IgbnVsbCBpZiB3ZSBkb24ndCBoYXZlIGFueSBjYWNoZWRcbiAgICAgKiBzdGF0ZSBmb3IgaXQuXG4gICAgICovICAgIGdldERvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5KHQsIGUpLm5leHQoKHMgPT4gKG4gPSBzLCB0aGlzLmdldEJhc2VEb2N1bWVudCh0LCBlLCBuKSkpKS5uZXh0KCh0ID0+IChudWxsICE9PSBuICYmIExuKG4ubXV0YXRpb24sIHQsIFF0LmVtcHR5KCksIG50Lm5vdygpKSwgXG4gICAgICAgIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50cyBpZGVudGlmaWVkIGJ5IGBrZXlzYC5cbiAgICAgKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHN0YXRlIGZvciBhIGRvY3VtZW50IGluIGBrZXlzYCwgYSBOb0RvY3VtZW50IHdpbGxcbiAgICAgKiBiZSBzdG9yZWQgZm9yIHRoYXQga2V5IGluIHRoZSByZXN1bHRpbmcgc2V0LlxuICAgICAqLyAgICBnZXREb2N1bWVudHModCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJpZXModCwgZSkubmV4dCgoZSA9PiB0aGlzLmdldExvY2FsVmlld09mRG9jdW1lbnRzKHQsIGUsIGZzKCkpLm5leHQoKCgpID0+IGUpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaW1pbGFyIHRvIGBnZXREb2N1bWVudHNgLCBidXQgY3JlYXRlcyB0aGUgbG9jYWwgdmlldyBmcm9tIHRoZSBnaXZlblxuICAgICAqIGBiYXNlRG9jc2Agd2l0aG91dCByZXRyaWV2aW5nIGRvY3VtZW50cyBmcm9tIHRoZSBsb2NhbCBzdG9yZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiB0aGlzIG9wZXJhdGlvbiBpcyBzY29wZWQgdG8uXG4gICAgICogQHBhcmFtIGRvY3MgLSBUaGUgZG9jdW1lbnRzIHRvIGFwcGx5IGxvY2FsIG11dGF0aW9ucyB0byBnZXQgdGhlIGxvY2FsIHZpZXdzLlxuICAgICAqIEBwYXJhbSBleGlzdGVuY2VTdGF0ZUNoYW5nZWQgLSBUaGUgc2V0IG9mIGRvY3VtZW50IGtleXMgd2hvc2UgZXhpc3RlbmNlIHN0YXRlXG4gICAgICogICBpcyBjaGFuZ2VkLiBUaGlzIGlzIHVzZWZ1bCB0byBkZXRlcm1pbmUgaWYgc29tZSBkb2N1bWVudHMgb3ZlcmxheSBuZWVkc1xuICAgICAqICAgdG8gYmUgcmVjYWxjdWxhdGVkLlxuICAgICAqLyAgICBnZXRMb2NhbFZpZXdPZkRvY3VtZW50cyh0LCBlLCBuID0gZnMoKSkge1xuICAgICAgICBjb25zdCBzID0gdXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9wdWxhdGVPdmVybGF5cyh0LCBzLCBlKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCBlLCBzLCBuKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGxldCBlID0gcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0LmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgZSA9IGUuaW5zZXJ0KHQsIG4ub3ZlcmxheWVkRG9jdW1lbnQpO1xuICAgICAgICAgICAgfSkpLCBlO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgb3ZlcmxheWVkIGRvY3VtZW50cyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IG1hcCwgd2hpY2ggd2lsbCBpbmNsdWRlXG4gICAgICogdGhlIGxvY2FsIHZpZXcgb2YgdGhvc2UgZG9jdW1lbnRzIGFuZCBhIGBGaWVsZE1hc2tgIGluZGljYXRpbmcgd2hpY2ggZmllbGRzXG4gICAgICogYXJlIG11dGF0ZWQgbG9jYWxseSwgYG51bGxgIGlmIG92ZXJsYXkgaXMgYSBTZXQgb3IgRGVsZXRlIG11dGF0aW9uLlxuICAgICAqLyAgICBnZXRPdmVybGF5ZWREb2N1bWVudHModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9wdWxhdGVPdmVybGF5cyh0LCBuLCBlKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCBlLCBuLCBmcygpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBvdmVybGF5cyBmb3Ige0Bjb2RlIGRvY3N9IGFuZCBhZGRzIHRoZW0gdG8gcHJvdmlkZWQgb3ZlcmxheSBtYXBcbiAgICAgKiBpZiB0aGUgbWFwIGRvZXMgbm90IGFscmVhZHkgY29udGFpbiBhbiBlbnRyeSBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IGtleS5cbiAgICAgKi8gICAgcG9wdWxhdGVPdmVybGF5cyh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLmhhcyh0KSB8fCBzLnB1c2godCk7XG4gICAgICAgIH0pKSwgdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5cyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIHQuZm9yRWFjaCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBlLnNldCh0LCBuKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2NzIC0gVGhlIGRvY3VtZW50cyB0byBjb21wdXRlIHZpZXdzIGZvci4gSXQgYWxzbyBoYXMgdGhlIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gb3ZlcmxheXMgLSBUaGUgb3ZlcmxheXMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGdpdmVuIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gZXhpc3RlbmNlU3RhdGVDaGFuZ2VkIC0gQSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZXNcbiAgICAgKiAgIG1pZ2h0IGhhdmUgY2hhbmdlZC4gVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZVxuICAgICAqICAgb3ZlcmxheXMgZnJvbSBtdXRhdGlvbiBxdWV1ZXMuXG4gICAgICogQHJldHVybiBBIG1hcCByZXByZXNlbnRzIHRoZSBsb2NhbCBkb2N1bWVudHMgdmlldy5cbiAgICAgKi8gICAgY29tcHV0ZVZpZXdzKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgbGV0IGkgPSBzcygpO1xuICAgICAgICBjb25zdCByID0gYXMoKSwgbyA9IGFzKCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvID0gbi5nZXQoZS5rZXkpO1xuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgYW4gb3ZlcmxheSBpZiB0aGUgZG9jdW1lbnQncyBleGlzdGVuY2Ugc3RhdGUgY2hhbmdlZCBkdWUgdG9cbiAgICAgICAgICAgIC8vIGEgcmVtb3RlIGV2ZW50ICphbmQqIHRoZSBvdmVybGF5IGlzIGEgUGF0Y2hNdXRhdGlvbi4gVGhpcyBpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyBkb2N1bWVudCBleGlzdGVuY2Ugc3RhdGUgY2FuIGNoYW5nZSBpZiBzb21lIHBhdGNoIG11dGF0aW9uJ3NcbiAgICAgICAgICAgIC8vIHByZWNvbmRpdGlvbnMgYXJlIG1ldC5cbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIHJlY2FsY3VsYXRlIHdoZW4gYG92ZXJsYXlgIGlzIHVuZGVmaW5lZCBhcyB3ZWxsLCBiZWNhdXNlIHRoZXJlXG4gICAgICAgICAgICAvLyBtaWdodCBiZSBhIHBhdGNoIG11dGF0aW9uIHdob3NlIHByZWNvbmRpdGlvbiBkb2VzIG5vdCBtYXRjaCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAvLyBjaGFuZ2UgKGhlbmNlIG92ZXJsYXkgaXMgdW5kZWZpbmVkKSwgYnV0IHdvdWxkIG5vdyBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaGFzKGUua2V5KSAmJiAodm9pZCAwID09PSBvIHx8IG8ubXV0YXRpb24gaW5zdGFuY2VvZiBHbikgPyBpID0gaS5pbnNlcnQoZS5rZXksIGUpIDogdm9pZCAwICE9PSBvICYmIChyLnNldChlLmtleSwgby5tdXRhdGlvbi5nZXRGaWVsZE1hc2soKSksIFxuICAgICAgICAgICAgTG4oby5tdXRhdGlvbiwgZSwgby5tdXRhdGlvbi5nZXRGaWVsZE1hc2soKSwgbnQubm93KCkpKTtcbiAgICAgICAgfSkpLCB0aGlzLnJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzKHQsIGkpLm5leHQoKHQgPT4gKHQuZm9yRWFjaCgoKHQsIGUpID0+IHIuc2V0KHQsIGUpKSksIFxuICAgICAgICBlLmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgIHJldHVybiBvLnNldCh0LCBuZXcgWXIoZSwgbnVsbCAhPT0gKG4gPSByLmdldCh0KSkgJiYgdm9pZCAwICE9PSBuID8gbiA6IG51bGwpKTtcbiAgICAgICAgfSkpLCBvKSkpO1xuICAgIH1cbiAgICByZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBhcygpO1xuICAgICAgICAvLyBBIHJldmVyc2UgbG9va3VwIG1hcCBmcm9tIGJhdGNoIGlkIHRvIHRoZSBkb2N1bWVudHMgd2l0aGluIHRoYXQgYmF0Y2guXG4gICAgICAgICAgICAgICAgbGV0IHMgPSBuZXcgQnQoKCh0LCBlKSA9PiB0IC0gZSkpLCBpID0gZnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZS5nZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleXModCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkgaS5rZXlzKCkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGUuZ2V0KHQpO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSByKSByZXR1cm47XG4gICAgICAgICAgICAgICAgbGV0IG8gPSBuLmdldCh0KSB8fCBRdC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIG8gPSBpLmFwcGx5VG9Mb2NhbFZpZXcociwgbyksIG4uc2V0KHQsIG8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSAocy5nZXQoaS5iYXRjaElkKSB8fCBmcygpKS5hZGQodCk7XG4gICAgICAgICAgICAgICAgcyA9IHMuaW5zZXJ0KGkuYmF0Y2hJZCwgdSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gW10sIG8gPSBzLmdldFJldmVyc2VJdGVyYXRvcigpO1xuICAgICAgICAgICAgLy8gSXRlcmF0ZSBpbiBkZXNjZW5kaW5nIG9yZGVyIG9mIGJhdGNoIElEcywgYW5kIHNraXAgZG9jdW1lbnRzIHRoYXQgYXJlXG4gICAgICAgICAgICAvLyBhbHJlYWR5IHNhdmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7by5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBvLmdldE5leHQoKSwgdSA9IHMua2V5LCBjID0gcy52YWx1ZSwgYSA9IGNzKCk7XG4gICAgICAgICAgICAgICAgYy5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmhhcyh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9ICRuKGUuZ2V0KHQpLCBuLmdldCh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBzICYmIGEuc2V0KHQsIHMpLCBpID0gaS5hZGQodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSksIHIucHVzaCh0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLnNhdmVPdmVybGF5cyh0LCB1LCBhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQXQud2FpdEZvcihyKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVjYWxjdWxhdGVzIG92ZXJsYXlzIGJ5IHJlYWRpbmcgdGhlIGRvY3VtZW50cyBmcm9tIHJlbW90ZSBkb2N1bWVudCBjYWNoZVxuICAgICAqIGZpcnN0LCBhbmQgc2F2ZXMgdGhlbSBhZnRlciB0aGV5IGFyZSBjYWxjdWxhdGVkLlxuICAgICAqLyAgICByZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cmllcyh0LCBlKS5uZXh0KChlID0+IHRoaXMucmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXModCwgZSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBxdWVyeSBhZ2FpbnN0IHRoZSBsb2NhbCB2aWV3IG9mIGFsbCBkb2N1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gLSBUaGUgcGVyc2lzdGVuY2UgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IHRvIG1hdGNoIGRvY3VtZW50cyBhZ2FpbnN0LlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBSZWFkIHRpbWUgYW5kIGtleSB0byBzdGFydCBzY2FubmluZyBieSAoZXhjbHVzaXZlKS5cbiAgICAgKi8gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSh0LCBlLCBuKSB7XG4gICAgICAgIC8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgc2luZ2xlIGRvY3VtZW50IGJ5IHBhdGggKHJhdGhlciB0aGFuIGFcbiAqIGNvbGxlY3Rpb24pLlxuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3QuaXNEb2N1bWVudEtleSh0LnBhdGgpICYmIG51bGwgPT09IHQuY29sbGVjdGlvbkdyb3VwICYmIDAgPT09IHQuZmlsdGVycy5sZW5ndGg7XG4gICAgICAgIH0oZSkgPyB0aGlzLmdldERvY3VtZW50c01hdGNoaW5nRG9jdW1lbnRRdWVyeSh0LCBlLnBhdGgpIDogb24oZSkgPyB0aGlzLmdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvbkdyb3VwUXVlcnkodCwgZSwgbikgOiB0aGlzLmdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5KHQsIGUsIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGNvbGxlY3Rpb24gZ3JvdXAsIHJldHVybnMgdGhlIG5leHQgZG9jdW1lbnRzIHRoYXQgZm9sbG93IHRoZSBwcm92aWRlZCBvZmZzZXQsIGFsb25nXG4gICAgICogd2l0aCBhbiB1cGRhdGVkIGJhdGNoIElELlxuICAgICAqXG4gICAgICogPHA+VGhlIGRvY3VtZW50cyByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCBhcmUgb3JkZXJlZCBieSByZW1vdGUgdmVyc2lvbiBmcm9tIHRoZSBwcm92aWRlZFxuICAgICAqIG9mZnNldC4gSWYgdGhlcmUgYXJlIG5vIG1vcmUgcmVtb3RlIGRvY3VtZW50cyBhZnRlciB0aGUgcHJvdmlkZWQgb2Zmc2V0LCBkb2N1bWVudHMgd2l0aFxuICAgICAqIG11dGF0aW9ucyBpbiBvcmRlciBvZiBiYXRjaCBpZCBmcm9tIHRoZSBvZmZzZXQgYXJlIHJldHVybmVkLiBTaW5jZSBhbGwgZG9jdW1lbnRzIGluIGEgYmF0Y2ggYXJlXG4gICAgICogcmV0dXJuZWQgdG9nZXRoZXIsIHRoZSB0b3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzIHJldHVybmVkIGNhbiBleGNlZWQge0Bjb2RlIGNvdW50fS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvblxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uR3JvdXAgVGhlIGNvbGxlY3Rpb24gZ3JvdXAgZm9yIHRoZSBkb2N1bWVudHMuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgb2Zmc2V0IHRvIGluZGV4IGludG8uXG4gICAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHRvIHJldHVyblxuICAgICAqIEByZXR1cm4gQSBMb2NhbFdyaXRlUmVzdWx0IHdpdGggdGhlIGRvY3VtZW50cyB0aGF0IGZvbGxvdyB0aGUgcHJvdmlkZWQgb2Zmc2V0IGFuZCB0aGUgbGFzdCBwcm9jZXNzZWQgYmF0Y2ggaWQuXG4gICAgICovICAgIGdldE5leHREb2N1bWVudHModCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykubmV4dCgoaSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gcyAtIGkuc2l6ZSA+IDAgPyB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLmdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4ubGFyZ2VzdEJhdGNoSWQsIHMgLSBpLnNpemUpIDogQXQucmVzb2x2ZSh1cygpKTtcbiAgICAgICAgICAgIC8vIFRoZSBjYWxsc2l0ZSB3aWxsIHVzZSB0aGUgbGFyZ2VzdCBiYXRjaCBJRCB0b2dldGhlciB3aXRoIHRoZSBsYXRlc3QgcmVhZCB0aW1lIHRvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBuZXcgaW5kZXggb2Zmc2V0LiBTaW5jZSB3ZSBvbmx5IHByb2Nlc3MgYmF0Y2ggSURzIGlmIGFsbCByZW1vdGUgZG9jdW1lbnRzIGhhdmUgYmVlbiByZWFkLFxuICAgICAgICAgICAgLy8gbm8gb3ZlcmxheSB3aWxsIGluY3JlYXNlIHRoZSBvdmVyYWxsIHJlYWQgdGltZS4gVGhpcyBpcyB3aHkgd2Ugb25seSBuZWVkIHRvIHNwZWNpYWwgY2FzZVxuICAgICAgICAgICAgLy8gdGhlIGJhdGNoIGlkLlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSAtMSwgdSA9IGk7XG4gICAgICAgICAgICByZXR1cm4gci5uZXh0KChlID0+IEF0LmZvckVhY2goZSwgKChlLCBuKSA9PiAobyA8IG4ubGFyZ2VzdEJhdGNoSWQgJiYgKG8gPSBuLmxhcmdlc3RCYXRjaElkKSwgXG4gICAgICAgICAgICBpLmdldChlKSA/IEF0LnJlc29sdmUoKSA6IHRoaXMuZ2V0QmFzZURvY3VtZW50KHQsIGUsIG4pLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHUgPSB1Lmluc2VydChlLCB0KTtcbiAgICAgICAgICAgIH0pKSkpKS5uZXh0KCgoKSA9PiB0aGlzLnBvcHVsYXRlT3ZlcmxheXModCwgZSwgaSkpKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCB1LCBlLCBmcygpKSkpLm5leHQoKHQgPT4gKHtcbiAgICAgICAgICAgICAgICBiYXRjaElkOiBvLFxuICAgICAgICAgICAgICAgIGNoYW5nZXM6IG9zKHQpXG4gICAgICAgICAgICB9KSkpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdEb2N1bWVudFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgLy8gSnVzdCBkbyBhIHNpbXBsZSBkb2N1bWVudCBsb29rdXAuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50KHQsIG5ldyBjdChlKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBsZXQgZSA9IHJzKCk7XG4gICAgICAgICAgICByZXR1cm4gdC5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAoZSA9IGUuaW5zZXJ0KHQua2V5LCB0KSksIGU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uR3JvdXBRdWVyeSh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBlLmNvbGxlY3Rpb25Hcm91cDtcbiAgICAgICAgbGV0IGkgPSBycygpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hbmFnZXIuZ2V0Q29sbGVjdGlvblBhcmVudHModCwgcykubmV4dCgociA9PiBBdC5mb3JFYWNoKHIsIChyID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBaZShlLCBcbiAgICAgICAgICAgICAgICAvKmNvbGxlY3Rpb25Hcm91cD0qLyBudWxsLCB0LmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCB0LmZpbHRlcnMuc2xpY2UoKSwgdC5saW1pdCwgdC5saW1pdFR5cGUsIHQuc3RhcnRBdCwgdC5lbmRBdCk7XG4gICAgICAgICAgICB9KGUsIHIuY2hpbGQocykpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uUXVlcnkodCwgbywgbikubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpID0gaS5pbnNlcnQodCwgZSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpKSk7XG4gICAgfVxuICAgIGdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5KHQsIGUsIG4pIHtcbiAgICAgICAgLy8gUXVlcnkgdGhlIHJlbW90ZSBkb2N1bWVudHMgYW5kIG92ZXJsYXkgbXV0YXRpb25zLlxuICAgICAgICBsZXQgcztcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRBbGxGcm9tQ29sbGVjdGlvbih0LCBlLnBhdGgsIG4pLm5leHQoKGkgPT4gKHMgPSBpLCBcbiAgICAgICAgdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5c0ZvckNvbGxlY3Rpb24odCwgZS5wYXRoLCBuLmxhcmdlc3RCYXRjaElkKSkpKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIC8vIEFzIGRvY3VtZW50cyBtaWdodCBtYXRjaCB0aGUgcXVlcnkgYmVjYXVzZSBvZiB0aGVpciBvdmVybGF5IHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGluY2x1ZGUgZG9jdW1lbnRzIGZvciBhbGwgb3ZlcmxheXMgaW4gdGhlIGluaXRpYWwgZG9jdW1lbnQgc2V0LlxuICAgICAgICAgICAgdC5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldEtleSgpO1xuICAgICAgICAgICAgICAgIG51bGwgPT09IHMuZ2V0KG4pICYmIChzID0gcy5pbnNlcnQobiwgU2UubmV3SW52YWxpZERvY3VtZW50KG4pKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgb3ZlcmxheXMgYW5kIG1hdGNoIGFnYWluc3QgdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgbGV0IG4gPSBycygpO1xuICAgICAgICAgICAgcmV0dXJuIHMuZm9yRWFjaCgoKHMsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdC5nZXQocyk7XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSByICYmIExuKHIubXV0YXRpb24sIGksIFF0LmVtcHR5KCksIG50Lm5vdygpKSwgXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgaW5zZXJ0IHRoZSBkb2N1bWVudHMgdGhhdCBzdGlsbCBtYXRjaCB0aGUgcXVlcnlcbiAgICAgICAgICAgICAgICBkbihlLCBpKSAmJiAobiA9IG4uaW5zZXJ0KHMsIGkpKTtcbiAgICAgICAgICAgIH0pKSwgbjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIGJhc2UgZG9jdW1lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBhcHBseSBgb3ZlcmxheWAuICovICAgIGdldEJhc2VEb2N1bWVudCh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBudWxsID09PSBuIHx8IDEgLyogUGF0Y2ggKi8gPT09IG4ubXV0YXRpb24udHlwZSA/IHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSh0LCBlKSA6IEF0LnJlc29sdmUoU2UubmV3SW52YWxpZERvY3VtZW50KGUpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIFpyIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuSXQgPSB0LCB0aGlzLlpuID0gbmV3IE1hcCwgdGhpcy50cyA9IG5ldyBNYXA7XG4gICAgfVxuICAgIGdldEJ1bmRsZU1ldGFkYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUodGhpcy5abi5nZXQoZSkpO1xuICAgIH1cbiAgICBzYXZlQnVuZGxlTWV0YWRhdGEodCwgZSkge1xuICAgICAgICAvKiogRGVjb2RlcyBhIEJ1bmRsZU1ldGFkYXRhIHByb3RvIGludG8gYSBCdW5kbGVNZXRhZGF0YSBvYmplY3QuICovXG4gICAgICAgIHZhciBuO1xuICAgICAgICByZXR1cm4gdGhpcy5abi5zZXQoZS5pZCwge1xuICAgICAgICAgICAgaWQ6IChuID0gZSkuaWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBuLnZlcnNpb24sXG4gICAgICAgICAgICBjcmVhdGVUaW1lOiBEcyhuLmNyZWF0ZVRpbWUpXG4gICAgICAgIH0pLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldE5hbWVkUXVlcnkodCwgZSkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh0aGlzLnRzLmdldChlKSk7XG4gICAgfVxuICAgIHNhdmVOYW1lZFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHMuc2V0KGUubmFtZSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0Lm5hbWUsXG4gICAgICAgICAgICAgICAgcXVlcnk6IFdpKHQuYnVuZGxlZFF1ZXJ5KSxcbiAgICAgICAgICAgICAgICByZWFkVGltZTogRHModC5yZWFkVGltZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSkpLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbi1tZW1vcnkgaW1wbGVtZW50YXRpb24gb2YgRG9jdW1lbnRPdmVybGF5Q2FjaGUuXG4gKi8gY2xhc3MgdG8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBBIG1hcCBzb3J0ZWQgYnkgRG9jdW1lbnRLZXksIHdob3NlIHZhbHVlIGlzIGEgcGFpciBvZiB0aGUgbGFyZ2VzdCBiYXRjaCBpZFxuICAgICAgICAvLyBmb3IgdGhlIG92ZXJsYXkgYW5kIHRoZSBvdmVybGF5IGl0c2VsZi5cbiAgICAgICAgdGhpcy5vdmVybGF5cyA9IG5ldyBCdChjdC5jb21wYXJhdG9yKSwgdGhpcy5lcyA9IG5ldyBNYXA7XG4gICAgfVxuICAgIGdldE92ZXJsYXkodCwgZSkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh0aGlzLm92ZXJsYXlzLmdldChlKSk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHVzKCk7XG4gICAgICAgIHJldHVybiBBdC5mb3JFYWNoKGUsIChlID0+IHRoaXMuZ2V0T3ZlcmxheSh0LCBlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIG51bGwgIT09IHQgJiYgbi5zZXQoZSwgdCk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgc2F2ZU92ZXJsYXlzKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIHRoaXMudWUodCwgZSwgcyk7XG4gICAgICAgIH0pKSwgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVPdmVybGF5c0ZvckJhdGNoSWQodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gdGhpcy5lcy5nZXQobik7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHMgJiYgKHMuZm9yRWFjaCgodCA9PiB0aGlzLm92ZXJsYXlzID0gdGhpcy5vdmVybGF5cy5yZW1vdmUodCkpKSwgXG4gICAgICAgIHRoaXMuZXMuZGVsZXRlKG4pKSwgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRPdmVybGF5c0ZvckNvbGxlY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gdXMoKSwgaSA9IGUubGVuZ3RoICsgMSwgciA9IG5ldyBjdChlLmNoaWxkKFwiXCIpKSwgbyA9IHRoaXMub3ZlcmxheXMuZ2V0SXRlcmF0b3JGcm9tKHIpO1xuICAgICAgICBmb3IgKDtvLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gby5nZXROZXh0KCkudmFsdWUsIHIgPSB0LmdldEtleSgpO1xuICAgICAgICAgICAgaWYgKCFlLmlzUHJlZml4T2Yoci5wYXRoKSkgYnJlYWs7XG4gICAgICAgICAgICAvLyBEb2N1bWVudHMgZnJvbSBzdWItY29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucGF0aC5sZW5ndGggPT09IGkgJiYgKHQubGFyZ2VzdEJhdGNoSWQgPiBuICYmIHMuc2V0KHQuZ2V0S2V5KCksIHQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZShzKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykge1xuICAgICAgICBsZXQgaSA9IG5ldyBCdCgoKHQsIGUpID0+IHQgLSBlKSk7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLm92ZXJsYXlzLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGZvciAoO3IuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSByLmdldE5leHQoKS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0LmdldEtleSgpLmdldENvbGxlY3Rpb25Hcm91cCgpID09PSBlICYmIHQubGFyZ2VzdEJhdGNoSWQgPiBuKSB7XG4gICAgICAgICAgICAgICAgbGV0IGUgPSBpLmdldCh0Lmxhcmdlc3RCYXRjaElkKTtcbiAgICAgICAgICAgICAgICBudWxsID09PSBlICYmIChlID0gdXMoKSwgaSA9IGkuaW5zZXJ0KHQubGFyZ2VzdEJhdGNoSWQsIGUpKSwgZS5zZXQodC5nZXRLZXkoKSwgdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbyA9IHVzKCksIHUgPSBpLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGZvciAoO3UuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGlmICh1LmdldE5leHQoKS52YWx1ZS5mb3JFYWNoKCgodCwgZSkgPT4gby5zZXQodCwgZSkpKSwgby5zaXplKCkgPj0gcykgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUobyk7XG4gICAgfVxuICAgIHVlKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGUgb3ZlcmxheSB0byBpdHMgYmF0Y2ggaWQuXG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLm92ZXJsYXlzLmdldChuLmtleSk7XG4gICAgICAgIGlmIChudWxsICE9PSBzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lcy5nZXQocy5sYXJnZXN0QmF0Y2hJZCkuZGVsZXRlKG4ua2V5KTtcbiAgICAgICAgICAgIHRoaXMuZXMuc2V0KHMubGFyZ2VzdEJhdGNoSWQsIHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3ZlcmxheXMgPSB0aGlzLm92ZXJsYXlzLmluc2VydChuLmtleSwgbmV3IE1pKGUsIG4pKTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGlzIG92ZXJsYXkgdG8gdGhlIGdpdmVuIGxhcmdlc3RCYXRjaElkLlxuICAgICAgICBsZXQgaSA9IHRoaXMuZXMuZ2V0KGUpO1xuICAgICAgICB2b2lkIDAgPT09IGkgJiYgKGkgPSBmcygpLCB0aGlzLmVzLnNldChlLCBpKSksIHRoaXMuZXMuc2V0KGUsIGkuYWRkKG4ua2V5KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgcmVmZXJlbmNlcyB0byBhIGRvY3VtZW50IGZyb20gc29tZSBraW5kIG9mIG51bWJlcmVkIGVudGl0eVxuICogKGVpdGhlciBhIHRhcmdldCBJRCBvciBiYXRjaCBJRCkuIEFzIHJlZmVyZW5jZXMgYXJlIGFkZGVkIHRvIG9yIHJlbW92ZWQgZnJvbVxuICogdGhlIHNldCBjb3JyZXNwb25kaW5nIGV2ZW50cyBhcmUgZW1pdHRlZCB0byBhIHJlZ2lzdGVyZWQgZ2FyYmFnZSBjb2xsZWN0b3IuXG4gKlxuICogRWFjaCByZWZlcmVuY2UgaXMgcmVwcmVzZW50ZWQgYnkgYSBEb2N1bWVudFJlZmVyZW5jZSBvYmplY3QuIEVhY2ggb2YgdGhlbVxuICogY29udGFpbnMgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSByZWZlcmVuY2UuIFRoZXkgYXJlIGFsbFxuICogc3RvcmVkIHByaW1hcmlseSBpbiBhIHNldCBzb3J0ZWQgYnkga2V5LiBBIGRvY3VtZW50IGlzIGNvbnNpZGVyZWQgZ2FyYmFnZSBpZlxuICogdGhlcmUncyBubyByZWZlcmVuY2VzIGluIHRoYXQgc2V0ICh0aGlzIGNhbiBiZSBlZmZpY2llbnRseSBjaGVja2VkIHRoYW5rcyB0b1xuICogc29ydGluZyBieSBrZXkpLlxuICpcbiAqIFJlZmVyZW5jZVNldCBhbHNvIGtlZXBzIGEgc2Vjb25kYXJ5IHNldCB0aGF0IGNvbnRhaW5zIHJlZmVyZW5jZXMgc29ydGVkIGJ5XG4gKiBJRHMuIFRoaXMgb25lIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgaW1wbGVtZW50IHJlbW92YWwgb2YgYWxsIHJlZmVyZW5jZXMgYnlcbiAqIHNvbWUgdGFyZ2V0IElELlxuICovIGNsYXNzIGVvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQSBzZXQgb2Ygb3V0c3RhbmRpbmcgcmVmZXJlbmNlcyB0byBhIGRvY3VtZW50IHNvcnRlZCBieSBrZXkuXG4gICAgICAgIHRoaXMubnMgPSBuZXcgcXQobm8uc3MpLCBcbiAgICAgICAgLy8gQSBzZXQgb2Ygb3V0c3RhbmRpbmcgcmVmZXJlbmNlcyB0byBhIGRvY3VtZW50IHNvcnRlZCBieSB0YXJnZXQgaWQuXG4gICAgICAgIHRoaXMucnMgPSBuZXcgcXQobm8ub3MpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSByZWZlcmVuY2Ugc2V0IGNvbnRhaW5zIG5vIHJlZmVyZW5jZXMuICovICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5zLmlzRW1wdHkoKTtcbiAgICB9XG4gICAgLyoqIEFkZHMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuIElELiAqLyAgICBhZGRSZWZlcmVuY2UodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IG5vKHQsIGUpO1xuICAgICAgICB0aGlzLm5zID0gdGhpcy5ucy5hZGQobiksIHRoaXMucnMgPSB0aGlzLnJzLmFkZChuKTtcbiAgICB9XG4gICAgLyoqIEFkZCByZWZlcmVuY2VzIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXlzIGZvciB0aGUgZ2l2ZW4gSUQuICovICAgIHVzKHQsIGUpIHtcbiAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHRoaXMuYWRkUmVmZXJlbmNlKHQsIGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuXG4gICAgICogSUQuXG4gICAgICovICAgIHJlbW92ZVJlZmVyZW5jZSh0LCBlKSB7XG4gICAgICAgIHRoaXMuY3MobmV3IG5vKHQsIGUpKTtcbiAgICB9XG4gICAgaHModCwgZSkge1xuICAgICAgICB0LmZvckVhY2goKHQgPT4gdGhpcy5yZW1vdmVSZWZlcmVuY2UodCwgZSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCByZWZlcmVuY2VzIHdpdGggYSBnaXZlbiBJRC4gQ2FsbHMgcmVtb3ZlUmVmKCkgZm9yIGVhY2gga2V5XG4gICAgICogcmVtb3ZlZC5cbiAgICAgKi8gICAgbHModCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IGN0KG5ldyBydChbXSkpLCBuID0gbmV3IG5vKGUsIHQpLCBzID0gbmV3IG5vKGUsIHQgKyAxKSwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5ycy5mb3JFYWNoSW5SYW5nZShbIG4sIHMgXSwgKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jcyh0KSwgaS5wdXNoKHQua2V5KTtcbiAgICAgICAgfSkpLCBpO1xuICAgIH1cbiAgICBmcygpIHtcbiAgICAgICAgdGhpcy5ucy5mb3JFYWNoKCh0ID0+IHRoaXMuY3ModCkpKTtcbiAgICB9XG4gICAgY3ModCkge1xuICAgICAgICB0aGlzLm5zID0gdGhpcy5ucy5kZWxldGUodCksIHRoaXMucnMgPSB0aGlzLnJzLmRlbGV0ZSh0KTtcbiAgICB9XG4gICAgZHModCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IGN0KG5ldyBydChbXSkpLCBuID0gbmV3IG5vKGUsIHQpLCBzID0gbmV3IG5vKGUsIHQgKyAxKTtcbiAgICAgICAgbGV0IGkgPSBmcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5ycy5mb3JFYWNoSW5SYW5nZShbIG4sIHMgXSwgKHQgPT4ge1xuICAgICAgICAgICAgaSA9IGkuYWRkKHQua2V5KTtcbiAgICAgICAgfSkpLCBpO1xuICAgIH1cbiAgICBjb250YWluc0tleSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgbm8odCwgMCksIG4gPSB0aGlzLm5zLmZpcnN0QWZ0ZXJPckVxdWFsKGUpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gbiAmJiB0LmlzRXF1YWwobi5rZXkpO1xuICAgIH1cbn1cblxuY2xhc3Mgbm8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSB0LCB0aGlzLl9zID0gZTtcbiAgICB9XG4gICAgLyoqIENvbXBhcmUgYnkga2V5IHRoZW4gYnkgSUQgKi8gICAgc3RhdGljIHNzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGN0LmNvbXBhcmF0b3IodC5rZXksIGUua2V5KSB8fCBaKHQuX3MsIGUuX3MpO1xuICAgIH1cbiAgICAvKiogQ29tcGFyZSBieSBJRCB0aGVuIGJ5IGtleSAqLyAgICBzdGF0aWMgb3ModCwgZSkge1xuICAgICAgICByZXR1cm4gWih0Ll9zLCBlLl9zKSB8fCBjdC5jb21wYXJhdG9yKHQua2V5LCBlLmtleSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBzbyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IHQsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBlLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzZXQgb2YgYWxsIG11dGF0aW9ucyB0aGF0IGhhdmUgYmVlbiBzZW50IGJ1dCBub3QgeWV0IGJlZW4gYXBwbGllZCB0b1xuICAgICAgICAgKiB0aGUgYmFja2VuZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IFtdLCBcbiAgICAgICAgLyoqIE5leHQgdmFsdWUgdG8gdXNlIHdoZW4gYXNzaWduaW5nIHNlcXVlbnRpYWwgSURzIHRvIGVhY2ggbXV0YXRpb24gYmF0Y2guICovXG4gICAgICAgIHRoaXMud3MgPSAxLCBcbiAgICAgICAgLyoqIEFuIG9yZGVyZWQgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIG11dGF0aW9ucyBiYXRjaCBJRHMuICovXG4gICAgICAgIHRoaXMuZ3MgPSBuZXcgcXQobm8uc3MpO1xuICAgIH1cbiAgICBjaGVja0VtcHR5KHQpIHtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUoMCA9PT0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCk7XG4gICAgfVxuICAgIGFkZE11dGF0aW9uQmF0Y2godCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gdGhpcy53cztcbiAgICAgICAgdGhpcy53cysrLCB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID4gMCAmJiB0aGlzLm11dGF0aW9uUXVldWVbdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCByID0gbmV3IGtpKGksIGUsIG4sIHMpO1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUucHVzaChyKTtcbiAgICAgICAgLy8gVHJhY2sgcmVmZXJlbmNlcyBieSBkb2N1bWVudCBrZXkgYW5kIGluZGV4IGNvbGxlY3Rpb24gcGFyZW50cy5cbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHMpIHRoaXMuZ3MgPSB0aGlzLmdzLmFkZChuZXcgbm8oZS5rZXksIGkpKSwgdGhpcy5pbmRleE1hbmFnZXIuYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgodCwgZS5rZXkucGF0aC5wb3BMYXN0KCkpO1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZShyKTtcbiAgICB9XG4gICAgbG9va3VwTXV0YXRpb25CYXRjaCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKHRoaXMueXMoZSkpO1xuICAgIH1cbiAgICBnZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlICsgMSwgcyA9IHRoaXMucHMobiksIGkgPSBzIDwgMCA/IDAgOiBzO1xuICAgICAgICAvLyBUaGUgcmVxdWVzdGVkIGJhdGNoSWQgbWF5IHN0aWxsIGJlIG91dCBvZiByYW5nZSBzbyBub3JtYWxpemUgaXQgdG8gdGhlXG4gICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID4gaSA/IHRoaXMubXV0YXRpb25RdWV1ZVtpXSA6IG51bGwpO1xuICAgIH1cbiAgICBnZXRIaWdoZXN0VW5hY2tub3dsZWRnZWRCYXRjaElkKCkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSgwID09PSB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID8gLTEgOiB0aGlzLndzIC0gMSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlcyh0KSB7XG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKHRoaXMubXV0YXRpb25RdWV1ZS5zbGljZSgpKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IG5vKGUsIDApLCBzID0gbmV3IG5vKGUsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3MuZm9yRWFjaEluUmFuZ2UoWyBuLCBzIF0sICh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnlzKHQuX3MpO1xuICAgICAgICAgICAgaS5wdXNoKGUpO1xuICAgICAgICB9KSksIEF0LnJlc29sdmUoaSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gbmV3IHF0KFopO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgbm8odCwgMCksIHMgPSBuZXcgbm8odCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgIHRoaXMuZ3MuZm9yRWFjaEluUmFuZ2UoWyBlLCBzIF0sICh0ID0+IHtcbiAgICAgICAgICAgICAgICBuID0gbi5hZGQodC5fcyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSwgQXQucmVzb2x2ZSh0aGlzLklzKG4pKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkodCwgZSkge1xuICAgICAgICAvLyBVc2UgdGhlIHF1ZXJ5IHBhdGggYXMgYSBwcmVmaXggZm9yIHRlc3RpbmcgaWYgYSBkb2N1bWVudCBtYXRjaGVzIHRoZVxuICAgICAgICAvLyBxdWVyeS5cbiAgICAgICAgY29uc3QgbiA9IGUucGF0aCwgcyA9IG4ubGVuZ3RoICsgMTtcbiAgICAgICAgLy8gQ29uc3RydWN0IGEgZG9jdW1lbnQgcmVmZXJlbmNlIGZvciBhY3R1YWxseSBzY2FubmluZyB0aGUgaW5kZXguIFVubGlrZVxuICAgICAgICAvLyB0aGUgcHJlZml4IHRoZSBkb2N1bWVudCBrZXkgaW4gdGhpcyByZWZlcmVuY2UgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mXG4gICAgICAgIC8vIHNlZ21lbnRzLiBUaGUgZW1wdHkgc2VnbWVudCBjYW4gYmUgdXNlZCBhIHN1ZmZpeCBvZiB0aGUgcXVlcnkgcGF0aFxuICAgICAgICAvLyBiZWNhdXNlIGl0IHByZWNlZGVzIGFsbCBvdGhlciBzZWdtZW50cyBpbiBhbiBvcmRlcmVkIHRyYXZlcnNhbC5cbiAgICAgICAgbGV0IGkgPSBuO1xuICAgICAgICBjdC5pc0RvY3VtZW50S2V5KGkpIHx8IChpID0gaS5jaGlsZChcIlwiKSk7XG4gICAgICAgIGNvbnN0IHIgPSBuZXcgbm8obmV3IGN0KGkpLCAwKTtcbiAgICAgICAgLy8gRmluZCB1bmlxdWUgYmF0Y2hJRHMgcmVmZXJlbmNlZCBieSBhbGwgZG9jdW1lbnRzIHBvdGVudGlhbGx5IG1hdGNoaW5nIHRoZVxuICAgICAgICAvLyBxdWVyeS5cbiAgICAgICAgICAgICAgICBsZXQgbyA9IG5ldyBxdChaKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3MuZm9yRWFjaFdoaWxlKCh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmtleS5wYXRoO1xuICAgICAgICAgICAgcmV0dXJuICEhbi5pc1ByZWZpeE9mKGUpICYmIChcbiAgICAgICAgICAgIC8vIFJvd3Mgd2l0aCBkb2N1bWVudCBrZXlzIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGUgcXVlcnlcbiAgICAgICAgICAgIC8vIHBhdGggY2FuJ3QgYmUgbWF0Y2hlcy4gRm9yIGV4YW1wbGUsIGEgcXVlcnkgb24gJ3Jvb21zJyBjYW4ndCBtYXRjaFxuICAgICAgICAgICAgLy8gdGhlIGRvY3VtZW50IC9yb29tcy9hYmMvbWVzc2FnZXMveHl4LlxuICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiB3ZSdsbCBuZWVkIGEgZGlmZmVyZW50IHNjYW5uZXIgd2hlbiB3ZSBpbXBsZW1lbnRcbiAgICAgICAgICAgIC8vIGFuY2VzdG9yIHF1ZXJpZXMuXG4gICAgICAgICAgICBlLmxlbmd0aCA9PT0gcyAmJiAobyA9IG8uYWRkKHQuX3MpKSwgITApO1xuICAgICAgICB9KSwgciksIEF0LnJlc29sdmUodGhpcy5JcyhvKSk7XG4gICAgfVxuICAgIElzKHQpIHtcbiAgICAgICAgLy8gQ29uc3RydWN0IGFuIGFycmF5IG9mIG1hdGNoaW5nIGJhdGNoZXMsIHNvcnRlZCBieSBiYXRjaElEIHRvIGVuc3VyZSB0aGF0XG4gICAgICAgIC8vIG11bHRpcGxlIG11dGF0aW9ucyBhZmZlY3RpbmcgdGhlIHNhbWUgZG9jdW1lbnQga2V5IGFyZSBhcHBsaWVkIGluIG9yZGVyLlxuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMueXModCk7XG4gICAgICAgICAgICBudWxsICE9PSBuICYmIGUucHVzaChuKTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH1cbiAgICByZW1vdmVNdXRhdGlvbkJhdGNoKHQsIGUpIHtcbiAgICAgICAgTSgwID09PSB0aGlzLlRzKGUuYmF0Y2hJZCwgXCJyZW1vdmVkXCIpKSwgdGhpcy5tdXRhdGlvblF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGxldCBuID0gdGhpcy5ncztcbiAgICAgICAgcmV0dXJuIEF0LmZvckVhY2goZS5tdXRhdGlvbnMsIChzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgbm8ocy5rZXksIGUuYmF0Y2hJZCk7XG4gICAgICAgICAgICByZXR1cm4gbiA9IG4uZGVsZXRlKGkpLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLm1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKHQsIHMua2V5KTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ3MgPSBuO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIEFuKHQpIHtcbiAgICAgICAgLy8gTm8tb3Agc2luY2UgdGhlIG1lbW9yeSBtdXRhdGlvbiBxdWV1ZSBkb2VzIG5vdCBtYWludGFpbiBhIHNlcGFyYXRlIGNhY2hlLlxuICAgIH1cbiAgICBjb250YWluc0tleSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgbm8oZSwgMCksIHMgPSB0aGlzLmdzLmZpcnN0QWZ0ZXJPckVxdWFsKG4pO1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZShlLmlzRXF1YWwocyAmJiBzLmtleSkpO1xuICAgIH1cbiAgICBwZXJmb3JtQ29uc2lzdGVuY3lDaGVjayh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gYmF0Y2hJZCBpbiB0aGUgbXV0YXRpb24gcXVldWUgYW5kIGFzc2VydHMgdGhhdFxuICAgICAqIHRoZSByZXN1bHRpbmcgaW5kZXggaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgYmF0Y2hJZCB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIGFjdGlvbiAtIEEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgY2FsbGVyIGlzIGRvaW5nLCBwaHJhc2VkIGluIHBhc3NpdmVcbiAgICAgKiBmb3JtIChlLmcuIFwiYWNrbm93bGVkZ2VkXCIgaW4gYSByb3V0aW5lIHRoYXQgYWNrbm93bGVkZ2VzIGJhdGNoZXMpLlxuICAgICAqLyAgICBUcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBzKHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIGJhdGNoSWQgaW4gdGhlIG11dGF0aW9uIHF1ZXVlLiBUaGlzIG9wZXJhdGlvblxuICAgICAqIGlzIE8oMSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgY29tcHV0ZWQgaW5kZXggb2YgdGhlIGJhdGNoIHdpdGggdGhlIGdpdmVuIGJhdGNoSWQsIGJhc2VkIG9uXG4gICAgICogdGhlIHN0YXRlIG9mIHRoZSBxdWV1ZS4gTm90ZSB0aGlzIGluZGV4IGNhbiBiZSBuZWdhdGl2ZSBpZiB0aGUgcmVxdWVzdGVkXG4gICAgICogYmF0Y2hJZCBoYXMgYWxyZWFkeSBiZWVuIHJlbXZvZWQgZnJvbSB0aGUgcXVldWUgb3IgcGFzdCB0aGUgZW5kIG9mIHRoZVxuICAgICAqIHF1ZXVlIGlmIHRoZSBiYXRjaElkIGlzIGxhcmdlciB0aGFuIHRoZSBsYXN0IGFkZGVkIGJhdGNoLlxuICAgICAqLyAgICBwcyh0KSB7XG4gICAgICAgIGlmICgwID09PSB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoKSBcbiAgICAgICAgLy8gQXMgYW4gaW5kZXggdGhpcyBpcyBwYXN0IHRoZSBlbmQgb2YgdGhlIHF1ZXVlXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgICAvLyBFeGFtaW5lIHRoZSBmcm9udCBvZiB0aGUgcXVldWUgdG8gZmlndXJlIG91dCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZVxuICAgICAgICAvLyBiYXRjaElkIGFuZCBpbmRleGVzIGluIHRoZSBhcnJheS4gTm90ZSB0aGF0IHNpbmNlIHRoZSBxdWV1ZSBpcyBvcmRlcmVkXG4gICAgICAgIC8vIGJ5IGJhdGNoSWQsIGlmIHRoZSBmaXJzdCBiYXRjaCBoYXMgYSBsYXJnZXIgYmF0Y2hJZCB0aGVuIHRoZSByZXF1ZXN0ZWRcbiAgICAgICAgLy8gYmF0Y2hJZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdCAtIHRoaXMubXV0YXRpb25RdWV1ZVswXS5iYXRjaElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHZlcnNpb24gb2YgbG9va3VwTXV0YXRpb25CYXRjaCB0aGF0IGRvZXNuJ3QgcmV0dXJuIGEgcHJvbWlzZSwgdGhpcyBtYWtlc1xuICAgICAqIG90aGVyIGZ1bmN0aW9ucyB0aGF0IHVzZXMgdGhpcyBjb2RlIGVhc2llciB0byByZWFkIGFuZCBtb3JlIGVmZmljZW50LlxuICAgICAqLyAgICB5cyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnBzKHQpO1xuICAgICAgICBpZiAoZSA8IDAgfHwgZSA+PSB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZVtlXTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRoZSBtZW1vcnktb25seSBSZW1vdGVEb2N1bWVudENhY2hlIGZvciBJbmRleGVkRGIuIFRvIGNvbnN0cnVjdCwgaW52b2tlXG4gKiBgbmV3TWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZSgpYC5cbiAqL1xuY2xhc3MgaW8ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzaXplciAtIFVzZWQgdG8gYXNzZXNzIHRoZSBzaXplIG9mIGEgZG9jdW1lbnQuIEZvciBlYWdlciBHQywgdGhpcyBpc1xuICAgICAqIGV4cGVjdGVkIHRvIGp1c3QgcmV0dXJuIDAgdG8gYXZvaWQgdW5uZWNlc3NhcmlseSBkb2luZyB0aGUgd29yayBvZlxuICAgICAqIGNhbGN1bGF0aW5nIHRoZSBzaXplLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5FcyA9IHQsIFxuICAgICAgICAvKiogVW5kZXJseWluZyBjYWNoZSBvZiBkb2N1bWVudHMgYW5kIHRoZWlyIHJlYWQgdGltZXMuICovXG4gICAgICAgIHRoaXMuZG9jcyA9IG5ldyBCdChjdC5jb21wYXJhdG9yKSwgXG4gICAgICAgIC8qKiBTaXplIG9mIGFsbCBjYWNoZWQgZG9jdW1lbnRzLiAqL1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cbiAgICBzZXRJbmRleE1hbmFnZXIodCkge1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHN1cHBsaWVkIGVudHJ5IHRvIHRoZSBjYWNoZSBhbmQgdXBkYXRlcyB0aGUgY2FjaGUgc2l6ZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgYWRkRW50cnlgICBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgLlxuICAgICAqLyAgICBhZGRFbnRyeSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLmtleSwgcyA9IHRoaXMuZG9jcy5nZXQobiksIGkgPSBzID8gcy5zaXplIDogMCwgciA9IHRoaXMuRXMoZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3MgPSB0aGlzLmRvY3MuaW5zZXJ0KG4sIHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBlLm11dGFibGVDb3B5KCksXG4gICAgICAgICAgICBzaXplOiByXG4gICAgICAgIH0pLCB0aGlzLnNpemUgKz0gciAtIGksIHRoaXMuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIG4ucGF0aC5wb3BMYXN0KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgZW50cnkgZnJvbSB0aGUgY2FjaGUgYW5kIHVwZGF0ZXMgdGhlIGNhY2hlIHNpemUgYXMgYXBwcm9wcmlhdGUuXG4gICAgICpcbiAgICAgKiBBbGwgY2FsbHMgb2YgYHJlbW92ZUVudHJ5YCBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgLlxuICAgICAqLyAgICByZW1vdmVFbnRyeSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmRvY3MuZ2V0KHQpO1xuICAgICAgICBlICYmICh0aGlzLmRvY3MgPSB0aGlzLmRvY3MucmVtb3ZlKHQpLCB0aGlzLnNpemUgLT0gZS5zaXplKTtcbiAgICB9XG4gICAgZ2V0RW50cnkodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5kb2NzLmdldChlKTtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUobiA/IG4uZG9jdW1lbnQubXV0YWJsZUNvcHkoKSA6IFNlLm5ld0ludmFsaWREb2N1bWVudChlKSk7XG4gICAgfVxuICAgIGdldEVudHJpZXModCwgZSkge1xuICAgICAgICBsZXQgbiA9IHNzKCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jcy5nZXQodCk7XG4gICAgICAgICAgICBuID0gbi5pbnNlcnQodCwgZSA/IGUuZG9jdW1lbnQubXV0YWJsZUNvcHkoKSA6IFNlLm5ld0ludmFsaWREb2N1bWVudCh0KSk7XG4gICAgICAgIH0pKSwgQXQucmVzb2x2ZShuKTtcbiAgICB9XG4gICAgZ2V0QWxsRnJvbUNvbGxlY3Rpb24odCwgZSwgbikge1xuICAgICAgICBsZXQgcyA9IHNzKCk7XG4gICAgICAgIC8vIERvY3VtZW50cyBhcmUgb3JkZXJlZCBieSBrZXksIHNvIHdlIGNhbiB1c2UgYSBwcmVmaXggc2NhbiB0byBuYXJyb3cgZG93blxuICAgICAgICAvLyB0aGUgZG9jdW1lbnRzIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIHF1ZXJ5IGFnYWluc3QuXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBjdChlLmNoaWxkKFwiXCIpKSwgciA9IHRoaXMuZG9jcy5nZXRJdGVyYXRvckZyb20oaSk7XG4gICAgICAgIGZvciAoO3IuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHtrZXk6IHQsIHZhbHVlOiB7ZG9jdW1lbnQ6IGl9fSA9IHIuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgaWYgKCFlLmlzUHJlZml4T2YodC5wYXRoKSkgYnJlYWs7XG4gICAgICAgICAgICB0LnBhdGgubGVuZ3RoID4gZS5sZW5ndGggKyAxIHx8IChwdChndChpKSwgbikgPD0gMCB8fCAocyA9IHMuaW5zZXJ0KGkua2V5LCBpLm11dGFibGVDb3B5KCkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUocyk7XG4gICAgfVxuICAgIGdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgZnJvbSB0aGUgSW5kZXhCYWNrZmlsbGVyIGlmIHBlcnNpc3RlbmNlXG4gICAgICAgIC8vIGlzIGVuYWJsZWQuXG4gICAgICAgIE8oKTtcbiAgICB9XG4gICAgQXModCwgZSkge1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaCh0aGlzLmRvY3MsICh0ID0+IGUodCkpKTtcbiAgICB9XG4gICAgbmV3Q2hhbmdlQnVmZmVyKHQpIHtcbiAgICAgICAgLy8gYHRyYWNrUmVtb3ZhbHNgIGlzIGlnbm9yZXMgc2luY2UgdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUga2VlcHNcbiAgICAgICAgLy8gYSBzZXBhcmF0ZSBjaGFuZ2Vsb2cgYW5kIGRvZXMgbm90IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBmb3IgcmVtb3ZhbHMuXG4gICAgICAgIHJldHVybiBuZXcgcm8odGhpcyk7XG4gICAgfVxuICAgIGdldFNpemUodCkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh0aGlzLnNpemUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lbW9yeS1vbmx5IFJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKlxuICogQHBhcmFtIHNpemVyIC0gVXNlZCB0byBhc3Nlc3MgdGhlIHNpemUgb2YgYSBkb2N1bWVudC4gRm9yIGVhZ2VyIEdDLCB0aGlzIGlzXG4gKiBleHBlY3RlZCB0byBqdXN0IHJldHVybiAwIHRvIGF2b2lkIHVubmVjZXNzYXJpbHkgZG9pbmcgdGhlIHdvcmsgb2ZcbiAqIGNhbGN1bGF0aW5nIHRoZSBzaXplLlxuICovXG4vKipcbiAqIEhhbmRsZXMgdGhlIGRldGFpbHMgb2YgYWRkaW5nIGFuZCB1cGRhdGluZyBkb2N1bWVudHMgaW4gdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKi9cbmNsYXNzIHJvIGV4dGVuZHMgcXIge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5ZbiA9IHQ7XG4gICAgfVxuICAgIGFwcGx5Q2hhbmdlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5mb3JFYWNoKCgobiwgcykgPT4ge1xuICAgICAgICAgICAgcy5pc1ZhbGlkRG9jdW1lbnQoKSA/IGUucHVzaCh0aGlzLlluLmFkZEVudHJ5KHQsIHMpKSA6IHRoaXMuWW4ucmVtb3ZlRW50cnkobik7XG4gICAgICAgIH0pKSwgQXQud2FpdEZvcihlKTtcbiAgICB9XG4gICAgZ2V0RnJvbUNhY2hlKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWW4uZ2V0RW50cnkodCwgZSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21DYWNoZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlluLmdldEVudHJpZXModCwgZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBvbyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gdCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXBzIGEgdGFyZ2V0IHRvIHRoZSBkYXRhIGFib3V0IHRoYXQgdGFyZ2V0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlJzID0gbmV3IGVzKCh0ID0+IHhlKHQpKSwga2UpLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IHJlY2VpdmVkIHNuYXBzaG90IHZlcnNpb24uICovXG4gICAgICAgIHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IHN0Lm1pbigpLCBcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IG51bWJlcmVkIHRhcmdldCBJRCBlbmNvdW50ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5oaWdoZXN0VGFyZ2V0SWQgPSAwLCBcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IHNlcXVlbmNlIG51bWJlciBlbmNvdW50ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5icyA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBvcmRlcmVkIGJpZGlyZWN0aW9uYWwgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIHJlbW90ZSB0YXJnZXRcbiAgICAgICAgICogSURzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5QcyA9IG5ldyBlbywgdGhpcy50YXJnZXRDb3VudCA9IDAsIHRoaXMudnMgPSBDci5QbigpO1xuICAgIH1cbiAgICBmb3JFYWNoVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUnMuZm9yRWFjaCgoKHQsIG4pID0+IGUobikpKSwgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUodGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKTtcbiAgICB9XG4gICAgZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyKHQpIHtcbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUodGhpcy5icyk7XG4gICAgfVxuICAgIGFsbG9jYXRlVGFyZ2V0SWQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaWdoZXN0VGFyZ2V0SWQgPSB0aGlzLnZzLm5leHQoKSwgQXQucmVzb2x2ZSh0aGlzLmhpZ2hlc3RUYXJnZXRJZCk7XG4gICAgfVxuICAgIHNldFRhcmdldHNNZXRhZGF0YSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuICYmICh0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBuKSwgZSA+IHRoaXMuYnMgJiYgKHRoaXMuYnMgPSBlKSwgXG4gICAgICAgIEF0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgRG4odCkge1xuICAgICAgICB0aGlzLlJzLnNldCh0LnRhcmdldCwgdCk7XG4gICAgICAgIGNvbnN0IGUgPSB0LnRhcmdldElkO1xuICAgICAgICBlID4gdGhpcy5oaWdoZXN0VGFyZ2V0SWQgJiYgKHRoaXMudnMgPSBuZXcgQ3IoZSksIHRoaXMuaGlnaGVzdFRhcmdldElkID0gZSksIHQuc2VxdWVuY2VOdW1iZXIgPiB0aGlzLmJzICYmICh0aGlzLmJzID0gdC5zZXF1ZW5jZU51bWJlcik7XG4gICAgfVxuICAgIGFkZFRhcmdldERhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5EbihlKSwgdGhpcy50YXJnZXRDb3VudCArPSAxLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHVwZGF0ZVRhcmdldERhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5EbihlKSwgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUnMuZGVsZXRlKGUudGFyZ2V0KSwgdGhpcy5Qcy5scyhlLnRhcmdldElkKSwgdGhpcy50YXJnZXRDb3VudCAtPSAxLCBcbiAgICAgICAgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKHQsIGUsIG4pIHtcbiAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICBjb25zdCBpID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLlJzLmZvckVhY2goKChyLCBvKSA9PiB7XG4gICAgICAgICAgICBvLnNlcXVlbmNlTnVtYmVyIDw9IGUgJiYgbnVsbCA9PT0gbi5nZXQoby50YXJnZXRJZCkgJiYgKHRoaXMuUnMuZGVsZXRlKHIpLCBpLnB1c2godGhpcy5yZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0LCBvLnRhcmdldElkKSksIFxuICAgICAgICAgICAgcysrKTtcbiAgICAgICAgfSkpLCBBdC53YWl0Rm9yKGkpLm5leHQoKCgpID0+IHMpKTtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0Q291bnQodCkge1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZSh0aGlzLnRhcmdldENvdW50KTtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0RGF0YSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLlJzLmdldChlKSB8fCBudWxsO1xuICAgICAgICByZXR1cm4gQXQucmVzb2x2ZShuKTtcbiAgICB9XG4gICAgYWRkTWF0Y2hpbmdLZXlzKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUHMudXMoZSwgbiksIEF0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlTWF0Y2hpbmdLZXlzKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5Qcy5ocyhlLCBuKTtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUsIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHMgJiYgZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGkucHVzaChzLm1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKHQsIGUpKTtcbiAgICAgICAgfSkpLCBBdC53YWl0Rm9yKGkpO1xuICAgIH1cbiAgICByZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlBzLmxzKGUpLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuUHMuZHMoZSk7XG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKG4pO1xuICAgIH1cbiAgICBjb250YWluc0tleSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBBdC5yZXNvbHZlKHRoaXMuUHMuY29udGFpbnNLZXkoZSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBtZW1vcnktYmFja2VkIGluc3RhbmNlIG9mIFBlcnNpc3RlbmNlLiBEYXRhIGlzIHN0b3JlZCBvbmx5IGluIFJBTSBhbmRcbiAqIG5vdCBwZXJzaXN0ZWQgYWNyb3NzIHNlc3Npb25zLlxuICovXG5jbGFzcyB1byB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIGFjY2VwdHMgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIHJlZmVyZW5jZSBkZWxlZ2F0ZS4gVGhpc1xuICAgICAqIGFsbG93cyBib3RoIHRoZSBkZWxlZ2F0ZSBhbmQgdGhpcyBpbnN0YW5jZSB0byBoYXZlIHN0cm9uZyByZWZlcmVuY2VzIHRvXG4gICAgICogZWFjaCBvdGhlciB3aXRob3V0IGhhdmluZyBudWxsYWJsZSBmaWVsZHMgdGhhdCB3b3VsZCB0aGVuIG5lZWQgdG8gYmVcbiAgICAgKiBjaGVja2VkIG9yIGFzc2VydGVkIG9uIGV2ZXJ5IGFjY2Vzcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuVnMgPSB7fSwgdGhpcy5vdmVybGF5cyA9IHt9LCB0aGlzLlNzID0gbmV3IE90KDApLCB0aGlzLkRzID0gITEsIHRoaXMuRHMgPSAhMCwgXG4gICAgICAgIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSB0KHRoaXMpLCB0aGlzLkNzID0gbmV3IG9vKHRoaXMpO1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IG5ldyBkciwgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBpbyh0KTtcbiAgICAgICAgfSgodCA9PiB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLnhzKHQpKSksIHRoaXMuSXQgPSBuZXcgJGkoZSksIHRoaXMuTnMgPSBuZXcgWnIodGhpcy5JdCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICAvLyBObyBkdXJhYmxlIHN0YXRlIHRvIGVuc3VyZSBpcyBjbG9zZWQgb24gc2h1dGRvd24uXG4gICAgICAgIHJldHVybiB0aGlzLkRzID0gITEsIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXQgc3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRHM7XG4gICAgfVxuICAgIHNldERhdGFiYXNlRGVsZXRlZExpc3RlbmVyKCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgc2V0TmV0d29ya0VuYWJsZWQoKSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH1cbiAgICBnZXRJbmRleE1hbmFnZXIodCkge1xuICAgICAgICAvLyBXZSBkbyBub3QgY3VycmVudGx5IHN1cHBvcnQgaW5kaWNlcyBmb3IgbWVtb3J5IHBlcnNpc3RlbmNlLCBzbyB3ZSBjYW5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBzYW1lIHNoYXJlZCBpbnN0YW5jZSBvZiB0aGUgbWVtb3J5IGluZGV4IG1hbmFnZXIuXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4TWFuYWdlcjtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRPdmVybGF5Q2FjaGUodCkge1xuICAgICAgICBsZXQgZSA9IHRoaXMub3ZlcmxheXNbdC50b0tleSgpXTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgdG8sIHRoaXMub3ZlcmxheXNbdC50b0tleSgpXSA9IGUpLCBlO1xuICAgIH1cbiAgICBnZXRNdXRhdGlvblF1ZXVlKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSB0aGlzLlZzW3QudG9LZXkoKV07XG4gICAgICAgIHJldHVybiBuIHx8IChuID0gbmV3IHNvKGUsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUpLCB0aGlzLlZzW3QudG9LZXkoKV0gPSBuKSwgbjtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkNzO1xuICAgIH1cbiAgICBnZXRSZW1vdGVEb2N1bWVudENhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlO1xuICAgIH1cbiAgICBnZXRCdW5kbGVDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnM7XG4gICAgfVxuICAgIHJ1blRyYW5zYWN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgQyhcIk1lbW9yeVBlcnNpc3RlbmNlXCIsIFwiU3RhcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQpO1xuICAgICAgICBjb25zdCBzID0gbmV3IGNvKHRoaXMuU3MubmV4dCgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUua3MoKSwgbihzKS5uZXh0KCh0ID0+IHRoaXMucmVmZXJlbmNlRGVsZWdhdGUuT3MocykubmV4dCgoKCkgPT4gdCkpKSkudG9Qcm9taXNlKCkudGhlbigodCA9PiAocy5yYWlzZU9uQ29tbWl0dGVkRXZlbnQoKSwgXG4gICAgICAgIHQpKSk7XG4gICAgfVxuICAgIE1zKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEF0Lm9yKE9iamVjdC52YWx1ZXModGhpcy5WcykubWFwKChuID0+ICgpID0+IG4uY29udGFpbnNLZXkodCwgZSkpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIE1lbW9yeSBwZXJzaXN0ZW5jZSBpcyBub3QgYWN0dWFsbHkgdHJhbnNhY3Rpb25hbCwgYnV0IGZ1dHVyZSBpbXBsZW1lbnRhdGlvbnNcbiAqIG1heSBoYXZlIHRyYW5zYWN0aW9uLXNjb3BlZCBzdGF0ZS5cbiAqLyBjbGFzcyBjbyBleHRlbmRzIFR0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuY3VycmVudFNlcXVlbmNlTnVtYmVyID0gdDtcbiAgICB9XG59XG5cbmNsYXNzIGFvIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSB0LCBcbiAgICAgICAgLyoqIFRyYWNrcyBhbGwgZG9jdW1lbnRzIHRoYXQgYXJlIGFjdGl2ZSBpbiBRdWVyeSB2aWV3cy4gKi9cbiAgICAgICAgdGhpcy5GcyA9IG5ldyBlbywgXG4gICAgICAgIC8qKiBUaGUgbGlzdCBvZiBkb2N1bWVudHMgdGhhdCBhcmUgcG90ZW50aWFsbHkgR0NlZCBhZnRlciBlYWNoIHRyYW5zYWN0aW9uLiAqL1xuICAgICAgICB0aGlzLiRzID0gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIEJzKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhbyh0KTtcbiAgICB9XG4gICAgZ2V0IExzKCkge1xuICAgICAgICBpZiAodGhpcy4kcykgcmV0dXJuIHRoaXMuJHM7XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9XG4gICAgYWRkUmVmZXJlbmNlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRnMuYWRkUmVmZXJlbmNlKG4sIGUpLCB0aGlzLkxzLmRlbGV0ZShuLnRvU3RyaW5nKCkpLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlbW92ZVJlZmVyZW5jZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkZzLnJlbW92ZVJlZmVyZW5jZShuLCBlKSwgdGhpcy5Mcy5hZGQobi50b1N0cmluZygpKSwgQXQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBtYXJrUG90ZW50aWFsbHlPcnBoYW5lZCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxzLmFkZChlLnRvU3RyaW5nKCkpLCBBdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldCh0LCBlKSB7XG4gICAgICAgIHRoaXMuRnMubHMoZS50YXJnZXRJZCkuZm9yRWFjaCgodCA9PiB0aGlzLkxzLmFkZCh0LnRvU3RyaW5nKCkpKSk7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLnBlcnNpc3RlbmNlLmdldFRhcmdldENhY2hlKCk7XG4gICAgICAgIHJldHVybiBuLmdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIGUudGFyZ2V0SWQpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHRoaXMuTHMuYWRkKHQudG9TdHJpbmcoKSkpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IG4ucmVtb3ZlVGFyZ2V0RGF0YSh0LCBlKSkpO1xuICAgIH1cbiAgICBrcygpIHtcbiAgICAgICAgdGhpcy4kcyA9IG5ldyBTZXQ7XG4gICAgfVxuICAgIE9zKHQpIHtcbiAgICAgICAgLy8gUmVtb3ZlIG5ld2x5IG9ycGhhbmVkIGRvY3VtZW50cy5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMucGVyc2lzdGVuY2UuZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpLm5ld0NoYW5nZUJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gQXQuZm9yRWFjaCh0aGlzLkxzLCAobiA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gY3QuZnJvbVBhdGgobik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Vcyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICB0IHx8IGUucmVtb3ZlRW50cnkocywgc3QubWluKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gKHRoaXMuJHMgPSBudWxsLCBlLmFwcGx5KHQpKSkpO1xuICAgIH1cbiAgICB1cGRhdGVMaW1ib0RvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVXModCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB0ID8gdGhpcy5Mcy5kZWxldGUoZS50b1N0cmluZygpKSA6IHRoaXMuTHMuYWRkKGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgeHModCkge1xuICAgICAgICAvLyBGb3IgZWFnZXIgR0MsIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIGRvY3VtZW50IHNpemUsIHRoZXJlIGFyZSBubyBzaXplIHRocmVzaG9sZHMuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBVcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiBBdC5vcihbICgpID0+IEF0LnJlc29sdmUodGhpcy5Gcy5jb250YWluc0tleShlKSksICgpID0+IHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKS5jb250YWluc0tleSh0LCBlKSwgKCkgPT4gdGhpcy5wZXJzaXN0ZW5jZS5Ncyh0LCBlKSBdKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy4gKi8gY2xhc3MgaG8ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5JdCA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGRhdGFiYXNlIGNyZWF0aW9uIGFuZCBzY2hlbWEgdXBncmFkZXMuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgaW4gcHJvZHVjdGlvbiwgdGhpcyBtZXRob2QgaXMgb25seSBldmVyIHVzZWQgdG8gdXBncmFkZSB0aGUgc2NoZW1hXG4gICAgICogdG8gU0NIRU1BX1ZFUlNJT04uIERpZmZlcmVudCB2YWx1ZXMgb2YgdG9WZXJzaW9uIGFyZSBvbmx5IHVzZWQgZm9yIHRlc3RpbmdcbiAgICAgKiBhbmQgbG9jYWwgZmVhdHVyZSBkZXZlbG9wbWVudC5cbiAgICAgKi8gICAgJCh0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcgUnQoXCJjcmVhdGVPclVwZ3JhZGVcIiwgZSk7XG4gICAgICAgIG4gPCAxICYmIHMgPj0gMSAmJiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm93bmVyXCIpO1xuICAgICAgICB9KHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25RdWV1ZXNcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IFwidXNlcklkXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm11dGF0aW9uc1wiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJiYXRjaElkXCIsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwidXNlck11dGF0aW9uc0luZGV4XCIsIGFpLCB7XG4gICAgICAgICAgICAgICAgdW5pcXVlOiAhMFxuICAgICAgICAgICAgfSksIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJkb2N1bWVudE11dGF0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFVwZ3JhZGUgZnVuY3Rpb24gdG8gbWlncmF0ZSB0aGUgJ211dGF0aW9ucycgc3RvcmUgZnJvbSBWMSB0byBWMy4gTG9hZHNcbiAqIGFuZCByZXdyaXRlcyBhbGwgZGF0YS5cbiAqLyAodCksIGxvKHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpO1xuICAgICAgICB9KHQpKTtcbiAgICAgICAgLy8gTWlncmF0aW9uIDIgdG8gcG9wdWxhdGUgdGhlIHRhcmdldEdsb2JhbCBvYmplY3Qgbm8gbG9uZ2VyIG5lZWRlZCBzaW5jZVxuICAgICAgICAvLyBtaWdyYXRpb24gMyB1bmNvbmRpdGlvbmFsbHkgY2xlYXJzIGl0LlxuICAgICAgICAgICAgICAgIGxldCByID0gQXQucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gbiA8IDMgJiYgcyA+PSAzICYmIChcbiAgICAgICAgLy8gQnJhbmQgbmV3IGNsaWVudHMgZG9uJ3QgbmVlZCB0byBkcm9wIGFuZCByZWNyZWF0ZS0tb25seSBjbGllbnRzIHRoYXRcbiAgICAgICAgLy8gcG90ZW50aWFsbHkgaGF2ZSBjb3JydXB0IGRhdGEuXG4gICAgICAgIDAgIT09IG4gJiYgKCFmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0RG9jdW1lbnRzXCIpLCB0LmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0c1wiKSwgdC5kZWxldGVPYmplY3RTdG9yZShcInRhcmdldEdsb2JhbFwiKTtcbiAgICAgICAgfSh0KSwgbG8odCkpLCByID0gci5uZXh0KCgoKSA9PiBcbiAgICAgICAgLyoqXG4gKiBDcmVhdGVzIHRoZSB0YXJnZXQgZ2xvYmFsIHNpbmdsZXRvbiByb3cuXG4gKlxuICogQHBhcmFtIHR4biAtIFRoZSB2ZXJzaW9uIHVwZ3JhZGUgdHJhbnNhY3Rpb24gZm9yIGluZGV4ZWRkYlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnN0b3JlKFwidGFyZ2V0R2xvYmFsXCIpLCBuID0ge1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RUYXJnZXRJZDogMCxcbiAgICAgICAgICAgICAgICBoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXI6IDAsXG4gICAgICAgICAgICAgICAgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbjogc3QubWluKCkudG9UaW1lc3RhbXAoKSxcbiAgICAgICAgICAgICAgICB0YXJnZXRDb3VudDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBlLnB1dChcInRhcmdldEdsb2JhbEtleVwiLCBuKTtcbiAgICAgICAgfShpKSkpKSwgbiA8IDQgJiYgcyA+PSA0ICYmICgwICE9PSBuICYmIChcbiAgICAgICAgLy8gU2NoZW1hIHZlcnNpb24gMyB1c2VzIGF1dG8tZ2VuZXJhdGVkIGtleXMgdG8gZ2VuZXJhdGUgZ2xvYmFsbHkgdW5pcXVlXG4gICAgICAgIC8vIG11dGF0aW9uIGJhdGNoIElEcyAodGhpcyB3YXMgcHJldmlvdXNseSBlbnN1cmVkIGludGVybmFsbHkgYnkgdGhlXG4gICAgICAgIC8vIGNsaWVudCkuIFRvIG1pZ3JhdGUgdG8gdGhlIG5ldyBzY2hlbWEsIHdlIGhhdmUgdG8gcmVhZCBhbGwgbXV0YXRpb25zXG4gICAgICAgIC8vIGFuZCB3cml0ZSB0aGVtIGJhY2sgb3V0LiBXZSBwcmVzZXJ2ZSB0aGUgZXhpc3RpbmcgYmF0Y2ggSURzIHRvIGd1YXJhbnRlZVxuICAgICAgICAvLyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIG9iamVjdCBzdG9yZXMuIEFueSBmdXJ0aGVyIG11dGF0aW9uIGJhdGNoIElEcyB3aWxsXG4gICAgICAgIC8vIGJlIGF1dG8tZ2VuZXJhdGVkLlxuICAgICAgICByID0gci5uZXh0KCgoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zdG9yZShcIm11dGF0aW9uc1wiKS5XKCkubmV4dCgobiA9PiB7XG4gICAgICAgICAgICAgICAgdC5kZWxldGVPYmplY3RTdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25zXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJiYXRjaElkXCIsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9JbmNyZW1lbnQ6ICEwXG4gICAgICAgICAgICAgICAgfSkuY3JlYXRlSW5kZXgoXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgYWksIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLnN0b3JlKFwibXV0YXRpb25zXCIpLCBpID0gbi5tYXAoKHQgPT4gcy5wdXQodCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXQud2FpdEZvcihpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSh0LCBpKSkpKSwgciA9IHIubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwiY2xpZW50TWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBcImNsaWVudElkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0odCk7XG4gICAgICAgIH0pKSksIG4gPCA1ICYmIHMgPj0gNSAmJiAociA9IHIubmV4dCgoKCkgPT4gdGhpcy5xcyhpKSkpKSwgbiA8IDYgJiYgcyA+PSA2ICYmIChyID0gci5uZXh0KCgoKSA9PiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50R2xvYmFsXCIpO1xuICAgICAgICB9KHQpLCB0aGlzLktzKGkpKSkpKSwgbiA8IDcgJiYgcyA+PSA3ICYmIChyID0gci5uZXh0KCgoKSA9PiB0aGlzLkdzKGkpKSkpLCBuIDwgOCAmJiBzID49IDggJiYgKHIgPSByLm5leHQoKCgpID0+IHRoaXMuUXModCwgaSkpKSksIFxuICAgICAgICBuIDwgOSAmJiBzID49IDkgJiYgKHIgPSByLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIE11bHRpLVRhYiB1c2VkIHRvIG1hbmFnZSBpdHMgb3duIGNoYW5nZWxvZywgYnV0IHRoaXMgaGFzIGJlZW4gbW92ZWRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBEYlJlbW90ZURvY3VtZW50IG9iamVjdCBzdG9yZSBpdHNlbGYuIFNpbmNlIHRoZSBwcmV2aW91cyBjaGFuZ2VcbiAgICAgICAgICAgIC8vIGxvZyBvbmx5IGNvbnRhaW5lZCB0cmFuc2llbnQgZGF0YSwgd2UgY2FuIGRyb3AgaXRzIG9iamVjdCBzdG9yZS5cbiAgICAgICAgICAgICFmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKFwicmVtb3RlRG9jdW1lbnRDaGFuZ2VzXCIpICYmIHQuZGVsZXRlT2JqZWN0U3RvcmUoXCJyZW1vdGVEb2N1bWVudENoYW5nZXNcIik7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICAgICAgLy8gTm90ZTogU2NoZW1hIHZlcnNpb24gOSB1c2VkIHRvIGNyZWF0ZSBhIHJlYWQgdGltZSBpbmRleCBmb3IgdGhlXG4gICAgICAgICAgICAvLyBSZW1vdGVEb2N1bWVudENhY2hlLiBUaGlzIGlzIG5vdyBkb25lIHdpdGggc2NoZW1hIHZlcnNpb24gMTMuXG4gICAgICAgICAgICAgICAgfSkpKSwgbiA8IDEwICYmIHMgPj0gMTAgJiYgKHIgPSByLm5leHQoKCgpID0+IHRoaXMuanMoaSkpKSksIG4gPCAxMSAmJiBzID49IDExICYmIChyID0gci5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAhZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJidW5kbGVzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJidW5kbGVJZFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm5hbWVkUXVlcmllc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleVBhdGg6IFwibmFtZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICB9KSkpLCBuIDwgMTIgJiYgcyA+PSAxMiAmJiAociA9IHIubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jcmVhdGVPYmplY3RTdG9yZShcImRvY3VtZW50T3ZlcmxheXNcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBSaVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uUGF0aE92ZXJsYXlJbmRleFwiLCBiaSwge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICAgICAgfSksIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uR3JvdXBPdmVybGF5SW5kZXhcIiwgUGksIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgfSkpKSwgbiA8IDEzICYmIHMgPj0gMTMgJiYgKHIgPSByLm5leHQoKCgpID0+IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNyZWF0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRzVjE0XCIsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBkaVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlLmNyZWF0ZUluZGV4KFwiZG9jdW1lbnRLZXlJbmRleFwiLCBfaSksIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uR3JvdXBJbmRleFwiLCB3aSk7XG4gICAgICAgIH0odCkpKS5uZXh0KCgoKSA9PiB0aGlzLldzKHQsIGkpKSkubmV4dCgoKCkgPT4gdC5kZWxldGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50c1wiKSkpKSwgXG4gICAgICAgIG4gPCAxNCAmJiBzID49IDE0ICYmIChyID0gci5uZXh0KCgoKSA9PiB0aGlzLnpzKHQsIGkpKSkpLCBuIDwgMTUgJiYgcyA+PSAxNSAmJiAociA9IHIubmV4dCgoKCkgPT4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4Q29uZmlndXJhdGlvblwiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJpbmRleElkXCIsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4U3RhdGVcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IElpXG4gICAgICAgICAgICB9KS5jcmVhdGVJbmRleChcInNlcXVlbmNlTnVtYmVySW5kZXhcIiwgVGksIHtcbiAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJpbmRleEVudHJpZXNcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IEVpXG4gICAgICAgICAgICB9KS5jcmVhdGVJbmRleChcImRvY3VtZW50S2V5SW5kZXhcIiwgQWksIHtcbiAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSh0KSkpKSwgcjtcbiAgICB9XG4gICAgS3ModCkge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpLlooKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBlICs9IGJyKG4pO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHtcbiAgICAgICAgICAgICAgICBieXRlU2l6ZTogZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIikucHV0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIiwgbik7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5zdG9yZShcIm11dGF0aW9uUXVldWVzXCIpLCBuID0gdC5zdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgcmV0dXJuIGUuVygpLm5leHQoKGUgPT4gQXQuZm9yRWFjaChlLCAoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlLnVzZXJJZCwgLTEgXSwgWyBlLnVzZXJJZCwgZS5sYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCBdKTtcbiAgICAgICAgICAgIHJldHVybiBuLlcoXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgcykubmV4dCgobiA9PiBBdC5mb3JFYWNoKG4sIChuID0+IHtcbiAgICAgICAgICAgICAgICBNKG4udXNlcklkID09PSBlLnVzZXJJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IEdpKHRoaXMuSXQsIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBScih0LCBlLnVzZXJJZCwgcykubmV4dCgoKCkgPT4ge30pKTtcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyB0aGF0IGV2ZXJ5IGRvY3VtZW50IGluIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUgaGFzIGEgY29ycmVzcG9uZGluZyBzZW50aW5lbCByb3dcbiAgICAgKiB3aXRoIGEgc2VxdWVuY2UgbnVtYmVyLiBNaXNzaW5nIHJvd3MgYXJlIGdpdmVuIHRoZSBtb3N0IHJlY2VudGx5IHVzZWQgc2VxdWVuY2UgbnVtYmVyLlxuICAgICAqLyAgICBHcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LnN0b3JlKFwidGFyZ2V0RG9jdW1lbnRzXCIpLCBuID0gdC5zdG9yZShcInJlbW90ZURvY3VtZW50c1wiKTtcbiAgICAgICAgcmV0dXJuIHQuc3RvcmUoXCJ0YXJnZXRHbG9iYWxcIikuZ2V0KFwidGFyZ2V0R2xvYmFsS2V5XCIpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIG4uWigoKG4sIGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IHJ0KG4pLCBvID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAwLCByaSh0KSBdO1xuICAgICAgICAgICAgICAgIH0ocik7XG4gICAgICAgICAgICAgICAgcy5wdXNoKGUuZ2V0KG8pLm5leHQoKG4gPT4gbiA/IEF0LnJlc29sdmUoKSA6IChuID0+IGUucHV0KHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHJpKG4pLFxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZU51bWJlcjogdC5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXJcbiAgICAgICAgICAgICAgICB9KSkocikpKSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoKCkgPT4gQXQud2FpdEZvcihzKSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFFzKHQsIGUpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBpbmRleC5cbiAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcImNvbGxlY3Rpb25QYXJlbnRzXCIsIHtcbiAgICAgICAgICAgIGtleVBhdGg6IHBpXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBuID0gZS5zdG9yZShcImNvbGxlY3Rpb25QYXJlbnRzXCIpLCBzID0gbmV3IF9yLCBpID0gdCA9PiB7XG4gICAgICAgICAgICBpZiAocy5hZGQodCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5sYXN0U2VnbWVudCgpLCBzID0gdC5wb3BMYXN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ucHV0KHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkOiBlLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHJpKHMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEhlbHBlciB0byBhZGQgYW4gaW5kZXggZW50cnkgaWZmIHdlIGhhdmVuJ3QgYWxyZWFkeSB3cml0dGVuIGl0LlxuICAgICAgICAgICAgICAgIC8vIEluZGV4IGV4aXN0aW5nIHJlbW90ZSBkb2N1bWVudHMuXG4gICAgICAgIHJldHVybiBlLnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpLlooe1xuICAgICAgICAgICAgWDogITBcbiAgICAgICAgfSwgKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gbmV3IHJ0KHQpO1xuICAgICAgICAgICAgcmV0dXJuIGkobi5wb3BMYXN0KCkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gZS5zdG9yZShcImRvY3VtZW50TXV0YXRpb25zXCIpLlooe1xuICAgICAgICAgICAgWDogITBcbiAgICAgICAgfSwgKChbdCwgZSwgbl0sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBjaShlKTtcbiAgICAgICAgICAgIHJldHVybiBpKHIucG9wTGFzdCgpKTtcbiAgICAgICAgfSkpKSk7XG4gICAgfVxuICAgIGpzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuc3RvcmUoXCJ0YXJnZXRzXCIpO1xuICAgICAgICByZXR1cm4gZS5aKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IFFpKG4pLCBpID0gamkodGhpcy5JdCwgcyk7XG4gICAgICAgICAgICByZXR1cm4gZS5wdXQoaSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgV3ModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZS5zdG9yZShcInJlbW90ZURvY3VtZW50c1wiKSwgcyA9IFtdO1xuICAgICAgICByZXR1cm4gbi5aKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IGUuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNWMTRcIiksIHIgPSAobyA9IG4sIG8uZG9jdW1lbnQgPyBuZXcgY3QocnQuZnJvbVN0cmluZyhvLmRvY3VtZW50Lm5hbWUpLnBvcEZpcnN0KDUpKSA6IG8ubm9Eb2N1bWVudCA/IGN0LmZyb21TZWdtZW50cyhvLm5vRG9jdW1lbnQucGF0aCkgOiBvLnVua25vd25Eb2N1bWVudCA/IGN0LmZyb21TZWdtZW50cyhvLnVua25vd25Eb2N1bWVudC5wYXRoKSA6IE8oKSkucGF0aC50b0FycmF5KCk7XG4gICAgICAgICAgICB2YXIgbztcbiAgICAgICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovICAgICAgICAgICAgY29uc3QgdSA9IHtcbiAgICAgICAgICAgICAgICBwcmVmaXhQYXRoOiByLnNsaWNlKDAsIHIubGVuZ3RoIC0gMiksXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbkdyb3VwOiByW3IubGVuZ3RoIC0gMl0sXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRJZDogcltyLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBuLnJlYWRUaW1lIHx8IFsgMCwgMCBdLFxuICAgICAgICAgICAgICAgIHVua25vd25Eb2N1bWVudDogbi51bmtub3duRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgbm9Eb2N1bWVudDogbi5ub0RvY3VtZW50LFxuICAgICAgICAgICAgICAgIGRvY3VtZW50OiBuLmRvY3VtZW50LFxuICAgICAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogISFuLmhhc0NvbW1pdHRlZE11dGF0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHMucHVzaChpLnB1dCh1KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBBdC53YWl0Rm9yKHMpKSk7XG4gICAgfVxuICAgIHpzKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUuc3RvcmUoXCJtdXRhdGlvbnNcIiksIHMgPSBHcih0aGlzLkl0KSwgaSA9IG5ldyB1byhhby5CcywgdGhpcy5JdC5yZSk7XG4gICAgICAgIHJldHVybiBuLlcoKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgTWFwO1xuICAgICAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAgICAgbGV0IHMgPSBudWxsICE9PSAoZSA9IG4uZ2V0KHQudXNlcklkKSkgJiYgdm9pZCAwICE9PSBlID8gZSA6IGZzKCk7XG4gICAgICAgICAgICAgICAgR2kodGhpcy5JdCwgdCkua2V5cygpLmZvckVhY2goKHQgPT4gcyA9IHMuYWRkKHQpKSksIG4uc2V0KHQudXNlcklkLCBzKTtcbiAgICAgICAgICAgIH0pKSwgQXQuZm9yRWFjaChuLCAoKHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFAobiksIG8gPSB0ci5vZSh0aGlzLkl0LCByKSwgdSA9IGkuZ2V0SW5kZXhNYW5hZ2VyKHIpLCBjID0gUHIub2UociwgdGhpcy5JdCwgdSwgaS5yZWZlcmVuY2VEZWxlZ2F0ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYcihzLCBjLCBvLCB1KS5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyhuZXcgeGkoZSwgT3QuYXQpLCB0KS5uZXh0KCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvKHQpIHtcbiAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwidGFyZ2V0RG9jdW1lbnRzXCIsIHtcbiAgICAgICAga2V5UGF0aDogZ2lcbiAgICB9KS5jcmVhdGVJbmRleChcImRvY3VtZW50VGFyZ2V0c0luZGV4XCIsIHlpLCB7XG4gICAgICAgIHVuaXF1ZTogITBcbiAgICB9KTtcbiAgICAvLyBOT1RFOiBUaGlzIGlzIHVuaXF1ZSBvbmx5IGJlY2F1c2UgdGhlIFRhcmdldElkIGlzIHRoZSBzdWZmaXguXG4gICAgdC5jcmVhdGVPYmplY3RTdG9yZShcInRhcmdldHNcIiwge1xuICAgICAgICBrZXlQYXRoOiBcInRhcmdldElkXCJcbiAgICB9KS5jcmVhdGVJbmRleChcInF1ZXJ5VGFyZ2V0c0luZGV4XCIsIG1pLCB7XG4gICAgICAgIHVuaXF1ZTogITBcbiAgICB9KSwgdC5jcmVhdGVPYmplY3RTdG9yZShcInRhcmdldEdsb2JhbFwiKTtcbn1cblxuY29uc3QgZm8gPSBcIkZhaWxlZCB0byBvYnRhaW4gZXhjbHVzaXZlIGFjY2VzcyB0byB0aGUgcGVyc2lzdGVuY2UgbGF5ZXIuIFRvIGFsbG93IHNoYXJlZCBhY2Nlc3MsIG11bHRpLXRhYiBzeW5jaHJvbml6YXRpb24gaGFzIHRvIGJlIGVuYWJsZWQgaW4gYWxsIHRhYnMuIElmIHlvdSBhcmUgdXNpbmcgYGV4cGVyaW1lbnRhbEZvcmNlT3duaW5nVGFiOnRydWVgLCBtYWtlIHN1cmUgdGhhdCBvbmx5IG9uZSB0YWIgaGFzIHBlcnNpc3RlbmNlIGVuYWJsZWQgYXQgYW55IGdpdmVuIHRpbWUuXCI7XG5cbi8qKlxuICogT2xkZXN0IGFjY2VwdGFibGUgYWdlIGluIG1pbGxpc2Vjb25kcyBmb3IgY2xpZW50IG1ldGFkYXRhIGJlZm9yZSB0aGUgY2xpZW50XG4gKiBpcyBjb25zaWRlcmVkIGluYWN0aXZlIGFuZCBpdHMgYXNzb2NpYXRlZCBkYXRhIGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuICovXG4vKipcbiAqIEFuIEluZGV4ZWREQi1iYWNrZWQgaW5zdGFuY2Ugb2YgUGVyc2lzdGVuY2UuIERhdGEgaXMgc3RvcmVkIHBlcnNpc3RlbnRseVxuICogYWNyb3NzIHNlc3Npb25zLlxuICpcbiAqIE9uIFdlYiBvbmx5LCB0aGUgRmlyZXN0b3JlIFNES3Mgc3VwcG9ydCBzaGFyZWQgYWNjZXNzIHRvIGl0cyBwZXJzaXN0ZW5jZVxuICogbGF5ZXIuIFRoaXMgYWxsb3dzIG11bHRpcGxlIGJyb3dzZXIgdGFicyB0byByZWFkIGFuZCB3cml0ZSB0byBJbmRleGVkRGIgYW5kXG4gKiB0byBzeW5jaHJvbml6ZSBzdGF0ZSBldmVuIHdpdGhvdXQgbmV0d29yayBjb25uZWN0aXZpdHkuIFNoYXJlZCBhY2Nlc3MgaXNcbiAqIGN1cnJlbnRseSBvcHRpb25hbCBhbmQgbm90IGVuYWJsZWQgdW5sZXNzIGFsbCBjbGllbnRzIGludm9rZVxuICogYGVuYWJsZVBlcnNpc3RlbmNlKClgIHdpdGggYHtzeW5jaHJvbml6ZVRhYnM6dHJ1ZX1gLlxuICpcbiAqIEluIG11bHRpLXRhYiBtb2RlLCBpZiBtdWx0aXBsZSBjbGllbnRzIGFyZSBhY3RpdmUgYXQgdGhlIHNhbWUgdGltZSwgdGhlIFNES1xuICogd2lsbCBkZXNpZ25hdGUgb25lIGNsaWVudCBhcyB0aGUg4oCccHJpbWFyeSBjbGllbnTigJ0uIEFuIGVmZm9ydCBpcyBtYWRlIHRvIHBpY2tcbiAqIGEgdmlzaWJsZSwgbmV0d29yay1jb25uZWN0ZWQgYW5kIGFjdGl2ZSBjbGllbnQsIGFuZCB0aGlzIGNsaWVudCBpc1xuICogcmVzcG9uc2libGUgZm9yIGxldHRpbmcgb3RoZXIgY2xpZW50cyBrbm93IGFib3V0IGl0cyBwcmVzZW5jZS4gVGhlIHByaW1hcnlcbiAqIGNsaWVudCB3cml0ZXMgYSB1bmlxdWUgY2xpZW50LWdlbmVyYXRlZCBpZGVudGlmaWVyICh0aGUgY2xpZW50IElEKSB0b1xuICogSW5kZXhlZERi4oCZcyDigJxvd25lcuKAnSBzdG9yZSBldmVyeSA0IHNlY29uZHMuIElmIHRoZSBwcmltYXJ5IGNsaWVudCBmYWlscyB0b1xuICogdXBkYXRlIHRoaXMgZW50cnksIGFub3RoZXIgY2xpZW50IGNhbiBhY3F1aXJlIHRoZSBsZWFzZSBhbmQgdGFrZSBvdmVyIGFzXG4gKiBwcmltYXJ5LlxuICpcbiAqIFNvbWUgcGVyc2lzdGVuY2Ugb3BlcmF0aW9ucyBpbiB0aGUgU0RLIGFyZSBkZXNpZ25hdGVkIGFzIHByaW1hcnktY2xpZW50IG9ubHlcbiAqIG9wZXJhdGlvbnMuIFRoaXMgaW5jbHVkZXMgdGhlIGFja25vd2xlZGdtZW50IG9mIG11dGF0aW9ucyBhbmQgYWxsIHVwZGF0ZXMgb2ZcbiAqIHJlbW90ZSBkb2N1bWVudHMuIFRoZSBlZmZlY3RzIG9mIHRoZXNlIG9wZXJhdGlvbnMgYXJlIHdyaXR0ZW4gdG8gcGVyc2lzdGVuY2VcbiAqIGFuZCB0aGVuIGJyb2FkY2FzdCB0byBvdGhlciB0YWJzIHZpYSBMb2NhbFN0b3JhZ2UgKHNlZVxuICogYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWApLCB3aGljaCB0aGVuIHJlZnJlc2ggdGhlaXIgc3RhdGUgZnJvbVxuICogcGVyc2lzdGVuY2UuXG4gKlxuICogU2ltaWxhcmx5LCB0aGUgcHJpbWFyeSBjbGllbnQgbGlzdGVucyB0byBub3RpZmljYXRpb25zIHNlbnQgYnkgc2Vjb25kYXJ5XG4gKiBjbGllbnRzIHRvIGRpc2NvdmVyIHBlcnNpc3RlbmNlIGNoYW5nZXMgd3JpdHRlbiBieSBzZWNvbmRhcnkgY2xpZW50cywgc3VjaCBhc1xuICogdGhlIGFkZGl0aW9uIG9mIG5ldyBtdXRhdGlvbnMgYW5kIHF1ZXJ5IHRhcmdldHMuXG4gKlxuICogSWYgbXVsdGktdGFiIGlzIG5vdCBlbmFibGVkIGFuZCBhbm90aGVyIHRhYiBhbHJlYWR5IG9idGFpbmVkIHRoZSBwcmltYXJ5XG4gKiBsZWFzZSwgSW5kZXhlZERiUGVyc2lzdGVuY2UgZW50ZXJzIGEgZmFpbGVkIHN0YXRlIGFuZCBhbGwgc3Vic2VxdWVudFxuICogb3BlcmF0aW9ucyB3aWxsIGF1dG9tYXRpY2FsbHkgZmFpbC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIHRoZXJlIGlzIGFuIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gYSB0YWIgaXMgY2xvc2VkLCB0aGVcbiAqIHByaW1hcnkgbGVhc2UgaXMgcmVsZWFzZWQgaW1tZWRpYXRlbHkgKHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgdG8gbWFrZVxuICogc3VyZSB0aGF0IGEgcmVmcmVzaGVkIHRhYiBpcyBhYmxlIHRvIGltbWVkaWF0ZWx5IHJlLWFjcXVpcmUgdGhlIHByaW1hcnlcbiAqIGxlYXNlKS4gVW5mb3J0dW5hdGVseSwgSW5kZXhlZERCIGNhbm5vdCBiZSByZWxpYWJseSB1c2VkIGluIHdpbmRvdy51bmxvYWRcbiAqIHNpbmNlIGl0IGlzIGFuIGFzeW5jaHJvbm91cyBBUEkuIFNvIGluIGFkZGl0aW9uIHRvIGF0dGVtcHRpbmcgdG8gZ2l2ZSB1cCB0aGVcbiAqIGxlYXNlLCB0aGUgbGVhc2Vob2xkZXIgd3JpdGVzIGl0cyBjbGllbnQgSUQgdG8gYSBcInpvbWJpZWRDbGllbnRcIiBlbnRyeSBpblxuICogTG9jYWxTdG9yYWdlIHdoaWNoIGFjdHMgYXMgYW4gaW5kaWNhdG9yIHRoYXQgYW5vdGhlciB0YWIgc2hvdWxkIGdvIGFoZWFkIGFuZFxuICogdGFrZSB0aGUgcHJpbWFyeSBsZWFzZSBpbW1lZGlhdGVseSByZWdhcmRsZXNzIG9mIHRoZSBjdXJyZW50IGxlYXNlIHRpbWVzdGFtcC5cbiAqXG4gKiBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIGBzeW5jaHJvbml6ZVRhYnNgIHNlY3Rpb24gd2hlbiBtdWx0aS10YWIgaXMgbm9cbiAqIGxvbmdlciBvcHRpb25hbC5cbiAqL1xuY2xhc3MgX28ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gc3luY2hyb25pemUgdGhlIGluLW1lbW9yeSBzdGF0ZSBvZiBtdWx0aXBsZSB0YWJzIGFuZCBzaGFyZVxuICAgICAqIGFjY2VzcyB0byBsb2NhbCBwZXJzaXN0ZW5jZS5cbiAgICAgKi9cbiAgICB0LCBlLCBuLCBzLCBpLCByLCBvLCB1LCBjLCBcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgZm9yY2VmdWxseSBvYnRhaW5zIGRhdGFiYXNlIGFjY2Vzcy4gRXhpc3RpbmcgdGFicyB3aWxsXG4gICAgICogbm8gbG9uZ2VyIGJlIGFibGUgdG8gYWNjZXNzIEluZGV4ZWREQi5cbiAgICAgKi9cbiAgICBhLCBoID0gMTUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gPSB0LCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gZSwgdGhpcy5jbGllbnRJZCA9IG4sIFxuICAgICAgICB0aGlzLkhzID0gaSwgdGhpcy53aW5kb3cgPSByLCB0aGlzLmRvY3VtZW50ID0gbywgdGhpcy5KcyA9IGMsIHRoaXMuWXMgPSBhLCB0aGlzLlhzID0gaCwgXG4gICAgICAgIHRoaXMuU3MgPSBudWxsLCB0aGlzLkRzID0gITEsIHRoaXMuaXNQcmltYXJ5ID0gITEsIHRoaXMubmV0d29ya0VuYWJsZWQgPSAhMCwgXG4gICAgICAgIC8qKiBPdXIgd2luZG93LnVubG9hZCBoYW5kbGVyLCBpZiByZWdpc3RlcmVkLiAqL1xuICAgICAgICB0aGlzLlpzID0gbnVsbCwgdGhpcy5pbkZvcmVncm91bmQgPSAhMSwgXG4gICAgICAgIC8qKiBPdXIgJ3Zpc2liaWxpdHljaGFuZ2UnIGxpc3RlbmVyIGlmIHJlZ2lzdGVyZWQuICovXG4gICAgICAgIHRoaXMudGkgPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBjbGllbnQgbWV0YWRhdGEgcmVmcmVzaCB0YXNrLiAqL1xuICAgICAgICB0aGlzLmVpID0gbnVsbCwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCB0aW1lIHdlIGdhcmJhZ2UgY29sbGVjdGVkIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLiAqL1xuICAgICAgICB0aGlzLm5pID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBcbiAgICAgICAgLyoqIEEgbGlzdGVuZXIgdG8gbm90aWZ5IG9uIHByaW1hcnkgc3RhdGUgY2hhbmdlcy4gKi9cbiAgICAgICAgdGhpcy5zaSA9IHQgPT4gUHJvbWlzZS5yZXNvbHZlKCksICFfby5DKCkpIHRocm93IG5ldyBMKEIuVU5JTVBMRU1FTlRFRCwgXCJUaGlzIHBsYXRmb3JtIGlzIGVpdGhlciBtaXNzaW5nIEluZGV4ZWREQiBvciBpcyBrbm93biB0byBoYXZlIGFuIGluY29tcGxldGUgaW1wbGVtZW50YXRpb24uIE9mZmxpbmUgcGVyc2lzdGVuY2UgaGFzIGJlZW4gZGlzYWJsZWQuXCIpO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gbmV3IExyKHRoaXMsIHMpLCB0aGlzLmlpID0gZSArIFwibWFpblwiLCB0aGlzLkl0ID0gbmV3ICRpKHUpLCBcbiAgICAgICAgdGhpcy5yaSA9IG5ldyBidCh0aGlzLmlpLCB0aGlzLlhzLCBuZXcgaG8odGhpcy5JdCkpLCB0aGlzLkNzID0gbmV3IHhyKHRoaXMucmVmZXJlbmNlRGVsZWdhdGUsIHRoaXMuSXQpLCBcbiAgICAgICAgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlID0gR3IodGhpcy5JdCksIHRoaXMuTnMgPSBuZXcgWWksIHRoaXMud2luZG93ICYmIHRoaXMud2luZG93LmxvY2FsU3RvcmFnZSA/IHRoaXMub2kgPSB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UgOiAodGhpcy5vaSA9IG51bGwsIFxuICAgICAgICAhMSA9PT0gYSAmJiB4KFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJMb2NhbFN0b3JhZ2UgaXMgdW5hdmFpbGFibGUuIEFzIGEgcmVzdWx0LCBwZXJzaXN0ZW5jZSBtYXkgbm90IHdvcmsgcmVsaWFibHkuIEluIHBhcnRpY3VsYXIgZW5hYmxlUGVyc2lzdGVuY2UoKSBjb3VsZCBmYWlsIGltbWVkaWF0ZWx5IGFmdGVyIHJlZnJlc2hpbmcgdGhlIHBhZ2UuXCIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCB0byBzdGFydCBJbmRleGVkRGIgcGVyc2lzdGVuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHBlcnNpc3RlbmNlIHdhcyBlbmFibGVkLlxuICAgICAqLyAgICBzdGFydCgpIHtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBleHBlY3RlZCB0byBmYWlsIHNvbWV0aW1lcyAoaW4gdGhlIGNhc2Ugb2YgYW5vdGhlciB0YWJcbiAgICAgICAgLy8gYWxyZWFkeSBoYXZpbmcgdGhlIHBlcnNpc3RlbmNlIGxvY2spLCBzbyBpdCdzIHRoZSBmaXJzdCB0aGluZyB3ZSBzaG91bGRcbiAgICAgICAgLy8gZG8uXG4gICAgICAgIHJldHVybiB0aGlzLnVpKCkudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJpbWFyeSAmJiAhdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikgXG4gICAgICAgICAgICAvLyBGYWlsIGBzdGFydCgpYCBpZiBgc3luY2hyb25pemVUYWJzYCBpcyBkaXNhYmxlZCBhbmQgd2UgY2Fubm90XG4gICAgICAgICAgICAvLyBvYnRhaW4gdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICAgICAgICB0aHJvdyBuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIGZvKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNpKCksIHRoaXMuYWkoKSwgdGhpcy5oaSgpLCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gdGhpcy5Dcy5nZXRIaWdoZXN0U2VxdWVuY2VOdW1iZXIodCkpKTtcbiAgICAgICAgfSkpLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5TcyA9IG5ldyBPdCh0LCB0aGlzLkpzKTtcbiAgICAgICAgfSkpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuRHMgPSAhMDtcbiAgICAgICAgfSkpLmNhdGNoKCh0ID0+ICh0aGlzLnJpICYmIHRoaXMucmkuY2xvc2UoKSwgUHJvbWlzZS5yZWplY3QodCkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGxpc3RlbmVyIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgcHJpbWFyeSBzdGF0ZSBvZiB0aGVcbiAgICAgKiBpbnN0YW5jZSBjaGFuZ2VzLiBVcG9uIHJlZ2lzdGVyaW5nLCB0aGlzIGxpc3RlbmVyIGlzIGludm9rZWQgaW1tZWRpYXRlbHlcbiAgICAgKiB3aXRoIHRoZSBjdXJyZW50IHByaW1hcnkgc3RhdGUuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqLyAgICBsaSh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpID0gYXN5bmMgZSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydGVkKSByZXR1cm4gdChlKTtcbiAgICAgICAgfSwgdCh0aGlzLmlzUHJpbWFyeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGxpc3RlbmVyIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgZGF0YWJhc2UgcmVjZWl2ZXMgYVxuICAgICAqIHZlcnNpb24gY2hhbmdlIGV2ZW50IGluZGljYXRpbmcgdGhhdCBpdCBoYXMgZGVsZXRlZC5cbiAgICAgKlxuICAgICAqIFBPUlRJTkcgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIFdlYiBtdWx0aS10YWIuXG4gICAgICovICAgIHNldERhdGFiYXNlRGVsZXRlZExpc3RlbmVyKHQpIHtcbiAgICAgICAgdGhpcy5yaS5MKChhc3luYyBlID0+IHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBkZWxldGUgSW5kZXhlZERCLlxuICAgICAgICAgICAgbnVsbCA9PT0gZS5uZXdWZXJzaW9uICYmIGF3YWl0IHQoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGp1c3RzIHRoZSBjdXJyZW50IG5ldHdvcmsgc3RhdGUgaW4gdGhlIGNsaWVudCdzIG1ldGFkYXRhLCBwb3RlbnRpYWxseVxuICAgICAqIGFmZmVjdGluZyB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgKlxuICAgICAqIFBPUlRJTkcgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIFdlYiBtdWx0aS10YWIuXG4gICAgICovICAgIHNldE5ldHdvcmtFbmFibGVkKHQpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrRW5hYmxlZCAhPT0gdCAmJiAodGhpcy5uZXR3b3JrRW5hYmxlZCA9IHQsIFxuICAgICAgICAvLyBTY2hlZHVsZSBhIHByaW1hcnkgbGVhc2UgcmVmcmVzaCBmb3IgaW1tZWRpYXRlIGV4ZWN1dGlvbi4gVGhlIGV2ZW50dWFsXG4gICAgICAgIC8vIGxlYXNlIHVwZGF0ZSB3aWxsIGJlIHByb3BhZ2F0ZWQgdmlhIGBwcmltYXJ5U3RhdGVMaXN0ZW5lcmAuXG4gICAgICAgIHRoaXMuSHMuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkICYmIGF3YWl0IHRoaXMudWkoKTtcbiAgICAgICAgfSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY2xpZW50IG1ldGFkYXRhIGluIEluZGV4ZWREYiBhbmQgYXR0ZW1wdHMgdG8gZWl0aGVyIG9idGFpbiBvclxuICAgICAqIGV4dGVuZCB0aGUgcHJpbWFyeSBsZWFzZSBmb3IgdGhlIGxvY2FsIGNsaWVudC4gQXN5bmNocm9ub3VzbHkgbm90aWZpZXMgdGhlXG4gICAgICogcHJpbWFyeSBzdGF0ZSBsaXN0ZW5lciBpZiB0aGUgY2xpZW50IGVpdGhlciBuZXdseSBvYnRhaW5lZCBvciByZWxlYXNlZCBpdHNcbiAgICAgKiBwcmltYXJ5IGxlYXNlLlxuICAgICAqLyAgICB1aSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVuVHJhbnNhY3Rpb24oXCJ1cGRhdGVDbGllbnRNZXRhZGF0YUFuZFRyeUJlY29tZVByaW1hcnlcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4gbW8odCkucHV0KHtcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgbmV0d29ya0VuYWJsZWQ6IHRoaXMubmV0d29ya0VuYWJsZWQsXG4gICAgICAgICAgICBpbkZvcmVncm91bmQ6IHRoaXMuaW5Gb3JlZ3JvdW5kXG4gICAgICAgIH0pLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJpbWFyeSkgcmV0dXJuIHRoaXMuZmkodCkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdCB8fCAodGhpcy5pc1ByaW1hcnkgPSAhMSwgdGhpcy5Icy5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiB0aGlzLnNpKCExKSkpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHRoaXMuZGkodCkpKS5uZXh0KChlID0+IHRoaXMuaXNQcmltYXJ5ICYmICFlID8gdGhpcy5faSh0KS5uZXh0KCgoKSA9PiAhMSkpIDogISFlICYmIHRoaXMud2kodCkubmV4dCgoKCkgPT4gITApKSkpKSkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgaWYgKFZ0KHQpKSBcbiAgICAgICAgICAgIC8vIFByb2NlZWQgd2l0aCB0aGUgZXhpc3Rpbmcgc3RhdGUuIEFueSBzdWJzZXF1ZW50IGFjY2VzcyB0b1xuICAgICAgICAgICAgLy8gSW5kZXhlZERCIHdpbGwgdmVyaWZ5IHRoZSBsZWFzZS5cbiAgICAgICAgICAgIHJldHVybiBDKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJGYWlsZWQgdG8gZXh0ZW5kIG93bmVyIGxlYXNlOiBcIiwgdCksIHRoaXMuaXNQcmltYXJ5O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uKSB0aHJvdyB0O1xuICAgICAgICAgICAgcmV0dXJuIEMoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBvd25lciBsZWFzZSBhZnRlciBlcnJvciBkdXJpbmcgbGVhc2UgcmVmcmVzaFwiLCB0KSwgXG4gICAgICAgICAgICAvKiBpc1ByaW1hcnk9ICovICExO1xuICAgICAgICB9KSkudGhlbigodCA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzUHJpbWFyeSAhPT0gdCAmJiB0aGlzLkhzLmVucXVldWVSZXRyeWFibGUoKCgpID0+IHRoaXMuc2kodCkpKSwgdGhpcy5pc1ByaW1hcnkgPSB0O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGZpKHQpIHtcbiAgICAgICAgcmV0dXJuIHdvKHQpLmdldChcIm93bmVyXCIpLm5leHQoKHQgPT4gQXQucmVzb2x2ZSh0aGlzLm1pKHQpKSkpO1xuICAgIH1cbiAgICBnaSh0KSB7XG4gICAgICAgIHJldHVybiBtbyh0KS5kZWxldGUodGhpcy5jbGllbnRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGhyZXNob2xkIGhhcyBwYXNzZWQsIHBydW5lcyB0aGVcbiAgICAgKiBSZW1vdGVEb2N1bWVudENoYW5nZXMgYW5kIHRoZSBDbGllbnRNZXRhZGF0YSBzdG9yZSBiYXNlZCBvbiB0aGUgbGFzdCB1cGRhdGVcbiAgICAgKiB0aW1lIG9mIGFsbCBjbGllbnRzLlxuICAgICAqLyAgICBhc3luYyB5aSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQcmltYXJ5ICYmICF0aGlzLnBpKHRoaXMubmksIDE4ZTUpKSB7XG4gICAgICAgICAgICB0aGlzLm5pID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBhd2FpdCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwibWF5YmVHYXJiYWdlQ29sbGVjdE11bHRpQ2xpZW50U3RhdGVcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAodCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IE5pKHQsIFwiY2xpZW50TWV0YWRhdGFcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuVygpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5JaSh0LCAxOGU1KSwgcyA9IHQuZmlsdGVyKCh0ID0+IC0xID09PSBuLmluZGV4T2YodCkpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIG1ldGFkYXRhIGZvciBjbGllbnRzIHRoYXQgYXJlIG5vIGxvbmdlciBjb25zaWRlcmVkIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEF0LmZvckVhY2gocywgKHQgPT4gZS5kZWxldGUodC5jbGllbnRJZCkpKS5uZXh0KCgoKSA9PiBzKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLmNhdGNoKCgoKSA9PiBbXSkpO1xuICAgICAgICAgICAgLy8gRGVsZXRlIHBvdGVudGlhbCBsZWZ0b3ZlciBlbnRyaWVzIHRoYXQgbWF5IGNvbnRpbnVlIHRvIG1hcmsgdGhlXG4gICAgICAgICAgICAvLyBpbmFjdGl2ZSBjbGllbnRzIGFzIHpvbWJpZWQgaW4gTG9jYWxTdG9yYWdlLlxuICAgICAgICAgICAgLy8gSWRlYWxseSB3ZSdkIGRlbGV0ZSB0aGUgSW5kZXhlZERiIGFuZCBMb2NhbFN0b3JhZ2Ugem9tYmllIGVudHJpZXMgZm9yXG4gICAgICAgICAgICAvLyB0aGUgY2xpZW50IGF0b21pY2FsbHksIGJ1dCB3ZSBjYW4ndC4gU28gd2Ugb3B0IHRvIGRlbGV0ZSB0aGUgSW5kZXhlZERiXG4gICAgICAgICAgICAvLyBlbnRyaWVzIGZpcnN0IHRvIGF2b2lkIHBvdGVudGlhbGx5IHJldml2aW5nIGEgem9tYmllZCBjbGllbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vaSkgZm9yIChjb25zdCBlIG9mIHQpIHRoaXMub2kucmVtb3ZlSXRlbSh0aGlzLlRpKGUuY2xpZW50SWQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYSByZWN1cnJpbmcgdGltZXIgdG8gdXBkYXRlIHRoZSBjbGllbnQgbWV0YWRhdGEgYW5kIHRvIGVpdGhlclxuICAgICAqIGV4dGVuZCBvciBhY3F1aXJlIHRoZSBwcmltYXJ5IGxlYXNlIGlmIHRoZSBjbGllbnQgaXMgZWxpZ2libGUuXG4gICAgICovICAgIGhpKCkge1xuICAgICAgICB0aGlzLmVpID0gdGhpcy5Icy5lbnF1ZXVlQWZ0ZXJEZWxheShcImNsaWVudF9tZXRhZGF0YV9yZWZyZXNoXCIgLyogQ2xpZW50TWV0YWRhdGFSZWZyZXNoICovICwgNGUzLCAoKCkgPT4gdGhpcy51aSgpLnRoZW4oKCgpID0+IHRoaXMueWkoKSkpLnRoZW4oKCgpID0+IHRoaXMuaGkoKSkpKSk7XG4gICAgfVxuICAgIC8qKiBDaGVja3Mgd2hldGhlciBgY2xpZW50YCBpcyB0aGUgbG9jYWwgY2xpZW50LiAqLyAgICBtaSh0KSB7XG4gICAgICAgIHJldHVybiAhIXQgJiYgdC5vd25lcklkID09PSB0aGlzLmNsaWVudElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZSB0aGUgc3RhdGUgb2YgYWxsIGFjdGl2ZSBjbGllbnRzIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGUgbG9jYWxcbiAgICAgKiBjbGllbnQgaXMgb3IgY2FuIGFjdCBhcyB0aGUgaG9sZGVyIG9mIHRoZSBwcmltYXJ5IGxlYXNlLiBSZXR1cm5zIHdoZXRoZXJcbiAgICAgKiB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGUgbGVhc2UsIGJ1dCBkb2VzIG5vdCBhY3R1YWxseSBhY3F1aXJlIGl0LlxuICAgICAqIE1heSByZXR1cm4gJ2ZhbHNlJyBldmVuIGlmIHRoZXJlIGlzIG5vIGFjdGl2ZSBsZWFzZWhvbGRlciBhbmQgYW5vdGhlclxuICAgICAqIChmb3JlZ3JvdW5kKSBjbGllbnQgc2hvdWxkIGJlY29tZSBsZWFzZWhvbGRlciBpbnN0ZWFkLlxuICAgICAqLyAgICBkaSh0KSB7XG4gICAgICAgIGlmICh0aGlzLllzKSByZXR1cm4gQXQucmVzb2x2ZSghMCk7XG4gICAgICAgIHJldHVybiB3byh0KS5nZXQoXCJvd25lclwiKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIC8vIEEgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGUgcHJpbWFyeSBsZWFzZSBpZjpcbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgdGhlIGNsaWVudCdzIHRhYiBpcyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxuICAgICAgICAgICAgLy8gICBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSBldmVyeSBjbGllbnRzIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIHRoZSBjbGllbnQncyB0YWIgaXMgaW4gdGhlXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXG4gICAgICAgICAgICAvLyAtIGV2ZXJ5IGNsaWVudHMgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluXG4gICAgICAgICAgICAvLyAgIHRoZSBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSB0aGUgYGZvcmNlT3duaW5nVGFiYCBzZXR0aW5nIHdhcyBwYXNzZWQgaW4uXG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZSAmJiB0aGlzLnBpKGUubGVhc2VUaW1lc3RhbXBNcywgNWUzKSAmJiAhdGhpcy5FaShlLm93bmVySWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWkoZSkgJiYgdGhpcy5uZXR3b3JrRW5hYmxlZCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5taShlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsIHRoZSBgY2FuQWN0QXNQcmltYXJ5YCBjaGVjayBpZiB0aGUgY3VycmVudCBsZWFzZWhvbGRlciBoYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IG9wdGVkIGludG8gbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi4gSWYgdGhpcyBoYXBwZW5zIGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudCBzdGFydHVwLCB3ZSByZWplY3QgdGhlIFByb21pc2UgcmV0dXJuZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgLy8gYGVuYWJsZVBlcnNpc3RlbmNlKClgIGFuZCB0aGUgdXNlciBjYW4gY29udGludWUgdG8gdXNlIEZpcmVzdG9yZVxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGluLW1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscyBkdXJpbmcgYSBsZWFzZSByZWZyZXNoLCB3ZSB3aWxsIGluc3RlYWQgYmxvY2sgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgZnJvbSBleGVjdXRpbmcgZnVydGhlciBvcGVyYXRpb25zLiBOb3RlIHRoYXQgdGhpcyBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBhY2NlcHRhYmxlIHNpbmNlIG1peGluZyAmIG1hdGNoaW5nIGRpZmZlcmVudCBgc3luY2hyb25pemVUYWJzYFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR0aW5ncyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIGJlIHR1cm5lZCBvZmYuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBMKEIuRkFJTEVEX1BSRUNPTkRJVElPTiwgZm8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEoIXRoaXMubmV0d29ya0VuYWJsZWQgfHwgIXRoaXMuaW5Gb3JlZ3JvdW5kKSB8fCBtbyh0KS5XKCkubmV4dCgodCA9PiB2b2lkIDAgPT09IHRoaXMuSWkodCwgNWUzKS5maW5kKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGllbnRJZCAhPT0gdC5jbGllbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gIXRoaXMubmV0d29ya0VuYWJsZWQgJiYgdC5uZXR3b3JrRW5hYmxlZCwgbiA9ICF0aGlzLmluRm9yZWdyb3VuZCAmJiB0LmluRm9yZWdyb3VuZCwgcyA9IHRoaXMubmV0d29ya0VuYWJsZWQgPT09IHQubmV0d29ya0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlIHx8IG4gJiYgcykgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgfSkpLm5leHQoKHQgPT4gKHRoaXMuaXNQcmltYXJ5ICE9PSB0ICYmIEMoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBgQ2xpZW50ICR7dCA/IFwiaXNcIiA6IFwiaXMgbm90XCJ9IGVsaWdpYmxlIGZvciBhIHByaW1hcnkgbGVhc2UuYCksIFxuICAgICAgICB0KSkpO1xuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICAgICAgLy8gVGhlIHNodXRkb3duKCkgb3BlcmF0aW9ucyBhcmUgaWRlbXBvdGVudCBhbmQgY2FuIGJlIGNhbGxlZCBldmVuIHdoZW5cbiAgICAgICAgLy8gc3RhcnQoKSBhYm9ydGVkIChlLmcuIGJlY2F1c2UgaXQgY291bGRuJ3QgYWNxdWlyZSB0aGUgcGVyc2lzdGVuY2UgbGVhc2UpLlxuICAgICAgICB0aGlzLkRzID0gITEsIHRoaXMuQWkoKSwgdGhpcy5laSAmJiAodGhpcy5laS5jYW5jZWwoKSwgdGhpcy5laSA9IG51bGwpLCB0aGlzLlJpKCksIFxuICAgICAgICB0aGlzLmJpKCksIFxuICAgICAgICAvLyBVc2UgYFNpbXBsZURiLnJ1blRyYW5zYWN0aW9uYCBkaXJlY3RseSB0byBhdm9pZCBmYWlsaW5nIGlmIGFub3RoZXIgdGFiXG4gICAgICAgIC8vIGhhcyBvYnRhaW5lZCB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgICAgYXdhaXQgdGhpcy5yaS5ydW5UcmFuc2FjdGlvbihcInNodXRkb3duXCIsIFwicmVhZHdyaXRlXCIsIFsgXCJvd25lclwiLCBcImNsaWVudE1ldGFkYXRhXCIgXSwgKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyB4aSh0LCBPdC5hdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faShlKS5uZXh0KCgoKSA9PiB0aGlzLmdpKGUpKSk7XG4gICAgICAgIH0pKSwgdGhpcy5yaS5jbG9zZSgpLCBcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbnRyeSBtYXJraW5nIHRoZSBjbGllbnQgYXMgem9tYmllZCBmcm9tIExvY2FsU3RvcmFnZSBzaW5jZVxuICAgICAgICAvLyB3ZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCBpdHMgbWV0YWRhdGEgZnJvbSBJbmRleGVkRGIuXG4gICAgICAgIHRoaXMuUGkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjbGllbnRzIHRoYXQgYXJlIG5vdCB6b21iaWVkIGFuZCBoYXZlIGFuIHVwZGF0ZVRpbWUgd2l0aGluIHRoZVxuICAgICAqIHByb3ZpZGVkIHRocmVzaG9sZC5cbiAgICAgKi8gICAgSWkodCwgZSkge1xuICAgICAgICByZXR1cm4gdC5maWx0ZXIoKHQgPT4gdGhpcy5waSh0LnVwZGF0ZVRpbWVNcywgZSkgJiYgIXRoaXMuRWkodC5jbGllbnRJZCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSURzIG9mIHRoZSBjbGllbnRzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuIElmIG11bHRpLXRhYlxuICAgICAqIGlzIG5vdCBzdXBwb3J0ZWQsIHJldHVybnMgYW4gYXJyYXkgdGhhdCBvbmx5IGNvbnRhaW5zIHRoZSBsb2NhbCBjbGllbnQnc1xuICAgICAqIElELlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi8gICAgdmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0QWN0aXZlQ2xpZW50c1wiLCBcInJlYWRvbmx5XCIsICh0ID0+IG1vKHQpLlcoKS5uZXh0KCh0ID0+IHRoaXMuSWkodCwgMThlNSkubWFwKCh0ID0+IHQuY2xpZW50SWQpKSkpKSk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5EcztcbiAgICB9XG4gICAgZ2V0TXV0YXRpb25RdWV1ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBQci5vZSh0LCB0aGlzLkl0LCBlLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlKTtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkNzO1xuICAgIH1cbiAgICBnZXRSZW1vdGVEb2N1bWVudENhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlO1xuICAgIH1cbiAgICBnZXRJbmRleE1hbmFnZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IG1yKHQsIHRoaXMuSXQucmUuZGF0YWJhc2VJZCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50T3ZlcmxheUNhY2hlKHQpIHtcbiAgICAgICAgcmV0dXJuIHRyLm9lKHRoaXMuSXQsIHQpO1xuICAgIH1cbiAgICBnZXRCdW5kbGVDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnM7XG4gICAgfVxuICAgIHJ1blRyYW5zYWN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgQyhcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiU3RhcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQpO1xuICAgICAgICBjb25zdCBzID0gXCJyZWFkb25seVwiID09PSBlID8gXCJyZWFkb25seVwiIDogXCJyZWFkd3JpdGVcIiwgaSA9IDE1ID09PSAociA9IHRoaXMuWHMpID8gQ2kgOiAxNCA9PT0gciA/IERpIDogMTMgPT09IHIgPyBTaSA6IDEyID09PSByID8gVmkgOiAxMSA9PT0gciA/IHZpIDogdm9pZCBPKCk7XG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBvYmplY3Qgc3RvcmVzIGZvciB0aGUgcHJvdmlkZWQgc2NoZW1hLiAqL1xuICAgICAgICB2YXIgcjtcbiAgICAgICAgbGV0IG87XG4gICAgICAgIC8vIERvIGFsbCB0cmFuc2FjdGlvbnMgYXMgcmVhZHdyaXRlIGFnYWluc3QgYWxsIG9iamVjdCBzdG9yZXMsIHNpbmNlIHdlXG4gICAgICAgIC8vIGFyZSB0aGUgb25seSByZWFkZXIvd3JpdGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJpLnJ1blRyYW5zYWN0aW9uKHQsIHMsIGksIChzID0+IChvID0gbmV3IHhpKHMsIHRoaXMuU3MgPyB0aGlzLlNzLm5leHQoKSA6IE90LmF0KSwgXG4gICAgICAgIFwicmVhZHdyaXRlLXByaW1hcnlcIiA9PT0gZSA/IHRoaXMuZmkobykubmV4dCgodCA9PiAhIXQgfHwgdGhpcy5kaShvKSkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyB4KGBGYWlsZWQgdG8gb2J0YWluIHByaW1hcnkgbGVhc2UgZm9yIGFjdGlvbiAnJHt0fScuYCksIHRoaXMuaXNQcmltYXJ5ID0gITEsIFxuICAgICAgICAgICAgdGhpcy5Icy5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiB0aGlzLnNpKCExKSkpLCBuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIEl0KTtcbiAgICAgICAgICAgIHJldHVybiBuKG8pO1xuICAgICAgICB9KSkubmV4dCgodCA9PiB0aGlzLndpKG8pLm5leHQoKCgpID0+IHQpKSkpIDogdGhpcy5WaShvKS5uZXh0KCgoKSA9PiBuKG8pKSkpKSkudGhlbigodCA9PiAoby5yYWlzZU9uQ29tbWl0dGVkRXZlbnQoKSwgXG4gICAgICAgIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIGN1cnJlbnQgdGFiIGlzIHRoZSBwcmltYXJ5IGxlYXNlaG9sZGVyIG9yIGFsdGVybmF0aXZlbHlcbiAgICAgKiB0aGF0IHRoZSBsZWFzZWhvbGRlciBoYXMgb3B0ZWQgaW50byBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxuICAgICAqL1xuICAgIC8vIFRPRE8oYi8xMTQyMjYyMzQpOiBSZW1vdmUgdGhpcyBjaGVjayB3aGVuIGBzeW5jaHJvbml6ZVRhYnNgIGNhbiBubyBsb25nZXJcbiAgICAvLyBiZSB0dXJuZWQgb2ZmLlxuICAgIFZpKHQpIHtcbiAgICAgICAgcmV0dXJuIHdvKHQpLmdldChcIm93bmVyXCIpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgdGhpcy5waSh0LmxlYXNlVGltZXN0YW1wTXMsIDVlMykgJiYgIXRoaXMuRWkodC5vd25lcklkKSAmJiAhdGhpcy5taSh0KSAmJiAhKHRoaXMuWXMgfHwgdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiAmJiB0LmFsbG93VGFiU3luY2hyb25pemF0aW9uKSkgdGhyb3cgbmV3IEwoQi5GQUlMRURfUFJFQ09ORElUSU9OLCBmbyk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT2J0YWlucyBvciBleHRlbmRzIHRoZSBuZXcgcHJpbWFyeSBsZWFzZSBmb3IgdGhlIGxvY2FsIGNsaWVudC4gVGhpc1xuICAgICAqIG1ldGhvZCBkb2VzIG5vdCB2ZXJpZnkgdGhhdCB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGlzIGxlYXNlLlxuICAgICAqLyAgICB3aSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBvd25lcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgYWxsb3dUYWJTeW5jaHJvbml6YXRpb246IHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24sXG4gICAgICAgICAgICBsZWFzZVRpbWVzdGFtcE1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3byh0KS5wdXQoXCJvd25lclwiLCBlKTtcbiAgICB9XG4gICAgc3RhdGljIEMoKSB7XG4gICAgICAgIHJldHVybiBidC5DKCk7XG4gICAgfVxuICAgIC8qKiBDaGVja3MgdGhlIHByaW1hcnkgbGVhc2UgYW5kIHJlbW92ZXMgaXQgaWYgd2UgYXJlIHRoZSBjdXJyZW50IHByaW1hcnkuICovICAgIF9pKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHdvKHQpO1xuICAgICAgICByZXR1cm4gZS5nZXQoXCJvd25lclwiKS5uZXh0KCh0ID0+IHRoaXMubWkodCkgPyAoQyhcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiUmVsZWFzaW5nIHByaW1hcnkgbGVhc2UuXCIpLCBcbiAgICAgICAgZS5kZWxldGUoXCJvd25lclwiKSkgOiBBdC5yZXNvbHZlKCkpKTtcbiAgICB9XG4gICAgLyoqIFZlcmlmaWVzIHRoYXQgYHVwZGF0ZVRpbWVNc2AgaXMgd2l0aGluIGBtYXhBZ2VNc2AuICovICAgIHBpKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiAhKHQgPCBuIC0gZSkgJiYgKCEodCA+IG4pIHx8ICh4KGBEZXRlY3RlZCBhbiB1cGRhdGUgdGltZSB0aGF0IGlzIGluIHRoZSBmdXR1cmU6ICR7dH0gPiAke259YCksIFxuICAgICAgICAhMSkpO1xuICAgIH1cbiAgICBjaSgpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5kb2N1bWVudCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiAodGhpcy50aSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuSHMuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gKHRoaXMuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlLCBcbiAgICAgICAgICAgIHRoaXMudWkoKSkpKTtcbiAgICAgICAgfSwgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnRpKSwgdGhpcy5pbkZvcmVncm91bmQgPSBcInZpc2libGVcIiA9PT0gdGhpcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICAgIH1cbiAgICBSaSgpIHtcbiAgICAgICAgdGhpcy50aSAmJiAodGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnRpKSwgdGhpcy50aSA9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHdpbmRvdy51bmxvYWQgaGFuZGxlciB0aGF0IHdpbGwgc3luY2hyb25vdXNseSB3cml0ZSBvdXJcbiAgICAgKiBjbGllbnRJZCB0byBhIFwiem9tYmllIGNsaWVudCBpZFwiIGxvY2F0aW9uIGluIExvY2FsU3RvcmFnZS4gVGhpcyBjYW4gYmUgdXNlZFxuICAgICAqIGJ5IHRhYnMgdHJ5aW5nIHRvIGFjcXVpcmUgdGhlIHByaW1hcnkgbGVhc2UgdG8gZGV0ZXJtaW5lIHRoYXQgdGhlIGxlYXNlXG4gICAgICogaXMgbm8gbG9uZ2VyIHZhbGlkIGV2ZW4gaWYgdGhlIHRpbWVzdGFtcCBpcyByZWNlbnQuIFRoaXMgaXMgcGFydGljdWxhcmx5XG4gICAgICogaW1wb3J0YW50IGZvciB0aGUgcmVmcmVzaCBjYXNlIChzbyB0aGUgdGFiIGNvcnJlY3RseSByZS1hY3F1aXJlcyB0aGVcbiAgICAgKiBwcmltYXJ5IGxlYXNlKS4gTG9jYWxTdG9yYWdlIGlzIHVzZWQgZm9yIHRoaXMgcmF0aGVyIHRoYW4gSW5kZXhlZERiIGJlY2F1c2VcbiAgICAgKiBpdCBpcyBhIHN5bmNocm9ub3VzIEFQSSBhbmQgc28gY2FuIGJlIHVzZWQgcmVsaWFibHkgZnJvbSAgYW4gdW5sb2FkXG4gICAgICogaGFuZGxlci5cbiAgICAgKi8gICAgYWkoKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChudWxsID09PSAodCA9IHRoaXMud2luZG93KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmFkZEV2ZW50TGlzdGVuZXIpICYmICh0aGlzLlpzID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gTm90ZTogSW4gdGhlb3J5LCB0aGlzIHNob3VsZCBiZSBzY2hlZHVsZWQgb24gdGhlIEFzeW5jUXVldWUgc2luY2UgaXRcbiAgICAgICAgICAgIC8vIGFjY2Vzc2VzIGludGVybmFsIHN0YXRlLiBXZSBleGVjdXRlIHRoaXMgY29kZSBkaXJlY3RseSBkdXJpbmcgc2h1dGRvd25cbiAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpdCBnZXRzIGEgY2hhbmNlIHRvIHJ1bi5cbiAgICAgICAgICAgIHRoaXMuQWkoKSwgaXNTYWZhcmkoKSAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvVmVyc2lvblxcLzFbNDVdLykgJiYgXG4gICAgICAgICAgICAvLyBPbiBTYWZhcmkgMTQgYW5kIDE1LCB3ZSBkbyBub3QgcnVuIGFueSBjbGVhbnVwIGFjdGlvbnMgYXMgaXQgbWlnaHRcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgYSBidWcgdGhhdCBwcmV2ZW50cyBTYWZhcmkgZnJvbSByZS1vcGVuaW5nIEluZGV4ZWREQiBkdXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhZ2UgbG9hZC5cbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjI2NTQ3XG4gICAgICAgICAgICB0aGlzLkhzLmVudGVyUmVzdHJpY3RlZE1vZGUoLyogcHVyZ2VFeGlzdGluZ1Rhc2tzPSAqLyAhMCksIHRoaXMuSHMuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gdGhpcy5zaHV0ZG93bigpKSk7XG4gICAgICAgIH0sIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCB0aGlzLlpzKSk7XG4gICAgfVxuICAgIGJpKCkge1xuICAgICAgICB0aGlzLlpzICYmICh0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgdGhpcy5acyksIHRoaXMuWnMgPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2xpZW50IGlzIFwiem9tYmllZFwiIGJhc2VkIG9uIGl0cyBMb2NhbFN0b3JhZ2UgZW50cnkuXG4gICAgICogQ2xpZW50cyBiZWNvbWUgem9tYmllZCB3aGVuIHRoZWlyIHRhYiBjbG9zZXMgd2l0aG91dCBydW5uaW5nIGFsbCBvZiB0aGVcbiAgICAgKiBjbGVhbnVwIGxvZ2ljIGluIGBzaHV0ZG93bigpYC5cbiAgICAgKi8gICAgRWkodCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBudWxsICE9PSAobnVsbCA9PT0gKGUgPSB0aGlzLm9pKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmdldEl0ZW0odGhpcy5UaSh0KSkpO1xuICAgICAgICAgICAgcmV0dXJuIEMoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBgQ2xpZW50ICcke3R9JyAke24gPyBcImlzXCIgOiBcImlzIG5vdFwifSB6b21iaWVkIGluIExvY2FsU3RvcmFnZWApLCBcbiAgICAgICAgICAgIG47XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCB3b3JraW5nLlxuICAgICAgICAgICAgcmV0dXJuIHgoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkZhaWxlZCB0byBnZXQgem9tYmllZCBjbGllbnQgaWQuXCIsIHQpLCAhMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgY2xpZW50IGFzIHpvbWJpZWQgKGEgY2xpZW50IHRoYXQgaGFkIGl0cyB0YWIgY2xvc2VkKS4gWm9tYmllZFxuICAgICAqIGNsaWVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHByaW1hcnkgdGFiIHNlbGVjdGlvbi5cbiAgICAgKi8gICAgQWkoKSB7XG4gICAgICAgIGlmICh0aGlzLm9pKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5vaS5zZXRJdGVtKHRoaXMuVGkodGhpcy5jbGllbnRJZCksIFN0cmluZyhEYXRlLm5vdygpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCBhdmFpbGFibGUgLyB3b3JraW5nLlxuICAgICAgICAgICAgeChcIkZhaWxlZCB0byBzZXQgem9tYmllIGNsaWVudCBpZC5cIiwgdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIFJlbW92ZXMgdGhlIHpvbWJpZWQgY2xpZW50IGVudHJ5IGlmIGl0IGV4aXN0cy4gKi8gICAgUGkoKSB7XG4gICAgICAgIGlmICh0aGlzLm9pKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5vaS5yZW1vdmVJdGVtKHRoaXMuVGkodGhpcy5jbGllbnRJZCkpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfVxuICAgIH1cbiAgICBUaSh0KSB7XG4gICAgICAgIHJldHVybiBgZmlyZXN0b3JlX3pvbWJpZV8ke3RoaXMucGVyc2lzdGVuY2VLZXl9XyR7dH1gO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHByaW1hcnkgY2xpZW50IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiB3byh0KSB7XG4gICAgcmV0dXJuIE5pKHQsIFwib3duZXJcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIG1vKHQpIHtcbiAgICByZXR1cm4gTmkodCwgXCJjbGllbnRNZXRhZGF0YVwiKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgdXNlZCBhcyBhIHByZWZpeCB3aGVuIHN0b3JpbmcgZGF0YSBpbiBJbmRleGVkREIgYW5kXG4gKiBMb2NhbFN0b3JhZ2UuXG4gKi8gZnVuY3Rpb24gZ28odCwgZSkge1xuICAgIC8vIFVzZSB0d28gZGlmZmVyZW50IHByZWZpeCBmb3JtYXRzOlxuICAgIC8vICAgKiBmaXJlc3RvcmUgLyBwZXJzaXN0ZW5jZUtleSAvIHByb2plY3RJRCAuIGRhdGFiYXNlSUQgLyAuLi5cbiAgICAvLyAgICogZmlyZXN0b3JlIC8gcGVyc2lzdGVuY2VLZXkgLyBwcm9qZWN0SUQgLyAuLi5cbiAgICAvLyBwcm9qZWN0SURzIGFyZSBETlMtY29tcGF0aWJsZSBuYW1lcyBhbmQgY2Fubm90IGNvbnRhaW4gZG90c1xuICAgIC8vIHNvIHRoZXJlJ3Mgbm8gZGFuZ2VyIG9mIGNvbGxpc2lvbnMuXG4gICAgbGV0IG4gPSB0LnByb2plY3RJZDtcbiAgICByZXR1cm4gdC5pc0RlZmF1bHREYXRhYmFzZSB8fCAobiArPSBcIi5cIiArIHQuZGF0YWJhc2UpLCBcImZpcmVzdG9yZS9cIiArIGUgKyBcIi9cIiArIG4gKyBcIi9cIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBzZXQgb2YgY2hhbmdlcyB0byB3aGF0IGRvY3VtZW50cyBhcmUgY3VycmVudGx5IGluIHZpZXcgYW5kIG91dCBvZiB2aWV3IGZvclxuICogYSBnaXZlbiBxdWVyeS4gVGhlc2UgY2hhbmdlcyBhcmUgc2VudCB0byB0aGUgTG9jYWxTdG9yZSBieSB0aGUgVmlldyAodmlhXG4gKiB0aGUgU3luY0VuZ2luZSkgYW5kIGFyZSB1c2VkIHRvIHBpbiAvIHVucGluIGRvY3VtZW50cyBhcyBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgeW8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuZnJvbUNhY2hlID0gZSwgdGhpcy5TaSA9IG4sIHRoaXMuRGkgPSBzO1xuICAgIH1cbiAgICBzdGF0aWMgQ2kodCwgZSkge1xuICAgICAgICBsZXQgbiA9IGZzKCksIHMgPSBmcygpO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZS5kb2NDaGFuZ2VzKSBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICAgIGNhc2UgMCAvKiBBZGRlZCAqLyA6XG4gICAgICAgICAgICBuID0gbi5hZGQodC5kb2Mua2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgcyA9IHMuYWRkKHQuZG9jLmtleSk7XG4gLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB5byh0LCBlLmZyb21DYWNoZSwgbiwgcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgRmlyZXN0b3JlIHF1ZXJ5IGVuZ2luZS5cbiAqXG4gKiBGaXJlc3RvcmUgcXVlcmllcyBjYW4gYmUgZXhlY3V0ZWQgaW4gdGhyZWUgbW9kZXMuIFRoZSBRdWVyeSBFbmdpbmUgZGV0ZXJtaW5lc1xuICogd2hhdCBtb2RlIHRvIHVzZSBiYXNlZCBvbiB3aGF0IGRhdGEgaXMgcGVyc2lzdGVkLiBUaGUgbW9kZSBvbmx5IGRldGVybWluZXNcbiAqIHRoZSBydW50aW1lIGNvbXBsZXhpdHkgb2YgdGhlIHF1ZXJ5IC0gdGhlIHJlc3VsdCBzZXQgaXMgZXF1aXZhbGVudCBhY3Jvc3MgYWxsXG4gKiBpbXBsZW1lbnRhdGlvbnMuXG4gKlxuICogVGhlIFF1ZXJ5IGVuZ2luZSB3aWxsIHVzZSBpbmRleGVkLWJhc2VkIGV4ZWN1dGlvbiBpZiBhIHVzZXIgaGFzIGNvbmZpZ3VyZWRcbiAqIGFueSBpbmRleCB0aGF0IGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgcXVlcnkgKHZpYSBgc2V0SW5kZXhDb25maWd1cmF0aW9uKClgKS5cbiAqIE90aGVyd2lzZSwgdGhlIGVuZ2luZSB3aWxsIHRyeSB0byBvcHRpbWl6ZSB0aGUgcXVlcnkgYnkgcmUtdXNpbmcgYSBwcmV2aW91c2x5XG4gKiBwZXJzaXN0ZWQgcXVlcnkgcmVzdWx0LiBJZiB0aGF0IGlzIG5vdCBwb3NzaWJsZSwgdGhlIHF1ZXJ5IHdpbGwgYmUgZXhlY3V0ZWRcbiAqIHZpYSBhIGZ1bGwgY29sbGVjdGlvbiBzY2FuLlxuICpcbiAqIEluZGV4LWJhc2VkIGV4ZWN1dGlvbiBpcyB0aGUgZGVmYXVsdCB3aGVuIGF2YWlsYWJsZS4gVGhlIHF1ZXJ5IGVuZ2luZVxuICogc3VwcG9ydHMgcGFydGlhbCBpbmRleGVkIGV4ZWN1dGlvbiBhbmQgbWVyZ2VzIHRoZSByZXN1bHQgZnJvbSB0aGUgaW5kZXhcbiAqIGxvb2t1cCB3aXRoIGRvY3VtZW50cyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIGluZGV4ZWQuIFRoZSBpbmRleCBldmFsdWF0aW9uXG4gKiBtYXRjaGVzIHRoZSBiYWNrZW5kJ3MgZm9ybWF0IGFuZCBhcyBzdWNoLCB0aGUgU0RLIGNhbiB1c2UgaW5kZXhpbmcgZm9yIGFsbFxuICogcXVlcmllcyB0aGF0IHRoZSBiYWNrZW5kIHN1cHBvcnRzLlxuICpcbiAqIElmIG5vIGluZGV4IGV4aXN0cywgdGhlIHF1ZXJ5IGVuZ2luZSB0cmllcyB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgdGFyZ2V0XG4gKiBkb2N1bWVudCBtYXBwaW5nIGluIHRoZSBUYXJnZXRDYWNoZS4gVGhlc2UgbWFwcGluZ3MgZXhpc3RzIGZvciBhbGwgcXVlcmllc1xuICogdGhhdCBoYXZlIGJlZW4gc3luY2VkIHdpdGggdGhlIGJhY2tlbmQgYXQgbGVhc3Qgb25jZSBhbmQgYWxsb3cgdGhlIHF1ZXJ5XG4gKiBlbmdpbmUgdG8gb25seSByZWFkIGRvY3VtZW50cyB0aGF0IHByZXZpb3VzbHkgbWF0Y2hlZCBhIHF1ZXJ5IHBsdXMgYW55XG4gKiBkb2N1bWVudHMgdGhhdCB3ZXJlIGVkaXRlZCBhZnRlciB0aGUgcXVlcnkgd2FzIGxhc3QgbGlzdGVuZWQgdG8uXG4gKlxuICogVGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlbiB0aGlzIG9wdGltaXphdGlvbiBpcyBub3QgZ3VhcmFudGVlZCB0byBwcm9kdWNlXG4gKiB0aGUgc2FtZSByZXN1bHRzIGFzIGZ1bGwgY29sbGVjdGlvbiBzY2Fucy4gSW4gdGhlc2UgY2FzZXMsIHF1ZXJ5XG4gKiBwcm9jZXNzaW5nIGZhbGxzIGJhY2sgdG8gZnVsbCBzY2Fucy4gVGhlc2UgY2FzZXMgYXJlOlxuICpcbiAqIC0gTGltaXQgcXVlcmllcyB3aGVyZSBhIGRvY3VtZW50IHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgcHJldmlvdXNseSBubyBsb25nZXJcbiAqICAgbWF0Y2hlcyB0aGUgcXVlcnkuXG4gKlxuICogLSBMaW1pdCBxdWVyaWVzIHdoZXJlIGEgZG9jdW1lbnQgZWRpdCBtYXkgY2F1c2UgdGhlIGRvY3VtZW50IHRvIHNvcnQgYmVsb3dcbiAqICAgYW5vdGhlciBkb2N1bWVudCB0aGF0IGlzIGluIHRoZSBsb2NhbCBjYWNoZS5cbiAqXG4gKiAtIFF1ZXJpZXMgdGhhdCBoYXZlIG5ldmVyIGJlZW4gQ1VSUkVOVCBvciBmcmVlIG9mIGxpbWJvIGRvY3VtZW50cy5cbiAqLyBjbGFzcyBwbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMueGkgPSAhMTtcbiAgICB9XG4gICAgLyoqIFNldHMgdGhlIGRvY3VtZW50IHZpZXcgdG8gcXVlcnkgYWdhaW5zdC4gKi8gICAgaW5pdGlhbGl6ZSh0LCBlKSB7XG4gICAgICAgIHRoaXMuTmkgPSB0LCB0aGlzLmluZGV4TWFuYWdlciA9IGUsIHRoaXMueGkgPSAhMDtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYWxsIGxvY2FsIGRvY3VtZW50cyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHF1ZXJ5LiAqLyAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4sIHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2kodCwgZSkubmV4dCgoaSA9PiBpIHx8IHRoaXMuT2kodCwgZSwgcywgbikpKS5uZXh0KChuID0+IG4gfHwgdGhpcy5NaSh0LCBlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhbiBpbmRleGVkIHF1ZXJ5IHRoYXQgZXZhbHVhdGVzIHRoZSBxdWVyeSBiYXNlZCBvbiBhIGNvbGxlY3Rpb24nc1xuICAgICAqIHBlcnNpc3RlZCBpbmRleCB2YWx1ZXMuIFJldHVybnMgYG51bGxgIGlmIGFuIGluZGV4IGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICovICAgIGtpKHQsIGUpIHtcbiAgICAgICAgaWYgKG5uKGUpKSBcbiAgICAgICAgLy8gUXVlcmllcyB0aGF0IG1hdGNoIGFsbCBkb2N1bWVudHMgZG9uJ3QgYmVuZWZpdCBmcm9tIHVzaW5nXG4gICAgICAgIC8vIGtleS1iYXNlZCBsb29rdXBzLiBJdCBpcyBtb3JlIGVmZmljaWVudCB0byBzY2FuIGFsbCBkb2N1bWVudHMgaW4gYVxuICAgICAgICAvLyBjb2xsZWN0aW9uLCByYXRoZXIgdGhhbiB0byBwZXJmb3JtIGluZGl2aWR1YWwgbG9va3Vwcy5cbiAgICAgICAgcmV0dXJuIEF0LnJlc29sdmUobnVsbCk7XG4gICAgICAgIGxldCBuID0gY24oZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4TWFuYWdlci5nZXRJbmRleFR5cGUodCwgbikubmV4dCgocyA9PiAwIC8qIE5PTkUgKi8gPT09IHMgPyBudWxsIDogKG51bGwgIT09IGUubGltaXQgJiYgMSAvKiBQQVJUSUFMICovID09PSBzICYmIChcbiAgICAgICAgLy8gV2UgY2Fubm90IGFwcGx5IGEgbGltaXQgZm9yIHRhcmdldHMgdGhhdCBhcmUgc2VydmVkIHVzaW5nIGEgcGFydGlhbFxuICAgICAgICAvLyBpbmRleC4gSWYgYSBwYXJ0aWFsIGluZGV4IHdpbGwgYmUgdXNlZCB0byBzZXJ2ZSB0aGUgdGFyZ2V0LCB0aGVcbiAgICAgICAgLy8gcXVlcnkgbWF5IHJldHVybiBhIHN1cGVyc2V0IG9mIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoZSB0YXJnZXRcbiAgICAgICAgLy8gKGUuZy4gaWYgdGhlIGluZGV4IGRvZXNuJ3QgaW5jbHVkZSBhbGwgdGhlIHRhcmdldCdzIGZpbHRlcnMpLCBvclxuICAgICAgICAvLyBtYXkgcmV0dXJuIHRoZSBjb3JyZWN0IHNldCBvZiBkb2N1bWVudHMgaW4gdGhlIHdyb25nIG9yZGVyIChlLmcuIGlmXG4gICAgICAgIC8vIHRoZSBpbmRleCBkb2Vzbid0IGluY2x1ZGUgYSBzZWdtZW50IGZvciBvbmUgb2YgdGhlIG9yZGVyQnlzKS5cbiAgICAgICAgLy8gVGhlcmVmb3JlLCBhIGxpbWl0IHNob3VsZCBub3QgYmUgYXBwbGllZCBpbiBzdWNoIGNhc2VzLlxuICAgICAgICBlID0gYW4oZSwgbnVsbCwgXCJGXCIgLyogRmlyc3QgKi8pLCBuID0gY24oZSkpLCB0aGlzLmluZGV4TWFuYWdlci5nZXREb2N1bWVudHNNYXRjaGluZ1RhcmdldCh0LCBuKS5uZXh0KChzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBmcyguLi5zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk5pLmdldERvY3VtZW50cyh0LCBpKS5uZXh0KChzID0+IHRoaXMuaW5kZXhNYW5hZ2VyLmdldE1pbk9mZnNldCh0LCBuKS5uZXh0KChuID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5GaShlLCBzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaShlLCByLCBpLCBuLnJlYWRUaW1lKSA/IHRoaXMua2kodCwgYW4oZSwgbnVsbCwgXCJGXCIgLyogRmlyc3QgKi8pKSA6IHRoaXMuQmkodCwgciwgZSwgbik7XG4gICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgfSkpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHF1ZXJ5IGJhc2VkIG9uIHRoZSB0YXJnZXQncyBwZXJzaXN0ZWQgcXVlcnkgbWFwcGluZy4gUmV0dXJuc1xuICAgICAqIGBudWxsYCBpZiB0aGUgbWFwcGluZyBpcyBub3QgYXZhaWxhYmxlIG9yIGNhbm5vdCBiZSB1c2VkLlxuICAgICAqLyAgICBPaSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBubihlKSB8fCBzLmlzRXF1YWwoc3QubWluKCkpID8gdGhpcy5NaSh0LCBlKSA6IHRoaXMuTmkuZ2V0RG9jdW1lbnRzKHQsIG4pLm5leHQoKGkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuRmkoZSwgaSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaShlLCByLCBuLCBzKSA/IHRoaXMuTWkodCwgZSkgOiAoUygpIDw9IExvZ0xldmVsLkRFQlVHICYmIEMoXCJRdWVyeUVuZ2luZVwiLCBcIlJlLXVzaW5nIHByZXZpb3VzIHJlc3VsdCBmcm9tICVzIHRvIGV4ZWN1dGUgcXVlcnk6ICVzXCIsIHMudG9TdHJpbmcoKSwgZm4oZSkpLCBcbiAgICAgICAgICAgIHRoaXMuQmkodCwgciwgZSwgbXQocywgLTEpKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gUXVlcmllcyB0aGF0IGhhdmUgbmV2ZXIgc2VlbiBhIHNuYXBzaG90IHdpdGhvdXQgbGltYm8gZnJlZSBkb2N1bWVudHNcbiAgICAgICAgLy8gc2hvdWxkIGFsc28gYmUgcnVuIGFzIGEgZnVsbCBjb2xsZWN0aW9uIHNjYW4uXG4gICAgICAgIH1cbiAgICAvKiogQXBwbGllcyB0aGUgcXVlcnkgZmlsdGVyIGFuZCBzb3J0aW5nIHRvIHRoZSBwcm92aWRlZCBkb2N1bWVudHMuICAqLyAgICBGaSh0LCBlKSB7XG4gICAgICAgIC8vIFNvcnQgdGhlIGRvY3VtZW50cyBhbmQgcmUtYXBwbHkgdGhlIHF1ZXJ5IGZpbHRlciBzaW5jZSBwcmV2aW91c2x5XG4gICAgICAgIC8vIG1hdGNoaW5nIGRvY3VtZW50cyBkbyBub3QgbmVjZXNzYXJpbHkgc3RpbGwgbWF0Y2ggdGhlIHF1ZXJ5LlxuICAgICAgICBsZXQgbiA9IG5ldyBxdCh3bih0KSk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKChlLCBzKSA9PiB7XG4gICAgICAgICAgICBkbih0LCBzKSAmJiAobiA9IG4uYWRkKHMpKTtcbiAgICAgICAgfSkpLCBuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgbGltaXQgcXVlcnkgbmVlZHMgdG8gYmUgcmVmaWxsZWQgZnJvbSBjYWNoZSwgbWFraW5nIGl0XG4gICAgICogaW5lbGlnaWJsZSBmb3IgaW5kZXgtZnJlZSBleGVjdXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkuXG4gICAgICogQHBhcmFtIHNvcnRlZFByZXZpb3VzUmVzdWx0cyAtIFRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaGVkIHRoZSBxdWVyeSB3aGVuIGl0XG4gICAgICogd2FzIGxhc3Qgc3luY2hyb25pemVkLCBzb3J0ZWQgYnkgdGhlIHF1ZXJ5J3MgY29tcGFyYXRvci5cbiAgICAgKiBAcGFyYW0gcmVtb3RlS2V5cyAtIFRoZSBkb2N1bWVudCBrZXlzIHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgYXQgdGhlIGxhc3RcbiAgICAgKiBzbmFwc2hvdC5cbiAgICAgKiBAcGFyYW0gbGltYm9GcmVlU25hcHNob3RWZXJzaW9uIC0gVGhlIHZlcnNpb24gb2YgdGhlIHNuYXBzaG90IHdoZW4gdGhlXG4gICAgICogcXVlcnkgd2FzIGxhc3Qgc3luY2hyb25pemVkLlxuICAgICAqLyAgICAkaSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIGlmIChudWxsID09PSB0LmxpbWl0KSBcbiAgICAgICAgLy8gUXVlcmllcyB3aXRob3V0IGxpbWl0cyBkbyBub3QgbmVlZCB0byBiZSByZWZpbGxlZC5cbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgICBpZiAobi5zaXplICE9PSBlLnNpemUpIFxuICAgICAgICAvLyBUaGUgcXVlcnkgbmVlZHMgdG8gYmUgcmVmaWxsZWQgaWYgYSBwcmV2aW91c2x5IG1hdGNoaW5nIGRvY3VtZW50IG5vXG4gICAgICAgIC8vIGxvbmdlciBtYXRjaGVzLlxuICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIC8vIExpbWl0IHF1ZXJpZXMgYXJlIG5vdCBlbGlnaWJsZSBmb3IgaW5kZXgtZnJlZSBxdWVyeSBleGVjdXRpb24gaWYgdGhlcmUgaXNcbiAgICAgICAgLy8gYSBwb3RlbnRpYWwgdGhhdCBhbiBvbGRlciBkb2N1bWVudCBmcm9tIGNhY2hlIG5vdyBzb3J0cyBiZWZvcmUgYSBkb2N1bWVudFxuICAgICAgICAvLyB0aGF0IHdhcyBwcmV2aW91c2x5IHBhcnQgb2YgdGhlIGxpbWl0LiBUaGlzLCBob3dldmVyLCBjYW4gb25seSBoYXBwZW4gaWZcbiAgICAgICAgLy8gdGhlIGRvY3VtZW50IGF0IHRoZSBlZGdlIG9mIHRoZSBsaW1pdCBnb2VzIG91dCBvZiBsaW1pdC5cbiAgICAgICAgLy8gSWYgYSBkb2N1bWVudCB0aGF0IGlzIG5vdCB0aGUgbGltaXQgYm91bmRhcnkgc29ydHMgZGlmZmVyZW50bHksXG4gICAgICAgIC8vIHRoZSBib3VuZGFyeSBvZiB0aGUgbGltaXQgaXRzZWxmIGRpZCBub3QgY2hhbmdlIGFuZCBkb2N1bWVudHMgZnJvbSBjYWNoZVxuICAgICAgICAvLyB3aWxsIGNvbnRpbnVlIHRvIGJlIFwicmVqZWN0ZWRcIiBieSB0aGlzIGJvdW5kYXJ5LiBUaGVyZWZvcmUsIHdlIGNhbiBpZ25vcmVcbiAgICAgICAgLy8gYW55IG1vZGlmaWNhdGlvbnMgdGhhdCBkb24ndCBhZmZlY3QgdGhlIGxhc3QgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFwiRlwiIC8qIEZpcnN0ICovID09PSB0LmxpbWl0VHlwZSA/IGUubGFzdCgpIDogZS5maXJzdCgpO1xuICAgICAgICByZXR1cm4gISFpICYmIChpLmhhc1BlbmRpbmdXcml0ZXMgfHwgaS52ZXJzaW9uLmNvbXBhcmVUbyhzKSA+IDApO1xuICAgIH1cbiAgICBNaSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBTKCkgPD0gTG9nTGV2ZWwuREVCVUcgJiYgQyhcIlF1ZXJ5RW5naW5lXCIsIFwiVXNpbmcgZnVsbCBjb2xsZWN0aW9uIHNjYW4gdG8gZXhlY3V0ZSBxdWVyeTpcIiwgZm4oZSkpLCBcbiAgICAgICAgdGhpcy5OaS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIHl0Lm1pbigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tYmluZXMgdGhlIHJlc3VsdHMgZnJvbSBhbiBpbmRleGVkIGV4ZWN1dGlvbiB3aXRoIHRoZSByZW1haW5pbmcgZG9jdW1lbnRzXG4gICAgICogdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBpbmRleGVkLlxuICAgICAqLyAgICBCaSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIC8vIFJldHJpZXZlIGFsbCByZXN1bHRzIGZvciBkb2N1bWVudHMgdGhhdCB3ZXJlIHVwZGF0ZWQgc2luY2UgdGhlIG9mZnNldC5cbiAgICAgICAgcmV0dXJuIHRoaXMuTmkuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSh0LCBuLCBzKS5uZXh0KCh0ID0+IChcbiAgICAgICAgLy8gTWVyZ2Ugd2l0aCBleGlzdGluZyByZXN1bHRzXG4gICAgICAgIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0ID0gdC5pbnNlcnQoZS5rZXksIGUpO1xuICAgICAgICB9KSksIHQpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbXBsZW1lbnRzIGBMb2NhbFN0b3JlYCBpbnRlcmZhY2UuXG4gKlxuICogTm90ZTogc29tZSBmaWVsZCBkZWZpbmVkIGluIHRoaXMgY2xhc3MgbWlnaHQgaGF2ZSBwdWJsaWMgYWNjZXNzIGxldmVsLCBidXRcbiAqIHRoZSBjbGFzcyBpcyBub3QgZXhwb3J0ZWQgc28gdGhleSBhcmUgb25seSBhY2Nlc3NpYmxlIGZyb20gdGhpcyBtb2R1bGUuXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBpbXBsZW1lbnQgb3B0aW9uYWwgZmVhdHVyZXMgKGxpa2UgYnVuZGxlcykgaW4gZnJlZVxuICogZnVuY3Rpb25zLCBzdWNoIHRoYXQgdGhleSBhcmUgdHJlZS1zaGFrZWFibGUuXG4gKi9cbmNsYXNzIElvIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogTWFuYWdlcyBvdXIgaW4tbWVtb3J5IG9yIGR1cmFibGUgcGVyc2lzdGVuY2UuICovXG4gICAgdCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gdCwgdGhpcy5MaSA9IGUsIHRoaXMuSXQgPSBzLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcHMgYSB0YXJnZXRJRCB0byBkYXRhIGFib3V0IGl0cyB0YXJnZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFBPUlRJTkcgTk9URTogV2UgYXJlIHVzaW5nIGFuIGltbXV0YWJsZSBkYXRhIHN0cnVjdHVyZSBvbiBXZWIgdG8gbWFrZSByZS1ydW5zXG4gICAgICAgICAqIG9mIGBhcHBseVJlbW90ZUV2ZW50KClgIGlkZW1wb3RlbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlVpID0gbmV3IEJ0KFopLCBcbiAgICAgICAgLyoqIE1hcHMgYSB0YXJnZXQgdG8gaXRzIHRhcmdldElELiAqL1xuICAgICAgICAvLyBUT0RPKHd1YW5keSk6IEV2YWx1YXRlIGlmIFRhcmdldElkIGNhbiBiZSBwYXJ0IG9mIFRhcmdldC5cbiAgICAgICAgdGhpcy5xaSA9IG5ldyBlcygodCA9PiB4ZSh0KSksIGtlKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHBlciBjb2xsZWN0aW9uIGdyb3VwIGluZGV4IG9mIHRoZSBsYXN0IHJlYWQgdGltZSBwcm9jZXNzZWQgYnlcbiAgICAgICAgICogYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cbiAgICAgICAgICpcbiAgICAgICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS2kgPSBuZXcgTWFwLCB0aGlzLkdpID0gdC5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCksIHRoaXMuQ3MgPSB0LmdldFRhcmdldENhY2hlKCksIFxuICAgICAgICB0aGlzLk5zID0gdC5nZXRCdW5kbGVDYWNoZSgpLCB0aGlzLlFpKG4pO1xuICAgIH1cbiAgICBRaSh0KSB7XG4gICAgICAgIC8vIFRPRE8oaW5kZXhpbmcpOiBBZGQgc3BlYyB0ZXN0cyB0aGF0IHRlc3QgdGhlc2UgY29tcG9uZW50cyBjaGFuZ2UgYWZ0ZXIgYVxuICAgICAgICAvLyB1c2VyIGNoYW5nZVxuICAgICAgICB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXREb2N1bWVudE92ZXJsYXlDYWNoZSh0KSwgdGhpcy5pbmRleE1hbmFnZXIgPSB0aGlzLnBlcnNpc3RlbmNlLmdldEluZGV4TWFuYWdlcih0KSwgXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IHRoaXMucGVyc2lzdGVuY2UuZ2V0TXV0YXRpb25RdWV1ZSh0LCB0aGlzLmluZGV4TWFuYWdlciksIHRoaXMubG9jYWxEb2N1bWVudHMgPSBuZXcgWHIodGhpcy5HaSwgdGhpcy5tdXRhdGlvblF1ZXVlLCB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLCB0aGlzLmluZGV4TWFuYWdlciksIFxuICAgICAgICB0aGlzLkdpLnNldEluZGV4TWFuYWdlcih0aGlzLmluZGV4TWFuYWdlciksIHRoaXMuTGkuaW5pdGlhbGl6ZSh0aGlzLmxvY2FsRG9jdW1lbnRzLCB0aGlzLmluZGV4TWFuYWdlcik7XG4gICAgfVxuICAgIGNvbGxlY3RHYXJiYWdlKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJDb2xsZWN0IGdhcmJhZ2VcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB0LmNvbGxlY3QoZSwgdGhpcy5VaSkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFRvKFxuLyoqIE1hbmFnZXMgb3VyIGluLW1lbW9yeSBvciBkdXJhYmxlIHBlcnNpc3RlbmNlLiAqL1xudCwgZSwgbiwgcykge1xuICAgIHJldHVybiBuZXcgSW8odCwgZSwgbiwgcyk7XG59XG5cbi8qKlxuICogVGVsbHMgdGhlIExvY2FsU3RvcmUgdGhhdCB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgY2hhbmdlZC5cbiAqXG4gKiBJbiByZXNwb25zZSB0aGUgbG9jYWwgc3RvcmUgc3dpdGNoZXMgdGhlIG11dGF0aW9uIHF1ZXVlIHRvIHRoZSBuZXcgdXNlciBhbmRcbiAqIHJldHVybnMgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzLlxuICovXG4vLyBQT1JUSU5HIE5PVEU6IEFuZHJvaWQgYW5kIGlPUyBvbmx5IHJldHVybiB0aGUgZG9jdW1lbnRzIGFmZmVjdGVkIGJ5IHRoZVxuLy8gY2hhbmdlLlxuYXN5bmMgZnVuY3Rpb24gRW8odCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgIHJldHVybiBhd2FpdCBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiSGFuZGxlIHVzZXIgY2hhbmdlXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4ge1xuICAgICAgICAvLyBTd2FwIG91dCB0aGUgbXV0YXRpb24gcXVldWUsIGdyYWJiaW5nIHRoZSBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXNcbiAgICAgICAgLy8gYmVmb3JlIGFuZCBhZnRlci5cbiAgICAgICAgbGV0IHM7XG4gICAgICAgIHJldHVybiBuLm11dGF0aW9uUXVldWUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzKHQpLm5leHQoKGkgPT4gKHMgPSBpLCBuLlFpKGUpLCBuLm11dGF0aW9uUXVldWUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzKHQpKSkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IFtdLCByID0gW107XG4gICAgICAgICAgICAvLyBVbmlvbiB0aGUgb2xkL25ldyBjaGFuZ2VkIGtleXMuXG4gICAgICAgICAgICBsZXQgbyA9IGZzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcykge1xuICAgICAgICAgICAgICAgIGkucHVzaCh0LmJhdGNoSWQpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0Lm11dGF0aW9ucykgbyA9IG8uYWRkKGUua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICAgICAgci5wdXNoKHQuYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQubXV0YXRpb25zKSBvID0gby5hZGQoZS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZXQgb2YgYWxsIChwb3RlbnRpYWxseSkgY2hhbmdlZCBkb2N1bWVudHMgYW5kIHRoZSBsaXN0XG4gICAgICAgICAgICAvLyBvZiBtdXRhdGlvbiBiYXRjaCBJRHMgdGhhdCB3ZXJlIGFmZmVjdGVkIGJ5IGNoYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyh0LCBvKS5uZXh0KCh0ID0+ICh7XG4gICAgICAgICAgICAgICAgamk6IHQsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZEJhdGNoSWRzOiBpLFxuICAgICAgICAgICAgICAgIGFkZGVkQmF0Y2hJZHM6IHJcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qIEFjY2VwdHMgbG9jYWxseSBnZW5lcmF0ZWQgTXV0YXRpb25zIGFuZCBjb21taXQgdGhlbSB0byBzdG9yYWdlLiAqL1xuLyoqXG4gKiBBY2tub3dsZWRnZXMgdGhlIGdpdmVuIGJhdGNoLlxuICpcbiAqIE9uIHRoZSBoYXBweSBwYXRoIHdoZW4gYSBiYXRjaCBpcyBhY2tub3dsZWRnZWQsIHRoZSBsb2NhbCBzdG9yZSB3aWxsXG4gKlxuICogICsgcmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZTtcbiAqICArIGFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGU7XG4gKiAgKyByZWNhbGN1bGF0ZSB0aGUgbGF0ZW5jeSBjb21wZW5zYXRlZCB2aWV3IGltcGxpZWQgYnkgdGhvc2UgY2hhbmdlcyAodGhlcmVcbiAqICAgIG1heSBiZSBtdXRhdGlvbnMgaW4gdGhlIHF1ZXVlIHRoYXQgYWZmZWN0IHRoZSBkb2N1bWVudHMgYnV0IGhhdmVuJ3QgYmVlblxuICogICAgYWNrbm93bGVkZ2VkIHlldCk7IGFuZFxuICogICsgZ2l2ZSB0aGUgY2hhbmdlZCBkb2N1bWVudHMgYmFjayB0aGUgc3luYyBlbmdpbmVcbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIChtb2RpZmllZCkgZG9jdW1lbnRzLlxuICovXG5mdW5jdGlvbiBBbyh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBY2tub3dsZWRnZSBiYXRjaFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsICh0ID0+IHtcbiAgICAgICAgY29uc3QgcyA9IGUuYmF0Y2gua2V5cygpLCBpID0gbi5HaS5uZXdDaGFuZ2VCdWZmZXIoe1xuICAgICAgICAgICAgdHJhY2tSZW1vdmFsczogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5iYXRjaCwgciA9IGkua2V5cygpO1xuICAgICAgICAgICAgbGV0IG8gPSBBdC5yZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm4gci5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBvID0gby5uZXh0KCgoKSA9PiBzLmdldEVudHJ5KGUsIHQpKSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmRvY1ZlcnNpb25zLmdldCh0KTtcbiAgICAgICAgICAgICAgICAgICAgTShudWxsICE9PSByKSwgZS52ZXJzaW9uLmNvbXBhcmVUbyhyKSA8IDAgJiYgKGkuYXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIG4pLCBlLmlzVmFsaWREb2N1bWVudCgpICYmIChcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBjb21taXRWZXJzaW9uIGFzIHRoZSByZWFkVGltZSByYXRoZXIgdGhhbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQncyB1cGRhdGVUaW1lIHNpbmNlIHRoZSB1cGRhdGVUaW1lIGlzIG5vdCBhZHZhbmNlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdXBkYXRlcyB0aGF0IGRvIG5vdCBtb2RpZnkgdGhlIHVuZGVybHlpbmcgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0UmVhZFRpbWUobi5jb21taXRWZXJzaW9uKSwgcy5hZGRFbnRyeShlKSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSwgby5uZXh0KCgoKSA9PiB0Lm11dGF0aW9uUXVldWUucmVtb3ZlTXV0YXRpb25CYXRjaChlLCBpKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudHMgYWZmZWN0ZWQgYnkgYSBtdXRhdGlvbiBiYXRjaC4gKi9cbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgKG4sIHQsIGUsIGkpLm5leHQoKCgpID0+IGkuYXBwbHkodCkpKS5uZXh0KCgoKSA9PiBuLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2sodCkpKS5uZXh0KCgoKSA9PiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnJlbW92ZU92ZXJsYXlzRm9yQmF0Y2hJZCh0LCBzLCBlLmJhdGNoLmJhdGNoSWQpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyh0LCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBsZXQgZSA9IGZzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubXV0YXRpb25SZXN1bHRzLmxlbmd0aDsgKytuKSB7XG4gICAgICAgICAgICAgICAgdC5tdXRhdGlvblJlc3VsdHNbbl0udHJhbnNmb3JtUmVzdWx0cy5sZW5ndGggPiAwICYmIChlID0gZS5hZGQodC5iYXRjaC5tdXRhdGlvbnNbbl0ua2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlbW92ZXMgbXV0YXRpb25zIGZyb20gdGhlIE11dGF0aW9uUXVldWUgZm9yIHRoZSBzcGVjaWZpZWQgYmF0Y2g7XG4gKiBMb2NhbERvY3VtZW50cyB3aWxsIGJlIHJlY2FsY3VsYXRlZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIG1vZGlmaWVkIGRvY3VtZW50cy5cbiAqLyAoZSkpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModCwgcykpKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBjb25zaXN0ZW50IHNuYXBzaG90IHByb2Nlc3NlZCAodXNlZCBieSB0aGUgUmVtb3RlU3RvcmUgdG9cbiAqIGRldGVybWluZSB3aGV0aGVyIHRvIGJ1ZmZlciBpbmNvbWluZyBzbmFwc2hvdHMgZnJvbSB0aGUgYmFja2VuZCkuXG4gKi9cbmZ1bmN0aW9uIFJvKHQpIHtcbiAgICBjb25zdCBlID0gJCh0KTtcbiAgICByZXR1cm4gZS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBsYXN0IHJlbW90ZSBzbmFwc2hvdCB2ZXJzaW9uXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gZS5Dcy5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpKSk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgXCJncm91bmQtc3RhdGVcIiAocmVtb3RlKSBkb2N1bWVudHMuIFdlIGFzc3VtZSB0aGF0IHRoZSByZW1vdGVcbiAqIGV2ZW50IHJlZmxlY3RzIGFueSB3cml0ZSBiYXRjaGVzIHRoYXQgaGF2ZSBiZWVuIGFja25vd2xlZGdlZCBvciByZWplY3RlZFxuICogKGkuZS4gd2UgZG8gbm90IHJlLWFwcGx5IGxvY2FsIG11dGF0aW9ucyB0byB1cGRhdGVzIGZyb20gdGhpcyBldmVudCkuXG4gKlxuICogTG9jYWxEb2N1bWVudHMgYXJlIHJlLWNhbGN1bGF0ZWQgaWYgdGhlcmUgYXJlIHJlbWFpbmluZyBtdXRhdGlvbnMgaW4gdGhlXG4gKiBxdWV1ZS5cbiAqLyBmdW5jdGlvbiBibyh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCksIHMgPSBlLnNuYXBzaG90VmVyc2lvbjtcbiAgICBsZXQgaSA9IG4uVWk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBcHBseSByZW1vdGUgZXZlbnRcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAodCA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBuLkdpLm5ld0NoYW5nZUJ1ZmZlcih7XG4gICAgICAgICAgICB0cmFja1JlbW92YWxzOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVzZXQgbmV3VGFyZ2V0RGF0YUJ5VGFyZ2V0TWFwIGluIGNhc2UgdGhpcyB0cmFuc2FjdGlvbiBnZXRzIHJlLXJ1bi5cbiAgICAgICAgICAgICAgICBpID0gbi5VaTtcbiAgICAgICAgY29uc3QgbyA9IFtdO1xuICAgICAgICBlLnRhcmdldENoYW5nZXMuZm9yRWFjaCgoKHIsIHUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBpLmdldCh1KTtcbiAgICAgICAgICAgIGlmICghYykgcmV0dXJuO1xuICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIHJlbW90ZSBrZXlzIGlmIHRoZSB0YXJnZXQgaXMgc3RpbGwgYWN0aXZlLiBUaGlzXG4gICAgICAgICAgICAvLyBlbnN1cmVzIHRoYXQgd2UgY2FuIHBlcnNpc3QgdGhlIHVwZGF0ZWQgdGFyZ2V0IGRhdGEgYWxvbmcgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHVwZGF0ZWQgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaChuLkNzLnJlbW92ZU1hdGNoaW5nS2V5cyh0LCByLnJlbW92ZWREb2N1bWVudHMsIHUpLm5leHQoKCgpID0+IG4uQ3MuYWRkTWF0Y2hpbmdLZXlzKHQsIHIuYWRkZWREb2N1bWVudHMsIHUpKSkpO1xuICAgICAgICAgICAgbGV0IGEgPSBjLndpdGhTZXF1ZW5jZU51bWJlcih0LmN1cnJlbnRTZXF1ZW5jZU51bWJlcik7XG4gICAgICAgICAgICBlLnRhcmdldE1pc21hdGNoZXMuaGFzKHUpID8gYSA9IGEud2l0aFJlc3VtZVRva2VuKFd0LkVNUFRZX0JZVEVfU1RSSU5HLCBzdC5taW4oKSkud2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24oc3QubWluKCkpIDogci5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwICYmIChhID0gYS53aXRoUmVzdW1lVG9rZW4oci5yZXN1bWVUb2tlbiwgcykpLCBcbiAgICAgICAgICAgIGkgPSBpLmluc2VydCh1LCBhKSwgXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRhcmdldCBkYXRhIGlmIHRoZXJlIGFyZSB0YXJnZXQgY2hhbmdlcyAob3IgaWZcbiAgICAgICAgICAgIC8vIHN1ZmZpY2llbnQgdGltZSBoYXMgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZSkuXG4gICAgICAgICAgICAvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV3VGFyZ2V0RGF0YSBzaG91bGQgYmUgcGVyc2lzdGVkIGR1cmluZyBhbiB1cGRhdGUgb2ZcbiAqIGFuIGFjdGl2ZSB0YXJnZXQuIFRhcmdldERhdGEgc2hvdWxkIGFsd2F5cyBiZSBwZXJzaXN0ZWQgd2hlbiBhIHRhcmdldCBpc1xuICogYmVpbmcgcmVsZWFzZWQgYW5kIHNob3VsZCBub3QgY2FsbCB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIFdoaWxlIHRoZSB0YXJnZXQgaXMgYWN0aXZlLCBUYXJnZXREYXRhIHVwZGF0ZXMgY2FuIGJlIG9taXR0ZWQgd2hlbiBub3RoaW5nXG4gKiBhYm91dCB0aGUgdGFyZ2V0IGhhcyBjaGFuZ2VkIGV4Y2VwdCBtZXRhZGF0YSBsaWtlIHRoZSByZXN1bWUgdG9rZW4gb3JcbiAqIHNuYXBzaG90IHZlcnNpb24uIE9jY2FzaW9uYWxseSBpdCdzIHdvcnRoIHRoZSBleHRyYSB3cml0ZSB0byBwcmV2ZW50IHRoZXNlXG4gKiB2YWx1ZXMgZnJvbSBnZXR0aW5nIHRvbyBzdGFsZSBhZnRlciBhIGNyYXNoLCBidXQgdGhpcyBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIHRvbyBmcmVxdWVudC5cbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBwZXJzaXN0IHRhcmdldCBkYXRhIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhIHJlc3VtZSB0b2tlbi5cbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdC5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBhbGxvdyByZXN1bWUgdG9rZW4gY2hhbmdlcyB0byBiZSBidWZmZXJlZCBpbmRlZmluaXRlbHkuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgdXMgdG8gYmUgcmVhc29uYWJseSB1cC10by1kYXRlIGFmdGVyIGEgY3Jhc2ggYW5kIGF2b2lkcyBuZWVkaW5nXG4gICAgICAgICAgICAgICAgLy8gdG8gbG9vcCBvdmVyIGFsbCBhY3RpdmUgcXVlcmllcyBvbiBzaHV0ZG93bi4gRXNwZWNpYWxseSBpbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIC8vIHdlIG1heSBub3QgZ2V0IHRpbWUgdG8gZG8gYW55dGhpbmcgaW50ZXJlc3Rpbmcgd2hpbGUgdGhlIGN1cnJlbnQgdGFiIGlzXG4gICAgICAgICAgICAgICAgLy8gY2xvc2luZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc25hcHNob3RWZXJzaW9uLnRvTWljcm9zZWNvbmRzKCkgLSB0LnNuYXBzaG90VmVyc2lvbi50b01pY3Jvc2Vjb25kcygpID49IDNlOCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpZiB0aGUgb25seSB0aGluZyB0aGF0IGhhcyBjaGFuZ2VkIGFib3V0IGEgdGFyZ2V0IGlzIGl0cyByZXN1bWVcbiAgICAgICAgICAgICAgICAvLyB0b2tlbiBpdCdzIG5vdCB3b3J0aCBwZXJzaXN0aW5nLiBOb3RlIHRoYXQgdGhlIFJlbW90ZVN0b3JlIGtlZXBzIGFuXG4gICAgICAgICAgICAgICAgLy8gaW4tbWVtb3J5IHZpZXcgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgdGFyZ2V0cyB3aGljaCBpbmNsdWRlcyB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHJlc3VtZSB0b2tlbiwgc28gc3RyZWFtIGZhaWx1cmUgb3IgdXNlciBjaGFuZ2VzIHdpbGwgc3RpbGwgdXNlIGFuXG4gICAgICAgICAgICAgICAgLy8gdXAtdG8tZGF0ZSByZXN1bWUgdG9rZW4gcmVnYXJkbGVzcyBvZiB3aGF0IHdlIGRvIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmFkZGVkRG9jdW1lbnRzLnNpemUgKyBuLm1vZGlmaWVkRG9jdW1lbnRzLnNpemUgKyBuLnJlbW92ZWREb2N1bWVudHMuc2l6ZSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIE5vdGlmaWVzIGxvY2FsIHN0b3JlIG9mIHRoZSBjaGFuZ2VkIHZpZXdzIHRvIGxvY2FsbHkgcGluIGRvY3VtZW50cy5cbiAqLyAoYywgYSwgcikgJiYgby5wdXNoKG4uQ3MudXBkYXRlVGFyZ2V0RGF0YSh0LCBhKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgbGV0IHUgPSBzcygpLCBjID0gZnMoKTtcbiAgICAgICAgLy8gSEFDSzogVGhlIG9ubHkgcmVhc29uIHdlIGFsbG93IGEgbnVsbCBzbmFwc2hvdCB2ZXJzaW9uIGlzIHNvIHRoYXQgd2VcbiAgICAgICAgLy8gY2FuIHN5bnRoZXNpemUgcmVtb3RlIGV2ZW50cyB3aGVuIHdlIGdldCBwZXJtaXNzaW9uIGRlbmllZCBlcnJvcnMgd2hpbGVcbiAgICAgICAgLy8gdHJ5aW5nIHRvIHJlc29sdmUgdGhlIHN0YXRlIG9mIGEgbG9jYWxseSBjYWNoZWQgZG9jdW1lbnQgdGhhdCBpcyBpblxuICAgICAgICAvLyBsaW1iby5cbiAgICAgICAgaWYgKGUuZG9jdW1lbnRVcGRhdGVzLmZvckVhY2goKHMgPT4ge1xuICAgICAgICAgICAgZS5yZXNvbHZlZExpbWJvRG9jdW1lbnRzLmhhcyhzKSAmJiBvLnB1c2gobi5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS51cGRhdGVMaW1ib0RvY3VtZW50KHQsIHMpKTtcbiAgICAgICAgfSkpLCBcbiAgICAgICAgLy8gRWFjaCBsb29wIGl0ZXJhdGlvbiBvbmx5IGFmZmVjdHMgaXRzIFwib3duXCIgZG9jLCBzbyBpdCdzIHNhZmUgdG8gZ2V0IGFsbFxuICAgICAgICAvLyB0aGUgcmVtb3RlIGRvY3VtZW50cyBpbiBhZHZhbmNlIGluIGEgc2luZ2xlIGNhbGwuXG4gICAgICAgIG8ucHVzaChQbyh0LCByLCBlLmRvY3VtZW50VXBkYXRlcykubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB1ID0gdC5XaSwgYyA9IHQuemk7XG4gICAgICAgIH0pKSksICFzLmlzRXF1YWwoc3QubWluKCkpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gbi5Dcy5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpLm5leHQoKGUgPT4gbi5Dcy5zZXRUYXJnZXRzTWV0YWRhdGEodCwgdC5jdXJyZW50U2VxdWVuY2VOdW1iZXIsIHMpKSk7XG4gICAgICAgICAgICBvLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEF0LndhaXRGb3IobykubmV4dCgoKCkgPT4gci5hcHBseSh0KSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHModCwgdSwgYykpKS5uZXh0KCgoKSA9PiB1KSk7XG4gICAgfSkpLnRoZW4oKHQgPT4gKG4uVWkgPSBpLCB0KSkpO1xufVxuXG4vKipcbiAqIFBvcHVsYXRlcyBkb2N1bWVudCBjaGFuZ2UgYnVmZmVyIHdpdGggZG9jdW1lbnRzIGZyb20gYmFja2VuZCBvciBhIGJ1bmRsZS5cbiAqIFJldHVybnMgdGhlIGRvY3VtZW50IGNoYW5nZXMgcmVzdWx0aW5nIGZyb20gYXBwbHlpbmcgdGhvc2UgZG9jdW1lbnRzLCBhbmRcbiAqIGFsc28gYSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZSBhcmUgY2hhbmdlZCBhcyBhIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gdHhuIC0gVHJhbnNhY3Rpb24gdG8gdXNlIHRvIHJlYWQgZXhpc3RpbmcgZG9jdW1lbnRzIGZyb20gc3RvcmFnZS5cbiAqIEBwYXJhbSBkb2N1bWVudEJ1ZmZlciAtIERvY3VtZW50IGJ1ZmZlciB0byBjb2xsZWN0IHRoZSByZXN1bHRlZCBjaGFuZ2VzIHRvIGJlXG4gKiAgICAgICAgYXBwbGllZCB0byBzdG9yYWdlLlxuICogQHBhcmFtIGRvY3VtZW50cyAtIERvY3VtZW50cyB0byBiZSBhcHBsaWVkLlxuICovIGZ1bmN0aW9uIFBvKHQsIGUsIG4pIHtcbiAgICBsZXQgcyA9IGZzKCksIGkgPSBmcygpO1xuICAgIHJldHVybiBuLmZvckVhY2goKHQgPT4gcyA9IHMuYWRkKHQpKSksIGUuZ2V0RW50cmllcyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgbGV0IHMgPSBzcygpO1xuICAgICAgICByZXR1cm4gbi5mb3JFYWNoKCgobiwgcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbyA9IHQuZ2V0KG4pO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2VlIGlmIHRoZXJlIGlzIGEgZXhpc3RlbmNlIHN0YXRlIGNoYW5nZSBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaXNGb3VuZERvY3VtZW50KCkgIT09IG8uaXNGb3VuZERvY3VtZW50KCkgJiYgKGkgPSBpLmFkZChuKSksIFxuICAgICAgICAgICAgLy8gTm90ZTogVGhlIG9yZGVyIG9mIHRoZSBzdGVwcyBiZWxvdyBpcyBpbXBvcnRhbnQsIHNpbmNlIHdlIHdhbnRcbiAgICAgICAgICAgIC8vIHRvIGVuc3VyZSB0aGF0IHJlamVjdGVkIGxpbWJvIHJlc29sdXRpb25zICh3aGljaCBmYWJyaWNhdGVcbiAgICAgICAgICAgIC8vIE5vRG9jdW1lbnRzIHdpdGggU25hcHNob3RWZXJzaW9uLm1pbigpKSBuZXZlciBhZGQgZG9jdW1lbnRzIHRvXG4gICAgICAgICAgICAvLyBjYWNoZS5cbiAgICAgICAgICAgIHIuaXNOb0RvY3VtZW50KCkgJiYgci52ZXJzaW9uLmlzRXF1YWwoc3QubWluKCkpID8gKFxuICAgICAgICAgICAgLy8gTm9Eb2N1bWVudHMgd2l0aCBTbmFwc2hvdFZlcnNpb24ubWluKCkgYXJlIHVzZWQgaW4gbWFudWZhY3R1cmVkXG4gICAgICAgICAgICAvLyBldmVudHMuIFdlIHJlbW92ZSB0aGVzZSBkb2N1bWVudHMgZnJvbSBjYWNoZSBzaW5jZSB3ZSBsb3N0XG4gICAgICAgICAgICAvLyBhY2Nlc3MuXG4gICAgICAgICAgICBlLnJlbW92ZUVudHJ5KG4sIHIucmVhZFRpbWUpLCBzID0gcy5pbnNlcnQobiwgcikpIDogIW8uaXNWYWxpZERvY3VtZW50KCkgfHwgci52ZXJzaW9uLmNvbXBhcmVUbyhvLnZlcnNpb24pID4gMCB8fCAwID09PSByLnZlcnNpb24uY29tcGFyZVRvKG8udmVyc2lvbikgJiYgby5oYXNQZW5kaW5nV3JpdGVzID8gKGUuYWRkRW50cnkociksIFxuICAgICAgICAgICAgcyA9IHMuaW5zZXJ0KG4sIHIpKSA6IEMoXCJMb2NhbFN0b3JlXCIsIFwiSWdub3Jpbmcgb3V0ZGF0ZWQgd2F0Y2ggdXBkYXRlIGZvciBcIiwgbiwgXCIuIEN1cnJlbnQgdmVyc2lvbjpcIiwgby52ZXJzaW9uLCBcIiBXYXRjaCB2ZXJzaW9uOlwiLCByLnZlcnNpb24pO1xuICAgICAgICB9KSksIHtcbiAgICAgICAgICAgIFdpOiBzLFxuICAgICAgICAgICAgemk6IGlcbiAgICAgICAgfTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbXV0YXRpb24gYmF0Y2ggYWZ0ZXIgdGhlIHBhc3NlZCBpbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZVxuICogb3IgbnVsbCBpZiBlbXB0eS5cbiAqIEBwYXJhbSBhZnRlckJhdGNoSWQgLSBJZiBwcm92aWRlZCwgdGhlIGJhdGNoIHRvIHNlYXJjaCBhZnRlci5cbiAqIEByZXR1cm5zIFRoZSBuZXh0IG11dGF0aW9uIG9yIG51bGwgaWYgdGhlcmUgd2Fzbid0IG9uZS5cbiAqL1xuZnVuY3Rpb24gdm8odCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5leHQgbXV0YXRpb24gYmF0Y2hcIiwgXCJyZWFkb25seVwiLCAodCA9PiAodm9pZCAwID09PSBlICYmIChlID0gLTEpLCBcbiAgICBuLm11dGF0aW9uUXVldWUuZ2V0TmV4dE11dGF0aW9uQmF0Y2hBZnRlckJhdGNoSWQodCwgZSkpKSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBEb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5IG9yIG51bGwgaWYgbm90XG4gKiBmb3VuZCAtIHVzZWQgZm9yIHRlc3RpbmcuXG4gKi9cbi8qKlxuICogQXNzaWducyB0aGUgZ2l2ZW4gdGFyZ2V0IGFuIGludGVybmFsIElEIHNvIHRoYXQgaXRzIHJlc3VsdHMgY2FuIGJlIHBpbm5lZCBzb1xuICogdGhleSBkb24ndCBnZXQgR0MnZC4gQSB0YXJnZXQgbXVzdCBiZSBhbGxvY2F0ZWQgaW4gdGhlIGxvY2FsIHN0b3JlIGJlZm9yZVxuICogdGhlIHN0b3JlIGNhbiBiZSB1c2VkIHRvIG1hbmFnZSBpdHMgdmlldy5cbiAqXG4gKiBBbGxvY2F0aW5nIGFuIGFscmVhZHkgYWxsb2NhdGVkIGBUYXJnZXRgIHdpbGwgcmV0dXJuIHRoZSBleGlzdGluZyBgVGFyZ2V0RGF0YWBcbiAqIGZvciB0aGF0IGBUYXJnZXRgLlxuICovXG5mdW5jdGlvbiBWbyh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBbGxvY2F0ZSB0YXJnZXRcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4ge1xuICAgICAgICBsZXQgcztcbiAgICAgICAgcmV0dXJuIG4uQ3MuZ2V0VGFyZ2V0RGF0YSh0LCBlKS5uZXh0KChpID0+IGkgPyAoXG4gICAgICAgIC8vIFRoaXMgdGFyZ2V0IGhhcyBiZWVuIGxpc3RlbmVkIHRvIHByZXZpb3VzbHksIHNvIHJldXNlIHRoZVxuICAgICAgICAvLyBwcmV2aW91cyB0YXJnZXRJRC5cbiAgICAgICAgLy8gVE9ETyhtY2cpOiBmcmVzaGVuIGxhc3QgYWNjZXNzZWQgZGF0ZT9cbiAgICAgICAgcyA9IGksIEF0LnJlc29sdmUocykpIDogbi5Dcy5hbGxvY2F0ZVRhcmdldElkKHQpLm5leHQoKGkgPT4gKHMgPSBuZXcgRmkoZSwgaSwgMCAvKiBMaXN0ZW4gKi8gLCB0LmN1cnJlbnRTZXF1ZW5jZU51bWJlciksIFxuICAgICAgICBuLkNzLmFkZFRhcmdldERhdGEodCwgcykubmV4dCgoKCkgPT4gcykpKSkpKSk7XG4gICAgfSkpLnRoZW4oKHQgPT4ge1xuICAgICAgICAvLyBJZiBNdWx0aS1UYWIgaXMgZW5hYmxlZCwgdGhlIGV4aXN0aW5nIHRhcmdldCBkYXRhIG1heSBiZSBuZXdlciB0aGFuXG4gICAgICAgIC8vIHRoZSBpbi1tZW1vcnkgZGF0YVxuICAgICAgICBjb25zdCBzID0gbi5VaS5nZXQodC50YXJnZXRJZCk7XG4gICAgICAgIHJldHVybiAobnVsbCA9PT0gcyB8fCB0LnNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8ocy5zbmFwc2hvdFZlcnNpb24pID4gMCkgJiYgKG4uVWkgPSBuLlVpLmluc2VydCh0LnRhcmdldElkLCB0KSwgXG4gICAgICAgIG4ucWkuc2V0KGUsIHQudGFyZ2V0SWQpKSwgdDtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgVGFyZ2V0RGF0YSBhcyBzZWVuIGJ5IHRoZSBMb2NhbFN0b3JlLCBpbmNsdWRpbmcgdXBkYXRlcyB0aGF0IG1heVxuICogaGF2ZSBub3QgeWV0IGJlZW4gcGVyc2lzdGVkIHRvIHRoZSBUYXJnZXRDYWNoZS5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cbi8qKlxuICogVW5waW5zIGFsbCB0aGUgZG9jdW1lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0LiBJZlxuICogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBzZXQgdG8gZmFsc2UgYW5kIEVhZ2VyIEdDIGVuYWJsZWQsIHRoZSBtZXRob2RcbiAqIGRpcmVjdGx5IHJlbW92ZXMgdGhlIGFzc29jaWF0ZWQgdGFyZ2V0IGRhdGEgZnJvbSB0aGUgdGFyZ2V0IGNhY2hlLlxuICpcbiAqIFJlbGVhc2luZyBhIG5vbi1leGlzdGluZyBgVGFyZ2V0YCBpcyBhIG5vLW9wLlxuICovXG4vLyBQT1JUSU5HIE5PVEU6IGBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YWAgaXMgbXVsdGktdGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBTbyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9ICQodCksIGkgPSBzLlVpLmdldChlKSwgciA9IG4gPyBcInJlYWR3cml0ZVwiIDogXCJyZWFkd3JpdGUtcHJpbWFyeVwiO1xuICAgIHRyeSB7XG4gICAgICAgIG4gfHwgYXdhaXQgcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlbGVhc2UgdGFyZ2V0XCIsIHIsICh0ID0+IHMucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUucmVtb3ZlVGFyZ2V0KHQsIGkpKSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICBpZiAoIVZ0KHQpKSB0aHJvdyB0O1xuICAgICAgICAvLyBBbGwgYHJlbGVhc2VUYXJnZXRgIGRvZXMgaXMgcmVjb3JkIHRoZSBmaW5hbCBtZXRhZGF0YSBzdGF0ZSBmb3IgdGhlXG4gICAgICAgIC8vIHRhcmdldCwgYnV0IHdlJ3ZlIGJlZW4gcmVjb3JkaW5nIHRoaXMgcGVyaW9kaWNhbGx5IGR1cmluZyB0YXJnZXRcbiAgICAgICAgLy8gYWN0aXZpdHkuIElmIHdlIGxvc2UgdGhpcyB3cml0ZSB0aGlzIGNvdWxkIGNhdXNlIGEgdmVyeSBzbGlnaHRcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiB0aGUgb3JkZXIgb2YgdGFyZ2V0IGRlbGV0aW9uIGR1cmluZyBHQywgYnV0IHdlXG4gICAgICAgIC8vIGRvbid0IGRlZmluZSBleGFjdCBMUlUgc2VtYW50aWNzIHNvIHRoaXMgaXMgYWNjZXB0YWJsZS5cbiAgICAgICAgQyhcIkxvY2FsU3RvcmVcIiwgYEZhaWxlZCB0byB1cGRhdGUgc2VxdWVuY2UgbnVtYmVycyBmb3IgdGFyZ2V0ICR7ZX06ICR7dH1gKTtcbiAgICB9XG4gICAgcy5VaSA9IHMuVWkucmVtb3ZlKGUpLCBzLnFpLmRlbGV0ZShpLnRhcmdldCk7XG59XG5cbi8qKlxuICogUnVucyB0aGUgc3BlY2lmaWVkIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHN0b3JlIGFuZCByZXR1cm5zIHRoZSByZXN1bHRzLFxuICogcG90ZW50aWFsbHkgdGFraW5nIGFkdmFudGFnZSBvZiBxdWVyeSBkYXRhIGZyb20gcHJldmlvdXMgZXhlY3V0aW9ucyAoc3VjaFxuICogYXMgdGhlIHNldCBvZiByZW1vdGUga2V5cykuXG4gKlxuICogQHBhcmFtIHVzZVByZXZpb3VzUmVzdWx0cyAtIFdoZXRoZXIgcmVzdWx0cyBmcm9tIHByZXZpb3VzIGV4ZWN1dGlvbnMgY2FuXG4gKiBiZSB1c2VkIHRvIG9wdGltaXplIHRoaXMgcXVlcnkgZXhlY3V0aW9uLlxuICovIGZ1bmN0aW9uIERvKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gJCh0KTtcbiAgICBsZXQgaSA9IHN0Lm1pbigpLCByID0gZnMoKTtcbiAgICByZXR1cm4gcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkV4ZWN1dGUgcXVlcnlcIiwgXCJyZWFkb25seVwiLCAodCA9PiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSAkKHQpLCBpID0gcy5xaS5nZXQobik7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGkgPyBBdC5yZXNvbHZlKHMuVWkuZ2V0KGkpKSA6IHMuQ3MuZ2V0VGFyZ2V0RGF0YShlLCBuKTtcbiAgICB9KHMsIHQsIGNuKGUpKS5uZXh0KChlID0+IHtcbiAgICAgICAgaWYgKGUpIHJldHVybiBpID0gZS5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uLCBzLkNzLmdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIGUudGFyZ2V0SWQpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgIH0pKTtcbiAgICB9KSkubmV4dCgoKCkgPT4gcy5MaS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4gPyBpIDogc3QubWluKCksIG4gPyByIDogZnMoKSkpKS5uZXh0KCh0ID0+IChObyhzLCBfbihlKSwgdCksIFxuICAgIHtcbiAgICAgICAgZG9jdW1lbnRzOiB0LFxuICAgICAgICBIaTogclxuICAgIH0pKSkpKTtcbn1cblxuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIENvKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9ICQobi5DcyksIGkgPSBuLlVpLmdldChlKTtcbiAgICByZXR1cm4gaSA/IFByb21pc2UucmVzb2x2ZShpLnRhcmdldCkgOiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IHRhcmdldCBkYXRhXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gcy5zZSh0LCBlKS5uZXh0KCh0ID0+IHQgPyB0LnRhcmdldCA6IG51bGwpKSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgcmV0dXJucyB0aGUgc2V0IG9mIGNoYW5nZXMgc2luY2UgY2xpZW50XG4gKiBpbml0aWFsaXphdGlvbi4gRnVydGhlciBpbnZvY2F0aW9ucyB3aWxsIHJldHVybiBkb2N1bWVudCB0aGF0IGhhdmUgY2hhbmdlZFxuICogc2luY2UgdGhlIHByaW9yIGNhbGwuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiB4byh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCksIHMgPSBuLktpLmdldChlKSB8fCBzdC5taW4oKTtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbWF4aW11bSByZWFkIHRpbWUgZm9yIHRoZSBjb2xsZWN0aW9uLiBUaGlzIHNob3VsZCBhbHdheXNcbiAgICAvLyBleGlzdCwgYnV0IHRvIHJlZHVjZSB0aGUgY2hhbmNlIGZvciByZWdyZXNzaW9ucyB3ZSBkZWZhdWx0IHRvXG4gICAgLy8gU25hcHNob3RWZXJzaW9uLk1pbigpXG4gICAgLy8gVE9ETyhpbmRleGluZyk6IENvbnNpZGVyIHJlbW92aW5nIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuZXcgZG9jdW1lbnQgY2hhbmdlc1wiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4uR2kuZ2V0QWxsRnJvbUNvbGxlY3Rpb25Hcm91cCh0LCBlLCBtdChzLCAtMSksIFxuICAgIC8qIGxpbWl0PSAqLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpKS50aGVuKCh0ID0+IChObyhuLCBlLCB0KSwgdCkpKTtcbn1cblxuLyoqIFNldHMgdGhlIGNvbGxlY3Rpb24gZ3JvdXAncyBtYXhpbXVtIHJlYWQgdGltZSBmcm9tIHRoZSBnaXZlbiBkb2N1bWVudHMuICovXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuZnVuY3Rpb24gTm8odCwgZSwgbikge1xuICAgIGxldCBzID0gdC5LaS5nZXQoZSkgfHwgc3QubWluKCk7XG4gICAgbi5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICBlLnJlYWRUaW1lLmNvbXBhcmVUbyhzKSA+IDAgJiYgKHMgPSBlLnJlYWRUaW1lKTtcbiAgICB9KSksIHQuS2kuc2V0KGUsIHMpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IHVzaW5nIHRoZSBnaXZlbiBidW5kbGUgbmFtZSwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvXG4gKiBob2xkIHRoZSBrZXlzIG9mIGFsbCBkb2N1bWVudHMgZnJvbSB0aGUgYnVuZGxlIGluIHF1ZXJ5LWRvY3VtZW50IG1hcHBpbmdzLlxuICogVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGxvYWRlZCBkb2N1bWVudHMgZG8gbm90IGdldCBnYXJiYWdlIGNvbGxlY3RlZFxuICogcmlnaHQgYXdheS5cbiAqL1xuLyoqXG4gKiBBcHBsaWVzIHRoZSBkb2N1bWVudHMgZnJvbSBhIGJ1bmRsZSB0byB0aGUgXCJncm91bmQtc3RhdGVcIiAocmVtb3RlKVxuICogZG9jdW1lbnRzLlxuICpcbiAqIExvY2FsRG9jdW1lbnRzIGFyZSByZS1jYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSByZW1haW5pbmcgbXV0YXRpb25zIGluIHRoZVxuICogcXVldWUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGtvKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gJCh0KTtcbiAgICBsZXQgciA9IGZzKCksIG8gPSBzcygpO1xuICAgIGZvciAoY29uc3QgdCBvZiBuKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLkppKHQubWV0YWRhdGEubmFtZSk7XG4gICAgICAgIHQuZG9jdW1lbnQgJiYgKHIgPSByLmFkZChuKSk7XG4gICAgICAgIGNvbnN0IHMgPSBlLllpKHQpO1xuICAgICAgICBzLnNldFJlYWRUaW1lKGUuWGkodC5tZXRhZGF0YS5yZWFkVGltZSkpLCBvID0gby5pbnNlcnQobiwgcyk7XG4gICAgfVxuICAgIGNvbnN0IHUgPSBpLkdpLm5ld0NoYW5nZUJ1ZmZlcih7XG4gICAgICAgIHRyYWNrUmVtb3ZhbHM6ICEwXG4gICAgfSksIGMgPSBhd2FpdCBWbyhpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEl0IGlzIE9LIHRoYXQgdGhlIHBhdGggdXNlZCBmb3IgdGhlIHF1ZXJ5IGlzIG5vdCB2YWxpZCwgYmVjYXVzZSB0aGlzIHdpbGxcbiAgICAgICAgLy8gbm90IGJlIHJlYWQgYW5kIHF1ZXJpZWQuXG4gICAgICAgIHJldHVybiBjbihlbihydC5mcm9tU3RyaW5nKGBfX2J1bmRsZV9fL2RvY3MvJHt0fWApKSk7XG4gICAgfShzKSk7XG4gICAgLy8gQWxsb2NhdGVzIGEgdGFyZ2V0IHRvIGhvbGQgYWxsIGRvY3VtZW50IGtleXMgZnJvbSB0aGUgYnVuZGxlLCBzdWNoIHRoYXRcbiAgICAvLyB0aGV5IHdpbGwgbm90IGdldCBnYXJiYWdlIGNvbGxlY3RlZCByaWdodCBhd2F5LlxuICAgICAgICByZXR1cm4gaS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkFwcGx5IGJ1bmRsZSBkb2N1bWVudHNcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4gUG8odCwgdSwgbykubmV4dCgoZSA9PiAodS5hcHBseSh0KSwgXG4gICAgZSkpKS5uZXh0KChlID0+IGkuQ3MucmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgYy50YXJnZXRJZCkubmV4dCgoKCkgPT4gaS5Dcy5hZGRNYXRjaGluZ0tleXModCwgciwgYy50YXJnZXRJZCkpKS5uZXh0KCgoKSA9PiBpLmxvY2FsRG9jdW1lbnRzLmdldExvY2FsVmlld09mRG9jdW1lbnRzKHQsIGUuV2ksIGUuemkpKSkubmV4dCgoKCkgPT4gZS5XaSkpKSkpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBvZiBhIGJvb2xlYW4gdG8gaW5kaWNhdGUgaWYgdGhlIGdpdmVuIGJ1bmRsZSBoYXMgYWxyZWFkeVxuICogYmVlbiBsb2FkZWQgYW5kIHRoZSBjcmVhdGUgdGltZSBpcyBuZXdlciB0aGFuIHRoZSBjdXJyZW50IGxvYWRpbmcgYnVuZGxlLlxuICovXG4vKipcbiAqIFNhdmVzIHRoZSBnaXZlbiBgTmFtZWRRdWVyeWAgdG8gbG9jYWwgcGVyc2lzdGVuY2UuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIE9vKHQsIGUsIG4gPSBmcygpKSB7XG4gICAgLy8gQWxsb2NhdGUgYSB0YXJnZXQgZm9yIHRoZSBuYW1lZCBxdWVyeSBzdWNoIHRoYXQgaXQgY2FuIGJlIHJlc3VtZWRcbiAgICAvLyBmcm9tIGFzc29jaWF0ZWQgcmVhZCB0aW1lIGlmIHVzZXJzIHVzZSBpdCB0byBsaXN0ZW4uXG4gICAgLy8gTk9URTogdGhpcyBhbHNvIG1lYW5zIGlmIG5vIGNvcnJlc3BvbmRpbmcgdGFyZ2V0IGV4aXN0cywgdGhlIG5ldyB0YXJnZXRcbiAgICAvLyB3aWxsIHJlbWFpbiBhY3RpdmUgYW5kIHdpbGwgbm90IGdldCBjb2xsZWN0ZWQsIHVubGVzcyB1c2VycyBoYXBwZW4gdG9cbiAgICAvLyB1bmxpc3RlbiB0aGUgcXVlcnkgc29tZWhvdy5cbiAgICBjb25zdCBzID0gYXdhaXQgVm8odCwgY24oV2koZS5idW5kbGVkUXVlcnkpKSksIGkgPSAkKHQpO1xuICAgIHJldHVybiBpLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU2F2ZSBuYW1lZCBxdWVyeVwiLCBcInJlYWR3cml0ZVwiLCAodCA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBEcyhlLnJlYWRUaW1lKTtcbiAgICAgICAgLy8gU2ltcGx5IHNhdmUgdGhlIHF1ZXJ5IGl0c2VsZiBpZiBpdCBpcyBvbGRlciB0aGFuIHdoYXQgdGhlIFNESyBhbHJlYWR5XG4gICAgICAgIC8vIGhhcy5cbiAgICAgICAgICAgICAgICBpZiAocy5zbmFwc2hvdFZlcnNpb24uY29tcGFyZVRvKHIpID49IDApIHJldHVybiBpLk5zLnNhdmVOYW1lZFF1ZXJ5KHQsIGUpO1xuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgdGFyZ2V0IGRhdGEgYmVjYXVzZSB0aGUgcXVlcnkgZnJvbSB0aGUgYnVuZGxlIGlzIG5ld2VyLlxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBzLndpdGhSZXN1bWVUb2tlbihXdC5FTVBUWV9CWVRFX1NUUklORywgcik7XG4gICAgICAgIHJldHVybiBpLlVpID0gaS5VaS5pbnNlcnQoby50YXJnZXRJZCwgbyksIGkuQ3MudXBkYXRlVGFyZ2V0RGF0YSh0LCBvKS5uZXh0KCgoKSA9PiBpLkNzLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIHMudGFyZ2V0SWQpKSkubmV4dCgoKCkgPT4gaS5Dcy5hZGRNYXRjaGluZ0tleXModCwgbiwgcy50YXJnZXRJZCkpKS5uZXh0KCgoKSA9PiBpLk5zLnNhdmVOYW1lZFF1ZXJ5KHQsIGUpKSk7XG4gICAgfSkpO1xufVxuXG4vKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi9cbmZ1bmN0aW9uIE1vKHQsIGUpIHtcbiAgICByZXR1cm4gYGZpcmVzdG9yZV9jbGllbnRzXyR7dH1fJHtlfWA7XG59XG5cbi8vIFRoZSBmb3JtYXQgb2YgdGhlIFdlYlN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHRoZSBtdXRhdGlvbiBzdGF0ZSBpczpcbi8vICAgICBmaXJlc3RvcmVfbXV0YXRpb25zXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XzxiYXRjaF9pZD5cbi8vICAgICAoZm9yIHVuYXV0aGVudGljYXRlZCB1c2Vycylcbi8vIG9yOiBmaXJlc3RvcmVfbXV0YXRpb25zXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XzxiYXRjaF9pZD5fPHVzZXJfdWlkPlxuXG4vLyAndXNlcl91aWQnIGlzIGxhc3QgdG8gYXZvaWQgbmVlZGluZyB0byBlc2NhcGUgJ18nIGNoYXJhY3RlcnMgdGhhdCBpdCBtaWdodFxuLy8gY29udGFpbi5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBtdXRhdGlvbiBiYXRjaCBpbiBXZWJTdG9yYWdlICovXG5mdW5jdGlvbiBGbyh0LCBlLCBuKSB7XG4gICAgbGV0IHMgPSBgZmlyZXN0b3JlX211dGF0aW9uc18ke3R9XyR7bn1gO1xuICAgIHJldHVybiBlLmlzQXV0aGVudGljYXRlZCgpICYmIChzICs9IGBfJHtlLnVpZH1gKSwgcztcbn1cblxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgYSBxdWVyeSB0YXJnZXQncyBtZXRhZGF0YSBpczpcbi8vICAgICBmaXJlc3RvcmVfdGFyZ2V0c188cGVyc2lzdGVuY2VfcHJlZml4Pl88dGFyZ2V0X2lkPlxuLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciBhIHF1ZXJ5IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi9cbmZ1bmN0aW9uICRvKHQsIGUpIHtcbiAgICByZXR1cm4gYGZpcmVzdG9yZV90YXJnZXRzXyR7dH1fJHtlfWA7XG59XG5cbi8vIFRoZSBXZWJTdG9yYWdlIHByZWZpeCB0aGF0IHN0b3JlcyB0aGUgcHJpbWFyeSB0YWIncyBvbmxpbmUgc3RhdGUuIFRoZVxuLy8gZm9ybWF0IG9mIHRoZSBrZXkgaXM6XG4vLyAgICAgZmlyZXN0b3JlX29ubGluZV9zdGF0ZV88cGVyc2lzdGVuY2VfcHJlZml4PlxuLyoqXG4gKiBIb2xkcyB0aGUgc3RhdGUgb2YgYSBtdXRhdGlvbiBiYXRjaCwgaW5jbHVkaW5nIGl0cyB1c2VyIElELCBiYXRjaCBJRCBhbmRcbiAqIHdoZXRoZXIgdGhlIGJhdGNoIGlzICdwZW5kaW5nJywgJ2Fja25vd2xlZGdlZCcgb3IgJ3JlamVjdGVkJy5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuY2xhc3MgQm8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy51c2VyID0gdCwgdGhpcy5iYXRjaElkID0gZSwgdGhpcy5zdGF0ZSA9IG4sIHRoaXMuZXJyb3IgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBNdXRhdGlvbk1ldGFkYXRhIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24gaW4gV2ViU3RvcmFnZS5cbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxuICAgICAqLyAgICBzdGF0aWMgWmkodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gSlNPTi5wYXJzZShuKTtcbiAgICAgICAgbGV0IGksIHIgPSBcIm9iamVjdFwiID09IHR5cGVvZiBzICYmIC0xICE9PSBbIFwicGVuZGluZ1wiLCBcImFja25vd2xlZGdlZFwiLCBcInJlamVjdGVkXCIgXS5pbmRleE9mKHMuc3RhdGUpICYmICh2b2lkIDAgPT09IHMuZXJyb3IgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2Ygcy5lcnJvcik7XG4gICAgICAgIHJldHVybiByICYmIHMuZXJyb3IgJiYgKHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiBzLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygcy5lcnJvci5jb2RlLCBcbiAgICAgICAgciAmJiAoaSA9IG5ldyBMKHMuZXJyb3IuY29kZSwgcy5lcnJvci5tZXNzYWdlKSkpLCByID8gbmV3IEJvKHQsIGUsIHMuc3RhdGUsIGkpIDogKHgoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIG11dGF0aW9uIHN0YXRlIGZvciBJRCAnJHtlfSc6ICR7bn1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbiAgICB0cigpIHtcbiAgICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yICYmICh0LmVycm9yID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXG4gICAgICAgIH0pLCBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgcXVlcnkgdGFyZ2V0LCBpbmNsdWRpbmcgaXRzIHRhcmdldCBJRCBhbmQgd2hldGhlciB0aGVcbiAqIHRhcmdldCBpcyAnbm90LWN1cnJlbnQnLCAnY3VycmVudCcgb3IgJ3JlamVjdGVkJy5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuY2xhc3MgTG8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuc3RhdGUgPSBlLCB0aGlzLmVycm9yID0gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgUXVlcnlUYXJnZXRNZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIFppKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IEpTT04ucGFyc2UoZSk7XG4gICAgICAgIGxldCBzLCBpID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgbiAmJiAtMSAhPT0gWyBcIm5vdC1jdXJyZW50XCIsIFwiY3VycmVudFwiLCBcInJlamVjdGVkXCIgXS5pbmRleE9mKG4uc3RhdGUpICYmICh2b2lkIDAgPT09IG4uZXJyb3IgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2Ygbi5lcnJvcik7XG4gICAgICAgIHJldHVybiBpICYmIG4uZXJyb3IgJiYgKGkgPSBcInN0cmluZ1wiID09IHR5cGVvZiBuLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygbi5lcnJvci5jb2RlLCBcbiAgICAgICAgaSAmJiAocyA9IG5ldyBMKG4uZXJyb3IuY29kZSwgbi5lcnJvci5tZXNzYWdlKSkpLCBpID8gbmV3IExvKHQsIG4uc3RhdGUsIHMpIDogKHgoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIHRhcmdldCBzdGF0ZSBmb3IgSUQgJyR7dH0nOiAke2V9YCksIFxuICAgICAgICBudWxsKTtcbiAgICB9XG4gICAgdHIoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvciAmJiAodC5lcnJvciA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuZXJyb3IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuZXJyb3IubWVzc2FnZVxuICAgICAgICB9KSwgSlNPTi5zdHJpbmdpZnkodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgaW1tdXRhYmxlIENsaWVudFN0YXRlIGZvciBhIGNsaWVudCByZWFkIGZyb21cbiAqIFdlYlN0b3JhZ2UsIGNvbnRhaW5pbmcgdGhlIGxpc3Qgb2YgYWN0aXZlIHF1ZXJ5IHRhcmdldHMuXG4gKi8gY2xhc3MgVW8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHQsIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgUmVtb3RlQ2xpZW50U3RhdGUgZnJvbSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIGFuZCByZXR1cm5zIG51bGwgaWYgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBpcyBub3QgdmFsaWQuXG4gICAgICovICAgIHN0YXRpYyBaaSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBKU09OLnBhcnNlKGUpO1xuICAgICAgICBsZXQgcyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIG4gJiYgbi5hY3RpdmVUYXJnZXRJZHMgaW5zdGFuY2VvZiBBcnJheSwgaSA9IF9zKCk7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyBzICYmIHQgPCBuLmFjdGl2ZVRhcmdldElkcy5sZW5ndGg7ICsrdCkgcyA9IHJlKG4uYWN0aXZlVGFyZ2V0SWRzW3RdKSwgXG4gICAgICAgIGkgPSBpLmFkZChuLmFjdGl2ZVRhcmdldElkc1t0XSk7XG4gICAgICAgIHJldHVybiBzID8gbmV3IFVvKHQsIGkpIDogKHgoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIGNsaWVudCBkYXRhIGZvciBpbnN0YW5jZSAnJHt0fSc6ICR7ZX1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIG9ubGluZSBzdGF0ZSBmb3IgYWxsIGNsaWVudHMgcGFydGljaXBhdGluZyBpblxuICogbXVsdGktdGFiLiBUaGUgb25saW5lIHN0YXRlIGlzIG9ubHkgd3JpdHRlbiB0byBieSB0aGUgcHJpbWFyeSBjbGllbnQsIGFuZFxuICogdXNlZCBpbiBzZWNvbmRhcnkgY2xpZW50cyB0byB1cGRhdGUgdGhlaXIgcXVlcnkgdmlld3MuXG4gKi8gY2xhc3MgcW8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHQsIHRoaXMub25saW5lU3RhdGUgPSBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBTaGFyZWRPbmxpbmVTdGF0ZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIFppKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IEpTT04ucGFyc2UodCk7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIC0xICE9PSBbIFwiVW5rbm93blwiLCBcIk9ubGluZVwiLCBcIk9mZmxpbmVcIiBdLmluZGV4T2YoZS5vbmxpbmVTdGF0ZSkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5jbGllbnRJZCA/IG5ldyBxbyhlLmNsaWVudElkLCBlLm9ubGluZVN0YXRlKSA6ICh4KFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgYEZhaWxlZCB0byBwYXJzZSBvbmxpbmUgc3RhdGU6ICR7dH1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNZXRhZGF0YSBzdGF0ZSBvZiB0aGUgbG9jYWwgY2xpZW50LiBVbmxpa2UgYFJlbW90ZUNsaWVudFN0YXRlYCwgdGhpcyBjbGFzcyBpc1xuICogbXV0YWJsZSBhbmQga2VlcHMgdHJhY2sgb2YgYWxsIHBlbmRpbmcgbXV0YXRpb25zLCB3aGljaCBhbGxvd3MgdXMgdG9cbiAqIHVwZGF0ZSB0aGUgcmFuZ2Ugb2YgcGVuZGluZyBtdXRhdGlvbiBiYXRjaCBJRHMgYXMgbmV3IG11dGF0aW9ucyBhcmUgYWRkZWQgb3JcbiAqIHJlbW92ZWQuXG4gKlxuICogVGhlIGRhdGEgaW4gYExvY2FsQ2xpZW50U3RhdGVgIGlzIG5vdCByZWFkIGZyb20gV2ViU3RvcmFnZSBhbmQgaW5zdGVhZFxuICogdXBkYXRlZCB2aWEgaXRzIGluc3RhbmNlIG1ldGhvZHMuIFRoZSB1cGRhdGVkIHN0YXRlIGNhbiBiZSBzZXJpYWxpemVkIHZpYVxuICogYHRvV2ViU3RvcmFnZUpTT04oKWAuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG5jbGFzcyBLbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gX3MoKTtcbiAgICB9XG4gICAgZXIodCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmFkZCh0KTtcbiAgICB9XG4gICAgbnIodCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmRlbGV0ZSh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBlbnRyeSBpbnRvIGEgSlNPTi1lbmNvZGVkIGZvcm1hdCB3ZSBjYW4gdXNlIGZvciBXZWJTdG9yYWdlLlxuICAgICAqIERvZXMgbm90IGVuY29kZSBgY2xpZW50SWRgIGFzIGl0IGlzIHBhcnQgb2YgdGhlIGtleSBpbiBXZWJTdG9yYWdlLlxuICAgICAqLyAgICB0cigpIHtcbiAgICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgICAgIGFjdGl2ZVRhcmdldElkczogdGhpcy5hY3RpdmVUYXJnZXRJZHMudG9BcnJheSgpLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgdXNlcyBXZWJTdG9yYWdlICh3aW5kb3cubG9jYWxTdG9yYWdlKSBhcyB0aGVcbiAqIGJhY2tpbmcgc3RvcmUgZm9yIHRoZSBTaGFyZWRDbGllbnRTdGF0ZS4gSXQga2VlcHMgdHJhY2sgb2YgYWxsIGFjdGl2ZVxuICogY2xpZW50cyBhbmQgc3VwcG9ydHMgbW9kaWZpY2F0aW9ucyBvZiB0aGUgbG9jYWwgY2xpZW50J3MgZGF0YS5cbiAqLyBjbGFzcyBHbyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLndpbmRvdyA9IHQsIHRoaXMuSHMgPSBlLCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gbiwgdGhpcy5zciA9IHMsIHRoaXMuc3luY0VuZ2luZSA9IG51bGwsIFxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlSGFuZGxlciA9IG51bGwsIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyID0gbnVsbCwgdGhpcy5pciA9IHRoaXMucnIuYmluZCh0aGlzKSwgXG4gICAgICAgIHRoaXMudXIgPSBuZXcgQnQoWiksIHRoaXMuc3RhcnRlZCA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhcHR1cmVzIFdlYlN0b3JhZ2UgZXZlbnRzIHRoYXQgb2NjdXIgYmVmb3JlIGBzdGFydCgpYCBpcyBjYWxsZWQuIFRoZXNlXG4gICAgICAgICAqIGV2ZW50cyBhcmUgcmVwbGF5ZWQgb25jZSBgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlYCBpcyBzdGFydGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jciA9IFtdO1xuICAgICAgICAvLyBFc2NhcGUgdGhlIHNwZWNpYWwgY2hhcmFjdGVycyBtZW50aW9uZWQgaGVyZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zXG4gICAgICAgIGNvbnN0IHIgPSBuLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiKTtcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gdGhpcy53aW5kb3cubG9jYWxTdG9yYWdlLCB0aGlzLmN1cnJlbnRVc2VyID0gaSwgdGhpcy5hciA9IE1vKHRoaXMucGVyc2lzdGVuY2VLZXksIHRoaXMuc3IpLCBcbiAgICAgICAgdGhpcy5ociA9IFxuICAgICAgICAvKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIHRoZSBjdXJyZW50IHNlcXVlbmNlIG51bWJlci4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGBmaXJlc3RvcmVfc2VxdWVuY2VfbnVtYmVyXyR7dH1gO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovICh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgdGhpcy51ciA9IHRoaXMudXIuaW5zZXJ0KHRoaXMuc3IsIG5ldyBLbyksIHRoaXMubHIgPSBuZXcgUmVnRXhwKGBeZmlyZXN0b3JlX2NsaWVudHNfJHtyfV8oW15fXSopJGApLCBcbiAgICAgICAgdGhpcy5kciA9IG5ldyBSZWdFeHAoYF5maXJlc3RvcmVfbXV0YXRpb25zXyR7cn1fKFxcXFxkKykoPzpfKC4qKSk/JGApLCB0aGlzLl9yID0gbmV3IFJlZ0V4cChgXmZpcmVzdG9yZV90YXJnZXRzXyR7cn1fKFxcXFxkKykkYCksIFxuICAgICAgICB0aGlzLndyID0gXG4gICAgICAgIC8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgdGhlIG9ubGluZSBzdGF0ZSBvZiB0aGUgcHJpbWFyeSB0YWIuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBgZmlyZXN0b3JlX29ubGluZV9zdGF0ZV8ke3R9YDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgV2ViU3RvcmFnZSBwcmVmaXggdGhhdCBwbGF5cyBhcyBhIGV2ZW50IHRvIGluZGljYXRlIHRoZSByZW1vdGUgZG9jdW1lbnRzXG4gICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCBkdWUgdG8gc29tZSBzZWNvbmRhcnkgdGFicyBsb2FkaW5nIGEgYnVuZGxlLlxuICAgICAgICAvLyBmb3JtYXQgb2YgdGhlIGtleSBpczpcbiAgICAgICAgLy8gICAgIGZpcmVzdG9yZV9idW5kbGVfbG9hZGVkX3YyXzxwZXJzaXN0ZW5jZUtleT5cbiAgICAgICAgLy8gVGhlIHZlcnNpb24gZW5kaW5nIHdpdGggXCJ2MlwiIHN0b3JlcyB0aGUgbGlzdCBvZiBtb2RpZmllZCBjb2xsZWN0aW9uIGdyb3Vwcy5cbiAgICAgICAgKHRoaXMucGVyc2lzdGVuY2VLZXkpLCB0aGlzLm1yID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGBmaXJlc3RvcmVfYnVuZGxlX2xvYWRlZF92Ml8ke3R9YDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgV2ViU3RvcmFnZSBrZXkgcHJlZml4IGZvciB0aGUga2V5IHRoYXQgc3RvcmVzIHRoZSBsYXN0IHNlcXVlbmNlIG51bWJlciBhbGxvY2F0ZWQuIFRoZSBrZXlcbiAgICAgICAgLy8gbG9va3MgbGlrZSAnZmlyZXN0b3JlX3NlcXVlbmNlX251bWJlcl88cGVyc2lzdGVuY2VfcHJlZml4PicuXG4gICAgICAgICh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgXG4gICAgICAgIC8vIFJhdGhlciB0aGFuIGFkZGluZyB0aGUgc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgc3RhcnQoKSwgd2UgYWRkIHRoZVxuICAgICAgICAvLyBzdG9yYWdlIG9ic2VydmVyIGR1cmluZyBpbml0aWFsaXphdGlvbi4gVGhpcyBlbnN1cmVzIHRoYXQgd2UgY29sbGVjdFxuICAgICAgICAvLyBldmVudHMgYmVmb3JlIG90aGVyIGNvbXBvbmVudHMgcG9wdWxhdGUgdGhlaXIgaW5pdGlhbCBzdGF0ZSAoZHVyaW5nIHRoZWlyXG4gICAgICAgIC8vIHJlc3BlY3RpdmUgc3RhcnQoKSBjYWxscykuIE90aGVyd2lzZSwgd2UgbWlnaHQgZm9yIGV4YW1wbGUgbWlzcyBhXG4gICAgICAgIC8vIG11dGF0aW9uIHRoYXQgaXMgYWRkZWQgYWZ0ZXIgTG9jYWxTdG9yZSdzIHN0YXJ0KCkgcHJvY2Vzc2VkIHRoZSBleGlzdGluZ1xuICAgICAgICAvLyBtdXRhdGlvbnMgYnV0IGJlZm9yZSB3ZSBvYnNlcnZlIFdlYlN0b3JhZ2UgZXZlbnRzLlxuICAgICAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLCB0aGlzLmlyKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmIFdlYlN0b3JhZ2UgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqLyAgICBzdGF0aWMgQyh0KSB7XG4gICAgICAgIHJldHVybiAhKCF0IHx8ICF0LmxvY2FsU3RvcmFnZSk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgbGlzdCBvZiBleGlzdGluZyBjbGllbnRzIHRvIGJhY2tmaWxsIHRoZSBkYXRhIGluXG4gICAgICAgIC8vIFNoYXJlZENsaWVudFN0YXRlLlxuICAgICAgICBjb25zdCB0ID0gYXdhaXQgdGhpcy5zeW5jRW5naW5lLnZpKCk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XG4gICAgICAgICAgICBpZiAoZSA9PT0gdGhpcy5zcikgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5nZXRJdGVtKE1vKHRoaXMucGVyc2lzdGVuY2VLZXksIGUpKTtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFVvLlppKGUsIHQpO1xuICAgICAgICAgICAgICAgIG4gJiYgKHRoaXMudXIgPSB0aGlzLnVyLmluc2VydChuLmNsaWVudElkLCBuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncigpO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhbiBleGlzdGluZyBvbmxpbmUgc3RhdGUgYW5kIGNhbGwgdGhlIGNhbGxiYWNrIGhhbmRsZXJcbiAgICAgICAgLy8gaWYgYXBwbGljYWJsZS5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKHRoaXMud3IpO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMueXIoZSk7XG4gICAgICAgICAgICB0ICYmIHRoaXMucHIodCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuY3IpIHRoaXMucnIodCk7XG4gICAgICAgIHRoaXMuY3IgPSBbXSwgXG4gICAgICAgIC8vIFJlZ2lzdGVyIGEgd2luZG93IHVubG9hZCBob29rIHRvIHJlbW92ZSB0aGUgY2xpZW50IG1ldGFkYXRhIGVudHJ5IGZyb21cbiAgICAgICAgLy8gV2ViU3RvcmFnZSBldmVuIGlmIGBzaHV0ZG93bigpYCB3YXMgbm90IGNhbGxlZC5cbiAgICAgICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsICgoKSA9PiB0aGlzLnNodXRkb3duKCkpKSwgdGhpcy5zdGFydGVkID0gITA7XG4gICAgfVxuICAgIHdyaXRlU2VxdWVuY2VOdW1iZXIodCkge1xuICAgICAgICB0aGlzLnNldEl0ZW0odGhpcy5ociwgSlNPTi5zdHJpbmdpZnkodCkpO1xuICAgIH1cbiAgICBnZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLklyKHRoaXMudXIpO1xuICAgIH1cbiAgICBpc0FjdGl2ZVF1ZXJ5VGFyZ2V0KHQpIHtcbiAgICAgICAgbGV0IGUgPSAhMTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXIuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIHMuYWN0aXZlVGFyZ2V0SWRzLmhhcyh0KSAmJiAoZSA9ICEwKTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH1cbiAgICBhZGRQZW5kaW5nTXV0YXRpb24odCkge1xuICAgICAgICB0aGlzLlRyKHQsIFwicGVuZGluZ1wiKTtcbiAgICB9XG4gICAgdXBkYXRlTXV0YXRpb25TdGF0ZSh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuVHIodCwgZSwgbiksIFxuICAgICAgICAvLyBPbmNlIGEgZmluYWwgbXV0YXRpb24gcmVzdWx0IGlzIG9ic2VydmVkIGJ5IG90aGVyIGNsaWVudHMsIHRoZXkgbm8gbG9uZ2VyXG4gICAgICAgIC8vIGFjY2VzcyB0aGUgbXV0YXRpb24ncyBtZXRhZGF0YSBlbnRyeS4gU2luY2UgV2ViU3RvcmFnZSByZXBsYXlzIGV2ZW50c1xuICAgICAgICAvLyBpbiBvcmRlciwgaXQgaXMgc2FmZSB0byBkZWxldGUgdGhlIGVudHJ5IHJpZ2h0IGFmdGVyIHVwZGF0aW5nIGl0LlxuICAgICAgICB0aGlzLkVyKHQpO1xuICAgIH1cbiAgICBhZGRMb2NhbFF1ZXJ5VGFyZ2V0KHQpIHtcbiAgICAgICAgbGV0IGUgPSBcIm5vdC1jdXJyZW50XCI7XG4gICAgICAgIC8vIExvb2t1cCBhbiBleGlzdGluZyBxdWVyeSBzdGF0ZSBpZiB0aGUgdGFyZ2V0IElEIHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWRcbiAgICAgICAgLy8gYnkgYW5vdGhlciB0YWJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZVF1ZXJ5VGFyZ2V0KHQpKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oJG8odGhpcy5wZXJzaXN0ZW5jZUtleSwgdCkpO1xuICAgICAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gTG8uWmkodCwgbik7XG4gICAgICAgICAgICAgICAgcyAmJiAoZSA9IHMuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLkFyLmVyKHQpLCB0aGlzLmdyKCksIGU7XG4gICAgfVxuICAgIHJlbW92ZUxvY2FsUXVlcnlUYXJnZXQodCkge1xuICAgICAgICB0aGlzLkFyLm5yKHQpLCB0aGlzLmdyKCk7XG4gICAgfVxuICAgIGlzTG9jYWxRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkFyLmFjdGl2ZVRhcmdldElkcy5oYXModCk7XG4gICAgfVxuICAgIGNsZWFyUXVlcnlTdGF0ZSh0KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbSgkbyh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0KSk7XG4gICAgfVxuICAgIHVwZGF0ZVF1ZXJ5U3RhdGUodCwgZSwgbikge1xuICAgICAgICB0aGlzLlJyKHQsIGUsIG4pO1xuICAgIH1cbiAgICBoYW5kbGVVc2VyQ2hhbmdlKHQsIGUsIG4pIHtcbiAgICAgICAgZS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuRXIodCk7XG4gICAgICAgIH0pKSwgdGhpcy5jdXJyZW50VXNlciA9IHQsIG4uZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZFBlbmRpbmdNdXRhdGlvbih0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXRPbmxpbmVTdGF0ZSh0KSB7XG4gICAgICAgIHRoaXMuYnIodCk7XG4gICAgfVxuICAgIG5vdGlmeUJ1bmRsZUxvYWRlZCh0KSB7XG4gICAgICAgIHRoaXMuUHIodCk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgJiYgKHRoaXMud2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdG9yYWdlXCIsIHRoaXMuaXIpLCB0aGlzLnJlbW92ZUl0ZW0odGhpcy5hciksIFxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSAhMSk7XG4gICAgfVxuICAgIGdldEl0ZW0odCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0odCk7XG4gICAgICAgIHJldHVybiBDKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJSRUFEXCIsIHQsIGUpLCBlO1xuICAgIH1cbiAgICBzZXRJdGVtKHQsIGUpIHtcbiAgICAgICAgQyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiU0VUXCIsIHQsIGUpLCB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0LCBlKTtcbiAgICB9XG4gICAgcmVtb3ZlSXRlbSh0KSB7XG4gICAgICAgIEMoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIlJFTU9WRVwiLCB0KSwgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0odCk7XG4gICAgfVxuICAgIHJyKHQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhlIGZ1bmN0aW9uIGlzIHR5cGVkIHRvIHRha2UgRXZlbnQgdG8gYmUgaW50ZXJmYWNlLWNvbXBhdGlibGUgd2l0aFxuICAgICAgICAvLyBgV2luZG93LmFkZEV2ZW50TGlzdGVuZXJgLlxuICAgICAgICBjb25zdCBlID0gdDtcbiAgICAgICAgaWYgKGUuc3RvcmFnZUFyZWEgPT09IHRoaXMuc3RvcmFnZSkge1xuICAgICAgICAgICAgaWYgKEMoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkVWRU5UXCIsIGUua2V5LCBlLm5ld1ZhbHVlKSwgZS5rZXkgPT09IHRoaXMuYXIpIHJldHVybiB2b2lkIHgoXCJSZWNlaXZlZCBXZWJTdG9yYWdlIG5vdGlmaWNhdGlvbiBmb3IgbG9jYWwgY2hhbmdlLiBBbm90aGVyIGNsaWVudCBtaWdodCBoYXZlIGdhcmJhZ2UtY29sbGVjdGVkIG91ciBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuSHMuZW5xdWV1ZVJldHJ5YWJsZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGUua2V5KSBpZiAodGhpcy5sci50ZXN0KGUua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gZS5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnZyKGUua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Wcih0LCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5TcihlLmtleSwgZS5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHJldHVybiB0aGlzLlZyKHQuY2xpZW50SWQsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZHIudGVzdChlLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBlLm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuRHIoZS5rZXksIGUubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSByZXR1cm4gdGhpcy5Dcih0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9yLnRlc3QoZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZS5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLk5yKGUua2V5LCBlLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkgcmV0dXJuIHRoaXMua3IodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09IHRoaXMud3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBlLm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMueXIoZS5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHJldHVybiB0aGlzLnByKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSB0aGlzLmhyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gT3QuYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gdCkgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IEpTT04ucGFyc2UodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE0oXCJudW1iZXJcIiA9PSB0eXBlb2YgbiksIGUgPSBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeChcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiRmFpbGVkIHRvIHJlYWQgc2VxdWVuY2UgbnVtYmVyIGZyb20gV2ViU3RvcmFnZVwiLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAqIGBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZWAgaXMgYSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgU2hhcmVkQ2xpZW50U3RhdGUgZm9yXG4gKiBjbGllbnRzIHVzaW5nIG1lbW9yeSBwZXJzaXN0ZW5jZS4gVGhlIHN0YXRlIGluIHRoaXMgY2xhc3MgcmVtYWlucyBmdWxseVxuICogaXNvbGF0ZWQgYW5kIG5vIHN5bmNocm9uaXphdGlvbiBpcyBwZXJmb3JtZWQuXG4gKi8gKGUubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdCAhPT0gT3QuYXQgJiYgdGhpcy5zZXF1ZW5jZU51bWJlckhhbmRsZXIodCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09IHRoaXMubXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLk9yKGUubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodC5tYXAoKHQgPT4gdGhpcy5zeW5jRW5naW5lLk1yKHQpKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuY3IucHVzaChlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgQXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyLmdldCh0aGlzLnNyKTtcbiAgICB9XG4gICAgZ3IoKSB7XG4gICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLmFyLCB0aGlzLkFyLnRyKCkpO1xuICAgIH1cbiAgICBUcih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgQm8odGhpcy5jdXJyZW50VXNlciwgdCwgZSwgbiksIGkgPSBGbyh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0aGlzLmN1cnJlbnRVc2VyLCB0KTtcbiAgICAgICAgdGhpcy5zZXRJdGVtKGksIHMudHIoKSk7XG4gICAgfVxuICAgIEVyKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IEZvKHRoaXMucGVyc2lzdGVuY2VLZXksIHRoaXMuY3VycmVudFVzZXIsIHQpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oZSk7XG4gICAgfVxuICAgIGJyKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHtcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLnNyLFxuICAgICAgICAgICAgb25saW5lU3RhdGU6IHRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0odGhpcy53ciwgSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgIH1cbiAgICBScih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSAkbyh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0KSwgaSA9IG5ldyBMbyh0LCBlLCBuKTtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHMsIGkudHIoKSk7XG4gICAgfVxuICAgIFByKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20odCkpO1xuICAgICAgICB0aGlzLnNldEl0ZW0odGhpcy5tciwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGNsaWVudCBzdGF0ZSBrZXkgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyBudWxsIGlmIHRoZSBrZXkgZG9lcyBub3RcbiAgICAgKiBtYXRjaCB0aGUgZXhwZWN0ZWQga2V5IGZvcm1hdC5cbiAgICAgKi8gICAgdnIodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5sci5leGVjKHQpO1xuICAgICAgICByZXR1cm4gZSA/IGVbMV0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBjbGllbnQgc3RhdGUgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlIGNvdWxkIG5vdFxuICAgICAqIGJlIHBhcnNlZC5cbiAgICAgKi8gICAgU3IodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy52cih0KTtcbiAgICAgICAgcmV0dXJuIFVvLlppKG4sIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBtdXRhdGlvbiBiYXRjaCBzdGF0ZSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqLyAgICBEcih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRyLmV4ZWModCksIHMgPSBOdW1iZXIoblsxXSksIGkgPSB2b2lkIDAgIT09IG5bMl0gPyBuWzJdIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIEJvLlppKG5ldyBQKGkpLCBzLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgcXVlcnkgdGFyZ2V0IHN0YXRlIGZyb20gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cbiAgICAgKi8gICAgTnIodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5fci5leGVjKHQpLCBzID0gTnVtYmVyKG5bMV0pO1xuICAgICAgICByZXR1cm4gTG8uWmkocywgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhbiBvbmxpbmUgc3RhdGUgZnJvbSBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqLyAgICB5cih0KSB7XG4gICAgICAgIHJldHVybiBxby5aaSh0KTtcbiAgICB9XG4gICAgT3IodCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0KTtcbiAgICB9XG4gICAgYXN5bmMgQ3IodCkge1xuICAgICAgICBpZiAodC51c2VyLnVpZCA9PT0gdGhpcy5jdXJyZW50VXNlci51aWQpIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuRnIodC5iYXRjaElkLCB0LnN0YXRlLCB0LmVycm9yKTtcbiAgICAgICAgQyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIGBJZ25vcmluZyBtdXRhdGlvbiBmb3Igbm9uLWFjdGl2ZSB1c2VyICR7dC51c2VyLnVpZH1gKTtcbiAgICB9XG4gICAga3IodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jRW5naW5lLiRyKHQudGFyZ2V0SWQsIHQuc3RhdGUsIHQuZXJyb3IpO1xuICAgIH1cbiAgICBWcih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlID8gdGhpcy51ci5pbnNlcnQodCwgZSkgOiB0aGlzLnVyLnJlbW92ZSh0KSwgcyA9IHRoaXMuSXIodGhpcy51ciksIGkgPSB0aGlzLklyKG4pLCByID0gW10sIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIGkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBzLmhhcyh0KSB8fCByLnB1c2godCk7XG4gICAgICAgIH0pKSwgcy5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIGkuaGFzKHQpIHx8IG8ucHVzaCh0KTtcbiAgICAgICAgfSkpLCB0aGlzLnN5bmNFbmdpbmUuQnIociwgbykudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51ciA9IG47XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcHIodCkge1xuICAgICAgICAvLyBXZSBjaGVjayB3aGV0aGVyIHRoZSBjbGllbnQgdGhhdCB3cm90ZSB0aGlzIG9ubGluZSBzdGF0ZSBpcyBzdGlsbCBhY3RpdmVcbiAgICAgICAgLy8gYnkgY29tcGFyaW5nIGl0cyBjbGllbnQgSUQgdG8gdGhlIGxpc3Qgb2YgY2xpZW50cyBrZXB0IGFjdGl2ZSBpblxuICAgICAgICAvLyBJbmRleGVkRGIuIElmIGEgY2xpZW50IGRvZXMgbm90IHVwZGF0ZSB0aGVpciBJbmRleGVkRGIgY2xpZW50IHN0YXRlXG4gICAgICAgIC8vIHdpdGhpbiA1IHNlY29uZHMsIGl0IGlzIGNvbnNpZGVyZWQgaW5hY3RpdmUgYW5kIHdlIGRvbid0IGVtaXQgYW4gb25saW5lXG4gICAgICAgIC8vIHN0YXRlIGV2ZW50LlxuICAgICAgICB0aGlzLnVyLmdldCh0LmNsaWVudElkKSAmJiB0aGlzLm9ubGluZVN0YXRlSGFuZGxlcih0Lm9ubGluZVN0YXRlKTtcbiAgICB9XG4gICAgSXIodCkge1xuICAgICAgICBsZXQgZSA9IF9zKCk7XG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBlID0gZS51bmlvbldpdGgobi5hY3RpdmVUYXJnZXRJZHMpO1xuICAgICAgICB9KSksIGU7XG4gICAgfVxufVxuXG5jbGFzcyBRbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuTHIgPSBuZXcgS28sIHRoaXMuVXIgPSB7fSwgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBudWxsLCB0aGlzLnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IG51bGw7XG4gICAgfVxuICAgIGFkZFBlbmRpbmdNdXRhdGlvbih0KSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH1cbiAgICB1cGRhdGVNdXRhdGlvblN0YXRlKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIGFkZExvY2FsUXVlcnlUYXJnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Mci5lcih0KSwgdGhpcy5Vclt0XSB8fCBcIm5vdC1jdXJyZW50XCI7XG4gICAgfVxuICAgIHVwZGF0ZVF1ZXJ5U3RhdGUodCwgZSwgbikge1xuICAgICAgICB0aGlzLlVyW3RdID0gZTtcbiAgICB9XG4gICAgcmVtb3ZlTG9jYWxRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIHRoaXMuTHIubnIodCk7XG4gICAgfVxuICAgIGlzTG9jYWxRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxyLmFjdGl2ZVRhcmdldElkcy5oYXModCk7XG4gICAgfVxuICAgIGNsZWFyUXVlcnlTdGF0ZSh0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLlVyW3RdO1xuICAgIH1cbiAgICBnZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxyLmFjdGl2ZVRhcmdldElkcztcbiAgICB9XG4gICAgaXNBY3RpdmVRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxyLmFjdGl2ZVRhcmdldElkcy5oYXModCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5MciA9IG5ldyBLbywgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGhhbmRsZVVzZXJDaGFuZ2UodCwgZSwgbikge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgc2V0T25saW5lU3RhdGUodCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgc2h1dGRvd24oKSB7fVxuICAgIHdyaXRlU2VxdWVuY2VOdW1iZXIodCkge31cbiAgICBub3RpZnlCdW5kbGVMb2FkZWQodCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIGpvIHtcbiAgICBxcih0KSB7XG4gICAgICAgIC8vIE5vLW9wLlxuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgLy8gTm8tb3AuXG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gUmVmZXJlbmNlcyB0byBgd2luZG93YCBhcmUgZ3VhcmRlZCBieSBCcm93c2VyQ29ubmVjdGl2aXR5TW9uaXRvci5pc0F2YWlsYWJsZSgpXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8qKlxuICogQnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBDb25uZWN0aXZpdHlNb25pdG9yLlxuICovXG5jbGFzcyBXbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuS3IgPSAoKSA9PiB0aGlzLkdyKCksIHRoaXMuUXIgPSAoKSA9PiB0aGlzLmpyKCksIHRoaXMuV3IgPSBbXSwgdGhpcy56cigpO1xuICAgIH1cbiAgICBxcih0KSB7XG4gICAgICAgIHRoaXMuV3IucHVzaCh0KTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIHRoaXMuS3IpLCB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5Rcik7XG4gICAgfVxuICAgIHpyKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCB0aGlzLktyKSwgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMuUXIpO1xuICAgIH1cbiAgICBHcigpIHtcbiAgICAgICAgQyhcIkNvbm5lY3Rpdml0eU1vbml0b3JcIiwgXCJOZXR3b3JrIGNvbm5lY3Rpdml0eSBjaGFuZ2VkOiBBVkFJTEFCTEVcIik7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLldyKSB0KDAgLyogQVZBSUxBQkxFICovKTtcbiAgICB9XG4gICAganIoKSB7XG4gICAgICAgIEMoXCJDb25uZWN0aXZpdHlNb25pdG9yXCIsIFwiTmV0d29yayBjb25uZWN0aXZpdHkgY2hhbmdlZDogVU5BVkFJTEFCTEVcIik7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLldyKSB0KDEgLyogVU5BVkFJTEFCTEUgKi8pO1xuICAgIH1cbiAgICAvLyBUT0RPKGNoZW5icmlhbik6IENvbnNpZGVyIHBhc3NpbmcgaW4gd2luZG93IGVpdGhlciBpbnRvIHRoaXMgY29tcG9uZW50IG9yXG4gICAgLy8gaGVyZSBmb3IgdGVzdGluZyB2aWEgRmFrZVdpbmRvdy5cbiAgICAvKiogQ2hlY2tzIHRoYXQgYWxsIHVzZWQgYXR0cmlidXRlcyBvZiB3aW5kb3cgYXJlIGF2YWlsYWJsZS4gKi9cbiAgICBzdGF0aWMgQygpIHtcbiAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiB2b2lkIDAgIT09IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICYmIHZvaWQgMCAhPT0gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXI7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCB6byA9IHtcbiAgICBCYXRjaEdldERvY3VtZW50czogXCJiYXRjaEdldFwiLFxuICAgIENvbW1pdDogXCJjb21taXRcIixcbiAgICBSdW5RdWVyeTogXCJydW5RdWVyeVwiLFxuICAgIFJ1bkFnZ3JlZ2F0aW9uUXVlcnk6IFwicnVuQWdncmVnYXRpb25RdWVyeVwiXG59O1xuXG4vKipcbiAqIE1hcHMgUlBDIG5hbWVzIHRvIHRoZSBjb3JyZXNwb25kaW5nIFJFU1QgZW5kcG9pbnQgbmFtZS5cbiAqXG4gKiBXZSB1c2UgYXJyYXkgbm90YXRpb24gdG8gYXZvaWQgbWFuZ2xpbmcuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFByb3ZpZGVzIGEgc2ltcGxlIGhlbHBlciBjbGFzcyB0aGF0IGltcGxlbWVudHMgdGhlIFN0cmVhbSBpbnRlcmZhY2UgdG9cbiAqIGJyaWRnZSB0byBvdGhlciBpbXBsZW1lbnRhdGlvbnMgdGhhdCBhcmUgc3RyZWFtcyBidXQgZG8gbm90IGltcGxlbWVudCB0aGVcbiAqIGludGVyZmFjZS4gVGhlIHN0cmVhbSBjYWxsYmFja3MgYXJlIGludm9rZWQgd2l0aCB0aGUgY2FsbE9uLi4uIG1ldGhvZHMuXG4gKi9cbmNsYXNzIEhvIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuSHIgPSB0LkhyLCB0aGlzLkpyID0gdC5KcjtcbiAgICB9XG4gICAgWXIodCkge1xuICAgICAgICB0aGlzLlhyID0gdDtcbiAgICB9XG4gICAgWnIodCkge1xuICAgICAgICB0aGlzLmVvID0gdDtcbiAgICB9XG4gICAgb25NZXNzYWdlKHQpIHtcbiAgICAgICAgdGhpcy5ubyA9IHQ7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLkpyKCk7XG4gICAgfVxuICAgIHNlbmQodCkge1xuICAgICAgICB0aGlzLkhyKHQpO1xuICAgIH1cbiAgICBzbygpIHtcbiAgICAgICAgdGhpcy5YcigpO1xuICAgIH1cbiAgICBpbyh0KSB7XG4gICAgICAgIHRoaXMuZW8odCk7XG4gICAgfVxuICAgIHJvKHQpIHtcbiAgICAgICAgdGhpcy5ubyh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIEpvIGV4dGVuZHMgXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBSZXN0LWJhc2VkIGNvbm5lY3Rpb25zIHRvIHRoZSBiYWNrZW5kIChXZWJDaGFubmVsIGFuZFxuICogSFRUUCkuXG4gKi9cbmNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuZGF0YWJhc2VJbmZvID0gdCwgdGhpcy5kYXRhYmFzZUlkID0gdC5kYXRhYmFzZUlkO1xuICAgICAgICBjb25zdCBlID0gdC5zc2wgPyBcImh0dHBzXCIgOiBcImh0dHBcIjtcbiAgICAgICAgdGhpcy5vbyA9IGUgKyBcIjovL1wiICsgdC5ob3N0LCB0aGlzLnVvID0gXCJwcm9qZWN0cy9cIiArIHRoaXMuZGF0YWJhc2VJZC5wcm9qZWN0SWQgKyBcIi9kYXRhYmFzZXMvXCIgKyB0aGlzLmRhdGFiYXNlSWQuZGF0YWJhc2UgKyBcIi9kb2N1bWVudHNcIjtcbiAgICB9XG4gICAgZ2V0IGNvKCkge1xuICAgICAgICAvLyBCb3RoIGBpbnZva2VSUEMoKWAgYW5kIGBpbnZva2VTdHJlYW1pbmdSUEMoKWAgdXNlIHRoZWlyIGBwYXRoYCBhcmd1bWVudHMgdG8gZGV0ZXJtaW5lXG4gICAgICAgIC8vIHdoZXJlIHRvIHJ1biB0aGUgcXVlcnksIGFuZCBleHBlY3QgdGhlIGByZXF1ZXN0YCB0byBOT1Qgc3BlY2lmeSB0aGUgXCJwYXRoXCIuXG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgYW8odCwgZSwgbiwgcywgaSkge1xuICAgICAgICBjb25zdCByID0gdGhpcy5obyh0LCBlKTtcbiAgICAgICAgQyhcIlJlc3RDb25uZWN0aW9uXCIsIFwiU2VuZGluZzogXCIsIHIsIG4pO1xuICAgICAgICBjb25zdCBvID0ge307XG4gICAgICAgIHJldHVybiB0aGlzLmxvKG8sIHMsIGkpLCB0aGlzLmZvKHQsIHIsIG8sIG4pLnRoZW4oKHQgPT4gKEMoXCJSZXN0Q29ubmVjdGlvblwiLCBcIlJlY2VpdmVkOiBcIiwgdCksIFxuICAgICAgICB0KSksIChlID0+IHtcbiAgICAgICAgICAgIHRocm93IE4oXCJSZXN0Q29ubmVjdGlvblwiLCBgJHt0fSBmYWlsZWQgd2l0aCBlcnJvcjogYCwgZSwgXCJ1cmw6IFwiLCByLCBcInJlcXVlc3Q6XCIsIG4pLCBcbiAgICAgICAgICAgIGU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgX28odCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICAvLyBUaGUgUkVTVCBBUEkgYXV0b21hdGljYWxseSBhZ2dyZWdhdGVzIGFsbCBvZiB0aGUgc3RyZWFtZWQgcmVzdWx0cywgc28gd2VcbiAgICAgICAgLy8gY2FuIGp1c3QgdXNlIHRoZSBub3JtYWwgaW52b2tlKCkgbWV0aG9kLlxuICAgICAgICByZXR1cm4gdGhpcy5hbyh0LCBlLCBuLCBzLCBpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgdGhlIGhlYWRlcnMgZm9yIGEgcmVxdWVzdCwgYWRkaW5nIGFueSBhdXRob3JpemF0aW9uIHRva2VuIGlmXG4gICAgICogcHJlc2VudCBhbmQgYW55IGFkZGl0aW9uYWwgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAgICovICAgIGxvKHQsIGUsIG4pIHtcbiAgICAgICAgdFtcIlgtR29vZy1BcGktQ2xpZW50XCJdID0gXCJnbC1qcy8gZmlyZS9cIiArIHYsIFxuICAgICAgICAvLyBDb250ZW50LVR5cGU6IHRleHQvcGxhaW4gd2lsbCBhdm9pZCBwcmVmbGlnaHQgcmVxdWVzdHMgd2hpY2ggbWlnaHRcbiAgICAgICAgLy8gbWVzcyB3aXRoIENPUlMgYW5kIHJlZGlyZWN0cyBieSBwcm94aWVzLiBJZiB3ZSBhZGQgY3VzdG9tIGhlYWRlcnNcbiAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIGNoYW5nZSB0aGlzIGNvZGUgdG8gcG90ZW50aWFsbHkgdXNlIHRoZSAkaHR0cE92ZXJ3cml0ZVxuICAgICAgICAvLyBwYXJhbWV0ZXIgc3VwcG9ydGVkIGJ5IEVTRiB0byBhdm9pZCB0cmlnZ2VyaW5nIHByZWZsaWdodCByZXF1ZXN0cy5cbiAgICAgICAgdFtcIkNvbnRlbnQtVHlwZVwiXSA9IFwidGV4dC9wbGFpblwiLCB0aGlzLmRhdGFiYXNlSW5mby5hcHBJZCAmJiAodFtcIlgtRmlyZWJhc2UtR01QSURcIl0gPSB0aGlzLmRhdGFiYXNlSW5mby5hcHBJZCksIFxuICAgICAgICBlICYmIGUuaGVhZGVycy5mb3JFYWNoKCgoZSwgbikgPT4gdFtuXSA9IGUpKSwgbiAmJiBuLmhlYWRlcnMuZm9yRWFjaCgoKGUsIG4pID0+IHRbbl0gPSBlKSk7XG4gICAgfVxuICAgIGhvKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHpvW3RdO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vb30vdjEvJHtlfToke259YDtcbiAgICB9XG59IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKHQpLCB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcgPSB0LmZvcmNlTG9uZ1BvbGxpbmcsIHRoaXMuYXV0b0RldGVjdExvbmdQb2xsaW5nID0gdC5hdXRvRGV0ZWN0TG9uZ1BvbGxpbmcsIFxuICAgICAgICB0aGlzLnVzZUZldGNoU3RyZWFtcyA9IHQudXNlRmV0Y2hTdHJlYW1zO1xuICAgIH1cbiAgICBmbyh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKGksIHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgWGhySW87XG4gICAgICAgICAgICBvLnNldFdpdGhDcmVkZW50aWFscyghMCksIG8ubGlzdGVuT25jZShFdmVudFR5cGUuQ09NUExFVEUsICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvLmdldExhc3RFcnJvckNvZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLk5PX0VSUk9SOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG8uZ2V0UmVzcG9uc2VKc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDKFwiQ29ubmVjdGlvblwiLCBcIlhIUiByZWNlaXZlZDpcIiwgSlNPTi5zdHJpbmdpZnkoZSkpLCBpKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5USU1FT1VUOlxuICAgICAgICAgICAgICAgICAgICAgICAgQyhcIkNvbm5lY3Rpb25cIiwgJ1JQQyBcIicgKyB0ICsgJ1wiIHRpbWVkIG91dCcpLCByKG5ldyBMKEIuREVBRExJTkVfRVhDRUVERUQsIFwiUmVxdWVzdCB0aW1lIG91dFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLkhUVFBfRVJST1I6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gby5nZXRTdGF0dXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDKFwiQ29ubmVjdGlvblwiLCAnUlBDIFwiJyArIHQgKyAnXCIgZmFpbGVkIHdpdGggc3RhdHVzOicsIG4sIFwicmVzcG9uc2UgdGV4dDpcIiwgby5nZXRSZXNwb25zZVRleHQoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gby5nZXRSZXNwb25zZUpzb24oKS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiB0LnN0YXR1cyAmJiB0Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXy9nLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhCKS5pbmRleE9mKGUpID49IDAgPyBlIDogQi5VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHQuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcihuZXcgTChlLCB0Lm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcihuZXcgTChCLlVOS05PV04sIFwiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1cyBcIiArIG8uZ2V0U3RhdHVzKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmVkIGFuIEhUVFBfRVJST1IgYnV0IHRoZXJlJ3Mgbm8gc3RhdHVzIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG1vc3QgcHJvYmFibHkgYSBjb25uZWN0aW9uIGlzc3VlXG4gICAgICAgICAgICAgICAgICAgICAgICByKG5ldyBMKEIuVU5BVkFJTEFCTEUsIFwiQ29ubmVjdGlvbiBmYWlsZWQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIE8oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIEMoXCJDb25uZWN0aW9uXCIsICdSUEMgXCInICsgdCArICdcIiBjb21wbGV0ZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgdSA9IEpTT04uc3RyaW5naWZ5KHMpO1xuICAgICAgICAgICAgby5zZW5kKGUsIFwiUE9TVFwiLCB1LCBuLCAxNSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgd28odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gWyB0aGlzLm9vLCBcIi9cIiwgXCJnb29nbGUuZmlyZXN0b3JlLnYxLkZpcmVzdG9yZVwiLCBcIi9cIiwgdCwgXCIvY2hhbm5lbFwiIF0sIGkgPSBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0KCksIHIgPSBnZXRTdGF0RXZlbnRUYXJnZXQoKSwgbyA9IHtcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIGZvciBiYWNrZW5kIHN0aWNraW5lc3MsIHJvdXRpbmcgYmVoYXZpb3IgaXMgYmFzZWQgb24gdGhpc1xuICAgICAgICAgICAgLy8gcGFyYW1ldGVyLlxuICAgICAgICAgICAgaHR0cFNlc3Npb25JZFBhcmFtOiBcImdzZXNzaW9uaWRcIixcbiAgICAgICAgICAgIGluaXRNZXNzYWdlSGVhZGVyczoge30sXG4gICAgICAgICAgICBtZXNzYWdlVXJsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBwYXJhbSBpcyB1c2VkIHRvIGltcHJvdmUgcm91dGluZyBhbmQgcHJvamVjdCBpc29sYXRpb24gYnkgdGhlXG4gICAgICAgICAgICAgICAgLy8gYmFja2VuZCBhbmQgbXVzdCBiZSBpbmNsdWRlZCBpbiBldmVyeSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIGRhdGFiYXNlOiBgcHJvamVjdHMvJHt0aGlzLmRhdGFiYXNlSWQucHJvamVjdElkfS9kYXRhYmFzZXMvJHt0aGlzLmRhdGFiYXNlSWQuZGF0YWJhc2V9YFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbmRSYXdKc29uOiAhMCxcbiAgICAgICAgICAgIHN1cHBvcnRzQ3Jvc3NEb21haW5YaHI6ICEwLFxuICAgICAgICAgICAgaW50ZXJuYWxDaGFubmVsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgLy8gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGltZW91dCAocmFuZG9taXplZCBiZXR3ZWVuIDEwLTIwIHNlY29uZHMpIHNpbmNlXG4gICAgICAgICAgICAgICAgLy8gYSBsYXJnZSB3cml0ZSBiYXRjaCBvbiBhIHNsb3cgaW50ZXJuZXQgY29ubmVjdGlvbiBtYXkgdGFrZSBhIGxvbmdcbiAgICAgICAgICAgICAgICAvLyB0aW1lIHRvIHNlbmQgdG8gdGhlIGJhY2tlbmQuIFJhdGhlciB0aGFuIGhhdmUgV2ViQ2hhbm5lbCBpbXBvc2UgYVxuICAgICAgICAgICAgICAgIC8vIHRpZ2h0IHRpbWVvdXQgd2hpY2ggY291bGQgbGVhZCB0byBpbmZpbml0ZSB0aW1lb3V0cyBhbmQgcmV0cmllcywgd2VcbiAgICAgICAgICAgICAgICAvLyBzZXQgaXQgdmVyeSBsYXJnZSAoNS0xMCBtaW51dGVzKSBhbmQgcmVseSBvbiB0aGUgYnJvd3NlcidzIGJ1aWx0aW5cbiAgICAgICAgICAgICAgICAvLyB0aW1lb3V0cyB0byBraWNrIGluIGlmIHRoZSByZXF1ZXN0IGlzbid0IHdvcmtpbmcuXG4gICAgICAgICAgICAgICAgZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zOiA2ZTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JjZUxvbmdQb2xsaW5nOiB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcsXG4gICAgICAgICAgICBkZXRlY3RCdWZmZXJpbmdQcm94eTogdGhpcy5hdXRvRGV0ZWN0TG9uZ1BvbGxpbmdcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51c2VGZXRjaFN0cmVhbXMgJiYgKG8ueG1sSHR0cEZhY3RvcnkgPSBuZXcgRmV0Y2hYbWxIdHRwRmFjdG9yeSh7fSkpLCB0aGlzLmxvKG8uaW5pdE1lc3NhZ2VIZWFkZXJzLCBlLCBuKSwgXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGN1c3RvbSBoZWFkZXJzIHdlIGp1c3QgYWRkZWQgdG8gcmVxdWVzdC5pbml0TWVzc2FnZUhlYWRlcnNcbiAgICAgICAgLy8gKEF1dGhvcml6YXRpb24sIGV0Yy4pIHdpbGwgdHJpZ2dlciB0aGUgYnJvd3NlciB0byBtYWtlIGEgQ09SUyBwcmVmbGlnaHRcbiAgICAgICAgLy8gcmVxdWVzdCBiZWNhdXNlIHRoZSBYSFIgd2lsbCBubyBsb25nZXIgbWVldCB0aGUgY3JpdGVyaWEgZm9yIGEgXCJzaW1wbGVcIlxuICAgICAgICAvLyBDT1JTIHJlcXVlc3Q6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQ09SUyNTaW1wbGVfcmVxdWVzdHNcbiAgICAgICAgLy8gVGhlcmVmb3JlIHRvIGF2b2lkIHRoZSBDT1JTIHByZWZsaWdodCByZXF1ZXN0IChhbiBleHRyYSBuZXR3b3JrXG4gICAgICAgIC8vIHJvdW5kdHJpcCksIHdlIHVzZSB0aGUgZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzIG9wdGlvbiB0byBzcGVjaWZ5IHRoYXRcbiAgICAgICAgLy8gdGhlIGhlYWRlcnMgc2hvdWxkIGluc3RlYWQgYmUgZW5jb2RlZCBpbiB0aGUgcmVxdWVzdCdzIFBPU1QgcGF5bG9hZCxcbiAgICAgICAgLy8gd2hpY2ggaXMgcmVjb2duaXplZCBieSB0aGUgd2ViY2hhbm5lbCBiYWNrZW5kLlxuICAgICAgICBvLmVuY29kZUluaXRNZXNzYWdlSGVhZGVycyA9ICEwO1xuICAgICAgICBjb25zdCB1ID0gcy5qb2luKFwiXCIpO1xuICAgICAgICBDKFwiQ29ubmVjdGlvblwiLCBcIkNyZWF0aW5nIFdlYkNoYW5uZWw6IFwiICsgdSwgbyk7XG4gICAgICAgIGNvbnN0IGMgPSBpLmNyZWF0ZVdlYkNoYW5uZWwodSwgbyk7XG4gICAgICAgIC8vIFdlYkNoYW5uZWwgc3VwcG9ydHMgc2VuZGluZyB0aGUgZmlyc3QgbWVzc2FnZSB3aXRoIHRoZSBoYW5kc2hha2UgLSBzYXZpbmdcbiAgICAgICAgLy8gYSBuZXR3b3JrIHJvdW5kIHRyaXAuIEhvd2V2ZXIsIGl0IHdpbGwgaGF2ZSB0byBjYWxsIHNlbmQgaW4gdGhlIHNhbWVcbiAgICAgICAgLy8gSlMgZXZlbnQgbG9vcCBhcyBvcGVuLiBJbiBvcmRlciB0byBlbmZvcmNlIHRoaXMsIHdlIGRlbGF5IGFjdHVhbGx5XG4gICAgICAgIC8vIG9wZW5pbmcgdGhlIFdlYkNoYW5uZWwgdW50aWwgc2VuZCBpcyBjYWxsZWQuIFdoZXRoZXIgd2UgaGF2ZSBjYWxsZWRcbiAgICAgICAgLy8gb3BlbiBpcyB0cmFja2VkIHdpdGggdGhpcyB2YXJpYWJsZS5cbiAgICAgICAgICAgICAgICBsZXQgYSA9ICExLCBoID0gITE7XG4gICAgICAgIC8vIEEgZmxhZyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RyZWFtIHdhcyBjbG9zZWQgKGJ5IHVzIG9yIHRocm91Z2ggYW5cbiAgICAgICAgLy8gZXJyb3IvY2xvc2UgZXZlbnQpIHRvIGF2b2lkIGRlbGl2ZXJpbmcgbXVsdGlwbGUgY2xvc2UgZXZlbnRzIG9yIHNlbmRpbmdcbiAgICAgICAgLy8gb24gYSBjbG9zZWQgc3RyZWFtXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IG5ldyBIbyh7XG4gICAgICAgICAgICBIcjogdCA9PiB7XG4gICAgICAgICAgICAgICAgaCA/IEMoXCJDb25uZWN0aW9uXCIsIFwiTm90IHNlbmRpbmcgYmVjYXVzZSBXZWJDaGFubmVsIGlzIGNsb3NlZDpcIiwgdCkgOiAoYSB8fCAoQyhcIkNvbm5lY3Rpb25cIiwgXCJPcGVuaW5nIFdlYkNoYW5uZWwgdHJhbnNwb3J0LlwiKSwgXG4gICAgICAgICAgICAgICAgYy5vcGVuKCksIGEgPSAhMCksIEMoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCBzZW5kaW5nOlwiLCB0KSwgYy5zZW5kKHQpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBKcjogKCkgPT4gYy5jbG9zZSgpXG4gICAgICAgIH0pLCBmID0gKHQsIGUsIG4pID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogY2xvc3VyZSB0eXBpbmcgc2VlbXMgYnJva2VuIGJlY2F1c2UgV2ViQ2hhbm5lbCBkb2VzXG4gICAgICAgICAgICAvLyBub3QgaW1wbGVtZW50IGdvb2cuZXZlbnRzLkxpc3RlbmFibGVcbiAgICAgICAgICAgIHQubGlzdGVuKGUsICh0ID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuKHQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdDtcbiAgICAgICAgICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2xvc3VyZSBldmVudHMgYXJlIGd1YXJkZWQgYW5kIGV4Y2VwdGlvbnMgYXJlIHN3YWxsb3dlZCwgc28gY2F0Y2ggYW55XG4gICAgICAgIC8vIGV4Y2VwdGlvbiBhbmQgcmV0aHJvdyB1c2luZyBhIHNldFRpbWVvdXQgc28gdGhleSBiZWNvbWUgdmlzaWJsZSBhZ2Fpbi5cbiAgICAgICAgLy8gTm90ZSB0aGF0IGV2ZW50dWFsbHkgdGhpcyBmdW5jdGlvbiBjb3VsZCBnbyBhd2F5IGlmIHdlIGFyZSBjb25maWRlbnRcbiAgICAgICAgLy8gZW5vdWdoIHRoZSBjb2RlIGlzIGV4Y2VwdGlvbiBmcmVlLlxuICAgICAgICAgICAgICAgIHJldHVybiBmKGMsIFdlYkNoYW5uZWwuRXZlbnRUeXBlLk9QRU4sICgoKSA9PiB7XG4gICAgICAgICAgICBoIHx8IEMoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCB0cmFuc3BvcnQgb3BlbmVkLlwiKTtcbiAgICAgICAgfSkpLCBmKGMsIFdlYkNoYW5uZWwuRXZlbnRUeXBlLkNMT1NFLCAoKCkgPT4ge1xuICAgICAgICAgICAgaCB8fCAoaCA9ICEwLCBDKFwiQ29ubmVjdGlvblwiLCBcIldlYkNoYW5uZWwgdHJhbnNwb3J0IGNsb3NlZFwiKSwgbC5pbygpKTtcbiAgICAgICAgfSkpLCBmKGMsIFdlYkNoYW5uZWwuRXZlbnRUeXBlLkVSUk9SLCAodCA9PiB7XG4gICAgICAgICAgICBoIHx8IChoID0gITAsIE4oXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCB0cmFuc3BvcnQgZXJyb3JlZDpcIiwgdCksIGwuaW8obmV3IEwoQi5VTkFWQUlMQUJMRSwgXCJUaGUgb3BlcmF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWRcIikpKTtcbiAgICAgICAgfSkpLCBmKGMsIFdlYkNoYW5uZWwuRXZlbnRUeXBlLk1FU1NBR0UsICh0ID0+IHtcbiAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZGF0YVswXTtcbiAgICAgICAgICAgICAgICBNKCEhbik7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzM1MTQzODkxKTogVGhlcmUgaXMgYSBidWcgaW4gT25lIFBsYXRmb3JtIHRoYXQgY2F1c2VkIGVycm9yc1xuICAgICAgICAgICAgICAgIC8vIChhbmQgb25seSBlcnJvcnMpIHRvIGJlIHdyYXBwZWQgaW4gYW4gZXh0cmEgYXJyYXkuIFRvIGJlIGZvcndhcmRcbiAgICAgICAgICAgICAgICAvLyBjb21wYXRpYmxlIHdpdGggdGhlIGJ1ZyB3ZSBuZWVkIHRvIGNoZWNrIGVpdGhlciBjb25kaXRpb24uIFRoZSBsYXR0ZXJcbiAgICAgICAgICAgICAgICAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBmaXggaGFzIGJlZW4gcm9sbGVkIG91dC5cbiAgICAgICAgICAgICAgICAvLyBVc2UgYW55IGJlY2F1c2UgbXNnRGF0YS5lcnJvciBpcyBub3QgdHlwZWQuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG4sIGkgPSBzLmVycm9yIHx8IChudWxsID09PSAoZSA9IHNbMF0pIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIEMoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCByZWNlaXZlZCBlcnJvcjpcIiwgaSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yLnN0YXR1cyB3aWxsIGJlIGEgc3RyaW5nIGxpa2UgJ09LJyBvciAnTk9UX0ZPVU5EJy5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGkuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IFxuICAgICAgICAgICAgICAgICAgICAvKipcbiAqIE1hcHMgYW4gZXJyb3IgQ29kZSBmcm9tIGEgR1JQQyBzdGF0dXMgaWRlbnRpZmllciBsaWtlICdOT1RfRk9VTkQnLlxuICpcbiAqIEByZXR1cm5zIFRoZSBDb2RlIGVxdWl2YWxlbnQgdG8gdGhlIGdpdmVuIHN0YXR1cyBzdHJpbmcgb3IgdW5kZWZpbmVkIGlmXG4gKiAgICAgdGhlcmUgaXMgbm8gbWF0Y2guXG4gKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9va3VwIGJ5IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBZblt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUpIHJldHVybiB0cyhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSh0KSwgbiA9IGkubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gQi5JTlRFUk5BTCwgbiA9IFwiVW5rbm93biBlcnJvciBzdGF0dXM6IFwiICsgdCArIFwiIHdpdGggbWVzc2FnZSBcIiArIGkubWVzc2FnZSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGNsb3NlZCBzbyBubyBmdXJ0aGVyIGV2ZW50cyBhcmUgcHJvcGFnYXRlZFxuICAgICAgICAgICAgICAgICAgICBoID0gITAsIGwuaW8obmV3IEwoZSwgbikpLCBjLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIEMoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCByZWNlaXZlZDpcIiwgbiksIGwucm8obik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgZihyLCBFdmVudC5TVEFUX0VWRU5ULCAodCA9PiB7XG4gICAgICAgICAgICB0LnN0YXQgPT09IFN0YXQuUFJPWFkgPyBDKFwiQ29ubmVjdGlvblwiLCBcIkRldGVjdGVkIGJ1ZmZlcmluZyBwcm94eVwiKSA6IHQuc3RhdCA9PT0gU3RhdC5OT1BST1hZICYmIEMoXCJDb25uZWN0aW9uXCIsIFwiRGV0ZWN0ZWQgbm8gYnVmZmVyaW5nIHByb3h5XCIpO1xuICAgICAgICB9KSksIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5IHdlIGNvdWxkL3Nob3VsZCB3YWl0IGZvciB0aGUgV2ViQ2hhbm5lbCBvcGVuZWQgZXZlbnQsXG4gICAgICAgICAgICAvLyBidXQgYmVjYXVzZSB3ZSB3YW50IHRvIHNlbmQgdGhlIGZpcnN0IG1lc3NhZ2Ugd2l0aCB0aGUgV2ViQ2hhbm5lbFxuICAgICAgICAgICAgLy8gaGFuZHNoYWtlIHdlIHByZXRlbmQgdGhlIGNoYW5uZWwgb3BlbmVkIGhlcmUgKGFzeW5jaHJvbm91c2x5KSwgYW5kXG4gICAgICAgICAgICAvLyB0aGVuIGRlbGF5IHRoZSBhY3R1YWwgb3BlbiB1bnRpbCB0aGUgZmlyc3QgbWVzc2FnZSBpcyBzZW50LlxuICAgICAgICAgICAgbC5zbygpO1xuICAgICAgICB9KSwgMCksIGw7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIEluaXRpYWxpemVzIHRoZSBXZWJDaGFubmVsQ29ubmVjdGlvbiBmb3IgdGhlIGJyb3dzZXIuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFRoZSBQbGF0Zm9ybSdzICd3aW5kb3cnIGltcGxlbWVudGF0aW9uIG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uIFlvKCkge1xuICAgIC8vIGB3aW5kb3dgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogbnVsbDtcbn1cblxuLyoqIFRoZSBQbGF0Zm9ybSdzICdkb2N1bWVudCcgaW1wbGVtZW50YXRpb24gb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlLiAqLyBmdW5jdGlvbiBYbygpIHtcbiAgICAvLyBgZG9jdW1lbnRgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIFpvKHQpIHtcbiAgICByZXR1cm4gbmV3IFBzKHQsIC8qIHVzZVByb3RvM0pzb249ICovICEwKTtcbn1cblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgUGxhdGZvcm0ncyAnVGV4dEVuY29kZXInIGltcGxlbWVudGF0aW9uLlxuICovXG4vKipcbiAqIEEgaGVscGVyIGZvciBydW5uaW5nIGRlbGF5ZWQgdGFza3MgZm9sbG93aW5nIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgY3VydmVcbiAqIGJldHdlZW4gYXR0ZW1wdHMuXG4gKlxuICogRWFjaCBkZWxheSBpcyBtYWRlIHVwIG9mIGEgXCJiYXNlXCIgZGVsYXkgd2hpY2ggZm9sbG93cyB0aGUgZXhwb25lbnRpYWxcbiAqIGJhY2tvZmYgY3VydmUsIGFuZCBhICsvLSA1MCUgXCJqaXR0ZXJcIiB0aGF0IGlzIGNhbGN1bGF0ZWQgYW5kIGFkZGVkIHRvIHRoZVxuICogYmFzZSBkZWxheS4gVGhpcyBwcmV2ZW50cyBjbGllbnRzIGZyb20gYWNjaWRlbnRhbGx5IHN5bmNocm9uaXppbmcgdGhlaXJcbiAqIGRlbGF5cyBjYXVzaW5nIHNwaWtlcyBvZiBsb2FkIHRvIHRoZSBiYWNrZW5kLlxuICovXG5jbGFzcyB0dSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIEFzeW5jUXVldWUgdG8gcnVuIGJhY2tvZmYgb3BlcmF0aW9ucyBvbi5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgdG8gdXNlIHdoZW4gc2NoZWR1bGluZyBiYWNrb2ZmIG9wZXJhdGlvbnMgb24gdGhlIEFzeW5jUXVldWUuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgZGVsYXkgKHVzZWQgYXMgdGhlIGJhc2UgZGVsYXkgb24gdGhlIGZpcnN0IHJldHJ5IGF0dGVtcHQpLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbGl0dGxlIGFzIDAuNSppbml0aWFsRGVsYXlNcy5cbiAgICAgKi9cbiAgICBuID0gMWUzXG4gICAgLyoqXG4gICAgICogVGhlIG11bHRpcGxpZXIgdG8gdXNlIHRvIGRldGVybWluZSB0aGUgZXh0ZW5kZWQgYmFzZSBkZWxheSBhZnRlciBlYWNoXG4gICAgICogYXR0ZW1wdC5cbiAgICAgKi8gLCBzID0gMS41XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gYmFzZSBkZWxheSBhZnRlciB3aGljaCBubyBmdXJ0aGVyIGJhY2tvZmYgaXMgcGVyZm9ybWVkLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbXVjaCBhcyAxLjUqbWF4RGVsYXlNcy5cbiAgICAgKi8gLCBpID0gNmU0KSB7XG4gICAgICAgIHRoaXMuSHMgPSB0LCB0aGlzLnRpbWVySWQgPSBlLCB0aGlzLm1vID0gbiwgdGhpcy55byA9IHMsIHRoaXMucG8gPSBpLCB0aGlzLklvID0gMCwgXG4gICAgICAgIHRoaXMuVG8gPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IGJhY2tvZmYgYXR0ZW1wdCwgYXMgZXBvY2ggbWlsbGlzZWNvbmRzLiAqL1xuICAgICAgICB0aGlzLkVvID0gRGF0ZS5ub3coKSwgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGJhY2tvZmYgZGVsYXkuXG4gICAgICpcbiAgICAgKiBUaGUgdmVyeSBuZXh0IGJhY2tvZmZBbmRXYWl0KCkgd2lsbCBoYXZlIG5vIGRlbGF5LiBJZiBpdCBpcyBjYWxsZWQgYWdhaW5cbiAgICAgKiAoaS5lLiBkdWUgdG8gYW4gZXJyb3IpLCBpbml0aWFsRGVsYXlNcyAocGx1cyBqaXR0ZXIpIHdpbGwgYmUgdXNlZCwgYW5kXG4gICAgICogc3Vic2VxdWVudCBvbmVzIHdpbGwgaW5jcmVhc2UgYWNjb3JkaW5nIHRvIHRoZSBiYWNrb2ZmRmFjdG9yLlxuICAgICAqLyAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5JbyA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheSB0byB0aGUgbWF4aW11bSBkZWxheSAoZS5nLiBmb3IgdXNlIGFmdGVyIGFcbiAgICAgKiBSRVNPVVJDRV9FWEhBVVNURUQgZXJyb3IpLlxuICAgICAqLyAgICBBbygpIHtcbiAgICAgICAgdGhpcy5JbyA9IHRoaXMucG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgY3VycmVudERlbGF5TXMsIGFuZCBpbmNyZWFzZXMgdGhlXG4gICAgICogZGVsYXkgZm9yIGFueSBzdWJzZXF1ZW50IGF0dGVtcHRzLiBJZiB0aGVyZSB3YXMgYSBwZW5kaW5nIGJhY2tvZmYgb3BlcmF0aW9uXG4gICAgICogYWxyZWFkeSwgaXQgd2lsbCBiZSBjYW5jZWxlZC5cbiAgICAgKi8gICAgUm8odCkge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb24uXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIC8vIEZpcnN0IHNjaGVkdWxlIHVzaW5nIHRoZSBjdXJyZW50IGJhc2UgKHdoaWNoIG1heSBiZSAwIGFuZCBzaG91bGQgYmVcbiAgICAgICAgLy8gaG9ub3JlZCBhcyBzdWNoKS5cbiAgICAgICAgY29uc3QgZSA9IE1hdGguZmxvb3IodGhpcy5JbyArIHRoaXMuYm8oKSksIG4gPSBNYXRoLm1heCgwLCBEYXRlLm5vdygpIC0gdGhpcy5FbyksIHMgPSBNYXRoLm1heCgwLCBlIC0gbik7XG4gICAgICAgIC8vIEd1YXJkIGFnYWluc3QgbGFzdEF0dGVtcHRUaW1lIGJlaW5nIGluIHRoZSBmdXR1cmUgZHVlIHRvIGEgY2xvY2sgY2hhbmdlLlxuICAgICAgICAgICAgICAgIHMgPiAwICYmIEMoXCJFeHBvbmVudGlhbEJhY2tvZmZcIiwgYEJhY2tpbmcgb2ZmIGZvciAke3N9IG1zIChiYXNlIGRlbGF5OiAke3RoaXMuSW99IG1zLCBkZWxheSB3aXRoIGppdHRlcjogJHtlfSBtcywgbGFzdCBhdHRlbXB0OiAke259IG1zIGFnbylgKSwgXG4gICAgICAgIHRoaXMuVG8gPSB0aGlzLkhzLmVucXVldWVBZnRlckRlbGF5KHRoaXMudGltZXJJZCwgcywgKCgpID0+ICh0aGlzLkVvID0gRGF0ZS5ub3coKSwgXG4gICAgICAgIHQoKSkpKSwgXG4gICAgICAgIC8vIEFwcGx5IGJhY2tvZmYgZmFjdG9yIHRvIGRldGVybWluZSBuZXh0IGRlbGF5IGFuZCBlbnN1cmUgaXQgaXMgd2l0aGluXG4gICAgICAgIC8vIGJvdW5kcy5cbiAgICAgICAgdGhpcy5JbyAqPSB0aGlzLnlvLCB0aGlzLklvIDwgdGhpcy5tbyAmJiAodGhpcy5JbyA9IHRoaXMubW8pLCB0aGlzLklvID4gdGhpcy5wbyAmJiAodGhpcy5JbyA9IHRoaXMucG8pO1xuICAgIH1cbiAgICBQbygpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5UbyAmJiAodGhpcy5Uby5za2lwRGVsYXkoKSwgdGhpcy5UbyA9IG51bGwpO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMuVG8gJiYgKHRoaXMuVG8uY2FuY2VsKCksIHRoaXMuVG8gPSBudWxsKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSByYW5kb20gdmFsdWUgaW4gdGhlIHJhbmdlIFstY3VycmVudEJhc2VNcy8yLCBjdXJyZW50QmFzZU1zLzJdICovICAgIGJvKCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAuNSkgKiB0aGlzLklvO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBQZXJzaXN0ZW50U3RyZWFtIGlzIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgc3RyZWFtaW5nIFJQQ1xuICogdG8gdGhlIEZpcmVzdG9yZSBiYWNrZW5kLiBJdCdzIGJ1aWx0IG9uIHRvcCBvZiB0aGUgY29ubmVjdGlvbnMgb3duIHN1cHBvcnRcbiAqIGZvciBzdHJlYW1pbmcgUlBDcywgYW5kIGFkZHMgc2V2ZXJhbCBjcml0aWNhbCBmZWF0dXJlcyBmb3Igb3VyIGNsaWVudHM6XG4gKlxuICogICAtIEV4cG9uZW50aWFsIGJhY2tvZmYgb24gZmFpbHVyZVxuICogICAtIEF1dGhlbnRpY2F0aW9uIHZpYSBDcmVkZW50aWFsc1Byb3ZpZGVyXG4gKiAgIC0gRGlzcGF0Y2hpbmcgYWxsIGNhbGxiYWNrcyBpbnRvIHRoZSBzaGFyZWQgd29ya2VyIHF1ZXVlXG4gKiAgIC0gQ2xvc2luZyBpZGxlIHN0cmVhbXMgYWZ0ZXIgNjAgc2Vjb25kcyBvZiBpbmFjdGl2aXR5XG4gKlxuICogU3ViY2xhc3NlcyBvZiBQZXJzaXN0ZW50U3RyZWFtIGltcGxlbWVudCBzZXJpYWxpemF0aW9uIG9mIG1vZGVscyB0byBhbmRcbiAqIGZyb20gdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHByb3RvY29sIGJ1ZmZlcnMgZm9yIGEgc3BlY2lmaWNcbiAqIHN0cmVhbWluZyBSUEMuXG4gKlxuICogIyMgU3RhcnRpbmcgYW5kIFN0b3BwaW5nXG4gKlxuICogU3RyZWFtaW5nIFJQQ3MgYXJlIHN0YXRlZnVsIGFuZCBuZWVkIHRvIGJlIHN0YXJ0KCllZCBiZWZvcmUgbWVzc2FnZXMgY2FuXG4gKiBiZSBzZW50IGFuZCByZWNlaXZlZC4gVGhlIFBlcnNpc3RlbnRTdHJlYW0gd2lsbCBjYWxsIHRoZSBvbk9wZW4oKSBmdW5jdGlvblxuICogb2YgdGhlIGxpc3RlbmVyIG9uY2UgdGhlIHN0cmVhbSBpcyByZWFkeSB0byBhY2NlcHQgcmVxdWVzdHMuXG4gKlxuICogU2hvdWxkIGEgc3RhcnQoKSBmYWlsLCBQZXJzaXN0ZW50U3RyZWFtIHdpbGwgY2FsbCB0aGUgcmVnaXN0ZXJlZCBvbkNsb3NlKClcbiAqIGxpc3RlbmVyIHdpdGggYSBGaXJlc3RvcmVFcnJvciBpbmRpY2F0aW5nIHdoYXQgd2VudCB3cm9uZy5cbiAqXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gY2FuIGJlIHN0YXJ0ZWQgYW5kIHN0b3BwZWQgcmVwZWF0ZWRseS5cbiAqXG4gKiBHZW5lcmljIHR5cGVzOlxuICogIFNlbmRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgb3V0Z29pbmcgbWVzc2FnZSBvZiB0aGUgdW5kZXJseWluZ1xuICogICAgY29ubmVjdGlvbiBzdHJlYW1cbiAqICBSZWNlaXZlVHlwZTogVGhlIHR5cGUgb2YgdGhlIGluY29taW5nIG1lc3NhZ2Ugb2YgdGhlIHVuZGVybHlpbmdcbiAqICAgIGNvbm5lY3Rpb24gc3RyZWFtXG4gKiAgTGlzdGVuZXJUeXBlOiBUaGUgdHlwZSBvZiB0aGUgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIGNhbGxiYWNrc1xuICovXG5jbGFzcyBldSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgciwgbywgdSkge1xuICAgICAgICB0aGlzLkhzID0gdCwgdGhpcy52byA9IG4sIHRoaXMuVm8gPSBzLCB0aGlzLlNvID0gaSwgdGhpcy5hdXRoQ3JlZGVudGlhbHNQcm92aWRlciA9IHIsIFxuICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHNQcm92aWRlciA9IG8sIHRoaXMubGlzdGVuZXIgPSB1LCB0aGlzLnN0YXRlID0gMCAvKiBJbml0aWFsICovICwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNsb3NlIGNvdW50IHRoYXQncyBpbmNyZW1lbnRlZCBldmVyeSB0aW1lIHRoZSBzdHJlYW0gaXMgY2xvc2VkOyB1c2VkIGJ5XG4gICAgICAgICAqIGdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIoKSB0byBpbnZhbGlkYXRlIGNhbGxiYWNrcyB0aGF0IGhhcHBlbiBhZnRlclxuICAgICAgICAgKiBjbG9zZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuRG8gPSAwLCB0aGlzLkNvID0gbnVsbCwgdGhpcy54byA9IG51bGwsIHRoaXMuc3RyZWFtID0gbnVsbCwgdGhpcy5ObyA9IG5ldyB0dSh0LCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHN0YXJ0KCkgaGFzIGJlZW4gY2FsbGVkIGFuZCBubyBlcnJvciBoYXMgb2NjdXJyZWQuIFRydWVcbiAgICAgKiBpbmRpY2F0ZXMgdGhlIHN0cmVhbSBpcyBvcGVuIG9yIGluIHRoZSBwcm9jZXNzIG9mIG9wZW5pbmcgKHdoaWNoXG4gICAgICogZW5jb21wYXNzZXMgcmVzcGVjdGluZyBiYWNrb2ZmLCBnZXR0aW5nIGF1dGggdG9rZW5zLCBhbmQgc3RhcnRpbmcgdGhlXG4gICAgICogYWN0dWFsIFJQQykuIFVzZSBpc09wZW4oKSB0byBkZXRlcm1pbmUgaWYgdGhlIHN0cmVhbSBpcyBvcGVuIGFuZCByZWFkeSBmb3JcbiAgICAgKiBvdXRib3VuZCByZXF1ZXN0cy5cbiAgICAgKi8gICAga28oKSB7XG4gICAgICAgIHJldHVybiAxIC8qIFN0YXJ0aW5nICovID09PSB0aGlzLnN0YXRlIHx8IDUgLyogQmFja29mZiAqLyA9PT0gdGhpcy5zdGF0ZSB8fCB0aGlzLk9vKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdW5kZXJseWluZyBSUEMgaXMgb3BlbiAodGhlIG9uT3BlbigpIGxpc3RlbmVyIGhhcyBiZWVuXG4gICAgICogY2FsbGVkKSBhbmQgdGhlIHN0cmVhbSBpcyByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMuXG4gICAgICovICAgIE9vKCkge1xuICAgICAgICByZXR1cm4gMiAvKiBPcGVuICovID09PSB0aGlzLnN0YXRlIHx8IDMgLyogSGVhbHRoeSAqLyA9PT0gdGhpcy5zdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBSUEMuIE9ubHkgYWxsb3dlZCBpZiBpc1N0YXJ0ZWQoKSByZXR1cm5zIGZhbHNlLiBUaGUgc3RyZWFtIGlzXG4gICAgICogbm90IGltbWVkaWF0ZWx5IHJlYWR5IGZvciB1c2U6IG9uT3BlbigpIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBSUEMgaXNcbiAgICAgKiByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMsIGF0IHdoaWNoIHBvaW50IGlzT3BlbigpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICpcbiAgICAgKiBXaGVuIHN0YXJ0IHJldHVybnMsIGlzU3RhcnRlZCgpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICovICAgIHN0YXJ0KCkge1xuICAgICAgICA0IC8qIEVycm9yICovICE9PSB0aGlzLnN0YXRlID8gdGhpcy5hdXRoKCkgOiB0aGlzLk1vKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBSUEMuIFRoaXMgY2FsbCBpcyBpZGVtcG90ZW50IGFuZCBhbGxvd2VkIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogY3VycmVudCBpc1N0YXJ0ZWQoKSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFdoZW4gc3RvcCByZXR1cm5zLCBpc1N0YXJ0ZWQoKSBhbmQgaXNPcGVuKCkgd2lsbCBib3RoIHJldHVybiBmYWxzZS5cbiAgICAgKi8gICAgYXN5bmMgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5rbygpICYmIGF3YWl0IHRoaXMuY2xvc2UoMCAvKiBJbml0aWFsICovKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWZ0ZXIgYW4gZXJyb3IgdGhlIHN0cmVhbSB3aWxsIHVzdWFsbHkgYmFjayBvZmYgb24gdGhlIG5leHQgYXR0ZW1wdCB0b1xuICAgICAqIHN0YXJ0IGl0LiBJZiB0aGUgZXJyb3Igd2FycmFudHMgYW4gaW1tZWRpYXRlIHJlc3RhcnQgb2YgdGhlIHN0cmVhbSwgdGhlXG4gICAgICogc2VuZGVyIGNhbiB1c2UgdGhpcyB0byBpbmRpY2F0ZSB0aGF0IHRoZSByZWNlaXZlciBzaG91bGQgbm90IGJhY2sgb2ZmLlxuICAgICAqXG4gICAgICogRWFjaCBlcnJvciB3aWxsIGNhbGwgdGhlIG9uQ2xvc2UoKSBsaXN0ZW5lci4gVGhhdCBmdW5jdGlvbiBjYW4gZGVjaWRlIHRvXG4gICAgICogaW5oaWJpdCBiYWNrb2ZmIGlmIHJlcXVpcmVkLlxuICAgICAqLyAgICBGbygpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDAgLyogSW5pdGlhbCAqLyAsIHRoaXMuTm8ucmVzZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFya3MgdGhpcyBzdHJlYW0gYXMgaWRsZS4gSWYgbm8gZnVydGhlciBhY3Rpb25zIGFyZSBwZXJmb3JtZWQgb24gdGhlXG4gICAgICogc3RyZWFtIGZvciBvbmUgbWludXRlLCB0aGUgc3RyZWFtIHdpbGwgYXV0b21hdGljYWxseSBjbG9zZSBpdHNlbGYgYW5kXG4gICAgICogbm90aWZ5IHRoZSBzdHJlYW0ncyBvbkNsb3NlKCkgaGFuZGxlciB3aXRoIFN0YXR1cy5PSy4gVGhlIHN0cmVhbSB3aWxsIHRoZW5cbiAgICAgKiBiZSBpbiBhICFpc1N0YXJ0ZWQoKSBzdGF0ZSwgcmVxdWlyaW5nIHRoZSBjYWxsZXIgdG8gc3RhcnQgdGhlIHN0cmVhbSBhZ2FpblxuICAgICAqIGJlZm9yZSBmdXJ0aGVyIHVzZS5cbiAgICAgKlxuICAgICAqIE9ubHkgc3RyZWFtcyB0aGF0IGFyZSBpbiBzdGF0ZSAnT3BlbicgY2FuIGJlIG1hcmtlZCBpZGxlLCBhcyBhbGwgb3RoZXJcbiAgICAgKiBzdGF0ZXMgaW1wbHkgcGVuZGluZyBuZXR3b3JrIG9wZXJhdGlvbnMuXG4gICAgICovICAgICRvKCkge1xuICAgICAgICAvLyBTdGFydHMgdGhlIGlkbGUgdGltZSBpZiB3ZSBhcmUgaW4gc3RhdGUgJ09wZW4nIGFuZCBhcmUgbm90IHlldCBhbHJlYWR5XG4gICAgICAgIC8vIHJ1bm5pbmcgYSB0aW1lciAoaW4gd2hpY2ggY2FzZSB0aGUgcHJldmlvdXMgaWRsZSB0aW1lb3V0IHN0aWxsIGFwcGxpZXMpLlxuICAgICAgICB0aGlzLk9vKCkgJiYgbnVsbCA9PT0gdGhpcy5DbyAmJiAodGhpcy5DbyA9IHRoaXMuSHMuZW5xdWV1ZUFmdGVyRGVsYXkodGhpcy52bywgNmU0LCAoKCkgPT4gdGhpcy5CbygpKSkpO1xuICAgIH1cbiAgICAvKiogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSB1bmRlcmx5aW5nIHN0cmVhbS4gKi8gICAgTG8odCkge1xuICAgICAgICB0aGlzLlVvKCksIHRoaXMuc3RyZWFtLnNlbmQodCk7XG4gICAgfVxuICAgIC8qKiBDYWxsZWQgYnkgdGhlIGlkbGUgdGltZXIgd2hlbiB0aGUgc3RyZWFtIHNob3VsZCBjbG9zZSBkdWUgdG8gaW5hY3Rpdml0eS4gKi8gICAgYXN5bmMgQm8oKSB7XG4gICAgICAgIGlmICh0aGlzLk9vKCkpIFxuICAgICAgICAvLyBXaGVuIHRpbWluZyBvdXQgYW4gaWRsZSBzdHJlYW0gdGhlcmUncyBubyByZWFzb24gdG8gZm9yY2UgdGhlIHN0cmVhbSBpbnRvIGJhY2tvZmYgd2hlblxuICAgICAgICAvLyBpdCByZXN0YXJ0cyBzbyBzZXQgdGhlIHN0cmVhbSBzdGF0ZSB0byBJbml0aWFsIGluc3RlYWQgb2YgRXJyb3IuXG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlKDAgLyogSW5pdGlhbCAqLyk7XG4gICAgfVxuICAgIC8qKiBNYXJrcyB0aGUgc3RyZWFtIGFzIGFjdGl2ZSBhZ2Fpbi4gKi8gICAgVW8oKSB7XG4gICAgICAgIHRoaXMuQ28gJiYgKHRoaXMuQ28uY2FuY2VsKCksIHRoaXMuQ28gPSBudWxsKTtcbiAgICB9XG4gICAgLyoqIENhbmNlbHMgdGhlIGhlYWx0aCBjaGVjayBkZWxheWVkIG9wZXJhdGlvbi4gKi8gICAgcW8oKSB7XG4gICAgICAgIHRoaXMueG8gJiYgKHRoaXMueG8uY2FuY2VsKCksIHRoaXMueG8gPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cCBhcyBuZWNlc3Nhcnk6XG4gICAgICpcbiAgICAgKiAqIGNsb3NlcyB0aGUgdW5kZXJseWluZyBHUlBDIHN0cmVhbTtcbiAgICAgKiAqIGNhbGxzIHRoZSBvbkNsb3NlIGhhbmRsZXIgd2l0aCB0aGUgZ2l2ZW4gJ2Vycm9yJztcbiAgICAgKiAqIHNldHMgaW50ZXJuYWwgc3RyZWFtIHN0YXRlIHRvICdmaW5hbFN0YXRlJztcbiAgICAgKiAqIGFkanVzdHMgdGhlIGJhY2tvZmYgdGltZXIgYmFzZWQgb24gdGhlIGVycm9yXG4gICAgICpcbiAgICAgKiBBIG5ldyBzdHJlYW0gY2FuIGJlIG9wZW5lZCBieSBjYWxsaW5nIHN0YXJ0KCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmluYWxTdGF0ZSAtIHRoZSBpbnRlbmRlZCBzdGF0ZSBvZiB0aGUgc3RyZWFtIGFmdGVyIGNsb3NpbmcuXG4gICAgICogQHBhcmFtIGVycm9yIC0gdGhlIGVycm9yIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgd2l0aC5cbiAgICAgKi8gICAgYXN5bmMgY2xvc2UodCwgZSkge1xuICAgICAgICAvLyBDYW5jZWwgYW55IG91dHN0YW5kaW5nIHRpbWVycyAodGhleSdyZSBndWFyYW50ZWVkIG5vdCB0byBleGVjdXRlKS5cbiAgICAgICAgdGhpcy5VbygpLCB0aGlzLnFvKCksIHRoaXMuTm8uY2FuY2VsKCksIFxuICAgICAgICAvLyBJbnZhbGlkYXRlcyBhbnkgc3RyZWFtLXJlbGF0ZWQgY2FsbGJhY2tzIChlLmcuIGZyb20gYXV0aCBvciB0aGVcbiAgICAgICAgLy8gdW5kZXJseWluZyBzdHJlYW0pLCBndWFyYW50ZWVpbmcgdGhleSB3b24ndCBleGVjdXRlLlxuICAgICAgICB0aGlzLkRvKyssIDQgLyogRXJyb3IgKi8gIT09IHQgPyBcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBpbnRlbnRpb25hbCBjbG9zZSBlbnN1cmUgd2UgZG9uJ3QgZGVsYXkgb3VyIG5leHQgY29ubmVjdGlvbiBhdHRlbXB0LlxuICAgICAgICB0aGlzLk5vLnJlc2V0KCkgOiBlICYmIGUuY29kZSA9PT0gQi5SRVNPVVJDRV9FWEhBVVNURUQgPyAoXG4gICAgICAgIC8vIExvZyB0aGUgZXJyb3IuIChQcm9iYWJseSBlaXRoZXIgJ3F1b3RhIGV4Y2VlZGVkJyBvciAnbWF4IHF1ZXVlIGxlbmd0aCByZWFjaGVkJy4pXG4gICAgICAgIHgoZS50b1N0cmluZygpKSwgeChcIlVzaW5nIG1heGltdW0gYmFja29mZiBkZWxheSB0byBwcmV2ZW50IG92ZXJsb2FkaW5nIHRoZSBiYWNrZW5kLlwiKSwgXG4gICAgICAgIHRoaXMuTm8uQW8oKSkgOiBlICYmIGUuY29kZSA9PT0gQi5VTkFVVEhFTlRJQ0FURUQgJiYgMyAvKiBIZWFsdGh5ICovICE9PSB0aGlzLnN0YXRlICYmIChcbiAgICAgICAgLy8gXCJ1bmF1dGhlbnRpY2F0ZWRcIiBlcnJvciBtZWFucyB0aGUgdG9rZW4gd2FzIHJlamVjdGVkLiBUaGlzIHNob3VsZCByYXJlbHlcbiAgICAgICAgLy8gaGFwcGVuIHNpbmNlIGJvdGggQXV0aCBhbmQgQXBwQ2hlY2sgZW5zdXJlIGEgc3VmZmljaWVudCBUVEwgd2hlbiB3ZVxuICAgICAgICAvLyByZXF1ZXN0IGEgdG9rZW4uIElmIGEgdXNlciBtYW51YWxseSByZXNldHMgdGhlaXIgc3lzdGVtIGNsb2NrIHRoaXMgY2FuXG4gICAgICAgIC8vIGZhaWwsIGhvd2V2ZXIuIEluIHRoaXMgY2FzZSwgd2Ugc2hvdWxkIGdldCBhIENvZGUuVU5BVVRIRU5USUNBVEVEIGVycm9yXG4gICAgICAgIC8vIGJlZm9yZSB3ZSByZWNlaXZlZCB0aGUgZmlyc3QgbWVzc2FnZSBhbmQgd2UgbmVlZCB0byBpbnZhbGlkYXRlIHRoZSB0b2tlblxuICAgICAgICAvLyB0byBlbnN1cmUgdGhhdCB3ZSBmZXRjaCBhIG5ldyB0b2tlbi5cbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHNQcm92aWRlci5pbnZhbGlkYXRlVG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIuaW52YWxpZGF0ZVRva2VuKCkpLCBcbiAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIHVuZGVybHlpbmcgc3RyZWFtIGJlY2F1c2Ugd2UgYXJlIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIGV2ZW50cy5cbiAgICAgICAgbnVsbCAhPT0gdGhpcy5zdHJlYW0gJiYgKHRoaXMuS28oKSwgdGhpcy5zdHJlYW0uY2xvc2UoKSwgdGhpcy5zdHJlYW0gPSBudWxsKSwgXG4gICAgICAgIC8vIFRoaXMgc3RhdGUgbXVzdCBiZSBhc3NpZ25lZCBiZWZvcmUgY2FsbGluZyBvbkNsb3NlKCkgdG8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvXG4gICAgICAgIC8vIGluaGliaXQgYmFja29mZiBvciBvdGhlcndpc2UgbWFuaXB1bGF0ZSB0aGUgc3RhdGUgaW4gaXRzIG5vbi1zdGFydGVkIHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXRlID0gdCwgXG4gICAgICAgIC8vIE5vdGlmeSB0aGUgbGlzdGVuZXIgdGhhdCB0aGUgc3RyZWFtIGNsb3NlZC5cbiAgICAgICAgYXdhaXQgdGhpcy5saXN0ZW5lci5acihlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgYmVmb3JlIHRoZSBzdHJlYW0gaXMgY2xvc2VkLlxuICAgICAqIENhbGxpbmcgc3VwZXIudGVhckRvd24oKSBpcyBub3QgcmVxdWlyZWQuXG4gICAgICovICAgIEtvKCkge31cbiAgICBhdXRoKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMSAvKiBTdGFydGluZyAqLztcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuR28odGhpcy5EbyksIGUgPSB0aGlzLkRvO1xuICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IEp1c3QgdXNlIGRpc3BhdGNoSWZOb3RDbG9zZWQsIGJ1dCBzZWUgVE9ETyBiZWxvdy5cbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbIHRoaXMuYXV0aENyZWRlbnRpYWxzUHJvdmlkZXIuZ2V0VG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIuZ2V0VG9rZW4oKSBdKS50aGVuKCgoW3QsIG5dKSA9PiB7XG4gICAgICAgICAgICAvLyBTdHJlYW0gY2FuIGJlIHN0b3BwZWQgd2hpbGUgd2FpdGluZyBmb3IgYXV0aGVudGljYXRpb24uXG4gICAgICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IFdlIHJlYWxseSBzaG91bGQganVzdCB1c2UgZGlzcGF0Y2hJZk5vdENsb3NlZFxuICAgICAgICAgICAgLy8gYW5kIGxldCB0aGlzIGRpc3BhdGNoIG9udG8gdGhlIHF1ZXVlLCBidXQgdGhhdCBvcGVuZWQgYSBzcGVjIHRlc3QgY2FuXG4gICAgICAgICAgICAvLyBvZiB3b3JtcyB0aGF0IEkgZG9uJ3Qgd2FudCB0byBkZWFsIHdpdGggaW4gdGhpcyBQUi5cbiAgICAgICAgICAgIHRoaXMuRG8gPT09IGUgJiYgXG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIGhhdmUgdG8gc2NoZWR1bGUgdGhlIGNhbGxiYWNrIG9uIHRoZSBBc3luY1F1ZXVlLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhlIGZvbGxvd2luZyBjYWxscyBhcmUgc2FmZSB0byBiZSBjYWxsZWQgb3V0c2lkZSB0aGVcbiAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgc2luY2UgdGhleSBkb24ndCBjaGFpbiBhc3luY2hyb25vdXMgY2FsbHNcbiAgICAgICAgICAgIHRoaXMuUW8odCwgbik7XG4gICAgICAgIH0pLCAoZSA9PiB7XG4gICAgICAgICAgICB0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBMKEIuVU5LTk9XTiwgXCJGZXRjaGluZyBhdXRoIHRva2VuIGZhaWxlZDogXCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmpvKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFFvKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuR28odGhpcy5Ebyk7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gdGhpcy5Xbyh0LCBlKSwgdGhpcy5zdHJlYW0uWXIoKCgpID0+IHtcbiAgICAgICAgICAgIG4oKCgpID0+ICh0aGlzLnN0YXRlID0gMiAvKiBPcGVuICovICwgdGhpcy54byA9IHRoaXMuSHMuZW5xdWV1ZUFmdGVyRGVsYXkodGhpcy5WbywgMWU0LCAoKCkgPT4gKHRoaXMuT28oKSAmJiAodGhpcy5zdGF0ZSA9IDMgLyogSGVhbHRoeSAqLyksIFxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSksIHRoaXMubGlzdGVuZXIuWXIoKSkpKTtcbiAgICAgICAgfSkpLCB0aGlzLnN0cmVhbS5acigodCA9PiB7XG4gICAgICAgICAgICBuKCgoKSA9PiB0aGlzLmpvKHQpKSk7XG4gICAgICAgIH0pKSwgdGhpcy5zdHJlYW0ub25NZXNzYWdlKCh0ID0+IHtcbiAgICAgICAgICAgIG4oKCgpID0+IHRoaXMub25NZXNzYWdlKHQpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgTW8oKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSA1IC8qIEJhY2tvZmYgKi8gLCB0aGlzLk5vLlJvKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gMCAvKiBJbml0aWFsICovICwgdGhpcy5zdGFydCgpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8vIFZpc2libGUgZm9yIHRlc3RzXG4gICAgam8odCkge1xuICAgICAgICAvLyBJbiB0aGVvcnkgdGhlIHN0cmVhbSBjb3VsZCBjbG9zZSBjbGVhbmx5LCBob3dldmVyLCBpbiBvdXIgY3VycmVudCBtb2RlbFxuICAgICAgICAvLyB3ZSBuZXZlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVjYXVzZSBpZiB3ZSBzdG9wIGEgc3RyZWFtIG91cnNlbHZlcyxcbiAgICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIG5ldmVyIGJlIGNhbGxlZC4gVG8gcHJldmVudCBjYXNlcyB3aGVyZSB3ZSByZXRyeVxuICAgICAgICAvLyB3aXRob3V0IGEgYmFja29mZiBhY2NpZGVudGFsbHksIHdlIHNldCB0aGUgc3RyZWFtIHRvIGVycm9yIGluIGFsbCBjYXNlcy5cbiAgICAgICAgcmV0dXJuIEMoXCJQZXJzaXN0ZW50U3RyZWFtXCIsIGBjbG9zZSB3aXRoIGVycm9yOiAke3R9YCksIHRoaXMuc3RyZWFtID0gbnVsbCwgdGhpcy5jbG9zZSg0IC8qIEVycm9yICovICwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBcImRpc3BhdGNoZXJcIiBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb3BlcmF0aW9ucyBvbnRvIHRoZVxuICAgICAqIEFzeW5jUXVldWUgYnV0IG9ubHkgcnVucyB0aGVtIGlmIGNsb3NlQ291bnQgcmVtYWlucyB1bmNoYW5nZWQuIFRoaXMgYWxsb3dzXG4gICAgICogdXMgdG8gdHVybiBhdXRoIC8gc3RyZWFtIGNhbGxiYWNrcyBpbnRvIG5vLW9wcyBpZiB0aGUgc3RyZWFtIGlzIGNsb3NlZCAvXG4gICAgICogcmUtb3BlbmVkLCBldGMuXG4gICAgICovICAgIEdvKHQpIHtcbiAgICAgICAgcmV0dXJuIGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5Icy5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiB0aGlzLkRvID09PSB0ID8gZSgpIDogKEMoXCJQZXJzaXN0ZW50U3RyZWFtXCIsIFwic3RyZWFtIGNhbGxiYWNrIHNraXBwZWQgYnkgZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlci5cIiksIFxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSB0aGF0IGltcGxlbWVudHMgdGhlIExpc3RlbiBSUEMuXG4gKlxuICogT25jZSB0aGUgTGlzdGVuIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBvbk9wZW4oKSBsaXN0ZW5lciwgYW55IG51bWJlciBvZlxuICogbGlzdGVuKCkgYW5kIHVubGlzdGVuKCkgY2FsbHMgY2FuIGJlIG1hZGUgdG8gY29udHJvbCB3aGF0IGNoYW5nZXMgd2lsbCBiZVxuICogc2VudCBmcm9tIHRoZSBzZXJ2ZXIgZm9yIExpc3RlblJlc3BvbnNlcy5cbiAqLyBjbGFzcyBudSBleHRlbmRzIGV1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpLCByKSB7XG4gICAgICAgIHN1cGVyKHQsIFwibGlzdGVuX3N0cmVhbV9jb25uZWN0aW9uX2JhY2tvZmZcIiAvKiBMaXN0ZW5TdHJlYW1Db25uZWN0aW9uQmFja29mZiAqLyAsIFwibGlzdGVuX3N0cmVhbV9pZGxlXCIgLyogTGlzdGVuU3RyZWFtSWRsZSAqLyAsIFwiaGVhbHRoX2NoZWNrX3RpbWVvdXRcIiAvKiBIZWFsdGhDaGVja1RpbWVvdXQgKi8gLCBlLCBuLCBzLCByKSwgXG4gICAgICAgIHRoaXMuSXQgPSBpO1xuICAgIH1cbiAgICBXbyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlNvLndvKFwiTGlzdGVuXCIsIHQsIGUpO1xuICAgIH1cbiAgICBvbk1lc3NhZ2UodCkge1xuICAgICAgICAvLyBBIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgbWVhbnMgdGhlIHN0cmVhbSBpcyBoZWFsdGh5XG4gICAgICAgIHRoaXMuTm8ucmVzZXQoKTtcbiAgICAgICAgY29uc3QgZSA9IHFzKHRoaXMuSXQsIHQpLCBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBvbmx5IHJlYWNoZWQgYSBjb25zaXN0ZW50IHNuYXBzaG90IGZvciB0aGUgZW50aXJlIHN0cmVhbSBpZiB0aGVyZVxuICAgICAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXG4gICAgICAgICAgICAvLyB0YXJnZXRzIGlzIGVtcHR5KS4gVGhlIGJhY2tlbmQgaXMgZ3VhcmFudGVlZCB0byBzZW5kIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAgICAgICAgaWYgKCEoXCJ0YXJnZXRDaGFuZ2VcIiBpbiB0KSkgcmV0dXJuIHN0Lm1pbigpO1xuICAgICAgICAgICAgY29uc3QgZSA9IHQudGFyZ2V0Q2hhbmdlO1xuICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0SWRzICYmIGUudGFyZ2V0SWRzLmxlbmd0aCA/IHN0Lm1pbigpIDogZS5yZWFkVGltZSA/IERzKGUucmVhZFRpbWUpIDogc3QubWluKCk7XG4gICAgICAgIH0odCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLnpvKGUsIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgaW50ZXJlc3QgaW4gdGhlIHJlc3VsdHMgb2YgdGhlIGdpdmVuIHRhcmdldC4gSWYgdGhlIHRhcmdldFxuICAgICAqIGluY2x1ZGVzIGEgcmVzdW1lVG9rZW4gaXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdC4gUmVzdWx0cyB0aGF0XG4gICAgICogYWZmZWN0IHRoZSB0YXJnZXQgd2lsbCBiZSBzdHJlYW1lZCBiYWNrIGFzIFdhdGNoQ2hhbmdlIG1lc3NhZ2VzIHRoYXRcbiAgICAgKiByZWZlcmVuY2UgdGhlIHRhcmdldElkLlxuICAgICAqLyAgICBIbyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7fTtcbiAgICAgICAgZS5kYXRhYmFzZSA9IEZzKHRoaXMuSXQpLCBlLmFkZFRhcmdldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGxldCBuO1xuICAgICAgICAgICAgY29uc3QgcyA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIG4gPSBPZShzKSA/IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudHM6IGpzKHQsIHMpXG4gICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBXcyh0LCBzKVxuICAgICAgICAgICAgfSwgbi50YXJnZXRJZCA9IGUudGFyZ2V0SWQsIGUucmVzdW1lVG9rZW4uYXBwcm94aW1hdGVCeXRlU2l6ZSgpID4gMCA/IG4ucmVzdW1lVG9rZW4gPSBWcyh0LCBlLnJlc3VtZVRva2VuKSA6IGUuc25hcHNob3RWZXJzaW9uLmNvbXBhcmVUbyhzdC5taW4oKSkgPiAwICYmIChcbiAgICAgICAgICAgIC8vIFRPRE8od3VhbmR5KTogQ29uc2lkZXIgcmVtb3ZpbmcgYWJvdmUgY2hlY2sgYmVjYXVzZSBpdCBpcyBtb3N0IGxpa2VseSB0cnVlLlxuICAgICAgICAgICAgLy8gUmlnaHQgbm93LCBtYW55IHRlc3RzIGRlcGVuZCBvbiB0aGlzIGJlaGF2aW91ciB0aG91Z2ggKGxlYXZpbmcgbWluKCkgb3V0XG4gICAgICAgICAgICAvLyBvZiBzZXJpYWxpemF0aW9uKS5cbiAgICAgICAgICAgIG4ucmVhZFRpbWUgPSB2cyh0LCBlLnNuYXBzaG90VmVyc2lvbi50b1RpbWVzdGFtcCgpKSksIG47XG4gICAgICAgIH0odGhpcy5JdCwgdCk7XG4gICAgICAgIGNvbnN0IG4gPSBIcyh0aGlzLkl0LCB0KTtcbiAgICAgICAgbiAmJiAoZS5sYWJlbHMgPSBuKSwgdGhpcy5MbyhlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgaW50ZXJlc3QgaW4gdGhlIHJlc3VsdHMgb2YgdGhlIHRhcmdldCBhc3NvY2lhdGVkIHdpdGggdGhlXG4gICAgICogZ2l2ZW4gdGFyZ2V0SWQuXG4gICAgICovICAgIEpvKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHt9O1xuICAgICAgICBlLmRhdGFiYXNlID0gRnModGhpcy5JdCksIGUucmVtb3ZlVGFyZ2V0ID0gdCwgdGhpcy5MbyhlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBTdHJlYW0gdGhhdCBpbXBsZW1lbnRzIHRoZSBXcml0ZSBSUEMuXG4gKlxuICogVGhlIFdyaXRlIFJQQyByZXF1aXJlcyB0aGUgY2FsbGVyIHRvIG1haW50YWluIHNwZWNpYWwgc3RyZWFtVG9rZW5cbiAqIHN0YXRlIGluIGJldHdlZW4gY2FsbHMsIHRvIGhlbHAgdGhlIHNlcnZlciB1bmRlcnN0YW5kIHdoaWNoIHJlc3BvbnNlcyB0aGVcbiAqIGNsaWVudCBoYXMgcHJvY2Vzc2VkIGJ5IHRoZSB0aW1lIHRoZSBuZXh0IHJlcXVlc3QgaXMgbWFkZS4gRXZlcnkgcmVzcG9uc2VcbiAqIHdpbGwgY29udGFpbiBhIHN0cmVhbVRva2VuOyB0aGlzIHZhbHVlIG11c3QgYmUgcGFzc2VkIHRvIHRoZSBuZXh0XG4gKiByZXF1ZXN0LlxuICpcbiAqIEFmdGVyIGNhbGxpbmcgc3RhcnQoKSBvbiB0aGlzIHN0cmVhbSwgdGhlIG5leHQgcmVxdWVzdCBtdXN0IGJlIGEgaGFuZHNoYWtlLFxuICogY29udGFpbmluZyB3aGF0ZXZlciBzdHJlYW1Ub2tlbiBpcyBvbiBoYW5kLiBPbmNlIGEgcmVzcG9uc2UgdG8gdGhpc1xuICogcmVxdWVzdCBpcyByZWNlaXZlZCwgYWxsIHBlbmRpbmcgbXV0YXRpb25zIG1heSBiZSBzdWJtaXR0ZWQuIFdoZW5cbiAqIHN1Ym1pdHRpbmcgbXVsdGlwbGUgYmF0Y2hlcyBvZiBtdXRhdGlvbnMgYXQgdGhlIHNhbWUgdGltZSwgaXQnc1xuICogb2theSB0byB1c2UgdGhlIHNhbWUgc3RyZWFtVG9rZW4gZm9yIHRoZSBjYWxscyB0byB3cml0ZU11dGF0aW9ucy5cbiAqXG4gKiBUT0RPKGIvMzMyNzEyMzUpOiBVc2UgcHJvdG8gdHlwZXNcbiAqLyBjbGFzcyBzdSBleHRlbmRzIGV1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpLCByKSB7XG4gICAgICAgIHN1cGVyKHQsIFwid3JpdGVfc3RyZWFtX2Nvbm5lY3Rpb25fYmFja29mZlwiIC8qIFdyaXRlU3RyZWFtQ29ubmVjdGlvbkJhY2tvZmYgKi8gLCBcIndyaXRlX3N0cmVhbV9pZGxlXCIgLyogV3JpdGVTdHJlYW1JZGxlICovICwgXCJoZWFsdGhfY2hlY2tfdGltZW91dFwiIC8qIEhlYWx0aENoZWNrVGltZW91dCAqLyAsIGUsIG4sIHMsIHIpLCBcbiAgICAgICAgdGhpcy5JdCA9IGksIHRoaXMuWW8gPSAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHdoZXRoZXIgb3Igbm90IGEgaGFuZHNoYWtlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGNoYW5nZWQgYW5kXG4gICAgICogdGhlIHN0cmVhbSBpcyByZWFkeSB0byBhY2NlcHQgbXV0YXRpb25zLlxuICAgICAqLyAgICBnZXQgWG8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLllvO1xuICAgIH1cbiAgICAvLyBPdmVycmlkZSBvZiBQZXJzaXN0ZW50U3RyZWFtLnN0YXJ0XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuWW8gPSAhMSwgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSB2b2lkIDAsIHN1cGVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIEtvKCkge1xuICAgICAgICB0aGlzLllvICYmIHRoaXMuWm8oW10pO1xuICAgIH1cbiAgICBXbyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlNvLndvKFwiV3JpdGVcIiwgdCwgZSk7XG4gICAgfVxuICAgIG9uTWVzc2FnZSh0KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gQWx3YXlzIGNhcHR1cmUgdGhlIGxhc3Qgc3RyZWFtIHRva2VuLlxuICAgICAgICBNKCEhdC5zdHJlYW1Ub2tlbiksIHRoaXMubGFzdFN0cmVhbVRva2VuID0gdC5zdHJlYW1Ub2tlbiwgdGhpcy5Zbykge1xuICAgICAgICAgICAgLy8gQSBzdWNjZXNzZnVsIGZpcnN0IHdyaXRlIHJlc3BvbnNlIG1lYW5zIHRoZSBzdHJlYW0gaXMgaGVhbHRoeSxcbiAgICAgICAgICAgIC8vIE5vdGUsIHRoYXQgd2UgY291bGQgY29uc2lkZXIgYSBzdWNjZXNzZnVsIGhhbmRzaGFrZSBoZWFsdGh5LCBob3dldmVyLFxuICAgICAgICAgICAgLy8gdGhlIHdyaXRlIGl0c2VsZiBtaWdodCBiZSBjYXVzaW5nIGFuIGVycm9yIHdlIHdhbnQgdG8gYmFjayBvZmYgZnJvbS5cbiAgICAgICAgICAgIHRoaXMuTm8ucmVzZXQoKTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBRcyh0LndyaXRlUmVzdWx0cywgdC5jb21taXRUaW1lKSwgbiA9IERzKHQuY29tbWl0VGltZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci50dShuLCBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgZmlyc3QgcmVzcG9uc2UgaXMgYWx3YXlzIHRoZSBoYW5kc2hha2UgcmVzcG9uc2VcbiAgICAgICAgcmV0dXJuIE0oIXQud3JpdGVSZXN1bHRzIHx8IDAgPT09IHQud3JpdGVSZXN1bHRzLmxlbmd0aCksIHRoaXMuWW8gPSAhMCwgdGhpcy5saXN0ZW5lci5ldSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBpbml0aWFsIHN0cmVhbVRva2VuIHRvIHRoZSBzZXJ2ZXIsIHBlcmZvcm1pbmcgdGhlIGhhbmRzaGFrZVxuICAgICAqIHJlcXVpcmVkIHRvIG1ha2UgdGhlIFN0cmVhbWluZ1dyaXRlIFJQQyB3b3JrLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgc2hvdWxkIHdhaXQgdW50aWwgb25IYW5kc2hha2VDb21wbGV0ZSB3YXMgY2FsbGVkLlxuICAgICAqLyAgICBudSgpIHtcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBTdXBwb3J0IHN0cmVhbSByZXN1bXB0aW9uLiBXZSBpbnRlbnRpb25hbGx5IGRvIG5vdCBzZXQgdGhlXG4gICAgICAgIC8vIHN0cmVhbSB0b2tlbiBvbiB0aGUgaGFuZHNoYWtlLCBpZ25vcmluZyBhbnkgc3RyZWFtIHRva2VuIHdlIG1pZ2h0IGhhdmUuXG4gICAgICAgIGNvbnN0IHQgPSB7fTtcbiAgICAgICAgdC5kYXRhYmFzZSA9IEZzKHRoaXMuSXQpLCB0aGlzLkxvKHQpO1xuICAgIH1cbiAgICAvKiogU2VuZHMgYSBncm91cCBvZiBtdXRhdGlvbnMgdG8gdGhlIEZpcmVzdG9yZSBiYWNrZW5kIHRvIGFwcGx5LiAqLyAgICBabyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBzdHJlYW1Ub2tlbjogdGhpcy5sYXN0U3RyZWFtVG9rZW4sXG4gICAgICAgICAgICB3cml0ZXM6IHQubWFwKCh0ID0+IEtzKHRoaXMuSXQsIHQpKSlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5MbyhlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERhdGFzdG9yZSBhbmQgaXRzIHJlbGF0ZWQgbWV0aG9kcyBhcmUgYSB3cmFwcGVyIGFyb3VuZCB0aGUgZXh0ZXJuYWwgR29vZ2xlXG4gKiBDbG91ZCBEYXRhc3RvcmUgZ3JwYyBBUEksIHdoaWNoIHByb3ZpZGVzIGFuIGludGVyZmFjZSB0aGF0IGlzIG1vcmUgY29udmVuaWVudFxuICogZm9yIHRoZSByZXN0IG9mIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZSB0byBjb25zdW1lLlxuICovXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIERhdGFzdG9yZSB0aGF0IGV4cG9zZXMgYWRkaXRpb25hbCBzdGF0ZSBmb3IgaW50ZXJuYWxcbiAqIGNvbnN1bXB0aW9uLlxuICovXG5jbGFzcyBpdSBleHRlbmRzIGNsYXNzIHt9IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuYXV0aENyZWRlbnRpYWxzID0gdCwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzID0gZSwgdGhpcy5TbyA9IG4sIHRoaXMuSXQgPSBzLCBcbiAgICAgICAgdGhpcy5zdSA9ICExO1xuICAgIH1cbiAgICBpdSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3UpIHRocm93IG5ldyBMKEIuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJUaGUgY2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gdGVybWluYXRlZC5cIik7XG4gICAgfVxuICAgIC8qKiBJbnZva2VzIHRoZSBwcm92aWRlZCBSUEMgd2l0aCBhdXRoIGFuZCBBcHBDaGVjayB0b2tlbnMuICovICAgIGFvKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXUoKSwgUHJvbWlzZS5hbGwoWyB0aGlzLmF1dGhDcmVkZW50aWFscy5nZXRUb2tlbigpLCB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMuZ2V0VG9rZW4oKSBdKS50aGVuKCgoW3MsIGldKSA9PiB0aGlzLlNvLmFvKHQsIGUsIG4sIHMsIGkpKSkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgdGhyb3cgXCJGaXJlYmFzZUVycm9yXCIgPT09IHQubmFtZSA/ICh0LmNvZGUgPT09IEIuVU5BVVRIRU5USUNBVEVEICYmICh0aGlzLmF1dGhDcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKSwgXG4gICAgICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMuaW52YWxpZGF0ZVRva2VuKCkpLCB0KSA6IG5ldyBMKEIuVU5LTk9XTiwgdC50b1N0cmluZygpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKiogSW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggc3RyZWFtZWQgcmVzdWx0cyB3aXRoIGF1dGggYW5kIEFwcENoZWNrIHRva2Vucy4gKi8gICAgX28odCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4gdGhpcy5pdSgpLCBQcm9taXNlLmFsbChbIHRoaXMuYXV0aENyZWRlbnRpYWxzLmdldFRva2VuKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5nZXRUb2tlbigpIF0pLnRoZW4oKChbaSwgcl0pID0+IHRoaXMuU28uX28odCwgZSwgbiwgaSwgciwgcykpKS5jYXRjaCgodCA9PiB7XG4gICAgICAgICAgICB0aHJvdyBcIkZpcmViYXNlRXJyb3JcIiA9PT0gdC5uYW1lID8gKHQuY29kZSA9PT0gQi5VTkFVVEhFTlRJQ0FURUQgJiYgKHRoaXMuYXV0aENyZWRlbnRpYWxzLmludmFsaWRhdGVUb2tlbigpLCBcbiAgICAgICAgICAgIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKSksIHQpIDogbmV3IEwoQi5VTktOT1dOLCB0LnRvU3RyaW5nKCkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5zdSA9ICEwO1xuICAgIH1cbn1cblxuLy8gVE9ETyhmaXJlc3RvcmV4cCk6IE1ha2Ugc3VyZSB0aGVyZSBpcyBvbmx5IG9uZSBEYXRhc3RvcmUgaW5zdGFuY2UgcGVyXG4vLyBmaXJlc3RvcmUtZXhwIGNsaWVudC5cbmFzeW5jIGZ1bmN0aW9uIHJ1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IFdzKHQsIGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RydWN0dXJlZEFnZ3JlZ2F0aW9uUXVlcnk6IHtcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGlvbnM6IFsge1xuICAgICAgICAgICAgICAgICAgICBjb3VudDoge30sXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiBcImNvdW50X2FsaWFzXCJcbiAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgc3RydWN0dXJlZFF1ZXJ5OiBuLnN0cnVjdHVyZWRRdWVyeVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmVudDogbi5wYXJlbnRcbiAgICAgICAgfTtcbiAgICB9KG4uSXQsIGNuKGUpKSwgaSA9IHMucGFyZW50O1xuICAgIG4uU28uY28gfHwgZGVsZXRlIHMucGFyZW50O1xuICAgIHJldHVybiAoYXdhaXQgbi5fbyhcIlJ1bkFnZ3JlZ2F0aW9uUXVlcnlcIiwgaSwgcywgLypleHBlY3RlZFJlc3BvbnNlQ291bnQ9Ki8gMSkpLmZpbHRlcigodCA9PiAhIXQucmVzdWx0KSkubWFwKCh0ID0+IHQucmVzdWx0LmFnZ3JlZ2F0ZUZpZWxkcykpO1xufVxuXG4vKipcbiAqIEEgY29tcG9uZW50IHVzZWQgYnkgdGhlIFJlbW90ZVN0b3JlIHRvIHRyYWNrIHRoZSBPbmxpbmVTdGF0ZSAodGhhdCBpcyxcbiAqIHdoZXRoZXIgb3Igbm90IHRoZSBjbGllbnQgYXMgYSB3aG9sZSBzaG91bGQgYmUgY29uc2lkZXJlZCB0byBiZSBvbmxpbmUgb3JcbiAqIG9mZmxpbmUpLCBpbXBsZW1lbnRpbmcgdGhlIGFwcHJvcHJpYXRlIGhldXJpc3RpY3MuXG4gKlxuICogSW4gcGFydGljdWxhciwgd2hlbiB0aGUgY2xpZW50IGlzIHRyeWluZyB0byBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLCB3ZVxuICogYWxsb3cgdXAgdG8gTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUyB3aXRoaW4gT05MSU5FX1NUQVRFX1RJTUVPVVRfTVMgZm9yXG4gKiBhIGNvbm5lY3Rpb24gdG8gc3VjY2VlZC4gSWYgd2UgaGF2ZSB0b28gbWFueSBmYWlsdXJlcyBvciB0aGUgdGltZW91dCBlbGFwc2VzLFxuICogdGhlbiB3ZSBzZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUsIGFuZCB0aGUgY2xpZW50IHdpbGwgYmVoYXZlIGFzIGlmXG4gKiBpdCBpcyBvZmZsaW5lIChnZXQoKXMgd2lsbCByZXR1cm4gY2FjaGVkIGRhdGEsIGV0Yy4pLlxuICovXG5jbGFzcyBvdSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSB0LCB0aGlzLm9ubGluZVN0YXRlSGFuZGxlciA9IGUsIFxuICAgICAgICAvKiogVGhlIGN1cnJlbnQgT25saW5lU3RhdGUuICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBcIlVua25vd25cIiAvKiBVbmtub3duICovICwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNvdW50IG9mIGNvbnNlY3V0aXZlIGZhaWx1cmVzIHRvIG9wZW4gdGhlIHN0cmVhbS4gSWYgaXQgcmVhY2hlcyB0aGVcbiAgICAgICAgICogbWF4aW11bSBkZWZpbmVkIGJ5IE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMsIHdlJ2xsIHNldCB0aGUgT25saW5lU3RhdGUgdG9cbiAgICAgICAgICogT2ZmbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucnUgPSAwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdGltZXIgdGhhdCBlbGFwc2VzIGFmdGVyIE9OTElORV9TVEFURV9USU1FT1VUX01TLCBhdCB3aGljaCBwb2ludCB3ZVxuICAgICAgICAgKiB0cmFuc2l0aW9uIGZyb20gT25saW5lU3RhdGUuVW5rbm93biB0byBPbmxpbmVTdGF0ZS5PZmZsaW5lIHdpdGhvdXQgd2FpdGluZ1xuICAgICAgICAgKiBmb3IgdGhlIHN0cmVhbSB0byBhY3R1YWxseSBmYWlsIChNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTIHRpbWVzKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3UgPSBudWxsLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIGNsaWVudCBzaG91bGQgbG9nIGEgd2FybmluZyBtZXNzYWdlIGlmIGl0IGZhaWxzIHRvIGNvbm5lY3QgdG9cbiAgICAgICAgICogdGhlIGJhY2tlbmQgKGluaXRpYWxseSB0cnVlLCBjbGVhcmVkIGFmdGVyIGEgc3VjY2Vzc2Z1bCBzdHJlYW0sIG9yIGlmIHdlJ3ZlXG4gICAgICAgICAqIGxvZ2dlZCB0aGUgbWVzc2FnZSBhbHJlYWR5KS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXUgPSAhMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGJ5IFJlbW90ZVN0b3JlIHdoZW4gYSB3YXRjaCBzdHJlYW0gaXMgc3RhcnRlZCAoaW5jbHVkaW5nIG9uIGVhY2hcbiAgICAgKiBiYWNrb2ZmIGF0dGVtcHQpLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgYXR0ZW1wdCwgaXQgc2V0cyB0aGUgT25saW5lU3RhdGUgdG8gVW5rbm93biBhbmQgc3RhcnRzXG4gICAgICogdGhlIG9ubGluZVN0YXRlVGltZXIuXG4gICAgICovICAgIGN1KCkge1xuICAgICAgICAwID09PSB0aGlzLnJ1ICYmICh0aGlzLmF1KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCB0aGlzLm91ID0gdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBZnRlckRlbGF5KFwib25saW5lX3N0YXRlX3RpbWVvdXRcIiAvKiBPbmxpbmVTdGF0ZVRpbWVvdXQgKi8gLCAxZTQsICgoKSA9PiAodGhpcy5vdSA9IG51bGwsIFxuICAgICAgICB0aGlzLmh1KFwiQmFja2VuZCBkaWRuJ3QgcmVzcG9uZCB3aXRoaW4gMTAgc2Vjb25kcy5cIiksIHRoaXMuYXUoXCJPZmZsaW5lXCIgLyogT2ZmbGluZSAqLyksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgb3VyIE9ubGluZVN0YXRlIGFzIGFwcHJvcHJpYXRlIGFmdGVyIHRoZSB3YXRjaCBzdHJlYW0gcmVwb3J0cyBhXG4gICAgICogZmFpbHVyZS4gVGhlIGZpcnN0IGZhaWx1cmUgbW92ZXMgdXMgdG8gdGhlICdVbmtub3duJyBzdGF0ZS4gV2UgdGhlbiBtYXlcbiAgICAgKiBhbGxvdyBtdWx0aXBsZSBmYWlsdXJlcyAoYmFzZWQgb24gTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUykgYmVmb3JlIHdlXG4gICAgICogYWN0dWFsbHkgdHJhbnNpdGlvbiB0byB0aGUgJ09mZmxpbmUnIHN0YXRlLlxuICAgICAqLyAgICBsdSh0KSB7XG4gICAgICAgIFwiT25saW5lXCIgLyogT25saW5lICovID09PSB0aGlzLnN0YXRlID8gdGhpcy5hdShcIlVua25vd25cIiAvKiBVbmtub3duICovKSA6ICh0aGlzLnJ1KyssIFxuICAgICAgICB0aGlzLnJ1ID49IDEgJiYgKHRoaXMuZnUoKSwgdGhpcy5odShgQ29ubmVjdGlvbiBmYWlsZWQgMSB0aW1lcy4gTW9zdCByZWNlbnQgZXJyb3I6ICR7dC50b1N0cmluZygpfWApLCBcbiAgICAgICAgdGhpcy5hdShcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdGx5IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIHRoZSBzcGVjaWZpZWQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNldHMgb3VyIHRpbWVycyAvIGZhaWx1cmUgY291bnRlcnMsIGV0Yy4gdXNlZCBieSBvdXJcbiAgICAgKiBPZmZsaW5lIGhldXJpc3RpY3MsIHNvIG11c3Qgbm90IGJlIHVzZWQgaW4gcGxhY2Ugb2ZcbiAgICAgKiBoYW5kbGVXYXRjaFN0cmVhbVN0YXJ0KCkgYW5kIGhhbmRsZVdhdGNoU3RyZWFtRmFpbHVyZSgpLlxuICAgICAqLyAgICBzZXQodCkge1xuICAgICAgICB0aGlzLmZ1KCksIHRoaXMucnUgPSAwLCBcIk9ubGluZVwiIC8qIE9ubGluZSAqLyA9PT0gdCAmJiAoXG4gICAgICAgIC8vIFdlJ3ZlIGNvbm5lY3RlZCB0byB3YXRjaCBhdCBsZWFzdCBvbmNlLiBEb24ndCB3YXJuIHRoZSBkZXZlbG9wZXJcbiAgICAgICAgLy8gYWJvdXQgYmVpbmcgb2ZmbGluZSBnb2luZyBmb3J3YXJkLlxuICAgICAgICB0aGlzLnV1ID0gITEpLCB0aGlzLmF1KHQpO1xuICAgIH1cbiAgICBhdSh0KSB7XG4gICAgICAgIHQgIT09IHRoaXMuc3RhdGUgJiYgKHRoaXMuc3RhdGUgPSB0LCB0aGlzLm9ubGluZVN0YXRlSGFuZGxlcih0KSk7XG4gICAgfVxuICAgIGh1KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IGBDb3VsZCBub3QgcmVhY2ggQ2xvdWQgRmlyZXN0b3JlIGJhY2tlbmQuICR7dH1cXG5UaGlzIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCB5b3VyIGRldmljZSBkb2VzIG5vdCBoYXZlIGEgaGVhbHRoeSBJbnRlcm5ldCBjb25uZWN0aW9uIGF0IHRoZSBtb21lbnQuIFRoZSBjbGllbnQgd2lsbCBvcGVyYXRlIGluIG9mZmxpbmUgbW9kZSB1bnRpbCBpdCBpcyBhYmxlIHRvIHN1Y2Nlc3NmdWxseSBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLmA7XG4gICAgICAgIHRoaXMudXUgPyAoeChlKSwgdGhpcy51dSA9ICExKSA6IEMoXCJPbmxpbmVTdGF0ZVRyYWNrZXJcIiwgZSk7XG4gICAgfVxuICAgIGZ1KCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLm91ICYmICh0aGlzLm91LmNhbmNlbCgpLCB0aGlzLm91ID0gbnVsbCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyB1dSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsIHN0b3JlLCB1c2VkIHRvIGZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIHdpdGggb3V0Ym91bmQgbXV0YXRpb25zLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgY2xpZW50LXNpZGUgcHJveHkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGJhY2tlbmQuICovXG4gICAgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgPSB0LCB0aGlzLmRhdGFzdG9yZSA9IGUsIHRoaXMuYXN5bmNRdWV1ZSA9IG4sIHRoaXMucmVtb3RlU3luY2VyID0ge30sIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIHVwIHRvIE1BWF9QRU5ESU5HX1dSSVRFUyB3cml0ZXMgdGhhdCB3ZSBoYXZlIGZldGNoZWQgZnJvbSB0aGVcbiAgICAgICAgICogTG9jYWxTdG9yZSB2aWEgZmlsbFdyaXRlUGlwZWxpbmUoKSBhbmQgaGF2ZSBvciB3aWxsIHNlbmQgdG8gdGhlIHdyaXRlXG4gICAgICAgICAqIHN0cmVhbS5cbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbmV2ZXIgd3JpdGVQaXBlbGluZS5sZW5ndGggPiAwIHRoZSBSZW1vdGVTdG9yZSB3aWxsIGF0dGVtcHQgdG8gc3RhcnQgb3JcbiAgICAgICAgICogcmVzdGFydCB0aGUgd3JpdGUgc3RyZWFtLiBXaGVuIHRoZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQgdGhlIHdyaXRlcyBpbiB0aGVcbiAgICAgICAgICogcGlwZWxpbmUgd2lsbCBiZSBzZW50IGluIG9yZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXcml0ZXMgcmVtYWluIGluIHdyaXRlUGlwZWxpbmUgdW50aWwgdGhleSBhcmUgYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kXG4gICAgICAgICAqIGFuZCB0aHVzIHdpbGwgYXV0b21hdGljYWxseSBiZSByZS1zZW50IGlmIHRoZSBzdHJlYW0gaXMgaW50ZXJydXB0ZWQgL1xuICAgICAgICAgKiByZXN0YXJ0ZWQgYmVmb3JlIHRoZXkncmUgYWNrbm93bGVkZ2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXcml0ZSByZXNwb25zZXMgZnJvbSB0aGUgYmFja2VuZCBhcmUgbGlua2VkIHRvIHRoZWlyIG9yaWdpbmF0aW5nIHJlcXVlc3RcbiAgICAgICAgICogcHVyZWx5IGJhc2VkIG9uIG9yZGVyLCBhbmQgc28gd2UgY2FuIGp1c3Qgc2hpZnQoKSB3cml0ZXMgZnJvbSB0aGUgZnJvbnQgb2ZcbiAgICAgICAgICogdGhlIHdyaXRlUGlwZWxpbmUgYXMgd2UgcmVjZWl2ZSByZXNwb25zZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmR1ID0gW10sIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXBwaW5nIG9mIHdhdGNoZWQgdGFyZ2V0cyB0aGF0IHRoZSBjbGllbnQgY2FyZXMgYWJvdXQgdHJhY2tpbmcgYW5kIHRoZVxuICAgICAgICAgKiB1c2VyIGhhcyBleHBsaWNpdGx5IGNhbGxlZCBhICdsaXN0ZW4nIGZvciB0aGlzIHRhcmdldC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlc2UgdGFyZ2V0cyBtYXkgb3IgbWF5IG5vdCBoYXZlIGJlZW4gc2VudCB0byBvciBhY2tub3dsZWRnZWQgYnkgdGhlXG4gICAgICAgICAqIHNlcnZlci4gT24gcmUtZXN0YWJsaXNoaW5nIHRoZSBsaXN0ZW4gc3RyZWFtLCB0aGVzZSB0YXJnZXRzIHNob3VsZCBiZSBzZW50XG4gICAgICAgICAqIHRvIHRoZSBzZXJ2ZXIuIFRoZSB0YXJnZXRzIHJlbW92ZWQgd2l0aCB1bmxpc3RlbnMgYXJlIHJlbW92ZWQgZWFnZXJseVxuICAgICAgICAgKiB3aXRob3V0IHdhaXRpbmcgZm9yIGNvbmZpcm1hdGlvbiBmcm9tIHRoZSBsaXN0ZW4gc3RyZWFtLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fdSA9IG5ldyBNYXAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgb2YgcmVhc29ucyBmb3Igd2h5IHRoZSBSZW1vdGVTdG9yZSBtYXkgYmUgb2ZmbGluZS4gSWYgZW1wdHksIHRoZVxuICAgICAgICAgKiBSZW1vdGVTdG9yZSBtYXkgc3RhcnQgaXRzIG5ldHdvcmsgY29ubmVjdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnd1ID0gbmV3IFNldCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFdmVudCBoYW5kbGVycyB0aGF0IGdldCBjYWxsZWQgd2hlbiB0aGUgbmV0d29yayBpcyBkaXNhYmxlZCBvciBlbmFibGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQT1JUSU5HIE5PVEU6IFRoZXNlIGZ1bmN0aW9ucyBhcmUgdXNlZCBvbiB0aGUgV2ViIGNsaWVudCB0byBjcmVhdGUgdGhlXG4gICAgICAgICAqIHVuZGVybHlpbmcgc3RyZWFtcyAodG8gc3VwcG9ydCB0cmVlLXNoYWtlYWJsZSBzdHJlYW1zKS4gT24gQW5kcm9pZCBhbmQgaU9TLFxuICAgICAgICAgKiB0aGUgc3RyZWFtcyBhcmUgY3JlYXRlZCBkdXJpbmcgY29uc3RydWN0aW9uIG9mIFJlbW90ZVN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdSA9IFtdLCB0aGlzLmd1ID0gaSwgdGhpcy5ndS5xcigodCA9PiB7XG4gICAgICAgICAgICBuLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBQb3J0aW5nIE5vdGU6IFVubGlrZSBpT1MsIGByZXN0YXJ0TmV0d29yaygpYCBpcyBjYWxsZWQgZXZlbiB3aGVuIHRoZVxuICAgICAgICAgICAgICAgIC8vIG5ldHdvcmsgYmVjb21lcyB1bnJlYWNoYWJsZSBhcyB3ZSBkb24ndCBoYXZlIGFueSBvdGhlciB3YXkgdG8gdGVhclxuICAgICAgICAgICAgICAgIC8vIGRvd24gb3VyIHN0cmVhbXMuXG4gICAgICAgICAgICAgICAgbXUodGhpcykgJiYgKEMoXCJSZW1vdGVTdG9yZVwiLCBcIlJlc3RhcnRpbmcgc3RyZWFtcyBmb3IgbmV0d29yayByZWFjaGFiaWxpdHkgY2hhbmdlLlwiKSwgXG4gICAgICAgICAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gJCh0KTtcbiAgICAgICAgICAgICAgICAgICAgZS53dS5hZGQoNCAvKiBDb25uZWN0aXZpdHlDaGFuZ2UgKi8pLCBhd2FpdCBhdShlKSwgZS55dS5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyksIFxuICAgICAgICAgICAgICAgICAgICBlLnd1LmRlbGV0ZSg0IC8qIENvbm5lY3Rpdml0eUNoYW5nZSAqLyksIGF3YWl0IGN1KGUpO1xuICAgICAgICAgICAgICAgIH0odGhpcykpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMueXUgPSBuZXcgb3Uobiwgcyk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjdSh0KSB7XG4gICAgaWYgKG11KHQpKSBmb3IgKGNvbnN0IGUgb2YgdC5tdSkgYXdhaXQgZSgvKiBlbmFibGVkPSAqLyAhMCk7XG59XG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZXMgdGhlIG5ldHdvcmsuIFRoZSBuZXR3b3JrIGNhbiBiZSByZS1lbmFibGVkIHVzaW5nXG4gKiBlbmFibGVOZXR3b3JrKCkuXG4gKi8gYXN5bmMgZnVuY3Rpb24gYXUodCkge1xuICAgIGZvciAoY29uc3QgZSBvZiB0Lm11KSBhd2FpdCBlKC8qIGVuYWJsZWQ9ICovICExKTtcbn1cblxuLyoqXG4gKiBTdGFydHMgbmV3IGxpc3RlbiBmb3IgdGhlIGdpdmVuIHRhcmdldC4gVXNlcyByZXN1bWUgdG9rZW4gaWYgcHJvdmlkZWQuIEl0XG4gKiBpcyBhIG5vLW9wIGlmIHRoZSB0YXJnZXQgb2YgZ2l2ZW4gYFRhcmdldERhdGFgIGlzIGFscmVhZHkgYmVpbmcgbGlzdGVuZWQgdG8uXG4gKi9cbmZ1bmN0aW9uIGh1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICBuLl91LmhhcyhlLnRhcmdldElkKSB8fCAoXG4gICAgLy8gTWFyayB0aGlzIGFzIHNvbWV0aGluZyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBsaXN0ZW5pbmcgZm9yLlxuICAgIG4uX3Uuc2V0KGUudGFyZ2V0SWQsIGUpLCB3dShuKSA/IFxuICAgIC8vIFRoZSBsaXN0ZW4gd2lsbCBiZSBzZW50IGluIG9uV2F0Y2hTdHJlYW1PcGVuXG4gICAgX3UobikgOiBrdShuKS5PbygpICYmIGZ1KG4sIGUpKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsaXN0ZW4gZnJvbSBzZXJ2ZXIuIEl0IGlzIGEgbm8tb3AgaWYgdGhlIGdpdmVuIHRhcmdldCBpZCBpc1xuICogbm90IGJlaW5nIGxpc3RlbmVkIHRvLlxuICovIGZ1bmN0aW9uIGx1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9IGt1KG4pO1xuICAgIG4uX3UuZGVsZXRlKGUpLCBzLk9vKCkgJiYgZHUobiwgZSksIDAgPT09IG4uX3Uuc2l6ZSAmJiAocy5PbygpID8gcy4kbygpIDogbXUobikgJiYgXG4gICAgLy8gUmV2ZXJ0IHRvIE9ubGluZVN0YXRlLlVua25vd24gaWYgdGhlIHdhdGNoIHN0cmVhbSBpcyBub3Qgb3BlbiBhbmQgd2VcbiAgICAvLyBoYXZlIG5vIGxpc3RlbmVycywgc2luY2Ugd2l0aG91dCBhbnkgbGlzdGVucyB0byBzZW5kIHdlIGNhbm5vdFxuICAgIC8vIGNvbmZpcm0gaWYgdGhlIHN0cmVhbSBpcyBoZWFsdGh5IGFuZCB1cGdyYWRlIHRvIE9ubGluZVN0YXRlLk9ubGluZS5cbiAgICBuLnl1LnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSk7XG59XG5cbi8qKlxuICogV2UgbmVlZCB0byBpbmNyZW1lbnQgdGhlIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcGVuZGluZyByZXNwb25zZXMgd2UncmUgZHVlXG4gKiBmcm9tIHdhdGNoIHNvIHdlIHdhaXQgZm9yIHRoZSBhY2sgdG8gcHJvY2VzcyBhbnkgbWVzc2FnZXMgZnJvbSB0aGlzIHRhcmdldC5cbiAqLyBmdW5jdGlvbiBmdSh0LCBlKSB7XG4gICAgdC5wdS5NdChlLnRhcmdldElkKSwga3UodCkuSG8oZSk7XG59XG5cbi8qKlxuICogV2UgbmVlZCB0byBpbmNyZW1lbnQgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwZW5kaW5nIHJlc3BvbnNlcyB3ZSdyZSBkdWVcbiAqIGZyb20gd2F0Y2ggc28gd2Ugd2FpdCBmb3IgdGhlIHJlbW92YWwgb24gdGhlIHNlcnZlciBiZWZvcmUgd2UgcHJvY2VzcyBhbnlcbiAqIG1lc3NhZ2VzIGZyb20gdGhpcyB0YXJnZXQuXG4gKi8gZnVuY3Rpb24gZHUodCwgZSkge1xuICAgIHQucHUuTXQoZSksIGt1KHQpLkpvKGUpO1xufVxuXG5mdW5jdGlvbiBfdSh0KSB7XG4gICAgdC5wdSA9IG5ldyBUcyh7XG4gICAgICAgIGdldFJlbW90ZUtleXNGb3JUYXJnZXQ6IGUgPT4gdC5yZW1vdGVTeW5jZXIuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldChlKSxcbiAgICAgICAgc2U6IGUgPT4gdC5fdS5nZXQoZSkgfHwgbnVsbFxuICAgIH0pLCBrdSh0KS5zdGFydCgpLCB0Lnl1LmN1KCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSB3YXRjaCBzdHJlYW0gc2hvdWxkIGJlIHN0YXJ0ZWQgYmVjYXVzZSBpdCdzIG5lY2Vzc2FyeVxuICogYW5kIGhhcyBub3QgeWV0IGJlZW4gc3RhcnRlZC5cbiAqLyBmdW5jdGlvbiB3dSh0KSB7XG4gICAgcmV0dXJuIG11KHQpICYmICFrdSh0KS5rbygpICYmIHQuX3Uuc2l6ZSA+IDA7XG59XG5cbmZ1bmN0aW9uIG11KHQpIHtcbiAgICByZXR1cm4gMCA9PT0gJCh0KS53dS5zaXplO1xufVxuXG5mdW5jdGlvbiBndSh0KSB7XG4gICAgdC5wdSA9IHZvaWQgMDtcbn1cblxuYXN5bmMgZnVuY3Rpb24geXUodCkge1xuICAgIHQuX3UuZm9yRWFjaCgoKGUsIG4pID0+IHtcbiAgICAgICAgZnUodCwgZSk7XG4gICAgfSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwdSh0LCBlKSB7XG4gICAgZ3UodCksIFxuICAgIC8vIElmIHdlIHN0aWxsIG5lZWQgdGhlIHdhdGNoIHN0cmVhbSwgcmV0cnkgdGhlIGNvbm5lY3Rpb24uXG4gICAgd3UodCkgPyAodC55dS5sdShlKSwgX3UodCkpIDogXG4gICAgLy8gTm8gbmVlZCB0byByZXN0YXJ0IHdhdGNoIHN0cmVhbSBiZWNhdXNlIHRoZXJlIGFyZSBubyBhY3RpdmUgdGFyZ2V0cy5cbiAgICAvLyBUaGUgb25saW5lIHN0YXRlIGlzIHNldCB0byB1bmtub3duIGJlY2F1c2UgdGhlcmUgaXMgbm8gYWN0aXZlIGF0dGVtcHRcbiAgICAvLyBhdCBlc3RhYmxpc2hpbmcgYSBjb25uZWN0aW9uXG4gICAgdC55dS5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIEl1KHQsIGUsIG4pIHtcbiAgICBpZiAoXG4gICAgLy8gTWFyayB0aGUgY2xpZW50IGFzIG9ubGluZSBzaW5jZSB3ZSBnb3QgYSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlclxuICAgIHQueXUuc2V0KFwiT25saW5lXCIgLyogT25saW5lICovKSwgZSBpbnN0YW5jZW9mIHBzICYmIDIgLyogUmVtb3ZlZCAqLyA9PT0gZS5zdGF0ZSAmJiBlLmNhdXNlKSBcbiAgICAvLyBUaGVyZSB3YXMgYW4gZXJyb3Igb24gYSB0YXJnZXQsIGRvbid0IHdhaXQgZm9yIGEgY29uc2lzdGVudCBzbmFwc2hvdFxuICAgIC8vIHRvIHJhaXNlIGV2ZW50c1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IFxuICAgICAgICAvKiogSGFuZGxlcyBhbiBlcnJvciBvbiBhIHRhcmdldCAqL1xuICAgICAgICBhc3luYyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gZS5jYXVzZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBlLnRhcmdldElkcykgXG4gICAgICAgICAgICAvLyBBIHdhdGNoZWQgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkIGFscmVhZHkuXG4gICAgICAgICAgICB0Ll91LmhhcyhzKSAmJiAoYXdhaXQgdC5yZW1vdGVTeW5jZXIucmVqZWN0TGlzdGVuKHMsIG4pLCB0Ll91LmRlbGV0ZShzKSwgdC5wdS5yZW1vdmVUYXJnZXQocykpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQXR0ZW1wdHMgdG8gZmlsbCBvdXIgd3JpdGUgcGlwZWxpbmUgd2l0aCB3cml0ZXMgZnJvbSB0aGUgTG9jYWxTdG9yZS5cbiAqXG4gKiBDYWxsZWQgaW50ZXJuYWxseSB0byBib290c3RyYXAgb3IgcmVmaWxsIHRoZSB3cml0ZSBwaXBlbGluZSBhbmQgYnlcbiAqIFN5bmNFbmdpbmUgd2hlbmV2ZXIgdGhlcmUgYXJlIG5ldyBtdXRhdGlvbnMgdG8gcHJvY2Vzcy5cbiAqXG4gKiBTdGFydHMgdGhlIHdyaXRlIHN0cmVhbSBpZiBuZWNlc3NhcnkuXG4gKi8gKHQsIGUpO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgQyhcIlJlbW90ZVN0b3JlXCIsIFwiRmFpbGVkIHRvIHJlbW92ZSB0YXJnZXRzICVzOiAlcyBcIiwgZS50YXJnZXRJZHMuam9pbihcIixcIiksIG4pLCBcbiAgICAgICAgYXdhaXQgVHUodCwgbik7XG4gICAgfSBlbHNlIGlmIChlIGluc3RhbmNlb2YgZ3MgPyB0LnB1Lkd0KGUpIDogZSBpbnN0YW5jZW9mIHlzID8gdC5wdS5ZdChlKSA6IHQucHUuV3QoZSksIFxuICAgICFuLmlzRXF1YWwoc3QubWluKCkpKSB0cnkge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgUm8odC5sb2NhbFN0b3JlKTtcbiAgICAgICAgbi5jb21wYXJlVG8oZSkgPj0gMCAmJiBcbiAgICAgICAgLy8gV2UgaGF2ZSByZWNlaXZlZCBhIHRhcmdldCBjaGFuZ2Ugd2l0aCBhIGdsb2JhbCBzbmFwc2hvdCBpZiB0aGUgc25hcHNob3RcbiAgICAgICAgLy8gdmVyc2lvbiBpcyBub3QgZXF1YWwgdG8gU25hcHNob3RWZXJzaW9uLm1pbigpLlxuICAgICAgICBhd2FpdCBcbiAgICAgICAgLyoqXG4gKiBUYWtlcyBhIGJhdGNoIG9mIGNoYW5nZXMgZnJvbSB0aGUgRGF0YXN0b3JlLCByZXBhY2thZ2VzIHRoZW0gYXMgYVxuICogUmVtb3RlRXZlbnQsIGFuZCBwYXNzZXMgdGhhdCBvbiB0byB0aGUgbGlzdGVuZXIsIHdoaWNoIGlzIHR5cGljYWxseSB0aGVcbiAqIFN5bmNFbmdpbmUuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQucHUudGUoZSk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgaW4tbWVtb3J5IHJlc3VtZSB0b2tlbnMuIExvY2FsU3RvcmUgd2lsbCB1cGRhdGUgdGhlXG4gICAgICAgICAgICAvLyBwZXJzaXN0ZW50IHZpZXcgb2YgdGhlc2Ugd2hlbiBhcHBseWluZyB0aGUgY29tcGxldGVkIFJlbW90ZUV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgobiwgcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuLnJlc3VtZVRva2VuLmFwcHJveGltYXRlQnl0ZVNpemUoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuX3UuZ2V0KHMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHdhdGNoZWQgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkIGFscmVhZHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiB0Ll91LnNldChzLCBpLndpdGhSZXN1bWVUb2tlbihuLnJlc3VtZVRva2VuLCBlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpLCBcbiAgICAgICAgICAgIC8vIFJlLWVzdGFibGlzaCBsaXN0ZW5zIGZvciB0aGUgdGFyZ2V0cyB0aGF0IGhhdmUgYmVlbiBpbnZhbGlkYXRlZCBieVxuICAgICAgICAgICAgLy8gZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgbi50YXJnZXRNaXNtYXRjaGVzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0Ll91LmdldChlKTtcbiAgICAgICAgICAgICAgICBpZiAoIW4pIFxuICAgICAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIHJlc3VtZSB0b2tlbiBmb3IgdGhlIHRhcmdldCwgc2luY2Ugd2UncmUgaW4gYSBrbm93biBtaXNtYXRjaFxuICAgICAgICAgICAgICAgIC8vIHN0YXRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll91LnNldChlLCBuLndpdGhSZXN1bWVUb2tlbihXdC5FTVBUWV9CWVRFX1NUUklORywgbi5zbmFwc2hvdFZlcnNpb24pKSwgXG4gICAgICAgICAgICAgICAgLy8gQ2F1c2UgYSBoYXJkIHJlc2V0IGJ5IHVud2F0Y2hpbmcgYW5kIHJld2F0Y2hpbmcgaW1tZWRpYXRlbHksIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGRlbGliZXJhdGVseSBkb24ndCBzZW5kIGEgcmVzdW1lIHRva2VuIHNvIHRoYXQgd2UgZ2V0IGEgZnVsbCB1cGRhdGUuXG4gICAgICAgICAgICAgICAgZHUodCwgZSk7XG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdlIHNlbmQgYXMgYmVpbmcgb24gYmVoYWxmIG9mIGFuIGV4aXN0ZW5jZSBmaWx0ZXJcbiAgICAgICAgICAgICAgICAvLyBtaXNtYXRjaCwgYnV0IGRvbid0IGFjdHVhbGx5IHJldGFpbiB0aGF0IGluIGxpc3RlblRhcmdldHMuIFRoaXMgZW5zdXJlc1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgd2UgZmxhZyB0aGUgZmlyc3QgcmUtbGlzdGVuIHRoaXMgd2F5IHdpdGhvdXQgaW1wYWN0aW5nIGZ1dHVyZVxuICAgICAgICAgICAgICAgIC8vIGxpc3RlbnMgb2YgdGhpcyB0YXJnZXQgKHRoYXQgbWlnaHQgaGFwcGVuIGUuZy4gb24gcmVjb25uZWN0KS5cbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IEZpKG4udGFyZ2V0LCBlLCAxIC8qIEV4aXN0ZW5jZUZpbHRlck1pc21hdGNoICovICwgbi5zZXF1ZW5jZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZnUodCwgcyk7XG4gICAgICAgICAgICB9KSksIHQucmVtb3RlU3luY2VyLmFwcGx5UmVtb3RlRXZlbnQobik7XG4gICAgICAgIH0odCwgbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBDKFwiUmVtb3RlU3RvcmVcIiwgXCJGYWlsZWQgdG8gcmFpc2Ugc25hcHNob3Q6XCIsIGUpLCBhd2FpdCBUdSh0LCBlKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVjb3ZlcnkgbG9naWMgZm9yIEluZGV4ZWREQiBlcnJvcnMgdGhhdCB0YWtlcyB0aGUgbmV0d29yayBvZmZsaW5lIHVudGlsXG4gKiBgb3BgIHN1Y2NlZWRzLiBSZXRyaWVzIGFyZSBzY2hlZHVsZWQgd2l0aCBiYWNrb2ZmIHVzaW5nXG4gKiBgZW5xdWV1ZVJldHJ5YWJsZSgpYC4gSWYgYG9wKClgIGlzIG5vdCBwcm92aWRlZCwgSW5kZXhlZERCIGFjY2VzcyBpc1xuICogdmFsaWRhdGVkIHZpYSBhIGdlbmVyaWMgb3BlcmF0aW9uLlxuICpcbiAqIFRoZSByZXR1cm5lZCBQcm9taXNlIGlzIHJlc29sdmVkIG9uY2UgdGhlIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIGJlZm9yZVxuICogYW55IHJldHJ5IGF0dGVtcHQuXG4gKi8gYXN5bmMgZnVuY3Rpb24gVHUodCwgZSwgbikge1xuICAgIGlmICghVnQoZSkpIHRocm93IGU7XG4gICAgdC53dS5hZGQoMSAvKiBJbmRleGVkRGJGYWlsZWQgKi8pLCBcbiAgICAvLyBEaXNhYmxlIG5ldHdvcmsgYW5kIHJhaXNlIG9mZmxpbmUgc25hcHNob3RzXG4gICAgYXdhaXQgYXUodCksIHQueXUuc2V0KFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pLCBuIHx8IChcbiAgICAvLyBVc2UgYSBzaW1wbGUgcmVhZCBvcGVyYXRpb24gdG8gZGV0ZXJtaW5lIGlmIEluZGV4ZWREQiByZWNvdmVyZWQuXG4gICAgLy8gSWRlYWxseSwgd2Ugd291bGQgZXhwb3NlIGEgaGVhbHRoIGNoZWNrIGRpcmVjdGx5IG9uIFNpbXBsZURiLCBidXRcbiAgICAvLyBSZW1vdGVTdG9yZSBvbmx5IGhhcyBhY2Nlc3MgdG8gcGVyc2lzdGVuY2UgdGhyb3VnaCBMb2NhbFN0b3JlLlxuICAgIG4gPSAoKSA9PiBSbyh0LmxvY2FsU3RvcmUpKSwgXG4gICAgLy8gUHJvYmUgSW5kZXhlZERCIHBlcmlvZGljYWxseSBhbmQgcmUtZW5hYmxlIG5ldHdvcmtcbiAgICB0LmFzeW5jUXVldWUuZW5xdWV1ZVJldHJ5YWJsZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBDKFwiUmVtb3RlU3RvcmVcIiwgXCJSZXRyeWluZyBJbmRleGVkREIgYWNjZXNzXCIpLCBhd2FpdCBuKCksIHQud3UuZGVsZXRlKDEgLyogSW5kZXhlZERiRmFpbGVkICovKSwgXG4gICAgICAgIGF3YWl0IGN1KHQpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyBgb3BgLiBJZiBgb3BgIGZhaWxzLCB0YWtlcyB0aGUgbmV0d29yayBvZmZsaW5lIHVudGlsIGBvcGBcbiAqIHN1Y2NlZWRzLiBSZXR1cm5zIGFmdGVyIHRoZSBmaXJzdCBhdHRlbXB0LlxuICovIGZ1bmN0aW9uIEV1KHQsIGUpIHtcbiAgICByZXR1cm4gZSgpLmNhdGNoKChuID0+IFR1KHQsIG4sIGUpKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIEF1KHQpIHtcbiAgICBjb25zdCBlID0gJCh0KSwgbiA9IE91KGUpO1xuICAgIGxldCBzID0gZS5kdS5sZW5ndGggPiAwID8gZS5kdVtlLmR1Lmxlbmd0aCAtIDFdLmJhdGNoSWQgOiAtMTtcbiAgICBmb3IgKDtSdShlKTsgKSB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgdm8oZS5sb2NhbFN0b3JlLCBzKTtcbiAgICAgICAgaWYgKG51bGwgPT09IHQpIHtcbiAgICAgICAgICAgIDAgPT09IGUuZHUubGVuZ3RoICYmIG4uJG8oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHMgPSB0LmJhdGNoSWQsIGJ1KGUsIHQpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgYXdhaXQgVHUoZSwgdCk7XG4gICAgfVxuICAgIFB1KGUpICYmIHZ1KGUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBjYW4gYWRkIHRvIHRoZSB3cml0ZSBwaXBlbGluZSAoaS5lLiB0aGUgbmV0d29yayBpc1xuICogZW5hYmxlZCBhbmQgdGhlIHdyaXRlIHBpcGVsaW5lIGlzIG5vdCBmdWxsKS5cbiAqLyBmdW5jdGlvbiBSdSh0KSB7XG4gICAgcmV0dXJuIG11KHQpICYmIHQuZHUubGVuZ3RoIDwgMTA7XG59XG5cbi8qKlxuICogUXVldWVzIGFkZGl0aW9uYWwgd3JpdGVzIHRvIGJlIHNlbnQgdG8gdGhlIHdyaXRlIHN0cmVhbSwgc2VuZGluZyB0aGVtXG4gKiBpbW1lZGlhdGVseSBpZiB0aGUgd3JpdGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICovIGZ1bmN0aW9uIGJ1KHQsIGUpIHtcbiAgICB0LmR1LnB1c2goZSk7XG4gICAgY29uc3QgbiA9IE91KHQpO1xuICAgIG4uT28oKSAmJiBuLlhvICYmIG4uWm8oZS5tdXRhdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBQdSh0KSB7XG4gICAgcmV0dXJuIG11KHQpICYmICFPdSh0KS5rbygpICYmIHQuZHUubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gdnUodCkge1xuICAgIE91KHQpLnN0YXJ0KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIFZ1KHQpIHtcbiAgICBPdSh0KS5udSgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBTdSh0KSB7XG4gICAgY29uc3QgZSA9IE91KHQpO1xuICAgIC8vIFNlbmQgdGhlIHdyaXRlIHBpcGVsaW5lIG5vdyB0aGF0IHRoZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQuXG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmR1KSBlLlpvKG4ubXV0YXRpb25zKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gRHUodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSB0LmR1LnNoaWZ0KCksIGkgPSBPaS5mcm9tKHMsIGUsIG4pO1xuICAgIGF3YWl0IEV1KHQsICgoKSA9PiB0LnJlbW90ZVN5bmNlci5hcHBseVN1Y2Nlc3NmdWxXcml0ZShpKSkpLCBcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2l0aCB0aGUgY29tcGxldGlvbiBvZiB0aGlzIG11dGF0aW9uIGFub3RoZXJcbiAgICAvLyBzbG90IGhhcyBmcmVlZCB1cC5cbiAgICBhd2FpdCBBdSh0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gQ3UodCwgZSkge1xuICAgIC8vIElmIHRoZSB3cml0ZSBzdHJlYW0gY2xvc2VkIGFmdGVyIHRoZSB3cml0ZSBoYW5kc2hha2UgY29tcGxldGVzLCBhIHdyaXRlXG4gICAgLy8gb3BlcmF0aW9uIGZhaWxlZCBhbmQgd2UgZmFpbCB0aGUgcGVuZGluZyBvcGVyYXRpb24uXG4gICAgZSAmJiBPdSh0KS5YbyAmJiBcbiAgICAvLyBUaGlzIGVycm9yIGFmZmVjdHMgdGhlIGFjdHVhbCB3cml0ZS5cbiAgICBhd2FpdCBhc3luYyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIE9ubHkgaGFuZGxlIHBlcm1hbmVudCBlcnJvcnMgaGVyZS4gSWYgaXQncyB0cmFuc2llbnQsIGp1c3QgbGV0IHRoZSByZXRyeVxuICAgICAgICAvLyBsb2dpYyBraWNrIGluLlxuICAgICAgICBpZiAobiA9IGUuY29kZSwgWm4obikgJiYgbiAhPT0gQi5BQk9SVEVEKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdhcyBhIHBlcm1hbmVudCBlcnJvciwgdGhlIHJlcXVlc3QgaXRzZWxmIHdhcyB0aGUgcHJvYmxlbVxuICAgICAgICAgICAgLy8gc28gaXQncyBub3QgZ29pbmcgdG8gc3VjY2VlZCBpZiB3ZSByZXNlbmQgaXQuXG4gICAgICAgICAgICBjb25zdCBuID0gdC5kdS5zaGlmdCgpO1xuICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGl0J3MgYWxzbyB1bmxpa2VseSB0aGF0IHRoZSBzZXJ2ZXIgaXRzZWxmIGlzIG1lbHRpbmdcbiAgICAgICAgICAgIC8vIGRvd24gLS0gdGhpcyB3YXMganVzdCBhIGJhZCByZXF1ZXN0IHNvIGluaGliaXQgYmFja29mZiBvbiB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gcmVzdGFydC5cbiAgICAgICAgICAgICAgICAgICAgICAgIE91KHQpLkZvKCksIGF3YWl0IEV1KHQsICgoKSA9PiB0LnJlbW90ZVN5bmNlci5yZWplY3RGYWlsZWRXcml0ZShuLmJhdGNoSWQsIGUpKSksIFxuICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdpdGggdGhlIGNvbXBsZXRpb24gb2YgdGhpcyBtdXRhdGlvblxuICAgICAgICAgICAgLy8gYW5vdGhlciBzbG90IGhhcyBmcmVlZCB1cC5cbiAgICAgICAgICAgIGF3YWl0IEF1KHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuO1xuICAgIH0odCwgZSksIFxuICAgIC8vIFRoZSB3cml0ZSBzdHJlYW0gbWlnaHQgaGF2ZSBiZWVuIHN0YXJ0ZWQgYnkgcmVmaWxsaW5nIHRoZSB3cml0ZVxuICAgIC8vIHBpcGVsaW5lIGZvciBmYWlsZWQgd3JpdGVzXG4gICAgUHUodCkgJiYgdnUodCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHh1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICBuLmFzeW5jUXVldWUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcygpLCBDKFwiUmVtb3RlU3RvcmVcIiwgXCJSZW1vdGVTdG9yZSByZWNlaXZlZCBuZXcgY3JlZGVudGlhbHNcIik7XG4gICAgY29uc3QgcyA9IG11KG4pO1xuICAgIC8vIFRlYXIgZG93biBhbmQgcmUtY3JlYXRlIG91ciBuZXR3b3JrIHN0cmVhbXMuIFRoaXMgd2lsbCBlbnN1cmUgd2UgZ2V0IGFcbiAgICAvLyBmcmVzaCBhdXRoIHRva2VuIGZvciB0aGUgbmV3IHVzZXIgYW5kIHJlLWZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIHdpdGhcbiAgICAvLyBuZXcgbXV0YXRpb25zIGZyb20gdGhlIExvY2FsU3RvcmUgKHNpbmNlIG11dGF0aW9ucyBhcmUgcGVyLXVzZXIpLlxuICAgICAgICBuLnd1LmFkZCgzIC8qIENyZWRlbnRpYWxDaGFuZ2UgKi8pLCBhd2FpdCBhdShuKSwgcyAmJiBcbiAgICAvLyBEb24ndCBzZXQgdGhlIG5ldHdvcmsgc3RhdHVzIHRvIFVua25vd24gaWYgd2UgYXJlIG9mZmxpbmUuXG4gICAgbi55dS5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyksIGF3YWl0IG4ucmVtb3RlU3luY2VyLmhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UoZSksIFxuICAgIG4ud3UuZGVsZXRlKDMgLyogQ3JlZGVudGlhbENoYW5nZSAqLyksIGF3YWl0IGN1KG4pO1xufVxuXG4vKipcbiAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxuICovIGFzeW5jIGZ1bmN0aW9uIE51KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICBlID8gKG4ud3UuZGVsZXRlKDIgLyogSXNTZWNvbmRhcnkgKi8pLCBhd2FpdCBjdShuKSkgOiBlIHx8IChuLnd1LmFkZCgyIC8qIElzU2Vjb25kYXJ5ICovKSwgXG4gICAgYXdhaXQgYXUobiksIG4ueXUuc2V0KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pKTtcbn1cblxuLyoqXG4gKiBJZiBub3QgeWV0IGluaXRpYWxpemVkLCByZWdpc3RlcnMgdGhlIFdhdGNoU3RyZWFtIGFuZCBpdHMgbmV0d29yayBzdGF0ZVxuICogY2FsbGJhY2sgd2l0aCBgcmVtb3RlU3RvcmVJbXBsYC4gUmV0dXJucyB0aGUgZXhpc3Rpbmcgc3RyZWFtIGlmIG9uZSBpc1xuICogYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogUE9SVElORyBOT1RFOiBPbiBpT1MgYW5kIEFuZHJvaWQsIHRoZSBXYXRjaFN0cmVhbSBnZXRzIHJlZ2lzdGVyZWQgb24gc3RhcnR1cC5cbiAqIFRoaXMgaXMgbm90IGRvbmUgb24gV2ViIHRvIGFsbG93IGl0IHRvIGJlIHRyZWUtc2hha2VuLlxuICovIGZ1bmN0aW9uIGt1KHQpIHtcbiAgICByZXR1cm4gdC5JdSB8fCAoXG4gICAgLy8gQ3JlYXRlIHN0cmVhbSAoYnV0IG5vdGUgdGhhdCBpdCBpcyBub3Qgc3RhcnRlZCB5ZXQpLlxuICAgIHQuSXUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSAkKHQpO1xuICAgICAgICByZXR1cm4gcy5pdSgpLCBuZXcgbnUoZSwgcy5Tbywgcy5hdXRoQ3JlZGVudGlhbHMsIHMuYXBwQ2hlY2tDcmVkZW50aWFscywgcy5JdCwgbik7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovICh0LmRhdGFzdG9yZSwgdC5hc3luY1F1ZXVlLCB7XG4gICAgICAgIFlyOiB5dS5iaW5kKG51bGwsIHQpLFxuICAgICAgICBacjogcHUuYmluZChudWxsLCB0KSxcbiAgICAgICAgem86IEl1LmJpbmQobnVsbCwgdClcbiAgICB9KSwgdC5tdS5wdXNoKChhc3luYyBlID0+IHtcbiAgICAgICAgZSA/ICh0Lkl1LkZvKCksIHd1KHQpID8gX3UodCkgOiB0Lnl1LnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSkgOiAoYXdhaXQgdC5JdS5zdG9wKCksIFxuICAgICAgICBndSh0KSk7XG4gICAgfSkpKSwgdC5JdTtcbn1cblxuLyoqXG4gKiBJZiBub3QgeWV0IGluaXRpYWxpemVkLCByZWdpc3RlcnMgdGhlIFdyaXRlU3RyZWFtIGFuZCBpdHMgbmV0d29yayBzdGF0ZVxuICogY2FsbGJhY2sgd2l0aCBgcmVtb3RlU3RvcmVJbXBsYC4gUmV0dXJucyB0aGUgZXhpc3Rpbmcgc3RyZWFtIGlmIG9uZSBpc1xuICogYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogUE9SVElORyBOT1RFOiBPbiBpT1MgYW5kIEFuZHJvaWQsIHRoZSBXcml0ZVN0cmVhbSBnZXRzIHJlZ2lzdGVyZWQgb24gc3RhcnR1cC5cbiAqIFRoaXMgaXMgbm90IGRvbmUgb24gV2ViIHRvIGFsbG93IGl0IHRvIGJlIHRyZWUtc2hha2VuLlxuICovIGZ1bmN0aW9uIE91KHQpIHtcbiAgICByZXR1cm4gdC5UdSB8fCAoXG4gICAgLy8gQ3JlYXRlIHN0cmVhbSAoYnV0IG5vdGUgdGhhdCBpdCBpcyBub3Qgc3RhcnRlZCB5ZXQpLlxuICAgIHQuVHUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSAkKHQpO1xuICAgICAgICByZXR1cm4gcy5pdSgpLCBuZXcgc3UoZSwgcy5Tbywgcy5hdXRoQ3JlZGVudGlhbHMsIHMuYXBwQ2hlY2tDcmVkZW50aWFscywgcy5JdCwgbik7XG4gICAgfSh0LmRhdGFzdG9yZSwgdC5hc3luY1F1ZXVlLCB7XG4gICAgICAgIFlyOiBWdS5iaW5kKG51bGwsIHQpLFxuICAgICAgICBacjogQ3UuYmluZChudWxsLCB0KSxcbiAgICAgICAgZXU6IFN1LmJpbmQobnVsbCwgdCksXG4gICAgICAgIHR1OiBEdS5iaW5kKG51bGwsIHQpXG4gICAgfSksIHQubXUucHVzaCgoYXN5bmMgZSA9PiB7XG4gICAgICAgIGUgPyAodC5UdS5GbygpLCBcbiAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IHRoZSB3cml0ZSBzdHJlYW0gaWYgbmVjZXNzYXJ5LlxuICAgICAgICBhd2FpdCBBdSh0KSkgOiAoYXdhaXQgdC5UdS5zdG9wKCksIHQuZHUubGVuZ3RoID4gMCAmJiAoQyhcIlJlbW90ZVN0b3JlXCIsIGBTdG9wcGluZyB3cml0ZSBzdHJlYW0gd2l0aCAke3QuZHUubGVuZ3RofSBwZW5kaW5nIHdyaXRlc2ApLCBcbiAgICAgICAgdC5kdSA9IFtdKSk7XG4gICAgfSkpKSwgdC5UdTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhbiBvcGVyYXRpb24gc2NoZWR1bGVkIHRvIGJlIHJ1biBpbiB0aGUgZnV0dXJlIG9uIGFuIEFzeW5jUXVldWUuXG4gKlxuICogSXQgaXMgY3JlYXRlZCB2aWEgRGVsYXllZE9wZXJhdGlvbi5jcmVhdGVBbmRTY2hlZHVsZSgpLlxuICpcbiAqIFN1cHBvcnRzIGNhbmNlbGxhdGlvbiAodmlhIGNhbmNlbCgpKSBhbmQgZWFybHkgZXhlY3V0aW9uICh2aWEgc2tpcERlbGF5KCkpLlxuICpcbiAqIE5vdGU6IFdlIGltcGxlbWVudCBgUHJvbWlzZUxpa2VgIGluc3RlYWQgb2YgYFByb21pc2VgLCBhcyB0aGUgYFByb21pc2VgIHR5cGVcbiAqIGluIG5ld2VyIHZlcnNpb25zIG9mIFR5cGVTY3JpcHQgZGVmaW5lcyBgZmluYWxseWAsIHdoaWNoIGlzIG5vdCBhdmFpbGFibGUgaW5cbiAqIElFLlxuICovXG5jbGFzcyBNdSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSB0LCB0aGlzLnRpbWVySWQgPSBlLCB0aGlzLnRhcmdldFRpbWVNcyA9IG4sIHRoaXMub3AgPSBzLCB0aGlzLnJlbW92YWxDYWxsYmFjayA9IGksIFxuICAgICAgICB0aGlzLmRlZmVycmVkID0gbmV3IFUsIHRoaXMudGhlbiA9IHRoaXMuZGVmZXJyZWQucHJvbWlzZS50aGVuLmJpbmQodGhpcy5kZWZlcnJlZC5wcm9taXNlKSwgXG4gICAgICAgIC8vIEl0J3Mgbm9ybWFsIGZvciB0aGUgZGVmZXJyZWQgcHJvbWlzZSB0byBiZSBjYW5jZWxlZCAoZHVlIHRvIGNhbmNlbGxhdGlvbilcbiAgICAgICAgLy8gYW5kIHNvIHdlIGF0dGFjaCBhIGR1bW15IGNhdGNoIGNhbGxiYWNrIHRvIGF2b2lkXG4gICAgICAgIC8vICdVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uV2FybmluZycgbG9nIHNwYW0uXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucHJvbWlzZS5jYXRjaCgodCA9PiB7fSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgRGVsYXllZE9wZXJhdGlvbiB0aGF0IGhhcyBiZWVuIHNjaGVkdWxlZCB0byBiZVxuICAgICAqIGV4ZWN1dGVkIG9uIHRoZSBwcm92aWRlZCBhc3luY1F1ZXVlIGFmdGVyIHRoZSBwcm92aWRlZCBkZWxheU1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFzeW5jUXVldWUgLSBUaGUgcXVldWUgdG8gc2NoZWR1bGUgdGhlIG9wZXJhdGlvbiBvbi5cbiAgICAgKiBAcGFyYW0gaWQgLSBBIFRpbWVyIElEIGlkZW50aWZ5aW5nIHRoZSB0eXBlIG9mIG9wZXJhdGlvbiB0aGlzIGlzLlxuICAgICAqIEBwYXJhbSBkZWxheU1zIC0gVGhlIGRlbGF5IChtcykgYmVmb3JlIHRoZSBvcGVyYXRpb24gc2hvdWxkIGJlIHNjaGVkdWxlZC5cbiAgICAgKiBAcGFyYW0gb3AgLSBUaGUgb3BlcmF0aW9uIHRvIHJ1bi5cbiAgICAgKiBAcGFyYW0gcmVtb3ZhbENhbGxiYWNrIC0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgc3luY2hyb25vdXNseSBvbmNlIHRoZVxuICAgICAqICAgb3BlcmF0aW9uIGlzIGV4ZWN1dGVkIG9yIGNhbmNlbGVkLCBub3RpZnlpbmcgdGhlIEFzeW5jUXVldWUgdG8gcmVtb3ZlIGl0XG4gICAgICogICBmcm9tIGl0cyBkZWxheWVkT3BlcmF0aW9ucyBsaXN0LlxuICAgICAqICAgUE9SVElORyBOT1RFOiBUaGlzIGV4aXN0cyB0byBwcmV2ZW50IG1ha2luZyByZW1vdmVEZWxheWVkT3BlcmF0aW9uKCkgYW5kXG4gICAgICogICB0aGUgRGVsYXllZE9wZXJhdGlvbiBjbGFzcyBwdWJsaWMuXG4gICAgICovICAgIHN0YXRpYyBjcmVhdGVBbmRTY2hlZHVsZSh0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBEYXRlLm5vdygpICsgbiwgbyA9IG5ldyBNdSh0LCBlLCByLCBzLCBpKTtcbiAgICAgICAgcmV0dXJuIG8uc3RhcnQobiksIG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgdGltZXIuIFRoaXMgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIGNvbnN0cnVjdGlvbiBieVxuICAgICAqIGNyZWF0ZUFuZFNjaGVkdWxlKCkuXG4gICAgICovICAgIHN0YXJ0KHQpIHtcbiAgICAgICAgdGhpcy50aW1lckhhbmRsZSA9IHNldFRpbWVvdXQoKCgpID0+IHRoaXMuaGFuZGxlRGVsYXlFbGFwc2VkKCkpLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVldWVzIHRoZSBvcGVyYXRpb24gdG8gcnVuIGltbWVkaWF0ZWx5IChpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIHJ1biBvclxuICAgICAqIGNhbmNlbGVkKS5cbiAgICAgKi8gICAgc2tpcERlbGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVEZWxheUVsYXBzZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgb3BlcmF0aW9uIGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gZXhlY3V0ZWQgb3IgY2FuY2VsZWQuIFRoZVxuICAgICAqIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZC5cbiAgICAgKlxuICAgICAqIEFzIGxvbmcgYXMgdGhlIG9wZXJhdGlvbiBoYXMgbm90IHlldCBiZWVuIHJ1biwgY2FsbGluZyBjYW5jZWwoKSBwcm92aWRlcyBhXG4gICAgICogZ3VhcmFudGVlIHRoYXQgdGhlIG9wZXJhdGlvbiB3aWxsIG5vdCBiZSBydW4uXG4gICAgICovICAgIGNhbmNlbCh0KSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMudGltZXJIYW5kbGUgJiYgKHRoaXMuY2xlYXJUaW1lb3V0KCksIHRoaXMuZGVmZXJyZWQucmVqZWN0KG5ldyBMKEIuQ0FOQ0VMTEVELCBcIk9wZXJhdGlvbiBjYW5jZWxsZWRcIiArICh0ID8gXCI6IFwiICsgdCA6IFwiXCIpKSkpO1xuICAgIH1cbiAgICBoYW5kbGVEZWxheUVsYXBzZWQoKSB7XG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiBudWxsICE9PSB0aGlzLnRpbWVySGFuZGxlID8gKHRoaXMuY2xlYXJUaW1lb3V0KCksIFxuICAgICAgICB0aGlzLm9wKCkudGhlbigodCA9PiB0aGlzLmRlZmVycmVkLnJlc29sdmUodCkpKSkgOiBQcm9taXNlLnJlc29sdmUoKSkpO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMudGltZXJIYW5kbGUgJiYgKHRoaXMucmVtb3ZhbENhbGxiYWNrKHRoaXMpLCBjbGVhclRpbWVvdXQodGhpcy50aW1lckhhbmRsZSksIFxuICAgICAgICB0aGlzLnRpbWVySGFuZGxlID0gbnVsbCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBGaXJlc3RvcmVFcnJvciB0aGF0IGNhbiBiZSBzdXJmYWNlZCB0byB0aGUgdXNlciBpZiB0aGUgcHJvdmlkZWRcbiAqIGVycm9yIGlzIGFuIEluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IuIFJlLXRocm93cyB0aGUgZXJyb3Igb3RoZXJ3aXNlLlxuICovIGZ1bmN0aW9uIEZ1KHQsIGUpIHtcbiAgICBpZiAoeChcIkFzeW5jUXVldWVcIiwgYCR7ZX06ICR7dH1gKSwgVnQodCkpIHJldHVybiBuZXcgTChCLlVOQVZBSUxBQkxFLCBgJHtlfTogJHt0fWApO1xuICAgIHRocm93IHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50U2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGRvY3VtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLiBXZSBhbHdheXMgYWRkIGEgZG9jdW1lbnQga2V5XG4gKiBjb21wYXJhdG9yIG9uIHRvcCBvZiB3aGF0IGlzIHByb3ZpZGVkIHRvIGd1YXJhbnRlZSBkb2N1bWVudCBlcXVhbGl0eSBiYXNlZCBvblxuICogdGhlIGtleS5cbiAqLyBjbGFzcyAkdSB7XG4gICAgLyoqIFRoZSBkZWZhdWx0IG9yZGVyaW5nIGlzIGJ5IGtleSBpZiB0aGUgY29tcGFyYXRvciBpcyBvbWl0dGVkICovXG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICAvLyBXZSBhcmUgYWRkaW5nIGRvY3VtZW50IGtleSBjb21wYXJhdG9yIHRvIHRoZSBlbmQgYXMgaXQncyB0aGUgb25seVxuICAgICAgICAvLyBndWFyYW50ZWVkIHVuaXF1ZSBwcm9wZXJ0eSBvZiBhIGRvY3VtZW50LlxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSB0ID8gKGUsIG4pID0+IHQoZSwgbikgfHwgY3QuY29tcGFyYXRvcihlLmtleSwgbi5rZXkpIDogKHQsIGUpID0+IGN0LmNvbXBhcmF0b3IodC5rZXksIGUua2V5KSwgXG4gICAgICAgIHRoaXMua2V5ZWRNYXAgPSBycygpLCB0aGlzLnNvcnRlZFNldCA9IG5ldyBCdCh0aGlzLmNvbXBhcmF0b3IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVtcHR5IGNvcHkgb2YgdGhlIGV4aXN0aW5nIERvY3VtZW50U2V0LCB1c2luZyB0aGUgc2FtZVxuICAgICAqIGNvbXBhcmF0b3IuXG4gICAgICovICAgIHN0YXRpYyBlbXB0eVNldCh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgJHUodC5jb21wYXJhdG9yKTtcbiAgICB9XG4gICAgaGFzKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT0gdGhpcy5rZXllZE1hcC5nZXQodCk7XG4gICAgfVxuICAgIGdldCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleWVkTWFwLmdldCh0KTtcbiAgICB9XG4gICAgZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZFNldC5taW5LZXkoKTtcbiAgICB9XG4gICAgbGFzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkU2V0Lm1heEtleSgpO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQuaXNFbXB0eSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgcHJvdmlkZWQga2V5IGluIHRoZSBkb2N1bWVudCBzZXQsIG9yIC0xIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IGtleSBpcyBub3QgcHJlc2VudCBpbiB0aGUgc2V0O1xuICAgICAqLyAgICBpbmRleE9mKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMua2V5ZWRNYXAuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuc29ydGVkU2V0LmluZGV4T2YoZSkgOiAtMTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZFNldC5zaXplO1xuICAgIH1cbiAgICAvKiogSXRlcmF0ZXMgZG9jdW1lbnRzIGluIG9yZGVyIGRlZmluZWQgYnkgXCJjb21wYXJhdG9yXCIgKi8gICAgZm9yRWFjaCh0KSB7XG4gICAgICAgIHRoaXMuc29ydGVkU2V0Lmlub3JkZXJUcmF2ZXJzYWwoKChlLCBuKSA9PiAodChlKSwgITEpKSk7XG4gICAgfVxuICAgIC8qKiBJbnNlcnRzIG9yIHVwZGF0ZXMgYSBkb2N1bWVudCB3aXRoIHRoZSBzYW1lIGtleSAqLyAgICBhZGQodCkge1xuICAgICAgICAvLyBGaXJzdCByZW1vdmUgdGhlIGVsZW1lbnQgaWYgd2UgaGF2ZSBpdC5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZGVsZXRlKHQua2V5KTtcbiAgICAgICAgcmV0dXJuIGUuY29weShlLmtleWVkTWFwLmluc2VydCh0LmtleSwgdCksIGUuc29ydGVkU2V0Lmluc2VydCh0LCBudWxsKSk7XG4gICAgfVxuICAgIC8qKiBEZWxldGVzIGEgZG9jdW1lbnQgd2l0aCBhIGdpdmVuIGtleSAqLyAgICBkZWxldGUodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5nZXQodCk7XG4gICAgICAgIHJldHVybiBlID8gdGhpcy5jb3B5KHRoaXMua2V5ZWRNYXAucmVtb3ZlKHQpLCB0aGlzLnNvcnRlZFNldC5yZW1vdmUoZSkpIDogdGhpcztcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiAkdSkpIHJldHVybiAhMTtcbiAgICAgICAgaWYgKHRoaXMuc2l6ZSAhPT0gdC5zaXplKSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnNvcnRlZFNldC5nZXRJdGVyYXRvcigpLCBuID0gdC5zb3J0ZWRTZXQuZ2V0SXRlcmF0b3IoKTtcbiAgICAgICAgZm9yICg7ZS5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuZ2V0TmV4dCgpLmtleSwgcyA9IG4uZ2V0TmV4dCgpLmtleTtcbiAgICAgICAgICAgIGlmICghdC5pc0VxdWFsKHMpKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIHQucHVzaChlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KSksIDAgPT09IHQubGVuZ3RoID8gXCJEb2N1bWVudFNldCAoKVwiIDogXCJEb2N1bWVudFNldCAoXFxuICBcIiArIHQuam9pbihcIiAgXFxuXCIpICsgXCJcXG4pXCI7XG4gICAgfVxuICAgIGNvcHkodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3ICR1O1xuICAgICAgICByZXR1cm4gbi5jb21wYXJhdG9yID0gdGhpcy5jb21wYXJhdG9yLCBuLmtleWVkTWFwID0gdCwgbi5zb3J0ZWRTZXQgPSBlLCBuO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRG9jdW1lbnRDaGFuZ2VTZXQga2VlcHMgdHJhY2sgb2YgYSBzZXQgb2YgY2hhbmdlcyB0byBkb2NzIGluIGEgcXVlcnksIG1lcmdpbmdcbiAqIGR1cGxpY2F0ZSBldmVudHMgZm9yIHRoZSBzYW1lIGRvYy5cbiAqLyBjbGFzcyBCdSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuRXUgPSBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIHRyYWNrKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuZG9jLmtleSwgbiA9IHRoaXMuRXUuZ2V0KGUpO1xuICAgICAgICBuID8gXG4gICAgICAgIC8vIE1lcmdlIHRoZSBuZXcgY2hhbmdlIHdpdGggdGhlIGV4aXN0aW5nIGNoYW5nZS5cbiAgICAgICAgMCAvKiBBZGRlZCAqLyAhPT0gdC50eXBlICYmIDMgLyogTWV0YWRhdGEgKi8gPT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1Lmluc2VydChlLCB0KSA6IDMgLyogTWV0YWRhdGEgKi8gPT09IHQudHlwZSAmJiAxIC8qIFJlbW92ZWQgKi8gIT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiBuLnR5cGUsXG4gICAgICAgICAgICBkb2M6IHQuZG9jXG4gICAgICAgIH0pIDogMiAvKiBNb2RpZmllZCAqLyA9PT0gdC50eXBlICYmIDIgLyogTW9kaWZpZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAyIC8qIE1vZGlmaWVkICovICxcbiAgICAgICAgICAgIGRvYzogdC5kb2NcbiAgICAgICAgfSkgOiAyIC8qIE1vZGlmaWVkICovID09PSB0LnR5cGUgJiYgMCAvKiBBZGRlZCAqLyA9PT0gbi50eXBlID8gdGhpcy5FdSA9IHRoaXMuRXUuaW5zZXJ0KGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDAgLyogQWRkZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IDEgLyogUmVtb3ZlZCAqLyA9PT0gdC50eXBlICYmIDAgLyogQWRkZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1LnJlbW92ZShlKSA6IDEgLyogUmVtb3ZlZCAqLyA9PT0gdC50eXBlICYmIDIgLyogTW9kaWZpZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiBuLmRvY1xuICAgICAgICB9KSA6IDAgLyogQWRkZWQgKi8gPT09IHQudHlwZSAmJiAxIC8qIFJlbW92ZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuRXUgPSB0aGlzLkV1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAyIC8qIE1vZGlmaWVkICovICxcbiAgICAgICAgICAgIGRvYzogdC5kb2NcbiAgICAgICAgfSkgOiBcbiAgICAgICAgLy8gVGhpcyBpbmNsdWRlcyB0aGVzZSBjYXNlcywgd2hpY2ggZG9uJ3QgbWFrZSBzZW5zZTpcbiAgICAgICAgLy8gQWRkZWQtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPlJlbW92ZWRcbiAgICAgICAgLy8gTW9kaWZpZWQtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPk1vZGlmaWVkXG4gICAgICAgIC8vIE1ldGFkYXRhLT5BZGRlZFxuICAgICAgICAvLyBSZW1vdmVkLT5NZXRhZGF0YVxuICAgICAgICBPKCkgOiB0aGlzLkV1ID0gdGhpcy5FdS5pbnNlcnQoZSwgdCk7XG4gICAgfVxuICAgIEF1KCkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLkV1Lmlub3JkZXJUcmF2ZXJzYWwoKChlLCBuKSA9PiB7XG4gICAgICAgICAgICB0LnB1c2gobik7XG4gICAgICAgIH0pKSwgdDtcbiAgICB9XG59XG5cbmNsYXNzIEx1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpLCByLCBvLCB1LCBjKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLmRvY3MgPSBlLCB0aGlzLm9sZERvY3MgPSBuLCB0aGlzLmRvY0NoYW5nZXMgPSBzLCB0aGlzLm11dGF0ZWRLZXlzID0gaSwgXG4gICAgICAgIHRoaXMuZnJvbUNhY2hlID0gciwgdGhpcy5zeW5jU3RhdGVDaGFuZ2VkID0gbywgdGhpcy5leGNsdWRlc01ldGFkYXRhQ2hhbmdlcyA9IHUsIFxuICAgICAgICB0aGlzLmhhc0NhY2hlZFJlc3VsdHMgPSBjO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHZpZXcgc25hcHNob3QgYXMgaWYgYWxsIGRvY3VtZW50cyBpbiB0aGUgc25hcHNob3Qgd2VyZSBhZGRlZC4gKi8gICAgc3RhdGljIGZyb21Jbml0aWFsRG9jdW1lbnRzKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgY29uc3QgciA9IFtdO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIHIucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBBZGRlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiB0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCBuZXcgTHUodCwgZSwgJHUuZW1wdHlTZXQoZSksIHIsIG4sIHMsIFxuICAgICAgICAvKiBzeW5jU3RhdGVDaGFuZ2VkPSAqLyAhMCwgXG4gICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMSwgaSk7XG4gICAgfVxuICAgIGdldCBoYXNQZW5kaW5nV3JpdGVzKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMubXV0YXRlZEtleXMuaXNFbXB0eSgpO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgaWYgKCEodGhpcy5mcm9tQ2FjaGUgPT09IHQuZnJvbUNhY2hlICYmIHRoaXMuaGFzQ2FjaGVkUmVzdWx0cyA9PT0gdC5oYXNDYWNoZWRSZXN1bHRzICYmIHRoaXMuc3luY1N0YXRlQ2hhbmdlZCA9PT0gdC5zeW5jU3RhdGVDaGFuZ2VkICYmIHRoaXMubXV0YXRlZEtleXMuaXNFcXVhbCh0Lm11dGF0ZWRLZXlzKSAmJiBobih0aGlzLnF1ZXJ5LCB0LnF1ZXJ5KSAmJiB0aGlzLmRvY3MuaXNFcXVhbCh0LmRvY3MpICYmIHRoaXMub2xkRG9jcy5pc0VxdWFsKHQub2xkRG9jcykpKSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmRvY0NoYW5nZXMsIG4gPSB0LmRvY0NoYW5nZXM7XG4gICAgICAgIGlmIChlLmxlbmd0aCAhPT0gbi5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCsrKSBpZiAoZVt0XS50eXBlICE9PSBuW3RdLnR5cGUgfHwgIWVbdF0uZG9jLmlzRXF1YWwoblt0XS5kb2MpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEhvbGRzIHRoZSBsaXN0ZW5lcnMgYW5kIHRoZSBsYXN0IHJlY2VpdmVkIFZpZXdTbmFwc2hvdCBmb3IgYSBxdWVyeSBiZWluZ1xuICogdHJhY2tlZCBieSBFdmVudE1hbmFnZXIuXG4gKi8gY2xhc3MgVXUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLlJ1ID0gdm9pZCAwLCB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH1cbn1cblxuY2xhc3MgcXUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBuZXcgZXMoKHQgPT4gbG4odCkpLCBobiksIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBVbmtub3duICovICwgXG4gICAgICAgIHRoaXMuYnUgPSBuZXcgU2V0O1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gS3UodCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpLCBzID0gZS5xdWVyeTtcbiAgICBsZXQgaSA9ICExLCByID0gbi5xdWVyaWVzLmdldChzKTtcbiAgICBpZiAociB8fCAoaSA9ICEwLCByID0gbmV3IFV1KSwgaSkgdHJ5IHtcbiAgICAgICAgci5SdSA9IGF3YWl0IG4ub25MaXN0ZW4ocyk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICBjb25zdCBuID0gRnUodCwgYEluaXRpYWxpemF0aW9uIG9mIHF1ZXJ5ICcke2ZuKGUucXVlcnkpfScgZmFpbGVkYCk7XG4gICAgICAgIHJldHVybiB2b2lkIGUub25FcnJvcihuKTtcbiAgICB9XG4gICAgaWYgKG4ucXVlcmllcy5zZXQocywgciksIHIubGlzdGVuZXJzLnB1c2goZSksIFxuICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgIGUuUHUobi5vbmxpbmVTdGF0ZSksIHIuUnUpIHtcbiAgICAgICAgZS52dShyLlJ1KSAmJiBXdShuKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIEd1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9IGUucXVlcnk7XG4gICAgbGV0IGkgPSAhMTtcbiAgICBjb25zdCByID0gbi5xdWVyaWVzLmdldChzKTtcbiAgICBpZiAocikge1xuICAgICAgICBjb25zdCB0ID0gci5saXN0ZW5lcnMuaW5kZXhPZihlKTtcbiAgICAgICAgdCA+PSAwICYmIChyLmxpc3RlbmVycy5zcGxpY2UodCwgMSksIGkgPSAwID09PSByLmxpc3RlbmVycy5sZW5ndGgpO1xuICAgIH1cbiAgICBpZiAoaSkgcmV0dXJuIG4ucXVlcmllcy5kZWxldGUocyksIG4ub25Vbmxpc3RlbihzKTtcbn1cblxuZnVuY3Rpb24gUXUodCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgIGxldCBzID0gITE7XG4gICAgZm9yIChjb25zdCB0IG9mIGUpIHtcbiAgICAgICAgY29uc3QgZSA9IHQucXVlcnksIGkgPSBuLnF1ZXJpZXMuZ2V0KGUpO1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIGkubGlzdGVuZXJzKSBlLnZ1KHQpICYmIChzID0gITApO1xuICAgICAgICAgICAgaS5SdSA9IHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcyAmJiBXdShuKTtcbn1cblxuZnVuY3Rpb24ganUodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSAkKHQpLCBpID0gcy5xdWVyaWVzLmdldChlKTtcbiAgICBpZiAoaSkgZm9yIChjb25zdCB0IG9mIGkubGlzdGVuZXJzKSB0Lm9uRXJyb3Iobik7XG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMuIE5PVEU6IFdlIGRvbid0IG5lZWQgdG8gY2FsbCBzeW5jRW5naW5lLnVubGlzdGVuKClcbiAgICAvLyBhZnRlciBhbiBlcnJvci5cbiAgICAgICAgcy5xdWVyaWVzLmRlbGV0ZShlKTtcbn1cblxuLy8gQ2FsbCBhbGwgZ2xvYmFsIHNuYXBzaG90IGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiBzZXQuXG5mdW5jdGlvbiBXdSh0KSB7XG4gICAgdC5idS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgdC5uZXh0KCk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFF1ZXJ5TGlzdGVuZXIgdGFrZXMgYSBzZXJpZXMgb2YgaW50ZXJuYWwgdmlldyBzbmFwc2hvdHMgYW5kIGRldGVybWluZXNcbiAqIHdoZW4gdG8gcmFpc2UgdGhlIGV2ZW50LlxuICpcbiAqIEl0IHVzZXMgYW4gT2JzZXJ2ZXIgdG8gZGlzcGF0Y2ggZXZlbnRzLlxuICovIGNsYXNzIHp1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLlZ1ID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsIHNuYXBzaG90cyAoZS5nLiBmcm9tIGNhY2hlKSBtYXkgbm90IGJlIHByb3BhZ2F0ZWQgdG8gdGhlIHdyYXBwZWRcbiAgICAgICAgICogb2JzZXJ2ZXIuIFRoaXMgZmxhZyBpcyBzZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIGFjdHVhbGx5IHJhaXNlZCBhbiBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuU3UgPSAhMSwgdGhpcy5EdSA9IG51bGwsIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBVbmtub3duICovICwgdGhpcy5vcHRpb25zID0gbiB8fCB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgbmV3IFZpZXdTbmFwc2hvdCB0byB0aGlzIGxpc3RlbmVyLCByYWlzaW5nIGEgdXNlci1mYWNpbmcgZXZlbnRcbiAgICAgKiBpZiBhcHBsaWNhYmxlIChkZXBlbmRpbmcgb24gd2hhdCBjaGFuZ2VkLCB3aGV0aGVyIHRoZSB1c2VyIGhhcyBvcHRlZCBpbnRvXG4gICAgICogbWV0YWRhdGEtb25seSBjaGFuZ2VzLCBldGMuKS4gUmV0dXJucyB0cnVlIGlmIGEgdXNlci1mYWNpbmcgZXZlbnQgd2FzXG4gICAgICogaW5kZWVkIHJhaXNlZC5cbiAgICAgKi8gICAgdnUodCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG1ldGFkYXRhIG9ubHkgY2hhbmdlcy5cbiAgICAgICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmRvY0NoYW5nZXMpIDMgLyogTWV0YWRhdGEgKi8gIT09IG4udHlwZSAmJiBlLnB1c2gobik7XG4gICAgICAgICAgICB0ID0gbmV3IEx1KHQucXVlcnksIHQuZG9jcywgdC5vbGREb2NzLCBlLCB0Lm11dGF0ZWRLZXlzLCB0LmZyb21DYWNoZSwgdC5zeW5jU3RhdGVDaGFuZ2VkLCBcbiAgICAgICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMCwgdC5oYXNDYWNoZWRSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZSA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5TdSA/IHRoaXMuQ3UodCkgJiYgKHRoaXMuVnUubmV4dCh0KSwgZSA9ICEwKSA6IHRoaXMueHUodCwgdGhpcy5vbmxpbmVTdGF0ZSkgJiYgKHRoaXMuTnUodCksIFxuICAgICAgICBlID0gITApLCB0aGlzLkR1ID0gdCwgZTtcbiAgICB9XG4gICAgb25FcnJvcih0KSB7XG4gICAgICAgIHRoaXMuVnUuZXJyb3IodCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHdoZXRoZXIgYSBzbmFwc2hvdCB3YXMgcmFpc2VkLiAqLyAgICBQdSh0KSB7XG4gICAgICAgIHRoaXMub25saW5lU3RhdGUgPSB0O1xuICAgICAgICBsZXQgZSA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5EdSAmJiAhdGhpcy5TdSAmJiB0aGlzLnh1KHRoaXMuRHUsIHQpICYmICh0aGlzLk51KHRoaXMuRHUpLCBlID0gITApLCBcbiAgICAgICAgZTtcbiAgICB9XG4gICAgeHUodCwgZSkge1xuICAgICAgICAvLyBBbHdheXMgcmFpc2UgdGhlIGZpcnN0IGV2ZW50IHdoZW4gd2UncmUgc3luY2VkXG4gICAgICAgIGlmICghdC5mcm9tQ2FjaGUpIHJldHVybiAhMDtcbiAgICAgICAgLy8gTk9URTogV2UgY29uc2lkZXIgT25saW5lU3RhdGUuVW5rbm93biBhcyBvbmxpbmUgKGl0IHNob3VsZCBiZWNvbWUgT2ZmbGluZVxuICAgICAgICAvLyBvciBPbmxpbmUgaWYgd2Ugd2FpdCBsb25nIGVub3VnaCkuXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8gIT09IGU7XG4gICAgICAgIC8vIERvbid0IHJhaXNlIHRoZSBldmVudCBpZiB3ZSdyZSBvbmxpbmUsIGFyZW4ndCBzeW5jZWQgeWV0IChjaGVja2VkXG4gICAgICAgIC8vIGFib3ZlKSBhbmQgYXJlIHdhaXRpbmcgZm9yIGEgc3luYy5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCF0aGlzLm9wdGlvbnMua3UgfHwgIW4pICYmICghdC5kb2NzLmlzRW1wdHkoKSB8fCB0Lmhhc0NhY2hlZFJlc3VsdHMgfHwgXCJPZmZsaW5lXCIgLyogT2ZmbGluZSAqLyA9PT0gZSk7XG4gICAgICAgIC8vIFJhaXNlIGRhdGEgZnJvbSBjYWNoZSBpZiB3ZSBoYXZlIGFueSBkb2N1bWVudHMsIGhhdmUgY2FjaGVkIHJlc3VsdHMgYmVmb3JlLFxuICAgICAgICAvLyBvciB3ZSBhcmUgb2ZmbGluZS5cbiAgICAgICAgfVxuICAgIEN1KHQpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBoYW5kbGUgaW5jbHVkZURvY3VtZW50TWV0YWRhdGFDaGFuZ2VzIGhlcmUgYmVjYXVzZVxuICAgICAgICAvLyB0aGUgTWV0YWRhdGEgb25seSBjaGFuZ2VzIGhhdmUgYWxyZWFkeSBiZWVuIHN0cmlwcGVkIG91dCBpZiBuZWVkZWQuXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIG9ubHkgY2hhbmdlcyB3ZSB3aWxsIHNlZSBhcmUgdGhlIG9uZXMgd2Ugc2hvdWxkXG4gICAgICAgIC8vIHByb3BhZ2F0ZS5cbiAgICAgICAgaWYgKHQuZG9jQ2hhbmdlcy5sZW5ndGggPiAwKSByZXR1cm4gITA7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLkR1ICYmIHRoaXMuRHUuaGFzUGVuZGluZ1dyaXRlcyAhPT0gdC5oYXNQZW5kaW5nV3JpdGVzO1xuICAgICAgICByZXR1cm4gISghdC5zeW5jU3RhdGVDaGFuZ2VkICYmICFlKSAmJiAhMCA9PT0gdGhpcy5vcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXM7XG4gICAgICAgIC8vIEdlbmVyYWxseSB3ZSBzaG91bGQgaGF2ZSBoaXQgb25lIG9mIHRoZSBjYXNlcyBhYm92ZSwgYnV0IGl0J3MgcG9zc2libGVcbiAgICAgICAgLy8gdG8gZ2V0IGhlcmUgaWYgdGhlcmUgd2VyZSBvbmx5IG1ldGFkYXRhIGRvY0NoYW5nZXMgYW5kIHRoZXkgZ290XG4gICAgICAgIC8vIHN0cmlwcGVkIG91dC5cbiAgICAgICAgfVxuICAgIE51KHQpIHtcbiAgICAgICAgdCA9IEx1LmZyb21Jbml0aWFsRG9jdW1lbnRzKHQucXVlcnksIHQuZG9jcywgdC5tdXRhdGVkS2V5cywgdC5mcm9tQ2FjaGUsIHQuaGFzQ2FjaGVkUmVzdWx0cyksIFxuICAgICAgICB0aGlzLlN1ID0gITAsIHRoaXMuVnUubmV4dCh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY29tcGxldGUgZWxlbWVudCBpbiB0aGUgYnVuZGxlIHN0cmVhbSwgdG9nZXRoZXIgd2l0aCB0aGUgYnl0ZSBsZW5ndGggaXRcbiAqIG9jY3VwaWVzIGluIHRoZSBzdHJlYW0uXG4gKi8gY2xhc3MgSHUge1xuICAgIGNvbnN0cnVjdG9yKHQsIFxuICAgIC8vIEhvdyBtYW55IGJ5dGVzIHRoaXMgZWxlbWVudCB0YWtlcyB0byBzdG9yZSBpbiB0aGUgYnVuZGxlLlxuICAgIGUpIHtcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gdCwgdGhpcy5ieXRlTGVuZ3RoID0gZTtcbiAgICB9XG4gICAgT3UoKSB7XG4gICAgICAgIHJldHVybiBcIm1ldGFkYXRhXCIgaW4gdGhpcy5wYXlsb2FkO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogSGVscGVyIHRvIGNvbnZlcnQgb2JqZWN0cyBmcm9tIGJ1bmRsZXMgdG8gbW9kZWwgb2JqZWN0cyBpbiB0aGUgU0RLLlxuICovIGNsYXNzIEp1IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuSXQgPSB0O1xuICAgIH1cbiAgICBKaSh0KSB7XG4gICAgICAgIHJldHVybiBrcyh0aGlzLkl0LCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCdW5kbGVEb2N1bWVudCB0byBhIE11dGFibGVEb2N1bWVudC5cbiAgICAgKi8gICAgWWkodCkge1xuICAgICAgICByZXR1cm4gdC5tZXRhZGF0YS5leGlzdHMgPyBMcyh0aGlzLkl0LCB0LmRvY3VtZW50LCAhMSkgOiBTZS5uZXdOb0RvY3VtZW50KHRoaXMuSmkodC5tZXRhZGF0YS5uYW1lKSwgdGhpcy5YaSh0Lm1ldGFkYXRhLnJlYWRUaW1lKSk7XG4gICAgfVxuICAgIFhpKHQpIHtcbiAgICAgICAgcmV0dXJuIERzKHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRvIHByb2Nlc3MgdGhlIGVsZW1lbnRzIGZyb20gYSBidW5kbGUsIGxvYWQgdGhlbSBpbnRvIGxvY2FsXG4gKiBzdG9yYWdlIGFuZCBwcm92aWRlIHByb2dyZXNzIHVwZGF0ZSB3aGlsZSBsb2FkaW5nLlxuICovIGNsYXNzIFl1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuTXUgPSB0LCB0aGlzLmxvY2FsU3RvcmUgPSBlLCB0aGlzLkl0ID0gbiwgXG4gICAgICAgIC8qKiBCYXRjaGVkIHF1ZXJpZXMgdG8gYmUgc2F2ZWQgaW50byBzdG9yYWdlICovXG4gICAgICAgIHRoaXMucXVlcmllcyA9IFtdLCBcbiAgICAgICAgLyoqIEJhdGNoZWQgZG9jdW1lbnRzIHRvIGJlIHNhdmVkIGludG8gc3RvcmFnZSAqL1xuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IFtdLCBcbiAgICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIGdyb3VwcyBhZmZlY3RlZCBieSB0aGlzIGJ1bmRsZS4gKi9cbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uR3JvdXBzID0gbmV3IFNldCwgdGhpcy5wcm9ncmVzcyA9IFh1KHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGVsZW1lbnQgZnJvbSB0aGUgYnVuZGxlIHRvIHRoZSBsb2FkZXIuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHByb2dyZXNzIGlmIGFkZGluZyB0aGUgZWxlbWVudCBsZWFkcyB0byBhIG5ldyBwcm9ncmVzcyxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxuICAgICAqLyAgICBGdSh0KSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MuYnl0ZXNMb2FkZWQgKz0gdC5ieXRlTGVuZ3RoO1xuICAgICAgICBsZXQgZSA9IHRoaXMucHJvZ3Jlc3MuZG9jdW1lbnRzTG9hZGVkO1xuICAgICAgICBpZiAodC5wYXlsb2FkLm5hbWVkUXVlcnkpIHRoaXMucXVlcmllcy5wdXNoKHQucGF5bG9hZC5uYW1lZFF1ZXJ5KTsgZWxzZSBpZiAodC5wYXlsb2FkLmRvY3VtZW50TWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0LnBheWxvYWQuZG9jdW1lbnRNZXRhZGF0YVxuICAgICAgICAgICAgfSksIHQucGF5bG9hZC5kb2N1bWVudE1ldGFkYXRhLmV4aXN0cyB8fCArK2U7XG4gICAgICAgICAgICBjb25zdCBuID0gcnQuZnJvbVN0cmluZyh0LnBheWxvYWQuZG9jdW1lbnRNZXRhZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbkdyb3Vwcy5hZGQobi5nZXQobi5sZW5ndGggLSAyKSk7XG4gICAgICAgIH0gZWxzZSB0LnBheWxvYWQuZG9jdW1lbnQgJiYgKHRoaXMuZG9jdW1lbnRzW3RoaXMuZG9jdW1lbnRzLmxlbmd0aCAtIDFdLmRvY3VtZW50ID0gdC5wYXlsb2FkLmRvY3VtZW50LCBcbiAgICAgICAgKytlKTtcbiAgICAgICAgcmV0dXJuIGUgIT09IHRoaXMucHJvZ3Jlc3MuZG9jdW1lbnRzTG9hZGVkID8gKHRoaXMucHJvZ3Jlc3MuZG9jdW1lbnRzTG9hZGVkID0gZSwgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvZ3Jlc3MpKSA6IG51bGw7XG4gICAgfVxuICAgICR1KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBNYXAsIG4gPSBuZXcgSnUodGhpcy5JdCk7XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiB0KSBpZiAocy5tZXRhZGF0YS5xdWVyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbi5KaShzLm1ldGFkYXRhLm5hbWUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHMubWV0YWRhdGEucXVlcmllcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSAoZS5nZXQobikgfHwgZnMoKSkuYWRkKHQpO1xuICAgICAgICAgICAgICAgIGUuc2V0KG4sIHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHByb2dyZXNzIHRvICdTdWNjZXNzJyBhbmQgcmV0dXJuIHRoZSB1cGRhdGVkIHByb2dyZXNzLlxuICAgICAqLyAgICBhc3luYyBjb21wbGV0ZSgpIHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGtvKHRoaXMubG9jYWxTdG9yZSwgbmV3IEp1KHRoaXMuSXQpLCB0aGlzLmRvY3VtZW50cywgdGhpcy5NdS5pZCksIGUgPSB0aGlzLiR1KHRoaXMuZG9jdW1lbnRzKTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMucXVlcmllcykgYXdhaXQgT28odGhpcy5sb2NhbFN0b3JlLCB0LCBlLmdldCh0Lm5hbWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3MudGFza1N0YXRlID0gXCJTdWNjZXNzXCIsIHtcbiAgICAgICAgICAgIHByb2dyZXNzOiB0aGlzLnByb2dyZXNzLFxuICAgICAgICAgICAgQnU6IHRoaXMuY29sbGVjdGlvbkdyb3VwcyxcbiAgICAgICAgICAgIEx1OiB0XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBgTG9hZEJ1bmRsZVRhc2tQcm9ncmVzc2AgcmVwcmVzZW50aW5nIHRoZSBpbml0aWFsIHByb2dyZXNzIG9mXG4gKiBsb2FkaW5nIGEgYnVuZGxlLlxuICovIGZ1bmN0aW9uIFh1KHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXNrU3RhdGU6IFwiUnVubmluZ1wiLFxuICAgICAgICBkb2N1bWVudHNMb2FkZWQ6IDAsXG4gICAgICAgIGJ5dGVzTG9hZGVkOiAwLFxuICAgICAgICB0b3RhbERvY3VtZW50czogdC50b3RhbERvY3VtZW50cyxcbiAgICAgICAgdG90YWxCeXRlczogdC50b3RhbEJ5dGVzXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3NgIHJlcHJlc2VudGluZyB0aGUgcHJvZ3Jlc3MgdGhhdCB0aGUgbG9hZGluZ1xuICogaGFzIHN1Y2NlZWRlZC5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNsYXNzIFp1IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMua2V5ID0gdDtcbiAgICB9XG59XG5cbmNsYXNzIHRjIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMua2V5ID0gdDtcbiAgICB9XG59XG5cbi8qKlxuICogVmlldyBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBmaW5hbCBtZXJnZWQgdHJ1dGggb2Ygd2hhdCBkb2NzIGFyZSBpblxuICogYSBxdWVyeS4gSXQgZ2V0cyBub3RpZmllZCBvZiBsb2NhbCBhbmQgcmVtb3RlIGNoYW5nZXMgdG8gZG9jcywgYW5kIGFwcGxpZXNcbiAqIHRoZSBxdWVyeSBmaWx0ZXJzIGFuZCBsaW1pdHMgdG8gZGV0ZXJtaW5lIHRoZSBtb3N0IGNvcnJlY3QgcG9zc2libGUgcmVzdWx0cy5cbiAqLyBjbGFzcyBlYyB7XG4gICAgY29uc3RydWN0b3IodCwgXG4gICAgLyoqIERvY3VtZW50cyBpbmNsdWRlZCBpbiB0aGUgcmVtb3RlIHRhcmdldCAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHQsIHRoaXMuVXUgPSBlLCB0aGlzLnF1ID0gbnVsbCwgdGhpcy5oYXNDYWNoZWRSZXN1bHRzID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIHdoZXRoZXIgdGhlIHZpZXcgaXMgY3VycmVudCB3aXRoIHRoZSBiYWNrZW5kLiBBIHZpZXcgaXMgY29uc2lkZXJlZFxuICAgICAgICAgKiBjdXJyZW50IGFmdGVyIGl0IGhhcyBzZWVuIHRoZSBjdXJyZW50IGZsYWcgZnJvbSB0aGUgYmFja2VuZCBhbmQgZGlkIG5vdFxuICAgICAgICAgKiBsb3NlIGNvbnNpc3RlbmN5IHdpdGhpbiB0aGUgd2F0Y2ggc3RyZWFtIChlLmcuIGJlY2F1c2Ugb2YgYW4gZXhpc3RlbmNlXG4gICAgICAgICAqIGZpbHRlciBtaXNtYXRjaCkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSAhMSwgXG4gICAgICAgIC8qKiBEb2N1bWVudHMgaW4gdGhlIHZpZXcgYnV0IG5vdCBpbiB0aGUgcmVtb3RlIHRhcmdldCAqL1xuICAgICAgICB0aGlzLkt1ID0gZnMoKSwgXG4gICAgICAgIC8qKiBEb2N1bWVudCBLZXlzIHRoYXQgaGF2ZSBsb2NhbCBjaGFuZ2VzICovXG4gICAgICAgIHRoaXMubXV0YXRlZEtleXMgPSBmcygpLCB0aGlzLkd1ID0gd24odCksIHRoaXMuUXUgPSBuZXcgJHUodGhpcy5HdSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgcmVtb3RlIGRvY3VtZW50cyB0aGF0IHRoZSBzZXJ2ZXIgaGFzIHRvbGQgdXMgYmVsb25ncyB0byB0aGUgdGFyZ2V0IGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIHRoaXMgdmlldy5cbiAgICAgKi8gICAgZ2V0IGp1KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5VdTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhIHNldCBvZiBkb2MgY2hhbmdlcywgYXBwbGllcyB0aGUgcXVlcnkgbGltaXQsIGFuZCBjb21wdXRlc1xuICAgICAqIHdoYXQgdGhlIG5ldyByZXN1bHRzIHNob3VsZCBiZSwgd2hhdCB0aGUgY2hhbmdlcyB3ZXJlLCBhbmQgd2hldGhlciB3ZSBtYXlcbiAgICAgKiBuZWVkIHRvIGdvIGJhY2sgdG8gdGhlIGxvY2FsIGNhY2hlIGZvciBtb3JlIHJlc3VsdHMuIERvZXMgbm90IG1ha2UgYW55XG4gICAgICogY2hhbmdlcyB0byB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyAtIFRoZSBkb2MgY2hhbmdlcyB0byBhcHBseSB0byB0aGlzIHZpZXcuXG4gICAgICogQHBhcmFtIHByZXZpb3VzQ2hhbmdlcyAtIElmIHRoaXMgaXMgYmVpbmcgY2FsbGVkIHdpdGggYSByZWZpbGwsIHRoZW4gc3RhcnRcbiAgICAgKiAgICAgICAgd2l0aCB0aGlzIHNldCBvZiBkb2NzIGFuZCBjaGFuZ2VzIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgdmlldy5cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBzZXQgb2YgZG9jcywgY2hhbmdlcywgYW5kIHJlZmlsbCBmbGFnLlxuICAgICAqLyAgICBXdSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlID8gZS56dSA6IG5ldyBCdSwgcyA9IGUgPyBlLlF1IDogdGhpcy5RdTtcbiAgICAgICAgbGV0IGkgPSBlID8gZS5tdXRhdGVkS2V5cyA6IHRoaXMubXV0YXRlZEtleXMsIHIgPSBzLCBvID0gITE7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBsYXN0IGRvYyBpbiBhIChmdWxsKSBsaW1pdC4gVGhpcyBpcyBuZWNlc3NhcnksIGJlY2F1c2Ugc29tZVxuICAgICAgICAvLyB1cGRhdGUgKGEgZGVsZXRlLCBvciBhbiB1cGRhdGUgbW92aW5nIGEgZG9jIHBhc3QgdGhlIG9sZCBsaW1pdCkgbWlnaHRcbiAgICAgICAgLy8gbWVhbiB0aGVyZSBpcyBzb21lIG90aGVyIGRvY3VtZW50IGluIHRoZSBsb2NhbCBjYWNoZSB0aGF0IGVpdGhlciBzaG91bGRcbiAgICAgICAgLy8gY29tZSAoMSkgYmV0d2VlbiB0aGUgb2xkIGxhc3QgbGltaXQgZG9jIGFuZCB0aGUgbmV3IGxhc3QgZG9jdW1lbnQsIGluIHRoZVxuICAgICAgICAvLyBjYXNlIG9mIHVwZGF0ZXMsIG9yICgyKSBhZnRlciB0aGUgbmV3IGxhc3QgZG9jdW1lbnQsIGluIHRoZSBjYXNlIG9mXG4gICAgICAgIC8vIGRlbGV0ZXMuIFNvIHdlIGtlZXAgdGhpcyBkb2MgYXQgdGhlIG9sZCBsaW1pdCB0byBjb21wYXJlIHRoZSB1cGRhdGVzIHRvLlxuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBzaG91bGQgbmV2ZXIgZ2V0IHVzZWQgaW4gYSByZWZpbGwgKHdoZW4gcHJldmlvdXNDaGFuZ2VzIGlzXG4gICAgICAgIC8vIHNldCksIGJlY2F1c2UgdGhlcmUgd2lsbCBvbmx5IGJlIGFkZHMgLS0gbm8gZGVsZXRlcyBvciB1cGRhdGVzLlxuICAgICAgICBjb25zdCB1ID0gXCJGXCIgLyogRmlyc3QgKi8gPT09IHRoaXMucXVlcnkubGltaXRUeXBlICYmIHMuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IHMubGFzdCgpIDogbnVsbCwgYyA9IFwiTFwiIC8qIExhc3QgKi8gPT09IHRoaXMucXVlcnkubGltaXRUeXBlICYmIHMuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IHMuZmlyc3QoKSA6IG51bGw7XG4gICAgICAgIC8vIERyb3AgZG9jdW1lbnRzIG91dCB0byBtZWV0IGxpbWl0L2xpbWl0VG9MYXN0IHJlcXVpcmVtZW50LlxuICAgICAgICBpZiAodC5pbm9yZGVyVHJhdmVyc2FsKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IHMuZ2V0KHQpLCBoID0gZG4odGhpcy5xdWVyeSwgZSkgPyBlIDogbnVsbCwgbCA9ICEhYSAmJiB0aGlzLm11dGF0ZWRLZXlzLmhhcyhhLmtleSksIGYgPSAhIWggJiYgKGguaGFzTG9jYWxNdXRhdGlvbnMgfHwgXG4gICAgICAgICAgICAvLyBXZSBvbmx5IGNvbnNpZGVyIGNvbW1pdHRlZCBtdXRhdGlvbnMgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmVcbiAgICAgICAgICAgIC8vIG11dGF0ZWQgZHVyaW5nIHRoZSBsaWZldGltZSBvZiB0aGUgdmlldy5cbiAgICAgICAgICAgIHRoaXMubXV0YXRlZEtleXMuaGFzKGgua2V5KSAmJiBoLmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XG4gICAgICAgICAgICBsZXQgZCA9ICExO1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgJiYgaCkge1xuICAgICAgICAgICAgICAgIGEuZGF0YS5pc0VxdWFsKGguZGF0YSkgPyBsICE9PSBmICYmIChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMyAvKiBNZXRhZGF0YSAqLyAsXG4gICAgICAgICAgICAgICAgICAgIGRvYzogaFxuICAgICAgICAgICAgICAgIH0pLCBkID0gITApIDogdGhpcy5IdShhLCBoKSB8fCAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDIgLyogTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgICAgICAgICBkb2M6IGhcbiAgICAgICAgICAgICAgICB9KSwgZCA9ICEwLCAodSAmJiB0aGlzLkd1KGgsIHUpID4gMCB8fCBjICYmIHRoaXMuR3UoaCwgYykgPCAwKSAmJiAoXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBkb2MgbW92ZWQgZnJvbSBpbnNpZGUgdGhlIGxpbWl0IHRvIG91dHNpZGUgdGhlIGxpbWl0LlxuICAgICAgICAgICAgICAgIC8vIFRoYXQgbWVhbnMgdGhlcmUgbWF5IGJlIHNvbWUgb3RoZXIgZG9jIGluIHRoZSBsb2NhbCBjYWNoZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgbyA9ICEwKSk7XG4gICAgICAgICAgICB9IGVsc2UgIWEgJiYgaCA/IChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIEFkZGVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGhcbiAgICAgICAgICAgIH0pLCBkID0gITApIDogYSAmJiAhaCAmJiAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBSZW1vdmVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGFcbiAgICAgICAgICAgIH0pLCBkID0gITAsICh1IHx8IGMpICYmIChcbiAgICAgICAgICAgIC8vIEEgZG9jIHdhcyByZW1vdmVkIGZyb20gYSBmdWxsIGxpbWl0IHF1ZXJ5LiBXZSdsbCBuZWVkIHRvXG4gICAgICAgICAgICAvLyByZXF1ZXJ5IGZyb20gdGhlIGxvY2FsIGNhY2hlIHRvIHNlZSBpZiB3ZSBrbm93IGFib3V0IHNvbWUgb3RoZXJcbiAgICAgICAgICAgIC8vIGRvYyB0aGF0IHNob3VsZCBiZSBpbiB0aGUgcmVzdWx0cy5cbiAgICAgICAgICAgIG8gPSAhMCkpO1xuICAgICAgICAgICAgZCAmJiAoaCA/IChyID0gci5hZGQoaCksIGkgPSBmID8gaS5hZGQodCkgOiBpLmRlbGV0ZSh0KSkgOiAociA9IHIuZGVsZXRlKHQpLCBpID0gaS5kZWxldGUodCkpKTtcbiAgICAgICAgfSkpLCBudWxsICE9PSB0aGlzLnF1ZXJ5LmxpbWl0KSBmb3IgKDtyLnNpemUgPiB0aGlzLnF1ZXJ5LmxpbWl0OyApIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBcIkZcIiAvKiBGaXJzdCAqLyA9PT0gdGhpcy5xdWVyeS5saW1pdFR5cGUgPyByLmxhc3QoKSA6IHIuZmlyc3QoKTtcbiAgICAgICAgICAgIHIgPSByLmRlbGV0ZSh0LmtleSksIGkgPSBpLmRlbGV0ZSh0LmtleSksIG4udHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogUmVtb3ZlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiB0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUXU6IHIsXG4gICAgICAgICAgICB6dTogbixcbiAgICAgICAgICAgICRpOiBvLFxuICAgICAgICAgICAgbXV0YXRlZEtleXM6IGlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgSHUodCwgZSkge1xuICAgICAgICAvLyBXZSBzdXBwcmVzcyB0aGUgaW5pdGlhbCBjaGFuZ2UgZXZlbnQgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmUgbW9kaWZpZWQgYXNcbiAgICAgICAgLy8gcGFydCBvZiBhIHdyaXRlIGFja25vd2xlZGdtZW50IChlLmcuIHdoZW4gdGhlIHZhbHVlIG9mIGEgc2VydmVyIHRyYW5zZm9ybVxuICAgICAgICAvLyBpcyBhcHBsaWVkKSBhcyBXYXRjaCB3aWxsIHNlbmQgdXMgdGhlIHNhbWUgZG9jdW1lbnQgYWdhaW4uXG4gICAgICAgIC8vIEJ5IHN1cHByZXNzaW5nIHRoZSBldmVudCwgd2Ugb25seSByYWlzZSB0d28gdXNlciB2aXNpYmxlIGV2ZW50cyAob25lIHdpdGhcbiAgICAgICAgLy8gYGhhc1BlbmRpbmdXcml0ZXNgIGFuZCB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIGRvY3VtZW50KSBpbnN0ZWFkIG9mIHRocmVlXG4gICAgICAgIC8vIChvbmUgd2l0aCBgaGFzUGVuZGluZ1dyaXRlc2AsIHRoZSBtb2RpZmllZCBkb2N1bWVudCB3aXRoXG4gICAgICAgIC8vIGBoYXNQZW5kaW5nV3JpdGVzYCBhbmQgdGhlIGZpbmFsIHN0YXRlIG9mIHRoZSBkb2N1bWVudCkuXG4gICAgICAgIHJldHVybiB0Lmhhc0xvY2FsTXV0YXRpb25zICYmIGUuaGFzQ29tbWl0dGVkTXV0YXRpb25zICYmICFlLmhhc0xvY2FsTXV0YXRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB2aWV3IHdpdGggdGhlIGdpdmVuIFZpZXdEb2N1bWVudENoYW5nZXMgYW5kIG9wdGlvbmFsbHkgdXBkYXRlc1xuICAgICAqIGxpbWJvIGRvY3MgYW5kIHN5bmMgc3RhdGUgZnJvbSB0aGUgcHJvdmlkZWQgdGFyZ2V0IGNoYW5nZS5cbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyAtIFRoZSBzZXQgb2YgY2hhbmdlcyB0byBtYWtlIHRvIHRoZSB2aWV3J3MgZG9jcy5cbiAgICAgKiBAcGFyYW0gdXBkYXRlTGltYm9Eb2N1bWVudHMgLSBXaGV0aGVyIHRvIHVwZGF0ZSBsaW1ibyBkb2N1bWVudHMgYmFzZWQgb25cbiAgICAgKiAgICAgICAgdGhpcyBjaGFuZ2UuXG4gICAgICogQHBhcmFtIHRhcmdldENoYW5nZSAtIEEgdGFyZ2V0IGNoYW5nZSB0byBhcHBseSBmb3IgY29tcHV0aW5nIGxpbWJvIGRvY3MgYW5kXG4gICAgICogICAgICAgIHN5bmMgc3RhdGUuXG4gICAgICogQHJldHVybnMgQSBuZXcgVmlld0NoYW5nZSB3aXRoIHRoZSBnaXZlbiBkb2NzLCBjaGFuZ2VzLCBhbmQgc3luYyBzdGF0ZS5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IFRoZSBpT1MvQW5kcm9pZCBjbGllbnRzIGFsd2F5cyBjb21wdXRlIGxpbWJvIGRvY3VtZW50IGNoYW5nZXMuXG4gICAgYXBwbHlDaGFuZ2VzKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuUXU7XG4gICAgICAgIHRoaXMuUXUgPSB0LlF1LCB0aGlzLm11dGF0ZWRLZXlzID0gdC5tdXRhdGVkS2V5cztcbiAgICAgICAgLy8gU29ydCBjaGFuZ2VzIGJhc2VkIG9uIHR5cGUgYW5kIHF1ZXJ5IGNvbXBhcmF0b3JcbiAgICAgICAgY29uc3QgaSA9IHQuenUuQXUoKTtcbiAgICAgICAgaS5zb3J0KCgodCwgZSkgPT4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwIC8qIEFkZGVkICovIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBNb2RpZmllZCAqLyA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMgLyogTWV0YWRhdGEgKi8gOlxuICAgICAgICAgICAgICAgICAgICAvLyBBIG1ldGFkYXRhIGNoYW5nZSBpcyBjb252ZXJ0ZWQgdG8gYSBtb2RpZmllZCBjaGFuZ2UgYXQgdGhlIHB1YmxpY1xuICAgICAgICAgICAgICAgICAgICAvLyBhcGkgbGF5ZXIuICBTaW5jZSB3ZSBzb3J0IGJ5IGRvY3VtZW50IGtleSBhbmQgdGhlbiBjaGFuZ2UgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbWV0YWRhdGEgYW5kIG1vZGlmaWVkIGNoYW5nZXMgbXVzdCBiZSBzb3J0ZWQgZXF1aXZhbGVudGx5LlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE8oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG4odCkgLSBuKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovICh0LnR5cGUsIGUudHlwZSkgfHwgdGhpcy5HdSh0LmRvYywgZS5kb2MpKSksIHRoaXMuSnUobik7XG4gICAgICAgIGNvbnN0IHIgPSBlID8gdGhpcy5ZdSgpIDogW10sIG8gPSAwID09PSB0aGlzLkt1LnNpemUgJiYgdGhpcy5jdXJyZW50ID8gMSAvKiBTeW5jZWQgKi8gOiAwIC8qIExvY2FsICovICwgdSA9IG8gIT09IHRoaXMucXU7XG4gICAgICAgIGlmICh0aGlzLnF1ID0gbywgMCAhPT0gaS5sZW5ndGggfHwgdSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzbmFwc2hvdDogbmV3IEx1KHRoaXMucXVlcnksIHQuUXUsIHMsIGksIHQubXV0YXRlZEtleXMsIDAgLyogTG9jYWwgKi8gPT09IG8sIHUsIFxuICAgICAgICAgICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMSwgISFuICYmIG4ucmVzdW1lVG9rZW4uYXBwcm94aW1hdGVCeXRlU2l6ZSgpID4gMCksXG4gICAgICAgICAgICAgICAgWHU6IHJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gY2hhbmdlc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgWHU6IHJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhbiBPbmxpbmVTdGF0ZSBjaGFuZ2UgdG8gdGhlIHZpZXcsIHBvdGVudGlhbGx5IGdlbmVyYXRpbmcgYVxuICAgICAqIFZpZXdDaGFuZ2UgaWYgdGhlIHZpZXcncyBzeW5jU3RhdGUgY2hhbmdlcyBhcyBhIHJlc3VsdC5cbiAgICAgKi8gICAgUHUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ICYmIFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8gPT09IHQgPyAoXG4gICAgICAgIC8vIElmIHdlJ3JlIG9mZmxpbmUsIHNldCBgY3VycmVudGAgdG8gZmFsc2UgYW5kIHRoZW4gY2FsbCBhcHBseUNoYW5nZXMoKVxuICAgICAgICAvLyB0byByZWZyZXNoIG91ciBzeW5jU3RhdGUgYW5kIGdlbmVyYXRlIGEgVmlld0NoYW5nZSBhcyBhcHByb3ByaWF0ZS4gV2VcbiAgICAgICAgLy8gYXJlIGd1YXJhbnRlZWQgdG8gZ2V0IGEgbmV3IFRhcmdldENoYW5nZSB0aGF0IHNldHMgYGN1cnJlbnRgIGJhY2sgdG9cbiAgICAgICAgLy8gdHJ1ZSBvbmNlIHRoZSBjbGllbnQgaXMgYmFjayBvbmxpbmUuXG4gICAgICAgIHRoaXMuY3VycmVudCA9ICExLCB0aGlzLmFwcGx5Q2hhbmdlcyh7XG4gICAgICAgICAgICBRdTogdGhpcy5RdSxcbiAgICAgICAgICAgIHp1OiBuZXcgQnUsXG4gICAgICAgICAgICBtdXRhdGVkS2V5czogdGhpcy5tdXRhdGVkS2V5cyxcbiAgICAgICAgICAgICRpOiAhMVxuICAgICAgICB9LCBcbiAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovICExKSkgOiB7XG4gICAgICAgICAgICBYdTogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBkb2MgZm9yIHRoZSBnaXZlbiBrZXkgc2hvdWxkIGJlIGluIGxpbWJvLlxuICAgICAqLyAgICBadSh0KSB7XG4gICAgICAgIC8vIElmIHRoZSByZW1vdGUgZW5kIHNheXMgaXQncyBwYXJ0IG9mIHRoaXMgcXVlcnksIGl0J3Mgbm90IGluIGxpbWJvLlxuICAgICAgICByZXR1cm4gIXRoaXMuVXUuaGFzKHQpICYmIChcbiAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIGRvZXNuJ3QgdGhpbmsgaXQncyBhIHJlc3VsdCwgc28gaXQgc2hvdWxkbid0IGJlIGluIGxpbWJvLlxuICAgICAgICAhIXRoaXMuUXUuaGFzKHQpICYmICF0aGlzLlF1LmdldCh0KS5oYXNMb2NhbE11dGF0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgc3luY2VkRG9jdW1lbnRzLCBjdXJyZW50LCBhbmQgbGltYm8gZG9jcyBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2hhbmdlLlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgY2hhbmdlcyB0byB3aGljaCBkb2NzIGFyZSBpbiBsaW1iby5cbiAgICAgKi8gICAgSnUodCkge1xuICAgICAgICB0ICYmICh0LmFkZGVkRG9jdW1lbnRzLmZvckVhY2goKHQgPT4gdGhpcy5VdSA9IHRoaXMuVXUuYWRkKHQpKSksIHQubW9kaWZpZWREb2N1bWVudHMuZm9yRWFjaCgodCA9PiB7fSkpLCBcbiAgICAgICAgdC5yZW1vdmVkRG9jdW1lbnRzLmZvckVhY2goKHQgPT4gdGhpcy5VdSA9IHRoaXMuVXUuZGVsZXRlKHQpKSksIHRoaXMuY3VycmVudCA9IHQuY3VycmVudCk7XG4gICAgfVxuICAgIFl1KCkge1xuICAgICAgICAvLyBXZSBjYW4gb25seSBkZXRlcm1pbmUgbGltYm8gZG9jdW1lbnRzIHdoZW4gd2UncmUgaW4tc3luYyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50KSByZXR1cm4gW107XG4gICAgICAgIC8vIFRPRE8oa2xpbXQpOiBEbyB0aGlzIGluY3JlbWVudGFsbHkgc28gdGhhdCBpdCdzIG5vdCBxdWFkcmF0aWMgd2hlblxuICAgICAgICAvLyB1cGRhdGluZyBtYW55IGRvY3VtZW50cy5cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5LdTtcbiAgICAgICAgdGhpcy5LdSA9IGZzKCksIHRoaXMuUXUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLlp1KHQua2V5KSAmJiAodGhpcy5LdSA9IHRoaXMuS3UuYWRkKHQua2V5KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gRGlmZiB0aGUgbmV3IGxpbWJvIGRvY3Mgd2l0aCB0aGUgb2xkIGxpbWJvIGRvY3MuXG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLkt1Lmhhcyh0KSB8fCBlLnB1c2gobmV3IHRjKHQpKTtcbiAgICAgICAgfSkpLCB0aGlzLkt1LmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgdC5oYXMobikgfHwgZS5wdXNoKG5ldyBadShuKSk7XG4gICAgICAgIH0pKSwgZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBpbi1tZW1vcnkgc3RhdGUgb2YgdGhlIGN1cnJlbnQgdmlldyB3aXRoIHRoZSBzdGF0ZSByZWFkIGZyb21cbiAgICAgKiBwZXJzaXN0ZW5jZS5cbiAgICAgKlxuICAgICAqIFdlIHVwZGF0ZSB0aGUgcXVlcnkgdmlldyB3aGVuZXZlciBhIGNsaWVudCdzIHByaW1hcnkgc3RhdHVzIGNoYW5nZXM6XG4gICAgICogLSBXaGVuIGEgY2xpZW50IHRyYW5zaXRpb25zIGZyb20gcHJpbWFyeSB0byBzZWNvbmRhcnksIGl0IGNhbiBtaXNzXG4gICAgICogICBMb2NhbFN0b3JhZ2UgdXBkYXRlcyBhbmQgaXRzIHF1ZXJ5IHZpZXdzIG1heSB0ZW1wb3JhcmlseSBub3QgYmVcbiAgICAgKiAgIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzdGF0ZSBvbiBkaXNrLlxuICAgICAqIC0gRm9yIHNlY29uZGFyeSB0byBwcmltYXJ5IHRyYW5zaXRpb25zLCB0aGUgY2xpZW50IG5lZWRzIHRvIHVwZGF0ZSB0aGUgbGlzdFxuICAgICAqICAgb2YgYHN5bmNlZERvY3VtZW50c2Agc2luY2Ugc2Vjb25kYXJ5IGNsaWVudHMgdXBkYXRlIHRoZWlyIHF1ZXJ5IHZpZXdzXG4gICAgICogICBiYXNlZCBwdXJlbHkgb24gc3ludGhlc2l6ZWQgUmVtb3RlRXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LmRvY3VtZW50cyAtIFRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIExvY2FsU3RvcmUuXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LnJlbW90ZUtleXMgLSBUaGUga2V5cyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhlXG4gICAgICogcXVlcnkgYWNjb3JkaW5nIHRvIHRoZSBiYWNrZW5kLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFZpZXdDaGFuZ2UgdGhhdCByZXN1bHRlZCBmcm9tIHRoaXMgc3luY2hyb25pemF0aW9uLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgdGModCkge1xuICAgICAgICB0aGlzLlV1ID0gdC5IaSwgdGhpcy5LdSA9IGZzKCk7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLld1KHQuZG9jdW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlDaGFuZ2VzKGUsIC8qdXBkYXRlTGltYm9Eb2N1bWVudHM9Ki8gITApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdmlldyBzbmFwc2hvdCBhcyBpZiB0aGlzIHF1ZXJ5IHdhcyBqdXN0IGxpc3RlbmVkIHRvLiBDb250YWluc1xuICAgICAqIGEgZG9jdW1lbnQgYWRkIGZvciBldmVyeSBleGlzdGluZyBkb2N1bWVudCBhbmQgdGhlIGBmcm9tQ2FjaGVgIGFuZFxuICAgICAqIGBoYXNQZW5kaW5nV3JpdGVzYCBzdGF0dXMgb2YgdGhlIGFscmVhZHkgZXN0YWJsaXNoZWQgdmlldy5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgIGVjKCkge1xuICAgICAgICByZXR1cm4gTHUuZnJvbUluaXRpYWxEb2N1bWVudHModGhpcy5xdWVyeSwgdGhpcy5RdSwgdGhpcy5tdXRhdGVkS2V5cywgMCAvKiBMb2NhbCAqLyA9PT0gdGhpcy5xdSwgdGhpcy5oYXNDYWNoZWRSZXN1bHRzKTtcbiAgICB9XG59XG5cbi8qKlxuICogUXVlcnlWaWV3IGNvbnRhaW5zIGFsbCBvZiB0aGUgZGF0YSB0aGF0IFN5bmNFbmdpbmUgbmVlZHMgdG8ga2VlcCB0cmFjayBvZiBmb3JcbiAqIGEgcGFydGljdWxhciBxdWVyeS5cbiAqL1xuY2xhc3MgbmMge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSBpdHNlbGYuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBudW1iZXIgY3JlYXRlZCBieSB0aGUgY2xpZW50IHRoYXQgaXMgdXNlZCBpbiB0aGUgd2F0Y2hcbiAgICAgKiBzdHJlYW0gdG8gaWRlbnRpZnkgdGhpcyBxdWVyeS5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgdmlldyBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBmaW5hbCBtZXJnZWQgdHJ1dGggb2Ygd2hhdFxuICAgICAqIGRvY3MgYXJlIGluIHRoZSBxdWVyeS4gSXQgZ2V0cyBub3RpZmllZCBvZiBsb2NhbCBhbmQgcmVtb3RlIGNoYW5nZXMsXG4gICAgICogYW5kIGFwcGxpZXMgdGhlIHF1ZXJ5IGZpbHRlcnMgYW5kIGxpbWl0cyB0byBkZXRlcm1pbmUgdGhlIG1vc3QgY29ycmVjdFxuICAgICAqIHBvc3NpYmxlIHJlc3VsdHMuXG4gICAgICovXG4gICAgbikge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdCwgdGhpcy50YXJnZXRJZCA9IGUsIHRoaXMudmlldyA9IG47XG4gICAgfVxufVxuXG4vKiogVHJhY2tzIGEgbGltYm8gcmVzb2x1dGlvbi4gKi8gY2xhc3Mgc2Mge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5rZXkgPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0byB0cnVlIG9uY2Ugd2UndmUgcmVjZWl2ZWQgYSBkb2N1bWVudC4gVGhpcyBpcyB1c2VkIGluXG4gICAgICAgICAqIGdldFJlbW90ZUtleXNGb3JUYXJnZXQoKSBhbmQgdWx0aW1hdGVseSB1c2VkIGJ5IFdhdGNoQ2hhbmdlQWdncmVnYXRvciB0b1xuICAgICAgICAgKiBkZWNpZGUgd2hldGhlciBpdCBuZWVkcyB0byBtYW51ZmFjdHVyZSBhIGRlbGV0ZSBldmVudCBmb3IgdGhlIHRhcmdldCBvbmNlXG4gICAgICAgICAqIHRoZSB0YXJnZXQgaXMgQ1VSUkVOVC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmMgPSAhMTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgYFN5bmNFbmdpbmVgIGNvb3JkaW5hdGluZyB3aXRoIG90aGVyIHBhcnRzIG9mIFNESy5cbiAqXG4gKiBUaGUgcGFydHMgb2YgU3luY0VuZ2luZSB0aGF0IGFjdCBhcyBhIGNhbGxiYWNrIHRvIFJlbW90ZVN0b3JlIG5lZWQgdG8gYmVcbiAqIHJlZ2lzdGVyZWQgaW5kaXZpZHVhbGx5LiBUaGlzIGlzIGRvbmUgaW4gYHN5bmNFbmdpbmVXcml0ZSgpYCBhbmRcbiAqIGBzeW5jRW5naW5lTGlzdGVuKClgIChhcyB3ZWxsIGFzIGBhcHBseVByaW1hcnlTdGF0ZSgpYCkgYXMgdGhlc2UgbWV0aG9kc1xuICogc2VydmUgYXMgZW50cnkgcG9pbnRzIHRvIFJlbW90ZVN0b3JlJ3MgZnVuY3Rpb25hbGl0eS5cbiAqXG4gKiBOb3RlOiBzb21lIGZpZWxkIGRlZmluZWQgaW4gdGhpcyBjbGFzcyBtaWdodCBoYXZlIHB1YmxpYyBhY2Nlc3MgbGV2ZWwsIGJ1dFxuICogdGhlIGNsYXNzIGlzIG5vdCBleHBvcnRlZCBzbyB0aGV5IGFyZSBvbmx5IGFjY2Vzc2libGUgZnJvbSB0aGlzIG1vZHVsZS5cbiAqIFRoaXMgaXMgdXNlZnVsIHRvIGltcGxlbWVudCBvcHRpb25hbCBmZWF0dXJlcyAobGlrZSBidW5kbGVzKSBpbiBmcmVlXG4gKiBmdW5jdGlvbnMsIHN1Y2ggdGhhdCB0aGV5IGFyZSB0cmVlLXNoYWtlYWJsZS5cbiAqLyBjbGFzcyBpYyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgXG4gICAgLy8gUE9SVElORyBOT1RFOiBNYW5hZ2VzIHN0YXRlIHN5bmNocm9uaXphdGlvbiBpbiBtdWx0aS10YWIgZW52aXJvbm1lbnRzLlxuICAgIHMsIGksIHIpIHtcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlID0gdCwgdGhpcy5yZW1vdGVTdG9yZSA9IGUsIHRoaXMuZXZlbnRNYW5hZ2VyID0gbiwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSA9IHMsIFxuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gaSwgdGhpcy5tYXhDb25jdXJyZW50TGltYm9SZXNvbHV0aW9ucyA9IHIsIHRoaXMuc2MgPSB7fSwgdGhpcy5pYyA9IG5ldyBlcygodCA9PiBsbih0KSksIGhuKSwgXG4gICAgICAgIHRoaXMucmMgPSBuZXcgTWFwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBrZXlzIG9mIGRvY3VtZW50cyB0aGF0IGFyZSBpbiBsaW1ibyBmb3Igd2hpY2ggd2UgaGF2ZW4ndCB5ZXQgc3RhcnRlZCBhXG4gICAgICAgICAqIGxpbWJvIHJlc29sdXRpb24gcXVlcnkuIFRoZSBzdHJpbmdzIGluIHRoaXMgc2V0IGFyZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmdcbiAgICAgICAgICogYGtleS5wYXRoLmNhbm9uaWNhbFN0cmluZygpYCB3aGVyZSBga2V5YCBpcyBhIGBEb2N1bWVudEtleWAgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgYFNldGAgdHlwZSB3YXMgY2hvc2VuIGJlY2F1c2UgaXQgcHJvdmlkZXMgZWZmaWNpZW50IGxvb2t1cCBhbmQgcmVtb3ZhbFxuICAgICAgICAgKiBvZiBhcmJpdHJhcnkgZWxlbWVudHMgYW5kIGl0IGFsc28gbWFpbnRhaW5zIGluc2VydGlvbiBvcmRlciwgcHJvdmlkaW5nIHRoZVxuICAgICAgICAgKiBkZXNpcmVkIHF1ZXVlLWxpa2UgRklGTyBzZW1hbnRpY3MuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9jID0gbmV3IFNldCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgdGFyZ2V0IElEIGZvciBlYWNoIGRvY3VtZW50IHRoYXQgaXMgaW4gbGltYm8gd2l0aCBhblxuICAgICAgICAgKiBhY3RpdmUgdGFyZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51YyA9IG5ldyBCdChjdC5jb21wYXJhdG9yKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYW4gYWN0aXZlIGxpbWJvIHJlc29sdXRpb24gZm9yIGVhY2hcbiAgICAgICAgICogYWN0aXZlIHRhcmdldCBJRCB0aGF0IHdhcyBzdGFydGVkIGZvciB0aGUgcHVycG9zZSBvZiBsaW1ibyByZXNvbHV0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYyA9IG5ldyBNYXAsIHRoaXMuYWMgPSBuZXcgZW8sIFxuICAgICAgICAvKiogU3RvcmVzIHVzZXIgY29tcGxldGlvbiBoYW5kbGVycywgaW5kZXhlZCBieSBVc2VyIGFuZCBCYXRjaElkLiAqL1xuICAgICAgICB0aGlzLmhjID0ge30sIFxuICAgICAgICAvKiogU3RvcmVzIHVzZXIgY2FsbGJhY2tzIHdhaXRpbmcgZm9yIGFsbCBwZW5kaW5nIHdyaXRlcyB0byBiZSBhY2tub3dsZWRnZWQuICovXG4gICAgICAgIHRoaXMubGMgPSBuZXcgTWFwLCB0aGlzLmZjID0gQ3Iudm4oKSwgdGhpcy5vbmxpbmVTdGF0ZSA9IFwiVW5rbm93blwiIC8qIFVua25vd24gKi8gLCBcbiAgICAgICAgLy8gVGhlIHByaW1hcnkgc3RhdGUgaXMgc2V0IHRvIGB0cnVlYCBvciBgZmFsc2VgIGltbWVkaWF0ZWx5IGFmdGVyIEZpcmVzdG9yZVxuICAgICAgICAvLyBzdGFydHVwLiBJbiB0aGUgaW50ZXJpbSwgYSBjbGllbnQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBwcmltYXJ5IGlmXG4gICAgICAgIC8vIGBpc1ByaW1hcnlgIGlzIHRydWUuXG4gICAgICAgIHRoaXMuZGMgPSB2b2lkIDA7XG4gICAgfVxuICAgIGdldCBpc1ByaW1hcnlDbGllbnQoKSB7XG4gICAgICAgIHJldHVybiAhMCA9PT0gdGhpcy5kYztcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhdGVzIHRoZSBuZXcgbGlzdGVuLCByZXNvbHZlcyBwcm9taXNlIHdoZW4gbGlzdGVuIGVucXVldWVkIHRvIHRoZVxuICogc2VydmVyLiBBbGwgdGhlIHN1YnNlcXVlbnQgdmlldyBzbmFwc2hvdHMgb3IgZXJyb3JzIGFyZSBzZW50IHRvIHRoZVxuICogc3Vic2NyaWJlZCBoYW5kbGVycy4gUmV0dXJucyB0aGUgaW5pdGlhbCBzbmFwc2hvdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmModCwgZSkge1xuICAgIGNvbnN0IG4gPSBrYyh0KTtcbiAgICBsZXQgcywgaTtcbiAgICBjb25zdCByID0gbi5pYy5nZXQoZSk7XG4gICAgaWYgKHIpIFxuICAgIC8vIFBPUlRJTkcgTk9URTogV2l0aCBNdWx0aS1UYWIgV2ViLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGEgcXVlcnkgdmlld1xuICAgIC8vIGFscmVhZHkgZXhpc3RzIHdoZW4gRXZlbnRNYW5hZ2VyIGNhbGxzIHVzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpc1xuICAgIC8vIGhhcHBlbnMgd2hlbiB0aGUgcHJpbWFyeSB0YWIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gdGhpcyBxdWVyeSBvblxuICAgIC8vIGJlaGFsZiBvZiBhbm90aGVyIHRhYiBhbmQgdGhlIHVzZXIgb2YgdGhlIHByaW1hcnkgYWxzbyBzdGFydHMgbGlzdGVuaW5nXG4gICAgLy8gdG8gdGhlIHF1ZXJ5LiBFdmVudE1hbmFnZXIgd2lsbCBub3QgaGF2ZSBhbiBhc3NpZ25lZCB0YXJnZXQgSUQgaW4gdGhpc1xuICAgIC8vIGNhc2UgYW5kIGNhbGxzIGBsaXN0ZW5gIHRvIG9idGFpbiB0aGlzIElELlxuICAgIHMgPSByLnRhcmdldElkLCBuLnNoYXJlZENsaWVudFN0YXRlLmFkZExvY2FsUXVlcnlUYXJnZXQocyksIGkgPSByLnZpZXcuZWMoKTsgZWxzZSB7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCBWbyhuLmxvY2FsU3RvcmUsIGNuKGUpKTtcbiAgICAgICAgbi5pc1ByaW1hcnlDbGllbnQgJiYgaHUobi5yZW1vdGVTdG9yZSwgdCk7XG4gICAgICAgIGNvbnN0IHIgPSBuLnNoYXJlZENsaWVudFN0YXRlLmFkZExvY2FsUXVlcnlUYXJnZXQodC50YXJnZXRJZCk7XG4gICAgICAgIHMgPSB0LnRhcmdldElkLCBpID0gYXdhaXQgb2MobiwgZSwgcywgXCJjdXJyZW50XCIgPT09IHIsIHQucmVzdW1lVG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSB2aWV3IGZvciBhIHByZXZpb3VzbHkgdW5rbm93biBxdWVyeSBhbmQgY29tcHV0ZXMgaXRzIGluaXRpYWxcbiAqIHNuYXBzaG90LlxuICovIGFzeW5jIGZ1bmN0aW9uIG9jKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE9uIFdlYiBvbmx5LCB3ZSBpbmplY3QgdGhlIGNvZGUgdGhhdCByZWdpc3RlcnMgbmV3IExpbWJvXG4gICAgLy8gdGFyZ2V0cyBiYXNlZCBvbiB2aWV3IGNoYW5nZXMuIFRoaXMgYWxsb3dzIHVzIHRvIG9ubHkgZGVwZW5kIG9uIExpbWJvXG4gICAgLy8gY2hhbmdlcyB3aGVuIHVzZXIgY29kZSBpbmNsdWRlcyBxdWVyaWVzLlxuICAgIHQuX2MgPSAoZSwgbiwgcykgPT4gYXN5bmMgZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICBsZXQgaSA9IGUudmlldy5XdShuKTtcbiAgICAgICAgaS4kaSAmJiAoXG4gICAgICAgIC8vIFRoZSBxdWVyeSBoYXMgYSBsaW1pdCBhbmQgc29tZSBkb2NzIHdlcmUgcmVtb3ZlZCwgc28gd2UgbmVlZFxuICAgICAgICAvLyB0byByZS1ydW4gdGhlIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHN0b3JlIHRvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICAvLyBkaWRuJ3QgbG9zZSBhbnkgZ29vZCBkb2NzIHRoYXQgaGFkIGJlZW4gcGFzdCB0aGUgbGltaXQuXG4gICAgICAgIGkgPSBhd2FpdCBEbyh0LmxvY2FsU3RvcmUsIGUucXVlcnksIFxuICAgICAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICExKS50aGVuKCgoe2RvY3VtZW50czogdH0pID0+IGUudmlldy5XdSh0LCBpKSkpKTtcbiAgICAgICAgY29uc3QgciA9IHMgJiYgcy50YXJnZXRDaGFuZ2VzLmdldChlLnRhcmdldElkKSwgbyA9IGUudmlldy5hcHBseUNoYW5nZXMoaSwgXG4gICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyB0LmlzUHJpbWFyeUNsaWVudCwgcik7XG4gICAgICAgIHJldHVybiBwYyh0LCBlLnRhcmdldElkLCBvLlh1KSwgby5zbmFwc2hvdDtcbiAgICB9KHQsIGUsIG4sIHMpO1xuICAgIGNvbnN0IHIgPSBhd2FpdCBEbyh0LmxvY2FsU3RvcmUsIGUsIFxuICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApLCBvID0gbmV3IGVjKGUsIHIuSGkpLCB1ID0gby5XdShyLmRvY3VtZW50cyksIGMgPSBtcy5jcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UobiwgcyAmJiBcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovICE9PSB0Lm9ubGluZVN0YXRlLCBpKSwgYSA9IG8uYXBwbHlDaGFuZ2VzKHUsIFxuICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyB0LmlzUHJpbWFyeUNsaWVudCwgYyk7XG4gICAgcGModCwgbiwgYS5YdSk7XG4gICAgY29uc3QgaCA9IG5ldyBuYyhlLCBuLCBvKTtcbiAgICByZXR1cm4gdC5pYy5zZXQoZSwgaCksIHQucmMuaGFzKG4pID8gdC5yYy5nZXQobikucHVzaChlKSA6IHQucmMuc2V0KG4sIFsgZSBdKSwgYS5zbmFwc2hvdDtcbn1cblxuLyoqIFN0b3BzIGxpc3RlbmluZyB0byB0aGUgcXVlcnkuICovIGFzeW5jIGZ1bmN0aW9uIHVjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9IG4uaWMuZ2V0KGUpLCBpID0gbi5yYy5nZXQocy50YXJnZXRJZCk7XG4gICAgaWYgKGkubGVuZ3RoID4gMSkgcmV0dXJuIG4ucmMuc2V0KHMudGFyZ2V0SWQsIGkuZmlsdGVyKCh0ID0+ICFobih0LCBlKSkpKSwgdm9pZCBuLmljLmRlbGV0ZShlKTtcbiAgICAvLyBObyBvdGhlciBxdWVyaWVzIGFyZSBtYXBwZWQgdG8gdGhlIHRhcmdldCwgY2xlYW4gdXAgdGhlIHF1ZXJ5IGFuZCB0aGUgdGFyZ2V0LlxuICAgICAgICBpZiAobi5pc1ByaW1hcnlDbGllbnQpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byByZW1vdmUgdGhlIGxvY2FsIHF1ZXJ5IHRhcmdldCBmaXJzdCB0byBhbGxvdyB1cyB0byB2ZXJpZnlcbiAgICAgICAgLy8gd2hldGhlciBhbnkgb3RoZXIgY2xpZW50IGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhpcyB0YXJnZXQuXG4gICAgICAgIG4uc2hhcmVkQ2xpZW50U3RhdGUucmVtb3ZlTG9jYWxRdWVyeVRhcmdldChzLnRhcmdldElkKTtcbiAgICAgICAgbi5zaGFyZWRDbGllbnRTdGF0ZS5pc0FjdGl2ZVF1ZXJ5VGFyZ2V0KHMudGFyZ2V0SWQpIHx8IGF3YWl0IFNvKG4ubG9jYWxTdG9yZSwgcy50YXJnZXRJZCwgXG4gICAgICAgIC8qa2VlcFBlcnNpc3RlZFRhcmdldERhdGE9Ki8gITEpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIG4uc2hhcmVkQ2xpZW50U3RhdGUuY2xlYXJRdWVyeVN0YXRlKHMudGFyZ2V0SWQpLCBsdShuLnJlbW90ZVN0b3JlLCBzLnRhcmdldElkKSwgXG4gICAgICAgICAgICBnYyhuLCBzLnRhcmdldElkKTtcbiAgICAgICAgfSkpLmNhdGNoKEV0KTtcbiAgICB9IGVsc2UgZ2Mobiwgcy50YXJnZXRJZCksIGF3YWl0IFNvKG4ubG9jYWxTdG9yZSwgcy50YXJnZXRJZCwgXG4gICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCk7XG59XG5cbi8qKlxuICogSW5pdGlhdGVzIHRoZSB3cml0ZSBvZiBsb2NhbCBtdXRhdGlvbiBiYXRjaCB3aGljaCBpbnZvbHZlcyBhZGRpbmcgdGhlXG4gKiB3cml0ZXMgdG8gdGhlIG11dGF0aW9uIHF1ZXVlLCBub3RpZnlpbmcgdGhlIHJlbW90ZSBzdG9yZSBhYm91dCBuZXdcbiAqIG11dGF0aW9ucyBhbmQgcmFpc2luZyBldmVudHMgZm9yIGFueSBjaGFuZ2VzIHRoaXMgd3JpdGUgY2F1c2VkLlxuICpcbiAqIFRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgY2FsbCBpcyByZXNvbHZlZCB3aGVuIHRoZSBhYm92ZSBzdGVwc1xuICogaGF2ZSBjb21wbGV0ZWQsICpub3QqIHdoZW4gdGhlIHdyaXRlIHdhcyBhY2tlZCBieSB0aGUgYmFja2VuZC4gVGhlXG4gKiB1c2VyQ2FsbGJhY2sgaXMgcmVzb2x2ZWQgb25jZSB0aGUgd3JpdGUgd2FzIGFja2VkL3JlamVjdGVkIGJ5IHRoZVxuICogYmFja2VuZCAob3IgZmFpbGVkIGxvY2FsbHkgZm9yIGFueSBvdGhlciByZWFzb24pLlxuICovIGFzeW5jIGZ1bmN0aW9uIGNjKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gT2ModCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSAkKHQpLCBzID0gbnQubm93KCksIGkgPSBlLnJlZHVjZSgoKHQsIGUpID0+IHQuYWRkKGUua2V5KSksIGZzKCkpO1xuICAgICAgICAgICAgbGV0IHIsIG87XG4gICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkxvY2FsbHkgd3JpdGUgbXV0YXRpb25zXCIsIFwicmVhZHdyaXRlXCIsICh0ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoaWNoIGtleXMgZG8gbm90IGhhdmUgYSByZW1vdGUgdmVyc2lvbiBpbiB0aGUgY2FjaGUsIHRoaXNcbiAgICAgICAgICAgICAgICAvLyBpcyBuZWVkZWQgdG8gY3JlYXRlIHRoZSByaWdodCBvdmVybGF5IG11dGF0aW9uOiBpZiBubyByZW1vdGUgdmVyc2lvblxuICAgICAgICAgICAgICAgIC8vIHByZXNlbnRzLCB3ZSBkbyBub3QgbmVlZCB0byBjcmVhdGUgb3ZlcmxheXMgYXMgcGF0Y2ggbXV0YXRpb25zLlxuICAgICAgICAgICAgICAgIC8vIFRPRE8oT3ZlcmxheSk6IElzIHRoZXJlIGEgYmV0dGVyIHdheSB0byBkZXRlcm1pbmUgdGhpcz8gVXNpbmcgdGhlXG4gICAgICAgICAgICAgICAgLy8gIGRvY3VtZW50IHZlcnNpb24gZG9lcyBub3Qgd29yayBiZWNhdXNlIGxvY2FsIG11dGF0aW9ucyBzZXQgdGhlbSBiYWNrXG4gICAgICAgICAgICAgICAgLy8gIHRvIDAuXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBzcygpLCBjID0gZnMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5HaS5nZXRFbnRyaWVzKHQsIGkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1ID0gdCwgdS5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5pc1ZhbGlkRG9jdW1lbnQoKSB8fCAoYyA9IGMuYWRkKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuLmxvY2FsRG9jdW1lbnRzLmdldE92ZXJsYXllZERvY3VtZW50cyh0LCB1KSkpLm5leHQoKGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByID0gaTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIG5vbi1pZGVtcG90ZW50IG11dGF0aW9ucyAoc3VjaCBhcyBgRmllbGRWYWx1ZS5pbmNyZW1lbnQoKWApLFxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSByZWNvcmQgdGhlIGJhc2Ugc3RhdGUgaW4gYSBzZXBhcmF0ZSBwYXRjaCBtdXRhdGlvbi4gVGhpcyBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBsYXRlciB1c2VkIHRvIGd1YXJhbnRlZSBjb25zaXN0ZW50IHZhbHVlcyBhbmQgcHJldmVudHMgZmxpY2tlclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVuIGlmIHRoZSBiYWNrZW5kIHNlbmRzIHVzIGFuIHVwZGF0ZSB0aGF0IGFscmVhZHkgaW5jbHVkZXMgb3VyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZm9ybS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IFVuKHQsIHIuZ2V0KHQua2V5KS5vdmVybGF5ZWREb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IGUgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGUgYmFzZSBzdGF0ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIGlmIHRoZXJlJ3Mgc29tZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhpc3RpbmcgZG9jdW1lbnQgdG8gb3ZlcnJpZGUsIHNvIHVzZSBhIFByZWNvbmRpdGlvbiBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhpc3RzPXRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaChuZXcgR24odC5rZXksIGUsIFZlKGUudmFsdWUubWFwVmFsdWUpLCBPbi5leGlzdHMoITApKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubXV0YXRpb25RdWV1ZS5hZGRNdXRhdGlvbkJhdGNoKHQsIHMsIG8sIGUpO1xuICAgICAgICAgICAgICAgIH0pKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbyA9IGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLmFwcGx5VG9Mb2NhbERvY3VtZW50U2V0KHIsIGMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5kb2N1bWVudE92ZXJsYXlDYWNoZS5zYXZlT3ZlcmxheXModCwgZS5iYXRjaElkLCBzKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkudGhlbigoKCkgPT4gKHtcbiAgICAgICAgICAgICAgICBiYXRjaElkOiBvLmJhdGNoSWQsXG4gICAgICAgICAgICAgICAgY2hhbmdlczogb3MocilcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0ocy5sb2NhbFN0b3JlLCBlKTtcbiAgICAgICAgcy5zaGFyZWRDbGllbnRTdGF0ZS5hZGRQZW5kaW5nTXV0YXRpb24odC5iYXRjaElkKSwgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgbGV0IHMgPSB0LmhjW3QuY3VycmVudFVzZXIudG9LZXkoKV07XG4gICAgICAgICAgICBzIHx8IChzID0gbmV3IEJ0KFopKTtcbiAgICAgICAgICAgIHMgPSBzLmluc2VydChlLCBuKSwgdC5oY1t0LmN1cnJlbnRVc2VyLnRvS2V5KCldID0gcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlc29sdmVzIG9yIHJlamVjdHMgdGhlIHVzZXIgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiBiYXRjaCBhbmQgdGhlbiBkaXNjYXJkc1xuICogaXQuXG4gKi8gKHMsIHQuYmF0Y2hJZCwgbiksIGF3YWl0IEVjKHMsIHQuY2hhbmdlcyksIGF3YWl0IEF1KHMucmVtb3RlU3RvcmUpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgcGVyc2lzdCB0aGUgbXV0YXRpb24sIHdlIHJlamVjdCB0aGUgdXNlciBjYWxsYmFjayBhbmRcbiAgICAgICAgLy8gZG9uJ3Qgc2VuZCB0aGUgbXV0YXRpb24uIFRoZSB1c2VyIGNhbiB0aGVuIHJldHJ5IHRoZSB3cml0ZS5cbiAgICAgICAgY29uc3QgZSA9IEZ1KHQsIFwiRmFpbGVkIHRvIHBlcnNpc3Qgd3JpdGVcIik7XG4gICAgICAgIG4ucmVqZWN0KGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIG9uZSByZW1vdGUgZXZlbnQgdG8gdGhlIHN5bmMgZW5naW5lLCBub3RpZnlpbmcgYW55IHZpZXdzIG9mIHRoZVxuICogY2hhbmdlcywgYW5kIHJlbGVhc2luZyBhbnkgcGVuZGluZyBtdXRhdGlvbiBiYXRjaGVzIHRoYXQgd291bGQgYmVjb21lXG4gKiB2aXNpYmxlIGJlY2F1c2Ugb2YgdGhlIHNuYXBzaG90IHZlcnNpb24gdGhlIHJlbW90ZSBldmVudCBjb250YWlucy5cbiAqLyBhc3luYyBmdW5jdGlvbiBhYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGJvKG4ubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgIC8vIFVwZGF0ZSBgcmVjZWl2ZWREb2N1bWVudGAgYXMgYXBwcm9wcmlhdGUgZm9yIGFueSBsaW1ibyB0YXJnZXRzLlxuICAgICAgICAgICAgICAgIGUudGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IG4uY2MuZ2V0KGUpO1xuICAgICAgICAgICAgcyAmJiAoXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgbGltYm8gcmVzb2x1dGlvbiBsb29rdXAsIGl0J3MgZm9yIGEgc2luZ2xlIGRvY3VtZW50XG4gICAgICAgICAgICAvLyBhbmQgaXQgY291bGQgYmUgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLCBidXQgbm90IGEgY29tYmluYXRpb24uXG4gICAgICAgICAgICBNKHQuYWRkZWREb2N1bWVudHMuc2l6ZSArIHQubW9kaWZpZWREb2N1bWVudHMuc2l6ZSArIHQucmVtb3ZlZERvY3VtZW50cy5zaXplIDw9IDEpLCBcbiAgICAgICAgICAgIHQuYWRkZWREb2N1bWVudHMuc2l6ZSA+IDAgPyBzLm5jID0gITAgOiB0Lm1vZGlmaWVkRG9jdW1lbnRzLnNpemUgPiAwID8gTShzLm5jKSA6IHQucmVtb3ZlZERvY3VtZW50cy5zaXplID4gMCAmJiAoTShzLm5jKSwgXG4gICAgICAgICAgICBzLm5jID0gITEpKTtcbiAgICAgICAgfSkpLCBhd2FpdCBFYyhuLCB0LCBlKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgIGF3YWl0IEV0KHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgc3luYyBlbmdpbmUgYW5kIG5vdGlmaWVzIGFueSB2aWV3cyBvZlxuICogdGhlIGNoYW5nZS5cbiAqLyBmdW5jdGlvbiBoYyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9ICQodCk7XG4gICAgLy8gSWYgd2UgYXJlIHRoZSBzZWNvbmRhcnkgY2xpZW50LCB3ZSBleHBsaWNpdGx5IGlnbm9yZSB0aGUgcmVtb3RlIHN0b3JlJ3NcbiAgICAvLyBvbmxpbmUgc3RhdGUgKHRoZSBsb2NhbCBjbGllbnQgbWF5IGdvIG9mZmxpbmUsIGV2ZW4gdGhvdWdoIHRoZSBwcmltYXJ5XG4gICAgLy8gdGFiIHJlbWFpbnMgb25saW5lKSBhbmQgb25seSBhcHBseSB0aGUgcHJpbWFyeSB0YWIncyBvbmxpbmUgc3RhdGUgZnJvbVxuICAgIC8vIFNoYXJlZENsaWVudFN0YXRlLlxuICAgICAgICBpZiAocy5pc1ByaW1hcnlDbGllbnQgJiYgMCAvKiBSZW1vdGVTdG9yZSAqLyA9PT0gbiB8fCAhcy5pc1ByaW1hcnlDbGllbnQgJiYgMSAvKiBTaGFyZWRDbGllbnRTdGF0ZSAqLyA9PT0gbikge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHMuaWMuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBzLnZpZXcuUHUoZSk7XG4gICAgICAgICAgICBpLnNuYXBzaG90ICYmIHQucHVzaChpLnNuYXBzaG90KTtcbiAgICAgICAgfSkpLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gJCh0KTtcbiAgICAgICAgICAgIG4ub25saW5lU3RhdGUgPSBlO1xuICAgICAgICAgICAgbGV0IHMgPSAhMTtcbiAgICAgICAgICAgIG4ucXVlcmllcy5mb3JFYWNoKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuLmxpc3RlbmVycykgXG4gICAgICAgICAgICAgICAgLy8gUnVuIGdsb2JhbCBzbmFwc2hvdCBsaXN0ZW5lcnMgaWYgYSBjb25zaXN0ZW50IHNuYXBzaG90IGhhcyBiZWVuIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgdC5QdShlKSAmJiAocyA9ICEwKTtcbiAgICAgICAgICAgIH0pKSwgcyAmJiBXdShuKTtcbiAgICAgICAgfShzLmV2ZW50TWFuYWdlciwgZSksIHQubGVuZ3RoICYmIHMuc2Muem8odCksIHMub25saW5lU3RhdGUgPSBlLCBzLmlzUHJpbWFyeUNsaWVudCAmJiBzLnNoYXJlZENsaWVudFN0YXRlLnNldE9ubGluZVN0YXRlKGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWplY3RzIHRoZSBsaXN0ZW4gZm9yIHRoZSBnaXZlbiB0YXJnZXRJRC4gVGhpcyBjYW4gYmUgdHJpZ2dlcmVkIGJ5IHRoZVxuICogYmFja2VuZCBmb3IgYW55IGFjdGl2ZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHN5bmNFbmdpbmUgLSBUaGUgc3luYyBlbmdpbmUgaW1wbGVtZW50YXRpb24uXG4gKiBAcGFyYW0gdGFyZ2V0SWQgLSBUaGUgdGFyZ2V0SUQgY29ycmVzcG9uZHMgdG8gb25lIHByZXZpb3VzbHkgaW5pdGlhdGVkIGJ5IHRoZVxuICogdXNlciBhcyBwYXJ0IG9mIFRhcmdldERhdGEgcGFzc2VkIHRvIGxpc3RlbigpIG9uIFJlbW90ZVN0b3JlLlxuICogQHBhcmFtIGVyciAtIEEgZGVzY3JpcHRpb24gb2YgdGhlIGNvbmRpdGlvbiB0aGF0IGhhcyBmb3JjZWQgdGhlIHJlamVjdGlvbi5cbiAqIE5lYXJseSBhbHdheXMgdGhpcyB3aWxsIGJlIGFuIGluZGljYXRpb24gdGhhdCB0aGUgdXNlciBpcyBubyBsb25nZXJcbiAqIGF1dGhvcml6ZWQgdG8gc2VlIHRoZSBkYXRhIG1hdGNoaW5nIHRoZSB0YXJnZXQuXG4gKi8gYXN5bmMgZnVuY3Rpb24gbGModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSAkKHQpO1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgICAgIHMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZShlLCBcInJlamVjdGVkXCIsIG4pO1xuICAgIGNvbnN0IGkgPSBzLmNjLmdldChlKSwgciA9IGkgJiYgaS5rZXk7XG4gICAgaWYgKHIpIHtcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IFdlIHJlYWxseSBvbmx5IHNob3VsZCBkbyB0aGUgZm9sbG93aW5nIG9uIHBlcm1pc3Npb25cbiAgICAgICAgLy8gZGVuaWVkIGVycm9ycywgYnV0IHdlIGRvbid0IGhhdmUgdGhlIGNhdXNlIGNvZGUgaGVyZS5cbiAgICAgICAgLy8gSXQncyBhIGxpbWJvIGRvYy4gQ3JlYXRlIGEgc3ludGhldGljIGV2ZW50IHNheWluZyBpdCB3YXMgZGVsZXRlZC5cbiAgICAgICAgLy8gVGhpcyBpcyBraW5kIG9mIGEgaGFjay4gSWRlYWxseSwgd2Ugd291bGQgaGF2ZSBhIG1ldGhvZCBpbiB0aGUgbG9jYWxcbiAgICAgICAgLy8gc3RvcmUgdG8gcHVyZ2UgYSBkb2N1bWVudC4gSG93ZXZlciwgaXQgd291bGQgYmUgdHJpY2t5IHRvIGtlZXAgYWxsIG9mXG4gICAgICAgIC8vIHRoZSBsb2NhbCBzdG9yZSdzIGludmFyaWFudHMgd2l0aCBhbm90aGVyIG1ldGhvZC5cbiAgICAgICAgbGV0IHQgPSBuZXcgQnQoY3QuY29tcGFyYXRvcik7XG4gICAgICAgIC8vIFRPRE8oYi8yMTcxODkyMTYpOiBUaGlzIGxpbWJvIGRvY3VtZW50IHNob3VsZCBpZGVhbGx5IGhhdmUgYSByZWFkIHRpbWUsXG4gICAgICAgIC8vIHNvIHRoYXQgaXQgaXMgcGlja2VkIHVwIGJ5IGFueSByZWFkLXRpbWUgYmFzZWQgc2NhbnMuIFRoZSBiYWNrZW5kLFxuICAgICAgICAvLyBob3dldmVyLCBkb2VzIG5vdCBzZW5kIGEgcmVhZCB0aW1lIGZvciB0YXJnZXQgcmVtb3ZhbHMuXG4gICAgICAgICAgICAgICAgdCA9IHQuaW5zZXJ0KHIsIFNlLm5ld05vRG9jdW1lbnQociwgc3QubWluKCkpKTtcbiAgICAgICAgY29uc3QgbiA9IGZzKCkuYWRkKHIpLCBpID0gbmV3IHdzKHN0Lm1pbigpLCBcbiAgICAgICAgLyogdGFyZ2V0Q2hhbmdlcz0gKi8gbmV3IE1hcCwgXG4gICAgICAgIC8qIHRhcmdldE1pc21hdGNoZXM9ICovIG5ldyBxdChaKSwgdCwgbik7XG4gICAgICAgIGF3YWl0IGFjKHMsIGkpLCBcbiAgICAgICAgLy8gU2luY2UgdGhpcyBxdWVyeSBmYWlsZWQsIHdlIHdvbid0IHdhbnQgdG8gbWFudWFsbHkgdW5saXN0ZW4gdG8gaXQuXG4gICAgICAgIC8vIFdlIG9ubHkgcmVtb3ZlIGl0IGZyb20gYm9va2tlZXBpbmcgYWZ0ZXIgd2Ugc3VjY2Vzc2Z1bGx5IGFwcGxpZWQgdGhlXG4gICAgICAgIC8vIFJlbW90ZUV2ZW50LiBJZiBgYXBwbHlSZW1vdGVFdmVudCgpYCB0aHJvd3MsIHdlIHdhbnQgdG8gcmUtbGlzdGVuIHRvXG4gICAgICAgIC8vIHRoaXMgcXVlcnkgd2hlbiB0aGUgUmVtb3RlU3RvcmUgcmVzdGFydHMgdGhlIFdhdGNoIHN0cmVhbSwgd2hpY2ggc2hvdWxkXG4gICAgICAgIC8vIHJlLXRyaWdnZXIgdGhlIHRhcmdldCBmYWlsdXJlLlxuICAgICAgICBzLnVjID0gcy51Yy5yZW1vdmUociksIHMuY2MuZGVsZXRlKGUpLCBUYyhzKTtcbiAgICB9IGVsc2UgYXdhaXQgU28ocy5sb2NhbFN0b3JlLCBlLCBcbiAgICAvKiBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YSAqLyAhMSkudGhlbigoKCkgPT4gZ2MocywgZSwgbikpKS5jYXRjaChFdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KSwgcyA9IGUuYmF0Y2guYmF0Y2hJZDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgQW8obi5sb2NhbFN0b3JlLCBlKTtcbiAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIG1heSBvciBtYXkgbm90IGJlIGFibGUgdG8gYXBwbHkgdGhlIHdyaXRlIHJlc3VsdCBhbmRcbiAgICAgICAgLy8gcmFpc2UgZXZlbnRzIGltbWVkaWF0ZWx5IChkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgd2F0Y2hlciBpcyBjYXVnaHRcbiAgICAgICAgLy8gdXApLCBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlblxuICAgICAgICAvLyBiZWZvcmUgbGlzdGVuIGV2ZW50cy5cbiAgICAgICAgICAgICAgICBtYyhuLCBzLCAvKmVycm9yPSovIG51bGwpLCB3YyhuLCBzKSwgbi5zaGFyZWRDbGllbnRTdGF0ZS51cGRhdGVNdXRhdGlvblN0YXRlKHMsIFwiYWNrbm93bGVkZ2VkXCIpLCBcbiAgICAgICAgYXdhaXQgRWMobiwgdCk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICBhd2FpdCBFdCh0KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRjKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gJCh0KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9ICQodCk7XG4gICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlamVjdCBiYXRjaFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsICh0ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcztcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5tdXRhdGlvblF1ZXVlLmxvb2t1cE11dGF0aW9uQmF0Y2godCwgZSkubmV4dCgoZSA9PiAoTShudWxsICE9PSBlKSwgcyA9IGUua2V5cygpLCBcbiAgICAgICAgICAgICAgICBuLm11dGF0aW9uUXVldWUucmVtb3ZlTXV0YXRpb25CYXRjaCh0LCBlKSkpKS5uZXh0KCgoKSA9PiBuLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2sodCkpKS5uZXh0KCgoKSA9PiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnJlbW92ZU92ZXJsYXlzRm9yQmF0Y2hJZCh0LCBzLCBlKSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMucmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXNGb3JEb2N1bWVudEtleXModCwgcykpKS5uZXh0KCgoKSA9PiBuLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyh0LCBzKSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogUmV0dXJucyB0aGUgbGFyZ2VzdCAobGF0ZXN0KSBiYXRjaCBpZCBpbiBtdXRhdGlvbiBxdWV1ZSB0aGF0IGlzIHBlbmRpbmdcbiAqIHNlcnZlciByZXNwb25zZS5cbiAqXG4gKiBSZXR1cm5zIGBCQVRDSElEX1VOS05PV05gIGlmIHRoZSBxdWV1ZSBpcyBlbXB0eS5cbiAqLyAocy5sb2NhbFN0b3JlLCBlKTtcbiAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIG1heSBvciBtYXkgbm90IGJlIGFibGUgdG8gYXBwbHkgdGhlIHdyaXRlIHJlc3VsdCBhbmRcbiAgICAgICAgLy8gcmFpc2UgZXZlbnRzIGltbWVkaWF0ZWx5IChkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgd2F0Y2hlciBpcyBjYXVnaHQgdXApLFxuICAgICAgICAvLyBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlbiBiZWZvcmVcbiAgICAgICAgLy8gbGlzdGVuIGV2ZW50cy5cbiAgICAgICAgICAgICAgICBtYyhzLCBlLCBuKSwgd2MocywgZSksIHMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlTXV0YXRpb25TdGF0ZShlLCBcInJlamVjdGVkXCIsIG4pLCBcbiAgICAgICAgYXdhaXQgRWMocywgdCk7XG4gICAgfSBjYXRjaCAobikge1xuICAgICAgICBhd2FpdCBFdChuKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgdXNlciBjYWxsYmFjayB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHBlbmRpbmcgbXV0YXRpb25zIGF0IHRoZSBtb21lbnQgb2YgY2FsbGluZ1xuICogYXJlIGFja25vd2xlZGdlZCAuXG4gKi8gYXN5bmMgZnVuY3Rpb24gX2ModCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgIG11KG4ucmVtb3RlU3RvcmUpIHx8IEMoXCJTeW5jRW5naW5lXCIsIFwiVGhlIG5ldHdvcmsgaXMgZGlzYWJsZWQuIFRoZSB0YXNrIHJldHVybmVkIGJ5ICdhd2FpdFBlbmRpbmdXcml0ZXMoKScgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhlIG5ldHdvcmsgaXMgZW5hYmxlZC5cIik7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSAkKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGUucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgaGlnaGVzdCB1bmFja25vd2xlZGdlZCBiYXRjaCBpZFwiLCBcInJlYWRvbmx5XCIsICh0ID0+IGUubXV0YXRpb25RdWV1ZS5nZXRIaWdoZXN0VW5hY2tub3dsZWRnZWRCYXRjaElkKHQpKSk7XG4gICAgICAgIH0obi5sb2NhbFN0b3JlKTtcbiAgICAgICAgaWYgKC0xID09PSB0KSBcbiAgICAgICAgLy8gVHJpZ2dlciB0aGUgY2FsbGJhY2sgcmlnaHQgYXdheSBpZiB0aGVyZSBpcyBubyBwZW5kaW5nIHdyaXRlcyBhdCB0aGUgbW9tZW50LlxuICAgICAgICByZXR1cm4gdm9pZCBlLnJlc29sdmUoKTtcbiAgICAgICAgY29uc3QgcyA9IG4ubGMuZ2V0KHQpIHx8IFtdO1xuICAgICAgICBzLnB1c2goZSksIG4ubGMuc2V0KHQsIHMpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgY29uc3QgbiA9IEZ1KHQsIFwiSW5pdGlhbGl6YXRpb24gb2Ygd2FpdEZvclBlbmRpbmdXcml0ZXMoKSBvcGVyYXRpb24gZmFpbGVkXCIpO1xuICAgICAgICBlLnJlamVjdChuKTtcbiAgICB9XG59XG5cbi8qKlxuICogVHJpZ2dlcnMgdGhlIGNhbGxiYWNrcyB0aGF0IGFyZSB3YWl0aW5nIGZvciB0aGlzIGJhdGNoIGlkIHRvIGdldCBhY2tub3dsZWRnZWQgYnkgc2VydmVyLFxuICogaWYgdGhlcmUgYXJlIGFueS5cbiAqLyBmdW5jdGlvbiB3Yyh0LCBlKSB7XG4gICAgKHQubGMuZ2V0KGUpIHx8IFtdKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgdC5yZXNvbHZlKCk7XG4gICAgfSkpLCB0LmxjLmRlbGV0ZShlKTtcbn1cblxuLyoqIFJlamVjdCBhbGwgb3V0c3RhbmRpbmcgY2FsbGJhY2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHRvIGNvbXBsZXRlLiAqLyBmdW5jdGlvbiBtYyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9ICQodCk7XG4gICAgbGV0IGkgPSBzLmhjW3MuY3VycmVudFVzZXIudG9LZXkoKV07XG4gICAgLy8gTk9URTogTXV0YXRpb25zIHJlc3RvcmVkIGZyb20gcGVyc2lzdGVuY2Ugd29uJ3QgaGF2ZSBjYWxsYmFja3MsIHNvIGl0J3NcbiAgICAvLyBva2F5IGZvciB0aGVyZSB0byBiZSBubyBjYWxsYmFjayBmb3IgdGhpcyBJRC5cbiAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgY29uc3QgdCA9IGkuZ2V0KGUpO1xuICAgICAgICB0ICYmIChuID8gdC5yZWplY3QobikgOiB0LnJlc29sdmUoKSwgaSA9IGkucmVtb3ZlKGUpKSwgcy5oY1tzLmN1cnJlbnRVc2VyLnRvS2V5KCldID0gaTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdjKHQsIGUsIG4gPSBudWxsKSB7XG4gICAgdC5zaGFyZWRDbGllbnRTdGF0ZS5yZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0KGUpO1xuICAgIGZvciAoY29uc3QgcyBvZiB0LnJjLmdldChlKSkgdC5pYy5kZWxldGUocyksIG4gJiYgdC5zYy53YyhzLCBuKTtcbiAgICBpZiAodC5yYy5kZWxldGUoZSksIHQuaXNQcmltYXJ5Q2xpZW50KSB7XG4gICAgICAgIHQuYWMubHMoZSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0LmFjLmNvbnRhaW5zS2V5KGUpIHx8IFxuICAgICAgICAgICAgLy8gV2UgcmVtb3ZlZCB0aGUgbGFzdCByZWZlcmVuY2UgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICB5Yyh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24geWModCwgZSkge1xuICAgIHQub2MuZGVsZXRlKGUucGF0aC5jYW5vbmljYWxTdHJpbmcoKSk7XG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHRoZSB0YXJnZXQgYWxyZWFkeSBnb3QgcmVtb3ZlZCBiZWNhdXNlIHRoZSBxdWVyeSBmYWlsZWQuIEluIHRoYXQgY2FzZSxcbiAgICAvLyB0aGUga2V5IHdvbid0IGV4aXN0IGluIGBsaW1ib1RhcmdldHNCeUtleWAuIE9ubHkgZG8gdGhlIGNsZWFudXAgaWYgd2Ugc3RpbGwgaGF2ZSB0aGUgdGFyZ2V0LlxuICAgIGNvbnN0IG4gPSB0LnVjLmdldChlKTtcbiAgICBudWxsICE9PSBuICYmIChsdSh0LnJlbW90ZVN0b3JlLCBuKSwgdC51YyA9IHQudWMucmVtb3ZlKGUpLCB0LmNjLmRlbGV0ZShuKSwgVGModCkpO1xufVxuXG5mdW5jdGlvbiBwYyh0LCBlLCBuKSB7XG4gICAgZm9yIChjb25zdCBzIG9mIG4pIGlmIChzIGluc3RhbmNlb2YgWnUpIHQuYWMuYWRkUmVmZXJlbmNlKHMua2V5LCBlKSwgSWModCwgcyk7IGVsc2UgaWYgKHMgaW5zdGFuY2VvZiB0Yykge1xuICAgICAgICBDKFwiU3luY0VuZ2luZVwiLCBcIkRvY3VtZW50IG5vIGxvbmdlciBpbiBsaW1ibzogXCIgKyBzLmtleSksIHQuYWMucmVtb3ZlUmVmZXJlbmNlKHMua2V5LCBlKTtcbiAgICAgICAgdC5hYy5jb250YWluc0tleShzLmtleSkgfHwgXG4gICAgICAgIC8vIFdlIHJlbW92ZWQgdGhlIGxhc3QgcmVmZXJlbmNlIGZvciB0aGlzIGtleVxuICAgICAgICB5Yyh0LCBzLmtleSk7XG4gICAgfSBlbHNlIE8oKTtcbn1cblxuZnVuY3Rpb24gSWModCwgZSkge1xuICAgIGNvbnN0IG4gPSBlLmtleSwgcyA9IG4ucGF0aC5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICB0LnVjLmdldChuKSB8fCB0Lm9jLmhhcyhzKSB8fCAoQyhcIlN5bmNFbmdpbmVcIiwgXCJOZXcgZG9jdW1lbnQgaW4gbGltYm86IFwiICsgbiksIHQub2MuYWRkKHMpLCBcbiAgICBUYyh0KSk7XG59XG5cbi8qKlxuICogU3RhcnRzIGxpc3RlbnMgZm9yIGRvY3VtZW50cyBpbiBsaW1ibyB0aGF0IGFyZSBlbnF1ZXVlZCBmb3IgcmVzb2x1dGlvbixcbiAqIHN1YmplY3QgdG8gYSBtYXhpbXVtIG51bWJlciBvZiBjb25jdXJyZW50IHJlc29sdXRpb25zLlxuICpcbiAqIFdpdGhvdXQgYm91bmRpbmcgdGhlIG51bWJlciBvZiBjb25jdXJyZW50IHJlc29sdXRpb25zLCB0aGUgc2VydmVyIGNhbiBmYWlsXG4gKiB3aXRoIFwicmVzb3VyY2UgZXhoYXVzdGVkXCIgZXJyb3JzIHdoaWNoIGNhbiBsZWFkIHRvIHBhdGhvbG9naWNhbCBjbGllbnRcbiAqIGJlaGF2aW9yIGFzIHNlZW4gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9pc3N1ZXMvMjY4My5cbiAqLyBmdW5jdGlvbiBUYyh0KSB7XG4gICAgZm9yICg7dC5vYy5zaXplID4gMCAmJiB0LnVjLnNpemUgPCB0Lm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zOyApIHtcbiAgICAgICAgY29uc3QgZSA9IHQub2MudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgICB0Lm9jLmRlbGV0ZShlKTtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBjdChydC5mcm9tU3RyaW5nKGUpKSwgcyA9IHQuZmMubmV4dCgpO1xuICAgICAgICB0LmNjLnNldChzLCBuZXcgc2MobikpLCB0LnVjID0gdC51Yy5pbnNlcnQobiwgcyksIGh1KHQucmVtb3RlU3RvcmUsIG5ldyBGaShjbihlbihuLnBhdGgpKSwgcywgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gLCBPdC5hdCkpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gRWModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSAkKHQpLCBpID0gW10sIHIgPSBbXSwgbyA9IFtdO1xuICAgIHMuaWMuaXNFbXB0eSgpIHx8IChzLmljLmZvckVhY2goKCh0LCB1KSA9PiB7XG4gICAgICAgIG8ucHVzaChzLl9jKHUsIGUsIG4pLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHZpZXdzIGlmIHRoZXJlIGFyZSBhY3R1YWwgY2hhbmdlcy5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBjaGFuZ2VzLCBvciB3ZSBhcmUgaGFuZGxpbmcgYSBnbG9iYWwgc25hcHNob3QsIG5vdGlmeVxuICAgICAgICAgICAgLy8gc2Vjb25kYXJ5IGNsaWVudHMgdG8gdXBkYXRlIHF1ZXJ5IHN0YXRlLlxuICAgICAgICAgICAgKHQgfHwgbikgJiYgcy5pc1ByaW1hcnlDbGllbnQgJiYgcy5zaGFyZWRDbGllbnRTdGF0ZS51cGRhdGVRdWVyeVN0YXRlKHUudGFyZ2V0SWQsIChudWxsID09IHQgPyB2b2lkIDAgOiB0LmZyb21DYWNoZSkgPyBcIm5vdC1jdXJyZW50XCIgOiBcImN1cnJlbnRcIiksIFxuICAgICAgICAgICAgdCkge1xuICAgICAgICAgICAgICAgIGkucHVzaCh0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0geW8uQ2kodS50YXJnZXRJZCwgdCk7XG4gICAgICAgICAgICAgICAgci5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSkpO1xuICAgIH0pKSwgYXdhaXQgUHJvbWlzZS5hbGwobyksIHMuc2Muem8oaSksIGF3YWl0IGFzeW5jIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9ICQodCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwibm90aWZ5TG9jYWxWaWV3Q2hhbmdlc1wiLCBcInJlYWR3cml0ZVwiLCAodCA9PiBBdC5mb3JFYWNoKGUsIChlID0+IEF0LmZvckVhY2goZS5TaSwgKHMgPT4gbi5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS5hZGRSZWZlcmVuY2UodCwgZS50YXJnZXRJZCwgcykpKS5uZXh0KCgoKSA9PiBBdC5mb3JFYWNoKGUuRGksIChzID0+IG4ucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUucmVtb3ZlUmVmZXJlbmNlKHQsIGUudGFyZ2V0SWQsIHMpKSkpKSkpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGlmICghVnQodCkpIHRocm93IHQ7XG4gICAgICAgICAgICAvLyBJZiBgbm90aWZ5TG9jYWxWaWV3Q2hhbmdlc2AgZmFpbHMsIHdlIGRpZCBub3QgYWR2YW5jZSB0aGUgc2VxdWVuY2VcbiAgICAgICAgICAgIC8vIG51bWJlciBmb3IgdGhlIGRvY3VtZW50cyB0aGF0IHdlcmUgaW5jbHVkZWQgaW4gdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgIC8vIFRoaXMgbWlnaHQgdHJpZ2dlciB0aGVtIHRvIGJlIGRlbGV0ZWQgZWFybGllciB0aGFuIHRoZXkgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyB3b3VsZCBoYXZlLCBidXQgaXQgc2hvdWxkIG5vdCBpbnZhbGlkYXRlIHRoZSBpbnRlZ3JpdHkgb2YgdGhlIGRhdGEuXG4gICAgICAgICAgICBDKFwiTG9jYWxTdG9yZVwiLCBcIkZhaWxlZCB0byB1cGRhdGUgc2VxdWVuY2UgbnVtYmVyczogXCIgKyB0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQudGFyZ2V0SWQ7XG4gICAgICAgICAgICBpZiAoIXQuZnJvbUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uVWkuZ2V0KGUpLCBzID0gdC5zbmFwc2hvdFZlcnNpb24sIGkgPSB0LndpdGhMYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uKHMpO1xuICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdGhlIGxhc3QgbGltYm8gZnJlZSBzbmFwc2hvdCB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uVWkgPSBuLlVpLmluc2VydChlLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0ocy5sb2NhbFN0b3JlLCByKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIEFjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICBpZiAoIW4uY3VycmVudFVzZXIuaXNFcXVhbChlKSkge1xuICAgICAgICBDKFwiU3luY0VuZ2luZVwiLCBcIlVzZXIgY2hhbmdlLiBOZXcgdXNlcjpcIiwgZS50b0tleSgpKTtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IEVvKG4ubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgIG4uY3VycmVudFVzZXIgPSBlLCBcbiAgICAgICAgLy8gRmFpbHMgdGFza3Mgd2FpdGluZyBmb3IgcGVuZGluZyB3cml0ZXMgcmVxdWVzdGVkIGJ5IHByZXZpb3VzIHVzZXIuXG4gICAgICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHQubGMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdC5yZWplY3QobmV3IEwoQi5DQU5DRUxMRUQsIGUpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIHQubGMuY2xlYXIoKTtcbiAgICAgICAgfShuLCBcIid3YWl0Rm9yUGVuZGluZ1dyaXRlcycgcHJvbWlzZSBpcyByZWplY3RlZCBkdWUgdG8gYSB1c2VyIGNoYW5nZS5cIiksIFxuICAgICAgICAvLyBUT0RPKGIvMTE0MjI2NDE3KTogQ29uc2lkZXIgY2FsbGluZyB0aGlzIG9ubHkgaW4gdGhlIHByaW1hcnkgdGFiLlxuICAgICAgICBuLnNoYXJlZENsaWVudFN0YXRlLmhhbmRsZVVzZXJDaGFuZ2UoZSwgdC5yZW1vdmVkQmF0Y2hJZHMsIHQuYWRkZWRCYXRjaElkcyksIGF3YWl0IEVjKG4sIHQuamkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUmModCwgZSkge1xuICAgIGNvbnN0IG4gPSAkKHQpLCBzID0gbi5jYy5nZXQoZSk7XG4gICAgaWYgKHMgJiYgcy5uYykgcmV0dXJuIGZzKCkuYWRkKHMua2V5KTtcbiAgICB7XG4gICAgICAgIGxldCB0ID0gZnMoKTtcbiAgICAgICAgY29uc3QgcyA9IG4ucmMuZ2V0KGUpO1xuICAgICAgICBpZiAoIXMpIHJldHVybiB0O1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2Ygcykge1xuICAgICAgICAgICAgY29uc3QgcyA9IG4uaWMuZ2V0KGUpO1xuICAgICAgICAgICAgdCA9IHQudW5pb25XaXRoKHMudmlldy5qdSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlY29uY2lsZSB0aGUgbGlzdCBvZiBzeW5jZWQgZG9jdW1lbnRzIGluIGFuIGV4aXN0aW5nIHZpZXcgd2l0aCB0aG9zZVxuICogZnJvbSBwZXJzaXN0ZW5jZS5cbiAqLyBhc3luYyBmdW5jdGlvbiBiYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9ICQodCksIHMgPSBhd2FpdCBEbyhuLmxvY2FsU3RvcmUsIGUucXVlcnksIFxuICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApLCBpID0gZS52aWV3LnRjKHMpO1xuICAgIHJldHVybiBuLmlzUHJpbWFyeUNsaWVudCAmJiBwYyhuLCBlLnRhcmdldElkLCBpLlh1KSwgaTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgbmV3bHkgY2hhbmdlZCBkb2N1bWVudHMgZnJvbSByZW1vdGUgZG9jdW1lbnQgY2FjaGUgYW5kIHJhaXNlc1xuICogc25hcHNob3RzIGlmIG5lZWRlZC5cbiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIFBjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICByZXR1cm4geG8obi5sb2NhbFN0b3JlLCBlKS50aGVuKCh0ID0+IEVjKG4sIHQpKSk7XG59XG5cbi8qKiBBcHBsaWVzIGEgbXV0YXRpb24gc3RhdGUgdG8gYW4gZXhpc3RpbmcgYmF0Y2guICAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIHZjKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gJCh0KSwgciA9IGF3YWl0IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9ICQodCksIHMgPSAkKG4ubXV0YXRpb25RdWV1ZSk7XG4gICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9va3VwIG11dGF0aW9uIGRvY3VtZW50c1wiLCBcInJlYWRvbmx5XCIsICh0ID0+IHMuVG4odCwgZSkubmV4dCgoZSA9PiBlID8gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModCwgZSkgOiBBdC5yZXNvbHZlKG51bGwpKSkpKTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAoaS5sb2NhbFN0b3JlLCBlKTtcbiAgICBudWxsICE9PSByID8gKFwicGVuZGluZ1wiID09PSBuID8gXG4gICAgLy8gSWYgd2UgYXJlIHRoZSBwcmltYXJ5IGNsaWVudCwgd2UgbmVlZCB0byBzZW5kIHRoaXMgd3JpdGUgdG8gdGhlXG4gICAgLy8gYmFja2VuZC4gU2Vjb25kYXJ5IGNsaWVudHMgd2lsbCBpZ25vcmUgdGhlc2Ugd3JpdGVzIHNpbmNlIHRoZWlyIHJlbW90ZVxuICAgIC8vIGNvbm5lY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgYXdhaXQgQXUoaS5yZW1vdGVTdG9yZSkgOiBcImFja25vd2xlZGdlZFwiID09PSBuIHx8IFwicmVqZWN0ZWRcIiA9PT0gbiA/IChcbiAgICAvLyBOT1RFOiBCb3RoIHRoZXNlIG1ldGhvZHMgYXJlIG5vLW9wcyBmb3IgYmF0Y2hlcyB0aGF0IG9yaWdpbmF0ZWQgZnJvbVxuICAgIC8vIG90aGVyIGNsaWVudHMuXG4gICAgbWMoaSwgZSwgcyB8fCBudWxsKSwgd2MoaSwgZSksIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgJCgkKHQpLm11dGF0aW9uUXVldWUpLkFuKGUpO1xuICAgIH1cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuICAgIChpLmxvY2FsU3RvcmUsIGUpKSA6IE8oKSwgYXdhaXQgRWMoaSwgcikpIDogXG4gICAgLy8gQSB0aHJvdHRsZWQgdGFiIG1heSBub3QgaGF2ZSBzZWVuIHRoZSBtdXRhdGlvbiBiZWZvcmUgaXQgd2FzIGNvbXBsZXRlZFxuICAgIC8vIGFuZCByZW1vdmVkIGZyb20gdGhlIG11dGF0aW9uIHF1ZXVlLCBpbiB3aGljaCBjYXNlIHdlIHdvbid0IGhhdmUgY2FjaGVkXG4gICAgLy8gdGhlIGFmZmVjdGVkIGRvY3VtZW50cy4gSW4gdGhpcyBjYXNlIHdlIGNhbiBzYWZlbHkgaWdub3JlIHRoZSB1cGRhdGVcbiAgICAvLyBzaW5jZSB0aGF0IG1lYW5zIHdlIGRpZG4ndCBhcHBseSB0aGUgbXV0YXRpb24gbG9jYWxseSBhdCBhbGwgKGlmIHdlXG4gICAgLy8gaGFkLCB3ZSB3b3VsZCBoYXZlIGNhY2hlZCB0aGUgYWZmZWN0ZWQgZG9jdW1lbnRzKSwgYW5kIHNvIHdlIHdpbGwganVzdFxuICAgIC8vIHNlZSBhbnkgcmVzdWx0aW5nIGRvY3VtZW50IGNoYW5nZXMgdmlhIG5vcm1hbCByZW1vdGUgZG9jdW1lbnQgdXBkYXRlc1xuICAgIC8vIGFzIGFwcGxpY2FibGUuXG4gICAgQyhcIlN5bmNFbmdpbmVcIiwgXCJDYW5ub3QgYXBwbHkgbXV0YXRpb24gYmF0Y2ggd2l0aCBpZDogXCIgKyBlKTtcbn1cblxuLyoqIEFwcGxpZXMgYSBxdWVyeSB0YXJnZXQgY2hhbmdlIGZyb20gYSBkaWZmZXJlbnQgdGFiLiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIFZjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gJCh0KTtcbiAgICBpZiAoa2MobiksIE9jKG4pLCAhMCA9PT0gZSAmJiAhMCAhPT0gbi5kYykge1xuICAgICAgICAvLyBTZWNvbmRhcnkgdGFicyBvbmx5IG1haW50YWluIFZpZXdzIGZvciB0aGVpciBsb2NhbCBsaXN0ZW5lcnMgYW5kIHRoZVxuICAgICAgICAvLyBWaWV3cyBpbnRlcm5hbCBzdGF0ZSBtYXkgbm90IGJlIDEwMCUgcG9wdWxhdGVkIChpbiBwYXJ0aWN1bGFyXG4gICAgICAgIC8vIHNlY29uZGFyeSB0YWJzIGRvbid0IHRyYWNrIHN5bmNlZERvY3VtZW50cywgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhlXG4gICAgICAgIC8vIHNlcnZlciBjb25zaWRlcnMgdG8gYmUgaW4gdGhlIHRhcmdldCkuIFNvIHdoZW4gYSBzZWNvbmRhcnkgYmVjb21lc1xuICAgICAgICAvLyBwcmltYXJ5LCB3ZSBuZWVkIHRvIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYWxsIHZpZXdzIGZvciBhbGwgdGFyZ2V0c1xuICAgICAgICAvLyBtYXRjaCB0aGUgc3RhdGUgb24gZGlzay5cbiAgICAgICAgY29uc3QgdCA9IG4uc2hhcmVkQ2xpZW50U3RhdGUuZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzKCksIGUgPSBhd2FpdCBTYyhuLCB0LnRvQXJyYXkoKSk7XG4gICAgICAgIG4uZGMgPSAhMCwgYXdhaXQgTnUobi5yZW1vdGVTdG9yZSwgITApO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkgaHUobi5yZW1vdGVTdG9yZSwgdCk7XG4gICAgfSBlbHNlIGlmICghMSA9PT0gZSAmJiAhMSAhPT0gbi5kYykge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGxldCBlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIG4ucmMuZm9yRWFjaCgoKHMsIGkpID0+IHtcbiAgICAgICAgICAgIG4uc2hhcmVkQ2xpZW50U3RhdGUuaXNMb2NhbFF1ZXJ5VGFyZ2V0KGkpID8gdC5wdXNoKGkpIDogZSA9IGUudGhlbigoKCkgPT4gKGdjKG4sIGkpLCBcbiAgICAgICAgICAgIFNvKG4ubG9jYWxTdG9yZSwgaSwgXG4gICAgICAgICAgICAvKmtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhPSovICEwKSkpKSwgbHUobi5yZW1vdGVTdG9yZSwgaSk7XG4gICAgICAgIH0pKSwgYXdhaXQgZSwgYXdhaXQgU2MobiwgdCksIFxuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gJCh0KTtcbiAgICAgICAgICAgIGUuY2MuZm9yRWFjaCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBsdShlLnJlbW90ZVN0b3JlLCBuKTtcbiAgICAgICAgICAgIH0pKSwgZS5hYy5mcygpLCBlLmNjID0gbmV3IE1hcCwgZS51YyA9IG5ldyBCdChjdC5jb21wYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlY29uY2lsZSB0aGUgcXVlcnkgdmlld3Mgb2YgdGhlIHByb3ZpZGVkIHF1ZXJ5IHRhcmdldHMgd2l0aCB0aGUgc3RhdGUgZnJvbVxuICogcGVyc2lzdGVuY2UuIFJhaXNlcyBzbmFwc2hvdHMgZm9yIGFueSBjaGFuZ2VzIHRoYXQgYWZmZWN0IHRoZSBsb2NhbFxuICogY2xpZW50IGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkIHN0YXRlIG9mIGFsbCB0YXJnZXQncyBxdWVyeSBkYXRhLlxuICpcbiAqIEBwYXJhbSBzeW5jRW5naW5lIC0gVGhlIHN5bmMgZW5naW5lIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0gdGFyZ2V0cyAtIHRoZSBsaXN0IG9mIHRhcmdldHMgd2l0aCB2aWV3cyB0aGF0IG5lZWQgdG8gYmUgcmVjb21wdXRlZFxuICogQHBhcmFtIHRyYW5zaXRpb25Ub1ByaW1hcnkgLSBgdHJ1ZWAgaWZmIHRoZSB0YWIgdHJhbnNpdGlvbnMgZnJvbSBhIHNlY29uZGFyeVxuICogdGFiIHRvIGEgcHJpbWFyeSB0YWJcbiAqL1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuICAgICAgICAobiksIG4uZGMgPSAhMSwgYXdhaXQgTnUobi5yZW1vdGVTdG9yZSwgITEpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gU2ModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSAkKHQpLCBpID0gW10sIHIgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xuICAgICAgICBsZXQgZTtcbiAgICAgICAgY29uc3QgbiA9IHMucmMuZ2V0KHQpO1xuICAgICAgICBpZiAobiAmJiAwICE9PSBuLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRm9yIHF1ZXJpZXMgdGhhdCBoYXZlIGEgbG9jYWwgVmlldywgd2UgZmV0Y2ggdGhlaXIgY3VycmVudCBzdGF0ZVxuICAgICAgICAgICAgLy8gZnJvbSBMb2NhbFN0b3JlIChhcyB0aGUgcmVzdW1lIHRva2VuIGFuZCB0aGUgc25hcHNob3QgdmVyc2lvblxuICAgICAgICAgICAgLy8gbWlnaHQgaGF2ZSBjaGFuZ2VkKSBhbmQgcmVjb25jaWxlIHRoZWlyIHZpZXdzIHdpdGggdGhlIHBlcnNpc3RlZFxuICAgICAgICAgICAgLy8gc3RhdGUgKHRoZSBsaXN0IG9mIHN5bmNlZERvY3VtZW50cyBtYXkgaGF2ZSBnb3R0ZW4gb3V0IG9mIHN5bmMpLlxuICAgICAgICAgICAgZSA9IGF3YWl0IFZvKHMubG9jYWxTdG9yZSwgY24oblswXSkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gcy5pYy5nZXQodCksIG4gPSBhd2FpdCBiYyhzLCBlKTtcbiAgICAgICAgICAgICAgICBuLnNuYXBzaG90ICYmIHIucHVzaChuLnNuYXBzaG90KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciBxdWVyaWVzIHRoYXQgbmV2ZXIgZXhlY3V0ZWQgb24gdGhpcyBjbGllbnQsIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGFsbG9jYXRlIHRoZSB0YXJnZXQgaW4gTG9jYWxTdG9yZSBhbmQgaW5pdGlhbGl6ZSBhIG5ldyBWaWV3LlxuICAgICAgICAgICAgY29uc3QgbiA9IGF3YWl0IENvKHMubG9jYWxTdG9yZSwgdCk7XG4gICAgICAgICAgICBlID0gYXdhaXQgVm8ocy5sb2NhbFN0b3JlLCBuKSwgYXdhaXQgb2MocywgRGMobiksIHQsIFxuICAgICAgICAgICAgLypjdXJyZW50PSovICExLCBlLnJlc3VtZVRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBpLnB1c2goZSk7XG4gICAgfVxuICAgIHJldHVybiBzLnNjLnpvKHIpLCBpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBgUXVlcnlgIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgYFRhcmdldGAuIFRoZXJlIGlzIG5vIHdheSB0b1xuICogb2J0YWluIHRoZSBvcmlnaW5hbCBgUXVlcnlgLCBzbyB3ZSBzeW50aGVzaXplIGEgYFF1ZXJ5YCBmcm9tIHRoZSBgVGFyZ2V0YFxuICogb2JqZWN0LlxuICpcbiAqIFRoZSBzeW50aGVzaXplZCByZXN1bHQgbWlnaHQgYmUgZGlmZmVyZW50IGZyb20gdGhlIG9yaWdpbmFsIGBRdWVyeWAsIGJ1dFxuICogc2luY2UgdGhlIHN5bnRoZXNpemVkIGBRdWVyeWAgc2hvdWxkIHJldHVybiB0aGUgc2FtZSByZXN1bHRzIGFzIHRoZVxuICogb3JpZ2luYWwgb25lIChvbmx5IHRoZSBwcmVzZW50YXRpb24gb2YgcmVzdWx0cyBtaWdodCBkaWZmZXIpLCB0aGUgcG90ZW50aWFsXG4gKiBkaWZmZXJlbmNlIHdpbGwgbm90IGNhdXNlIGlzc3Vlcy5cbiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIERjKHQpIHtcbiAgICByZXR1cm4gdG4odC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5vcmRlckJ5LCB0LmZpbHRlcnMsIHQubGltaXQsIFwiRlwiIC8qIEZpcnN0ICovICwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbn1cblxuLyoqIFJldHVybnMgdGhlIElEcyBvZiB0aGUgY2xpZW50cyB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlLiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIENjKHQpIHtcbiAgICBjb25zdCBlID0gJCh0KTtcbiAgICByZXR1cm4gJCgkKGUubG9jYWxTdG9yZSkucGVyc2lzdGVuY2UpLnZpKCk7XG59XG5cbi8qKiBBcHBsaWVzIGEgcXVlcnkgdGFyZ2V0IGNoYW5nZSBmcm9tIGEgZGlmZmVyZW50IHRhYi4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiB4Yyh0LCBlLCBuLCBzKSB7XG4gICAgY29uc3QgaSA9ICQodCk7XG4gICAgaWYgKGkuZGMpIFxuICAgIC8vIElmIHdlIHJlY2VpdmUgYSB0YXJnZXQgc3RhdGUgbm90aWZpY2F0aW9uIHZpYSBXZWJTdG9yYWdlLCB3ZSBhcmVcbiAgICAvLyBlaXRoZXIgYWxyZWFkeSBzZWNvbmRhcnkgb3IgYW5vdGhlciB0YWIgaGFzIHRha2VuIHRoZSBwcmltYXJ5IGxlYXNlLlxuICAgIHJldHVybiB2b2lkIEMoXCJTeW5jRW5naW5lXCIsIFwiSWdub3JpbmcgdW5leHBlY3RlZCBxdWVyeSBzdGF0ZSBub3RpZmljYXRpb24uXCIpO1xuICAgIGNvbnN0IHIgPSBpLnJjLmdldChlKTtcbiAgICBpZiAociAmJiByLmxlbmd0aCA+IDApIHN3aXRjaCAobikge1xuICAgICAgY2FzZSBcImN1cnJlbnRcIjpcbiAgICAgIGNhc2UgXCJub3QtY3VycmVudFwiOlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ID0gYXdhaXQgeG8oaS5sb2NhbFN0b3JlLCBfbihyWzBdKSksIHMgPSB3cy5jcmVhdGVTeW50aGVzaXplZFJlbW90ZUV2ZW50Rm9yQ3VycmVudENoYW5nZShlLCBcImN1cnJlbnRcIiA9PT0gbiwgV3QuRU1QVFlfQllURV9TVFJJTkcpO1xuICAgICAgICAgICAgYXdhaXQgRWMoaSwgdCwgcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgYXdhaXQgU28oaS5sb2NhbFN0b3JlLCBlLCBcbiAgICAgICAgLyoga2VlcFBlcnNpc3RlZFRhcmdldERhdGEgKi8gITApLCBnYyhpLCBlLCBzKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIE8oKTtcbiAgICB9XG59XG5cbi8qKiBBZGRzIG9yIHJlbW92ZXMgV2F0Y2ggdGFyZ2V0cyBmb3IgcXVlcmllcyBmcm9tIGRpZmZlcmVudCB0YWJzLiAqLyBhc3luYyBmdW5jdGlvbiBOYyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IGtjKHQpO1xuICAgIGlmIChzLmRjKSB7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICBpZiAocy5yYy5oYXModCkpIHtcbiAgICAgICAgICAgICAgICAvLyBBIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gYWRkZWQgaW4gYSBwcmV2aW91cyBhdHRlbXB0XG4gICAgICAgICAgICAgICAgQyhcIlN5bmNFbmdpbmVcIiwgXCJBZGRpbmcgYW4gYWxyZWFkeSBhY3RpdmUgdGFyZ2V0IFwiICsgdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlID0gYXdhaXQgQ28ocy5sb2NhbFN0b3JlLCB0KSwgbiA9IGF3YWl0IFZvKHMubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgICAgICBhd2FpdCBvYyhzLCBEYyhlKSwgbi50YXJnZXRJZCwgXG4gICAgICAgICAgICAvKmN1cnJlbnQ9Ki8gITEsIG4ucmVzdW1lVG9rZW4pLCBodShzLnJlbW90ZVN0b3JlLCBuKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgbikgXG4gICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHRhcmdldCBpcyBzdGlsbCBhY3RpdmUgc2luY2UgdGhlIHRhcmdldCBtaWdodCBoYXZlIGJlZW5cbiAgICAgICAgLy8gcmVtb3ZlZCBpZiBpdCBoYXMgYmVlbiByZWplY3RlZCBieSB0aGUgYmFja2VuZC5cbiAgICAgICAgcy5yYy5oYXModCkgJiYgXG4gICAgICAgIC8vIFJlbGVhc2UgcXVlcmllcyB0aGF0IGFyZSBzdGlsbCBhY3RpdmUuXG4gICAgICAgIGF3YWl0IFNvKHMubG9jYWxTdG9yZSwgdCwgXG4gICAgICAgIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICExKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICBsdShzLnJlbW90ZVN0b3JlLCB0KSwgZ2MocywgdCk7XG4gICAgICAgIH0pKS5jYXRjaChFdCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBrYyh0KSB7XG4gICAgY29uc3QgZSA9ICQodCk7XG4gICAgcmV0dXJuIGUucmVtb3RlU3RvcmUucmVtb3RlU3luY2VyLmFwcGx5UmVtb3RlRXZlbnQgPSBhYy5iaW5kKG51bGwsIGUpLCBlLnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0ID0gUmMuYmluZChudWxsLCBlKSwgXG4gICAgZS5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIucmVqZWN0TGlzdGVuID0gbGMuYmluZChudWxsLCBlKSwgZS5zYy56byA9IFF1LmJpbmQobnVsbCwgZS5ldmVudE1hbmFnZXIpLCBcbiAgICBlLnNjLndjID0ganUuYmluZChudWxsLCBlLmV2ZW50TWFuYWdlciksIGU7XG59XG5cbmZ1bmN0aW9uIE9jKHQpIHtcbiAgICBjb25zdCBlID0gJCh0KTtcbiAgICByZXR1cm4gZS5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuYXBwbHlTdWNjZXNzZnVsV3JpdGUgPSBmYy5iaW5kKG51bGwsIGUpLCBlLnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5yZWplY3RGYWlsZWRXcml0ZSA9IGRjLmJpbmQobnVsbCwgZSksIFxuICAgIGU7XG59XG5cbi8qKlxuICogTG9hZHMgYSBGaXJlc3RvcmUgYnVuZGxlIGludG8gdGhlIFNESy4gVGhlIHJldHVybmVkIHByb21pc2UgcmVzb2x2ZXMgd2hlblxuICogdGhlIGJ1bmRsZSBmaW5pc2hlZCBsb2FkaW5nLlxuICpcbiAqIEBwYXJhbSBzeW5jRW5naW5lIC0gU3luY0VuZ2luZSB0byB1c2UuXG4gKiBAcGFyYW0gYnVuZGxlUmVhZGVyIC0gQnVuZGxlIHRvIGxvYWQgaW50byB0aGUgU0RLLlxuICogQHBhcmFtIHRhc2sgLSBMb2FkQnVuZGxlVGFzayB1c2VkIHRvIHVwZGF0ZSB0aGUgbG9hZGluZyBwcm9ncmVzcyB0byBwdWJsaWMgQVBJLlxuICovIGZ1bmN0aW9uIE1jKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gJCh0KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIChcbiAgICAvKiogTG9hZHMgYSBidW5kbGUgYW5kIHJldHVybnMgdGhlIGxpc3Qgb2YgYWZmZWN0ZWQgY29sbGVjdGlvbiBncm91cHMuICovXG4gICAgYXN5bmMgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcyA9IGF3YWl0IGUuZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgICAgIGlmIChhd2FpdCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9ICQodCksIHMgPSBEcyhlLmNyZWF0ZVRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiaGFzTmV3ZXJCdW5kbGVcIiwgXCJyZWFkb25seVwiLCAodCA9PiBuLk5zLmdldEJ1bmRsZU1ldGFkYXRhKHQsIGUuaWQpKSkudGhlbigodCA9PiAhIXQgJiYgdC5jcmVhdGVUaW1lLmNvbXBhcmVUbyhzKSA+PSAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIFNhdmVzIHRoZSBnaXZlbiBgQnVuZGxlTWV0YWRhdGFgIHRvIGxvY2FsIHBlcnNpc3RlbmNlLlxuICovICh0LmxvY2FsU3RvcmUsIHMpKSByZXR1cm4gYXdhaXQgZS5jbG9zZSgpLCBuLl9jb21wbGV0ZVdpdGgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZTogXCJTdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50c0xvYWRlZDogdC50b3RhbERvY3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXNMb2FkZWQ6IHQudG90YWxCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxEb2N1bWVudHM6IHQudG90YWxEb2N1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQnl0ZXM6IHQudG90YWxCeXRlc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KHMpKSwgUHJvbWlzZS5yZXNvbHZlKG5ldyBTZXQpO1xuICAgICAgICAgICAgbi5fdXBkYXRlUHJvZ3Jlc3MoWHUocykpO1xuICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBZdShzLCB0LmxvY2FsU3RvcmUsIGUuSXQpO1xuICAgICAgICAgICAgbGV0IHIgPSBhd2FpdCBlLm1jKCk7XG4gICAgICAgICAgICBmb3IgKDtyOyApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gYXdhaXQgaS5GdShyKTtcbiAgICAgICAgICAgICAgICB0ICYmIG4uX3VwZGF0ZVByb2dyZXNzKHQpLCByID0gYXdhaXQgZS5tYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbyA9IGF3YWl0IGkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBFYyh0LCBvLkx1LCBcbiAgICAgICAgICAgIC8qIHJlbW90ZUV2ZW50ICovIHZvaWQgMCksIFxuICAgICAgICAgICAgLy8gU2F2ZSBtZXRhZGF0YSwgc28gbG9hZGluZyB0aGUgc2FtZSBidW5kbGUgd2lsbCBza2lwLlxuICAgICAgICAgICAgYXdhaXQgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU2F2ZSBidW5kbGVcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4gbi5Ocy5zYXZlQnVuZGxlTWV0YWRhdGEodCwgZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyBhIHByb21pc2Ugb2YgYSBgTmFtZWRRdWVyeWAgYXNzb2NpYXRlZCB3aXRoIGdpdmVuIHF1ZXJ5IG5hbWUuIFByb21pc2VcbiAqIHJlc29sdmVzIHRvIHVuZGVmaW5lZCBpZiBubyBwZXJzaXN0ZWQgZGF0YSBjYW4gYmUgZm91bmQuXG4gKi8gKHQubG9jYWxTdG9yZSwgcyksIG4uX2NvbXBsZXRlV2l0aChvLnByb2dyZXNzKSwgUHJvbWlzZS5yZXNvbHZlKG8uQnUpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gTihcIlN5bmNFbmdpbmVcIiwgYExvYWRpbmcgYnVuZGxlIGZhaWxlZCB3aXRoICR7dH1gKSwgbi5fZmFpbFdpdGgodCksIFByb21pc2UucmVzb2x2ZShuZXcgU2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKlxuICogUHJvdmlkZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciBGaXJlc3RvcmUgd2l0aCBpbi1tZW1vcnkgcGVyc2lzdGVuY2UuXG4gKiBVc2VzIEVhZ2VyR0MgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICovKShzLCBlLCBuKS50aGVuKCh0ID0+IHtcbiAgICAgICAgcy5zaGFyZWRDbGllbnRTdGF0ZS5ub3RpZnlCdW5kbGVMb2FkZWQodCk7XG4gICAgfSkpO1xufVxuXG5jbGFzcyBGYyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3luY2hyb25pemVUYWJzID0gITE7XG4gICAgfVxuICAgIGFzeW5jIGluaXRpYWxpemUodCkge1xuICAgICAgICB0aGlzLkl0ID0gWm8odC5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCksIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSB0aGlzLmdjKHQpLCB0aGlzLnBlcnNpc3RlbmNlID0gdGhpcy55Yyh0KSwgXG4gICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2Uuc3RhcnQoKSwgdGhpcy5sb2NhbFN0b3JlID0gdGhpcy5JYyh0KSwgdGhpcy5nY1NjaGVkdWxlciA9IHRoaXMuVGModCwgdGhpcy5sb2NhbFN0b3JlKSwgXG4gICAgICAgIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyID0gdGhpcy5FYyh0LCB0aGlzLmxvY2FsU3RvcmUpO1xuICAgIH1cbiAgICBUYyh0LCBlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBFYyh0LCBlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBJYyh0KSB7XG4gICAgICAgIHJldHVybiBUbyh0aGlzLnBlcnNpc3RlbmNlLCBuZXcgcG8sIHQuaW5pdGlhbFVzZXIsIHRoaXMuSXQpO1xuICAgIH1cbiAgICB5Yyh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgdW8oYW8uQnMsIHRoaXMuSXQpO1xuICAgIH1cbiAgICBnYyh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUW87XG4gICAgfVxuICAgIGFzeW5jIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5nY1NjaGVkdWxlciAmJiB0aGlzLmdjU2NoZWR1bGVyLnN0b3AoKSwgYXdhaXQgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5zaHV0ZG93bigpLCBcbiAgICAgICAgYXdhaXQgdGhpcy5wZXJzaXN0ZW5jZS5zaHV0ZG93bigpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhbGwgY29tcG9uZW50cyBuZWVkZWQgZm9yIEZpcmVzdG9yZSB3aXRoIEluZGV4ZWREQiBwZXJzaXN0ZW5jZS5cbiAqLyBjbGFzcyAkYyBleHRlbmRzIEZjIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuQWMgPSB0LCB0aGlzLmNhY2hlU2l6ZUJ5dGVzID0gZSwgdGhpcy5mb3JjZU93bmVyc2hpcCA9IG4sIHRoaXMuc3luY2hyb25pemVUYWJzID0gITE7XG4gICAgfVxuICAgIGFzeW5jIGluaXRpYWxpemUodCkge1xuICAgICAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplKHQpLCBhd2FpdCB0aGlzLkFjLmluaXRpYWxpemUodGhpcywgdCksIFxuICAgICAgICAvLyBFbnF1ZXVlIHdyaXRlcyBmcm9tIGEgcHJldmlvdXMgc2Vzc2lvblxuICAgICAgICBhd2FpdCBPYyh0aGlzLkFjLnN5bmNFbmdpbmUpLCBhd2FpdCBBdSh0aGlzLkFjLnJlbW90ZVN0b3JlKSwgXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBsaXN0ZW5lciwgc28gd2UgbWFrZSBzdXJlIHRvXG4gICAgICAgIC8vIHNldCBpdCBhZnRlciBsb2NhbFN0b3JlIC8gcmVtb3RlU3RvcmUgYXJlIHN0YXJ0ZWQuXG4gICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2UubGkoKCgpID0+ICh0aGlzLmdjU2NoZWR1bGVyICYmICF0aGlzLmdjU2NoZWR1bGVyLnN0YXJ0ZWQgJiYgdGhpcy5nY1NjaGVkdWxlci5zdGFydCgpLCBcbiAgICAgICAgdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIgJiYgIXRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0YXJ0ZWQgJiYgdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIuc3RhcnQoKSwgXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpKSkpO1xuICAgIH1cbiAgICBJYyh0KSB7XG4gICAgICAgIHJldHVybiBUbyh0aGlzLnBlcnNpc3RlbmNlLCBuZXcgcG8sIHQuaW5pdGlhbFVzZXIsIHRoaXMuSXQpO1xuICAgIH1cbiAgICBUYyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlLmdhcmJhZ2VDb2xsZWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgJHIobiwgdC5hc3luY1F1ZXVlLCBlKTtcbiAgICB9XG4gICAgRWModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IGt0KGUsIHRoaXMucGVyc2lzdGVuY2UpO1xuICAgICAgICByZXR1cm4gbmV3IE50KHQuYXN5bmNRdWV1ZSwgbik7XG4gICAgfVxuICAgIHljKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IGdvKHQuZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQsIHQuZGF0YWJhc2VJbmZvLnBlcnNpc3RlbmNlS2V5KSwgbiA9IHZvaWQgMCAhPT0gdGhpcy5jYWNoZVNpemVCeXRlcyA/IEFyLndpdGhDYWNoZVNpemUodGhpcy5jYWNoZVNpemVCeXRlcykgOiBBci5ERUZBVUxUO1xuICAgICAgICByZXR1cm4gbmV3IF9vKHRoaXMuc3luY2hyb25pemVUYWJzLCBlLCB0LmNsaWVudElkLCBuLCB0LmFzeW5jUXVldWUsIFlvKCksIFhvKCksIHRoaXMuSXQsIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUsICEhdGhpcy5mb3JjZU93bmVyc2hpcCk7XG4gICAgfVxuICAgIGdjKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRbztcbiAgICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciBGaXJlc3RvcmUgd2l0aCBtdWx0aS10YWIgSW5kZXhlZERCXG4gKiBwZXJzaXN0ZW5jZS5cbiAqXG4gKiBJbiB0aGUgbGVnYWN5IGNsaWVudCwgdGhpcyBwcm92aWRlciBpcyB1c2VkIHRvIHByb3ZpZGUgYm90aCBtdWx0aS10YWIgYW5kXG4gKiBub24tbXVsdGktdGFiIHBlcnNpc3RlbmNlIHNpbmNlIHdlIGNhbm5vdCB0ZWxsIGF0IGJ1aWxkIHRpbWUgd2hldGhlclxuICogYHN5bmNocm9uaXplVGFic2Agd2lsbCBiZSBlbmFibGVkLlxuICovIGNsYXNzIEJjIGV4dGVuZHMgJGMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgZSwgLyogZm9yY2VPd25lcnNoaXA9ICovICExKSwgdGhpcy5BYyA9IHQsIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSBlLCB0aGlzLnN5bmNocm9uaXplVGFicyA9ICEwO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKHQpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZSh0KTtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuQWMuc3luY0VuZ2luZTtcbiAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSBpbnN0YW5jZW9mIEdvICYmICh0aGlzLnNoYXJlZENsaWVudFN0YXRlLnN5bmNFbmdpbmUgPSB7XG4gICAgICAgICAgICBGcjogdmMuYmluZChudWxsLCBlKSxcbiAgICAgICAgICAgICRyOiB4Yy5iaW5kKG51bGwsIGUpLFxuICAgICAgICAgICAgQnI6IE5jLmJpbmQobnVsbCwgZSksXG4gICAgICAgICAgICB2aTogQ2MuYmluZChudWxsLCBlKSxcbiAgICAgICAgICAgIE1yOiBQYy5iaW5kKG51bGwsIGUpXG4gICAgICAgIH0sIGF3YWl0IHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc3RhcnQoKSksIFxuICAgICAgICAvLyBOT1RFOiBUaGlzIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgbGlzdGVuZXIsIHNvIHdlIG1ha2Ugc3VyZSB0b1xuICAgICAgICAvLyBzZXQgaXQgYWZ0ZXIgbG9jYWxTdG9yZSAvIHJlbW90ZVN0b3JlIGFyZSBzdGFydGVkLlxuICAgICAgICBhd2FpdCB0aGlzLnBlcnNpc3RlbmNlLmxpKChhc3luYyB0ID0+IHtcbiAgICAgICAgICAgIGF3YWl0IFZjKHRoaXMuQWMuc3luY0VuZ2luZSwgdCksIHRoaXMuZ2NTY2hlZHVsZXIgJiYgKHQgJiYgIXRoaXMuZ2NTY2hlZHVsZXIuc3RhcnRlZCA/IHRoaXMuZ2NTY2hlZHVsZXIuc3RhcnQoKSA6IHQgfHwgdGhpcy5nY1NjaGVkdWxlci5zdG9wKCkpLCBcbiAgICAgICAgICAgIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyICYmICh0ICYmICF0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlci5zdGFydGVkID8gdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIuc3RhcnQoKSA6IHQgfHwgdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIuc3RvcCgpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnYyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBZbygpO1xuICAgICAgICBpZiAoIUdvLkMoZSkpIHRocm93IG5ldyBMKEIuVU5JTVBMRU1FTlRFRCwgXCJJbmRleGVkREIgcGVyc2lzdGVuY2UgaXMgb25seSBhdmFpbGFibGUgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydCBMb2NhbFN0b3JhZ2UuXCIpO1xuICAgICAgICBjb25zdCBuID0gZ28odC5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCwgdC5kYXRhYmFzZUluZm8ucGVyc2lzdGVuY2VLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IEdvKGUsIHQuYXN5bmNRdWV1ZSwgbiwgdC5jbGllbnRJZCwgdC5pbml0aWFsVXNlcik7XG4gICAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuZCB3aXJlcyB0aGUgY29tcG9uZW50cyB0aGF0IGFyZSBuZWVkZWQgdG8gaW50ZXJmYWNlIHdpdGggdGhlXG4gKiBuZXR3b3JrLlxuICovIGNsYXNzIExjIHtcbiAgICBhc3luYyBpbml0aWFsaXplKHQsIGUpIHtcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlIHx8ICh0aGlzLmxvY2FsU3RvcmUgPSB0LmxvY2FsU3RvcmUsIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSB0LnNoYXJlZENsaWVudFN0YXRlLCBcbiAgICAgICAgdGhpcy5kYXRhc3RvcmUgPSB0aGlzLmNyZWF0ZURhdGFzdG9yZShlKSwgdGhpcy5yZW1vdGVTdG9yZSA9IHRoaXMuY3JlYXRlUmVtb3RlU3RvcmUoZSksIFxuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IHRoaXMuY3JlYXRlRXZlbnRNYW5hZ2VyKGUpLCB0aGlzLnN5bmNFbmdpbmUgPSB0aGlzLmNyZWF0ZVN5bmNFbmdpbmUoZSwgXG4gICAgICAgIC8qIHN0YXJ0QXNQcmltYXJ5PSovICF0LnN5bmNocm9uaXplVGFicyksIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUub25saW5lU3RhdGVIYW5kbGVyID0gdCA9PiBoYyh0aGlzLnN5bmNFbmdpbmUsIHQsIDEgLyogU2hhcmVkQ2xpZW50U3RhdGUgKi8pLCBcbiAgICAgICAgdGhpcy5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuaGFuZGxlQ3JlZGVudGlhbENoYW5nZSA9IEFjLmJpbmQobnVsbCwgdGhpcy5zeW5jRW5naW5lKSwgXG4gICAgICAgIGF3YWl0IE51KHRoaXMucmVtb3RlU3RvcmUsIHRoaXMuc3luY0VuZ2luZS5pc1ByaW1hcnlDbGllbnQpKTtcbiAgICB9XG4gICAgY3JlYXRlRXZlbnRNYW5hZ2VyKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBxdTtcbiAgICB9XG4gICAgY3JlYXRlRGF0YXN0b3JlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFpvKHQuZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQpLCBuID0gKHMgPSB0LmRhdGFiYXNlSW5mbywgbmV3IEpvKHMpKTtcbiAgICAgICAgdmFyIHM7XG4gICAgICAgIC8qKiBSZXR1cm4gdGhlIFBsYXRmb3JtLXNwZWNpZmljIGNvbm5lY3Rpdml0eSBtb25pdG9yLiAqLyAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaXUodCwgZSwgbiwgcyk7XG4gICAgICAgIH0odC5hdXRoQ3JlZGVudGlhbHMsIHQuYXBwQ2hlY2tDcmVkZW50aWFscywgbiwgZSk7XG4gICAgfVxuICAgIGNyZWF0ZVJlbW90ZVN0b3JlKHQpIHtcbiAgICAgICAgcmV0dXJuIGUgPSB0aGlzLmxvY2FsU3RvcmUsIG4gPSB0aGlzLmRhdGFzdG9yZSwgcyA9IHQuYXN5bmNRdWV1ZSwgaSA9IHQgPT4gaGModGhpcy5zeW5jRW5naW5lLCB0LCAwIC8qIFJlbW90ZVN0b3JlICovKSwgXG4gICAgICAgIHIgPSBXby5DKCkgPyBuZXcgV28gOiBuZXcgam8sIG5ldyB1dShlLCBuLCBzLCBpLCByKTtcbiAgICAgICAgdmFyIGUsIG4sIHMsIGksIHI7XG4gICAgICAgIC8qKiBSZS1lbmFibGVzIHRoZSBuZXR3b3JrLiBJZGVtcG90ZW50LiAqLyAgICB9XG4gICAgY3JlYXRlU3luY0VuZ2luZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNYW5hZ2VzIHN0YXRlIHN5bmNocm9uaXphdGlvbiBpbiBtdWx0aS10YWIgZW52aXJvbm1lbnRzLlxuICAgICAgICBzLCBpLCByLCBvKSB7XG4gICAgICAgICAgICBjb25zdCB1ID0gbmV3IGljKHQsIGUsIG4sIHMsIGksIHIpO1xuICAgICAgICAgICAgcmV0dXJuIG8gJiYgKHUuZGMgPSAhMCksIHU7XG4gICAgICAgIH0odGhpcy5sb2NhbFN0b3JlLCB0aGlzLnJlbW90ZVN0b3JlLCB0aGlzLmV2ZW50TWFuYWdlciwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSwgdC5pbml0aWFsVXNlciwgdC5tYXhDb25jdXJyZW50TGltYm9SZXNvbHV0aW9ucywgZSk7XG4gICAgfVxuICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSAkKHQpO1xuICAgICAgICAgICAgQyhcIlJlbW90ZVN0b3JlXCIsIFwiUmVtb3RlU3RvcmUgc2h1dHRpbmcgZG93bi5cIiksIGUud3UuYWRkKDUgLyogU2h1dGRvd24gKi8pLCBhd2FpdCBhdShlKSwgXG4gICAgICAgICAgICBlLmd1LnNodXRkb3duKCksIFxuICAgICAgICAgICAgLy8gU2V0IHRoZSBPbmxpbmVTdGF0ZSB0byBVbmtub3duIChyYXRoZXIgdGhhbiBPZmZsaW5lKSB0byBhdm9pZCBwb3RlbnRpYWxseVxuICAgICAgICAgICAgLy8gdHJpZ2dlcmluZyBzcHVyaW91cyBsaXN0ZW5lciBldmVudHMgd2l0aCBjYWNoZWQgZGF0YSwgZXRjLlxuICAgICAgICAgICAgZS55dS5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyk7XG4gICAgICAgIH0odGhpcy5yZW1vdGVTdG9yZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiBVYyh0LCBlLCBuKSB7XG4gICAgaWYgKCFuKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBGdW5jdGlvbiAke3R9KCkgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5ICR7ZX0uYCk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgdHdvIGJvb2xlYW4gb3B0aW9ucyBhcmUgbm90IHNldCBhdCB0aGUgc2FtZSB0aW1lLlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gcWModCwgZSwgbiwgcykge1xuICAgIGlmICghMCA9PT0gZSAmJiAhMCA9PT0gcykgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgJHt0fSBhbmQgJHtufSBjYW5ub3QgYmUgdXNlZCB0b2dldGhlci5gKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBgcGF0aGAgcmVmZXJzIHRvIGEgZG9jdW1lbnQgKGluZGljYXRlZCBieSB0aGUgZmFjdCBpdCBjb250YWluc1xuICogYW4gZXZlbiBudW1iZXJzIG9mIHNlZ21lbnRzKS5cbiAqLyBmdW5jdGlvbiBLYyh0KSB7XG4gICAgaWYgKCFjdC5pc0RvY3VtZW50S2V5KHQpKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIGRvY3VtZW50IHJlZmVyZW5jZS4gRG9jdW1lbnQgcmVmZXJlbmNlcyBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgb2Ygc2VnbWVudHMsIGJ1dCAke3R9IGhhcyAke3QubGVuZ3RofS5gKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBgcGF0aGAgcmVmZXJzIHRvIGEgY29sbGVjdGlvbiAoaW5kaWNhdGVkIGJ5IHRoZSBmYWN0IGl0XG4gKiBjb250YWlucyBhbiBvZGQgbnVtYmVycyBvZiBzZWdtZW50cykuXG4gKi8gZnVuY3Rpb24gR2ModCkge1xuICAgIGlmIChjdC5pc0RvY3VtZW50S2V5KHQpKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIGNvbGxlY3Rpb24gcmVmZXJlbmNlLiBDb2xsZWN0aW9uIHJlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMsIGJ1dCAke3R9IGhhcyAke3QubGVuZ3RofS5gKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgaXQncyBhIG5vbi1udWxsIG9iamVjdCB3aXRob3V0IGEgY3VzdG9tIHByb3RvdHlwZVxuICogKGkuZS4gZXhjbHVkZXMgQXJyYXksIERhdGUsIGV0Yy4pLlxuICovXG4vKiogUmV0dXJucyBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSB0eXBlIC8gdmFsdWUgb2YgdGhlIHByb3ZpZGVkIGlucHV0LiAqL1xuZnVuY3Rpb24gUWModCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gXCJudWxsXCI7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0Lmxlbmd0aCA+IDIwICYmICh0ID0gYCR7dC5zdWJzdHJpbmcoMCwgMjApfS4uLmApLCBcbiAgICBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgdCkgcmV0dXJuIFwiXCIgKyB0O1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiB0KSB7XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgQXJyYXkpIHJldHVybiBcImFuIGFycmF5XCI7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBcbiAgICAgICAgICAgIC8qKiB0cnkgdG8gZ2V0IHRoZSBjb25zdHJ1Y3RvciBuYW1lIGZvciBhbiBvYmplY3QuICovXG4gICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQuY29uc3RydWN0b3IpIHJldHVybiB0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIENhc3RzIGBvYmpgIHRvIGBUYCwgb3B0aW9uYWxseSB1bndyYXBwaW5nIENvbXBhdCB0eXBlcyB0byBleHBvc2UgdGhlXG4gKiB1bmRlcmx5aW5nIGluc3RhbmNlLiBUaHJvd3MgaWYgIGBvYmpgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBgVGAuXG4gKlxuICogVGhpcyBjYXN0IGlzIHVzZWQgaW4gdGhlIExpdGUgYW5kIEZ1bGwgU0RLIHRvIHZlcmlmeSBpbnN0YW5jZSB0eXBlcyBmb3JcbiAqIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHB1YmxpYyBBUEkuXG4gKiBAaW50ZXJuYWxcbiAqLyAodCk7XG4gICAgICAgICAgICByZXR1cm4gZSA/IGBhIGN1c3RvbSAke2V9IG9iamVjdGAgOiBcImFuIG9iamVjdFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgPyBcImEgZnVuY3Rpb25cIiA6IE8oKTtcbn1cblxuZnVuY3Rpb24gamModCwgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZSkge1xuICAgIGlmIChcIl9kZWxlZ2F0ZVwiIGluIHQgJiYgKFxuICAgIC8vIFVud3JhcCBDb21wYXQgdHlwZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHQgPSB0Ll9kZWxlZ2F0ZSksICEodCBpbnN0YW5jZW9mIGUpKSB7XG4gICAgICAgIGlmIChlLm5hbWUgPT09IHQuY29uc3RydWN0b3IubmFtZSkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcIlR5cGUgZG9lcyBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIGluc3RhbmNlLiBEaWQgeW91IHBhc3MgYSByZWZlcmVuY2UgZnJvbSBhIGRpZmZlcmVudCBGaXJlc3RvcmUgU0RLP1wiKTtcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgbiA9IFFjKHQpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgRXhwZWN0ZWQgdHlwZSAnJHtlLm5hbWV9JywgYnV0IGl0IHdhczogJHtufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBXYyh0LCBlKSB7XG4gICAgaWYgKGUgPD0gMCkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgRnVuY3Rpb24gJHt0fSgpIHJlcXVpcmVzIGEgcG9zaXRpdmUgbnVtYmVyLCBidXQgaXQgd2FzOiAke2V9LmApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCB6YyA9IG5ldyBNYXA7XG5cbi8qKlxuICogQW4gaW5zdGFuY2UgbWFwIHRoYXQgZW5zdXJlcyBvbmx5IG9uZSBEYXRhc3RvcmUgZXhpc3RzIHBlciBGaXJlc3RvcmVcbiAqIGluc3RhbmNlLlxuICovXG4vKipcbiAqIEEgY29uY3JldGUgdHlwZSBkZXNjcmliaW5nIGFsbCB0aGUgdmFsdWVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdmlhIGFcbiAqIHVzZXItc3VwcGxpZWQgYEZpcmVzdG9yZVNldHRpbmdzYCBvYmplY3QuIFRoaXMgaXMgYSBzZXBhcmF0ZSB0eXBlIHNvIHRoYXRcbiAqIGRlZmF1bHRzIGNhbiBiZSBzdXBwbGllZCBhbmQgdGhlIHZhbHVlIGNhbiBiZSBjaGVja2VkIGZvciBlcXVhbGl0eS5cbiAqL1xuY2xhc3MgSGMge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQuaG9zdCkge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdC5zc2wpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJDYW4ndCBwcm92aWRlIHNzbCBvcHRpb24gaWYgaG9zdCBvcHRpb24gaXMgbm90IHNldFwiKTtcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IFwiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tXCIsIHRoaXMuc3NsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHRoaXMuaG9zdCA9IHQuaG9zdCwgdGhpcy5zc2wgPSBudWxsID09PSAoZSA9IHQuc3NsKSB8fCB2b2lkIDAgPT09IGUgfHwgZTtcbiAgICAgICAgaWYgKHRoaXMuY3JlZGVudGlhbHMgPSB0LmNyZWRlbnRpYWxzLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSAhIXQuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgXG4gICAgICAgIHZvaWQgMCA9PT0gdC5jYWNoZVNpemVCeXRlcykgdGhpcy5jYWNoZVNpemVCeXRlcyA9IDQxOTQzMDQwOyBlbHNlIHtcbiAgICAgICAgICAgIGlmICgtMSAhPT0gdC5jYWNoZVNpemVCeXRlcyAmJiB0LmNhY2hlU2l6ZUJ5dGVzIDwgMTA0ODU3NikgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcImNhY2hlU2l6ZUJ5dGVzIG11c3QgYmUgYXQgbGVhc3QgMTA0ODU3NlwiKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSB0LmNhY2hlU2l6ZUJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyA9ICEhdC5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nLCB0aGlzLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyA9ICEhdC5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcsIFxuICAgICAgICB0aGlzLnVzZUZldGNoU3RyZWFtcyA9ICEhdC51c2VGZXRjaFN0cmVhbXMsIHFjKFwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZ1wiLCB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcsIFwiZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nXCIsIHQuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QgPT09IHQuaG9zdCAmJiB0aGlzLnNzbCA9PT0gdC5zc2wgJiYgdGhpcy5jcmVkZW50aWFscyA9PT0gdC5jcmVkZW50aWFscyAmJiB0aGlzLmNhY2hlU2l6ZUJ5dGVzID09PSB0LmNhY2hlU2l6ZUJ5dGVzICYmIHRoaXMuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyA9PT0gdC5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nICYmIHRoaXMuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nID09PSB0LmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyAmJiB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPT09IHQuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyAmJiB0aGlzLnVzZUZldGNoU3RyZWFtcyA9PT0gdC51c2VGZXRjaFN0cmVhbXM7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKi8gY2xhc3MgSmMge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLl9hdXRoQ3JlZGVudGlhbHMgPSB0LCB0aGlzLl9hcHBDaGVja0NyZWRlbnRpYWxzID0gZSwgdGhpcy5fZGF0YWJhc2VJZCA9IG4sIFxuICAgICAgICB0aGlzLl9hcHAgPSBzLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgaXQncyBhIEZpcmVzdG9yZSBvciBGaXJlc3RvcmUgTGl0ZSBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZmlyZXN0b3JlLWxpdGVcIiwgdGhpcy5fcGVyc2lzdGVuY2VLZXkgPSBcIihsaXRlKVwiLCB0aGlzLl9zZXR0aW5ncyA9IG5ldyBIYyh7fSksIFxuICAgICAgICB0aGlzLl9zZXR0aW5nc0Zyb3plbiA9ICExO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGBGaXJlc3RvcmVgIHNlcnZpY2VcbiAgICAgKiBpbnN0YW5jZS5cbiAgICAgKi8gICAgZ2V0IGFwcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hcHApIHRocm93IG5ldyBMKEIuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgd2FzIG5vdCBpbml0aWFsaXplZCB1c2luZyB0aGUgRmlyZWJhc2UgU0RLLiAnYXBwJyBpcyBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwO1xuICAgIH1cbiAgICBnZXQgX2luaXRpYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3NGcm96ZW47XG4gICAgfVxuICAgIGdldCBfdGVybWluYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5fdGVybWluYXRlVGFzaztcbiAgICB9XG4gICAgX3NldFNldHRpbmdzKHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzRnJvemVuKSB0aHJvdyBuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBhbmQgaXRzIHNldHRpbmdzIGNhbiBubyBsb25nZXIgYmUgY2hhbmdlZC4gWW91IGNhbiBvbmx5IG1vZGlmeSBzZXR0aW5ncyBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgbWV0aG9kcyBvbiBhIEZpcmVzdG9yZSBvYmplY3QuXCIpO1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IG5ldyBIYyh0KSwgdm9pZCAwICE9PSB0LmNyZWRlbnRpYWxzICYmICh0aGlzLl9hdXRoQ3JlZGVudGlhbHMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAoIXQpIHJldHVybiBuZXcgSztcbiAgICAgICAgICAgIHN3aXRjaCAodC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJnYXBpXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY2xpZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVyhlLCB0LnNlc3Npb25JbmRleCB8fCBcIjBcIiwgdC5pYW1Ub2tlbiB8fCBudWxsLCB0LmF1dGhUb2tlbkZhY3RvcnkgfHwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInByb3ZpZGVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuY2xpZW50O1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcIm1ha2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlciBmYWlsZWQgZHVlIHRvIGludmFsaWQgY3JlZGVudGlhbCB0eXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KHQuY3JlZGVudGlhbHMpKTtcbiAgICB9XG4gICAgX2dldFNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG4gICAgfVxuICAgIF9mcmVlemVTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzRnJvemVuID0gITAsIHRoaXMuX3NldHRpbmdzO1xuICAgIH1cbiAgICBfZGVsZXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVybWluYXRlVGFzayB8fCAodGhpcy5fdGVybWluYXRlVGFzayA9IHRoaXMuX3Rlcm1pbmF0ZSgpKSwgdGhpcy5fdGVybWluYXRlVGFzaztcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGBGaXJlc3RvcmVgIGluc3RhbmNlLiAqLyAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhcHA6IHRoaXMuX2FwcCxcbiAgICAgICAgICAgIGRhdGFiYXNlSWQ6IHRoaXMuX2RhdGFiYXNlSWQsXG4gICAgICAgICAgICBzZXR0aW5nczogdGhpcy5fc2V0dGluZ3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVybWluYXRlcyBhbGwgY29tcG9uZW50cyB1c2VkIGJ5IHRoaXMgY2xpZW50LiBTdWJjbGFzc2VzIGNhbiBvdmVycmlkZVxuICAgICAqIHRoaXMgbWV0aG9kIHRvIGNsZWFuIHVwIHRoZWlyIG93biBkZXBlbmRlbmNpZXMsIGJ1dCBtdXN0IGFsc28gY2FsbCB0aGlzXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogT25seSBldmVyIGNhbGxlZCBvbmNlLlxuICAgICAqLyAgICBfdGVybWluYXRlKCkge1xuICAgICAgICAvKipcbiAqIFJlbW92ZXMgYWxsIGNvbXBvbmVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBpbnN0YW5jZS4gTXVzdCBiZSBjYWxsZWRcbiAqIHdoZW4gdGhlIGBGaXJlc3RvcmVgIGluc3RhbmNlIGlzIHRlcm1pbmF0ZWQuXG4gKi9cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB6Yy5nZXQodCk7XG4gICAgICAgICAgICBlICYmIChDKFwiQ29tcG9uZW50UHJvdmlkZXJcIiwgXCJSZW1vdmluZyBEYXRhc3RvcmVcIiksIHpjLmRlbGV0ZSh0KSwgZS50ZXJtaW5hdGUoKSk7XG4gICAgICAgIH0odGhpcyksIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNb2RpZnkgdGhpcyBpbnN0YW5jZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBDbG91ZCBGaXJlc3RvcmUgZW11bGF0b3IuXG4gKlxuICogTm90ZTogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgdGhpcyBpbnN0YW5jZSBoYXMgYmVlbiB1c2VkIHRvIGRvIGFueVxuICogb3BlcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIGBGaXJlc3RvcmVgIGluc3RhbmNlIHRvIGNvbmZpZ3VyZSB0byBjb25uZWN0IHRvIHRoZVxuICogZW11bGF0b3IuXG4gKiBAcGFyYW0gaG9zdCAtIHRoZSBlbXVsYXRvciBob3N0IChleDogbG9jYWxob3N0KS5cbiAqIEBwYXJhbSBwb3J0IC0gdGhlIGVtdWxhdG9yIHBvcnQgKGV4OiA5MDAwKS5cbiAqIEBwYXJhbSBvcHRpb25zLm1vY2tVc2VyVG9rZW4gLSB0aGUgbW9jayBhdXRoIHRva2VuIHRvIHVzZSBmb3IgdW5pdCB0ZXN0aW5nXG4gKiBTZWN1cml0eSBSdWxlcy5cbiAqLyBmdW5jdGlvbiBZYyh0LCBlLCBuLCBzID0ge30pIHtcbiAgICB2YXIgaTtcbiAgICBjb25zdCByID0gKHQgPSBqYyh0LCBKYykpLl9nZXRTZXR0aW5ncygpO1xuICAgIGlmIChcImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbVwiICE9PSByLmhvc3QgJiYgci5ob3N0ICE9PSBlICYmIE4oXCJIb3N0IGhhcyBiZWVuIHNldCBpbiBib3RoIHNldHRpbmdzKCkgYW5kIHVzZUVtdWxhdG9yKCksIGVtdWxhdG9yIGhvc3Qgd2lsbCBiZSB1c2VkXCIpLCBcbiAgICB0Ll9zZXRTZXR0aW5ncyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHIpLCB7XG4gICAgICAgIGhvc3Q6IGAke2V9OiR7bn1gLFxuICAgICAgICBzc2w6ICExXG4gICAgfSkpLCBzLm1vY2tVc2VyVG9rZW4pIHtcbiAgICAgICAgbGV0IGUsIG47XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzLm1vY2tVc2VyVG9rZW4pIGUgPSBzLm1vY2tVc2VyVG9rZW4sIG4gPSBQLk1PQ0tfVVNFUjsgZWxzZSB7XG4gICAgICAgICAgICAvLyBMZXQgY3JlYXRlTW9ja1VzZXJUb2tlbiB2YWxpZGF0ZSBmaXJzdCAoY2F0Y2hlcyBjb21tb24gbWlzdGFrZXMgbGlrZVxuICAgICAgICAgICAgLy8gaW52YWxpZCBmaWVsZCBcInVpZFwiIGFuZCBtaXNzaW5nIGZpZWxkIFwic3ViXCIgLyBcInVzZXJfaWRcIi4pXG4gICAgICAgICAgICBlID0gY3JlYXRlTW9ja1VzZXJUb2tlbihzLm1vY2tVc2VyVG9rZW4sIG51bGwgPT09IChpID0gdC5fYXBwKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLm9wdGlvbnMucHJvamVjdElkKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBzLm1vY2tVc2VyVG9rZW4uc3ViIHx8IHMubW9ja1VzZXJUb2tlbi51c2VyX2lkO1xuICAgICAgICAgICAgaWYgKCFyKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwibW9ja1VzZXJUb2tlbiBtdXN0IGNvbnRhaW4gJ3N1Yicgb3IgJ3VzZXJfaWQnIGZpZWxkIVwiKTtcbiAgICAgICAgICAgIG4gPSBuZXcgUChyKTtcbiAgICAgICAgfVxuICAgICAgICB0Ll9hdXRoQ3JlZGVudGlhbHMgPSBuZXcgRyhuZXcgcShlLCBuKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGBEb2N1bWVudFJlZmVyZW5jZWAgcmVmZXJzIHRvIGEgZG9jdW1lbnQgbG9jYXRpb24gaW4gYSBGaXJlc3RvcmUgZGF0YWJhc2VcbiAqIGFuZCBjYW4gYmUgdXNlZCB0byB3cml0ZSwgcmVhZCwgb3IgbGlzdGVuIHRvIHRoZSBsb2NhdGlvbi4gVGhlIGRvY3VtZW50IGF0XG4gKiB0aGUgcmVmZXJlbmNlZCBsb2NhdGlvbiBtYXkgb3IgbWF5IG5vdCBleGlzdC5cbiAqLyBjbGFzcyBYYyB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBcbiAgICAvKipcbiAgICAgKiBJZiBwcm92aWRlZCwgdGhlIGBGaXJlc3RvcmVEYXRhQ29udmVydGVyYCBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBlLCBuKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyID0gZSwgdGhpcy5fa2V5ID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIEZpcmVzdG9yZSByZWZlcmVuY2UuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZG9jdW1lbnRcIiwgdGhpcy5maXJlc3RvcmUgPSB0O1xuICAgIH1cbiAgICBnZXQgX3BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkucGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50J3MgaWRlbnRpZmllciB3aXRoaW4gaXRzIGNvbGxlY3Rpb24uXG4gICAgICovICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmxhc3RTZWdtZW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGF0aCBvZiB0aGUgcmVmZXJlbmNlZCBkb2N1bWVudCAocmVsYXRpdmVcbiAgICAgKiB0byB0aGUgcm9vdCBvZiB0aGUgZGF0YWJhc2UpLlxuICAgICAqLyAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29sbGVjdGlvbiB0aGlzIGBEb2N1bWVudFJlZmVyZW5jZWAgYmVsb25ncyB0by5cbiAgICAgKi8gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0YSh0aGlzLmZpcmVzdG9yZSwgdGhpcy5jb252ZXJ0ZXIsIHRoaXMuX2tleS5wYXRoLnBvcExhc3QoKSk7XG4gICAgfVxuICAgIHdpdGhDb252ZXJ0ZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IFhjKHRoaXMuZmlyZXN0b3JlLCB0LCB0aGlzLl9rZXkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBRdWVyeWAgcmVmZXJzIHRvIGEgcXVlcnkgd2hpY2ggeW91IGNhbiByZWFkIG9yIGxpc3RlbiB0by4gWW91IGNhbiBhbHNvXG4gKiBjb25zdHJ1Y3QgcmVmaW5lZCBgUXVlcnlgIG9iamVjdHMgYnkgYWRkaW5nIGZpbHRlcnMgYW5kIG9yZGVyaW5nLlxuICovIGNsYXNzIFpjIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBsaXRlIHZlcnNpb24gb2YgdGhlIFF1ZXJ5IGNsYXNzIGluIHRoZSBtYWluIFNESy5cbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciBwcm90ZWN0ZWQgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBcbiAgICAvKipcbiAgICAgKiBJZiBwcm92aWRlZCwgdGhlIGBGaXJlc3RvcmVEYXRhQ29udmVydGVyYCBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBlLCBuKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyID0gZSwgdGhpcy5fcXVlcnkgPSBuLCBcbiAgICAgICAgLyoqIFRoZSB0eXBlIG9mIHRoaXMgRmlyZXN0b3JlIHJlZmVyZW5jZS4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJxdWVyeVwiLCB0aGlzLmZpcmVzdG9yZSA9IHQ7XG4gICAgfVxuICAgIHdpdGhDb252ZXJ0ZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IFpjKHRoaXMuZmlyZXN0b3JlLCB0LCB0aGlzLl9xdWVyeSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYENvbGxlY3Rpb25SZWZlcmVuY2VgIG9iamVjdCBjYW4gYmUgdXNlZCBmb3IgYWRkaW5nIGRvY3VtZW50cywgZ2V0dGluZ1xuICogZG9jdW1lbnQgcmVmZXJlbmNlcywgYW5kIHF1ZXJ5aW5nIGZvciBkb2N1bWVudHMgKHVzaW5nIHtAbGluayBxdWVyeX0pLlxuICovIGNsYXNzIHRhIGV4dGVuZHMgWmMge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBzdXBlcih0LCBlLCBlbihuKSksIHRoaXMuX3BhdGggPSBuLCBcbiAgICAgICAgLyoqIFRoZSB0eXBlIG9mIHRoaXMgRmlyZXN0b3JlIHJlZmVyZW5jZS4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJjb2xsZWN0aW9uXCI7XG4gICAgfVxuICAgIC8qKiBUaGUgY29sbGVjdGlvbidzIGlkZW50aWZpZXIuICovICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LnBhdGgubGFzdFNlZ21lbnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSByZWZlcmVuY2VkIGNvbGxlY3Rpb24gKHJlbGF0aXZlXG4gICAgICogdG8gdGhlIHJvb3Qgb2YgdGhlIGRhdGFiYXNlKS5cbiAgICAgKi8gICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY29udGFpbmluZyBgRG9jdW1lbnRSZWZlcmVuY2VgIGlmIHRoaXMgaXMgYVxuICAgICAqIHN1YmNvbGxlY3Rpb24uIElmIHRoaXMgaXNuJ3QgYSBzdWJjb2xsZWN0aW9uLCB0aGUgcmVmZXJlbmNlIGlzIG51bGwuXG4gICAgICovICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLl9wYXRoLnBvcExhc3QoKTtcbiAgICAgICAgcmV0dXJuIHQuaXNFbXB0eSgpID8gbnVsbCA6IG5ldyBYYyh0aGlzLmZpcmVzdG9yZSwgXG4gICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgbmV3IGN0KHQpKTtcbiAgICB9XG4gICAgd2l0aENvbnZlcnRlcih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgdGEodGhpcy5maXJlc3RvcmUsIHQsIHRoaXMuX3BhdGgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWEodCwgZSwgLi4ubikge1xuICAgIGlmICh0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpLCBVYyhcImNvbGxlY3Rpb25cIiwgXCJwYXRoXCIsIGUpLCB0IGluc3RhbmNlb2YgSmMpIHtcbiAgICAgICAgY29uc3QgcyA9IHJ0LmZyb21TdHJpbmcoZSwgLi4ubik7XG4gICAgICAgIHJldHVybiBHYyhzKSwgbmV3IHRhKHQsIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgcyk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIFhjIHx8IHQgaW5zdGFuY2VvZiB0YSkpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBjb2xsZWN0aW9uKCkgdG8gYmUgYSBDb2xsZWN0aW9uUmVmZXJlbmNlLCBhIERvY3VtZW50UmVmZXJlbmNlIG9yIEZpcmViYXNlRmlyZXN0b3JlXCIpO1xuICAgICAgICBjb25zdCBzID0gdC5fcGF0aC5jaGlsZChydC5mcm9tU3RyaW5nKGUsIC4uLm4pKTtcbiAgICAgICAgcmV0dXJuIEdjKHMpLCBuZXcgdGEodC5maXJlc3RvcmUsIFxuICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIHMpO1xuICAgIH1cbn1cblxuLy8gVE9ETyhmaXJlc3RvcmVsaXRlKTogQ29uc2lkZXIgdXNpbmcgRXJyb3JGYWN0b3J5IC1cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvYmxvYi8wMTMxZTFmL3BhY2thZ2VzL3V0aWwvc3JjL2Vycm9ycy50cyNMMTA2XG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYFF1ZXJ5YCBpbnN0YW5jZSB0aGF0IGluY2x1ZGVzIGFsbCBkb2N1bWVudHMgaW4gdGhlXG4gKiBkYXRhYmFzZSB0aGF0IGFyZSBjb250YWluZWQgaW4gYSBjb2xsZWN0aW9uIG9yIHN1YmNvbGxlY3Rpb24gd2l0aCB0aGVcbiAqIGdpdmVuIGBjb2xsZWN0aW9uSWRgLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBgRmlyZXN0b3JlYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBjb2xsZWN0aW9uSWQgLSBJZGVudGlmaWVzIHRoZSBjb2xsZWN0aW9ucyB0byBxdWVyeSBvdmVyLiBFdmVyeVxuICogY29sbGVjdGlvbiBvciBzdWJjb2xsZWN0aW9uIHdpdGggdGhpcyBJRCBhcyB0aGUgbGFzdCBzZWdtZW50IG9mIGl0cyBwYXRoXG4gKiB3aWxsIGJlIGluY2x1ZGVkLiBDYW5ub3QgY29udGFpbiBhIHNsYXNoLlxuICogQHJldHVybnMgVGhlIGNyZWF0ZWQgYFF1ZXJ5YC5cbiAqLyBmdW5jdGlvbiBuYSh0LCBlKSB7XG4gICAgaWYgKHQgPSBqYyh0LCBKYyksIFVjKFwiY29sbGVjdGlvbkdyb3VwXCIsIFwiY29sbGVjdGlvbiBpZFwiLCBlKSwgZS5pbmRleE9mKFwiL1wiKSA+PSAwKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIGNvbGxlY3Rpb24gSUQgJyR7ZX0nIHBhc3NlZCB0byBmdW5jdGlvbiBjb2xsZWN0aW9uR3JvdXAoKS4gQ29sbGVjdGlvbiBJRHMgbXVzdCBub3QgY29udGFpbiAnLycuYCk7XG4gICAgcmV0dXJuIG5ldyBaYyh0LCBcbiAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIFxuICAgIC8qKlxuICogQ3JlYXRlcyBhIG5ldyBRdWVyeSBmb3IgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzXG4gKiB3aXRoaW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gZ3JvdXAuXG4gKi9cbiAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgWmUocnQuZW1wdHlQYXRoKCksIHQpO1xuICAgIH0oZSkpO1xufVxuXG5mdW5jdGlvbiBzYSh0LCBlLCAuLi5uKSB7XG4gICAgaWYgKHQgPSBnZXRNb2R1bGFySW5zdGFuY2UodCksIFxuICAgIC8vIFdlIGFsbG93IG9taXNzaW9uIG9mICdwYXRoU3RyaW5nJyBidXQgZXhwbGljaXRseSBwcm9oaWJpdCBwYXNzaW5nIGluIGJvdGhcbiAgICAvLyAndW5kZWZpbmVkJyBhbmQgJ251bGwnLlxuICAgIDEgPT09IGFyZ3VtZW50cy5sZW5ndGggJiYgKGUgPSBYLlIoKSksIFVjKFwiZG9jXCIsIFwicGF0aFwiLCBlKSwgdCBpbnN0YW5jZW9mIEpjKSB7XG4gICAgICAgIGNvbnN0IHMgPSBydC5mcm9tU3RyaW5nKGUsIC4uLm4pO1xuICAgICAgICByZXR1cm4gS2MocyksIG5ldyBYYyh0LCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsLCBuZXcgY3QocykpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiBYYyB8fCB0IGluc3RhbmNlb2YgdGEpKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gY29sbGVjdGlvbigpIHRvIGJlIGEgQ29sbGVjdGlvblJlZmVyZW5jZSwgYSBEb2N1bWVudFJlZmVyZW5jZSBvciBGaXJlYmFzZUZpcmVzdG9yZVwiKTtcbiAgICAgICAgY29uc3QgcyA9IHQuX3BhdGguY2hpbGQocnQuZnJvbVN0cmluZyhlLCAuLi5uKSk7XG4gICAgICAgIHJldHVybiBLYyhzKSwgbmV3IFhjKHQuZmlyZXN0b3JlLCB0IGluc3RhbmNlb2YgdGEgPyB0LmNvbnZlcnRlciA6IG51bGwsIG5ldyBjdChzKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgcmVmZXJlbmNlcyBhcmUgZXF1YWwuXG4gKlxuICogQHBhcmFtIGxlZnQgLSBBIHJlZmVyZW5jZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IC0gQSByZWZlcmVuY2UgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJlZmVyZW5jZXMgcG9pbnQgdG8gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIHNhbWVcbiAqIEZpcmVzdG9yZSBkYXRhYmFzZS5cbiAqLyBmdW5jdGlvbiBpYSh0LCBlKSB7XG4gICAgcmV0dXJuIHQgPSBnZXRNb2R1bGFySW5zdGFuY2UodCksIGUgPSBnZXRNb2R1bGFySW5zdGFuY2UoZSksICh0IGluc3RhbmNlb2YgWGMgfHwgdCBpbnN0YW5jZW9mIHRhKSAmJiAoZSBpbnN0YW5jZW9mIFhjIHx8IGUgaW5zdGFuY2VvZiB0YSkgJiYgKHQuZmlyZXN0b3JlID09PSBlLmZpcmVzdG9yZSAmJiB0LnBhdGggPT09IGUucGF0aCAmJiB0LmNvbnZlcnRlciA9PT0gZS5jb252ZXJ0ZXIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgcXVlcmllcyBwb2ludCB0byB0aGUgc2FtZSBjb2xsZWN0aW9uIGFuZCBhcHBseVxuICogdGhlIHNhbWUgY29uc3RyYWludHMuXG4gKlxuICogQHBhcmFtIGxlZnQgLSBBIGBRdWVyeWAgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSByaWdodCAtIEEgYFF1ZXJ5YCB0byBjb21wYXJlLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlcyBwb2ludCB0byB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgc2FtZVxuICogRmlyZXN0b3JlIGRhdGFiYXNlLlxuICovIGZ1bmN0aW9uIHJhKHQsIGUpIHtcbiAgICByZXR1cm4gdCA9IGdldE1vZHVsYXJJbnN0YW5jZSh0KSwgZSA9IGdldE1vZHVsYXJJbnN0YW5jZShlKSwgdCBpbnN0YW5jZW9mIFpjICYmIGUgaW5zdGFuY2VvZiBaYyAmJiAodC5maXJlc3RvcmUgPT09IGUuZmlyZXN0b3JlICYmIGhuKHQuX3F1ZXJ5LCBlLl9xdWVyeSkgJiYgdC5jb252ZXJ0ZXIgPT09IGUuY29udmVydGVyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogSG93IG1hbnkgYnl0ZXMgdG8gcmVhZCBlYWNoIHRpbWUgd2hlbiBgUmVhZGFibGVTdHJlYW1SZWFkZXIucmVhZCgpYCBpc1xuICogY2FsbGVkLiBPbmx5IGFwcGxpY2FibGUgZm9yIGJ5dGUgc3RyZWFtcyB0aGF0IHdlIGNvbnRyb2wgKGUuZy4gdGhvc2UgYmFja2VkXG4gKiBieSBhbiBVSW50OEFycmF5KS5cbiAqL1xuLyoqXG4gKiBCdWlsZHMgYSBgQnl0ZVN0cmVhbVJlYWRlcmAgZnJvbSBhIFVJbnQ4QXJyYXkuXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIGRhdGEgc291cmNlIHRvIHVzZS5cbiAqIEBwYXJhbSBieXRlc1BlclJlYWQgLSBIb3cgbWFueSBieXRlcyBlYWNoIGByZWFkKClgIGZyb20gdGhlIHJldHVybmVkIHJlYWRlclxuICogICAgICAgIHdpbGwgcmVhZC5cbiAqL1xuZnVuY3Rpb24gb2EodCwgZSA9IDEwMjQwKSB7XG4gICAgbGV0IG4gPSAwO1xuICAgIC8vIFRoZSBUeXBlU2NyaXB0IGRlZmluaXRpb24gZm9yIFJlYWRhYmxlU3RyZWFtUmVhZGVyIGNoYW5nZWQuIFdlIHVzZVxuICAgIC8vIGBhbnlgIGhlcmUgdG8gYWxsb3cgdGhpcyBjb2RlIHRvIGNvbXBpbGUgd2l0aCBkaWZmZXJlbnQgdmVyc2lvbnMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNDI5NzBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBhc3luYyByZWFkKCkge1xuICAgICAgICAgICAgaWYgKG4gPCB0LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdC5zbGljZShuLCBuICsgZSksXG4gICAgICAgICAgICAgICAgICAgIGRvbmU6ICExXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbiArPSBlLCBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkb25lOiAhMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgY2FuY2VsKCkge30sXG4gICAgICAgIHJlbGVhc2VMb2NrKCkge30sXG4gICAgICAgIGNsb3NlZDogUHJvbWlzZS5yZWplY3QoXCJ1bmltcGxlbWVudGVkXCIpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogT24gd2ViLCBhIGBSZWFkYWJsZVN0cmVhbWAgaXMgd3JhcHBlZCBhcm91bmQgYnkgYSBgQnl0ZVN0cmVhbVJlYWRlcmAuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKlxuICogQSB3cmFwcGVyIGltcGxlbWVudGF0aW9uIG9mIE9ic2VydmVyPFQ+IHRoYXQgd2lsbCBkaXNwYXRjaCBldmVudHNcbiAqIGFzeW5jaHJvbm91c2x5LiBUbyBhbGxvdyBpbW1lZGlhdGUgc2lsZW5jaW5nLCBhIG11dGUgY2FsbCBpcyBhZGRlZCB3aGljaFxuICogY2F1c2VzIGV2ZW50cyBzY2hlZHVsZWQgdG8gbm8gbG9uZ2VyIGJlIHJhaXNlZC5cbiAqL1xuY2xhc3MgdWEge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgd2lsbCBub3QgcmFpc2UgZnV0dXJlIGV2ZW50cy4gTmVjZXNzYXJ5IHRvIGRlYWwgd2l0aFxuICAgICAgICAgKiBhc3luYyBkZXRhY2htZW50IG9mIGxpc3RlbmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlZCA9ICExO1xuICAgIH1cbiAgICBuZXh0KHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5uZXh0ICYmIHRoaXMuUmModGhpcy5vYnNlcnZlci5uZXh0LCB0KTtcbiAgICB9XG4gICAgZXJyb3IodCkge1xuICAgICAgICB0aGlzLm9ic2VydmVyLmVycm9yID8gdGhpcy5SYyh0aGlzLm9ic2VydmVyLmVycm9yLCB0KSA6IHgoXCJVbmNhdWdodCBFcnJvciBpbiBzbmFwc2hvdCBsaXN0ZW5lcjpcIiwgdCk7XG4gICAgfVxuICAgIGJjKCkge1xuICAgICAgICB0aGlzLm11dGVkID0gITA7XG4gICAgfVxuICAgIFJjKHQsIGUpIHtcbiAgICAgICAgdGhpcy5tdXRlZCB8fCBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm11dGVkIHx8IHQoZSk7XG4gICAgICAgIH0pLCAwKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgYnVuZGxlLlxuICpcbiAqIFRha2VzIGEgYnVuZGxlIHN0cmVhbSBvciBidWZmZXIsIGFuZCBwcmVzZW50cyBhYnN0cmFjdGlvbnMgdG8gcmVhZCBidW5kbGVkXG4gKiBlbGVtZW50cyBvdXQgb2YgdGhlIHVuZGVybHlpbmcgY29udGVudC5cbiAqLyBjbGFzcyBjYSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSByZWFkZXIgdG8gcmVhZCBmcm9tIHVuZGVybHlpbmcgYmluYXJ5IGJ1bmRsZSBkYXRhIHNvdXJjZS4gKi9cbiAgICB0LCBlKSB7XG4gICAgICAgIHRoaXMuUGMgPSB0LCB0aGlzLkl0ID0gZSwgXG4gICAgICAgIC8qKiBDYWNoZWQgYnVuZGxlIG1ldGFkYXRhLiAqL1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbmV3IFUsIFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgYnVmZmVyIHRvIGhvbGQgYnVuZGxlIGNvbnRlbnQsIGFjY3VtdWxhdGluZyBpbmNvbXBsZXRlIGVsZW1lbnRcbiAgICAgICAgICogY29udGVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXksIHRoaXMudmMgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKSwgXG4gICAgICAgIC8vIFJlYWQgdGhlIG1ldGFkYXRhICh3aGljaCBpcyB0aGUgZmlyc3QgZWxlbWVudCkuXG4gICAgICAgIHRoaXMuVmMoKS50aGVuKCh0ID0+IHtcbiAgICAgICAgICAgIHQgJiYgdC5PdSgpID8gdGhpcy5tZXRhZGF0YS5yZXNvbHZlKHQucGF5bG9hZC5tZXRhZGF0YSkgOiB0aGlzLm1ldGFkYXRhLnJlamVjdChuZXcgRXJyb3IoYFRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBidW5kbGUgaXMgbm90IGEgbWV0YWRhdGEsIGl0IGlzXFxuICAgICAgICAgICAgICR7SlNPTi5zdHJpbmdpZnkobnVsbCA9PSB0ID8gdm9pZCAwIDogdC5wYXlsb2FkKX1gKSk7XG4gICAgICAgIH0pLCAodCA9PiB0aGlzLm1ldGFkYXRhLnJlamVjdCh0KSkpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUGMuY2FuY2VsKCk7XG4gICAgfVxuICAgIGFzeW5jIGdldE1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YS5wcm9taXNlO1xuICAgIH1cbiAgICBhc3luYyBtYygpIHtcbiAgICAgICAgLy8gTWFrZXMgc3VyZSBtZXRhZGF0YSBpcyByZWFkIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRNZXRhZGF0YSgpLCB0aGlzLlZjKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIGZyb20gdGhlIGhlYWQgb2YgaW50ZXJuYWwgYnVmZmVyLCBhbmQgcHVsbGluZyBtb3JlIGRhdGEgZnJvbVxuICAgICAqIHVuZGVybHlpbmcgc3RyZWFtIGlmIGEgY29tcGxldGUgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQsIHVudGlsIGFuXG4gICAgICogZWxlbWVudChpbmNsdWRpbmcgdGhlIHByZWZpeGVkIGxlbmd0aCBhbmQgdGhlIEpTT04gc3RyaW5nKSBpcyBmb3VuZC5cbiAgICAgKlxuICAgICAqIE9uY2UgYSBjb21wbGV0ZSBlbGVtZW50IGlzIHJlYWQsIGl0IGlzIGRyb3BwZWQgZnJvbSBpbnRlcm5hbCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGVpdGhlciB0aGUgYnVuZGxlZCBlbGVtZW50LCBvciBudWxsIGlmIHdlIGhhdmUgcmVhY2hlZCB0aGUgZW5kIG9mXG4gICAgICogdGhlIHN0cmVhbS5cbiAgICAgKi8gICAgYXN5bmMgVmMoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCB0aGlzLlNjKCk7XG4gICAgICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMudmMuZGVjb2RlKHQpLCBuID0gTnVtYmVyKGUpO1xuICAgICAgICBpc05hTihuKSAmJiB0aGlzLkRjKGBsZW5ndGggc3RyaW5nICgke2V9KSBpcyBub3QgdmFsaWQgbnVtYmVyYCk7XG4gICAgICAgIGNvbnN0IHMgPSBhd2FpdCB0aGlzLkNjKG4pO1xuICAgICAgICByZXR1cm4gbmV3IEh1KEpTT04ucGFyc2UocyksIHQubGVuZ3RoICsgbik7XG4gICAgfVxuICAgIC8qKiBGaXJzdCBpbmRleCBvZiAneycgZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXIuICovICAgIHhjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuZmluZEluZGV4KCh0ID0+IHQgPT09IFwie1wiLmNoYXJDb2RlQXQoMCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBpbnRlcm5hbCBidWZmZXIsIHVudGlsIHRoZSBmaXJzdCAneycsIGFuZFxuICAgICAqIHJldHVybiB0aGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIElmIHJlYWNoZWQgZW5kIG9mIHRoZSBzdHJlYW0sIHJldHVybnMgYSBudWxsLlxuICAgICAqLyAgICBhc3luYyBTYygpIHtcbiAgICAgICAgZm9yICg7dGhpcy54YygpIDwgMDsgKSB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgdGhpcy5OYygpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBCcm9rZSBvdXQgb2YgdGhlIGxvb3AgYmVjYXVzZSB1bmRlcmx5aW5nIHN0cmVhbSBpcyBjbG9zZWQsIGFuZCB0aGVyZVxuICAgICAgICAvLyBoYXBwZW5zIHRvIGJlIG5vIG1vcmUgZGF0YSB0byBwcm9jZXNzLlxuICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLmJ1ZmZlci5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy54YygpO1xuICAgICAgICAvLyBCcm9rZSBvdXQgb2YgdGhlIGxvb3AgYmVjYXVzZSB1bmRlcmx5aW5nIHN0cmVhbSBpcyBjbG9zZWQsIGJ1dCBzdGlsbFxuICAgICAgICAvLyBjYW5ub3QgZmluZCBhbiBvcGVuIGJyYWNrZXQuXG4gICAgICAgICAgICAgICAgdCA8IDAgJiYgdGhpcy5EYyhcIlJlYWNoZWQgdGhlIGVuZCBvZiBidW5kbGUgd2hlbiBhIGxlbmd0aCBzdHJpbmcgaXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5idWZmZXIuc2xpY2UoMCwgdCk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaW50ZXJuYWwgYnVmZmVyIHRvIGRyb3AgdGhlIHJlYWQgbGVuZ3RoLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKHQpLCBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBmcm9tIGEgc3BlY2lmaWVkIHBvc2l0aW9uIGZyb20gdGhlIGludGVybmFsIGJ1ZmZlciwgZm9yIGEgc3BlY2lmaWVkXG4gICAgICogbnVtYmVyIG9mIGJ5dGVzLCBwdWxsaW5nIG1vcmUgZGF0YSBmcm9tIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSBpZiBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGRlY29kZWQgZnJvbSB0aGUgcmVhZCBieXRlcy5cbiAgICAgKi8gICAgYXN5bmMgQ2ModCkge1xuICAgICAgICBmb3IgKDt0aGlzLmJ1ZmZlci5sZW5ndGggPCB0OyApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuTmMoKSAmJiB0aGlzLkRjKFwiUmVhY2hlZCB0aGUgZW5kIG9mIGJ1bmRsZSB3aGVuIG1vcmUgaXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnZjLmRlY29kZSh0aGlzLmJ1ZmZlci5zbGljZSgwLCB0KSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaW50ZXJuYWwgYnVmZmVyIHRvIGRyb3AgdGhlIHJlYWQganNvbiBzdHJpbmcuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc2xpY2UodCksIGU7XG4gICAgfVxuICAgIERjKHQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aHJvdyB0aGlzLlBjLmNhbmNlbCgpLCBuZXcgRXJyb3IoYEludmFsaWQgYnVuZGxlIGZvcm1hdDogJHt0fWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdWxscyBtb3JlIGRhdGEgZnJvbSB1bmRlcmx5aW5nIHN0cmVhbSB0byBpbnRlcm5hbCBidWZmZXIuXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzdHJlYW0gaXMgZmluaXNoZWQuXG4gICAgICovICAgIGFzeW5jIE5jKCkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgdGhpcy5QYy5yZWFkKCk7XG4gICAgICAgIGlmICghdC5kb25lKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIubGVuZ3RoICsgdC52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgZS5zZXQodGhpcy5idWZmZXIpLCBlLnNldCh0LnZhbHVlLCB0aGlzLmJ1ZmZlci5sZW5ndGgpLCB0aGlzLmJ1ZmZlciA9IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQuZG9uZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWdncmVnYXRpb24gdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGJ5IEZpcmVzdG9yZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuY2xhc3MgYWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQSB0eXBlIHN0cmluZyB0byB1bmlxdWVseSBpZGVudGlmeSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJBZ2dyZWdhdGVGaWVsZFwiO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgcmVzdWx0cyBvZiBleGVjdXRpbmcgYW4gYWdncmVnYXRpb24gcXVlcnkuXG4gKi8gY2xhc3MgaGEge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLl9kYXRhID0gZSwgXG4gICAgICAgIC8qKiBBIHR5cGUgc3RyaW5nIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcIkFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RcIiwgdGhpcy5xdWVyeSA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJlc3VsdHMgb2YgdGhlIGFnZ3JlZ2F0aW9ucyBwZXJmb3JtZWQgb3ZlciB0aGUgdW5kZXJseWluZ1xuICAgICAqIHF1ZXJ5LlxuICAgICAqXG4gICAgICogVGhlIGtleXMgb2YgdGhlIHJldHVybmVkIG9iamVjdCB3aWxsIGJlIHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZVxuICAgICAqIGBBZ2dyZWdhdGVTcGVjYCBvYmplY3Qgc3BlY2lmaWVkIHRvIHRoZSBhZ2dyZWdhdGlvbiBtZXRob2QsIGFuZCB0aGUgdmFsdWVzXG4gICAgICogd2lsbCBiZSB0aGUgY29ycmVzcG9uZGluZyBhZ2dyZWdhdGlvbiByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgYWdncmVnYXRpb25zIHBlcmZvcm1lZCBvdmVyIHRoZSB1bmRlcmx5aW5nXG4gICAgICogcXVlcnkuXG4gICAgICovICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ291bnRRdWVyeVJ1bm5lciBlbmNhcHN1bGF0ZXMgdGhlIGxvZ2ljIG5lZWRlZCB0byBydW4gdGhlIGNvdW50IGFnZ3JlZ2F0aW9uXG4gKiBxdWVyaWVzLlxuICovIGNsYXNzIGxhIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLmRhdGFzdG9yZSA9IGUsIHRoaXMudXNlckRhdGFXcml0ZXIgPSBuO1xuICAgIH1cbiAgICBydW4oKSB7XG4gICAgICAgIHJldHVybiBydSh0aGlzLmRhdGFzdG9yZSwgdGhpcy5xdWVyeS5fcXVlcnkpLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgTSh2b2lkIDAgIT09IHRbMF0pO1xuICAgICAgICAgICAgY29uc3QgZSA9IE9iamVjdC5lbnRyaWVzKHRbMF0pLmZpbHRlcigoKFt0LCBlXSkgPT4gXCJjb3VudF9hbGlhc1wiID09PSB0KSkubWFwKCgoW3QsIGVdKSA9PiB0aGlzLnVzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZShlKSkpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIE0oXCJudW1iZXJcIiA9PSB0eXBlb2YgZSksIFByb21pc2UucmVzb2x2ZShuZXcgaGEodGhpcy5xdWVyeSwge1xuICAgICAgICAgICAgICAgIGNvdW50OiBlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEludGVybmFsIHRyYW5zYWN0aW9uIG9iamVjdCByZXNwb25zaWJsZSBmb3IgYWNjdW11bGF0aW5nIHRoZSBtdXRhdGlvbnMgdG9cbiAqIHBlcmZvcm0gYW5kIHRoZSBiYXNlIHZlcnNpb25zIGZvciBhbnkgZG9jdW1lbnRzIHJlYWQuXG4gKi8gY2xhc3MgZmEge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5kYXRhc3RvcmUgPSB0LCBcbiAgICAgICAgLy8gVGhlIHZlcnNpb24gb2YgZWFjaCBkb2N1bWVudCB0aGF0IHdhcyByZWFkIGR1cmluZyB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICB0aGlzLnJlYWRWZXJzaW9ucyA9IG5ldyBNYXAsIHRoaXMubXV0YXRpb25zID0gW10sIHRoaXMuY29tbWl0dGVkID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBkZWZlcnJlZCB1c2FnZSBlcnJvciB0aGF0IG9jY3VycmVkIHByZXZpb3VzbHkgaW4gdGhpcyB0cmFuc2FjdGlvbiB0aGF0XG4gICAgICAgICAqIHdpbGwgY2F1c2UgdGhlIHRyYW5zYWN0aW9uIHRvIGZhaWwgb25jZSBpdCBhY3R1YWxseSBjb21taXRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0V3JpdGVFcnJvciA9IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG9mIGRvY3VtZW50cyB0aGF0IGhhdmUgYmVlbiB3cml0dGVuIGluIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgd3JpdGUgdG8gdGhlIHNhbWUga2V5IGluIGEgdHJhbnNhY3Rpb24sIGFueVxuICAgICAgICAgKiB3cml0ZXMgYWZ0ZXIgdGhlIGZpcnN0IGFyZSBoYW5kbGVkIGRpZmZlcmVudGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53cml0dGVuRG9jcyA9IG5ldyBTZXQ7XG4gICAgfVxuICAgIGFzeW5jIGxvb2t1cCh0KSB7XG4gICAgICAgIGlmICh0aGlzLmVuc3VyZUNvbW1pdE5vdENhbGxlZCgpLCB0aGlzLm11dGF0aW9ucy5sZW5ndGggPiAwKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiRmlyZXN0b3JlIHRyYW5zYWN0aW9ucyByZXF1aXJlIGFsbCByZWFkcyB0byBiZSBleGVjdXRlZCBiZWZvcmUgYWxsIHdyaXRlcy5cIik7XG4gICAgICAgIGNvbnN0IGUgPSBhd2FpdCBhc3luYyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gJCh0KSwgcyA9IEZzKG4uSXQpICsgXCIvZG9jdW1lbnRzXCIsIGkgPSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRzOiBlLm1hcCgodCA9PiBOcyhuLkl0LCB0KSkpXG4gICAgICAgICAgICB9LCByID0gYXdhaXQgbi5fbyhcIkJhdGNoR2V0RG9jdW1lbnRzXCIsIHMsIGksIGUubGVuZ3RoKSwgbyA9IG5ldyBNYXA7XG4gICAgICAgICAgICByLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBVcyhuLkl0LCB0KTtcbiAgICAgICAgICAgICAgICBvLnNldChlLmtleS50b1N0cmluZygpLCBlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBlLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBvLmdldCh0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIE0oISFlKSwgdS5wdXNoKGUpO1xuICAgICAgICAgICAgfSkpLCB1O1xuICAgICAgICB9KHRoaXMuZGF0YXN0b3JlLCB0KTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgodCA9PiB0aGlzLnJlY29yZFZlcnNpb24odCkpKSwgZTtcbiAgICB9XG4gICAgc2V0KHQsIGUpIHtcbiAgICAgICAgdGhpcy53cml0ZShlLnRvTXV0YXRpb24odCwgdGhpcy5wcmVjb25kaXRpb24odCkpKSwgdGhpcy53cml0dGVuRG9jcy5hZGQodC50b1N0cmluZygpKTtcbiAgICB9XG4gICAgdXBkYXRlKHQsIGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud3JpdGUoZS50b011dGF0aW9uKHQsIHRoaXMucHJlY29uZGl0aW9uRm9yVXBkYXRlKHQpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFdyaXRlRXJyb3IgPSB0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud3JpdHRlbkRvY3MuYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIHRoaXMud3JpdGUobmV3IHpuKHQsIHRoaXMucHJlY29uZGl0aW9uKHQpKSksIHRoaXMud3JpdHRlbkRvY3MuYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGFzeW5jIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCksIHRoaXMubGFzdFdyaXRlRXJyb3IpIHRocm93IHRoaXMubGFzdFdyaXRlRXJyb3I7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnJlYWRWZXJzaW9ucztcbiAgICAgICAgLy8gRm9yIGVhY2ggbXV0YXRpb24sIG5vdGUgdGhhdCB0aGUgZG9jIHdhcyB3cml0dGVuLlxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgdC5kZWxldGUoZS5rZXkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKSwgXG4gICAgICAgIC8vIEZvciBlYWNoIGRvY3VtZW50IHRoYXQgd2FzIHJlYWQgYnV0IG5vdCB3cml0dGVuIHRvLCB3ZSB3YW50IHRvIHBlcmZvcm1cbiAgICAgICAgLy8gYSBgdmVyaWZ5YCBvcGVyYXRpb24uXG4gICAgICAgIHQuZm9yRWFjaCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBjdC5mcm9tUGF0aChlKTtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLnB1c2gobmV3IEhuKG4sIHRoaXMucHJlY29uZGl0aW9uKG4pKSk7XG4gICAgICAgIH0pKSwgYXdhaXQgYXN5bmMgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9ICQodCksIHMgPSBGcyhuLkl0KSArIFwiL2RvY3VtZW50c1wiLCBpID0ge1xuICAgICAgICAgICAgICAgIHdyaXRlczogZS5tYXAoKHQgPT4gS3Mobi5JdCwgdCkpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG4uYW8oXCJDb21taXRcIiwgcywgaSk7XG4gICAgICAgIH0odGhpcy5kYXRhc3RvcmUsIHRoaXMubXV0YXRpb25zKSwgdGhpcy5jb21taXR0ZWQgPSAhMDtcbiAgICB9XG4gICAgcmVjb3JkVmVyc2lvbih0KSB7XG4gICAgICAgIGxldCBlO1xuICAgICAgICBpZiAodC5pc0ZvdW5kRG9jdW1lbnQoKSkgZSA9IHQudmVyc2lvbjsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXQuaXNOb0RvY3VtZW50KCkpIHRocm93IE8oKTtcbiAgICAgICAgICAgIC8vIFJlcHJlc2VudCBhIGRlbGV0ZWQgZG9jIHVzaW5nIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgICAgIGUgPSBzdC5taW4oKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KHQua2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgaWYgKCFlLmlzRXF1YWwobikpIFxuICAgICAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGZhaWwgbm8gbWF0dGVyIHdoYXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgTChCLkFCT1JURUQsIFwiRG9jdW1lbnQgdmVyc2lvbiBjaGFuZ2VkIGJldHdlZW4gdHdvIHJlYWRzLlwiKTtcbiAgICAgICAgfSBlbHNlIHRoaXMucmVhZFZlcnNpb25zLnNldCh0LmtleS50b1N0cmluZygpLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGlzIGRvY3VtZW50IHdoZW4gaXQgd2FzIHJlYWQgaW4gdGhpcyB0cmFuc2FjdGlvbixcbiAgICAgKiBhcyBhIHByZWNvbmRpdGlvbiwgb3Igbm8gcHJlY29uZGl0aW9uIGlmIGl0IHdhcyBub3QgcmVhZC5cbiAgICAgKi8gICAgcHJlY29uZGl0aW9uKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMucmVhZFZlcnNpb25zLmdldCh0LnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gIXRoaXMud3JpdHRlbkRvY3MuaGFzKHQudG9TdHJpbmcoKSkgJiYgZSA/IGUuaXNFcXVhbChzdC5taW4oKSkgPyBPbi5leGlzdHMoITEpIDogT24udXBkYXRlVGltZShlKSA6IE9uLm5vbmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJlY29uZGl0aW9uIGZvciBhIGRvY3VtZW50IGlmIHRoZSBvcGVyYXRpb24gaXMgYW4gdXBkYXRlLlxuICAgICAqLyAgICBwcmVjb25kaXRpb25Gb3JVcGRhdGUodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KHQudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGEgZG9jdW1lbnQgaXMgd3JpdHRlbiwgd2Ugd2FudCB0byB0YWtlIGludG8gYWNjb3VudCB0aGVcbiAgICAgICAgLy8gcmVhZCB0aW1lIGFuZCBleGlzdGVuY2VcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud3JpdHRlbkRvY3MuaGFzKHQudG9TdHJpbmcoKSkgJiYgZSkge1xuICAgICAgICAgICAgaWYgKGUuaXNFcXVhbChzdC5taW4oKSkpIFxuICAgICAgICAgICAgLy8gVGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QsIHNvIGZhaWwgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgLy8gVGhpcyBoYXMgdG8gYmUgdmFsaWRhdGVkIGxvY2FsbHkgYmVjYXVzZSB5b3UgY2FuJ3Qgc2VuZCBhXG4gICAgICAgICAgICAvLyBwcmVjb25kaXRpb24gdGhhdCBhIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICAgICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIGJhY2tlbmQgd3JpdGUgdG8gYmUgYW4gaW5zZXJ0LiBUaGlzIGlzIHRoZSByZXZlcnNlXG4gICAgICAgICAgICAvLyBvZiB3aGF0IHdlIHdhbnQsIHNpbmNlIHdlIHdhbnQgdG8gYXNzZXJ0IHRoYXQgdGhlIGRvY3VtZW50IGRvZXNuJ3RcbiAgICAgICAgICAgIC8vIGV4aXN0IGJ1dCB0aGVuIHNlbmQgdGhlIHVwZGF0ZSBhbmQgaGF2ZSBpdCBmYWlsLiBTaW5jZSB3ZSBjYW4ndFxuICAgICAgICAgICAgLy8gZXhwcmVzcyB0aGF0IHRvIHRoZSBiYWNrZW5kLCB3ZSBoYXZlIHRvIHZhbGlkYXRlIGxvY2FsbHkuXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGNhbiBjaGFuZ2Ugb25jZSB3ZSBjYW4gc2VuZCBzZXBhcmF0ZSB2ZXJpZnkgd3JpdGVzIGluIHRoZVxuICAgICAgICAgICAgLy8gdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiQ2FuJ3QgdXBkYXRlIGEgZG9jdW1lbnQgdGhhdCBkb2Vzbid0IGV4aXN0LlwiKTtcbiAgICAgICAgICAgIC8vIERvY3VtZW50IGV4aXN0cywgYmFzZSBwcmVjb25kaXRpb24gb24gZG9jdW1lbnQgdXBkYXRlIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT24udXBkYXRlVGltZShlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2N1bWVudCB3YXMgbm90IHJlYWQsIHNvIHdlIGp1c3QgdXNlIHRoZSBwcmVjb25kaXRpb25zIGZvciBhIGJsaW5kXG4gICAgICAgIC8vIHVwZGF0ZS5cbiAgICAgICAgcmV0dXJuIE9uLmV4aXN0cyghMCk7XG4gICAgfVxuICAgIHdyaXRlKHQpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVDb21taXROb3RDYWxsZWQoKSwgdGhpcy5tdXRhdGlvbnMucHVzaCh0KTtcbiAgICB9XG4gICAgZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCkge31cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVHJhbnNhY3Rpb25SdW5uZXIgZW5jYXBzdWxhdGVzIHRoZSBsb2dpYyBuZWVkZWQgdG8gcnVuIGFuZCByZXRyeSB0cmFuc2FjdGlvbnNcbiAqIHdpdGggYmFja29mZi5cbiAqLyBjbGFzcyBkYSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSB0LCB0aGlzLmRhdGFzdG9yZSA9IGUsIHRoaXMub3B0aW9ucyA9IG4sIHRoaXMudXBkYXRlRnVuY3Rpb24gPSBzLCBcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IGksIHRoaXMua2MgPSBuLm1heEF0dGVtcHRzLCB0aGlzLk5vID0gbmV3IHR1KHRoaXMuYXN5bmNRdWV1ZSwgXCJ0cmFuc2FjdGlvbl9yZXRyeVwiIC8qIFRyYW5zYWN0aW9uUmV0cnkgKi8pO1xuICAgIH1cbiAgICAvKiogUnVucyB0aGUgdHJhbnNhY3Rpb24gYW5kIHNldHMgdGhlIHJlc3VsdCBvbiBkZWZlcnJlZC4gKi8gICAgcnVuKCkge1xuICAgICAgICB0aGlzLmtjIC09IDEsIHRoaXMuT2MoKTtcbiAgICB9XG4gICAgT2MoKSB7XG4gICAgICAgIHRoaXMuTm8uUm8oKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgZmEodGhpcy5kYXRhc3RvcmUpLCBlID0gdGhpcy5NYyh0KTtcbiAgICAgICAgICAgIGUgJiYgZS50aGVuKChlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gdC5jb21taXQoKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZShlKTtcbiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkZjKHQpO1xuICAgICAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgfSkpLmNhdGNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLkZjKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIE1jKHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnVwZGF0ZUZ1bmN0aW9uKHQpO1xuICAgICAgICAgICAgcmV0dXJuICFzZShlKSAmJiBlLmNhdGNoICYmIGUudGhlbiA/IGUgOiAodGhpcy5kZWZlcnJlZC5yZWplY3QoRXJyb3IoXCJUcmFuc2FjdGlvbiBjYWxsYmFjayBtdXN0IHJldHVybiBhIFByb21pc2VcIikpLCBcbiAgICAgICAgICAgIG51bGwpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgcmV0cnkgZXJyb3JzIHRocm93biBieSB1c2VyIHByb3ZpZGVkIHVwZGF0ZUZ1bmN0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucmVqZWN0KHQpLCBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIEZjKHQpIHtcbiAgICAgICAgdGhpcy5rYyA+IDAgJiYgdGhpcy4kYyh0KSA/ICh0aGlzLmtjIC09IDEsIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiAodGhpcy5PYygpLCBcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSkpIDogdGhpcy5kZWZlcnJlZC5yZWplY3QodCk7XG4gICAgfVxuICAgICRjKHQpIHtcbiAgICAgICAgaWYgKFwiRmlyZWJhc2VFcnJvclwiID09PSB0Lm5hbWUpIHtcbiAgICAgICAgICAgIC8vIEluIHRyYW5zYWN0aW9ucywgdGhlIGJhY2tlbmQgd2lsbCBmYWlsIG91dGRhdGVkIHJlYWRzIHdpdGggRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICAgICAgICAgIC8vIG5vbi1tYXRjaGluZyBkb2N1bWVudCB2ZXJzaW9ucyB3aXRoIEFCT1JURUQuIFRoZXNlIGVycm9ycyBzaG91bGQgYmUgcmV0cmllZC5cbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNvZGU7XG4gICAgICAgICAgICByZXR1cm4gXCJhYm9ydGVkXCIgPT09IGUgfHwgXCJmYWlsZWQtcHJlY29uZGl0aW9uXCIgPT09IGUgfHwgIVpuKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEZpcmVzdG9yZUNsaWVudCBpcyBhIHRvcC1sZXZlbCBjbGFzcyB0aGF0IGNvbnN0cnVjdHMgYW5kIG93bnMgYWxsIG9mIHRoZVxuICogcGllY2VzIG9mIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZVxuICogYXN5bmMgcXVldWUgdGhhdCBpcyBzaGFyZWQgYnkgYWxsIG9mIHRoZSBvdGhlciBjb21wb25lbnRzIGluIHRoZSBzeXN0ZW0uXG4gKi9cbmNsYXNzIF9hIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBcbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXMgcXVldWUgcmVzcG9uc2libGUgZm9yIGFsbCBvZiBvdXIgaW50ZXJuYWwgcHJvY2Vzc2luZy4gV2hlblxuICAgICAqIHdlIGdldCBpbmNvbWluZyB3b3JrIGZyb20gdGhlIHVzZXIgKHZpYSBwdWJsaWMgQVBJKSBvciB0aGUgbmV0d29ya1xuICAgICAqIChpbmNvbWluZyBHUlBDIG1lc3NhZ2VzKSwgd2Ugc2hvdWxkIGFsd2F5cyBzY2hlZHVsZSBvbnRvIHRoaXMgcXVldWUuXG4gICAgICogVGhpcyBlbnN1cmVzIGFsbCBvZiBvdXIgd29yayBpcyBwcm9wZXJseSBzZXJpYWxpemVkIChlLmcuIHdlIGRvbid0XG4gICAgICogc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBvcGVyYXRpb24gd2hpbGUgdGhlIHByZXZpb3VzIG9uZSBpcyB3YWl0aW5nIGZvclxuICAgICAqIGFuIGFzeW5jIEkvTyB0byBjb21wbGV0ZSkuXG4gICAgICovXG4gICAgbiwgcykge1xuICAgICAgICB0aGlzLmF1dGhDcmVkZW50aWFscyA9IHQsIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscyA9IGUsIHRoaXMuYXN5bmNRdWV1ZSA9IG4sIHRoaXMuZGF0YWJhc2VJbmZvID0gcywgXG4gICAgICAgIHRoaXMudXNlciA9IFAuVU5BVVRIRU5USUNBVEVELCB0aGlzLmNsaWVudElkID0gWC5SKCksIHRoaXMuYXV0aENyZWRlbnRpYWxMaXN0ZW5lciA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxMaXN0ZW5lciA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLCB0aGlzLmF1dGhDcmVkZW50aWFscy5zdGFydChuLCAoYXN5bmMgdCA9PiB7XG4gICAgICAgICAgICBDKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiUmVjZWl2ZWQgdXNlcj1cIiwgdC51aWQpLCBhd2FpdCB0aGlzLmF1dGhDcmVkZW50aWFsTGlzdGVuZXIodCksIFxuICAgICAgICAgICAgdGhpcy51c2VyID0gdDtcbiAgICAgICAgfSkpLCB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMuc3RhcnQobiwgKHQgPT4gKEMoXCJGaXJlc3RvcmVDbGllbnRcIiwgXCJSZWNlaXZlZCBuZXcgYXBwIGNoZWNrIHRva2VuPVwiLCB0KSwgXG4gICAgICAgIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIodCwgdGhpcy51c2VyKSkpKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFzeW5jUXVldWU6IHRoaXMuYXN5bmNRdWV1ZSxcbiAgICAgICAgICAgIGRhdGFiYXNlSW5mbzogdGhpcy5kYXRhYmFzZUluZm8sXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIGF1dGhDcmVkZW50aWFsczogdGhpcy5hdXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBhcHBDaGVja0NyZWRlbnRpYWxzOiB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBpbml0aWFsVXNlcjogdGhpcy51c2VyLFxuICAgICAgICAgICAgbWF4Q29uY3VycmVudExpbWJvUmVzb2x1dGlvbnM6IDEwMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZXRDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIodCkge1xuICAgICAgICB0aGlzLmF1dGhDcmVkZW50aWFsTGlzdGVuZXIgPSB0O1xuICAgIH1cbiAgICBzZXRBcHBDaGVja1Rva2VuQ2hhbmdlTGlzdGVuZXIodCkge1xuICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbExpc3RlbmVyID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoYXQgdGhlIGNsaWVudCBoYXMgbm90IGJlZW4gdGVybWluYXRlZC4gRW5zdXJlcyB0aGF0IG90aGVyIG1ldGhvZHMgb25cbiAgICAgKiB0aGlzIGNsYXNzIGNhbm5vdCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGNsaWVudCBpcyB0ZXJtaW5hdGVkLlxuICAgICAqLyAgICB2ZXJpZnlOb3RUZXJtaW5hdGVkKCkge1xuICAgICAgICBpZiAodGhpcy5hc3luY1F1ZXVlLmlzU2h1dHRpbmdEb3duKSB0aHJvdyBuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVGhlIGNsaWVudCBoYXMgYWxyZWFkeSBiZWVuIHRlcm1pbmF0ZWQuXCIpO1xuICAgIH1cbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnRlclJlc3RyaWN0ZWRNb2RlKCk7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgVTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0RXZlbldoaWxlUmVzdHJpY3RlZCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubGluZUNvbXBvbmVudHMgJiYgYXdhaXQgdGhpcy5vbmxpbmVDb21wb25lbnRzLnRlcm1pbmF0ZSgpLCB0aGlzLm9mZmxpbmVDb21wb25lbnRzICYmIGF3YWl0IHRoaXMub2ZmbGluZUNvbXBvbmVudHMudGVybWluYXRlKCksIFxuICAgICAgICAgICAgICAgIC8vIFRoZSBjcmVkZW50aWFscyBwcm92aWRlciBtdXN0IGJlIHRlcm1pbmF0ZWQgYWZ0ZXIgc2h1dHRpbmcgZG93biB0aGVcbiAgICAgICAgICAgICAgICAvLyBSZW1vdGVTdG9yZSBhcyBpdCB3aWxsIHByZXZlbnQgdGhlIFJlbW90ZVN0b3JlIGZyb20gcmV0cmlldmluZyBhdXRoXG4gICAgICAgICAgICAgICAgLy8gdG9rZW5zLlxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aENyZWRlbnRpYWxzLnNodXRkb3duKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5zaHV0ZG93bigpLCB0LnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gRnUoZSwgXCJGYWlsZWQgdG8gc2h1dGRvd24gcGVyc2lzdGVuY2VcIik7XG4gICAgICAgICAgICAgICAgdC5yZWplY3Qobik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgdC5wcm9taXNlO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gd2EodCwgZSkge1xuICAgIHQuYXN5bmNRdWV1ZS52ZXJpZnlPcGVyYXRpb25JblByb2dyZXNzKCksIEMoXCJGaXJlc3RvcmVDbGllbnRcIiwgXCJJbml0aWFsaXppbmcgT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyXCIpO1xuICAgIGNvbnN0IG4gPSBhd2FpdCB0LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICBhd2FpdCBlLmluaXRpYWxpemUobik7XG4gICAgbGV0IHMgPSBuLmluaXRpYWxVc2VyO1xuICAgIHQuc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKChhc3luYyB0ID0+IHtcbiAgICAgICAgcy5pc0VxdWFsKHQpIHx8IChhd2FpdCBFbyhlLmxvY2FsU3RvcmUsIHQpLCBzID0gdCk7XG4gICAgfSkpLCBcbiAgICAvLyBXaGVuIGEgdXNlciBjYWxscyBjbGVhclBlcnNpc3RlbmNlKCkgaW4gb25lIGNsaWVudCwgYWxsIG90aGVyIGNsaWVudHNcbiAgICAvLyBuZWVkIHRvIGJlIHRlcm1pbmF0ZWQgdG8gYWxsb3cgdGhlIGRlbGV0ZSB0byBzdWNjZWVkLlxuICAgIGUucGVyc2lzdGVuY2Uuc2V0RGF0YWJhc2VEZWxldGVkTGlzdGVuZXIoKCgpID0+IHQudGVybWluYXRlKCkpKSwgdC5vZmZsaW5lQ29tcG9uZW50cyA9IGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1hKHQsIGUpIHtcbiAgICB0LmFzeW5jUXVldWUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcygpO1xuICAgIGNvbnN0IG4gPSBhd2FpdCBnYSh0KTtcbiAgICBDKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiSW5pdGlhbGl6aW5nIE9ubGluZUNvbXBvbmVudFByb3ZpZGVyXCIpO1xuICAgIGNvbnN0IHMgPSBhd2FpdCB0LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICBhd2FpdCBlLmluaXRpYWxpemUobiwgcyksIFxuICAgIC8vIFRoZSBDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIgb2YgdGhlIG9ubGluZSBjb21wb25lbnQgcHJvdmlkZXIgdGFrZXNcbiAgICAvLyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9mZmxpbmUgY29tcG9uZW50IHByb3ZpZGVyLlxuICAgIHQuc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKCh0ID0+IHh1KGUucmVtb3RlU3RvcmUsIHQpKSksIHQuc2V0QXBwQ2hlY2tUb2tlbkNoYW5nZUxpc3RlbmVyKCgodCwgbikgPT4geHUoZS5yZW1vdGVTdG9yZSwgbikpKSwgXG4gICAgdC5vbmxpbmVDb21wb25lbnRzID0gZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2EodCkge1xuICAgIHJldHVybiB0Lm9mZmxpbmVDb21wb25lbnRzIHx8IChDKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiVXNpbmcgZGVmYXVsdCBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgIGF3YWl0IHdhKHQsIG5ldyBGYykpLCB0Lm9mZmxpbmVDb21wb25lbnRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiB5YSh0KSB7XG4gICAgcmV0dXJuIHQub25saW5lQ29tcG9uZW50cyB8fCAoQyhcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIGRlZmF1bHQgT25saW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgIGF3YWl0IG1hKHQsIG5ldyBMYykpLCB0Lm9ubGluZUNvbXBvbmVudHM7XG59XG5cbmZ1bmN0aW9uIHBhKHQpIHtcbiAgICByZXR1cm4gZ2EodCkudGhlbigodCA9PiB0LnBlcnNpc3RlbmNlKSk7XG59XG5cbmZ1bmN0aW9uIElhKHQpIHtcbiAgICByZXR1cm4gZ2EodCkudGhlbigodCA9PiB0LmxvY2FsU3RvcmUpKTtcbn1cblxuZnVuY3Rpb24gVGEodCkge1xuICAgIHJldHVybiB5YSh0KS50aGVuKCh0ID0+IHQucmVtb3RlU3RvcmUpKTtcbn1cblxuZnVuY3Rpb24gRWEodCkge1xuICAgIHJldHVybiB5YSh0KS50aGVuKCh0ID0+IHQuc3luY0VuZ2luZSkpO1xufVxuXG5mdW5jdGlvbiBBYSh0KSB7XG4gICAgcmV0dXJuIHlhKHQpLnRoZW4oKHQgPT4gdC5kYXRhc3RvcmUpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gUmEodCkge1xuICAgIGNvbnN0IGUgPSBhd2FpdCB5YSh0KSwgbiA9IGUuZXZlbnRNYW5hZ2VyO1xuICAgIHJldHVybiBuLm9uTGlzdGVuID0gcmMuYmluZChudWxsLCBlLnN5bmNFbmdpbmUpLCBuLm9uVW5saXN0ZW4gPSB1Yy5iaW5kKG51bGwsIGUuc3luY0VuZ2luZSksIFxuICAgIG47XG59XG5cbi8qKiBFbmFibGVzIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24gYW5kIHJlLWVucXVldWVzIGFsbCBwZW5kaW5nIG9wZXJhdGlvbnMuICovIGZ1bmN0aW9uIGJhKHQpIHtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IHBhKHQpLCBuID0gYXdhaXQgVGEodCk7XG4gICAgICAgIHJldHVybiBlLnNldE5ldHdvcmtFbmFibGVkKCEwKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9ICQodCk7XG4gICAgICAgICAgICByZXR1cm4gZS53dS5kZWxldGUoMCAvKiBVc2VyRGlzYWJsZWQgKi8pLCBjdShlKTtcbiAgICAgICAgfShuKTtcbiAgICB9KSk7XG59XG5cbi8qKiBEaXNhYmxlcyB0aGUgbmV0d29yayBjb25uZWN0aW9uLiBQZW5kaW5nIG9wZXJhdGlvbnMgd2lsbCBub3QgY29tcGxldGUuICovIGZ1bmN0aW9uIFBhKHQpIHtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IHBhKHQpLCBuID0gYXdhaXQgVGEodCk7XG4gICAgICAgIHJldHVybiBlLnNldE5ldHdvcmtFbmFibGVkKCExKSwgYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9ICQodCk7XG4gICAgICAgICAgICBlLnd1LmFkZCgwIC8qIFVzZXJEaXNhYmxlZCAqLyksIGF3YWl0IGF1KGUpLCBcbiAgICAgICAgICAgIC8vIFNldCB0aGUgT25saW5lU3RhdGUgdG8gT2ZmbGluZSBzbyBnZXQoKXMgcmV0dXJuIGZyb20gY2FjaGUsIGV0Yy5cbiAgICAgICAgICAgIGUueXUuc2V0KFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pO1xuICAgICAgICB9KG4pO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHdyaXRlcyB0aGF0IHdlcmUgcGVuZGluZyBhdCB0aGUgdGltZVxuICogdGhpcyBtZXRob2Qgd2FzIGNhbGxlZCByZWNlaXZlZCBzZXJ2ZXIgYWNrbm93bGVkZ2VtZW50LiBBbiBhY2tub3dsZWRnZW1lbnRcbiAqIGNhbiBiZSBlaXRoZXIgYWNjZXB0YW5jZSBvciByZWplY3Rpb24uXG4gKi8gZnVuY3Rpb24gdmEodCwgZSkge1xuICAgIGNvbnN0IG4gPSBuZXcgVTtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGFzeW5jIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBhd2FpdCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9ICQodCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJyZWFkIGRvY3VtZW50XCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudCh0LCBlKSkpO1xuICAgICAgICAgICAgfSh0LCBlKTtcbiAgICAgICAgICAgIHMuaXNGb3VuZERvY3VtZW50KCkgPyBuLnJlc29sdmUocykgOiBzLmlzTm9Eb2N1bWVudCgpID8gbi5yZXNvbHZlKG51bGwpIDogbi5yZWplY3QobmV3IEwoQi5VTkFWQUlMQUJMRSwgXCJGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGZyb20gY2FjaGUuIChIb3dldmVyLCB0aGlzIGRvY3VtZW50IG1heSBleGlzdCBvbiB0aGUgc2VydmVyLiBSdW4gYWdhaW4gd2l0aG91dCBzZXR0aW5nICdzb3VyY2UnIGluIHRoZSBHZXRPcHRpb25zIHRvIGF0dGVtcHQgdG8gcmV0cmlldmUgdGhlIGRvY3VtZW50IGZyb20gdGhlIHNlcnZlci4pXCIpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgY29uc3QgcyA9IEZ1KHQsIGBGYWlsZWQgdG8gZ2V0IGRvY3VtZW50ICcke2V9IGZyb20gY2FjaGVgKTtcbiAgICAgICAgICAgIG4ucmVqZWN0KHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICogUmV0cmlldmVzIGEgbGF0ZW5jeS1jb21wZW5zYXRlZCBkb2N1bWVudCBmcm9tIHRoZSBiYWNrZW5kIHZpYSBhXG4gKiBTbmFwc2hvdExpc3RlbmVyLlxuICovIChhd2FpdCBJYSh0KSwgZSwgbikpKSwgbi5wcm9taXNlO1xufVxuXG5mdW5jdGlvbiBWYSh0LCBlLCBuID0ge30pIHtcbiAgICBjb25zdCBzID0gbmV3IFU7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBuZXcgdWEoe1xuICAgICAgICAgICAgbmV4dDogciA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgZS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiBHdSh0LCBvKSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSByLmRvY3MuaGFzKG4pO1xuICAgICAgICAgICAgICAgICF1ICYmIHIuZnJvbUNhY2hlID8gXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBJZiB3ZSdyZSBvbmxpbmUgYW5kIHRoZSBkb2N1bWVudCBkb2Vzbid0XG4gICAgICAgICAgICAgICAgLy8gZXhpc3QgdGhlbiB3ZSByZXNvbHZlIHdpdGggYSBkb2MuZXhpc3RzIHNldCB0byBmYWxzZS4gSWZcbiAgICAgICAgICAgICAgICAvLyB3ZSdyZSBvZmZsaW5lIGhvd2V2ZXIsIHdlIHJlamVjdCB0aGUgUHJvbWlzZSBpbiB0aGlzXG4gICAgICAgICAgICAgICAgLy8gY2FzZS4gVHdvIG9wdGlvbnM6IDEpIENhY2hlIHRoZSBuZWdhdGl2ZSByZXNwb25zZSBmcm9tXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlciBzbyB3ZSBjYW4gZGVsaXZlciB0aGF0IGV2ZW4gd2hlbiB5b3UncmVcbiAgICAgICAgICAgICAgICAvLyBvZmZsaW5lIDIpIEFjdHVhbGx5IHJlamVjdCB0aGUgUHJvbWlzZSBpbiB0aGUgb25saW5lIGNhc2VcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgICAgICAgICAgICBpLnJlamVjdChuZXcgTChCLlVOQVZBSUxBQkxFLCBcIkZhaWxlZCB0byBnZXQgZG9jdW1lbnQgYmVjYXVzZSB0aGUgY2xpZW50IGlzIG9mZmxpbmUuXCIpKSA6IHUgJiYgci5mcm9tQ2FjaGUgJiYgcyAmJiBcInNlcnZlclwiID09PSBzLnNvdXJjZSA/IGkucmVqZWN0KG5ldyBMKEIuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGZyb20gc2VydmVyLiAoSG93ZXZlciwgdGhpcyBkb2N1bWVudCBkb2VzIGV4aXN0IGluIHRoZSBsb2NhbCBjYWNoZS4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyBzb3VyY2UgdG8gXCJzZXJ2ZXJcIiB0byByZXRyaWV2ZSB0aGUgY2FjaGVkIGRvY3VtZW50LiknKSkgOiBpLnJlc29sdmUocik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHQgPT4gaS5yZWplY3QodClcbiAgICAgICAgfSksIG8gPSBuZXcgenUoZW4obi5wYXRoKSwgciwge1xuICAgICAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogITAsXG4gICAgICAgICAgICBrdTogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBLdSh0LCBvKTtcbiAgICB9KGF3YWl0IFJhKHQpLCB0LmFzeW5jUXVldWUsIGUsIG4sIHMpKSksIHMucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gU2EodCwgZSkge1xuICAgIGNvbnN0IG4gPSBuZXcgVTtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGFzeW5jIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBhd2FpdCBEbyh0LCBlLCBcbiAgICAgICAgICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApLCBpID0gbmV3IGVjKGUsIHMuSGkpLCByID0gaS5XdShzLmRvY3VtZW50cyksIG8gPSBpLmFwcGx5Q2hhbmdlcyhyLCBcbiAgICAgICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyAhMSk7XG4gICAgICAgICAgICBuLnJlc29sdmUoby5zbmFwc2hvdCk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBGdSh0LCBgRmFpbGVkIHRvIGV4ZWN1dGUgcXVlcnkgJyR7ZX0gYWdhaW5zdCBjYWNoZWApO1xuICAgICAgICAgICAgbi5yZWplY3Qocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gKiBSZXRyaWV2ZXMgYSBsYXRlbmN5LWNvbXBlbnNhdGVkIHF1ZXJ5IHNuYXBzaG90IGZyb20gdGhlIGJhY2tlbmQgdmlhIGFcbiAqIFNuYXBzaG90TGlzdGVuZXIuXG4gKi8gKGF3YWl0IElhKHQpLCBlLCBuKSkpLCBuLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIERhKHQsIGUsIG4gPSB7fSkge1xuICAgIGNvbnN0IHMgPSBuZXcgVTtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGZ1bmN0aW9uKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyB1YSh7XG4gICAgICAgICAgICBuZXh0OiBuID0+IHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcXVlcnkgZmlyc3QgYmVmb3JlIHBhc3NpbmcgZXZlbnQgdG8gdXNlciB0byBhdm9pZFxuICAgICAgICAgICAgICAgIC8vIHVzZXIgYWN0aW9ucyBhZmZlY3RpbmcgdGhlIG5vdyBzdGFsZSBxdWVyeS5cbiAgICAgICAgICAgICAgICBlLmVucXVldWVBbmRGb3JnZXQoKCgpID0+IEd1KHQsIG8pKSksIG4uZnJvbUNhY2hlICYmIFwic2VydmVyXCIgPT09IHMuc291cmNlID8gaS5yZWplY3QobmV3IEwoQi5VTkFWQUlMQUJMRSwgJ0ZhaWxlZCB0byBnZXQgZG9jdW1lbnRzIGZyb20gc2VydmVyLiAoSG93ZXZlciwgdGhlc2UgZG9jdW1lbnRzIG1heSBleGlzdCBpbiB0aGUgbG9jYWwgY2FjaGUuIFJ1biBhZ2FpbiB3aXRob3V0IHNldHRpbmcgc291cmNlIHRvIFwic2VydmVyXCIgdG8gcmV0cmlldmUgdGhlIGNhY2hlZCBkb2N1bWVudHMuKScpKSA6IGkucmVzb2x2ZShuKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogdCA9PiBpLnJlamVjdCh0KVxuICAgICAgICB9KSwgbyA9IG5ldyB6dShuLCByLCB7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiAhMCxcbiAgICAgICAgICAgIGt1OiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEt1KHQsIG8pO1xuICAgIH0oYXdhaXQgUmEodCksIHQuYXN5bmNRdWV1ZSwgZSwgbiwgcykpKSwgcy5wcm9taXNlO1xufVxuXG5mdW5jdGlvbiBDYSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IG5ldyB1YShlKTtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgJCh0KS5idS5hZGQoZSksIFxuICAgICAgICAvLyBJbW1lZGlhdGVseSBmaXJlIGFuIGluaXRpYWwgZXZlbnQsIGluZGljYXRpbmcgYWxsIGV4aXN0aW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyBhcmUgaW4tc3luYy5cbiAgICAgICAgZS5uZXh0KCk7XG4gICAgfShhd2FpdCBSYSh0KSwgbikpKSwgKCkgPT4ge1xuICAgICAgICBuLmJjKCksIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAkKHQpLmJ1LmRlbGV0ZShlKTtcbiAgICAgICAgfShhd2FpdCBSYSh0KSwgbikpKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIFRha2VzIGFuIHVwZGF0ZUZ1bmN0aW9uIGluIHdoaWNoIGEgc2V0IG9mIHJlYWRzIGFuZCB3cml0ZXMgY2FuIGJlIHBlcmZvcm1lZFxuICogYXRvbWljYWxseS4gSW4gdGhlIHVwZGF0ZUZ1bmN0aW9uLCB0aGUgY2xpZW50IGNhbiByZWFkIGFuZCB3cml0ZSB2YWx1ZXNcbiAqIHVzaW5nIHRoZSBzdXBwbGllZCB0cmFuc2FjdGlvbiBvYmplY3QuIEFmdGVyIHRoZSB1cGRhdGVGdW5jdGlvbiwgYWxsXG4gKiBjaGFuZ2VzIHdpbGwgYmUgY29tbWl0dGVkLiBJZiBhIHJldHJ5YWJsZSBlcnJvciBvY2N1cnMgKGV4OiBzb21lIG90aGVyXG4gKiBjbGllbnQgaGFzIGNoYW5nZWQgYW55IG9mIHRoZSBkYXRhIHJlZmVyZW5jZWQpLCB0aGVuIHRoZSB1cGRhdGVGdW5jdGlvblxuICogd2lsbCBiZSBjYWxsZWQgYWdhaW4gYWZ0ZXIgYSBiYWNrb2ZmLiBJZiB0aGUgdXBkYXRlRnVuY3Rpb24gc3RpbGwgZmFpbHNcbiAqIGFmdGVyIGFsbCByZXRyaWVzLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJlamVjdGVkLlxuICpcbiAqIFRoZSB0cmFuc2FjdGlvbiBvYmplY3QgcGFzc2VkIHRvIHRoZSB1cGRhdGVGdW5jdGlvbiBjb250YWlucyBtZXRob2RzIGZvclxuICogYWNjZXNzaW5nIGRvY3VtZW50cyBhbmQgY29sbGVjdGlvbnMuIFVubGlrZSBvdGhlciBkYXRhc3RvcmUgYWNjZXNzLCBkYXRhXG4gKiBhY2Nlc3NlZCB3aXRoIHRoZSB0cmFuc2FjdGlvbiB3aWxsIG5vdCByZWZsZWN0IGxvY2FsIGNoYW5nZXMgdGhhdCBoYXZlIG5vdFxuICogYmVlbiBjb21taXR0ZWQuIEZvciB0aGlzIHJlYXNvbiwgaXQgaXMgcmVxdWlyZWQgdGhhdCBhbGwgcmVhZHMgYXJlXG4gKiBwZXJmb3JtZWQgYmVmb3JlIGFueSB3cml0ZXMuIFRyYW5zYWN0aW9ucyBtdXN0IGJlIHBlcmZvcm1lZCB3aGlsZSBvbmxpbmUuXG4gKi8gZnVuY3Rpb24geGEodCwgZSwgbiwgcykge1xuICAgIGNvbnN0IGkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGxldCBuO1xuICAgICAgICBuID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IChuZXcgVGV4dEVuY29kZXIpLmVuY29kZSh0KSA6IHQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhKHQsIGUpO1xuICAgICAgICB9KGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVWludDhBcnJheSkgcmV0dXJuIG9hKHQsIGUpO1xuICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIG9hKG5ldyBVaW50OEFycmF5KHQpLCBlKTtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHJldHVybiB0LmdldFJlYWRlcigpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU291cmNlIG9mIGB0b0J5dGVTdHJlYW1SZWFkZXJgIGhhcyB0byBiZSBhIEFycmF5QnVmZmVyIG9yIFJlYWRhYmxlU3RyZWFtXCIpO1xuICAgICAgICB9KG4pLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gKG4sIFpvKGUpKTtcbiAgICB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBNYyhhd2FpdCBFYSh0KSwgaSwgcyk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBOYSh0LCBlKSB7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSAkKHQpO1xuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuYW1lZCBxdWVyeVwiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4uTnMuZ2V0TmFtZWRRdWVyeSh0LCBlKSkpO1xuICAgIH0oYXdhaXQgSWEodCksIGUpKSk7XG59XG5cbmNsYXNzIGthIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gVGhlIGxhc3QgcHJvbWlzZSBpbiB0aGUgcXVldWUuXG4gICAgICAgIHRoaXMuQmMgPSBQcm9taXNlLnJlc29sdmUoKSwgXG4gICAgICAgIC8vIEEgbGlzdCBvZiByZXRyeWFibGUgb3BlcmF0aW9ucy4gUmV0cnlhYmxlIG9wZXJhdGlvbnMgYXJlIHJ1biBpbiBvcmRlciBhbmRcbiAgICAgICAgLy8gcmV0cmllZCB3aXRoIGJhY2tvZmYuXG4gICAgICAgIHRoaXMuTGMgPSBbXSwgXG4gICAgICAgIC8vIElzIHRoaXMgQXN5bmNRdWV1ZSBiZWluZyBzaHV0IGRvd24/IE9uY2UgaXQgaXMgc2V0IHRvIHRydWUsIGl0IHdpbGwgbm90XG4gICAgICAgIC8vIGJlIGNoYW5nZWQgYWdhaW4uXG4gICAgICAgIHRoaXMuVWMgPSAhMSwgXG4gICAgICAgIC8vIE9wZXJhdGlvbnMgc2NoZWR1bGVkIHRvIGJlIHF1ZXVlZCBpbiB0aGUgZnV0dXJlLiBPcGVyYXRpb25zIGFyZVxuICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSBhcmUgcnVuIG9yIGNhbmNlbGVkLlxuICAgICAgICB0aGlzLnFjID0gW10sIFxuICAgICAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgICAgIHRoaXMuS2MgPSBudWxsLCBcbiAgICAgICAgLy8gRmxhZyBzZXQgd2hpbGUgdGhlcmUncyBhbiBvdXRzdGFuZGluZyBBc3luY1F1ZXVlIG9wZXJhdGlvbiwgdXNlZCBmb3JcbiAgICAgICAgLy8gYXNzZXJ0aW9uIHNhbml0eS1jaGVja3MuXG4gICAgICAgIHRoaXMuR2MgPSAhMSwgXG4gICAgICAgIC8vIEVuYWJsZWQgZHVyaW5nIHNodXRkb3duIG9uIFNhZmFyaSB0byBwcmV2ZW50IGZ1dHVyZSBhY2Nlc3MgdG8gSW5kZXhlZERCLlxuICAgICAgICB0aGlzLlFjID0gITEsIFxuICAgICAgICAvLyBMaXN0IG9mIFRpbWVySWRzIHRvIGZhc3QtZm9yd2FyZCBkZWxheXMgZm9yLlxuICAgICAgICB0aGlzLmpjID0gW10sIFxuICAgICAgICAvLyBCYWNrb2ZmIHRpbWVyIHVzZWQgdG8gc2NoZWR1bGUgcmV0cmllcyBmb3IgcmV0cnlhYmxlIG9wZXJhdGlvbnNcbiAgICAgICAgdGhpcy5ObyA9IG5ldyB0dSh0aGlzLCBcImFzeW5jX3F1ZXVlX3JldHJ5XCIgLyogQXN5bmNRdWV1ZVJldHJ5ICovKSwgXG4gICAgICAgIC8vIFZpc2liaWxpdHkgaGFuZGxlciB0aGF0IHRyaWdnZXJzIGFuIGltbWVkaWF0ZSByZXRyeSBvZiBhbGwgcmV0cnlhYmxlXG4gICAgICAgIC8vIG9wZXJhdGlvbnMuIE1lYW50IHRvIHNwZWVkIHVwIHJlY292ZXJ5IHdoZW4gd2UgcmVnYWluIGZpbGUgc3lzdGVtIGFjY2Vzc1xuICAgICAgICAvLyBhZnRlciBwYWdlIGNvbWVzIGludG8gZm9yZWdyb3VuZC5cbiAgICAgICAgdGhpcy5XYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBYbygpO1xuICAgICAgICAgICAgdCAmJiBDKFwiQXN5bmNRdWV1ZVwiLCBcIlZpc2liaWxpdHkgc3RhdGUgY2hhbmdlZCB0byBcIiArIHQudmlzaWJpbGl0eVN0YXRlKSwgdGhpcy5Oby5QbygpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0ID0gWG8oKTtcbiAgICAgICAgdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQuYWRkRXZlbnRMaXN0ZW5lciAmJiB0LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuV2MpO1xuICAgIH1cbiAgICBnZXQgaXNTaHV0dGluZ0Rvd24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlVjO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUgd2l0aG91dCB3YWl0aW5nIGZvciBpdCB0byBjb21wbGV0ZSAoaS5lLlxuICAgICAqIHdlIGlnbm9yZSB0aGUgUHJvbWlzZSByZXN1bHQpLlxuICAgICAqLyAgICBlbnF1ZXVlQW5kRm9yZ2V0KHQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLmVucXVldWUodCk7XG4gICAgfVxuICAgIGVucXVldWVBbmRGb3JnZXRFdmVuV2hpbGVSZXN0cmljdGVkKHQpIHtcbiAgICAgICAgdGhpcy56YygpLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLkhjKHQpO1xuICAgIH1cbiAgICBlbnRlclJlc3RyaWN0ZWRNb2RlKHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLlVjKSB7XG4gICAgICAgICAgICB0aGlzLlVjID0gITAsIHRoaXMuUWMgPSB0IHx8ICExO1xuICAgICAgICAgICAgY29uc3QgZSA9IFhvKCk7XG4gICAgICAgICAgICBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5yZW1vdmVFdmVudExpc3RlbmVyICYmIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5XYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5xdWV1ZSh0KSB7XG4gICAgICAgIGlmICh0aGlzLnpjKCksIHRoaXMuVWMpIFxuICAgICAgICAvLyBSZXR1cm4gYSBQcm9taXNlIHdoaWNoIG5ldmVyIHJlc29sdmVzLlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCgpID0+IHt9KSk7XG4gICAgICAgIC8vIENyZWF0ZSBhIGRlZmVycmVkIFByb21pc2UgdGhhdCB3ZSBjYW4gcmV0dXJuIHRvIHRoZSBjYWxsZWUuIFRoaXNcbiAgICAgICAgLy8gYWxsb3dzIHVzIHRvIHJldHVybiBhIFwiaGFuZ2luZyBQcm9taXNlXCIgb25seSB0byB0aGUgY2FsbGVlIGFuZCBzdGlsbFxuICAgICAgICAvLyBhZHZhbmNlIHRoZSBxdWV1ZSBldmVuIHdoZW4gdGhlIG9wZXJhdGlvbiBpcyBub3QgcnVuLlxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgVTtcbiAgICAgICAgcmV0dXJuIHRoaXMuSGMoKCgpID0+IHRoaXMuVWMgJiYgdGhpcy5RYyA/IFByb21pc2UucmVzb2x2ZSgpIDogKHQoKS50aGVuKGUucmVzb2x2ZSwgZS5yZWplY3QpLCBcbiAgICAgICAgZS5wcm9taXNlKSkpLnRoZW4oKCgpID0+IGUucHJvbWlzZSkpO1xuICAgIH1cbiAgICBlbnF1ZXVlUmV0cnlhYmxlKHQpIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiAodGhpcy5MYy5wdXNoKHQpLCB0aGlzLkpjKCkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIG5leHQgb3BlcmF0aW9uIGZyb20gdGhlIHJldHJ5YWJsZSBxdWV1ZS4gSWYgdGhlIG9wZXJhdGlvbiBmYWlscyxcbiAgICAgKiByZXNjaGVkdWxlcyB3aXRoIGJhY2tvZmYuXG4gICAgICovICAgIGFzeW5jIEpjKCkge1xuICAgICAgICBpZiAoMCAhPT0gdGhpcy5MYy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5MY1swXSgpLCB0aGlzLkxjLnNoaWZ0KCksIHRoaXMuTm8ucmVzZXQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIVZ0KHQpKSB0aHJvdyB0O1xuIC8vIEZhaWx1cmUgd2lsbCBiZSBoYW5kbGVkIGJ5IEFzeW5jUXVldWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQyhcIkFzeW5jUXVldWVcIiwgXCJPcGVyYXRpb24gZmFpbGVkIHdpdGggcmV0cnlhYmxlIGVycm9yOiBcIiArIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5MYy5sZW5ndGggPiAwICYmIFxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGFkZGl0aW9uYWwgb3BlcmF0aW9ucywgd2UgcmUtc2NoZWR1bGUgYHJldHJ5TmV4dE9wKClgLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gcnVuIHJldHJ5YWJsZSBvcGVyYXRpb25zIHRoYXQgZmFpbGVkIGR1cmluZ1xuICAgICAgICAgICAgLy8gdGhlaXIgaW5pdGlhbCBhdHRlbXB0IHNpbmNlIHdlIGRvbid0IGtub3cgd2hldGhlciB0aGV5IGFyZSBhbHJlYWR5XG4gICAgICAgICAgICAvLyBlbnF1ZXVlZC4gSWYsIGZvciBleGFtcGxlLCBgb3AxYCwgYG9wMmAsIGBvcDNgIGFyZSBlbnF1ZXVlZCBhbmQgYG9wMWBcbiAgICAgICAgICAgIC8vIG5lZWRzIHRvICBiZSByZS1ydW4sIHdlIHdpbGwgcnVuIGBvcDFgLCBgb3AxYCwgYG9wMmAgdXNpbmcgdGhlXG4gICAgICAgICAgICAvLyBhbHJlYWR5IGVucXVldWVkIGNhbGxzIHRvIGByZXRyeU5leHRPcCgpYC4gYG9wMygpYCB3aWxsIHRoZW4gcnVuIGluIHRoZVxuICAgICAgICAgICAgLy8gY2FsbCBzY2hlZHVsZWQgaGVyZS5cbiAgICAgICAgICAgIC8vIFNpbmNlIGBiYWNrb2ZmQW5kUnVuKClgIGNhbmNlbHMgYW4gZXhpc3RpbmcgYmFja29mZiBhbmQgc2NoZWR1bGVzIGFcbiAgICAgICAgICAgIC8vIG5ldyBiYWNrb2ZmIG9uIGV2ZXJ5IGNhbGwsIHRoZXJlIGlzIG9ubHkgZXZlciBhIHNpbmdsZSBhZGRpdGlvbmFsXG4gICAgICAgICAgICAvLyBvcGVyYXRpb24gaW4gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgdGhpcy5Oby5SbygoKCkgPT4gdGhpcy5KYygpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSGModCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5CYy50aGVuKCgoKSA9PiAodGhpcy5HYyA9ICEwLCB0KCkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5LYyA9IHQsIHRoaXMuR2MgPSAhMTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBcbiAgICAgICAgICAgIC8qKlxuICogQ2hyb21lIGluY2x1ZGVzIEVycm9yLm1lc3NhZ2UgaW4gRXJyb3Iuc3RhY2suIE90aGVyIGJyb3dzZXJzIGRvIG5vdC5cbiAqIFRoaXMgcmV0dXJucyBleHBlY3RlZCBvdXRwdXQgb2YgbWVzc2FnZSArIHN0YWNrIHdoZW4gYXZhaWxhYmxlLlxuICogQHBhcmFtIGVycm9yIC0gRXJyb3Igb3IgRmlyZXN0b3JlRXJyb3JcbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGxldCBlID0gdC5tZXNzYWdlIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgdC5zdGFjayAmJiAoZSA9IHQuc3RhY2suaW5jbHVkZXModC5tZXNzYWdlKSA/IHQuc3RhY2sgOiB0Lm1lc3NhZ2UgKyBcIlxcblwiICsgdC5zdGFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAodCk7XG4gICAgICAgICAgICAvLyBSZS10aHJvdyB0aGUgZXJyb3Igc28gdGhhdCB0aGlzLnRhaWwgYmVjb21lcyBhIHJlamVjdGVkIFByb21pc2UgYW5kXG4gICAgICAgICAgICAvLyBhbGwgZnVydGhlciBhdHRlbXB0cyB0byBjaGFpbiAodmlhIC50aGVuKSB3aWxsIGp1c3Qgc2hvcnQtY2lyY3VpdFxuICAgICAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgcmVqZWN0ZWQgUHJvbWlzZS5cbiAgICAgICAgICAgIHRocm93IHgoXCJJTlRFUk5BTCBVTkhBTkRMRUQgRVJST1I6IFwiLCBlKSwgdDtcbiAgICAgICAgfSkpLnRoZW4oKHQgPT4gKHRoaXMuR2MgPSAhMSwgdCkpKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuQmMgPSBlLCBlO1xuICAgIH1cbiAgICBlbnF1ZXVlQWZ0ZXJEZWxheSh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuemMoKSwgXG4gICAgICAgIC8vIEZhc3QtZm9yd2FyZCBkZWxheXMgZm9yIHRpbWVySWRzIHRoYXQgaGF2ZSBiZWVuIG92ZXJyaWRlbi5cbiAgICAgICAgdGhpcy5qYy5pbmRleE9mKHQpID4gLTEgJiYgKGUgPSAwKTtcbiAgICAgICAgY29uc3QgcyA9IE11LmNyZWF0ZUFuZFNjaGVkdWxlKHRoaXMsIHQsIGUsIG4sICh0ID0+IHRoaXMuWWModCkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucWMucHVzaChzKSwgcztcbiAgICB9XG4gICAgemMoKSB7XG4gICAgICAgIHRoaXMuS2MgJiYgTygpO1xuICAgIH1cbiAgICB2ZXJpZnlPcGVyYXRpb25JblByb2dyZXNzKCkge31cbiAgICAvKipcbiAgICAgKiBXYWl0cyB1bnRpbCBhbGwgY3VycmVudGx5IHF1ZXVlZCB0YXNrcyBhcmUgZmluaXNoZWQgZXhlY3V0aW5nLiBEZWxheWVkXG4gICAgICogb3BlcmF0aW9ucyBhcmUgbm90IHJ1bi5cbiAgICAgKi8gICAgYXN5bmMgWGMoKSB7XG4gICAgICAgIC8vIE9wZXJhdGlvbnMgaW4gdGhlIHF1ZXVlIHByaW9yIHRvIGRyYWluaW5nIG1heSBoYXZlIGVucXVldWVkIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gb3BlcmF0aW9ucy4gS2VlcCBkcmFpbmluZyB0aGUgcXVldWUgdW50aWwgdGhlIHRhaWwgaXMgbm8gbG9uZ2VyIGFkdmFuY2VkLFxuICAgICAgICAvLyB3aGljaCBpbmRpY2F0ZXMgdGhhdCBubyBtb3JlIG5ldyBvcGVyYXRpb25zIHdlcmUgZW5xdWV1ZWQgYW5kIHRoYXQgYWxsXG4gICAgICAgIC8vIG9wZXJhdGlvbnMgd2VyZSBleGVjdXRlZC5cbiAgICAgICAgbGV0IHQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHQgPSB0aGlzLkJjLCBhd2FpdCB0O1xuICAgICAgICB9IHdoaWxlICh0ICE9PSB0aGlzLkJjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBEZXRlcm1pbmUgaWYgYSBkZWxheWVkIG9wZXJhdGlvbiB3aXRoIGEgcGFydGljdWxhciBUaW1lcklkXG4gICAgICogZXhpc3RzLlxuICAgICAqLyAgICBaYyh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLnFjKSBpZiAoZS50aW1lcklkID09PSB0KSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBSdW5zIHNvbWUgb3IgYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucyBlYXJseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXN0VGltZXJJZCAtIERlbGF5ZWQgb3BlcmF0aW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoaXMgVGltZXJJZFxuICAgICAqIHdpbGwgYmUgZHJhaW5lZC4gUGFzcyBUaW1lcklkLkFsbCB0byBydW4gYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGFsbCBvcGVyYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICovICAgIHRhKHQpIHtcbiAgICAgICAgLy8gTm90ZSB0aGF0IGRyYWluaW5nIG1heSBnZW5lcmF0ZSBtb3JlIGRlbGF5ZWQgb3BzLCBzbyB3ZSBkbyB0aGF0IGZpcnN0LlxuICAgICAgICByZXR1cm4gdGhpcy5YYygpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFJ1biBvcHMgaW4gdGhlIHNhbWUgb3JkZXIgdGhleSdkIHJ1biBpZiB0aGV5IHJhbiBuYXR1cmFsbHkuXG4gICAgICAgICAgICB0aGlzLnFjLnNvcnQoKCh0LCBlKSA9PiB0LnRhcmdldFRpbWVNcyAtIGUudGFyZ2V0VGltZU1zKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5xYykgaWYgKGUuc2tpcERlbGF5KCksIFwiYWxsXCIgLyogQWxsICovICE9PSB0ICYmIGUudGltZXJJZCA9PT0gdCkgYnJlYWs7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5YYygpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciBUZXN0czogU2tpcCBhbGwgc3Vic2VxdWVudCBkZWxheXMgZm9yIGEgdGltZXIgaWQuXG4gICAgICovICAgIGVhKHQpIHtcbiAgICAgICAgdGhpcy5qYy5wdXNoKHQpO1xuICAgIH1cbiAgICAvKiogQ2FsbGVkIG9uY2UgYSBEZWxheWVkT3BlcmF0aW9uIGlzIHJ1biBvciBjYW5jZWxlZC4gKi8gICAgWWModCkge1xuICAgICAgICAvLyBOT1RFOiBpbmRleE9mIC8gc2xpY2UgYXJlIE8obiksIGJ1dCBkZWxheWVkT3BlcmF0aW9ucyBpcyBleHBlY3RlZCB0byBiZSBzbWFsbC5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMucWMuaW5kZXhPZih0KTtcbiAgICAgICAgdGhpcy5xYy5zcGxpY2UoZSwgMSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBPYSh0KSB7XG4gICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGFuIG9iamVjdCBhbmQgY29udGFpbnMgYXQgbGVhc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWRcbiAqIG1ldGhvZHMuXG4gKi9cbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCBudWxsID09PSB0KSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IG4gPSB0O1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkgaWYgKHQgaW4gbiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG5bdF0pIHJldHVybiAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKlxuICogUmVwcmVzZW50cyB0aGUgdGFzayBvZiBsb2FkaW5nIGEgRmlyZXN0b3JlIGJ1bmRsZS4gSXQgcHJvdmlkZXMgcHJvZ3Jlc3Mgb2YgYnVuZGxlXG4gKiBsb2FkaW5nLCBhcyB3ZWxsIGFzIHRhc2sgY29tcGxldGlvbiBhbmQgZXJyb3IgZXZlbnRzLlxuICpcbiAqIFRoZSBBUEkgaXMgY29tcGF0aWJsZSB3aXRoIGBQcm9taXNlPExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3M+YC5cbiAqLyAodCwgWyBcIm5leHRcIiwgXCJlcnJvclwiLCBcImNvbXBsZXRlXCIgXSk7XG59XG5cbmNsYXNzIE1hIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlciA9IHt9LCB0aGlzLl90YXNrQ29tcGxldGlvblJlc29sdmVyID0gbmV3IFUsIHRoaXMuX2xhc3RQcm9ncmVzcyA9IHtcbiAgICAgICAgICAgIHRhc2tTdGF0ZTogXCJSdW5uaW5nXCIsXG4gICAgICAgICAgICB0b3RhbEJ5dGVzOiAwLFxuICAgICAgICAgICAgdG90YWxEb2N1bWVudHM6IDAsXG4gICAgICAgICAgICBieXRlc0xvYWRlZDogMCxcbiAgICAgICAgICAgIGRvY3VtZW50c0xvYWRlZDogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgZnVuY3Rpb25zIHRvIGxpc3RlbiB0byBidW5kbGUgbG9hZGluZyBwcm9ncmVzcyBldmVudHMuXG4gICAgICogQHBhcmFtIG5leHQgLSBDYWxsZWQgd2hlbiB0aGVyZSBpcyBhIHByb2dyZXNzIHVwZGF0ZSBmcm9tIGJ1bmRsZSBsb2FkaW5nLiBUeXBpY2FsbHkgYG5leHRgIGNhbGxzIG9jY3VyXG4gICAgICogICBlYWNoIHRpbWUgYSBGaXJlc3RvcmUgZG9jdW1lbnQgaXMgbG9hZGVkIGZyb20gdGhlIGJ1bmRsZS5cbiAgICAgKiBAcGFyYW0gZXJyb3IgLSBDYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIGJ1bmRsZSBsb2FkaW5nLiBUaGUgdGFzayBhYm9ydHMgYWZ0ZXIgcmVwb3J0aW5nIHRoZVxuICAgICAqICAgZXJyb3IsIGFuZCB0aGVyZSBzaG91bGQgYmUgbm8gbW9yZSB1cGRhdGVzIGFmdGVyIHRoaXMuXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIC0gQ2FsbGVkIHdoZW4gdGhlIGxvYWRpbmcgdGFzayBpcyBjb21wbGV0ZS5cbiAgICAgKi8gICAgb25Qcm9ncmVzcyh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiB0LFxuICAgICAgICAgICAgZXJyb3I6IGUsXG4gICAgICAgICAgICBjb21wbGV0ZTogblxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIHRoZSBgUHJvbWlzZTxMb2FkQnVuZGxlVGFza1Byb2dyZXNzPi5jYXRjaGAgaW50ZXJmYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9uUmVqZWN0ZWQgLSBDYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIGJ1bmRsZSBsb2FkaW5nLlxuICAgICAqLyAgICBjYXRjaCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YXNrQ29tcGxldGlvblJlc29sdmVyLnByb21pc2UuY2F0Y2godCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgdGhlIGBQcm9taXNlPExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3M+LnRoZW5gIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvbkZ1bGZpbGxlZCAtIENhbGxlZCBvbiB0aGUgY29tcGxldGlvbiBvZiB0aGUgbG9hZGluZyB0YXNrIHdpdGggYSBmaW5hbCBgTG9hZEJ1bmRsZVRhc2tQcm9ncmVzc2AgdXBkYXRlLlxuICAgICAqICAgVGhlIHVwZGF0ZSB3aWxsIGFsd2F5cyBoYXZlIGl0cyBgdGFza1N0YXRlYCBzZXQgdG8gYFwiU3VjY2Vzc1wiYC5cbiAgICAgKiBAcGFyYW0gb25SZWplY3RlZCAtIENhbGxlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgYnVuZGxlIGxvYWRpbmcuXG4gICAgICovICAgIHRoZW4odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFza0NvbXBsZXRpb25SZXNvbHZlci5wcm9taXNlLnRoZW4odCwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIGFsbCBvYnNlcnZlcnMgdGhhdCBidW5kbGUgbG9hZGluZyBoYXMgY29tcGxldGVkLCB3aXRoIGEgcHJvdmlkZWRcbiAgICAgKiBgTG9hZEJ1bmRsZVRhc2tQcm9ncmVzc2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi8gICAgX2NvbXBsZXRlV2l0aCh0KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVByb2dyZXNzKHQpLCB0aGlzLl9wcm9ncmVzc09ic2VydmVyLmNvbXBsZXRlICYmIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIuY29tcGxldGUoKSwgXG4gICAgICAgIHRoaXMuX3Rhc2tDb21wbGV0aW9uUmVzb2x2ZXIucmVzb2x2ZSh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgYWxsIG9ic2VydmVycyB0aGF0IGJ1bmRsZSBsb2FkaW5nIGhhcyBmYWlsZWQsIHdpdGggYSBwcm92aWRlZFxuICAgICAqIGBFcnJvcmAgYXMgdGhlIHJlYXNvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovICAgIF9mYWlsV2l0aCh0KSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzcy50YXNrU3RhdGUgPSBcIkVycm9yXCIsIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIubmV4dCAmJiB0aGlzLl9wcm9ncmVzc09ic2VydmVyLm5leHQodGhpcy5fbGFzdFByb2dyZXNzKSwgXG4gICAgICAgIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIuZXJyb3IgJiYgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5lcnJvcih0KSwgdGhpcy5fdGFza0NvbXBsZXRpb25SZXNvbHZlci5yZWplY3QodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIGEgcHJvZ3Jlc3MgdXBkYXRlIG9mIGxvYWRpbmcgYSBidW5kbGUuXG4gICAgICogQHBhcmFtIHByb2dyZXNzIC0gVGhlIG5ldyBwcm9ncmVzcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovICAgIF91cGRhdGVQcm9ncmVzcyh0KSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzcyA9IHQsIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIubmV4dCAmJiB0aGlzLl9wcm9ncmVzc09ic2VydmVyLm5leHQodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIERPTUV4Y2VwdGlvbiBlcnJvciBjb2RlIGNvbnN0YW50cy4gKi8gY29uc3QgRmEgPSAtMTtcblxuLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKi9cbmNsYXNzICRhIGV4dGVuZHMgSmMge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICBzdXBlcih0LCBlLCBuLCBzKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGl0J3MgYSB7QGxpbmsgRmlyZXN0b3JlfSBvciBGaXJlc3RvcmUgTGl0ZSBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZmlyZXN0b3JlXCIsIHRoaXMuX3F1ZXVlID0gbmV3IGthLCB0aGlzLl9wZXJzaXN0ZW5jZUtleSA9IChudWxsID09IHMgPyB2b2lkIDAgOiBzLm5hbWUpIHx8IFwiW0RFRkFVTFRdXCI7XG4gICAgfVxuICAgIF90ZXJtaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJlc3RvcmVDbGllbnQgfHwgXG4gICAgICAgIC8vIFRoZSBjbGllbnQgbXVzdCBiZSBpbml0aWFsaXplZCB0byBlbnN1cmUgdGhhdCBhbGwgc3Vic2VxdWVudCBBUElcbiAgICAgICAgLy8gdXNhZ2UgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgcWEodGhpcyksIHRoaXMuX2ZpcmVzdG9yZUNsaWVudC50ZXJtaW5hdGUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEZpcmVzdG9yZX0gd2l0aCB0aGUgcHJvdmlkZWQgc2V0dGluZ3MuXG4gKiBDYW4gb25seSBiZSBjYWxsZWQgYmVmb3JlIGFueSBvdGhlciBmdW5jdGlvbiwgaW5jbHVkaW5nXG4gKiB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uIElmIHRoZSBjdXN0b20gc2V0dGluZ3MgYXJlIGVtcHR5LCB0aGlzIGZ1bmN0aW9uIGlzXG4gKiBlcXVpdmFsZW50IHRvIGNhbGxpbmcge0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9LlxuICpcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHdpdGggd2hpY2ggdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHdpbGxcbiAqIGJlIGFzc29jaWF0ZWQuXG4gKiBAcGFyYW0gc2V0dGluZ3MgLSBBIHNldHRpbmdzIG9iamVjdCB0byBjb25maWd1cmUgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlLlxuICogQHBhcmFtIGRhdGFiYXNlSWQgLSBUaGUgbmFtZSBvZiBkYXRhYmFzZS5cbiAqIEByZXR1cm5zIEEgbmV3bHkgaW5pdGlhbGl6ZWQge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKi8gZnVuY3Rpb24gQmEodCwgZSwgbikge1xuICAgIG4gfHwgKG4gPSBcIihkZWZhdWx0KVwiKTtcbiAgICBjb25zdCBzID0gX2dldFByb3ZpZGVyKHQsIFwiZmlyZXN0b3JlXCIpO1xuICAgIGlmIChzLmlzSW5pdGlhbGl6ZWQobikpIHtcbiAgICAgICAgY29uc3QgdCA9IHMuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IG5cbiAgICAgICAgfSksIGkgPSBzLmdldE9wdGlvbnMobik7XG4gICAgICAgIGlmIChkZWVwRXF1YWwoaSwgZSkpIHJldHVybiB0O1xuICAgICAgICB0aHJvdyBuZXcgTChCLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHdpdGggZGlmZmVyZW50IG9wdGlvbnMuIFRvIGF2b2lkIHRoaXMgZXJyb3IsIGNhbGwgaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIHdpdGggdGhlIHNhbWUgb3B0aW9ucyBhcyB3aGVuIGl0IHdhcyBvcmlnaW5hbGx5IGNhbGxlZCwgb3IgY2FsbCBnZXRGaXJlc3RvcmUoKSB0byByZXR1cm4gdGhlIGFscmVhZHkgaW5pdGlhbGl6ZWQgaW5zdGFuY2UuXCIpO1xuICAgIH1cbiAgICBpZiAodm9pZCAwICE9PSBlLmNhY2hlU2l6ZUJ5dGVzICYmIC0xICE9PSBlLmNhY2hlU2l6ZUJ5dGVzICYmIGUuY2FjaGVTaXplQnl0ZXMgPCAxMDQ4NTc2KSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiY2FjaGVTaXplQnl0ZXMgbXVzdCBiZSBhdCBsZWFzdCAxMDQ4NTc2XCIpO1xuICAgIHJldHVybiBzLmluaXRpYWxpemUoe1xuICAgICAgICBvcHRpb25zOiBlLFxuICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gTGEoZSwgbikge1xuICAgIGNvbnN0IHMgPSBcIm9iamVjdFwiID09IHR5cGVvZiBlID8gZSA6IGdldEFwcCgpLCBpID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGUgOiBuIHx8IFwiKGRlZmF1bHQpXCIsIHIgPSBfZ2V0UHJvdmlkZXIocywgXCJmaXJlc3RvcmVcIikuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgaWRlbnRpZmllcjogaVxuICAgIH0pO1xuICAgIGlmICghci5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgY29uc3QgdCA9IGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydChcImZpcmVzdG9yZVwiKTtcbiAgICAgICAgdCAmJiBZYyhyLCAuLi50KTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gVWEodCkge1xuICAgIHJldHVybiB0Ll9maXJlc3RvcmVDbGllbnQgfHwgcWEodCksIHQuX2ZpcmVzdG9yZUNsaWVudC52ZXJpZnlOb3RUZXJtaW5hdGVkKCksIHQuX2ZpcmVzdG9yZUNsaWVudDtcbn1cblxuZnVuY3Rpb24gcWEodCkge1xuICAgIHZhciBlO1xuICAgIGNvbnN0IG4gPSB0Ll9mcmVlemVTZXR0aW5ncygpLCBzID0gZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4gbmV3IGVlKHQsIGUsIG4sIHMuaG9zdCwgcy5zc2wsIHMuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZywgcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcsIHMudXNlRmV0Y2hTdHJlYW1zKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvLyBzZXR0aW5ncygpIGRlZmF1bHRzOlxuICAgICh0Ll9kYXRhYmFzZUlkLCAobnVsbCA9PT0gKGUgPSB0Ll9hcHApIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUub3B0aW9ucy5hcHBJZCkgfHwgXCJcIiwgdC5fcGVyc2lzdGVuY2VLZXksIG4pO1xuICAgIHQuX2ZpcmVzdG9yZUNsaWVudCA9IG5ldyBfYSh0Ll9hdXRoQ3JlZGVudGlhbHMsIHQuX2FwcENoZWNrQ3JlZGVudGlhbHMsIHQuX3F1ZXVlLCBzKTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBlbmFibGUgcGVyc2lzdGVudCBzdG9yYWdlLCBpZiBwb3NzaWJsZS5cbiAqXG4gKiBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgYW55IG90aGVyIGZ1bmN0aW9ucyAob3RoZXIgdGhhblxuICoge0BsaW5rIGluaXRpYWxpemVGaXJlc3RvcmV9LCB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0gb3JcbiAqIHtAbGluayBjbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlfS5cbiAqXG4gKiBJZiB0aGlzIGZhaWxzLCBgZW5hYmxlSW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgd2lsbCByZWplY3QgdGhlIHByb21pc2UgaXRcbiAqIHJldHVybnMuIE5vdGUgdGhhdCBldmVuIGFmdGVyIHRoaXMgZmFpbHVyZSwgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHdpbGxcbiAqIHJlbWFpbiB1c2FibGUsIGhvd2V2ZXIgb2ZmbGluZSBwZXJzaXN0ZW5jZSB3aWxsIGJlIGRpc2FibGVkLlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHJlYXNvbnMgd2h5IHRoaXMgY2FuIGZhaWwsIHdoaWNoIGNhbiBiZSBpZGVudGlmaWVkIGJ5XG4gKiB0aGUgYGNvZGVgIG9uIHRoZSBlcnJvci5cbiAqXG4gKiAgICogZmFpbGVkLXByZWNvbmRpdGlvbjogVGhlIGFwcCBpcyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciBicm93c2VyIHRhYi5cbiAqICAgKiB1bmltcGxlbWVudGVkOiBUaGUgYnJvd3NlciBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgb2ZmbGluZVxuICogICAgIHBlcnNpc3RlbmNlIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBUaGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgdG8gZW5hYmxlIHBlcnNpc3RlbmNlIGZvci5cbiAqIEBwYXJhbSBwZXJzaXN0ZW5jZVNldHRpbmdzIC0gT3B0aW9uYWwgc2V0dGluZ3Mgb2JqZWN0IHRvIGNvbmZpZ3VyZVxuICogcGVyc2lzdGVuY2UuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlcHJlc2VudHMgc3VjY2Vzc2Z1bGx5IGVuYWJsaW5nIHBlcnNpc3RlbnQgc3RvcmFnZS5cbiAqLyBmdW5jdGlvbiBLYSh0LCBlKSB7XG4gICAgWmEodCA9IGpjKHQsICRhKSk7XG4gICAgY29uc3QgbiA9IFVhKHQpLCBzID0gdC5fZnJlZXplU2V0dGluZ3MoKSwgaSA9IG5ldyBMYztcbiAgICByZXR1cm4gUWEobiwgaSwgbmV3ICRjKGksIHMuY2FjaGVTaXplQnl0ZXMsIG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuZm9yY2VPd25lcnNoaXApKTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBlbmFibGUgbXVsdGktdGFiIHBlcnNpc3RlbnQgc3RvcmFnZSwgaWYgcG9zc2libGUuIElmIGVuYWJsZWRcbiAqIGFjcm9zcyBhbGwgdGFicywgYWxsIG9wZXJhdGlvbnMgc2hhcmUgYWNjZXNzIHRvIGxvY2FsIHBlcnNpc3RlbmNlLCBpbmNsdWRpbmdcbiAqIHNoYXJlZCBleGVjdXRpb24gb2YgcXVlcmllcyBhbmQgbGF0ZW5jeS1jb21wZW5zYXRlZCBsb2NhbCBkb2N1bWVudCB1cGRhdGVzXG4gKiBhY3Jvc3MgYWxsIGNvbm5lY3RlZCBpbnN0YW5jZXMuXG4gKlxuICogSWYgdGhpcyBmYWlscywgYGVuYWJsZU11bHRpVGFiSW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgd2lsbCByZWplY3QgdGhlIHByb21pc2VcbiAqIGl0IHJldHVybnMuIE5vdGUgdGhhdCBldmVuIGFmdGVyIHRoaXMgZmFpbHVyZSwgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHdpbGxcbiAqIHJlbWFpbiB1c2FibGUsIGhvd2V2ZXIgb2ZmbGluZSBwZXJzaXN0ZW5jZSB3aWxsIGJlIGRpc2FibGVkLlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHJlYXNvbnMgd2h5IHRoaXMgY2FuIGZhaWwsIHdoaWNoIGNhbiBiZSBpZGVudGlmaWVkIGJ5XG4gKiB0aGUgYGNvZGVgIG9uIHRoZSBlcnJvci5cbiAqXG4gKiAgICogZmFpbGVkLXByZWNvbmRpdGlvbjogVGhlIGFwcCBpcyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciBicm93c2VyIHRhYiBhbmRcbiAqICAgICBtdWx0aS10YWIgaXMgbm90IGVuYWJsZWQuXG4gKiAgICogdW5pbXBsZW1lbnRlZDogVGhlIGJyb3dzZXIgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIG9mZmxpbmVcbiAqICAgICBwZXJzaXN0ZW5jZSBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGVuYWJsZSBwZXJzaXN0ZW5jZSBmb3IuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlcHJlc2VudHMgc3VjY2Vzc2Z1bGx5IGVuYWJsaW5nIHBlcnNpc3RlbnRcbiAqIHN0b3JhZ2UuXG4gKi8gZnVuY3Rpb24gR2EodCkge1xuICAgIFphKHQgPSBqYyh0LCAkYSkpO1xuICAgIGNvbnN0IGUgPSBVYSh0KSwgbiA9IHQuX2ZyZWV6ZVNldHRpbmdzKCksIHMgPSBuZXcgTGM7XG4gICAgcmV0dXJuIFFhKGUsIHMsIG5ldyBCYyhzLCBuLmNhY2hlU2l6ZUJ5dGVzKSk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGJvdGggdGhlIGBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJgIGFuZCBgT25saW5lQ29tcG9uZW50UHJvdmlkZXJgLlxuICogSWYgdGhlIG9wZXJhdGlvbiBmYWlscyB3aXRoIGEgcmVjb3ZlcmFibGUgZXJyb3IgKHNlZVxuICogYGNhblJlY292ZXJGcm9tSW5kZXhlZERiRXJyb3IoKWAgYmVsb3cpLCB0aGUgcmV0dXJuZWQgUHJvbWlzZSBpcyByZWplY3RlZFxuICogYnV0IHRoZSBjbGllbnQgcmVtYWlucyB1c2FibGUuXG4gKi8gZnVuY3Rpb24gUWEodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBuZXcgVTtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHdhKHQsIG4pLCBhd2FpdCBtYSh0LCBlKSwgcy5yZXNvbHZlKCk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0O1xuICAgICAgICAgICAgaWYgKCFcbiAgICAgICAgICAgIC8qKlxuICogRGVjaWRlcyB3aGV0aGVyIHRoZSBwcm92aWRlZCBlcnJvciBhbGxvd3MgdXMgdG8gZ3JhY2VmdWxseSBkaXNhYmxlXG4gKiBwZXJzaXN0ZW5jZSAoYXMgb3Bwb3NlZCB0byBjcmFzaGluZyB0aGUgY2xpZW50KS5cbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmIChcIkZpcmViYXNlRXJyb3JcIiA9PT0gdC5uYW1lKSByZXR1cm4gdC5jb2RlID09PSBCLkZBSUxFRF9QUkVDT05ESVRJT04gfHwgdC5jb2RlID09PSBCLlVOSU1QTEVNRU5URUQ7XG4gICAgICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIERPTUV4Y2VwdGlvbiAmJiB0IGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uKSBcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgYSBmZXcga25vd24gY2lyY3Vtc3RhbmNlcyB3aGVyZSB3ZSBjYW4gb3BlbiBJbmRleGVkRGIgYnV0XG4gICAgICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIHJlYWQvd3JpdGUgd2lsbCBmYWlsIChlLmcuIHF1b3RhIGV4Y2VlZGVkKS4gRm9yXG4gICAgICAgICAgICAgICAgLy8gd2VsbC11bmRlcnN0b29kIGNhc2VzLCB3ZSBhdHRlbXB0IHRvIGRldGVjdCB0aGVzZSBhbmQgdGhlbiBncmFjZWZ1bGx5XG4gICAgICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBSYXRoZXIgdGhhbiBjb250aW51ZSB0byBhZGQgdG8gdGhpcyBsaXN0LCB3ZSBjb3VsZCBkZWNpZGUgdG9cbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgZmFsbCBiYWNrLCB3aXRoIHRoZSByaXNrIHRoYXQgd2UgbWlnaHQgYWNjaWRlbnRhbGx5IGhpZGUgZXJyb3JzXG4gICAgICAgICAgICAgICAgLy8gcmVwcmVzZW50aW5nIGFjdHVhbCBTREsgYnVncy5cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBicm93c2VyIGlzIG91dCBvZiBxdW90YSB3ZSBjb3VsZCBnZXQgZWl0aGVyIHF1b3RhIGV4Y2VlZGVkXG4gICAgICAgICAgICAgICAgLy8gb3IgYW4gYWJvcnRlZCBlcnJvciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZXJyb3IgaGFwcGVuZWQgZHVyaW5nXG4gICAgICAgICAgICAgICAgLy8gc2NoZW1hIG1pZ3JhdGlvbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gMjIgPT09IHQuY29kZSB8fCAyMCA9PT0gdC5jb2RlIHx8IFxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggUHJpdmF0ZSBCcm93c2luZyBtb2RlIGRpc2FibGVzIEluZGV4ZWREYiBhbmQgcmV0dXJuc1xuICAgICAgICAgICAgICAgIC8vIElOVkFMSURfU1RBVEUgZm9yIGFueSB1c2FnZS5cbiAgICAgICAgICAgICAgICAxMSA9PT0gdC5jb2RlO1xuICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICogQ2xlYXJzIHRoZSBwZXJzaXN0ZW50IHN0b3JhZ2UuIFRoaXMgaW5jbHVkZXMgcGVuZGluZyB3cml0ZXMgYW5kIGNhY2hlZFxuICogZG9jdW1lbnRzLlxuICpcbiAqIE11c3QgYmUgY2FsbGVkIHdoaWxlIHRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSBpcyBub3Qgc3RhcnRlZCAoYWZ0ZXIgdGhlIGFwcCBpc1xuICogdGVybWluYXRlZCBvciB3aGVuIHRoZSBhcHAgaXMgZmlyc3QgaW5pdGlhbGl6ZWQpLiBPbiBzdGFydHVwLCB0aGlzIGZ1bmN0aW9uXG4gKiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgb3RoZXIgZnVuY3Rpb25zIChvdGhlciB0aGFuIHtAbGlua1xuICogaW5pdGlhbGl6ZUZpcmVzdG9yZX0gb3Ige0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9KSkuIElmIHRoZSB7QGxpbmsgRmlyZXN0b3JlfVxuICogaW5zdGFuY2UgaXMgc3RpbGwgcnVubmluZywgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBlcnJvciBjb2RlXG4gKiBvZiBgZmFpbGVkLXByZWNvbmRpdGlvbmAuXG4gKlxuICogTm90ZTogYGNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgaXMgcHJpbWFyaWx5IGludGVuZGVkIHRvIGhlbHAgd3JpdGVcbiAqIHJlbGlhYmxlIHRlc3RzIHRoYXQgdXNlIENsb3VkIEZpcmVzdG9yZS4gSXQgdXNlcyBhbiBlZmZpY2llbnQgbWVjaGFuaXNtIGZvclxuICogZHJvcHBpbmcgZXhpc3RpbmcgZGF0YSBidXQgZG9lcyBub3QgYXR0ZW1wdCB0byBzZWN1cmVseSBvdmVyd3JpdGUgb3JcbiAqIG90aGVyd2lzZSBtYWtlIGNhY2hlZCBkYXRhIHVucmVjb3ZlcmFibGUuIEZvciBhcHBsaWNhdGlvbnMgdGhhdCBhcmUgc2Vuc2l0aXZlXG4gKiB0byB0aGUgZGlzY2xvc3VyZSBvZiBjYWNoZWQgZGF0YSBpbiBiZXR3ZWVuIHVzZXIgc2Vzc2lvbnMsIHdlIHN0cm9uZ2x5XG4gKiByZWNvbW1lbmQgbm90IGVuYWJsaW5nIHBlcnNpc3RlbmNlIGF0IGFsbC5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGNsZWFyIHBlcnNpc3RlbmNlIGZvci5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgcGVyc2lzdGVudCBzdG9yYWdlIGlzXG4gKiBjbGVhcmVkLiBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYW4gZXJyb3IuXG4gKi8gKGUpKSB0aHJvdyBlO1xuICAgICAgICAgICAgTihcIkVycm9yIGVuYWJsaW5nIG9mZmxpbmUgcGVyc2lzdGVuY2UuIEZhbGxpbmcgYmFjayB0byBwZXJzaXN0ZW5jZSBkaXNhYmxlZDogXCIgKyBlKSwgXG4gICAgICAgICAgICBzLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pKS50aGVuKCgoKSA9PiBzLnByb21pc2UpKTtcbn1cblxuZnVuY3Rpb24gamEodCkge1xuICAgIGlmICh0Ll9pbml0aWFsaXplZCAmJiAhdC5fdGVybWluYXRlZCkgdGhyb3cgbmV3IEwoQi5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlBlcnNpc3RlbmNlIGNhbiBvbmx5IGJlIGNsZWFyZWQgYmVmb3JlIGEgRmlyZXN0b3JlIGluc3RhbmNlIGlzIGluaXRpYWxpemVkIG9yIGFmdGVyIGl0IGlzIHRlcm1pbmF0ZWQuXCIpO1xuICAgIGNvbnN0IGUgPSBuZXcgVTtcbiAgICByZXR1cm4gdC5fcXVldWUuZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGFzeW5jIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJ0LkMoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0ICsgXCJtYWluXCI7XG4gICAgICAgICAgICAgICAgYXdhaXQgYnQuZGVsZXRlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAgICAgICAgIC8qKlxuICogQ29tcGFyZXMgdHdvIGFycmF5IGZvciBlcXVhbGl0eSB1c2luZyBjb21wYXJhdG9yLiBUaGUgbWV0aG9kIGNvbXB1dGVzIHRoZVxuICogaW50ZXJzZWN0aW9uIGFuZCBpbnZva2VzIGBvbkFkZGAgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBpbiBgYWZ0ZXJgIGJ1dCBub3RcbiAqIGBiZWZvcmVgLiBgb25SZW1vdmVgIGlzIGludm9rZWQgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gYGJlZm9yZWAgYnV0IG1pc3NpbmdcbiAqIGZyb20gYGFmdGVyYC5cbiAqXG4gKiBUaGUgbWV0aG9kIGNyZWF0ZXMgYSBjb3B5IG9mIGJvdGggYGJlZm9yZWAgYW5kIGBhZnRlcmAgYW5kIHJ1bnMgaW4gTyhuIGxvZ1xuICogbiksIHdoZXJlIG4gaXMgdGhlIHNpemUgb2YgdGhlIHR3byBsaXN0cy5cbiAqXG4gKiBAcGFyYW0gYmVmb3JlIC0gVGhlIGVsZW1lbnRzIHRoYXQgZXhpc3QgaW4gdGhlIG9yaWdpbmFsIGFycmF5LlxuICogQHBhcmFtIGFmdGVyIC0gVGhlIGVsZW1lbnRzIHRvIGRpZmYgYWdhaW5zdCB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKiBAcGFyYW0gY29tcGFyYXRvciAtIFRoZSBjb21wYXJhdG9yIGZvciB0aGUgZWxlbWVudHMgaW4gYmVmb3JlIGFuZCBhZnRlci5cbiAqIEBwYXJhbSBvbkFkZCAtIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBldmVyeSBlbGVtZW50IHRoYXQgaXMgcGFydCBvZiBgXG4gKiBhZnRlcmAgYnV0IG5vdCBgYmVmb3JlYC5cbiAqIEBwYXJhbSBvblJlbW92ZSAtIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBldmVyeSBlbGVtZW50IHRoYXQgaXMgcGFydCBvZlxuICogYGJlZm9yZWAgYnV0IG5vdCBgYWZ0ZXJgLlxuICovIChnbyh0Ll9kYXRhYmFzZUlkLCB0Ll9wZXJzaXN0ZW5jZUtleSkpLCBlLnJlc29sdmUoKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgZS5yZWplY3QodCk7XG4gICAgICAgIH1cbiAgICB9KSksIGUucHJvbWlzZTtcbn1cblxuLyoqXG4gKiBXYWl0cyB1bnRpbCBhbGwgY3VycmVudGx5IHBlbmRpbmcgd3JpdGVzIGZvciB0aGUgYWN0aXZlIHVzZXIgaGF2ZSBiZWVuXG4gKiBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmQuXG4gKlxuICogVGhlIHJldHVybmVkIHByb21pc2UgcmVzb2x2ZXMgaW1tZWRpYXRlbHkgaWYgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIHdyaXRlcy5cbiAqIE90aGVyd2lzZSwgdGhlIHByb21pc2Ugd2FpdHMgZm9yIGFsbCBwcmV2aW91c2x5IGlzc3VlZCB3cml0ZXMgKGluY2x1ZGluZ1xuICogdGhvc2Ugd3JpdHRlbiBpbiBhIHByZXZpb3VzIGFwcCBzZXNzaW9uKSwgYnV0IGl0IGRvZXMgbm90IHdhaXQgZm9yIHdyaXRlc1xuICogdGhhdCB3ZXJlIGFkZGVkIGFmdGVyIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQuIElmIHlvdSB3YW50IHRvIHdhaXQgZm9yXG4gKiBhZGRpdGlvbmFsIHdyaXRlcywgY2FsbCBgd2FpdEZvclBlbmRpbmdXcml0ZXMoKWAgYWdhaW4uXG4gKlxuICogQW55IG91dHN0YW5kaW5nIGB3YWl0Rm9yUGVuZGluZ1dyaXRlcygpYCBwcm9taXNlcyBhcmUgcmVqZWN0ZWQgZHVyaW5nIHVzZXJcbiAqIGNoYW5nZXMuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgd2hpY2ggcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudGx5IHBlbmRpbmcgd3JpdGVzIGhhdmUgYmVlblxuICogYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kLlxuICovIGZ1bmN0aW9uIFdhKHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IFU7XG4gICAgICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gX2MoYXdhaXQgRWEodCksIGUpKSksIGUucHJvbWlzZTtcbiAgICB9KFVhKHQgPSBqYyh0LCAkYSkpKTtcbn1cblxuLyoqXG4gKiBSZS1lbmFibGVzIHVzZSBvZiB0aGUgbmV0d29yayBmb3IgdGhpcyB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSBhZnRlciBhIHByaW9yXG4gKiBjYWxsIHRvIHtAbGluayBkaXNhYmxlTmV0d29ya30uXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCBvbmNlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGVuYWJsZWQuXG4gKi8gZnVuY3Rpb24gemEodCkge1xuICAgIHJldHVybiBiYShVYSh0ID0gamModCwgJGEpKSk7XG59XG5cbi8qKlxuICogRGlzYWJsZXMgbmV0d29yayB1c2FnZSBmb3IgdGhpcyBpbnN0YW5jZS4gSXQgY2FuIGJlIHJlLWVuYWJsZWQgdmlhIHtAbGlua1xuICogZW5hYmxlTmV0d29ya30uIFdoaWxlIHRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLCBhbnkgc25hcHNob3QgbGlzdGVuZXJzLFxuICogYGdldERvYygpYCBvciBgZ2V0RG9jcygpYCBjYWxscyB3aWxsIHJldHVybiByZXN1bHRzIGZyb20gY2FjaGUsIGFuZCBhbnkgd3JpdGVcbiAqIG9wZXJhdGlvbnMgd2lsbCBiZSBxdWV1ZWQgdW50aWwgdGhlIG5ldHdvcmsgaXMgcmVzdG9yZWQuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCBvbmNlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGRpc2FibGVkLlxuICovIGZ1bmN0aW9uIEhhKHQpIHtcbiAgICByZXR1cm4gUGEoVWEodCA9IGpjKHQsICRhKSkpO1xufVxuXG4vKipcbiAqIFRlcm1pbmF0ZXMgdGhlIHByb3ZpZGVkIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlLlxuICpcbiAqIEFmdGVyIGNhbGxpbmcgYHRlcm1pbmF0ZSgpYCBvbmx5IHRoZSBgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpYCBmdW5jdGlvblxuICogbWF5IGJlIHVzZWQuIEFueSBvdGhlciBmdW5jdGlvbiB3aWxsIHRocm93IGEgYEZpcmVzdG9yZUVycm9yYC5cbiAqXG4gKiBUbyByZXN0YXJ0IGFmdGVyIHRlcm1pbmF0aW9uLCBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgRmlyZWJhc2VGaXJlc3RvcmUgd2l0aFxuICoge0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9LlxuICpcbiAqIFRlcm1pbmF0aW9uIGRvZXMgbm90IGNhbmNlbCBhbnkgcGVuZGluZyB3cml0ZXMsIGFuZCBhbnkgcHJvbWlzZXMgdGhhdCBhcmVcbiAqIGF3YWl0aW5nIGEgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIHdpbGwgbm90IGJlIHJlc29sdmVkLiBJZiB5b3UgaGF2ZVxuICogcGVyc2lzdGVuY2UgZW5hYmxlZCwgdGhlIG5leHQgdGltZSB5b3Ugc3RhcnQgdGhpcyBpbnN0YW5jZSwgaXQgd2lsbCByZXN1bWVcbiAqIHNlbmRpbmcgdGhlc2Ugd3JpdGVzIHRvIHRoZSBzZXJ2ZXIuXG4gKlxuICogTm90ZTogVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIGNhbGxpbmcgYHRlcm1pbmF0ZSgpYCBpcyBub3QgcmVxdWlyZWQuIFRoaXNcbiAqIGZ1bmN0aW9uIGlzIHVzZWZ1bCBvbmx5IHdoZW4geW91IHdhbnQgdG8gZm9yY2UgdGhpcyBpbnN0YW5jZSB0byByZWxlYXNlIGFsbFxuICogb2YgaXRzIHJlc291cmNlcyBvciBpbiBjb21iaW5hdGlvbiB3aXRoIGBjbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlKClgIHRvXG4gKiBlbnN1cmUgdGhhdCBhbGwgbG9jYWwgc3RhdGUgaXMgZGVzdHJveWVkIGJldHdlZW4gdGVzdCBydW5zLlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgaW5zdGFuY2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5XG4gKiB0ZXJtaW5hdGVkLlxuICovIGZ1bmN0aW9uIEphKHQpIHtcbiAgICByZXR1cm4gX3JlbW92ZVNlcnZpY2VJbnN0YW5jZSh0LmFwcCwgXCJmaXJlc3RvcmVcIiwgdC5fZGF0YWJhc2VJZC5kYXRhYmFzZSksIHQuX2RlbGV0ZSgpO1xufVxuXG4vKipcbiAqIExvYWRzIGEgRmlyZXN0b3JlIGJ1bmRsZSBpbnRvIHRoZSBsb2NhbCBjYWNoZS5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGxvYWQgYnVuZGxlcyBmb3IuXG4gKiBAcGFyYW0gYnVuZGxlRGF0YSAtIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGJ1bmRsZSB0byBiZSBsb2FkZWQuIFZhbGlkXG4gKiBvYmplY3RzIGFyZSBgQXJyYXlCdWZmZXJgLCBgUmVhZGFibGVTdHJlYW08VWludDhBcnJheT5gIG9yIGBzdHJpbmdgLlxuICpcbiAqIEByZXR1cm5zIEEgYExvYWRCdW5kbGVUYXNrYCBvYmplY3QsIHdoaWNoIG5vdGlmaWVzIGNhbGxlcnMgd2l0aCBwcm9ncmVzc1xuICogdXBkYXRlcywgYW5kIGNvbXBsZXRpb24gb3IgZXJyb3IgZXZlbnRzLiBJdCBjYW4gYmUgdXNlZCBhcyBhXG4gKiBgUHJvbWlzZTxMb2FkQnVuZGxlVGFza1Byb2dyZXNzPmAuXG4gKi8gZnVuY3Rpb24gWWEodCwgZSkge1xuICAgIGNvbnN0IG4gPSBVYSh0ID0gamModCwgJGEpKSwgcyA9IG5ldyBNYTtcbiAgICByZXR1cm4geGEobiwgdC5fZGF0YWJhc2VJZCwgZSwgcyksIHM7XG59XG5cbi8qKlxuICogUmVhZHMgYSBGaXJlc3RvcmUge0BsaW5rIFF1ZXJ5fSBmcm9tIGxvY2FsIGNhY2hlLCBpZGVudGlmaWVkIGJ5IHRoZSBnaXZlblxuICogbmFtZS5cbiAqXG4gKiBUaGUgbmFtZWQgcXVlcmllcyBhcmUgcGFja2FnZWQgIGludG8gYnVuZGxlcyBvbiB0aGUgc2VydmVyIHNpZGUgKGFsb25nXG4gKiB3aXRoIHJlc3VsdGluZyBkb2N1bWVudHMpLCBhbmQgbG9hZGVkIHRvIGxvY2FsIGNhY2hlIHVzaW5nIGBsb2FkQnVuZGxlYC4gT25jZVxuICogaW4gbG9jYWwgY2FjaGUsIHVzZSB0aGlzIG1ldGhvZCB0byBleHRyYWN0IGEge0BsaW5rIFF1ZXJ5fSBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBUaGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgdG8gcmVhZCB0aGUgcXVlcnkgZnJvbS5cbiAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHF1ZXJ5LlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCB3aXRoIHRoZSBRdWVyeSBvciBgbnVsbGAuXG4gKi8gZnVuY3Rpb24gWGEodCwgZSkge1xuICAgIHJldHVybiBOYShVYSh0ID0gamModCwgJGEpKSwgZSkudGhlbigoZSA9PiBlID8gbmV3IFpjKHQsIG51bGwsIGUucXVlcnkpIDogbnVsbCkpO1xufVxuXG5mdW5jdGlvbiBaYSh0KSB7XG4gICAgaWYgKHQuX2luaXRpYWxpemVkIHx8IHQuX3Rlcm1pbmF0ZWQpIHRocm93IG5ldyBMKEIuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGFuZCBwZXJzaXN0ZW5jZSBjYW4gbm8gbG9uZ2VyIGJlIGVuYWJsZWQuIFlvdSBjYW4gb25seSBlbmFibGUgcGVyc2lzdGVuY2UgYmVmb3JlIGNhbGxpbmcgYW55IG90aGVyIG1ldGhvZHMgb24gYSBGaXJlc3RvcmUgb2JqZWN0LlwiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGltbXV0YWJsZSBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGFycmF5IG9mIGJ5dGVzLlxuICovXG5jbGFzcyB0aCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuX2J5dGVTdHJpbmcgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGBCeXRlc2Agb2JqZWN0IGZyb20gdGhlIGdpdmVuIEJhc2U2NCBzdHJpbmcsIGNvbnZlcnRpbmcgaXQgdG9cbiAgICAgKiBieXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXNlNjQgLSBUaGUgQmFzZTY0IHN0cmluZyB1c2VkIHRvIGNyZWF0ZSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovICAgIHN0YXRpYyBmcm9tQmFzZTY0U3RyaW5nKHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGgoV3QuZnJvbUJhc2U2NFN0cmluZyh0KSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJGYWlsZWQgdG8gY29uc3RydWN0IGRhdGEgZnJvbSBCYXNlNjQgc3RyaW5nOiBcIiArIHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEJ5dGVzYCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gVWludDhBcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcnJheSAtIFRoZSBVaW50OEFycmF5IHVzZWQgdG8gY3JlYXRlIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21VaW50OEFycmF5KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aChXdC5mcm9tVWludDhBcnJheSh0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHVuZGVybHlpbmcgYnl0ZXMgYXMgYSBCYXNlNjQtZW5jb2RlZCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgQmFzZTY0LWVuY29kZWQgc3RyaW5nIGNyZWF0ZWQgZnJvbSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovICAgIHRvQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnl0ZVN0cmluZy50b0Jhc2U2NCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGJ5dGVzIGluIGEgbmV3IGBVaW50OEFycmF5YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBVaW50OEFycmF5IGNyZWF0ZWQgZnJvbSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovICAgIHRvVWludDhBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVTdHJpbmcudG9VaW50OEFycmF5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqLyAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiQnl0ZXMoYmFzZTY0OiBcIiArIHRoaXMudG9CYXNlNjQoKSArIFwiKVwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgQnl0ZXNgIG9iamVjdCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBCeXRlc2Agb2JqZWN0IHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYEJ5dGVzYCBvYmplY3QgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ieXRlU3RyaW5nLmlzRXF1YWwodC5fYnl0ZVN0cmluZyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGBGaWVsZFBhdGhgIHJlZmVycyB0byBhIGZpZWxkIGluIGEgZG9jdW1lbnQuIFRoZSBwYXRoIG1heSBjb25zaXN0IG9mIGFcbiAqIHNpbmdsZSBmaWVsZCBuYW1lIChyZWZlcnJpbmcgdG8gYSB0b3AtbGV2ZWwgZmllbGQgaW4gdGhlIGRvY3VtZW50KSwgb3IgYVxuICogbGlzdCBvZiBmaWVsZCBuYW1lcyAocmVmZXJyaW5nIHRvIGEgbmVzdGVkIGZpZWxkIGluIHRoZSBkb2N1bWVudCkuXG4gKlxuICogQ3JlYXRlIGEgYEZpZWxkUGF0aGAgYnkgcHJvdmlkaW5nIGZpZWxkIG5hbWVzLiBJZiBtb3JlIHRoYW4gb25lIGZpZWxkXG4gKiBuYW1lIGlzIHByb3ZpZGVkLCB0aGUgcGF0aCB3aWxsIHBvaW50IHRvIGEgbmVzdGVkIGZpZWxkIGluIGEgZG9jdW1lbnQuXG4gKi8gY2xhc3MgZWgge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgRmllbGRQYXRoYCBmcm9tIHRoZSBwcm92aWRlZCBmaWVsZCBuYW1lcy4gSWYgbW9yZSB0aGFuIG9uZSBmaWVsZFxuICAgICAqIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBwYXRoIHdpbGwgcG9pbnQgdG8gYSBuZXN0ZWQgZmllbGQgaW4gYSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZE5hbWVzIC0gQSBsaXN0IG9mIGZpZWxkIG5hbWVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKC4uLnQpIHtcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0Lmxlbmd0aDsgKytlKSBpZiAoMCA9PT0gdFtlXS5sZW5ndGgpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGZpZWxkIG5hbWUgYXQgYXJndW1lbnQgJChpICsgMSkuIEZpZWxkIG5hbWVzIG11c3Qgbm90IGJlIGVtcHR5LlwiKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxQYXRoID0gbmV3IHV0KHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgRmllbGRQYXRoYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBGaWVsZFBhdGhgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYEZpZWxkUGF0aGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFBhdGguaXNFcXVhbCh0Ll9pbnRlcm5hbFBhdGgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lhbCBzZW50aW5lbCBgRmllbGRQYXRoYCB0byByZWZlciB0byB0aGUgSUQgb2YgYSBkb2N1bWVudC5cbiAqIEl0IGNhbiBiZSB1c2VkIGluIHF1ZXJpZXMgdG8gc29ydCBvciBmaWx0ZXIgYnkgdGhlIGRvY3VtZW50IElELlxuICovIGZ1bmN0aW9uIG5oKCkge1xuICAgIHJldHVybiBuZXcgZWgoXCJfX25hbWVfX1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU2VudGluZWwgdmFsdWVzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiB3cml0aW5nIGRvY3VtZW50IGZpZWxkcyB3aXRoIGBzZXQoKWBcbiAqIG9yIGB1cGRhdGUoKWAuXG4gKi8gY2xhc3Mgc2gge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBfbWV0aG9kTmFtZSAtIFRoZSBwdWJsaWMgQVBJIGVuZHBvaW50IHRoYXQgcmV0dXJucyB0aGlzIGNsYXNzLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuX21ldGhvZE5hbWUgPSB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW1tdXRhYmxlIG9iamVjdCByZXByZXNlbnRpbmcgYSBnZW9ncmFwaGljIGxvY2F0aW9uIGluIEZpcmVzdG9yZS4gVGhlXG4gKiBsb2NhdGlvbiBpcyByZXByZXNlbnRlZCBhcyBsYXRpdHVkZS9sb25naXR1ZGUgcGFpci5cbiAqXG4gKiBMYXRpdHVkZSB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSBvZiBbLTkwLCA5MF0uXG4gKiBMb25naXR1ZGUgdmFsdWVzIGFyZSBpbiB0aGUgcmFuZ2Ugb2YgWy0xODAsIDE4MF0uXG4gKi8gY2xhc3MgaWgge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW1tdXRhYmxlIGBHZW9Qb2ludGAgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGxhdGl0dWRlIGFuZFxuICAgICAqIGxvbmdpdHVkZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGxhdGl0dWRlIC0gVGhlIGxhdGl0dWRlIGFzIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAuXG4gICAgICogQHBhcmFtIGxvbmdpdHVkZSAtIFRoZSBsb25naXR1ZGUgYXMgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgaWYgKCFpc0Zpbml0ZSh0KSB8fCB0IDwgLTkwIHx8IHQgPiA5MCkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcIkxhdGl0dWRlIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLCBidXQgd2FzOiBcIiArIHQpO1xuICAgICAgICBpZiAoIWlzRmluaXRlKGUpIHx8IGUgPCAtMTgwIHx8IGUgPiAxODApIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJMb25naXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MCwgYnV0IHdhczogXCIgKyBlKTtcbiAgICAgICAgdGhpcy5fbGF0ID0gdCwgdGhpcy5fbG9uZyA9IGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBsYXRpdHVkZSBvZiB0aGlzIGBHZW9Qb2ludGAgaW5zdGFuY2UuXG4gICAgICovICAgIGdldCBsYXRpdHVkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGxvbmdpdHVkZSBvZiB0aGlzIGBHZW9Qb2ludGAgaW5zdGFuY2UuXG4gICAgICovICAgIGdldCBsb25naXR1ZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgR2VvUG9pbnRgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBUaGUgYEdlb1BvaW50YCB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGBHZW9Qb2ludGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXQgPT09IHQuX2xhdCAmJiB0aGlzLl9sb25nID09PSB0Ll9sb25nO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIEpTT04tc2VyaWFsaXphYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgR2VvUG9pbnQuICovICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLl9sYXQsXG4gICAgICAgICAgICBsb25naXR1ZGU6IHRoaXMuX2xvbmdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWN0dWFsbHkgcHJpdmF0ZSB0byBKUyBjb25zdW1lcnMgb2Ygb3VyIEFQSSwgc28gdGhpcyBmdW5jdGlvbiBpcyBwcmVmaXhlZFxuICAgICAqIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgICAgKi8gICAgX2NvbXBhcmVUbyh0KSB7XG4gICAgICAgIHJldHVybiBaKHRoaXMuX2xhdCwgdC5fbGF0KSB8fCBaKHRoaXMuX2xvbmcsIHQuX2xvbmcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgcmggPSAvXl9fLipfXyQvO1xuXG4vKiogVGhlIHJlc3VsdCBvZiBwYXJzaW5nIGRvY3VtZW50IGRhdGEgKGUuZy4gZm9yIGEgc2V0RGF0YSBjYWxsKS4gKi8gY2xhc3Mgb2gge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5kYXRhID0gdCwgdGhpcy5maWVsZE1hc2sgPSBlLCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IG47XG4gICAgfVxuICAgIHRvTXV0YXRpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5maWVsZE1hc2sgPyBuZXcgR24odCwgdGhpcy5kYXRhLCB0aGlzLmZpZWxkTWFzaywgZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMpIDogbmV3IEtuKHQsIHRoaXMuZGF0YSwgZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMpO1xuICAgIH1cbn1cblxuLyoqIFRoZSByZXN1bHQgb2YgcGFyc2luZyBcInVwZGF0ZVwiIGRhdGEgKGkuZS4gZm9yIGFuIHVwZGF0ZURhdGEgY2FsbCkuICovIGNsYXNzIHVoIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBcbiAgICAvLyBUaGUgZmllbGRNYXNrIGRvZXMgbm90IGluY2x1ZGUgZG9jdW1lbnQgdHJhbnNmb3Jtcy5cbiAgICBlLCBuKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHQsIHRoaXMuZmllbGRNYXNrID0gZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBuO1xuICAgIH1cbiAgICB0b011dGF0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHbih0LCB0aGlzLmRhdGEsIHRoaXMuZmllbGRNYXNrLCBlLCB0aGlzLmZpZWxkVHJhbnNmb3Jtcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaCh0KSB7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIDAgLyogU2V0ICovIDpcbiAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgICAgICAgY2FzZSAyIC8qIE1lcmdlU2V0ICovIDpcbiAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgICAgICAgY2FzZSAxIC8qIFVwZGF0ZSAqLyA6XG4gICAgICAgIHJldHVybiAhMDtcblxuICAgICAgY2FzZSAzIC8qIEFyZ3VtZW50ICovIDpcbiAgICAgIGNhc2UgNCAvKiBBcnJheUFyZ3VtZW50ICovIDpcbiAgICAgICAgcmV0dXJuICExO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfVxufVxuXG4vKiogQSBcImNvbnRleHRcIiBvYmplY3QgcGFzc2VkIGFyb3VuZCB3aGlsZSBwYXJzaW5nIHVzZXIgZGF0YS4gKi8gY2xhc3MgYWgge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgUGFyc2VDb250ZXh0IHdpdGggdGhlIGdpdmVuIHNvdXJjZSBhbmQgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIFRoZSBzZXR0aW5ncyBmb3IgdGhlIHBhcnNlci5cbiAgICAgKiBAcGFyYW0gZGF0YWJhc2VJZCAtIFRoZSBkYXRhYmFzZSBJRCBvZiB0aGUgRmlyZXN0b3JlIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyIC0gVGhlIHNlcmlhbGl6ZXIgdG8gdXNlIHRvIGdlbmVyYXRlIHRoZSBWYWx1ZSBwcm90by5cbiAgICAgKiBAcGFyYW0gaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyAtIFdoZXRoZXIgdG8gaWdub3JlIHVuZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgICogcmF0aGVyIHRoYW4gdGhyb3cuXG4gICAgICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyAtIEEgbXV0YWJsZSBsaXN0IG9mIGZpZWxkIHRyYW5zZm9ybXMgZW5jb3VudGVyZWRcbiAgICAgKiB3aGlsZSBwYXJzaW5nIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBmaWVsZE1hc2sgLSBBIG11dGFibGUgbGlzdCBvZiBmaWVsZCBwYXRocyBlbmNvdW50ZXJlZCB3aGlsZSBwYXJzaW5nXG4gICAgICogdGhlIGRhdGEuXG4gICAgICpcbiAgICAgKiBUT0RPKGIvMzQ4NzExMzEpOiBXZSBkb24ndCBzdXBwb3J0IGFycmF5IHBhdGhzIHJpZ2h0IG5vdywgc28gcGF0aCBjYW4gYmVcbiAgICAgKiBudWxsIHRvIGluZGljYXRlIHRoZSBjb250ZXh0IHJlcHJlc2VudHMgYW55IGxvY2F0aW9uIHdpdGhpbiBhbiBhcnJheSAoaW5cbiAgICAgKiB3aGljaCBjYXNlIGNlcnRhaW4gZmVhdHVyZXMgd2lsbCBub3Qgd29yayBhbmQgZXJyb3JzIHdpbGwgYmUgc29tZXdoYXRcbiAgICAgKiBjb21wcm9taXNlZCkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gdCwgdGhpcy5kYXRhYmFzZUlkID0gZSwgdGhpcy5JdCA9IG4sIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9IHMsIFxuICAgICAgICAvLyBNaW5vciBoYWNrOiBJZiBmaWVsZFRyYW5zZm9ybXMgaXMgdW5kZWZpbmVkLCB3ZSBhc3N1bWUgdGhpcyBpcyBhblxuICAgICAgICAvLyBleHRlcm5hbCBjYWxsIGFuZCB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoZSBlbnRpcmUgcGF0aC5cbiAgICAgICAgdm9pZCAwID09PSBpICYmIHRoaXMubmEoKSwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBpIHx8IFtdLCB0aGlzLmZpZWxkTWFzayA9IHIgfHwgW107XG4gICAgfVxuICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wYXRoO1xuICAgIH1cbiAgICBnZXQgc2EoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnNhO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBjb250ZXh0IHdpdGggdGhlIHNwZWNpZmllZCBzZXR0aW5ncyBvdmVyd3JpdHRlbi4gKi8gICAgaWEodCkge1xuICAgICAgICByZXR1cm4gbmV3IGFoKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyksIHQpLCB0aGlzLmRhdGFiYXNlSWQsIHRoaXMuSXQsIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgdGhpcy5maWVsZFRyYW5zZm9ybXMsIHRoaXMuZmllbGRNYXNrKTtcbiAgICB9XG4gICAgcmEodCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgY29uc3QgbiA9IG51bGwgPT09IChlID0gdGhpcy5wYXRoKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmNoaWxkKHQpLCBzID0gdGhpcy5pYSh7XG4gICAgICAgICAgICBwYXRoOiBuLFxuICAgICAgICAgICAgb2E6ICExXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcy51YSh0KSwgcztcbiAgICB9XG4gICAgY2EodCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgY29uc3QgbiA9IG51bGwgPT09IChlID0gdGhpcy5wYXRoKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmNoaWxkKHQpLCBzID0gdGhpcy5pYSh7XG4gICAgICAgICAgICBwYXRoOiBuLFxuICAgICAgICAgICAgb2E6ICExXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcy5uYSgpLCBzO1xuICAgIH1cbiAgICBhYSh0KSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IFdlIGRvbid0IHN1cHBvcnQgYXJyYXkgcGF0aHMgcmlnaHQgbm93OyBzbyBtYWtlIHBhdGhcbiAgICAgICAgLy8gdW5kZWZpbmVkLlxuICAgICAgICByZXR1cm4gdGhpcy5pYSh7XG4gICAgICAgICAgICBwYXRoOiB2b2lkIDAsXG4gICAgICAgICAgICBvYTogITBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhKHQpIHtcbiAgICAgICAgcmV0dXJuIFNoKHQsIHRoaXMuc2V0dGluZ3MubWV0aG9kTmFtZSwgdGhpcy5zZXR0aW5ncy5sYSB8fCAhMSwgdGhpcy5wYXRoLCB0aGlzLnNldHRpbmdzLmZhKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmICdmaWVsZFBhdGgnIHdhcyB0cmF2ZXJzZWQgd2hlbiBjcmVhdGluZyB0aGlzIGNvbnRleHQuICovICAgIGNvbnRhaW5zKHQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5maWVsZE1hc2suZmluZCgoZSA9PiB0LmlzUHJlZml4T2YoZSkpKSB8fCB2b2lkIDAgIT09IHRoaXMuZmllbGRUcmFuc2Zvcm1zLmZpbmQoKGUgPT4gdC5pc1ByZWZpeE9mKGUuZmllbGQpKSk7XG4gICAgfVxuICAgIG5hKCkge1xuICAgICAgICAvLyBUT0RPKGIvMzQ4NzExMzEpOiBSZW1vdmUgbnVsbCBjaGVjayBvbmNlIHdlIGhhdmUgcHJvcGVyIHBhdGhzIGZvciBmaWVsZHNcbiAgICAgICAgLy8gd2l0aGluIGFycmF5cy5cbiAgICAgICAgaWYgKHRoaXMucGF0aCkgZm9yIChsZXQgdCA9IDA7IHQgPCB0aGlzLnBhdGgubGVuZ3RoOyB0KyspIHRoaXMudWEodGhpcy5wYXRoLmdldCh0KSk7XG4gICAgfVxuICAgIHVhKHQpIHtcbiAgICAgICAgaWYgKDAgPT09IHQubGVuZ3RoKSB0aHJvdyB0aGlzLmhhKFwiRG9jdW1lbnQgZmllbGRzIG11c3Qgbm90IGJlIGVtcHR5XCIpO1xuICAgICAgICBpZiAoY2godGhpcy5zYSkgJiYgcmgudGVzdCh0KSkgdGhyb3cgdGhpcy5oYSgnRG9jdW1lbnQgZmllbGRzIGNhbm5vdCBiZWdpbiBhbmQgZW5kIHdpdGggXCJfX1wiJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgcGFyc2luZyByYXcgdXNlciBpbnB1dCAocHJvdmlkZWQgdmlhIHRoZSBBUEkpIGludG8gaW50ZXJuYWwgbW9kZWxcbiAqIGNsYXNzZXMuXG4gKi8gY2xhc3MgaGgge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gdCwgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gZSwgdGhpcy5JdCA9IG4gfHwgWm8odCk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHRvcC1sZXZlbCBwYXJzZSBjb250ZXh0LiAqLyAgICBkYSh0LCBlLCBuLCBzID0gITEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhaCh7XG4gICAgICAgICAgICBzYTogdCxcbiAgICAgICAgICAgIG1ldGhvZE5hbWU6IGUsXG4gICAgICAgICAgICBmYTogbixcbiAgICAgICAgICAgIHBhdGg6IHV0LmVtcHR5UGF0aCgpLFxuICAgICAgICAgICAgb2E6ICExLFxuICAgICAgICAgICAgbGE6IHNcbiAgICAgICAgfSwgdGhpcy5kYXRhYmFzZUlkLCB0aGlzLkl0LCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbGgodCkge1xuICAgIGNvbnN0IGUgPSB0Ll9mcmVlemVTZXR0aW5ncygpLCBuID0gWm8odC5fZGF0YWJhc2VJZCk7XG4gICAgcmV0dXJuIG5ldyBoaCh0Ll9kYXRhYmFzZUlkLCAhIWUuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgbik7XG59XG5cbi8qKiBQYXJzZSBkb2N1bWVudCBkYXRhIGZyb20gYSBzZXQoKSBjYWxsLiAqLyBmdW5jdGlvbiBmaCh0LCBlLCBuLCBzLCBpLCByID0ge30pIHtcbiAgICBjb25zdCBvID0gdC5kYShyLm1lcmdlIHx8IHIubWVyZ2VGaWVsZHMgPyAyIC8qIE1lcmdlU2V0ICovIDogMCAvKiBTZXQgKi8gLCBlLCBuLCBpKTtcbiAgICBiaChcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIG8sIHMpO1xuICAgIGNvbnN0IHUgPSBBaChzLCBvKTtcbiAgICBsZXQgYywgYTtcbiAgICBpZiAoci5tZXJnZSkgYyA9IG5ldyBRdChvLmZpZWxkTWFzayksIGEgPSBvLmZpZWxkVHJhbnNmb3JtczsgZWxzZSBpZiAoci5tZXJnZUZpZWxkcykge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByLm1lcmdlRmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gUGgoZSwgcywgbik7XG4gICAgICAgICAgICBpZiAoIW8uY29udGFpbnMoaSkpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEZpZWxkICcke2l9JyBpcyBzcGVjaWZpZWQgaW4geW91ciBmaWVsZCBtYXNrIGJ1dCBtaXNzaW5nIGZyb20geW91ciBpbnB1dCBkYXRhLmApO1xuICAgICAgICAgICAgRGgodCwgaSkgfHwgdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIGMgPSBuZXcgUXQodCksIGEgPSBvLmZpZWxkVHJhbnNmb3Jtcy5maWx0ZXIoKHQgPT4gYy5jb3ZlcnModC5maWVsZCkpKTtcbiAgICB9IGVsc2UgYyA9IG51bGwsIGEgPSBvLmZpZWxkVHJhbnNmb3JtcztcbiAgICByZXR1cm4gbmV3IG9oKG5ldyB2ZSh1KSwgYywgYSk7XG59XG5cbmNsYXNzIGRoIGV4dGVuZHMgc2gge1xuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgaWYgKDIgLyogTWVyZ2VTZXQgKi8gIT09IHQuc2EpIHRocm93IDEgLyogVXBkYXRlICovID09PSB0LnNhID8gdC5oYShgJHt0aGlzLl9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgdXBkYXRlIGRhdGFgKSA6IHQuaGEoYCR7dGhpcy5fbWV0aG9kTmFtZX0oKSBjYW5ub3QgYmUgdXNlZCB3aXRoIHNldCgpIHVubGVzcyB5b3UgcGFzcyB7bWVyZ2U6dHJ1ZX1gKTtcbiAgICAgICAgLy8gTm8gdHJhbnNmb3JtIHRvIGFkZCBmb3IgYSBkZWxldGUsIGJ1dCB3ZSBuZWVkIHRvIGFkZCBpdCB0byBvdXJcbiAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cbiAgICAgICAgcmV0dXJuIHQuZmllbGRNYXNrLnB1c2godC5wYXRoKSwgbnVsbDtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgZGg7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjaGlsZCBjb250ZXh0IGZvciBwYXJzaW5nIFNlcmlhbGl6YWJsZUZpZWxkVmFsdWVzLlxuICpcbiAqIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gY2FsbGluZyBgUGFyc2VDb250ZXh0LmNvbnRleHRXaXRoYCBiZWNhdXNlIGl0IGtlZXBzXG4gKiB0aGUgZmllbGRUcmFuc2Zvcm1zIGFuZCBmaWVsZE1hc2sgc2VwYXJhdGUuXG4gKlxuICogVGhlIGNyZWF0ZWQgY29udGV4dCBoYXMgaXRzIGBkYXRhU291cmNlYCBzZXQgdG8gYFVzZXJEYXRhU291cmNlLkFyZ3VtZW50YC5cbiAqIEFsdGhvdWdoIHRoZXNlIHZhbHVlcyBhcmUgdXNlZCB3aXRoIHdyaXRlcywgYW55IGVsZW1lbnRzIGluIHRoZXNlIEZpZWxkVmFsdWVzXG4gKiBhcmUgbm90IGNvbnNpZGVyZWQgd3JpdGVzIHNpbmNlIHRoZXkgY2Fubm90IGNvbnRhaW4gYW55IEZpZWxkVmFsdWUgc2VudGluZWxzLFxuICogZXRjLlxuICpcbiAqIEBwYXJhbSBmaWVsZFZhbHVlIC0gVGhlIHNlbnRpbmVsIEZpZWxkVmFsdWUgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhIGNoaWxkXG4gKiAgICAgY29udGV4dC5cbiAqIEBwYXJhbSBjb250ZXh0IC0gVGhlIHBhcmVudCBjb250ZXh0LlxuICogQHBhcmFtIGFycmF5RWxlbWVudCAtIFdoZXRoZXIgb3Igbm90IHRoZSBGaWVsZFZhbHVlIGhhcyBhbiBhcnJheS5cbiAqLyBmdW5jdGlvbiBfaCh0LCBlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBhaCh7XG4gICAgICAgIHNhOiAzIC8qIEFyZ3VtZW50ICovICxcbiAgICAgICAgZmE6IGUuc2V0dGluZ3MuZmEsXG4gICAgICAgIG1ldGhvZE5hbWU6IHQuX21ldGhvZE5hbWUsXG4gICAgICAgIG9hOiBuXG4gICAgfSwgZS5kYXRhYmFzZUlkLCBlLkl0LCBlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xufVxuXG5jbGFzcyB3aCBleHRlbmRzIHNoIHtcbiAgICBfdG9GaWVsZFRyYW5zZm9ybSh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgeG4odC5wYXRoLCBuZXcgUm4pO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiB3aDtcbiAgICB9XG59XG5cbmNsYXNzIG1oIGV4dGVuZHMgc2gge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCksIHRoaXMuX2EgPSBlO1xuICAgIH1cbiAgICBfdG9GaWVsZFRyYW5zZm9ybSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBfaCh0aGlzLCB0LCBcbiAgICAgICAgLyphcnJheT0qLyAhMCksIG4gPSB0aGlzLl9hLm1hcCgodCA9PiBFaCh0LCBlKSkpLCBzID0gbmV3IGJuKG4pO1xuICAgICAgICByZXR1cm4gbmV3IHhuKHQucGF0aCwgcyk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9XG59XG5cbmNsYXNzIGdoIGV4dGVuZHMgc2gge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCksIHRoaXMuX2EgPSBlO1xuICAgIH1cbiAgICBfdG9GaWVsZFRyYW5zZm9ybSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBfaCh0aGlzLCB0LCBcbiAgICAgICAgLyphcnJheT0qLyAhMCksIG4gPSB0aGlzLl9hLm1hcCgodCA9PiBFaCh0LCBlKSkpLCBzID0gbmV3IHZuKG4pO1xuICAgICAgICByZXR1cm4gbmV3IHhuKHQucGF0aCwgcyk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9XG59XG5cbmNsYXNzIHloIGV4dGVuZHMgc2gge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCksIHRoaXMud2EgPSBlO1xuICAgIH1cbiAgICBfdG9GaWVsZFRyYW5zZm9ybSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgU24odC5JdCwgcG4odC5JdCwgdGhpcy53YSkpO1xuICAgICAgICByZXR1cm4gbmV3IHhuKHQucGF0aCwgZSk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9XG59XG5cbi8qKiBQYXJzZSB1cGRhdGUgZGF0YSBmcm9tIGFuIHVwZGF0ZSgpIGNhbGwuICovIGZ1bmN0aW9uIHBoKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gdC5kYSgxIC8qIFVwZGF0ZSAqLyAsIGUsIG4pO1xuICAgIGJoKFwiRGF0YSBtdXN0IGJlIGFuIG9iamVjdCwgYnV0IGl0IHdhczpcIiwgaSwgcyk7XG4gICAgY29uc3QgciA9IFtdLCBvID0gdmUuZW1wdHkoKTtcbiAgICBGdChzLCAoKHQsIHMpID0+IHtcbiAgICAgICAgY29uc3QgdSA9IFZoKGUsIHQsIG4pO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgcyA9IGdldE1vZHVsYXJJbnN0YW5jZShzKTtcbiAgICAgICAgY29uc3QgYyA9IGkuY2EodSk7XG4gICAgICAgIGlmIChzIGluc3RhbmNlb2YgZGgpIFxuICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cbiAgICAgICAgci5wdXNoKHUpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBFaChzLCBjKTtcbiAgICAgICAgICAgIG51bGwgIT0gdCAmJiAoci5wdXNoKHUpLCBvLnNldCh1LCB0KSk7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3QgdSA9IG5ldyBRdChyKTtcbiAgICByZXR1cm4gbmV3IHVoKG8sIHUsIGkuZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqIFBhcnNlIHVwZGF0ZSBkYXRhIGZyb20gYSBsaXN0IG9mIGZpZWxkL3ZhbHVlIGFyZ3VtZW50cy4gKi8gZnVuY3Rpb24gSWgodCwgZSwgbiwgcywgaSwgcikge1xuICAgIGNvbnN0IG8gPSB0LmRhKDEgLyogVXBkYXRlICovICwgZSwgbiksIHUgPSBbIFBoKGUsIHMsIG4pIF0sIGMgPSBbIGkgXTtcbiAgICBpZiAoci5sZW5ndGggJSAyICE9IDApIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEZ1bmN0aW9uICR7ZX0oKSBuZWVkcyB0byBiZSBjYWxsZWQgd2l0aCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMgdGhhdCBhbHRlcm5hdGUgYmV0d2VlbiBmaWVsZCBuYW1lcyBhbmQgdmFsdWVzLmApO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgci5sZW5ndGg7IHQgKz0gMikgdS5wdXNoKFBoKGUsIHJbdF0pKSwgYy5wdXNoKHJbdCArIDFdKTtcbiAgICBjb25zdCBhID0gW10sIGggPSB2ZS5lbXB0eSgpO1xuICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciB0byBwaWNrIHRoZSBsYXN0IHZhbHVlIGZvciBhIGZpZWxkIGlmIHRoZVxuICAgIC8vIHVzZXIgc3BlY2lmaWVkIHRoZSBmaWVsZCBtdWx0aXBsZSB0aW1lcy5cbiAgICBmb3IgKGxldCB0ID0gdS5sZW5ndGggLSAxOyB0ID49IDA7IC0tdCkgaWYgKCFEaChhLCB1W3RdKSkge1xuICAgICAgICBjb25zdCBlID0gdVt0XTtcbiAgICAgICAgbGV0IG4gPSBjW3RdO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgbiA9IGdldE1vZHVsYXJJbnN0YW5jZShuKTtcbiAgICAgICAgY29uc3QgcyA9IG8uY2EoZSk7XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgZGgpIFxuICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cbiAgICAgICAgYS5wdXNoKGUpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBFaChuLCBzKTtcbiAgICAgICAgICAgIG51bGwgIT0gdCAmJiAoYS5wdXNoKGUpLCBoLnNldChlLCB0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbCA9IG5ldyBRdChhKTtcbiAgICByZXR1cm4gbmV3IHVoKGgsIGwsIG8uZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIFwicXVlcnkgdmFsdWVcIiAoZS5nLiB2YWx1ZSBpbiBhIHdoZXJlIGZpbHRlciBvciBhIHZhbHVlIGluIGEgY3Vyc29yXG4gKiBib3VuZCkuXG4gKlxuICogQHBhcmFtIGFsbG93QXJyYXlzIC0gV2hldGhlciB0aGUgcXVlcnkgdmFsdWUgaXMgYW4gYXJyYXkgdGhhdCBtYXkgZGlyZWN0bHlcbiAqIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGUuZy4gdGhlIG9wZXJhbmQgb2YgYW4gYGluYCBxdWVyeSkuXG4gKi8gZnVuY3Rpb24gVGgodCwgZSwgbiwgcyA9ICExKSB7XG4gICAgcmV0dXJuIEVoKG4sIHQuZGEocyA/IDQgLyogQXJyYXlBcmd1bWVudCAqLyA6IDMgLyogQXJndW1lbnQgKi8gLCBlKSk7XG59XG5cbi8qKlxuICogUGFyc2VzIHVzZXIgZGF0YSB0byBQcm90b2J1ZiBWYWx1ZXMuXG4gKlxuICogQHBhcmFtIGlucHV0IC0gRGF0YSB0byBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gY29udGV4dCAtIEEgY29udGV4dCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhdGggYmVpbmcgcGFyc2VkLFxuICogdGhlIHNvdXJjZSBvZiB0aGUgZGF0YSBiZWluZyBwYXJzZWQsIGV0Yy5cbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdmFsdWUsIG9yIG51bGwgaWYgdGhlIHZhbHVlIHdhcyBhIEZpZWxkVmFsdWUgc2VudGluZWxcbiAqIHRoYXQgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIHBhcnNlZCBkYXRhLlxuICovIGZ1bmN0aW9uIEVoKHQsIGUpIHtcbiAgICBpZiAoUmgoXG4gICAgLy8gVW53cmFwIHRoZSBBUEkgdHlwZSBmcm9tIHRoZSBDb21wYXQgU0RLLiBUaGlzIHdpbGwgcmV0dXJuIHRoZSBBUEkgdHlwZVxuICAgIC8vIGZyb20gZmlyZXN0b3JlLWV4cC5cbiAgICB0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpKSkgcmV0dXJuIGJoKFwiVW5zdXBwb3J0ZWQgZmllbGQgdmFsdWU6XCIsIGUsIHQpLCBBaCh0LCBlKTtcbiAgICBpZiAodCBpbnN0YW5jZW9mIHNoKSBcbiAgICAvLyBGaWVsZFZhbHVlcyB1c3VhbGx5IHBhcnNlIGludG8gdHJhbnNmb3JtcyAoZXhjZXB0IGRlbGV0ZUZpZWxkKCkpXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBkbyBub3Qgd2FudCB0byBpbmNsdWRlIHRoaXMgZmllbGQgaW4gb3VyIHBhcnNlZCBkYXRhXG4gICAgLy8gKGFzIGRvaW5nIHNvIHdpbGwgb3ZlcndyaXRlIHRoZSBmaWVsZCBkaXJlY3RseSBwcmlvciB0byB0aGUgdHJhbnNmb3JtXG4gICAgLy8gdHJ5aW5nIHRvIHRyYW5zZm9ybSBpdCkuIFNvIHdlIGRvbid0IGFkZCB0aGlzIGxvY2F0aW9uIHRvXG4gICAgLy8gY29udGV4dC5maWVsZE1hc2sgYW5kIHdlIHJldHVybiBudWxsIGFzIG91ciBwYXJzaW5nIHJlc3VsdC5cbiAgICAvKipcbiAqIFwiUGFyc2VzXCIgdGhlIHByb3ZpZGVkIEZpZWxkVmFsdWVJbXBsLCBhZGRpbmcgYW55IG5lY2Vzc2FyeSB0cmFuc2Zvcm1zIHRvXG4gKiBjb250ZXh0LmZpZWxkVHJhbnNmb3Jtcy5cbiAqL1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFNlbnRpbmVscyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCB3cml0ZXMsIGFuZCBub3Qgd2l0aGluIGFycmF5cy5cbiAgICAgICAgaWYgKCFjaChlLnNhKSkgdGhyb3cgZS5oYShgJHt0Ll9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB1cGRhdGUoKSBhbmQgc2V0KClgKTtcbiAgICAgICAgaWYgKCFlLnBhdGgpIHRocm93IGUuaGEoYCR7dC5fbWV0aG9kTmFtZX0oKSBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbnNpZGUgYXJyYXlzYCk7XG4gICAgICAgIGNvbnN0IG4gPSB0Ll90b0ZpZWxkVHJhbnNmb3JtKGUpO1xuICAgICAgICBuICYmIGUuZmllbGRUcmFuc2Zvcm1zLnB1c2gobik7XG4gICAgfVxuICAgIC8qKlxuICogSGVscGVyIHRvIHBhcnNlIGEgc2NhbGFyIHZhbHVlIChpLmUuIG5vdCBhbiBPYmplY3QsIEFycmF5LCBvciBGaWVsZFZhbHVlKVxuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdmFsdWVcbiAqLyAodCwgZSksIG51bGw7XG4gICAgaWYgKHZvaWQgMCA9PT0gdCAmJiBlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpIFxuICAgIC8vIElmIHRoZSBpbnB1dCBpcyB1bmRlZmluZWQgaXQgY2FuIG5ldmVyIHBhcnRpY2lwYXRlIGluIHRoZSBmaWVsZE1hc2ssIHNvXG4gICAgLy8gZG9uJ3QgaGFuZGxlIHRoaXMgYmVsb3cuIElmIGBpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzYCBpcyBmYWxzZSxcbiAgICAvLyBgcGFyc2VTY2FsYXJWYWx1ZWAgd2lsbCByZWplY3QgYW4gdW5kZWZpbmVkIHZhbHVlLlxuICAgIHJldHVybiBudWxsO1xuICAgIGlmIChcbiAgICAvLyBJZiBjb250ZXh0LnBhdGggaXMgbnVsbCB3ZSBhcmUgaW5zaWRlIGFuIGFycmF5IGFuZCB3ZSBkb24ndCBzdXBwb3J0XG4gICAgLy8gZmllbGQgbWFzayBwYXRocyBtb3JlIGdyYW51bGFyIHRoYW4gdGhlIHRvcC1sZXZlbCBhcnJheS5cbiAgICBlLnBhdGggJiYgZS5maWVsZE1hc2sucHVzaChlLnBhdGgpLCB0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogSW5jbHVkZSB0aGUgcGF0aCBjb250YWluaW5nIHRoZSBhcnJheSBpbiB0aGUgZXJyb3JcbiAgICAgICAgLy8gbWVzc2FnZS5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgSU4gcXVlcmllcywgdGhlIHBhcnNlZCBkYXRhIGlzIGFuIGFycmF5IChyZXByZXNlbnRpbmdcbiAgICAgICAgLy8gdGhlIHNldCBvZiB2YWx1ZXMgdG8gYmUgaW5jbHVkZWQgZm9yIHRoZSBJTiBxdWVyeSkgdGhhdCBtYXkgZGlyZWN0bHlcbiAgICAgICAgLy8gY29udGFpbiBhZGRpdGlvbmFsIGFycmF5cyAoZWFjaCByZXByZXNlbnRpbmcgYW4gaW5kaXZpZHVhbCBmaWVsZFxuICAgICAgICAvLyB2YWx1ZSksIHNvIHdlIGRpc2FibGUgdGhpcyB2YWxpZGF0aW9uLlxuICAgICAgICBpZiAoZS5zZXR0aW5ncy5vYSAmJiA0IC8qIEFycmF5QXJndW1lbnQgKi8gIT09IGUuc2EpIHRocm93IGUuaGEoXCJOZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IEVoKGksIGUuYWEocykpO1xuICAgICAgICAgICAgICAgIG51bGwgPT0gdCAmJiAoXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBpbmNsdWRlIG51bGxzIGluIHRoZSBhcnJheSBmb3IgZmllbGRzIGJlaW5nIHJlcGxhY2VkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIHNlbnRpbmVsLlxuICAgICAgICAgICAgICAgIHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgICAgICB9KSwgbi5wdXNoKHQpLCBzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0LCBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKG51bGwgPT09ICh0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpKSkgcmV0dXJuIHtcbiAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIHQpIHJldHVybiBwbihlLkl0LCB0KTtcbiAgICAgICAgaWYgKFwiYm9vbGVhblwiID09IHR5cGVvZiB0KSByZXR1cm4ge1xuICAgICAgICAgICAgYm9vbGVhblZhbHVlOiB0XG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4ge1xuICAgICAgICAgICAgc3RyaW5nVmFsdWU6IHRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gbnQuZnJvbURhdGUodCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiB2cyhlLkl0LCBuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIG50KSB7XG4gICAgICAgICAgICAvLyBGaXJlc3RvcmUgYmFja2VuZCB0cnVuY2F0ZXMgcHJlY2lzaW9uIGRvd24gdG8gbWljcm9zZWNvbmRzLiBUbyBlbnN1cmVcbiAgICAgICAgICAgIC8vIG9mZmxpbmUgbW9kZSB3b3JrcyB0aGUgc2FtZSB3aXRoIHJlZ2FyZHMgdG8gdHJ1bmNhdGlvbiwgcGVyZm9ybSB0aGVcbiAgICAgICAgICAgIC8vIHRydW5jYXRpb24gaW1tZWRpYXRlbHkgd2l0aG91dCB3YWl0aW5nIGZvciB0aGUgYmFja2VuZCB0byBkbyB0aGF0LlxuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBudCh0LnNlY29uZHMsIDFlMyAqIE1hdGguZmxvb3IodC5uYW5vc2Vjb25kcyAvIDFlMykpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZTogdnMoZS5JdCwgbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBpaCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogdC5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHQubG9uZ2l0dWRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgdGgpIHJldHVybiB7XG4gICAgICAgICAgICBieXRlc1ZhbHVlOiBWcyhlLkl0LCB0Ll9ieXRlU3RyaW5nKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFhjKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gZS5kYXRhYmFzZUlkLCBzID0gdC5maXJlc3RvcmUuX2RhdGFiYXNlSWQ7XG4gICAgICAgICAgICBpZiAoIXMuaXNFcXVhbChuKSkgdGhyb3cgZS5oYShgRG9jdW1lbnQgcmVmZXJlbmNlIGlzIGZvciBkYXRhYmFzZSAke3MucHJvamVjdElkfS8ke3MuZGF0YWJhc2V9IGJ1dCBzaG91bGQgYmUgZm9yIGRhdGFiYXNlICR7bi5wcm9qZWN0SWR9LyR7bi5kYXRhYmFzZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVmFsdWU6IENzKHQuZmlyZXN0b3JlLl9kYXRhYmFzZUlkIHx8IGUuZGF0YWJhc2VJZCwgdC5fa2V5LnBhdGgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGUuaGEoYFVuc3VwcG9ydGVkIGZpZWxkIHZhbHVlOiAke1FjKHQpfWApO1xuICAgIH1cbiAgICAvKipcbiAqIENoZWNrcyB3aGV0aGVyIGFuIG9iamVjdCBsb29rcyBsaWtlIGEgSlNPTiBvYmplY3QgdGhhdCBzaG91bGQgYmUgY29udmVydGVkXG4gKiBpbnRvIGEgc3RydWN0LiBOb3JtYWwgY2xhc3MvcHJvdG90eXBlIGluc3RhbmNlcyBhcmUgY29uc2lkZXJlZCB0byBsb29rIGxpa2VcbiAqIEpTT04gb2JqZWN0cyBzaW5jZSB0aGV5IHNob3VsZCBiZSBjb252ZXJ0ZWQgdG8gYSBzdHJ1Y3QgdmFsdWUuIEFycmF5cywgRGF0ZXMsXG4gKiBHZW9Qb2ludHMsIGV0Yy4gYXJlIG5vdCBjb25zaWRlcmVkIHRvIGxvb2sgbGlrZSBKU09OIG9iamVjdHMgc2luY2UgdGhleSBtYXBcbiAqIHRvIHNwZWNpZmljIEZpZWxkVmFsdWUgdHlwZXMgb3RoZXIgdGhhbiBPYmplY3RWYWx1ZS5cbiAqLyAodCwgZSk7XG59XG5cbmZ1bmN0aW9uIEFoKHQsIGUpIHtcbiAgICBjb25zdCBuID0ge307XG4gICAgcmV0dXJuICR0KHQpID8gXG4gICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVtcHR5IG9iamVjdCwgd2UgZXhwbGljaXRseSBhZGQgaXQgdG8gdGhlIHVwZGF0ZVxuICAgIC8vIG1hc2sgdG8gZW5zdXJlIHRoYXQgdGhlIHNlcnZlciBjcmVhdGVzIGEgbWFwIGVudHJ5LlxuICAgIGUucGF0aCAmJiBlLnBhdGgubGVuZ3RoID4gMCAmJiBlLmZpZWxkTWFzay5wdXNoKGUucGF0aCkgOiBGdCh0LCAoKHQsIHMpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IEVoKHMsIGUucmEodCkpO1xuICAgICAgICBudWxsICE9IGkgJiYgKG5bdF0gPSBpKTtcbiAgICB9KSksIHtcbiAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgIGZpZWxkczogblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gUmgodCkge1xuICAgIHJldHVybiAhKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgbnVsbCA9PT0gdCB8fCB0IGluc3RhbmNlb2YgQXJyYXkgfHwgdCBpbnN0YW5jZW9mIERhdGUgfHwgdCBpbnN0YW5jZW9mIG50IHx8IHQgaW5zdGFuY2VvZiBpaCB8fCB0IGluc3RhbmNlb2YgdGggfHwgdCBpbnN0YW5jZW9mIFhjIHx8IHQgaW5zdGFuY2VvZiBzaCk7XG59XG5cbmZ1bmN0aW9uIGJoKHQsIGUsIG4pIHtcbiAgICBpZiAoIVJoKG4pIHx8ICFmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIG51bGwgIT09IHQgJiYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBudWxsID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpO1xuICAgIH0obikpIHtcbiAgICAgICAgY29uc3QgcyA9IFFjKG4pO1xuICAgICAgICB0aHJvdyBcImFuIG9iamVjdFwiID09PSBzID8gZS5oYSh0ICsgXCIgYSBjdXN0b20gb2JqZWN0XCIpIDogZS5oYSh0ICsgXCIgXCIgKyBzKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgY2FsbHMgZnJvbURvdFNlcGFyYXRlZFN0cmluZygpIGJ1dCB3cmFwcyBhbnkgZXJyb3IgdGhyb3duLlxuICovIGZ1bmN0aW9uIFBoKHQsIGUsIG4pIHtcbiAgICBpZiAoKFxuICAgIC8vIElmIHJlcXVpcmVkLCByZXBsYWNlIHRoZSBGaWVsZFBhdGggQ29tcGF0IGNsYXNzIHdpdGggd2l0aCB0aGUgZmlyZXN0b3JlLWV4cFxuICAgIC8vIEZpZWxkUGF0aC5cbiAgICBlID0gZ2V0TW9kdWxhckluc3RhbmNlKGUpKSBpbnN0YW5jZW9mIGVoKSByZXR1cm4gZS5faW50ZXJuYWxQYXRoO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSByZXR1cm4gVmgodCwgZSk7XG4gICAgdGhyb3cgU2goXCJGaWVsZCBwYXRoIGFyZ3VtZW50cyBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIFwiLCB0LCBcbiAgICAvKiBoYXNDb252ZXJ0ZXI9ICovICExLCBcbiAgICAvKiBwYXRoPSAqLyB2b2lkIDAsIG4pO1xufVxuXG4vKipcbiAqIE1hdGNoZXMgYW55IGNoYXJhY3RlcnMgaW4gYSBmaWVsZCBwYXRoIHN0cmluZyB0aGF0IGFyZSByZXNlcnZlZC5cbiAqLyBjb25zdCB2aCA9IG5ldyBSZWdFeHAoXCJbflxcXFwqL1xcXFxbXFxcXF1dXCIpO1xuXG4vKipcbiAqIFdyYXBzIGZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcgd2l0aCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IHRoZSBtZXRob2QgdGhhdFxuICogd2FzIHRocm93bi5cbiAqIEBwYXJhbSBtZXRob2ROYW1lIC0gVGhlIHB1YmxpY2x5IHZpc2libGUgbWV0aG9kIG5hbWVcbiAqIEBwYXJhbSBwYXRoIC0gVGhlIGRvdC1zZXBhcmF0ZWQgc3RyaW5nIGZvcm0gb2YgYSBmaWVsZCBwYXRoIHdoaWNoIHdpbGwgYmVcbiAqIHNwbGl0IG9uIGRvdHMuXG4gKiBAcGFyYW0gdGFyZ2V0RG9jIC0gVGhlIGRvY3VtZW50IGFnYWluc3Qgd2hpY2ggdGhlIGZpZWxkIHBhdGggd2lsbCBiZVxuICogZXZhbHVhdGVkLlxuICovIGZ1bmN0aW9uIFZoKHQsIGUsIG4pIHtcbiAgICBpZiAoZS5zZWFyY2godmgpID49IDApIHRocm93IFNoKGBJbnZhbGlkIGZpZWxkIHBhdGggKCR7ZX0pLiBQYXRocyBtdXN0IG5vdCBjb250YWluICd+JywgJyonLCAnLycsICdbJywgb3IgJ10nYCwgdCwgXG4gICAgLyogaGFzQ29udmVydGVyPSAqLyAhMSwgXG4gICAgLyogcGF0aD0gKi8gdm9pZCAwLCBuKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IGVoKC4uLmUuc3BsaXQoXCIuXCIpKS5faW50ZXJuYWxQYXRoO1xuICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgdGhyb3cgU2goYEludmFsaWQgZmllbGQgcGF0aCAoJHtlfSkuIFBhdGhzIG11c3Qgbm90IGJlIGVtcHR5LCBiZWdpbiB3aXRoICcuJywgZW5kIHdpdGggJy4nLCBvciBjb250YWluICcuLidgLCB0LCBcbiAgICAgICAgLyogaGFzQ29udmVydGVyPSAqLyAhMSwgXG4gICAgICAgIC8qIHBhdGg9ICovIHZvaWQgMCwgbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBTaCh0LCBlLCBuLCBzLCBpKSB7XG4gICAgY29uc3QgciA9IHMgJiYgIXMuaXNFbXB0eSgpLCBvID0gdm9pZCAwICE9PSBpO1xuICAgIGxldCB1ID0gYEZ1bmN0aW9uICR7ZX0oKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGRhdGFgO1xuICAgIG4gJiYgKHUgKz0gXCIgKHZpYSBgdG9GaXJlc3RvcmUoKWApXCIpLCB1ICs9IFwiLiBcIjtcbiAgICBsZXQgYyA9IFwiXCI7XG4gICAgcmV0dXJuIChyIHx8IG8pICYmIChjICs9IFwiIChmb3VuZFwiLCByICYmIChjICs9IGAgaW4gZmllbGQgJHtzfWApLCBvICYmIChjICs9IGAgaW4gZG9jdW1lbnQgJHtpfWApLCBcbiAgICBjICs9IFwiKVwiKSwgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCB1ICsgdCArIGMpO1xufVxuXG4vKiogQ2hlY2tzIGBoYXlzdGFja2AgaWYgRmllbGRQYXRoIGBuZWVkbGVgIGlzIHByZXNlbnQuIFJ1bnMgaW4gTyhuKS4gKi8gZnVuY3Rpb24gRGgodCwgZSkge1xuICAgIHJldHVybiB0LnNvbWUoKHQgPT4gdC5pc0VxdWFsKGUpKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91ciBGaXJlc3RvcmVcbiAqIGRhdGFiYXNlLiBUaGUgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0b1xuICogZ2V0IGEgc3BlY2lmaWMgZmllbGQuXG4gKlxuICogRm9yIGEgYERvY3VtZW50U25hcHNob3RgIHRoYXQgcG9pbnRzIHRvIGEgbm9uLWV4aXN0aW5nIGRvY3VtZW50LCBhbnkgZGF0YVxuICogYWNjZXNzIHdpbGwgcmV0dXJuICd1bmRlZmluZWQnLiBZb3UgY2FuIHVzZSB0aGUgYGV4aXN0cygpYCBtZXRob2QgdG9cbiAqIGV4cGxpY2l0bHkgdmVyaWZ5IGEgZG9jdW1lbnQncyBleGlzdGVuY2UuXG4gKi8gY2xhc3MgQ2gge1xuICAgIC8vIE5vdGU6IFRoaXMgY2xhc3MgaXMgc3RyaXBwZWQgZG93biB2ZXJzaW9uIG9mIHRoZSBEb2N1bWVudFNuYXBzaG90IGluXG4gICAgLy8gdGhlIGxlZ2FjeSBTREsuIFRoZSBjaGFuZ2VzIGFyZTpcbiAgICAvLyAtIE5vIHN1cHBvcnQgZm9yIFNuYXBzaG90TWV0YWRhdGEuXG4gICAgLy8gLSBObyBzdXBwb3J0IGZvciBTbmFwc2hvdE9wdGlvbnMuXG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgcHJvdGVjdGVkICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLl9maXJlc3RvcmUgPSB0LCB0aGlzLl91c2VyRGF0YVdyaXRlciA9IGUsIHRoaXMuX2tleSA9IG4sIHRoaXMuX2RvY3VtZW50ID0gcywgXG4gICAgICAgIHRoaXMuX2NvbnZlcnRlciA9IGk7XG4gICAgfVxuICAgIC8qKiBQcm9wZXJ0eSBvZiB0aGUgYERvY3VtZW50U25hcHNob3RgIHRoYXQgcHJvdmlkZXMgdGhlIGRvY3VtZW50J3MgSUQuICovICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmxhc3RTZWdtZW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBgRG9jdW1lbnRSZWZlcmVuY2VgIGZvciB0aGUgZG9jdW1lbnQgaW5jbHVkZWQgaW4gdGhlIGBEb2N1bWVudFNuYXBzaG90YC5cbiAgICAgKi8gICAgZ2V0IHJlZigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYYyh0aGlzLl9maXJlc3RvcmUsIHRoaXMuX2NvbnZlcnRlciwgdGhpcy5fa2V5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2lnbmFscyB3aGV0aGVyIG9yIG5vdCB0aGUgZG9jdW1lbnQgYXQgdGhlIHNuYXBzaG90J3MgbG9jYXRpb24gZXhpc3RzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgZG9jdW1lbnQgZXhpc3RzLlxuICAgICAqLyAgICBleGlzdHMoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLl9kb2N1bWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmXG4gICAgICogdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBgT2JqZWN0YCBjb250YWluaW5nIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IG9yIGB1bmRlZmluZWRgXG4gICAgICogaWYgdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICovICAgIGRhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kb2N1bWVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnZlcnRlcikge1xuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB1c2UgdGhlIGNvbnZlcnRlciBhbmQgY3JlYXRlIGEgbmV3IERvY3VtZW50U25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyBpZiBhIGNvbnZlcnRlciBoYXMgYmVlbiBwcm92aWRlZC5cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IHhoKHRoaXMuX2ZpcmVzdG9yZSwgdGhpcy5fdXNlckRhdGFXcml0ZXIsIHRoaXMuX2tleSwgdGhpcy5fZG9jdW1lbnQsIFxuICAgICAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRlci5mcm9tRmlyZXN0b3JlKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZSh0aGlzLl9kb2N1bWVudC5kYXRhLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGZpZWxkIHNwZWNpZmllZCBieSBgZmllbGRQYXRoYC4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBvciBmaWVsZCBkb2Vzbid0IGV4aXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkUGF0aCAtIFRoZSBwYXRoIChmb3IgZXhhbXBsZSAnZm9vJyBvciAnZm9vLmJhcicpIHRvIGEgc3BlY2lmaWNcbiAgICAgKiBmaWVsZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGF0YSBhdCB0aGUgc3BlY2lmaWVkIGZpZWxkIGxvY2F0aW9uIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoXG4gICAgICogZmllbGQgZXhpc3RzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICAvLyBXZSBhcmUgdXNpbmcgYGFueWAgaGVyZSB0byBhdm9pZCBhbiBleHBsaWNpdCBjYXN0IGJ5IG91ciB1c2Vycy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGdldCh0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kb2N1bWVudCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX2RvY3VtZW50LmRhdGEuZmllbGQoTmgoXCJEb2N1bWVudFNuYXBzaG90LmdldFwiLCB0KSk7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZSkgcmV0dXJuIHRoaXMuX3VzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZShlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBRdWVyeURvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91clxuICogRmlyZXN0b3JlIGRhdGFiYXNlIGFzIHBhcnQgb2YgYSBxdWVyeS4gVGhlIGRvY3VtZW50IGlzIGd1YXJhbnRlZWQgdG8gZXhpc3RcbiAqIGFuZCBpdHMgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0byBnZXQgYVxuICogc3BlY2lmaWMgZmllbGQuXG4gKlxuICogQSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBvZmZlcnMgdGhlIHNhbWUgQVBJIHN1cmZhY2UgYXMgYVxuICogYERvY3VtZW50U25hcHNob3RgLiBTaW5jZSBxdWVyeSByZXN1bHRzIGNvbnRhaW4gb25seSBleGlzdGluZyBkb2N1bWVudHMsIHRoZVxuICogYGV4aXN0c2AgcHJvcGVydHkgd2lsbCBhbHdheXMgYmUgdHJ1ZSBhbmQgYGRhdGEoKWAgd2lsbCBuZXZlciByZXR1cm5cbiAqICd1bmRlZmluZWQnLlxuICovIGNsYXNzIHhoIGV4dGVuZHMgQ2gge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudCBhcyBhbiBgT2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm5zIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRhdGEoKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgY2FsbHMgYGZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcoKWAgYnV0IHdyYXBzIGFueSBlcnJvciB0aHJvd24uXG4gKi8gZnVuY3Rpb24gTmgodCwgZSkge1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gVmgodCwgZSkgOiBlIGluc3RhbmNlb2YgZWggPyBlLl9pbnRlcm5hbFBhdGggOiBlLl9kZWxlZ2F0ZS5faW50ZXJuYWxQYXRoO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiBraCh0KSB7XG4gICAgaWYgKFwiTFwiIC8qIExhc3QgKi8gPT09IHQubGltaXRUeXBlICYmIDAgPT09IHQuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCkgdGhyb3cgbmV3IEwoQi5VTklNUExFTUVOVEVELCBcImxpbWl0VG9MYXN0KCkgcXVlcmllcyByZXF1aXJlIHNwZWNpZnlpbmcgYXQgbGVhc3Qgb25lIG9yZGVyQnkoKSBjbGF1c2VcIik7XG59XG5cbi8qKlxuICogQSBgUXVlcnlDb25zdHJhaW50YCBpcyB1c2VkIHRvIG5hcnJvdyB0aGUgc2V0IG9mIGRvY3VtZW50cyByZXR1cm5lZCBieSBhXG4gKiBGaXJlc3RvcmUgcXVlcnkuIGBRdWVyeUNvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZyB7QGxpbmsgd2hlcmV9LFxuICoge0BsaW5rIG9yZGVyQnl9LCB7QGxpbmsgKHN0YXJ0QXQ6MSl9LCB7QGxpbmsgKHN0YXJ0QWZ0ZXI6MSl9LCB7QGxpbmtcbiAqIGVuZEJlZm9yZToxfSwge0BsaW5rIChlbmRBdDoxKX0sIHtAbGluayBsaW1pdH0gb3Ige0BsaW5rIGxpbWl0VG9MYXN0fSBhbmRcbiAqIGNhbiB0aGVuIGJlIHBhc3NlZCB0byB7QGxpbmsgcXVlcnl9IHRvIGNyZWF0ZSBhIG5ldyBxdWVyeSBpbnN0YW5jZSB0aGF0XG4gKiBhbHNvIGNvbnRhaW5zIHRoaXMgYFF1ZXJ5Q29uc3RyYWludGAuXG4gKi8gY2xhc3MgT2gge31cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGltbXV0YWJsZSBpbnN0YW5jZSBvZiB7QGxpbmsgUXVlcnl9IHRoYXQgaXMgZXh0ZW5kZWQgdG8gYWxzbyBpbmNsdWRlXG4gKiBhZGRpdGlvbmFsIHF1ZXJ5IGNvbnN0cmFpbnRzLlxuICpcbiAqIEBwYXJhbSBxdWVyeSAtIFRoZSB7QGxpbmsgUXVlcnl9IGluc3RhbmNlIHRvIHVzZSBhcyBhIGJhc2UgZm9yIHRoZSBuZXcgY29uc3RyYWludHMuXG4gKiBAcGFyYW0gcXVlcnlDb25zdHJhaW50cyAtIFRoZSBsaXN0IG9mIHtAbGluayBRdWVyeUNvbnN0cmFpbnR9cyB0byBhcHBseS5cbiAqIEB0aHJvd3MgaWYgYW55IG9mIHRoZSBwcm92aWRlZCBxdWVyeSBjb25zdHJhaW50cyBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCB0aGVcbiAqIGV4aXN0aW5nIG9yIG5ldyBjb25zdHJhaW50cy5cbiAqLyBmdW5jdGlvbiBNaCh0LCAuLi5lKSB7XG4gICAgZm9yIChjb25zdCBuIG9mIGUpIHQgPSBuLl9hcHBseSh0KTtcbiAgICByZXR1cm4gdDtcbn1cblxuY2xhc3MgRmggZXh0ZW5kcyBPaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLm1hID0gdCwgdGhpcy5nYSA9IGUsIHRoaXMueWEgPSBuLCB0aGlzLnR5cGUgPSBcIndoZXJlXCI7XG4gICAgfVxuICAgIF9hcHBseSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBsaCh0LmZpcmVzdG9yZSksIG4gPSBmdW5jdGlvbih0LCBlLCBuLCBzLCBpLCByLCBvKSB7XG4gICAgICAgICAgICBsZXQgdTtcbiAgICAgICAgICAgIGlmIChpLmlzS2V5RmllbGQoKSkge1xuICAgICAgICAgICAgICAgIGlmIChcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gPT09IHIgfHwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IHIpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgUXVlcnkuIFlvdSBjYW4ndCBwZXJmb3JtICcke3J9JyBxdWVyaWVzIG9uIGRvY3VtZW50SWQoKS5gKTtcbiAgICAgICAgICAgICAgICBpZiAoXCJpblwiIC8qIElOICovID09PSByIHx8IFwibm90LWluXCIgLyogTk9UX0lOICovID09PSByKSB7XG4gICAgICAgICAgICAgICAgICAgIFhoKG8sIHIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBvKSBlLnB1c2goWWgocywgdCwgbikpO1xuICAgICAgICAgICAgICAgICAgICB1ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB1ID0gWWgocywgdCwgbyk7XG4gICAgICAgICAgICB9IGVsc2UgXCJpblwiIC8qIElOICovICE9PSByICYmIFwibm90LWluXCIgLyogTk9UX0lOICovICE9PSByICYmIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICE9PSByIHx8IFhoKG8sIHIpLCBcbiAgICAgICAgICAgIHUgPSBUaChuLCBlLCBvLCBcbiAgICAgICAgICAgIC8qIGFsbG93QXJyYXlzPSAqLyBcImluXCIgLyogSU4gKi8gPT09IHIgfHwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gPT09IHIpO1xuICAgICAgICAgICAgY29uc3QgYyA9IEJlLmNyZWF0ZShpLCByLCB1KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuZHQoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gcm4odCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBuICYmICFuLmlzRXF1YWwoZS5maWVsZCkpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIEFsbCB3aGVyZSBmaWx0ZXJzIHdpdGggYW4gaW5lcXVhbGl0eSAoPCwgPD0sICE9LCBub3QtaW4sID4sIG9yID49KSBtdXN0IGJlIG9uIHRoZSBzYW1lIGZpZWxkLiBCdXQgeW91IGhhdmUgaW5lcXVhbGl0eSBmaWx0ZXJzIG9uICcke24udG9TdHJpbmcoKX0nIGFuZCAnJHtlLmZpZWxkLnRvU3RyaW5nKCl9J2ApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gc24odCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHMgJiYgWmgodCwgZS5maWVsZCwgcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmZpbHRlcnMpIGlmIChlLmluZGV4T2Yobi5vcCkgPj0gMCkgcmV0dXJuIG4ub3A7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0odCwgXG4gICAgICAgICAgICAgICAgLyoqXG4gKiBHaXZlbiBhbiBvcGVyYXRvciwgcmV0dXJucyB0aGUgc2V0IG9mIG9wZXJhdG9ycyB0aGF0IGNhbm5vdCBiZSB1c2VkIHdpdGggaXQuXG4gKlxuICogT3BlcmF0b3JzIGluIGEgcXVlcnkgbXVzdCBhZGhlcmUgdG8gdGhlIGZvbGxvd2luZyBzZXQgb2YgcnVsZXM6XG4gKiAxLiBPbmx5IG9uZSBhcnJheSBvcGVyYXRvciBpcyBhbGxvd2VkLlxuICogMi4gT25seSBvbmUgZGlzanVuY3RpdmUgb3BlcmF0b3IgaXMgYWxsb3dlZC5cbiAqIDMuIGBOT1RfRVFVQUxgIGNhbm5vdCBiZSB1c2VkIHdpdGggYW5vdGhlciBgTk9UX0VRVUFMYCBvcGVyYXRvci5cbiAqIDQuIGBOT1RfSU5gIGNhbm5vdCBiZSB1c2VkIHdpdGggYXJyYXksIGRpc2p1bmN0aXZlLCBvciBgTk9UX0VRVUFMYCBvcGVyYXRvcnMuXG4gKlxuICogQXJyYXkgb3BlcmF0b3JzOiBgQVJSQVlfQ09OVEFJTlNgLCBgQVJSQVlfQ09OVEFJTlNfQU5ZYFxuICogRGlzanVuY3RpdmUgb3BlcmF0b3JzOiBgSU5gLCBgQVJSQVlfQ09OVEFJTlNfQU5ZYCwgYE5PVF9JTmBcbiAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiE9XCIgLyogTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIFwiIT1cIiAvKiBOT1RfRVFVQUwgKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovICwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluXCIgLyogSU4gKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gLCBcImluXCIgLyogSU4gKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gLCBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyAsIFwiaW5cIiAvKiBJTiAqLyAsIFwibm90LWluXCIgLyogTk9UX0lOICovIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogTk9UX0lOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIFwiYXJyYXktY29udGFpbnNcIiAvKiBBUlJBWV9DT05UQUlOUyAqLyAsIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgXCJpblwiIC8qIElOICovICwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gLCBcIiE9XCIgLyogTk9UX0VRVUFMICovIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfShlLm9wKSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG4pIFxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSB3aGVuIGl0J3MgYSBkdXBsaWNhdGUgb3AgdG8gZ2l2ZSBhIHNsaWdodGx5IGNsZWFyZXIgZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICAgICAgICB0aHJvdyBuID09PSBlLm9wID8gbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSAnJHtlLm9wLnRvU3RyaW5nKCl9JyBmaWx0ZXIuYCkgOiBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBZb3UgY2Fubm90IHVzZSAnJHtlLm9wLnRvU3RyaW5nKCl9JyBmaWx0ZXJzIHdpdGggJyR7bi50b1N0cmluZygpfScgZmlsdGVycy5gKTtcbiAgICAgICAgICAgIH0odCwgYyksIGM7XG4gICAgICAgIH0odC5fcXVlcnksIFwid2hlcmVcIiwgZSwgdC5maXJlc3RvcmUuX2RhdGFiYXNlSWQsIHRoaXMubWEsIHRoaXMuZ2EsIHRoaXMueWEpO1xuICAgICAgICByZXR1cm4gbmV3IFpjKHQuZmlyZXN0b3JlLCB0LmNvbnZlcnRlciwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuZmlsdGVycy5jb25jYXQoWyBlIF0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBaZSh0LnBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCBuLCB0LmxpbWl0LCB0LmxpbWl0VHlwZSwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbiAgICAgICAgfSh0Ll9xdWVyeSwgbikpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIFF1ZXJ5Q29uc3RyYWludH0gdGhhdCBlbmZvcmNlcyB0aGF0IGRvY3VtZW50cyBtdXN0IGNvbnRhaW4gdGhlXG4gKiBzcGVjaWZpZWQgZmllbGQgYW5kIHRoYXQgdGhlIHZhbHVlIHNob3VsZCBzYXRpc2Z5IHRoZSByZWxhdGlvbiBjb25zdHJhaW50XG4gKiBwcm92aWRlZC5cbiAqXG4gKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIHBhdGggdG8gY29tcGFyZVxuICogQHBhcmFtIG9wU3RyIC0gVGhlIG9wZXJhdGlvbiBzdHJpbmcgKGUuZyBcIiZsdDtcIiwgXCImbHQ7PVwiLCBcIj09XCIsIFwiJmx0O1wiLFxuICogICBcIiZsdDs9XCIsIFwiIT1cIikuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgZm9yIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHtAbGluayBRdWVyeX0uXG4gKi8gZnVuY3Rpb24gJGgodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBlLCBpID0gTmgoXCJ3aGVyZVwiLCB0KTtcbiAgICByZXR1cm4gbmV3IEZoKGksIHMsIG4pO1xufVxuXG5jbGFzcyBCaCBleHRlbmRzIE9oIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMubWEgPSB0LCB0aGlzLnBhID0gZSwgdGhpcy50eXBlID0gXCJvcmRlckJ5XCI7XG4gICAgfVxuICAgIF9hcHBseSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5zdGFydEF0KSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IG11c3Qgbm90IGNhbGwgc3RhcnRBdCgpIG9yIHN0YXJ0QWZ0ZXIoKSBiZWZvcmUgY2FsbGluZyBvcmRlckJ5KCkuXCIpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQuZW5kQXQpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgbXVzdCBub3QgY2FsbCBlbmRBdCgpIG9yIGVuZEJlZm9yZSgpIGJlZm9yZSBjYWxsaW5nIG9yZGVyQnkoKS5cIik7XG4gICAgICAgICAgICBjb25zdCBzID0gbmV3IEhlKGUsIG4pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gc24odCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3Qgb3JkZXIgYnkuIEl0IG11c3QgbWF0Y2ggYW55IGluZXF1YWxpdHkuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBybih0KTtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gbiAmJiBaaCh0LCBuLCBlLmZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KHQsIHMpLCBzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQ3JlYXRlIGEgYEJvdW5kYCBmcm9tIGEgcXVlcnkgYW5kIGEgZG9jdW1lbnQuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBgQm91bmRgIHdpbGwgYWx3YXlzIGluY2x1ZGUgdGhlIGtleSBvZiB0aGUgZG9jdW1lbnRcbiAqIGFuZCBzbyBvbmx5IHRoZSBwcm92aWRlZCBkb2N1bWVudCB3aWxsIGNvbXBhcmUgZXF1YWwgdG8gdGhlIHJldHVybmVkXG4gKiBwb3NpdGlvbi5cbiAqXG4gKiBXaWxsIHRocm93IGlmIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBjb250YWluIGFsbCBmaWVsZHMgb2YgdGhlIG9yZGVyIGJ5XG4gKiBvZiB0aGUgcXVlcnkgb3IgaWYgYW55IG9mIHRoZSBmaWVsZHMgaW4gdGhlIG9yZGVyIGJ5IGFyZSBhbiB1bmNvbW1pdHRlZFxuICogc2VydmVyIHRpbWVzdGFtcC5cbiAqLyAodC5fcXVlcnksIHRoaXMubWEsIHRoaXMucGEpO1xuICAgICAgICByZXR1cm4gbmV3IFpjKHQuZmlyZXN0b3JlLCB0LmNvbnZlcnRlciwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0ZSB0aGF0IG9yZGVyQnkgZG9lcyBub3QgbGlzdCB0aGUgc2FtZSBrZXkgdHdpY2UuXG4gICAgICAgICAgICBjb25zdCBuID0gdC5leHBsaWNpdE9yZGVyQnkuY29uY2F0KFsgZSBdKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWmUodC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgbiwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xuICAgICAgICB9KHQuX3F1ZXJ5LCBlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlDb25zdHJhaW50fSB0aGF0IHNvcnRzIHRoZSBxdWVyeSByZXN1bHQgYnkgdGhlXG4gKiBzcGVjaWZpZWQgZmllbGQsIG9wdGlvbmFsbHkgaW4gZGVzY2VuZGluZyBvcmRlciBpbnN0ZWFkIG9mIGFzY2VuZGluZy5cbiAqXG4gKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIGZpZWxkIHRvIHNvcnQgYnkuXG4gKiBAcGFyYW0gZGlyZWN0aW9uU3RyIC0gT3B0aW9uYWwgZGlyZWN0aW9uIHRvIHNvcnQgYnkgKCdhc2MnIG9yICdkZXNjJykuIElmXG4gKiBub3Qgc3BlY2lmaWVkLCBvcmRlciB3aWxsIGJlIGFzY2VuZGluZy5cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHtAbGluayBRdWVyeX0uXG4gKi8gZnVuY3Rpb24gTGgodCwgZSA9IFwiYXNjXCIpIHtcbiAgICBjb25zdCBuID0gZSwgcyA9IE5oKFwib3JkZXJCeVwiLCB0KTtcbiAgICByZXR1cm4gbmV3IEJoKHMsIG4pO1xufVxuXG5jbGFzcyBVaCBleHRlbmRzIE9oIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMudHlwZSA9IHQsIHRoaXMuSWEgPSBlLCB0aGlzLlRhID0gbjtcbiAgICB9XG4gICAgX2FwcGx5KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBaYyh0LmZpcmVzdG9yZSwgdC5jb252ZXJ0ZXIsIGFuKHQuX3F1ZXJ5LCB0aGlzLklhLCB0aGlzLlRhKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlDb25zdHJhaW50fSB0aGF0IG9ubHkgcmV0dXJucyB0aGUgZmlyc3QgbWF0Y2hpbmcgZG9jdW1lbnRzLlxuICpcbiAqIEBwYXJhbSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnl9LlxuICovIGZ1bmN0aW9uIHFoKHQpIHtcbiAgICByZXR1cm4gV2MoXCJsaW1pdFwiLCB0KSwgbmV3IFVoKFwibGltaXRcIiwgdCwgXCJGXCIgLyogRmlyc3QgKi8pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlDb25zdHJhaW50fSB0aGF0IG9ubHkgcmV0dXJucyB0aGUgbGFzdCBtYXRjaGluZyBkb2N1bWVudHMuXG4gKlxuICogWW91IG11c3Qgc3BlY2lmeSBhdCBsZWFzdCBvbmUgYG9yZGVyQnlgIGNsYXVzZSBmb3IgYGxpbWl0VG9MYXN0YCBxdWVyaWVzLFxuICogb3RoZXJ3aXNlIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biBkdXJpbmcgZXhlY3V0aW9uLlxuICpcbiAqIEBwYXJhbSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnl9LlxuICovIGZ1bmN0aW9uIEtoKHQpIHtcbiAgICByZXR1cm4gV2MoXCJsaW1pdFRvTGFzdFwiLCB0KSwgbmV3IFVoKFwibGltaXRUb0xhc3RcIiwgdCwgXCJMXCIgLyogTGFzdCAqLyk7XG59XG5cbmNsYXNzIEdoIGV4dGVuZHMgT2gge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy50eXBlID0gdCwgdGhpcy5FYSA9IGUsIHRoaXMuQWEgPSBuO1xuICAgIH1cbiAgICBfYXBwbHkodCkge1xuICAgICAgICBjb25zdCBlID0gSmgodCwgdGhpcy50eXBlLCB0aGlzLkVhLCB0aGlzLkFhKTtcbiAgICAgICAgcmV0dXJuIG5ldyBaYyh0LmZpcmVzdG9yZSwgdC5jb252ZXJ0ZXIsIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWmUodC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCBlLCB0LmVuZEF0KTtcbiAgICAgICAgfSh0Ll9xdWVyeSwgZSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUWgoLi4udCkge1xuICAgIHJldHVybiBuZXcgR2goXCJzdGFydEF0XCIsIHQsIFxuICAgIC8qaW5jbHVzaXZlPSovICEwKTtcbn1cblxuZnVuY3Rpb24gamgoLi4udCkge1xuICAgIHJldHVybiBuZXcgR2goXCJzdGFydEFmdGVyXCIsIHQsIFxuICAgIC8qaW5jbHVzaXZlPSovICExKTtcbn1cblxuY2xhc3MgV2ggZXh0ZW5kcyBPaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSB0LCB0aGlzLkVhID0gZSwgdGhpcy5BYSA9IG47XG4gICAgfVxuICAgIF9hcHBseSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBKaCh0LCB0aGlzLnR5cGUsIHRoaXMuRWEsIHRoaXMuQWEpO1xuICAgICAgICByZXR1cm4gbmV3IFpjKHQuZmlyZXN0b3JlLCB0LmNvbnZlcnRlciwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBaZSh0LnBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCB0LmZpbHRlcnMuc2xpY2UoKSwgdC5saW1pdCwgdC5saW1pdFR5cGUsIHQuc3RhcnRBdCwgZSk7XG4gICAgICAgIH0odC5fcXVlcnksIGUpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHpoKC4uLnQpIHtcbiAgICByZXR1cm4gbmV3IFdoKFwiZW5kQmVmb3JlXCIsIHQsIFxuICAgIC8qaW5jbHVzaXZlPSovICExKTtcbn1cblxuZnVuY3Rpb24gSGgoLi4udCkge1xuICAgIHJldHVybiBuZXcgV2goXCJlbmRBdFwiLCB0LCAvKmluY2x1c2l2ZT0qLyAhMCk7XG59XG5cbi8qKiBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGEgYm91bmQgZnJvbSBhIGRvY3VtZW50IG9yIGZpZWxkcyAqLyBmdW5jdGlvbiBKaCh0LCBlLCBuLCBzKSB7XG4gICAgaWYgKG5bMF0gPSBnZXRNb2R1bGFySW5zdGFuY2UoblswXSksIG5bMF0gaW5zdGFuY2VvZiBDaCkgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgaWYgKCFzKSB0aHJvdyBuZXcgTChCLk5PVF9GT1VORCwgYENhbid0IHVzZSBhIERvY3VtZW50U25hcHNob3QgdGhhdCBkb2Vzbid0IGV4aXN0IGZvciAke259KCkuYCk7XG4gICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgLy8gQmVjYXVzZSBwZW9wbGUgZXhwZWN0IHRvIGNvbnRpbnVlL2VuZCBhIHF1ZXJ5IGF0IHRoZSBleGFjdCBkb2N1bWVudFxuICAgICAgICAvLyBwcm92aWRlZCwgd2UgbmVlZCB0byB1c2UgdGhlIGltcGxpY2l0IHNvcnQgb3JkZXIgcmF0aGVyIHRoYW4gdGhlIGV4cGxpY2l0XG4gICAgICAgIC8vIHNvcnQgb3JkZXIsIGJlY2F1c2UgaXQncyBndWFyYW50ZWVkIHRvIGNvbnRhaW4gdGhlIGRvY3VtZW50IGtleS4gVGhhdCB3YXlcbiAgICAgICAgLy8gdGhlIHBvc2l0aW9uIGJlY29tZXMgdW5hbWJpZ3VvdXMgYW5kIHRoZSBxdWVyeSBjb250aW51ZXMvZW5kcyBleGFjdGx5IGF0XG4gICAgICAgIC8vIHRoZSBwcm92aWRlZCBkb2N1bWVudC4gV2l0aG91dCB0aGUga2V5IChieSB1c2luZyB0aGUgZXhwbGljaXQgc29ydFxuICAgICAgICAvLyBvcmRlcnMpLCBtdWx0aXBsZSBkb2N1bWVudHMgY291bGQgbWF0Y2ggdGhlIHBvc2l0aW9uLCB5aWVsZGluZyBkdXBsaWNhdGVcbiAgICAgICAgLy8gcmVzdWx0cy5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdW4odCkpIGlmIChuLmZpZWxkLmlzS2V5RmllbGQoKSkgci5wdXNoKHdlKGUsIHMua2V5KSk7IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdCA9IHMuZGF0YS5maWVsZChuLmZpZWxkKTtcbiAgICAgICAgICAgIGlmIChYdCh0KSkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBxdWVyeS4gWW91IGFyZSB0cnlpbmcgdG8gc3RhcnQgb3IgZW5kIGEgcXVlcnkgdXNpbmcgYSBkb2N1bWVudCBmb3Igd2hpY2ggdGhlIGZpZWxkIFwiJyArIG4uZmllbGQgKyAnXCIgaXMgYW4gdW5jb21taXR0ZWQgc2VydmVyIHRpbWVzdGFtcC4gKFNpbmNlIHRoZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGlzIHVua25vd24sIHlvdSBjYW5ub3Qgc3RhcnQvZW5kIGEgcXVlcnkgd2l0aCBpdC4pJyk7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFlvdSBhcmUgdHJ5aW5nIHRvIHN0YXJ0IG9yIGVuZCBhIHF1ZXJ5IHVzaW5nIGEgZG9jdW1lbnQgZm9yIHdoaWNoIHRoZSBmaWVsZCAnJHt0fScgKHVzZWQgYXMgdGhlIG9yZGVyQnkpIGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgci5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgemUociwgaSk7XG4gICAgfVxuICAgIC8qKlxuICogQ29udmVydHMgYSBsaXN0IG9mIGZpZWxkIHZhbHVlcyB0byBhIGBCb3VuZGAgZm9yIHRoZSBnaXZlbiBxdWVyeS5cbiAqLyAodC5fcXVlcnksIHQuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCBlLCBuWzBdLl9kb2N1bWVudCwgcyk7XG4gICAge1xuICAgICAgICBjb25zdCBpID0gbGgodC5maXJlc3RvcmUpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICAgICAgLy8gVXNlIGV4cGxpY2l0IG9yZGVyIGJ5J3MgYmVjYXVzZSBpdCBoYXMgdG8gbWF0Y2ggdGhlIHF1ZXJ5IHRoZSB1c2VyIG1hZGVcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0LmV4cGxpY2l0T3JkZXJCeTtcbiAgICAgICAgICAgIGlmIChpLmxlbmd0aCA+IG8ubGVuZ3RoKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gJHtzfSgpLiBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG9yZGVyQnkoKSBjbGF1c2VzYCk7XG4gICAgICAgICAgICBjb25zdCB1ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gaVtyXTtcbiAgICAgICAgICAgICAgICBpZiAob1tyXS5maWVsZC5pc0tleUZpZWxkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGMpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIEV4cGVjdGVkIGEgc3RyaW5nIGZvciBkb2N1bWVudCBJRCBpbiAke3N9KCksIGJ1dCBnb3QgYSAke3R5cGVvZiBjfWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9uKHQpICYmIC0xICE9PSBjLmluZGV4T2YoXCIvXCIpKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBhbmQgb3JkZXJpbmcgYnkgZG9jdW1lbnRJZCgpLCB0aGUgdmFsdWUgcGFzc2VkIHRvICR7c30oKSBtdXN0IGJlIGEgcGxhaW4gZG9jdW1lbnQgSUQsIGJ1dCAnJHtjfScgY29udGFpbnMgYSBzbGFzaC5gKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucGF0aC5jaGlsZChydC5mcm9tU3RyaW5nKGMpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdC5pc0RvY3VtZW50S2V5KG4pKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBncm91cCBhbmQgb3JkZXJpbmcgYnkgZG9jdW1lbnRJZCgpLCB0aGUgdmFsdWUgcGFzc2VkIHRvICR7c30oKSBtdXN0IHJlc3VsdCBpbiBhIHZhbGlkIGRvY3VtZW50IHBhdGgsIGJ1dCAnJHtufScgaXMgbm90IGJlY2F1c2UgaXQgY29udGFpbnMgYW4gb2RkIG51bWJlciBvZiBzZWdtZW50cy5gKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBjdChuKTtcbiAgICAgICAgICAgICAgICAgICAgdS5wdXNoKHdlKGUsIGkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gVGgobiwgcywgYyk7XG4gICAgICAgICAgICAgICAgICAgIHUucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IHplKHUsIHIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBgZG9jdW1lbnRJZFZhbHVlYCBpbnRvIGEgYFJlZmVyZW5jZVZhbHVlYCwgdGhyb3dpbmdcbiAqIGFwcHJvcHJpYXRlIGVycm9ycyBpZiB0aGUgdmFsdWUgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhIGBEb2N1bWVudFJlZmVyZW5jZWBcbiAqIG9yIGBzdHJpbmdgLCBvciBpZiB0aGUgc3RyaW5nIGlzIG1hbGZvcm1lZC5cbiAqLyAodC5fcXVlcnksIHQuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCBpLCBlLCBuLCBzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFloKHQsIGUsIG4pIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG4gPSBnZXRNb2R1bGFySW5zdGFuY2UobikpKSB7XG4gICAgICAgIGlmIChcIlwiID09PSBuKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyB3aXRoIGRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHZhbGlkIGRvY3VtZW50IElELCBidXQgaXQgd2FzIGFuIGVtcHR5IHN0cmluZy5cIik7XG4gICAgICAgIGlmICghb24oZSkgJiYgLTEgIT09IG4uaW5kZXhPZihcIi9cIikpIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGJ5IGRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHBsYWluIGRvY3VtZW50IElELCBidXQgJyR7bn0nIGNvbnRhaW5zIGEgJy8nIGNoYXJhY3Rlci5gKTtcbiAgICAgICAgY29uc3QgcyA9IGUucGF0aC5jaGlsZChydC5mcm9tU3RyaW5nKG4pKTtcbiAgICAgICAgaWYgKCFjdC5pc0RvY3VtZW50S2V5KHMpKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBncm91cCBieSBkb2N1bWVudElkKCksIHRoZSB2YWx1ZSBwcm92aWRlZCBtdXN0IHJlc3VsdCBpbiBhIHZhbGlkIGRvY3VtZW50IHBhdGgsIGJ1dCAnJHtzfScgaXMgbm90IGJlY2F1c2UgaXQgaGFzIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMgKCR7cy5sZW5ndGh9KS5gKTtcbiAgICAgICAgcmV0dXJuIHdlKHQsIG5ldyBjdChzKSk7XG4gICAgfVxuICAgIGlmIChuIGluc3RhbmNlb2YgWGMpIHJldHVybiB3ZSh0LCBuLl9rZXkpO1xuICAgIHRocm93IG5ldyBMKEIuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgd2l0aCBkb2N1bWVudElkKCksIHlvdSBtdXN0IHByb3ZpZGUgYSB2YWxpZCBzdHJpbmcgb3IgYSBEb2N1bWVudFJlZmVyZW5jZSwgYnV0IGl0IHdhczogJHtRYyhuKX0uYCk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbnRvIGEgZGlzanVuY3RpdmUgZmlsdGVyIHNhdGlzZmllcyBhbGxcbiAqIGFycmF5IHJlcXVpcmVtZW50cy5cbiAqLyBmdW5jdGlvbiBYaCh0LCBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHQpIHx8IDAgPT09IHQubGVuZ3RoKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIFF1ZXJ5LiBBIG5vbi1lbXB0eSBhcnJheSBpcyByZXF1aXJlZCBmb3IgJyR7ZS50b1N0cmluZygpfScgZmlsdGVycy5gKTtcbiAgICBpZiAodC5sZW5ndGggPiAxMCkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBRdWVyeS4gJyR7ZS50b1N0cmluZygpfScgZmlsdGVycyBzdXBwb3J0IGEgbWF4aW11bSBvZiAxMCBlbGVtZW50cyBpbiB0aGUgdmFsdWUgYXJyYXkuYCk7XG59XG5cbmZ1bmN0aW9uIFpoKHQsIGUsIG4pIHtcbiAgICBpZiAoIW4uaXNFcXVhbChlKSkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gWW91IGhhdmUgYSB3aGVyZSBmaWx0ZXIgd2l0aCBhbiBpbmVxdWFsaXR5ICg8LCA8PSwgIT0sIG5vdC1pbiwgPiwgb3IgPj0pIG9uIGZpZWxkICcke2UudG9TdHJpbmcoKX0nIGFuZCBzbyB5b3UgbXVzdCBhbHNvIHVzZSAnJHtlLnRvU3RyaW5nKCl9JyBhcyB5b3VyIGZpcnN0IGFyZ3VtZW50IHRvIG9yZGVyQnkoKSwgYnV0IHlvdXIgZmlyc3Qgb3JkZXJCeSgpIGlzIG9uIGZpZWxkICcke24udG9TdHJpbmcoKX0nIGluc3RlYWQuYCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENvbnZlcnRzIEZpcmVzdG9yZSdzIGludGVybmFsIHR5cGVzIHRvIHRoZSBKYXZhU2NyaXB0IHR5cGVzIHRoYXQgd2UgZXhwb3NlXG4gKiB0byB0aGUgdXNlci5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyB0bCB7XG4gICAgY29udmVydFZhbHVlKHQsIGUgPSBcIm5vbmVcIikge1xuICAgICAgICBzd2l0Y2ggKGNlKHQpKSB7XG4gICAgICAgICAgY2FzZSAwIC8qIE51bGxWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgIGNhc2UgMSAvKiBCb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQuYm9vbGVhblZhbHVlO1xuXG4gICAgICAgICAgY2FzZSAyIC8qIE51bWJlclZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBKdCh0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgMyAvKiBUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGltZXN0YW1wKHQudGltZXN0YW1wVmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRTZXJ2ZXJUaW1lc3RhbXAodCwgZSk7XG5cbiAgICAgICAgICBjYXNlIDUgLyogU3RyaW5nVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQuc3RyaW5nVmFsdWU7XG5cbiAgICAgICAgICBjYXNlIDYgLyogQmxvYlZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRCeXRlcyhZdCh0LmJ5dGVzVmFsdWUpKTtcblxuICAgICAgICAgIGNhc2UgNyAvKiBSZWZWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0UmVmZXJlbmNlKHQucmVmZXJlbmNlVmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA4IC8qIEdlb1BvaW50VmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEdlb1BvaW50KHQuZ2VvUG9pbnRWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDkgLyogQXJyYXlWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0QXJyYXkodC5hcnJheVZhbHVlLCBlKTtcblxuICAgICAgICAgIGNhc2UgMTAgLyogT2JqZWN0VmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydE9iamVjdCh0Lm1hcFZhbHVlLCBlKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBPKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udmVydE9iamVjdCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB7fTtcbiAgICAgICAgcmV0dXJuIEZ0KHQuZmllbGRzLCAoKHQsIHMpID0+IHtcbiAgICAgICAgICAgIG5bdF0gPSB0aGlzLmNvbnZlcnRWYWx1ZShzLCBlKTtcbiAgICAgICAgfSkpLCBuO1xuICAgIH1cbiAgICBjb252ZXJ0R2VvUG9pbnQodCkge1xuICAgICAgICByZXR1cm4gbmV3IGloKEp0KHQubGF0aXR1ZGUpLCBKdCh0LmxvbmdpdHVkZSkpO1xuICAgIH1cbiAgICBjb252ZXJ0QXJyYXkodCwgZSkge1xuICAgICAgICByZXR1cm4gKHQudmFsdWVzIHx8IFtdKS5tYXAoKHQgPT4gdGhpcy5jb252ZXJ0VmFsdWUodCwgZSkpKTtcbiAgICB9XG4gICAgY29udmVydFNlcnZlclRpbWVzdGFtcCh0LCBlKSB7XG4gICAgICAgIHN3aXRjaCAoZSkge1xuICAgICAgICAgIGNhc2UgXCJwcmV2aW91c1wiOlxuICAgICAgICAgICAgY29uc3QgbiA9IFp0KHQpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gbiA/IG51bGwgOiB0aGlzLmNvbnZlcnRWYWx1ZShuLCBlKTtcblxuICAgICAgICAgIGNhc2UgXCJlc3RpbWF0ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFRpbWVzdGFtcCh0ZSh0KSk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udmVydFRpbWVzdGFtcCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBIdCh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBudChlLnNlY29uZHMsIGUubmFub3MpO1xuICAgIH1cbiAgICBjb252ZXJ0RG9jdW1lbnRLZXkodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gcnQuZnJvbVN0cmluZyh0KTtcbiAgICAgICAgTShpaShuKSk7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgbmUobi5nZXQoMSksIG4uZ2V0KDMpKSwgaSA9IG5ldyBjdChuLnBvcEZpcnN0KDUpKTtcbiAgICAgICAgcmV0dXJuIHMuaXNFcXVhbChlKSB8fCBcbiAgICAgICAgLy8gVE9ETyhiLzY0MTMwMjAyKTogU29tZWhvdyBzdXBwb3J0IGZvcmVpZ24gcmVmZXJlbmNlcy5cbiAgICAgICAgeChgRG9jdW1lbnQgJHtpfSBjb250YWlucyBhIGRvY3VtZW50IHJlZmVyZW5jZSB3aXRoaW4gYSBkaWZmZXJlbnQgZGF0YWJhc2UgKCR7cy5wcm9qZWN0SWR9LyR7cy5kYXRhYmFzZX0pIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQuIEl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHJlZmVyZW5jZSBpbiB0aGUgY3VycmVudCBkYXRhYmFzZSAoJHtlLnByb2plY3RJZH0vJHtlLmRhdGFiYXNlfSkgaW5zdGVhZC5gKSwgXG4gICAgICAgIGk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDb252ZXJ0cyBjdXN0b20gbW9kZWwgb2JqZWN0IG9mIHR5cGUgVCBpbnRvIGBEb2N1bWVudERhdGFgIGJ5IGFwcGx5aW5nIHRoZVxuICogY29udmVydGVyIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBjb252ZXJ0aW5nIHVzZXIgb2JqZWN0cyB0byBgRG9jdW1lbnREYXRhYFxuICogYmVjYXVzZSB3ZSB3YW50IHRvIHByb3ZpZGUgdGhlIHVzZXIgd2l0aCBhIG1vcmUgc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSBpZlxuICogdGhlaXIgYHNldCgpYCBvciBmYWlscyBkdWUgdG8gaW52YWxpZCBkYXRhIG9yaWdpbmF0aW5nIGZyb20gYSBgdG9GaXJlc3RvcmUoKWBcbiAqIGNhbGwuXG4gKi8gZnVuY3Rpb24gZWwodCwgZSwgbikge1xuICAgIGxldCBzO1xuICAgIC8vIENhc3QgdG8gYGFueWAgaW4gb3JkZXIgdG8gc2F0aXNmeSB0aGUgdW5pb24gdHlwZSBjb25zdHJhaW50IG9uXG4gICAgLy8gdG9GaXJlc3RvcmUoKS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHJldHVybiBzID0gdCA/IG4gJiYgKG4ubWVyZ2UgfHwgbi5tZXJnZUZpZWxkcykgPyB0LnRvRmlyZXN0b3JlKGUsIG4pIDogdC50b0ZpcmVzdG9yZShlKSA6IGUsIFxuICAgIHM7XG59XG5cbmNsYXNzIG5sIGV4dGVuZHMgdGwge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5maXJlc3RvcmUgPSB0O1xuICAgIH1cbiAgICBjb252ZXJ0Qnl0ZXModCkge1xuICAgICAgICByZXR1cm4gbmV3IHRoKHQpO1xuICAgIH1cbiAgICBjb252ZXJ0UmVmZXJlbmNlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuY29udmVydERvY3VtZW50S2V5KHQsIHRoaXMuZmlyZXN0b3JlLl9kYXRhYmFzZUlkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBYYyh0aGlzLmZpcmVzdG9yZSwgLyogY29udmVydGVyPSAqLyBudWxsLCBlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIE1ldGFkYXRhIGFib3V0IGEgc25hcHNob3QsIGRlc2NyaWJpbmcgdGhlIHN0YXRlIG9mIHRoZSBzbmFwc2hvdC5cbiAqLyBjbGFzcyBzbCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ1dyaXRlcyA9IHQsIHRoaXMuZnJvbUNhY2hlID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYFNuYXBzaG90TWV0YWRhdGFgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBUaGUgYFNuYXBzaG90TWV0YWRhdGFgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYFNuYXBzaG90TWV0YWRhdGFgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQZW5kaW5nV3JpdGVzID09PSB0Lmhhc1BlbmRpbmdXcml0ZXMgJiYgdGhpcy5mcm9tQ2FjaGUgPT09IHQuZnJvbUNhY2hlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBEb2N1bWVudFNuYXBzaG90YCBjb250YWlucyBkYXRhIHJlYWQgZnJvbSBhIGRvY3VtZW50IGluIHlvdXIgRmlyZXN0b3JlXG4gKiBkYXRhYmFzZS4gVGhlIGRhdGEgY2FuIGJlIGV4dHJhY3RlZCB3aXRoIGAuZGF0YSgpYCBvciBgLmdldCg8ZmllbGQ+KWAgdG9cbiAqIGdldCBhIHNwZWNpZmljIGZpZWxkLlxuICpcbiAqIEZvciBhIGBEb2N1bWVudFNuYXBzaG90YCB0aGF0IHBvaW50cyB0byBhIG5vbi1leGlzdGluZyBkb2N1bWVudCwgYW55IGRhdGFcbiAqIGFjY2VzcyB3aWxsIHJldHVybiAndW5kZWZpbmVkJy4gWW91IGNhbiB1c2UgdGhlIGBleGlzdHMoKWAgbWV0aG9kIHRvXG4gKiBleHBsaWNpdGx5IHZlcmlmeSBhIGRvY3VtZW50J3MgZXhpc3RlbmNlLlxuICovIGNsYXNzIGlsIGV4dGVuZHMgQ2gge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yIHByb3RlY3RlZCAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGksIHIpIHtcbiAgICAgICAgc3VwZXIodCwgZSwgbiwgcywgciksIHRoaXMuX2ZpcmVzdG9yZSA9IHQsIHRoaXMuX2ZpcmVzdG9yZUltcGwgPSB0LCB0aGlzLm1ldGFkYXRhID0gaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZGF0YSBleGlzdHMuIFRydWUgaWYgdGhlIGRvY3VtZW50IGV4aXN0cy5cbiAgICAgKi8gICAgZXhpc3RzKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZXhpc3RzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudCBhcyBhbiBgT2JqZWN0YC4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZlxuICAgICAqIHRoZSBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgYHNlcnZlclRpbWVzdGFtcCgpYCB2YWx1ZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlblxuICAgICAqIHNldCB0byB0aGVpciBmaW5hbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGFzIGBudWxsYC4gWW91IGNhbiBvdmVycmlkZVxuICAgICAqIHRoaXMgYnkgcGFzc2luZyBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIGhvdyBkYXRhIGlzIHJldHJpZXZlZCBmcm9tXG4gICAgICogdGhlIHNuYXBzaG90IChmb3IgZXhhbXBsZSB0aGUgZGVzaXJlZCBiZWhhdmlvciBmb3Igc2VydmVyIHRpbWVzdGFtcHMgdGhhdFxuICAgICAqIGhhdmUgbm90IHlldCBiZWVuIHNldCB0byB0aGVpciBmaW5hbCB2YWx1ZSkuXG4gICAgICogQHJldHVybnMgQW4gYE9iamVjdGAgY29udGFpbmluZyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudCBvciBgdW5kZWZpbmVkYCBpZlxuICAgICAqIHRoZSBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LlxuICAgICAqLyAgICBkYXRhKHQgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5fZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb252ZXJ0ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gdXNlIHRoZSBjb252ZXJ0ZXIgYW5kIGNyZWF0ZSBhIG5ldyBEb2N1bWVudFNuYXBzaG90XG4gICAgICAgICAgICAgICAgLy8gaWYgYSBjb252ZXJ0ZXIgaGFzIGJlZW4gcHJvdmlkZWQuXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBybCh0aGlzLl9maXJlc3RvcmUsIHRoaXMuX3VzZXJEYXRhV3JpdGVyLCB0aGlzLl9rZXksIHRoaXMuX2RvY3VtZW50LCB0aGlzLm1ldGFkYXRhLCBcbiAgICAgICAgICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb252ZXJ0ZXIuZnJvbUZpcmVzdG9yZShlLCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyRGF0YVdyaXRlci5jb252ZXJ0VmFsdWUodGhpcy5fZG9jdW1lbnQuZGF0YS52YWx1ZSwgdC5zZXJ2ZXJUaW1lc3RhbXBzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGZpZWxkIHNwZWNpZmllZCBieSBgZmllbGRQYXRoYC4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBvciBmaWVsZCBkb2Vzbid0IGV4aXN0LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgYSBgc2VydmVyVGltZXN0YW1wKClgIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBzZXQgdG9cbiAgICAgKiBpdHMgZmluYWwgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBgbnVsbGAuIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBieVxuICAgICAqIHBhc3NpbmcgYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIHBhdGggKGZvciBleGFtcGxlICdmb28nIG9yICdmb28uYmFyJykgdG8gYSBzcGVjaWZpY1xuICAgICAqIGZpZWxkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIGhvdyB0aGUgZmllbGQgaXMgcmV0cmlldmVkXG4gICAgICogZnJvbSB0aGUgc25hcHNob3QgKGZvciBleGFtcGxlIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciBzZXJ2ZXIgdGltZXN0YW1wc1xuICAgICAqIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4gc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlKS5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGF0YSBhdCB0aGUgc3BlY2lmaWVkIGZpZWxkIGxvY2F0aW9uIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoXG4gICAgICogZmllbGQgZXhpc3RzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICAvLyBXZSBhcmUgdXNpbmcgYGFueWAgaGVyZSB0byBhdm9pZCBhbiBleHBsaWNpdCBjYXN0IGJ5IG91ciB1c2Vycy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGdldCh0LCBlID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5fZG9jdW1lbnQuZGF0YS5maWVsZChOaChcIkRvY3VtZW50U25hcHNob3QuZ2V0XCIsIHQpKTtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBuKSByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydFZhbHVlKG4sIGUuc2VydmVyVGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBjb250YWlucyBkYXRhIHJlYWQgZnJvbSBhIGRvY3VtZW50IGluIHlvdXJcbiAqIEZpcmVzdG9yZSBkYXRhYmFzZSBhcyBwYXJ0IG9mIGEgcXVlcnkuIFRoZSBkb2N1bWVudCBpcyBndWFyYW50ZWVkIHRvIGV4aXN0XG4gKiBhbmQgaXRzIGRhdGEgY2FuIGJlIGV4dHJhY3RlZCB3aXRoIGAuZGF0YSgpYCBvciBgLmdldCg8ZmllbGQ+KWAgdG8gZ2V0IGFcbiAqIHNwZWNpZmljIGZpZWxkLlxuICpcbiAqIEEgYFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdGAgb2ZmZXJzIHRoZSBzYW1lIEFQSSBzdXJmYWNlIGFzIGFcbiAqIGBEb2N1bWVudFNuYXBzaG90YC4gU2luY2UgcXVlcnkgcmVzdWx0cyBjb250YWluIG9ubHkgZXhpc3RpbmcgZG9jdW1lbnRzLCB0aGVcbiAqIGBleGlzdHNgIHByb3BlcnR5IHdpbGwgYWx3YXlzIGJlIHRydWUgYW5kIGBkYXRhKClgIHdpbGwgbmV2ZXIgcmV0dXJuXG4gKiAndW5kZWZpbmVkJy5cbiAqLyBjbGFzcyBybCBleHRlbmRzIGlsIHtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgYXMgYW4gYE9iamVjdGAuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBgc2VydmVyVGltZXN0YW1wKClgIHZhbHVlcyB0aGF0IGhhdmUgbm90IHlldCBiZWVuXG4gICAgICogc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWQgYXMgYG51bGxgLiBZb3UgY2FuIG92ZXJyaWRlXG4gICAgICogdGhpcyBieSBwYXNzaW5nIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IGRhdGEgaXMgcmV0cmlldmVkIGZyb21cbiAgICAgKiB0aGUgc25hcHNob3QgKGZvciBleGFtcGxlIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciBzZXJ2ZXIgdGltZXN0YW1wcyB0aGF0XG4gICAgICogaGF2ZSBub3QgeWV0IGJlZW4gc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlKS5cbiAgICAgKiBAcmV0dXJucyBBbiBgT2JqZWN0YCBjb250YWluaW5nIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIGRhdGEodCA9IHt9KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5kYXRhKHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBRdWVyeVNuYXBzaG90YCBjb250YWlucyB6ZXJvIG9yIG1vcmUgYERvY3VtZW50U25hcHNob3RgIG9iamVjdHNcbiAqIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0cyBvZiBhIHF1ZXJ5LiBUaGUgZG9jdW1lbnRzIGNhbiBiZSBhY2Nlc3NlZCBhcyBhblxuICogYXJyYXkgdmlhIHRoZSBgZG9jc2AgcHJvcGVydHkgb3IgZW51bWVyYXRlZCB1c2luZyB0aGUgYGZvckVhY2hgIG1ldGhvZC4gVGhlXG4gKiBudW1iZXIgb2YgZG9jdW1lbnRzIGNhbiBiZSBkZXRlcm1pbmVkIHZpYSB0aGUgYGVtcHR5YCBhbmQgYHNpemVgXG4gKiBwcm9wZXJ0aWVzLlxuICovIGNsYXNzIG9sIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlID0gdCwgdGhpcy5fdXNlckRhdGFXcml0ZXIgPSBlLCB0aGlzLl9zbmFwc2hvdCA9IHMsIHRoaXMubWV0YWRhdGEgPSBuZXcgc2wocy5oYXNQZW5kaW5nV3JpdGVzLCBzLmZyb21DYWNoZSksIFxuICAgICAgICB0aGlzLnF1ZXJ5ID0gbjtcbiAgICB9XG4gICAgLyoqIEFuIGFycmF5IG9mIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovICAgIGdldCBkb2NzKCkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGUgPT4gdC5wdXNoKGUpKSksIHQ7XG4gICAgfVxuICAgIC8qKiBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyBpbiB0aGUgYFF1ZXJ5U25hcHNob3RgLiAqLyAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NuYXBzaG90LmRvY3Muc2l6ZTtcbiAgICB9XG4gICAgLyoqIFRydWUgaWYgdGhlcmUgYXJlIG5vIGRvY3VtZW50cyBpbiB0aGUgYFF1ZXJ5U25hcHNob3RgLiAqLyAgICBnZXQgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAwID09PSB0aGlzLnNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVudW1lcmF0ZXMgYWxsIG9mIHRoZSBkb2N1bWVudHMgaW4gdGhlIGBRdWVyeVNuYXBzaG90YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdpdGggYSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBmb3JcbiAgICAgKiBlYWNoIGRvY3VtZW50IGluIHRoZSBzbmFwc2hvdC5cbiAgICAgKiBAcGFyYW0gdGhpc0FyZyAtIFRoZSBgdGhpc2AgYmluZGluZyBmb3IgdGhlIGNhbGxiYWNrLlxuICAgICAqLyAgICBmb3JFYWNoKHQsIGUpIHtcbiAgICAgICAgdGhpcy5fc25hcHNob3QuZG9jcy5mb3JFYWNoKChuID0+IHtcbiAgICAgICAgICAgIHQuY2FsbChlLCBuZXcgcmwodGhpcy5fZmlyZXN0b3JlLCB0aGlzLl91c2VyRGF0YVdyaXRlciwgbi5rZXksIG4sIG5ldyBzbCh0aGlzLl9zbmFwc2hvdC5tdXRhdGVkS2V5cy5oYXMobi5rZXkpLCB0aGlzLl9zbmFwc2hvdC5mcm9tQ2FjaGUpLCB0aGlzLnF1ZXJ5LmNvbnZlcnRlcikpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIGRvY3VtZW50cyBjaGFuZ2VzIHNpbmNlIHRoZSBsYXN0IHNuYXBzaG90LiBJZiB0aGlzXG4gICAgICogaXMgdGhlIGZpcnN0IHNuYXBzaG90LCBhbGwgZG9jdW1lbnRzIHdpbGwgYmUgaW4gdGhlIGxpc3QgYXMgJ2FkZGVkJ1xuICAgICAqIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIGBTbmFwc2hvdExpc3Rlbk9wdGlvbnNgIHRoYXQgY29udHJvbCB3aGV0aGVyIG1ldGFkYXRhLW9ubHlcbiAgICAgKiBjaGFuZ2VzIChpLmUuIG9ubHkgYERvY3VtZW50U25hcHNob3QubWV0YWRhdGFgIGNoYW5nZWQpIHNob3VsZCB0cmlnZ2VyXG4gICAgICogc25hcHNob3QgZXZlbnRzLlxuICAgICAqLyAgICBkb2NDaGFuZ2VzKHQgPSB7fSkge1xuICAgICAgICBjb25zdCBlID0gISF0LmluY2x1ZGVNZXRhZGF0YUNoYW5nZXM7XG4gICAgICAgIGlmIChlICYmIHRoaXMuX3NuYXBzaG90LmV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiVG8gaW5jbHVkZSBtZXRhZGF0YSBjaGFuZ2VzIHdpdGggeW91ciBkb2N1bWVudCBjaGFuZ2VzLCB5b3UgbXVzdCBhbHNvIHBhc3MgeyBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOnRydWUgfSB0byBvblNuYXBzaG90KCkuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ2hhbmdlcyAmJiB0aGlzLl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyA9PT0gZSB8fCAodGhpcy5fY2FjaGVkQ2hhbmdlcyA9IFxuICAgICAgICAvKiogQ2FsY3VsYXRlcyB0aGUgYXJyYXkgb2YgYERvY3VtZW50Q2hhbmdlYHMgZm9yIGEgZ2l2ZW4gYFZpZXdTbmFwc2hvdGAuICovXG4gICAgICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmICh0Ll9zbmFwc2hvdC5vbGREb2NzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIGxldCBlID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5fc25hcHNob3QuZG9jQ2hhbmdlcy5tYXAoKG4gPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBkb2M6IG5ldyBybCh0Ll9maXJlc3RvcmUsIHQuX3VzZXJEYXRhV3JpdGVyLCBuLmRvYy5rZXksIG4uZG9jLCBuZXcgc2wodC5fc25hcHNob3QubXV0YXRlZEtleXMuaGFzKG4uZG9jLmtleSksIHQuX3NuYXBzaG90LmZyb21DYWNoZSksIHQucXVlcnkuY29udmVydGVyKSxcbiAgICAgICAgICAgICAgICAgICAgb2xkSW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleDogZSsrXG4gICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBBIGBEb2N1bWVudFNldGAgdGhhdCBpcyB1cGRhdGVkIGluY3JlbWVudGFsbHkgYXMgY2hhbmdlcyBhcmUgYXBwbGllZCB0byB1c2VcbiAgICAgICAgICAgICAgICAvLyB0byBsb29rdXAgdGhlIGluZGV4IG9mIGEgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSB0Ll9zbmFwc2hvdC5vbGREb2NzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0Ll9zbmFwc2hvdC5kb2NDaGFuZ2VzLmZpbHRlcigodCA9PiBlIHx8IDMgLyogTWV0YWRhdGEgKi8gIT09IHQudHlwZSkpLm1hcCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgcmwodC5fZmlyZXN0b3JlLCB0Ll91c2VyRGF0YVdyaXRlciwgZS5kb2Mua2V5LCBlLmRvYywgbmV3IHNsKHQuX3NuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyhlLmRvYy5rZXkpLCB0Ll9zbmFwc2hvdC5mcm9tQ2FjaGUpLCB0LnF1ZXJ5LmNvbnZlcnRlcik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTEsIHIgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQWRkZWQgKi8gIT09IGUudHlwZSAmJiAoaSA9IG4uaW5kZXhPZihlLmRvYy5rZXkpLCBuID0gbi5kZWxldGUoZS5kb2Mua2V5KSksIFxuICAgICAgICAgICAgICAgICAgICAxIC8qIFJlbW92ZWQgKi8gIT09IGUudHlwZSAmJiAobiA9IG4uYWRkKGUuZG9jKSwgciA9IG4uaW5kZXhPZihlLmRvYy5rZXkpKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdWwoZS50eXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYzogcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZEluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXg6IHJcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0odGhpcywgZSksIHRoaXMuX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzID0gZSksIHRoaXMuX2NhY2hlZENoYW5nZXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1bCh0KSB7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICByZXR1cm4gXCJhZGRlZFwiO1xuXG4gICAgICBjYXNlIDIgLyogTW9kaWZpZWQgKi8gOlxuICAgICAgY2FzZSAzIC8qIE1ldGFkYXRhICovIDpcbiAgICAgICAgcmV0dXJuIFwibW9kaWZpZWRcIjtcblxuICAgICAgY2FzZSAxIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICByZXR1cm4gXCJyZW1vdmVkXCI7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG4vLyBUT0RPKGZpcmVzdG9yZWV4cCk6IEFkZCB0ZXN0cyBmb3Igc25hcHNob3RFcXVhbCB3aXRoIGRpZmZlcmVudCBzbmFwc2hvdFxuLy8gbWV0YWRhdGFcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBzbmFwc2hvdHMgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSBsZWZ0IC0gQSBzbmFwc2hvdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IC0gQSBzbmFwc2hvdCB0byBjb21wYXJlLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc25hcHNob3RzIGFyZSBlcXVhbC5cbiAqLyBmdW5jdGlvbiBjbCh0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBpbCAmJiBlIGluc3RhbmNlb2YgaWwgPyB0Ll9maXJlc3RvcmUgPT09IGUuX2ZpcmVzdG9yZSAmJiB0Ll9rZXkuaXNFcXVhbChlLl9rZXkpICYmIChudWxsID09PSB0Ll9kb2N1bWVudCA/IG51bGwgPT09IGUuX2RvY3VtZW50IDogdC5fZG9jdW1lbnQuaXNFcXVhbChlLl9kb2N1bWVudCkpICYmIHQuX2NvbnZlcnRlciA9PT0gZS5fY29udmVydGVyIDogdCBpbnN0YW5jZW9mIG9sICYmIGUgaW5zdGFuY2VvZiBvbCAmJiAodC5fZmlyZXN0b3JlID09PSBlLl9maXJlc3RvcmUgJiYgcmEodC5xdWVyeSwgZS5xdWVyeSkgJiYgdC5tZXRhZGF0YS5pc0VxdWFsKGUubWV0YWRhdGEpICYmIHQuX3NuYXBzaG90LmlzRXF1YWwoZS5fc25hcHNob3QpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYC5cbiAqXG4gKiBOb3RlOiBgZ2V0RG9jKClgIGF0dGVtcHRzIHRvIHByb3ZpZGUgdXAtdG8tZGF0ZSBkYXRhIHdoZW4gcG9zc2libGUgYnkgd2FpdGluZ1xuICogZm9yIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBidXQgaXQgbWF5IHJldHVybiBjYWNoZWQgZGF0YSBvciBmYWlsIGlmIHlvdSBhcmVcbiAqIG9mZmxpbmUgYW5kIHRoZSBzZXJ2ZXIgY2Fubm90IGJlIHJlYWNoZWQuIFRvIHNwZWNpZnkgdGhpcyBiZWhhdmlvciwgaW52b2tlXG4gKiB7QGxpbmsgZ2V0RG9jRnJvbUNhY2hlfSBvciB7QGxpbmsgZ2V0RG9jRnJvbVNlcnZlcn0uXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2Ugb2YgdGhlIGRvY3VtZW50IHRvIGZldGNoLlxuICogQHJldHVybnMgQSBQcm9taXNlIHJlc29sdmVkIHdpdGggYSBgRG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbmluZyB0aGVcbiAqIGN1cnJlbnQgZG9jdW1lbnQgY29udGVudHMuXG4gKi8gZnVuY3Rpb24gYWwodCkge1xuICAgIHQgPSBqYyh0LCBYYyk7XG4gICAgY29uc3QgZSA9IGpjKHQuZmlyZXN0b3JlLCAkYSk7XG4gICAgcmV0dXJuIFZhKFVhKGUpLCB0Ll9rZXkpLnRoZW4oKG4gPT4gQWwoZSwgdCwgbikpKTtcbn1cblxuY2xhc3MgaGwgZXh0ZW5kcyB0bCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmZpcmVzdG9yZSA9IHQ7XG4gICAgfVxuICAgIGNvbnZlcnRCeXRlcyh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgdGgodCk7XG4gICAgfVxuICAgIGNvbnZlcnRSZWZlcmVuY2UodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5jb252ZXJ0RG9jdW1lbnRLZXkodCwgdGhpcy5maXJlc3RvcmUuX2RhdGFiYXNlSWQpO1xuICAgICAgICByZXR1cm4gbmV3IFhjKHRoaXMuZmlyZXN0b3JlLCAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWFkcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhpcyBgRG9jdW1lbnRSZWZlcmVuY2VgIGZyb20gY2FjaGUuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIHRoZSBkb2N1bWVudCBpcyBub3QgY3VycmVudGx5IGNhY2hlZC5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCByZXNvbHZlZCB3aXRoIGEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5pbmcgdGhlXG4gKiBjdXJyZW50IGRvY3VtZW50IGNvbnRlbnRzLlxuICovIGZ1bmN0aW9uIGxsKHQpIHtcbiAgICB0ID0gamModCwgWGMpO1xuICAgIGNvbnN0IGUgPSBqYyh0LmZpcmVzdG9yZSwgJGEpLCBuID0gVWEoZSksIHMgPSBuZXcgaGwoZSk7XG4gICAgcmV0dXJuIHZhKG4sIHQuX2tleSkudGhlbigobiA9PiBuZXcgaWwoZSwgcywgdC5fa2V5LCBuLCBuZXcgc2wobnVsbCAhPT0gbiAmJiBuLmhhc0xvY2FsTXV0YXRpb25zLCBcbiAgICAvKiBmcm9tQ2FjaGU9ICovICEwKSwgdC5jb252ZXJ0ZXIpKSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYCBmcm9tIHRoZSBzZXJ2ZXIuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIHRoZSBuZXR3b3JrIGlzIG5vdCBhdmFpbGFibGUuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgd2l0aCBhIGBEb2N1bWVudFNuYXBzaG90YCBjb250YWluaW5nIHRoZVxuICogY3VycmVudCBkb2N1bWVudCBjb250ZW50cy5cbiAqLyBmdW5jdGlvbiBmbCh0KSB7XG4gICAgdCA9IGpjKHQsIFhjKTtcbiAgICBjb25zdCBlID0gamModC5maXJlc3RvcmUsICRhKTtcbiAgICByZXR1cm4gVmEoVWEoZSksIHQuX2tleSwge1xuICAgICAgICBzb3VyY2U6IFwic2VydmVyXCJcbiAgICB9KS50aGVuKChuID0+IEFsKGUsIHQsIG4pKSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHF1ZXJ5IGFuZCByZXR1cm5zIHRoZSByZXN1bHRzIGFzIGEgYFF1ZXJ5U25hcHNob3RgLlxuICpcbiAqIE5vdGU6IGBnZXREb2NzKClgIGF0dGVtcHRzIHRvIHByb3ZpZGUgdXAtdG8tZGF0ZSBkYXRhIHdoZW4gcG9zc2libGUgYnlcbiAqIHdhaXRpbmcgZm9yIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBidXQgaXQgbWF5IHJldHVybiBjYWNoZWQgZGF0YSBvciBmYWlsIGlmXG4gKiB5b3UgYXJlIG9mZmxpbmUgYW5kIHRoZSBzZXJ2ZXIgY2Fubm90IGJlIHJlYWNoZWQuIFRvIHNwZWNpZnkgdGhpcyBiZWhhdmlvcixcbiAqIGludm9rZSB7QGxpbmsgZ2V0RG9jc0Zyb21DYWNoZX0gb3Ige0BsaW5rIGdldERvY3NGcm9tU2VydmVyfS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gZGwodCkge1xuICAgIHQgPSBqYyh0LCBaYyk7XG4gICAgY29uc3QgZSA9IGpjKHQuZmlyZXN0b3JlLCAkYSksIG4gPSBVYShlKSwgcyA9IG5ldyBobChlKTtcbiAgICByZXR1cm4ga2godC5fcXVlcnkpLCBEYShuLCB0Ll9xdWVyeSkudGhlbigobiA9PiBuZXcgb2woZSwgcywgdCwgbikpKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcXVlcnkgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMgYXMgYSBgUXVlcnlTbmFwc2hvdGAgZnJvbSBjYWNoZS5cbiAqIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIGRvY3VtZW50IGlzIG5vdCBjdXJyZW50bHkgY2FjaGVkLlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXN1bHRzIG9mIHRoZSBxdWVyeS5cbiAqLyBmdW5jdGlvbiBfbCh0KSB7XG4gICAgdCA9IGpjKHQsIFpjKTtcbiAgICBjb25zdCBlID0gamModC5maXJlc3RvcmUsICRhKSwgbiA9IFVhKGUpLCBzID0gbmV3IGhsKGUpO1xuICAgIHJldHVybiBTYShuLCB0Ll9xdWVyeSkudGhlbigobiA9PiBuZXcgb2woZSwgcywgdCwgbikpKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcXVlcnkgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMgYXMgYSBgUXVlcnlTbmFwc2hvdGAgZnJvbSB0aGVcbiAqIHNlcnZlci4gUmV0dXJucyBhbiBlcnJvciBpZiB0aGUgbmV0d29yayBpcyBub3QgYXZhaWxhYmxlLlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXN1bHRzIG9mIHRoZSBxdWVyeS5cbiAqLyBmdW5jdGlvbiB3bCh0KSB7XG4gICAgdCA9IGpjKHQsIFpjKTtcbiAgICBjb25zdCBlID0gamModC5maXJlc3RvcmUsICRhKSwgbiA9IFVhKGUpLCBzID0gbmV3IGhsKGUpO1xuICAgIHJldHVybiBEYShuLCB0Ll9xdWVyeSwge1xuICAgICAgICBzb3VyY2U6IFwic2VydmVyXCJcbiAgICB9KS50aGVuKChuID0+IG5ldyBvbChlLCBzLCB0LCBuKSkpO1xufVxuXG5mdW5jdGlvbiBtbCh0LCBlLCBuKSB7XG4gICAgdCA9IGpjKHQsIFhjKTtcbiAgICBjb25zdCBzID0gamModC5maXJlc3RvcmUsICRhKSwgaSA9IGVsKHQuY29udmVydGVyLCBlLCBuKTtcbiAgICByZXR1cm4gRWwocywgWyBmaChsaChzKSwgXCJzZXREb2NcIiwgdC5fa2V5LCBpLCBudWxsICE9PSB0LmNvbnZlcnRlciwgbikudG9NdXRhdGlvbih0Ll9rZXksIE9uLm5vbmUoKSkgXSk7XG59XG5cbmZ1bmN0aW9uIGdsKHQsIGUsIG4sIC4uLnMpIHtcbiAgICB0ID0gamModCwgWGMpO1xuICAgIGNvbnN0IGkgPSBqYyh0LmZpcmVzdG9yZSwgJGEpLCByID0gbGgoaSk7XG4gICAgbGV0IG87XG4gICAgbyA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIChcbiAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICBlID0gZ2V0TW9kdWxhckluc3RhbmNlKGUpKSB8fCBlIGluc3RhbmNlb2YgZWggPyBJaChyLCBcInVwZGF0ZURvY1wiLCB0Ll9rZXksIGUsIG4sIHMpIDogcGgociwgXCJ1cGRhdGVEb2NcIiwgdC5fa2V5LCBlKTtcbiAgICByZXR1cm4gRWwoaSwgWyBvLnRvTXV0YXRpb24odC5fa2V5LCBPbi5leGlzdHMoITApKSBdKTtcbn1cblxuLyoqXG4gKiBEZWxldGVzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGUgc3BlY2lmaWVkIGBEb2N1bWVudFJlZmVyZW5jZWAuXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBkb2N1bWVudCB0byBkZWxldGUuXG4gKiBAcmV0dXJucyBBIFByb21pc2UgcmVzb2x2ZWQgb25jZSB0aGUgZG9jdW1lbnQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5XG4gKiBkZWxldGVkIGZyb20gdGhlIGJhY2tlbmQgKG5vdGUgdGhhdCBpdCB3b24ndCByZXNvbHZlIHdoaWxlIHlvdSdyZSBvZmZsaW5lKS5cbiAqLyBmdW5jdGlvbiB5bCh0KSB7XG4gICAgcmV0dXJuIEVsKGpjKHQuZmlyZXN0b3JlLCAkYSksIFsgbmV3IHpuKHQuX2tleSwgT24ubm9uZSgpKSBdKTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgZG9jdW1lbnQgdG8gc3BlY2lmaWVkIGBDb2xsZWN0aW9uUmVmZXJlbmNlYCB3aXRoIHRoZSBnaXZlbiBkYXRhLFxuICogYXNzaWduaW5nIGl0IGEgZG9jdW1lbnQgSUQgYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcGFyYW0gcmVmZXJlbmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIGNvbGxlY3Rpb24gdG8gYWRkIHRoaXMgZG9jdW1lbnQgdG8uXG4gKiBAcGFyYW0gZGF0YSAtIEFuIE9iamVjdCBjb250YWluaW5nIHRoZSBkYXRhIGZvciB0aGUgbmV3IGRvY3VtZW50LlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgd2l0aCBhIGBEb2N1bWVudFJlZmVyZW5jZWAgcG9pbnRpbmcgdG8gdGhlXG4gKiBuZXdseSBjcmVhdGVkIGRvY3VtZW50IGFmdGVyIGl0IGhhcyBiZWVuIHdyaXR0ZW4gdG8gdGhlIGJhY2tlbmQgKE5vdGUgdGhhdCBpdFxuICogd29uJ3QgcmVzb2x2ZSB3aGlsZSB5b3UncmUgb2ZmbGluZSkuXG4gKi8gZnVuY3Rpb24gcGwodCwgZSkge1xuICAgIGNvbnN0IG4gPSBqYyh0LmZpcmVzdG9yZSwgJGEpLCBzID0gc2EodCksIGkgPSBlbCh0LmNvbnZlcnRlciwgZSk7XG4gICAgcmV0dXJuIEVsKG4sIFsgZmgobGgodC5maXJlc3RvcmUpLCBcImFkZERvY1wiLCBzLl9rZXksIGksIG51bGwgIT09IHQuY29udmVydGVyLCB7fSkudG9NdXRhdGlvbihzLl9rZXksIE9uLmV4aXN0cyghMSkpIF0pLnRoZW4oKCgpID0+IHMpKTtcbn1cblxuZnVuY3Rpb24gSWwodCwgLi4uZSkge1xuICAgIHZhciBuLCBzLCBpO1xuICAgIHQgPSBnZXRNb2R1bGFySW5zdGFuY2UodCk7XG4gICAgbGV0IHIgPSB7XG4gICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6ICExXG4gICAgfSwgbyA9IDA7XG4gICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgZVtvXSB8fCBPYShlW29dKSB8fCAociA9IGVbb10sIG8rKyk7XG4gICAgY29uc3QgdSA9IHtcbiAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogci5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzXG4gICAgfTtcbiAgICBpZiAoT2EoZVtvXSkpIHtcbiAgICAgICAgY29uc3QgdCA9IGVbb107XG4gICAgICAgIGVbb10gPSBudWxsID09PSAobiA9IHQubmV4dCkgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5iaW5kKHQpLCBlW28gKyAxXSA9IG51bGwgPT09IChzID0gdC5lcnJvcikgfHwgdm9pZCAwID09PSBzID8gdm9pZCAwIDogcy5iaW5kKHQpLCBcbiAgICAgICAgZVtvICsgMl0gPSBudWxsID09PSAoaSA9IHQuY29tcGxldGUpIHx8IHZvaWQgMCA9PT0gaSA/IHZvaWQgMCA6IGkuYmluZCh0KTtcbiAgICB9XG4gICAgbGV0IGMsIGEsIGg7XG4gICAgaWYgKHQgaW5zdGFuY2VvZiBYYykgYSA9IGpjKHQuZmlyZXN0b3JlLCAkYSksIGggPSBlbih0Ll9rZXkucGF0aCksIGMgPSB7XG4gICAgICAgIG5leHQ6IG4gPT4ge1xuICAgICAgICAgICAgZVtvXSAmJiBlW29dKEFsKGEsIHQsIG4pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGVbbyArIDFdLFxuICAgICAgICBjb21wbGV0ZTogZVtvICsgMl1cbiAgICB9OyBlbHNlIHtcbiAgICAgICAgY29uc3QgbiA9IGpjKHQsIFpjKTtcbiAgICAgICAgYSA9IGpjKG4uZmlyZXN0b3JlLCAkYSksIGggPSBuLl9xdWVyeTtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBobChhKTtcbiAgICAgICAgYyA9IHtcbiAgICAgICAgICAgIG5leHQ6IHQgPT4ge1xuICAgICAgICAgICAgICAgIGVbb10gJiYgZVtvXShuZXcgb2woYSwgcywgbiwgdCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBlW28gKyAxXSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBlW28gKyAyXVxuICAgICAgICB9LCBraCh0Ll9xdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcgdWEocyksIHIgPSBuZXcgenUoZSwgaSwgbik7XG4gICAgICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gS3UoYXdhaXQgUmEodCksIHIpKSksICgpID0+IHtcbiAgICAgICAgICAgIGkuYmMoKSwgdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IEd1KGF3YWl0IFJhKHQpLCByKSkpO1xuICAgICAgICB9O1xuICAgIH0oVWEoYSksIGgsIHUsIGMpO1xufVxuXG5mdW5jdGlvbiBUbCh0LCBlKSB7XG4gICAgcmV0dXJuIENhKFVhKHQgPSBqYyh0LCAkYSkpLCBPYShlKSA/IGUgOiB7XG4gICAgICAgIG5leHQ6IGVcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBMb2NhbGx5IHdyaXRlcyBgbXV0YXRpb25zYCBvbiB0aGUgYXN5bmMgcXVldWUuXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBFbCh0LCBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBVO1xuICAgICAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGNjKGF3YWl0IEVhKHQpLCBlLCBuKSkpLCBuLnByb21pc2U7XG4gICAgfShVYSh0KSwgZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSB7QGxpbmsgVmlld1NuYXBzaG90fSB0aGF0IGNvbnRhaW5zIHRoZSBzaW5nbGUgZG9jdW1lbnQgc3BlY2lmaWVkIGJ5IGByZWZgXG4gKiB0byBhIHtAbGluayBEb2N1bWVudFNuYXBzaG90fS5cbiAqLyBmdW5jdGlvbiBBbCh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IG4uZG9jcy5nZXQoZS5fa2V5KSwgaSA9IG5ldyBobCh0KTtcbiAgICByZXR1cm4gbmV3IGlsKHQsIGksIGUuX2tleSwgcywgbmV3IHNsKG4uaGFzUGVuZGluZ1dyaXRlcywgbi5mcm9tQ2FjaGUpLCBlLmNvbnZlcnRlcik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENvbXBhcmVzIHR3byBgQWdncmVnYXRlUXVlcnlTbmFwc2hvdGAgaW5zdGFuY2VzIGZvciBlcXVhbGl0eS5cbiAqXG4gKiBUd28gYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIGluc3RhbmNlcyBhcmUgY29uc2lkZXJlZCBcImVxdWFsXCIgaWYgdGhleSBoYXZlXG4gKiB1bmRlcmx5aW5nIHF1ZXJpZXMgdGhhdCBjb21wYXJlIGVxdWFsLCBhbmQgdGhlIHNhbWUgZGF0YS5cbiAqXG4gKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBgQWdncmVnYXRlUXVlcnlTbmFwc2hvdGAgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIHRvIGNvbXBhcmUuXG4gKlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBcImVxdWFsXCIsIGFzIGRlZmluZWQgYWJvdmUsIG9yIGBmYWxzZWBcbiAqIG90aGVyd2lzZS5cbiAqLyBmdW5jdGlvbiBSbCh0LCBlKSB7XG4gICAgcmV0dXJuIHJhKHQucXVlcnksIGUucXVlcnkpICYmIGRlZXBFcXVhbCh0LmRhdGEoKSwgZS5kYXRhKCkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSByZXN1bHQgc2V0IG9mIHRoZSBnaXZlbiBxdWVyeSxcbiAqIHdpdGhvdXQgYWN0dWFsbHkgZG93bmxvYWRpbmcgdGhlIGRvY3VtZW50cy5cbiAqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHRvIGNvdW50IHRoZSBkb2N1bWVudHMgaXMgZWZmaWNpZW50IGJlY2F1c2Ugb25seSB0aGVcbiAqIGZpbmFsIGNvdW50LCBub3QgdGhlIGRvY3VtZW50cycgZGF0YSwgaXMgZG93bmxvYWRlZC4gVGhpcyBmdW5jdGlvbiBjYW4gZXZlblxuICogY291bnQgdGhlIGRvY3VtZW50cyBpZiB0aGUgcmVzdWx0IHNldCB3b3VsZCBiZSBwcm9oaWJpdGl2ZWx5IGxhcmdlIHRvXG4gKiBkb3dubG9hZCBlbnRpcmVseSAoZS5nLiB0aG91c2FuZHMgb2YgZG9jdW1lbnRzKS5cbiAqXG4gKiBUaGUgcmVzdWx0IHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlciBpcyBwcmVzZW50ZWQsIHVuYWx0ZXJlZCwgd2l0aG91dFxuICogY29uc2lkZXJpbmcgYW55IGxvY2FsIHN0YXRlLiBUaGF0IGlzLCBkb2N1bWVudHMgaW4gdGhlIGxvY2FsIGNhY2hlIGFyZSBub3RcbiAqIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiwgbmVpdGhlciBhcmUgbG9jYWwgbW9kaWZpY2F0aW9ucyBub3QgeWV0XG4gKiBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgc2VydmVyLiBQcmV2aW91c2x5LWRvd25sb2FkZWQgcmVzdWx0cywgaWYgYW55LCBhcmUgbm90XG4gKiB1c2VkOiBldmVyeSByZXF1ZXN0IHVzaW5nIHRoaXMgc291cmNlIG5lY2Vzc2FyaWx5IGludm9sdmVzIGEgcm91bmQgdHJpcCB0b1xuICogdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgd2hvc2UgcmVzdWx0IHNldCBzaXplIHRvIGNhbGN1bGF0ZS5cbiAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgY291bnQ7IHRoZSBjb3VudCBjYW4gYmVcbiAqIHJldHJpZXZlZCBmcm9tIGBzbmFwc2hvdC5kYXRhKCkuY291bnRgLCB3aGVyZSBgc25hcHNob3RgIGlzIHRoZVxuICogYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIHRvIHdoaWNoIHRoZSByZXR1cm5lZCBQcm9taXNlIHJlc29sdmVzLlxuICovIGZ1bmN0aW9uIGJsKHQpIHtcbiAgICBjb25zdCBlID0gamModC5maXJlc3RvcmUsICRhKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IFU7XG4gICAgICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAobXUoYXdhaXQgVGEodCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBhd2FpdCBBYSh0KSwgciA9IG5ldyBsYShlLCBpLCBuKS5ydW4oKTtcbiAgICAgICAgICAgICAgICAgICAgcy5yZXNvbHZlKHIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBzLnJlamVjdChuZXcgTChCLlVOQVZBSUxBQkxFLCBcIkZhaWxlZCB0byBnZXQgY291bnQgcmVzdWx0IGJlY2F1c2UgdGhlIGNsaWVudCBpcyBvZmZsaW5lLlwiKSk7XG4gICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgcy5yZWplY3QodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgcy5wcm9taXNlO1xuICAgIH0oVWEoZSksIHQsIG5ldyBobChlKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IFBsID0ge1xuICAgIG1heEF0dGVtcHRzOiA1XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHdyaXRlIGJhdGNoLCB1c2VkIHRvIHBlcmZvcm0gbXVsdGlwbGUgd3JpdGVzIGFzIGEgc2luZ2xlIGF0b21pYyB1bml0LlxuICpcbiAqIEEgYFdyaXRlQmF0Y2hgIG9iamVjdCBjYW4gYmUgYWNxdWlyZWQgYnkgY2FsbGluZyB7QGxpbmsgd3JpdGVCYXRjaH0uIEl0XG4gKiBwcm92aWRlcyBtZXRob2RzIGZvciBhZGRpbmcgd3JpdGVzIHRvIHRoZSB3cml0ZSBiYXRjaC4gTm9uZSBvZiB0aGUgd3JpdGVzXG4gKiB3aWxsIGJlIGNvbW1pdHRlZCAob3IgdmlzaWJsZSBsb2NhbGx5KSB1bnRpbCB7QGxpbmsgV3JpdGVCYXRjaC5jb21taXR9IGlzXG4gKiBjYWxsZWQuXG4gKi9cbmNsYXNzIHZsIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlID0gdCwgdGhpcy5fY29tbWl0SGFuZGxlciA9IGUsIHRoaXMuX211dGF0aW9ucyA9IFtdLCB0aGlzLl9jb21taXR0ZWQgPSAhMSwgXG4gICAgICAgIHRoaXMuX2RhdGFSZWFkZXIgPSBsaCh0KTtcbiAgICB9XG4gICAgc2V0KHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5fdmVyaWZ5Tm90Q29tbWl0dGVkKCk7XG4gICAgICAgIGNvbnN0IHMgPSBWbCh0LCB0aGlzLl9maXJlc3RvcmUpLCBpID0gZWwocy5jb252ZXJ0ZXIsIGUsIG4pLCByID0gZmgodGhpcy5fZGF0YVJlYWRlciwgXCJXcml0ZUJhdGNoLnNldFwiLCBzLl9rZXksIGksIG51bGwgIT09IHMuY29udmVydGVyLCBuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211dGF0aW9ucy5wdXNoKHIudG9NdXRhdGlvbihzLl9rZXksIE9uLm5vbmUoKSkpLCB0aGlzO1xuICAgIH1cbiAgICB1cGRhdGUodCwgZSwgbiwgLi4ucykge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDb21taXR0ZWQoKTtcbiAgICAgICAgY29uc3QgaSA9IFZsKHQsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIC8vIEZvciBDb21wYXQgdHlwZXMsIHdlIGhhdmUgdG8gXCJleHRyYWN0XCIgdGhlIHVuZGVybHlpbmcgdHlwZXMgYmVmb3JlXG4gICAgICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICAgICAgICAgICAgICBsZXQgcjtcbiAgICAgICAgcmV0dXJuIHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiAoZSA9IGdldE1vZHVsYXJJbnN0YW5jZShlKSkgfHwgZSBpbnN0YW5jZW9mIGVoID8gSWgodGhpcy5fZGF0YVJlYWRlciwgXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCBpLl9rZXksIGUsIG4sIHMpIDogcGgodGhpcy5fZGF0YVJlYWRlciwgXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCBpLl9rZXksIGUpLCBcbiAgICAgICAgdGhpcy5fbXV0YXRpb25zLnB1c2goci50b011dGF0aW9uKGkuX2tleSwgT24uZXhpc3RzKCEwKSkpLCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGUgcHJvdmlkZWQge0BsaW5rIERvY3VtZW50UmVmZXJlbmNlfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudFJlZiAtIEEgcmVmZXJlbmNlIHRvIHRoZSBkb2N1bWVudCB0byBiZSBkZWxldGVkLlxuICAgICAqIEByZXR1cm5zIFRoaXMgYFdyaXRlQmF0Y2hgIGluc3RhbmNlLiBVc2VkIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gICAgICovICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIHRoaXMuX3ZlcmlmeU5vdENvbW1pdHRlZCgpO1xuICAgICAgICBjb25zdCBlID0gVmwodCwgdGhpcy5fZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211dGF0aW9ucyA9IHRoaXMuX211dGF0aW9ucy5jb25jYXQobmV3IHpuKGUuX2tleSwgT24ubm9uZSgpKSksIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbW1pdHMgYWxsIG9mIHRoZSB3cml0ZXMgaW4gdGhpcyB3cml0ZSBiYXRjaCBhcyBhIHNpbmdsZSBhdG9taWMgdW5pdC5cbiAgICAgKlxuICAgICAqIFRoZSByZXN1bHQgb2YgdGhlc2Ugd3JpdGVzIHdpbGwgb25seSBiZSByZWZsZWN0ZWQgaW4gZG9jdW1lbnQgcmVhZHMgdGhhdFxuICAgICAqIG9jY3VyIGFmdGVyIHRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzLiBJZiB0aGUgY2xpZW50IGlzIG9mZmxpbmUsIHRoZVxuICAgICAqIHdyaXRlIGZhaWxzLiBJZiB5b3Ugd291bGQgbGlrZSB0byBzZWUgbG9jYWwgbW9kaWZpY2F0aW9ucyBvciBidWZmZXIgd3JpdGVzXG4gICAgICogdW50aWwgdGhlIGNsaWVudCBpcyBvbmxpbmUsIHVzZSB0aGUgZnVsbCBGaXJlc3RvcmUgU0RLLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgb25jZSBhbGwgb2YgdGhlIHdyaXRlcyBpbiB0aGUgYmF0Y2ggaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bGx5IHdyaXR0ZW4gdG8gdGhlIGJhY2tlbmQgYXMgYW4gYXRvbWljIHVuaXQgKG5vdGUgdGhhdCBpdCB3b24ndFxuICAgICAqIHJlc29sdmUgd2hpbGUgeW91J3JlIG9mZmxpbmUpLlxuICAgICAqLyAgICBjb21taXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJpZnlOb3RDb21taXR0ZWQoKSwgdGhpcy5fY29tbWl0dGVkID0gITAsIHRoaXMuX211dGF0aW9ucy5sZW5ndGggPiAwID8gdGhpcy5fY29tbWl0SGFuZGxlcih0aGlzLl9tdXRhdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIF92ZXJpZnlOb3RDb21taXR0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb21taXR0ZWQpIHRocm93IG5ldyBMKEIuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJBIHdyaXRlIGJhdGNoIGNhbiBubyBsb25nZXIgYmUgdXNlZCBhZnRlciBjb21taXQoKSBoYXMgYmVlbiBjYWxsZWQuXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gVmwodCwgZSkge1xuICAgIGlmICgodCA9IGdldE1vZHVsYXJJbnN0YW5jZSh0KSkuZmlyZXN0b3JlICE9PSBlKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiUHJvdmlkZWQgZG9jdW1lbnQgcmVmZXJlbmNlIGlzIGZyb20gYSBkaWZmZXJlbnQgRmlyZXN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICByZXR1cm4gdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRPRE8obXJzY2htaWR0KSBDb25zaWRlciB1c2luZyBgQmFzZVRyYW5zYWN0aW9uYCBhcyB0aGUgYmFzZSBjbGFzcyBpbiB0aGVcbi8vIGxlZ2FjeSBTREsuXG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGEgdHJhbnNhY3Rpb24uXG4gKlxuICogVGhlIGBUcmFuc2FjdGlvbmAgb2JqZWN0IHBhc3NlZCB0byBhIHRyYW5zYWN0aW9uJ3MgYHVwZGF0ZUZ1bmN0aW9uYCBwcm92aWRlc1xuICogdGhlIG1ldGhvZHMgdG8gcmVhZCBhbmQgd3JpdGUgZGF0YSB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uIGNvbnRleHQuIFNlZVxuICoge0BsaW5rIHJ1blRyYW5zYWN0aW9ufS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSByZWZlcmVuY2UgdG8gYSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBUaGUgYFRyYW5zYWN0aW9uYCBvYmplY3QgcGFzc2VkIHRvIGEgdHJhbnNhY3Rpb24ncyBgdXBkYXRlRnVuY3Rpb25gIHByb3ZpZGVzXG4gKiB0aGUgbWV0aG9kcyB0byByZWFkIGFuZCB3cml0ZSBkYXRhIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24gY29udGV4dC4gU2VlXG4gKiB7QGxpbmsgcnVuVHJhbnNhY3Rpb259LlxuICovXG5jbGFzcyBTbCBleHRlbmRzIGNsYXNzIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlID0gdCwgdGhpcy5fdHJhbnNhY3Rpb24gPSBlLCB0aGlzLl9kYXRhUmVhZGVyID0gbGgodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBkb2N1bWVudCByZWZlcmVuY2VkIGJ5IHRoZSBwcm92aWRlZCB7QGxpbmsgRG9jdW1lbnRSZWZlcmVuY2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50UmVmIC0gQSByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IHRvIGJlIHJlYWQuXG4gICAgICogQHJldHVybnMgQSBgRG9jdW1lbnRTbmFwc2hvdGAgd2l0aCB0aGUgcmVhZCBkYXRhLlxuICAgICAqLyAgICBnZXQodCkge1xuICAgICAgICBjb25zdCBlID0gVmwodCwgdGhpcy5fZmlyZXN0b3JlKSwgbiA9IG5ldyBubCh0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNhY3Rpb24ubG9va3VwKFsgZS5fa2V5IF0pLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgaWYgKCF0IHx8IDEgIT09IHQubGVuZ3RoKSByZXR1cm4gTygpO1xuICAgICAgICAgICAgY29uc3QgcyA9IHRbMF07XG4gICAgICAgICAgICBpZiAocy5pc0ZvdW5kRG9jdW1lbnQoKSkgcmV0dXJuIG5ldyBDaCh0aGlzLl9maXJlc3RvcmUsIG4sIHMua2V5LCBzLCBlLmNvbnZlcnRlcik7XG4gICAgICAgICAgICBpZiAocy5pc05vRG9jdW1lbnQoKSkgcmV0dXJuIG5ldyBDaCh0aGlzLl9maXJlc3RvcmUsIG4sIGUuX2tleSwgbnVsbCwgZS5jb252ZXJ0ZXIpO1xuICAgICAgICAgICAgdGhyb3cgTygpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNldCh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBWbCh0LCB0aGlzLl9maXJlc3RvcmUpLCBpID0gZWwocy5jb252ZXJ0ZXIsIGUsIG4pLCByID0gZmgodGhpcy5fZGF0YVJlYWRlciwgXCJUcmFuc2FjdGlvbi5zZXRcIiwgcy5fa2V5LCBpLCBudWxsICE9PSBzLmNvbnZlcnRlciwgbik7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5zZXQocy5fa2V5LCByKSwgdGhpcztcbiAgICB9XG4gICAgdXBkYXRlKHQsIGUsIG4sIC4uLnMpIHtcbiAgICAgICAgY29uc3QgaSA9IFZsKHQsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIC8vIEZvciBDb21wYXQgdHlwZXMsIHdlIGhhdmUgdG8gXCJleHRyYWN0XCIgdGhlIHVuZGVybHlpbmcgdHlwZXMgYmVmb3JlXG4gICAgICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICAgICAgICAgICAgICBsZXQgcjtcbiAgICAgICAgcmV0dXJuIHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiAoZSA9IGdldE1vZHVsYXJJbnN0YW5jZShlKSkgfHwgZSBpbnN0YW5jZW9mIGVoID8gSWgodGhpcy5fZGF0YVJlYWRlciwgXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgaS5fa2V5LCBlLCBuLCBzKSA6IHBoKHRoaXMuX2RhdGFSZWFkZXIsIFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIGkuX2tleSwgZSksIFxuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbi51cGRhdGUoaS5fa2V5LCByKSwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhlIHByb3ZpZGVkIHtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRSZWYgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmUgZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJucyBUaGlzIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIFVzZWQgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi8gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFZsKHQsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5kZWxldGUoZS5fa2V5KSwgdGhpcztcbiAgICB9XG59IHtcbiAgICAvLyBUaGlzIGNsYXNzIGltcGxlbWVudHMgdGhlIHNhbWUgbG9naWMgYXMgdGhlIFRyYW5zYWN0aW9uIEFQSSBpbiB0aGUgTGl0ZSBTREtcbiAgICAvLyBidXQgaXMgc3ViY2xhc3NlZCBpbiBvcmRlciB0byByZXR1cm4gaXRzIG93biBEb2N1bWVudFNuYXBzaG90IHR5cGVzLlxuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBlKSwgdGhpcy5fZmlyZXN0b3JlID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgdGhlIHByb3ZpZGVkIHtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRSZWYgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmUgcmVhZC5cbiAgICAgKiBAcmV0dXJucyBBIGBEb2N1bWVudFNuYXBzaG90YCB3aXRoIHRoZSByZWFkIGRhdGEuXG4gICAgICovICAgIGdldCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBWbCh0LCB0aGlzLl9maXJlc3RvcmUpLCBuID0gbmV3IGhsKHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXQodCkudGhlbigodCA9PiBuZXcgaWwodGhpcy5fZmlyZXN0b3JlLCBuLCBlLl9rZXksIHQuX2RvY3VtZW50LCBuZXcgc2woXG4gICAgICAgIC8qIGhhc1BlbmRpbmdXcml0ZXM9ICovICExLCBcbiAgICAgICAgLyogZnJvbUNhY2hlPSAqLyAhMSksIGUuY29udmVydGVyKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgZ2l2ZW4gYHVwZGF0ZUZ1bmN0aW9uYCBhbmQgdGhlbiBhdHRlbXB0cyB0byBjb21taXQgdGhlIGNoYW5nZXNcbiAqIGFwcGxpZWQgd2l0aGluIHRoZSB0cmFuc2FjdGlvbi4gSWYgYW55IGRvY3VtZW50IHJlYWQgd2l0aGluIHRoZSB0cmFuc2FjdGlvblxuICogaGFzIGNoYW5nZWQsIENsb3VkIEZpcmVzdG9yZSByZXRyaWVzIHRoZSBgdXBkYXRlRnVuY3Rpb25gLiBJZiBpdCBmYWlscyB0b1xuICogY29tbWl0IGFmdGVyIDUgYXR0ZW1wdHMsIHRoZSB0cmFuc2FjdGlvbiBmYWlscy5cbiAqXG4gKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygd3JpdGVzIGFsbG93ZWQgaW4gYSBzaW5nbGUgdHJhbnNhY3Rpb24gaXMgNTAwLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgRmlyZXN0b3JlIGRhdGFiYXNlIHRvIHJ1biB0aGlzXG4gKiB0cmFuc2FjdGlvbiBhZ2FpbnN0LlxuICogQHBhcmFtIHVwZGF0ZUZ1bmN0aW9uIC0gVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2l0aGluIHRoZSB0cmFuc2FjdGlvblxuICogY29udGV4dC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIG1heGltdW0gbnVtYmVyIG9mIGF0dGVtcHRzIHRvXG4gKiBjb21taXQuXG4gKiBAcmV0dXJucyBJZiB0aGUgdHJhbnNhY3Rpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseSBvciB3YXMgZXhwbGljaXRseSBhYm9ydGVkXG4gKiAodGhlIGB1cGRhdGVGdW5jdGlvbmAgcmV0dXJuZWQgYSBmYWlsZWQgcHJvbWlzZSksIHRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZVxuICogYHVwZGF0ZUZ1bmN0aW9uIGBpcyByZXR1cm5lZCBoZXJlLiBPdGhlcndpc2UsIGlmIHRoZSB0cmFuc2FjdGlvbiBmYWlsZWQsIGFcbiAqIHJlamVjdGVkIHByb21pc2Ugd2l0aCB0aGUgY29ycmVzcG9uZGluZyBmYWlsdXJlIGVycm9yIGlzIHJldHVybmVkLlxuICovIGZ1bmN0aW9uIERsKHQsIGUsIG4pIHtcbiAgICB0ID0gamModCwgJGEpO1xuICAgIGNvbnN0IHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIFBsKSwgbik7XG4gICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQubWF4QXR0ZW1wdHMgPCAxKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiTWF4IGF0dGVtcHRzIG11c3QgYmUgYXQgbGVhc3QgMVwiKTtcbiAgICB9KHMpO1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgVTtcbiAgICAgICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gYXdhaXQgQWEodCk7XG4gICAgICAgICAgICBuZXcgZGEodC5hc3luY1F1ZXVlLCBpLCBuLCBlLCBzKS5ydW4oKTtcbiAgICAgICAgfSkpLCBzLnByb21pc2U7XG4gICAgfShVYSh0KSwgKG4gPT4gZShuZXcgU2wodCwgbikpKSwgcyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJldHVybnMgYSBzZW50aW5lbCBmb3IgdXNlIHdpdGgge0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSModXBkYXRlRG9jOjEpfSBvclxuICoge0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSMoc2V0RG9jOjEpfSB3aXRoIGB7bWVyZ2U6IHRydWV9YCB0byBtYXJrIGEgZmllbGQgZm9yIGRlbGV0aW9uLlxuICovIGZ1bmN0aW9uIENsKCkge1xuICAgIHJldHVybiBuZXcgZGgoXCJkZWxldGVGaWVsZFwiKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VudGluZWwgdXNlZCB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gb3Ige0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSModXBkYXRlRG9jOjEpfSB0b1xuICogaW5jbHVkZSBhIHNlcnZlci1nZW5lcmF0ZWQgdGltZXN0YW1wIGluIHRoZSB3cml0dGVuIGRhdGEuXG4gKi8gZnVuY3Rpb24geGwoKSB7XG4gICAgcmV0dXJuIG5ldyB3aChcInNlcnZlclRpbWVzdGFtcFwiKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lhbCB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHdpdGgge0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSMoc2V0RG9jOjEpfSBvciB7QGxpbmtcbiAqIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSModXBkYXRlRG9jOjEpfSB0aGF0IHRlbGxzIHRoZSBzZXJ2ZXIgdG8gdW5pb24gdGhlIGdpdmVuIGVsZW1lbnRzIHdpdGggYW55IGFycmF5XG4gKiB2YWx1ZSB0aGF0IGFscmVhZHkgZXhpc3RzIG9uIHRoZSBzZXJ2ZXIuIEVhY2ggc3BlY2lmaWVkIGVsZW1lbnQgdGhhdCBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0IGluIHRoZSBhcnJheSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQuIElmIHRoZSBmaWVsZCBiZWluZ1xuICogbW9kaWZpZWQgaXMgbm90IGFscmVhZHkgYW4gYXJyYXkgaXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIGFuIGFycmF5XG4gKiBjb250YWluaW5nIGV4YWN0bHkgdGhlIHNwZWNpZmllZCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudHMgLSBUaGUgZWxlbWVudHMgdG8gdW5pb24gaW50byB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyBUaGUgYEZpZWxkVmFsdWVgIHNlbnRpbmVsIGZvciB1c2UgaW4gYSBjYWxsIHRvIGBzZXREb2MoKWAgb3JcbiAqIGB1cGRhdGVEb2MoKWAuXG4gKi8gZnVuY3Rpb24gTmwoLi4udCkge1xuICAgIC8vIE5PVEU6IFdlIGRvbid0IGFjdHVhbGx5IHBhcnNlIHRoZSBkYXRhIHVudGlsIGl0J3MgdXNlZCBpbiBzZXQoKSBvclxuICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlJ2QgbmVlZCB0aGUgRmlyZXN0b3JlIGluc3RhbmNlIHRvIGRvIHRoaXMuXG4gICAgcmV0dXJuIG5ldyBtaChcImFycmF5VW5pb25cIiwgdCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpYWwgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHtAbGluayAoc2V0RG9jOjEpfSBvciB7QGxpbmtcbiAqIHVwZGF0ZURvYzoxfSB0aGF0IHRlbGxzIHRoZSBzZXJ2ZXIgdG8gcmVtb3ZlIHRoZSBnaXZlbiBlbGVtZW50cyBmcm9tIGFueVxuICogYXJyYXkgdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgc2VydmVyLiBBbGwgaW5zdGFuY2VzIG9mIGVhY2ggZWxlbWVudFxuICogc3BlY2lmaWVkIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBhcnJheS4gSWYgdGhlIGZpZWxkIGJlaW5nIG1vZGlmaWVkIGlzIG5vdFxuICogYWxyZWFkeSBhbiBhcnJheSBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggYW4gZW1wdHkgYXJyYXkuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRzIC0gVGhlIGVsZW1lbnRzIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheS5cbiAqIEByZXR1cm5zIFRoZSBgRmllbGRWYWx1ZWAgc2VudGluZWwgZm9yIHVzZSBpbiBhIGNhbGwgdG8gYHNldERvYygpYCBvclxuICogYHVwZGF0ZURvYygpYFxuICovIGZ1bmN0aW9uIGtsKC4uLnQpIHtcbiAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcbiAgICAvLyB1cGRhdGUoKSBzaW5jZSB3ZSdkIG5lZWQgdGhlIEZpcmVzdG9yZSBpbnN0YW5jZSB0byBkbyB0aGlzLlxuICAgIHJldHVybiBuZXcgZ2goXCJhcnJheVJlbW92ZVwiLCB0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lhbCB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHdpdGgge0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSMoc2V0RG9jOjEpfSBvciB7QGxpbmtcbiAqIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSModXBkYXRlRG9jOjEpfSB0aGF0IHRlbGxzIHRoZSBzZXJ2ZXIgdG8gaW5jcmVtZW50IHRoZSBmaWVsZCdzIGN1cnJlbnQgdmFsdWUgYnlcbiAqIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBJZiBlaXRoZXIgdGhlIG9wZXJhbmQgb3IgdGhlIGN1cnJlbnQgZmllbGQgdmFsdWUgdXNlcyBmbG9hdGluZyBwb2ludFxuICogcHJlY2lzaW9uLCBhbGwgYXJpdGhtZXRpYyBmb2xsb3dzIElFRUUgNzU0IHNlbWFudGljcy4gSWYgYm90aCB2YWx1ZXMgYXJlXG4gKiBpbnRlZ2VycywgdmFsdWVzIG91dHNpZGUgb2YgSmF2YVNjcmlwdCdzIHNhZmUgbnVtYmVyIHJhbmdlXG4gKiAoYE51bWJlci5NSU5fU0FGRV9JTlRFR0VSYCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgKSBhcmUgYWxzbyBzdWJqZWN0IHRvXG4gKiBwcmVjaXNpb24gbG9zcy4gRnVydGhlcm1vcmUsIG9uY2UgcHJvY2Vzc2VkIGJ5IHRoZSBGaXJlc3RvcmUgYmFja2VuZCwgYWxsXG4gKiBpbnRlZ2VyIG9wZXJhdGlvbnMgYXJlIGNhcHBlZCBiZXR3ZWVuIC0yXjYzIGFuZCAyXjYzLTEuXG4gKlxuICogSWYgdGhlIGN1cnJlbnQgZmllbGQgdmFsdWUgaXMgbm90IG9mIHR5cGUgYG51bWJlcmAsIG9yIGlmIHRoZSBmaWVsZCBkb2VzIG5vdFxuICogeWV0IGV4aXN0LCB0aGUgdHJhbnNmb3JtYXRpb24gc2V0cyB0aGUgZmllbGQgdG8gdGhlIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBuIC0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBieS5cbiAqIEByZXR1cm5zIFRoZSBgRmllbGRWYWx1ZWAgc2VudGluZWwgZm9yIHVzZSBpbiBhIGNhbGwgdG8gYHNldERvYygpYCBvclxuICogYHVwZGF0ZURvYygpYFxuICovIGZ1bmN0aW9uIE9sKHQpIHtcbiAgICByZXR1cm4gbmV3IHloKFwiaW5jcmVtZW50XCIsIHQpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgd3JpdGUgYmF0Y2gsIHVzZWQgZm9yIHBlcmZvcm1pbmcgbXVsdGlwbGUgd3JpdGVzIGFzIGEgc2luZ2xlXG4gKiBhdG9taWMgb3BlcmF0aW9uLiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygd3JpdGVzIGFsbG93ZWQgaW4gYSBzaW5nbGUge0BsaW5rIFdyaXRlQmF0Y2h9XG4gKiBpcyA1MDAuXG4gKlxuICogVW5saWtlIHRyYW5zYWN0aW9ucywgd3JpdGUgYmF0Y2hlcyBhcmUgcGVyc2lzdGVkIG9mZmxpbmUgYW5kIHRoZXJlZm9yZSBhcmVcbiAqIHByZWZlcmFibGUgd2hlbiB5b3UgZG9uJ3QgbmVlZCB0byBjb25kaXRpb24geW91ciB3cml0ZXMgb24gcmVhZCBkYXRhLlxuICpcbiAqIEByZXR1cm5zIEEge0BsaW5rIFdyaXRlQmF0Y2h9IHRoYXQgY2FuIGJlIHVzZWQgdG8gYXRvbWljYWxseSBleGVjdXRlIG11bHRpcGxlXG4gKiB3cml0ZXMuXG4gKi8gZnVuY3Rpb24gTWwodCkge1xuICAgIHJldHVybiBVYSh0ID0gamModCwgJGEpKSwgbmV3IHZsKHQsIChlID0+IEVsKHQsIGUpKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIEZsKHQsIGUpIHtcbiAgICB2YXIgbjtcbiAgICBjb25zdCBzID0gVWEodCA9IGpjKHQsICRhKSk7XG4gICAgLy8gUE9SVElORyBOT1RFOiBXZSBkb24ndCByZXR1cm4gYW4gZXJyb3IgaWYgdGhlIHVzZXIgaGFzIG5vdCBlbmFibGVkXG4gICAgLy8gcGVyc2lzdGVuY2Ugc2luY2UgYGVuYWJsZUluZGV4ZWRkYlBlcnNpc3RlbmNlKClgIGNhbiBmYWlsIG9uIHRoZSBXZWIuXG4gICAgICAgIGlmICghKG51bGwgPT09IChuID0gcy5vZmZsaW5lQ29tcG9uZW50cykgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIpKSByZXR1cm4gTihcIkNhbm5vdCBlbmFibGUgaW5kZXhlcyB3aGVuIHBlcnNpc3RlbmNlIGlzIGRpc2FibGVkXCIpLCBcbiAgICBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBjb25zdCBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsIFwiRmFpbGVkIHRvIHBhcnNlIEpTT046IFwiICsgKG51bGwgPT09IChlID0gdCkgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0odCkgOiB0LCBuID0gW107XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUuaW5kZXhlcykpIGZvciAoY29uc3QgdCBvZiBlLmluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSAkbCh0LCBcImNvbGxlY3Rpb25Hcm91cFwiKSwgcyA9IFtdO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodC5maWVsZHMpKSBmb3IgKGNvbnN0IGUgb2YgdC5maWVsZHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gVmgoXCJzZXRJbmRleENvbmZpZ3VyYXRpb25cIiwgJGwoZSwgXCJmaWVsZFBhdGhcIikpO1xuICAgICAgICAgICAgICAgIFwiQ09OVEFJTlNcIiA9PT0gZS5hcnJheUNvbmZpZyA/IHMucHVzaChuZXcgZHQodCwgMiAvKiBDT05UQUlOUyAqLykpIDogXCJBU0NFTkRJTkdcIiA9PT0gZS5vcmRlciA/IHMucHVzaChuZXcgZHQodCwgMCAvKiBBU0NFTkRJTkcgKi8pKSA6IFwiREVTQ0VORElOR1wiID09PSBlLm9yZGVyICYmIHMucHVzaChuZXcgZHQodCwgMSAvKiBERVNDRU5ESU5HICovKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuLnB1c2gobmV3IGF0KGF0LlVOS05PV05fSUQsIGUsIHMsIHd0LmVtcHR5KCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9KGUpO1xuICAgIHJldHVybiBJYShzKS50aGVuKCh0ID0+IGFzeW5jIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9ICQodCksIHMgPSBuLmluZGV4TWFuYWdlciwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkNvbmZpZ3VyZSBpbmRleGVzXCIsIFwicmVhZHdyaXRlXCIsICh0ID0+IHMuZ2V0RmllbGRJbmRleGVzKHQpLm5leHQoKG4gPT4gZnVuY3Rpb24odCwgZSwgbiwgcywgaSkge1xuICAgICAgICAgICAgdCA9IFsgLi4udCBdLCBlID0gWyAuLi5lIF0sIHQuc29ydChuKSwgZS5zb3J0KG4pO1xuICAgICAgICAgICAgY29uc3QgciA9IHQubGVuZ3RoLCBvID0gZS5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgdSA9IDAsIGMgPSAwO1xuICAgICAgICAgICAgZm9yICg7dSA8IG8gJiYgYyA8IHI7ICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuKHRbY10sIGVbdV0pO1xuICAgICAgICAgICAgICAgIHIgPCAwID8gXG4gICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgd2FzIHJlbW92ZWQgaWYgdGhlIG5leHQgZWxlbWVudCBpbiBvdXIgb3JkZXJlZFxuICAgICAgICAgICAgICAgIC8vIHdhbGt0aHJvdWdoIGlzIG9ubHkgaW4gYGJlZm9yZWAuXG4gICAgICAgICAgICAgICAgaSh0W2MrK10pIDogciA+IDAgPyBcbiAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCB3YXMgYWRkZWQgaWYgdGhlIG5leHQgZWxlbWVudCBpbiBvdXIgb3JkZXJlZCB3YWxrdGhyb3VnaFxuICAgICAgICAgICAgICAgIC8vIGlzIG9ubHkgaW4gYGFmdGVyYC5cbiAgICAgICAgICAgICAgICBzKGVbdSsrXSkgOiAodSsrLCBjKyspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICg7dSA8IG87ICkgcyhlW3UrK10pO1xuICAgICAgICAgICAgZm9yICg7YyA8IHI7ICkgaSh0W2MrK10pO1xuICAgICAgICB9KG4sIGUsIGZ0LCAoZSA9PiB7XG4gICAgICAgICAgICBpLnB1c2gocy5hZGRGaWVsZEluZGV4KHQsIGUpKTtcbiAgICAgICAgfSksIChlID0+IHtcbiAgICAgICAgICAgIGkucHVzaChzLmRlbGV0ZUZpZWxkSW5kZXgodCwgZSkpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBBdC53YWl0Rm9yKGkpKSkpKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvLyBUaGUgZm9ybWF0IG9mIHRoZSBMb2NhbFN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHRoZSBjbGllbnQgc3RhdGUgaXM6XG4gICAgLy8gICAgIGZpcmVzdG9yZV9jbGllbnRzXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XzxpbnN0YW5jZV9rZXk+XG4gICAgKHQsIGkpKSk7XG59XG5cbmZ1bmN0aW9uICRsKHQsIGUpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgdFtlXSkgdGhyb3cgbmV3IEwoQi5JTlZBTElEX0FSR1VNRU5ULCBcIk1pc3Npbmcgc3RyaW5nIHZhbHVlIGZvcjogXCIgKyBlKTtcbiAgICByZXR1cm4gdFtlXTtcbn1cblxuLyoqXG4gKiBDbG91ZCBGaXJlc3RvcmVcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqLyAhZnVuY3Rpb24odCwgZSA9ICEwKSB7XG4gICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdiA9IHQ7XG4gICAgfShTREtfVkVSU0lPTiksIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KFwiZmlyZXN0b3JlXCIsICgodCwge2luc3RhbmNlSWRlbnRpZmllcjogbiwgb3B0aW9uczogc30pID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHQuZ2V0UHJvdmlkZXIoXCJhcHBcIikuZ2V0SW1tZWRpYXRlKCksIHIgPSBuZXcgJGEobmV3IFEodC5nZXRQcm92aWRlcihcImF1dGgtaW50ZXJuYWxcIikpLCBuZXcgSCh0LmdldFByb3ZpZGVyKFwiYXBwLWNoZWNrLWludGVybmFsXCIpKSwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmFwcGx5KHQub3B0aW9ucywgWyBcInByb2plY3RJZFwiIF0pKSB0aHJvdyBuZXcgTChCLklOVkFMSURfQVJHVU1FTlQsICdcInByb2plY3RJZFwiIG5vdCBwcm92aWRlZCBpbiBmaXJlYmFzZS5pbml0aWFsaXplQXBwLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBuZSh0Lm9wdGlvbnMucHJvamVjdElkLCBlKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgICAgICAvKiogU2VudGluZWwgdmFsdWUgdGhhdCBzb3J0cyBiZWZvcmUgYW55IE11dGF0aW9uIEJhdGNoIElELiAqLyAoaSwgbiksIGkpO1xuICAgICAgICByZXR1cm4gcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgdXNlRmV0Y2hTdHJlYW1zOiBlXG4gICAgICAgIH0sIHMpLCByLl9zZXRTZXR0aW5ncyhzKSwgcjtcbiAgICB9KSwgXCJQVUJMSUNcIikuc2V0TXVsdGlwbGVJbnN0YW5jZXMoITApKSwgcmVnaXN0ZXJWZXJzaW9uKGIsIFwiMy43LjFcIiwgdCksIFxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXG4gICAgcmVnaXN0ZXJWZXJzaW9uKGIsIFwiMy43LjFcIiwgXCJlc20yMDE3XCIpO1xufSgpO1xuXG5leHBvcnQgeyB0bCBhcyBBYnN0cmFjdFVzZXJEYXRhV3JpdGVyLCBhYSBhcyBBZ2dyZWdhdGVGaWVsZCwgaGEgYXMgQWdncmVnYXRlUXVlcnlTbmFwc2hvdCwgdGggYXMgQnl0ZXMsIEZhIGFzIENBQ0hFX1NJWkVfVU5MSU1JVEVELCB0YSBhcyBDb2xsZWN0aW9uUmVmZXJlbmNlLCBYYyBhcyBEb2N1bWVudFJlZmVyZW5jZSwgaWwgYXMgRG9jdW1lbnRTbmFwc2hvdCwgZWggYXMgRmllbGRQYXRoLCBzaCBhcyBGaWVsZFZhbHVlLCAkYSBhcyBGaXJlc3RvcmUsIEwgYXMgRmlyZXN0b3JlRXJyb3IsIGloIGFzIEdlb1BvaW50LCBNYSBhcyBMb2FkQnVuZGxlVGFzaywgWmMgYXMgUXVlcnksIE9oIGFzIFF1ZXJ5Q29uc3RyYWludCwgcmwgYXMgUXVlcnlEb2N1bWVudFNuYXBzaG90LCBvbCBhcyBRdWVyeVNuYXBzaG90LCBzbCBhcyBTbmFwc2hvdE1ldGFkYXRhLCBudCBhcyBUaW1lc3RhbXAsIFNsIGFzIFRyYW5zYWN0aW9uLCB2bCBhcyBXcml0ZUJhdGNoLCBuZSBhcyBfRGF0YWJhc2VJZCwgY3QgYXMgX0RvY3VtZW50S2V5LCBKIGFzIF9FbXB0eUFwcENoZWNrVG9rZW5Qcm92aWRlciwgSyBhcyBfRW1wdHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciwgdXQgYXMgX0ZpZWxkUGF0aCwgamMgYXMgX2Nhc3QsIEYgYXMgX2RlYnVnQXNzZXJ0LCBqdCBhcyBfaXNCYXNlNjRBdmFpbGFibGUsIE4gYXMgX2xvZ1dhcm4sIHFjIGFzIF92YWxpZGF0ZUlzTm90VXNlZFRvZ2V0aGVyLCBwbCBhcyBhZGREb2MsIFJsIGFzIGFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RFcXVhbCwga2wgYXMgYXJyYXlSZW1vdmUsIE5sIGFzIGFycmF5VW5pb24sIGphIGFzIGNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UsIGVhIGFzIGNvbGxlY3Rpb24sIG5hIGFzIGNvbGxlY3Rpb25Hcm91cCwgWWMgYXMgY29ubmVjdEZpcmVzdG9yZUVtdWxhdG9yLCB5bCBhcyBkZWxldGVEb2MsIENsIGFzIGRlbGV0ZUZpZWxkLCBIYSBhcyBkaXNhYmxlTmV0d29yaywgc2EgYXMgZG9jLCBuaCBhcyBkb2N1bWVudElkLCBLYSBhcyBlbmFibGVJbmRleGVkRGJQZXJzaXN0ZW5jZSwgR2EgYXMgZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSwgemEgYXMgZW5hYmxlTmV0d29yaywgSGggYXMgZW5kQXQsIHpoIGFzIGVuZEJlZm9yZSwgVWEgYXMgZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZCwgRWwgYXMgZXhlY3V0ZVdyaXRlLCBibCBhcyBnZXRDb3VudEZyb21TZXJ2ZXIsIGFsIGFzIGdldERvYywgbGwgYXMgZ2V0RG9jRnJvbUNhY2hlLCBmbCBhcyBnZXREb2NGcm9tU2VydmVyLCBkbCBhcyBnZXREb2NzLCBfbCBhcyBnZXREb2NzRnJvbUNhY2hlLCB3bCBhcyBnZXREb2NzRnJvbVNlcnZlciwgTGEgYXMgZ2V0RmlyZXN0b3JlLCBPbCBhcyBpbmNyZW1lbnQsIEJhIGFzIGluaXRpYWxpemVGaXJlc3RvcmUsIHFoIGFzIGxpbWl0LCBLaCBhcyBsaW1pdFRvTGFzdCwgWWEgYXMgbG9hZEJ1bmRsZSwgWGEgYXMgbmFtZWRRdWVyeSwgSWwgYXMgb25TbmFwc2hvdCwgVGwgYXMgb25TbmFwc2hvdHNJblN5bmMsIExoIGFzIG9yZGVyQnksIE1oIGFzIHF1ZXJ5LCByYSBhcyBxdWVyeUVxdWFsLCBpYSBhcyByZWZFcXVhbCwgRGwgYXMgcnVuVHJhbnNhY3Rpb24sIHhsIGFzIHNlcnZlclRpbWVzdGFtcCwgbWwgYXMgc2V0RG9jLCBGbCBhcyBzZXRJbmRleENvbmZpZ3VyYXRpb24sIEQgYXMgc2V0TG9nTGV2ZWwsIGNsIGFzIHNuYXBzaG90RXF1YWwsIGpoIGFzIHN0YXJ0QWZ0ZXIsIFFoIGFzIHN0YXJ0QXQsIEphIGFzIHRlcm1pbmF0ZSwgZ2wgYXMgdXBkYXRlRG9jLCBXYSBhcyB3YWl0Rm9yUGVuZGluZ1dyaXRlcywgJGggYXMgd2hlcmUsIE1sIGFzIHdyaXRlQmF0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBnZXRBcHAsIF9nZXRQcm92aWRlciwgX3JlZ2lzdGVyQ29tcG9uZW50LCByZWdpc3RlclZlcnNpb24sIFNES19WRVJTSU9OIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yLCBjcmVhdGVNb2NrVXNlclRva2VuLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgdXNlZCBpbiB0aGUgRmlyZWJhc2UgU3RvcmFnZSBsaWJyYXJ5LlxyXG4gKi9cclxuLyoqXHJcbiAqIERvbWFpbiBuYW1lIGZvciBmaXJlYmFzZSBzdG9yYWdlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9IT1NUID0gJ2ZpcmViYXNlc3RvcmFnZS5nb29nbGVhcGlzLmNvbSc7XHJcbi8qKlxyXG4gKiBUaGUga2V5IGluIEZpcmViYXNlIGNvbmZpZyBqc29uIGZvciB0aGUgc3RvcmFnZSBidWNrZXQuXHJcbiAqL1xyXG5jb25zdCBDT05GSUdfU1RPUkFHRV9CVUNLRVRfS0VZID0gJ3N0b3JhZ2VCdWNrZXQnO1xyXG4vKipcclxuICogMiBtaW51dGVzXHJcbiAqXHJcbiAqIFRoZSB0aW1lb3V0IGZvciBhbGwgb3BlcmF0aW9ucyBleGNlcHQgdXBsb2FkLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9NQVhfT1BFUkFUSU9OX1JFVFJZX1RJTUUgPSAyICogNjAgKiAxMDAwO1xyXG4vKipcclxuICogMTAgbWludXRlc1xyXG4gKlxyXG4gKiBUaGUgdGltZW91dCBmb3IgdXBsb2FkLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9NQVhfVVBMT0FEX1JFVFJZX1RJTUUgPSAxMCAqIDYwICogMTAwMDtcclxuLyoqXHJcbiAqIDEgc2Vjb25kXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX01JTl9TTEVFUF9USU1FX01JTExJUyA9IDEwMDA7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBlcnJvciByZXR1cm5lZCBieSB0aGUgRmlyZWJhc2UgU3RvcmFnZSBTREsuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIFN0b3JhZ2VFcnJvciBleHRlbmRzIEZpcmViYXNlRXJyb3Ige1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29kZSAtIEEgU3RvcmFnZUVycm9yQ29kZSBzdHJpbmcgdG8gYmUgcHJlZml4ZWQgd2l0aCAnc3RvcmFnZS8nIGFuZFxyXG4gICAgICogIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIG1lc3NhZ2UuXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAgLSBFcnJvciBtZXNzYWdlLlxyXG4gICAgICogQHBhcmFtIHN0YXR1c18gLSBDb3JyZXNwb25kaW5nIEhUVFAgU3RhdHVzIENvZGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSwgc3RhdHVzXyA9IDApIHtcclxuICAgICAgICBzdXBlcihwcmVwZW5kQ29kZShjb2RlKSwgYEZpcmViYXNlIFN0b3JhZ2U6ICR7bWVzc2FnZX0gKCR7cHJlcGVuZENvZGUoY29kZSl9KWApO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzXyA9IHN0YXR1c187XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3RvcmVzIGN1c3RvbSBlcnJvciBkYXRhIHVucXVlIHRvIFN0b3JhZ2VFcnJvci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7IHNlcnZlclJlc3BvbnNlOiBudWxsIH07XHJcbiAgICAgICAgdGhpcy5fYmFzZU1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2U7XHJcbiAgICAgICAgLy8gV2l0aG91dCB0aGlzLCBgaW5zdGFuY2VvZiBTdG9yYWdlRXJyb3JgLCBpbiB0ZXN0cyBmb3IgZXhhbXBsZSxcclxuICAgICAgICAvLyByZXR1cm5zIGZhbHNlLlxyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTdG9yYWdlRXJyb3IucHJvdG90eXBlKTtcclxuICAgIH1cclxuICAgIGdldCBzdGF0dXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzXztcclxuICAgIH1cclxuICAgIHNldCBzdGF0dXMoc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfID0gc3RhdHVzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlcyBhIFN0b3JhZ2VFcnJvckNvZGUgYWdhaW5zdCB0aGlzIGVycm9yJ3MgY29kZSwgZmlsdGVyaW5nIG91dCB0aGUgcHJlZml4LlxyXG4gICAgICovXHJcbiAgICBfY29kZUVxdWFscyhjb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHByZXBlbmRDb2RlKGNvZGUpID09PSB0aGlzLmNvZGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbmFsIHJlc3BvbnNlIG1lc3NhZ2UgdGhhdCB3YXMgYWRkZWQgYnkgdGhlIHNlcnZlci5cclxuICAgICAqL1xyXG4gICAgZ2V0IHNlcnZlclJlc3BvbnNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbURhdGEuc2VydmVyUmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBzZXQgc2VydmVyUmVzcG9uc2Uoc2VydmVyUmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEuc2VydmVyUmVzcG9uc2UgPSBzZXJ2ZXJSZXNwb25zZTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21EYXRhLnNlcnZlclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGAke3RoaXMuX2Jhc2VNZXNzYWdlfVxcbiR7dGhpcy5jdXN0b21EYXRhLnNlcnZlclJlc3BvbnNlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLl9iYXNlTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcHJlcGVuZENvZGUoY29kZSkge1xyXG4gICAgcmV0dXJuICdzdG9yYWdlLycgKyBjb2RlO1xyXG59XHJcbmZ1bmN0aW9uIHVua25vd24oKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQsIHBsZWFzZSBjaGVjayB0aGUgZXJyb3IgcGF5bG9hZCBmb3IgJyArXHJcbiAgICAgICAgJ3NlcnZlciByZXNwb25zZS4nO1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJ1bmtub3duXCIgLyogVU5LTk9XTiAqLywgbWVzc2FnZSk7XHJcbn1cclxuZnVuY3Rpb24gb2JqZWN0Tm90Rm91bmQocGF0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJvYmplY3Qtbm90LWZvdW5kXCIgLyogT0JKRUNUX05PVF9GT1VORCAqLywgXCJPYmplY3QgJ1wiICsgcGF0aCArIFwiJyBkb2VzIG5vdCBleGlzdC5cIik7XHJcbn1cclxuZnVuY3Rpb24gcXVvdGFFeGNlZWRlZChidWNrZXQpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwicXVvdGEtZXhjZWVkZWRcIiAvKiBRVU9UQV9FWENFRURFRCAqLywgXCJRdW90YSBmb3IgYnVja2V0ICdcIiArXHJcbiAgICAgICAgYnVja2V0ICtcclxuICAgICAgICBcIicgZXhjZWVkZWQsIHBsZWFzZSB2aWV3IHF1b3RhIG9uIFwiICtcclxuICAgICAgICAnaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL3ByaWNpbmcvLicpO1xyXG59XHJcbmZ1bmN0aW9uIHVuYXV0aGVudGljYXRlZCgpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSAnVXNlciBpcyBub3QgYXV0aGVudGljYXRlZCwgcGxlYXNlIGF1dGhlbnRpY2F0ZSB1c2luZyBGaXJlYmFzZSAnICtcclxuICAgICAgICAnQXV0aGVudGljYXRpb24gYW5kIHRyeSBhZ2Fpbi4nO1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJ1bmF1dGhlbnRpY2F0ZWRcIiAvKiBVTkFVVEhFTlRJQ0FURUQgKi8sIG1lc3NhZ2UpO1xyXG59XHJcbmZ1bmN0aW9uIHVuYXV0aG9yaXplZEFwcCgpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwidW5hdXRob3JpemVkLWFwcFwiIC8qIFVOQVVUSE9SSVpFRF9BUFAgKi8sICdUaGlzIGFwcCBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIEZpcmViYXNlIFN0b3JhZ2Ugb24gdGhpcyBwcm9qZWN0LicpO1xyXG59XHJcbmZ1bmN0aW9uIHVuYXV0aG9yaXplZChwYXRoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcInVuYXV0aG9yaXplZFwiIC8qIFVOQVVUSE9SSVpFRCAqLywgXCJVc2VyIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgJ1wiICsgcGF0aCArIFwiJy5cIik7XHJcbn1cclxuZnVuY3Rpb24gcmV0cnlMaW1pdEV4Y2VlZGVkKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJyZXRyeS1saW1pdC1leGNlZWRlZFwiIC8qIFJFVFJZX0xJTUlUX0VYQ0VFREVEICovLCAnTWF4IHJldHJ5IHRpbWUgZm9yIG9wZXJhdGlvbiBleGNlZWRlZCwgcGxlYXNlIHRyeSBhZ2Fpbi4nKTtcclxufVxyXG5mdW5jdGlvbiBjYW5jZWxlZCgpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwiY2FuY2VsZWRcIiAvKiBDQU5DRUxFRCAqLywgJ1VzZXIgY2FuY2VsZWQgdGhlIHVwbG9hZC9kb3dubG9hZC4nKTtcclxufVxyXG5mdW5jdGlvbiBpbnZhbGlkVXJsKHVybCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJpbnZhbGlkLXVybFwiIC8qIElOVkFMSURfVVJMICovLCBcIkludmFsaWQgVVJMICdcIiArIHVybCArIFwiJy5cIik7XHJcbn1cclxuZnVuY3Rpb24gaW52YWxpZERlZmF1bHRCdWNrZXQoYnVja2V0KSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcImludmFsaWQtZGVmYXVsdC1idWNrZXRcIiAvKiBJTlZBTElEX0RFRkFVTFRfQlVDS0VUICovLCBcIkludmFsaWQgZGVmYXVsdCBidWNrZXQgJ1wiICsgYnVja2V0ICsgXCInLlwiKTtcclxufVxyXG5mdW5jdGlvbiBub0RlZmF1bHRCdWNrZXQoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcIm5vLWRlZmF1bHQtYnVja2V0XCIgLyogTk9fREVGQVVMVF9CVUNLRVQgKi8sICdObyBkZWZhdWx0IGJ1Y2tldCAnICtcclxuICAgICAgICBcImZvdW5kLiBEaWQgeW91IHNldCB0aGUgJ1wiICtcclxuICAgICAgICBDT05GSUdfU1RPUkFHRV9CVUNLRVRfS0VZICtcclxuICAgICAgICBcIicgcHJvcGVydHkgd2hlbiBpbml0aWFsaXppbmcgdGhlIGFwcD9cIik7XHJcbn1cclxuZnVuY3Rpb24gY2Fubm90U2xpY2VCbG9iKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRXJyb3IoXCJjYW5ub3Qtc2xpY2UtYmxvYlwiIC8qIENBTk5PVF9TTElDRV9CTE9CICovLCAnQ2Fubm90IHNsaWNlIGJsb2IgZm9yIHVwbG9hZC4gUGxlYXNlIHJldHJ5IHRoZSB1cGxvYWQuJyk7XHJcbn1cclxuZnVuY3Rpb24gc2VydmVyRmlsZVdyb25nU2l6ZSgpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwic2VydmVyLWZpbGUtd3Jvbmctc2l6ZVwiIC8qIFNFUlZFUl9GSUxFX1dST05HX1NJWkUgKi8sICdTZXJ2ZXIgcmVjb3JkZWQgaW5jb3JyZWN0IHVwbG9hZCBmaWxlIHNpemUsIHBsZWFzZSByZXRyeSB0aGUgdXBsb2FkLicpO1xyXG59XHJcbmZ1bmN0aW9uIG5vRG93bmxvYWRVUkwoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcIm5vLWRvd25sb2FkLXVybFwiIC8qIE5PX0RPV05MT0FEX1VSTCAqLywgJ1RoZSBnaXZlbiBmaWxlIGRvZXMgbm90IGhhdmUgYW55IGRvd25sb2FkIFVSTHMuJyk7XHJcbn1cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gaW52YWxpZEFyZ3VtZW50KG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwiaW52YWxpZC1hcmd1bWVudFwiIC8qIElOVkFMSURfQVJHVU1FTlQgKi8sIG1lc3NhZ2UpO1xyXG59XHJcbmZ1bmN0aW9uIGFwcERlbGV0ZWQoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcImFwcC1kZWxldGVkXCIgLyogQVBQX0RFTEVURUQgKi8sICdUaGUgRmlyZWJhc2UgYXBwIHdhcyBkZWxldGVkLicpO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBvcGVyYXRpb24gdGhhdCB3YXMgaW52YWxpZC5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnZhbGlkUm9vdE9wZXJhdGlvbihuYW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VFcnJvcihcImludmFsaWQtcm9vdC1vcGVyYXRpb25cIiAvKiBJTlZBTElEX1JPT1RfT1BFUkFUSU9OICovLCBcIlRoZSBvcGVyYXRpb24gJ1wiICtcclxuICAgICAgICBuYW1lICtcclxuICAgICAgICBcIicgY2Fubm90IGJlIHBlcmZvcm1lZCBvbiBhIHJvb3QgcmVmZXJlbmNlLCBjcmVhdGUgYSBub24tcm9vdCBcIiArXHJcbiAgICAgICAgXCJyZWZlcmVuY2UgdXNpbmcgY2hpbGQsIHN1Y2ggYXMgLmNoaWxkKCdmaWxlLnBuZycpLlwiKTtcclxufVxyXG4vKipcclxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBmb3JtYXQgdGhhdCB3YXMgbm90IHZhbGlkLlxyXG4gKiBAcGFyYW0gbWVzc2FnZSAtIEEgbWVzc2FnZSBkZXNjcmliaW5nIHRoZSBmb3JtYXQgdmlvbGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gaW52YWxpZEZvcm1hdChmb3JtYXQsIG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgU3RvcmFnZUVycm9yKFwiaW52YWxpZC1mb3JtYXRcIiAvKiBJTlZBTElEX0ZPUk1BVCAqLywgXCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggZm9ybWF0ICdcIiArIGZvcm1hdCArIFwiJzogXCIgKyBtZXNzYWdlKTtcclxufVxyXG4vKipcclxuICogQHBhcmFtIG1lc3NhZ2UgLSBBIG1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgaW50ZXJuYWwgZXJyb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnRlcm5hbEVycm9yKG1lc3NhZ2UpIHtcclxuICAgIHRocm93IG5ldyBTdG9yYWdlRXJyb3IoXCJpbnRlcm5hbC1lcnJvclwiIC8qIElOVEVSTkFMX0VSUk9SICovLCAnSW50ZXJuYWwgZXJyb3I6ICcgKyBtZXNzYWdlKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRmlyZWJhc2UgU3RvcmFnZSBsb2NhdGlvbiBkYXRhLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNsYXNzIExvY2F0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGJ1Y2tldCwgcGF0aCkge1xyXG4gICAgICAgIHRoaXMuYnVja2V0ID0gYnVja2V0O1xyXG4gICAgICAgIHRoaXMucGF0aF8gPSBwYXRoO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aF87XHJcbiAgICB9XHJcbiAgICBnZXQgaXNSb290KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoID09PSAwO1xyXG4gICAgfVxyXG4gICAgZnVsbFNlcnZlclVybCgpIHtcclxuICAgICAgICBjb25zdCBlbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQ7XHJcbiAgICAgICAgcmV0dXJuICcvYi8nICsgZW5jb2RlKHRoaXMuYnVja2V0KSArICcvby8nICsgZW5jb2RlKHRoaXMucGF0aCk7XHJcbiAgICB9XHJcbiAgICBidWNrZXRPbmx5U2VydmVyVXJsKCkge1xyXG4gICAgICAgIGNvbnN0IGVuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudDtcclxuICAgICAgICByZXR1cm4gJy9iLycgKyBlbmNvZGUodGhpcy5idWNrZXQpICsgJy9vJztcclxuICAgIH1cclxuICAgIHN0YXRpYyBtYWtlRnJvbUJ1Y2tldFNwZWMoYnVja2V0U3RyaW5nLCBob3N0KSB7XHJcbiAgICAgICAgbGV0IGJ1Y2tldExvY2F0aW9uO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGJ1Y2tldExvY2F0aW9uID0gTG9jYXRpb24ubWFrZUZyb21VcmwoYnVja2V0U3RyaW5nLCBob3N0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gTm90IHZhbGlkIFVSTCwgdXNlIGFzLWlzLiBUaGlzIGxldHMgeW91IHB1dCBiYXJlIGJ1Y2tldCBuYW1lcyBpblxyXG4gICAgICAgICAgICAvLyBjb25maWcuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9jYXRpb24oYnVja2V0U3RyaW5nLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidWNrZXRMb2NhdGlvbi5wYXRoID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gYnVja2V0TG9jYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkRGVmYXVsdEJ1Y2tldChidWNrZXRTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBtYWtlRnJvbVVybCh1cmwsIGhvc3QpIHtcclxuICAgICAgICBsZXQgbG9jYXRpb24gPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGJ1Y2tldERvbWFpbiA9ICcoW0EtWmEtejAtOS5cXFxcLV9dKyknO1xyXG4gICAgICAgIGZ1bmN0aW9uIGdzTW9kaWZ5KGxvYykge1xyXG4gICAgICAgICAgICBpZiAobG9jLnBhdGguY2hhckF0KGxvYy5wYXRoLmxlbmd0aCAtIDEpID09PSAnLycpIHtcclxuICAgICAgICAgICAgICAgIGxvYy5wYXRoXyA9IGxvYy5wYXRoXy5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ3NQYXRoID0gJygvKC4qKSk/JCc7XHJcbiAgICAgICAgY29uc3QgZ3NSZWdleCA9IG5ldyBSZWdFeHAoJ15nczovLycgKyBidWNrZXREb21haW4gKyBnc1BhdGgsICdpJyk7XHJcbiAgICAgICAgY29uc3QgZ3NJbmRpY2VzID0geyBidWNrZXQ6IDEsIHBhdGg6IDMgfTtcclxuICAgICAgICBmdW5jdGlvbiBodHRwTW9kaWZ5KGxvYykge1xyXG4gICAgICAgICAgICBsb2MucGF0aF8gPSBkZWNvZGVVUklDb21wb25lbnQobG9jLnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gJ3ZbQS1aYS16MC05X10rJztcclxuICAgICAgICBjb25zdCBmaXJlYmFzZVN0b3JhZ2VIb3N0ID0gaG9zdC5yZXBsYWNlKC9bLl0vZywgJ1xcXFwuJyk7XHJcbiAgICAgICAgY29uc3QgZmlyZWJhc2VTdG9yYWdlUGF0aCA9ICcoLyhbXj8jXSopLiopPyQnO1xyXG4gICAgICAgIGNvbnN0IGZpcmViYXNlU3RvcmFnZVJlZ0V4cCA9IG5ldyBSZWdFeHAoYF5odHRwcz86Ly8ke2ZpcmViYXNlU3RvcmFnZUhvc3R9LyR7dmVyc2lvbn0vYi8ke2J1Y2tldERvbWFpbn0vbyR7ZmlyZWJhc2VTdG9yYWdlUGF0aH1gLCAnaScpO1xyXG4gICAgICAgIGNvbnN0IGZpcmViYXNlU3RvcmFnZUluZGljZXMgPSB7IGJ1Y2tldDogMSwgcGF0aDogMyB9O1xyXG4gICAgICAgIGNvbnN0IGNsb3VkU3RvcmFnZUhvc3QgPSBob3N0ID09PSBERUZBVUxUX0hPU1RcclxuICAgICAgICAgICAgPyAnKD86c3RvcmFnZS5nb29nbGVhcGlzLmNvbXxzdG9yYWdlLmNsb3VkLmdvb2dsZS5jb20pJ1xyXG4gICAgICAgICAgICA6IGhvc3Q7XHJcbiAgICAgICAgY29uc3QgY2xvdWRTdG9yYWdlUGF0aCA9ICcoW14/I10qKSc7XHJcbiAgICAgICAgY29uc3QgY2xvdWRTdG9yYWdlUmVnRXhwID0gbmV3IFJlZ0V4cChgXmh0dHBzPzovLyR7Y2xvdWRTdG9yYWdlSG9zdH0vJHtidWNrZXREb21haW59LyR7Y2xvdWRTdG9yYWdlUGF0aH1gLCAnaScpO1xyXG4gICAgICAgIGNvbnN0IGNsb3VkU3RvcmFnZUluZGljZXMgPSB7IGJ1Y2tldDogMSwgcGF0aDogMiB9O1xyXG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IFtcclxuICAgICAgICAgICAgeyByZWdleDogZ3NSZWdleCwgaW5kaWNlczogZ3NJbmRpY2VzLCBwb3N0TW9kaWZ5OiBnc01vZGlmeSB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZWdleDogZmlyZWJhc2VTdG9yYWdlUmVnRXhwLFxyXG4gICAgICAgICAgICAgICAgaW5kaWNlczogZmlyZWJhc2VTdG9yYWdlSW5kaWNlcyxcclxuICAgICAgICAgICAgICAgIHBvc3RNb2RpZnk6IGh0dHBNb2RpZnlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVnZXg6IGNsb3VkU3RvcmFnZVJlZ0V4cCxcclxuICAgICAgICAgICAgICAgIGluZGljZXM6IGNsb3VkU3RvcmFnZUluZGljZXMsXHJcbiAgICAgICAgICAgICAgICBwb3N0TW9kaWZ5OiBodHRwTW9kaWZ5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gZ3JvdXBzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBjYXB0dXJlcyA9IGdyb3VwLnJlZ2V4LmV4ZWModXJsKTtcclxuICAgICAgICAgICAgaWYgKGNhcHR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWNrZXRWYWx1ZSA9IGNhcHR1cmVzW2dyb3VwLmluZGljZXMuYnVja2V0XTtcclxuICAgICAgICAgICAgICAgIGxldCBwYXRoVmFsdWUgPSBjYXB0dXJlc1tncm91cC5pbmRpY2VzLnBhdGhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXRoVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoVmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gbmV3IExvY2F0aW9uKGJ1Y2tldFZhbHVlLCBwYXRoVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgZ3JvdXAucG9zdE1vZGlmeShsb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9jYXRpb24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkVXJsKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQSByZXF1ZXN0IHdob3NlIHByb21pc2UgYWx3YXlzIGZhaWxzLlxyXG4gKi9cclxuY2xhc3MgRmFpbFJlcXVlc3Qge1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLnByb21pc2VfID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBnZXRQcm9taXNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2VfO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBjYW5jZWwoX2FwcERlbGV0ZSA9IGZhbHNlKSB7IH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQWNjZXB0cyBhIGNhbGxiYWNrIGZvciBhbiBhY3Rpb24gdG8gcGVyZm9ybSAoYGRvUmVxdWVzdGApLFxyXG4gKiBhbmQgdGhlbiBhIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBiYWNrb2ZmIGhhcyBjb21wbGV0ZWQgKGBiYWNrb2ZmQ29tcGxldGVDYmApLlxyXG4gKiBUaGUgY2FsbGJhY2sgc2VudCB0byBzdGFydCByZXF1aXJlcyBhbiBhcmd1bWVudCB0byBjYWxsIChgb25SZXF1ZXN0Q29tcGxldGVgKS5cclxuICogV2hlbiBgc3RhcnRgIGNhbGxzIGBkb1JlcXVlc3RgLCBpdCBwYXNzZXMgYSBjYWxsYmFjayBmb3Igd2hlbiB0aGUgcmVxdWVzdCBoYXNcclxuICogY29tcGxldGVkLCBgb25SZXF1ZXN0Q29tcGxldGVgLiBCYXNlZCBvbiB0aGlzLCB0aGUgYmFja29mZiBjb250aW51ZXMsIHdpdGhcclxuICogYW5vdGhlciBjYWxsIHRvIGBkb1JlcXVlc3RgIGFuZCB0aGUgYWJvdmUgbG9vcCBjb250aW51ZXMgdW50aWwgdGhlIHRpbWVvdXRcclxuICogaXMgaGl0LCBvciBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2Ugb2NjdXJzLlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQHBhcmFtIGRvUmVxdWVzdCBDYWxsYmFjayB0byBwZXJmb3JtIHJlcXVlc3RcclxuICogQHBhcmFtIGJhY2tvZmZDb21wbGV0ZUNiIENhbGxiYWNrIHRvIGNhbGwgd2hlbiBiYWNrb2ZmIGhhcyBiZWVuIGNvbXBsZXRlZFxyXG4gKi9cclxuZnVuY3Rpb24gc3RhcnQoZG9SZXF1ZXN0LCBcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuYmFja29mZkNvbXBsZXRlQ2IsIHRpbWVvdXQpIHtcclxuICAgIC8vIFRPRE8oYW5keXNvdG8pOiBtYWtlIHRoaXMgY29kZSBjbGVhbmVyIChwcm9iYWJseSByZWZhY3RvciBpbnRvIGFuIGFjdHVhbFxyXG4gICAgLy8gdHlwZSBpbnN0ZWFkIG9mIGEgYnVuY2ggb2YgZnVuY3Rpb25zIHdpdGggc3RhdGUgc2hhcmVkIGluIHRoZSBjbG9zdXJlKVxyXG4gICAgbGV0IHdhaXRTZWNvbmRzID0gMTtcclxuICAgIC8vIFdvdWxkIHR5cGUgdGhpcyBhcyBcIm51bWJlclwiIGJ1dCB0aGF0IGRvZXNuJ3Qgd29yayBmb3IgTm9kZSBzbyDCr1xcXyjjg4QpXy/Cr1xyXG4gICAgLy8gVE9ETzogZmluZCBhIHdheSB0byBleGNsdWRlIE5vZGUgdHlwZSBkZWZpbml0aW9uIGZvciBzdG9yYWdlIGJlY2F1c2Ugc3RvcmFnZSBvbmx5IHdvcmtzIGluIGJyb3dzZXJcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBsZXQgcmV0cnlUaW1lb3V0SWQgPSBudWxsO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIGxldCBnbG9iYWxUaW1lb3V0SWQgPSBudWxsO1xyXG4gICAgbGV0IGhpdFRpbWVvdXQgPSBmYWxzZTtcclxuICAgIGxldCBjYW5jZWxTdGF0ZSA9IDA7XHJcbiAgICBmdW5jdGlvbiBjYW5jZWxlZCgpIHtcclxuICAgICAgICByZXR1cm4gY2FuY2VsU3RhdGUgPT09IDI7XHJcbiAgICB9XHJcbiAgICBsZXQgdHJpZ2dlcmVkQ2FsbGJhY2sgPSBmYWxzZTtcclxuICAgIGZ1bmN0aW9uIHRyaWdnZXJDYWxsYmFjayguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKCF0cmlnZ2VyZWRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0cmlnZ2VyZWRDYWxsYmFjayA9IHRydWU7XHJcbiAgICAgICAgICAgIGJhY2tvZmZDb21wbGV0ZUNiLmFwcGx5KG51bGwsIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNhbGxXaXRoRGVsYXkobWlsbGlzKSB7XHJcbiAgICAgICAgcmV0cnlUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgcmV0cnlUaW1lb3V0SWQgPSBudWxsO1xyXG4gICAgICAgICAgICBkb1JlcXVlc3QocmVzcG9uc2VIYW5kbGVyLCBjYW5jZWxlZCgpKTtcclxuICAgICAgICB9LCBtaWxsaXMpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2xlYXJHbG9iYWxUaW1lb3V0KCkge1xyXG4gICAgICAgIGlmIChnbG9iYWxUaW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGdsb2JhbFRpbWVvdXRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzcG9uc2VIYW5kbGVyKHN1Y2Nlc3MsIC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAodHJpZ2dlcmVkQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2xlYXJHbG9iYWxUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgY2xlYXJHbG9iYWxUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgIHRyaWdnZXJDYWxsYmFjay5jYWxsKG51bGwsIHN1Y2Nlc3MsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG11c3RTdG9wID0gY2FuY2VsZWQoKSB8fCBoaXRUaW1lb3V0O1xyXG4gICAgICAgIGlmIChtdXN0U3RvcCkge1xyXG4gICAgICAgICAgICBjbGVhckdsb2JhbFRpbWVvdXQoKTtcclxuICAgICAgICAgICAgdHJpZ2dlckNhbGxiYWNrLmNhbGwobnVsbCwgc3VjY2VzcywgLi4uYXJncyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHdhaXRTZWNvbmRzIDwgNjQpIHtcclxuICAgICAgICAgICAgLyogVE9ETyhhbmR5c290byk6IGRvbid0IGJhY2sgb2ZmIHNvIHF1aWNrbHkgaWYgd2Uga25vdyB3ZSdyZSBvZmZsaW5lLiAqL1xyXG4gICAgICAgICAgICB3YWl0U2Vjb25kcyAqPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgd2FpdE1pbGxpcztcclxuICAgICAgICBpZiAoY2FuY2VsU3RhdGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY2FuY2VsU3RhdGUgPSAyO1xyXG4gICAgICAgICAgICB3YWl0TWlsbGlzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdhaXRNaWxsaXMgPSAod2FpdFNlY29uZHMgKyBNYXRoLnJhbmRvbSgpKSAqIDEwMDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGxXaXRoRGVsYXkod2FpdE1pbGxpcyk7XHJcbiAgICB9XHJcbiAgICBsZXQgc3RvcHBlZCA9IGZhbHNlO1xyXG4gICAgZnVuY3Rpb24gc3RvcCh3YXNUaW1lb3V0KSB7XHJcbiAgICAgICAgaWYgKHN0b3BwZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICBjbGVhckdsb2JhbFRpbWVvdXQoKTtcclxuICAgICAgICBpZiAodHJpZ2dlcmVkQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV0cnlUaW1lb3V0SWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKCF3YXNUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxTdGF0ZSA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZW91dElkKTtcclxuICAgICAgICAgICAgY2FsbFdpdGhEZWxheSgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghd2FzVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsU3RhdGUgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2FsbFdpdGhEZWxheSgwKTtcclxuICAgIGdsb2JhbFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGhpdFRpbWVvdXQgPSB0cnVlO1xyXG4gICAgICAgIHN0b3AodHJ1ZSk7XHJcbiAgICB9LCB0aW1lb3V0KTtcclxuICAgIHJldHVybiBzdG9wO1xyXG59XHJcbi8qKlxyXG4gKiBTdG9wcyB0aGUgcmV0cnkgbG9vcCBmcm9tIHJlcGVhdGluZy5cclxuICogSWYgdGhlIGZ1bmN0aW9uIGlzIGN1cnJlbnRseSBcImluIGJldHdlZW5cIiByZXRyaWVzLCBpdCBpcyBpbnZva2VkIGltbWVkaWF0ZWx5XHJcbiAqIHdpdGggdGhlIHNlY29uZCBwYXJhbWV0ZXIgYXMgXCJ0cnVlXCIuIE90aGVyd2lzZSwgaXQgd2lsbCBiZSBpbnZva2VkIG9uY2UgbW9yZVxyXG4gKiBhZnRlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGZpbmlzaGVzIGlmZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uIHdvdWxkIGhhdmVcclxuICogdHJpZ2dlcmVkIGFub3RoZXIgcmV0cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdG9wKGlkKSB7XHJcbiAgICBpZChmYWxzZSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNKdXN0RGVmKHApIHtcclxuICAgIHJldHVybiBwICE9PSB2b2lkIDA7XHJcbn1cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZnVuY3Rpb24gaXNGdW5jdGlvbihwKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHAgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuZnVuY3Rpb24gaXNOb25BcnJheU9iamVjdChwKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHAgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHApO1xyXG59XHJcbmZ1bmN0aW9uIGlzU3RyaW5nKHApIHtcclxuICAgIHJldHVybiB0eXBlb2YgcCA9PT0gJ3N0cmluZycgfHwgcCBpbnN0YW5jZW9mIFN0cmluZztcclxufVxyXG5mdW5jdGlvbiBpc05hdGl2ZUJsb2IocCkge1xyXG4gICAgcmV0dXJuIGlzTmF0aXZlQmxvYkRlZmluZWQoKSAmJiBwIGluc3RhbmNlb2YgQmxvYjtcclxufVxyXG5mdW5jdGlvbiBpc05hdGl2ZUJsb2JEZWZpbmVkKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJztcclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlcihhcmd1bWVudCwgbWluVmFsdWUsIG1heFZhbHVlLCB2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlIDwgbWluVmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBpbnZhbGlkQXJndW1lbnQoYEludmFsaWQgdmFsdWUgZm9yICcke2FyZ3VtZW50fScuIEV4cGVjdGVkICR7bWluVmFsdWV9IG9yIGdyZWF0ZXIuYCk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPiBtYXhWYWx1ZSkge1xyXG4gICAgICAgIHRocm93IGludmFsaWRBcmd1bWVudChgSW52YWxpZCB2YWx1ZSBmb3IgJyR7YXJndW1lbnR9Jy4gRXhwZWN0ZWQgJHttYXhWYWx1ZX0gb3IgbGVzcy5gKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlVXJsKHVybFBhcnQsIGhvc3QsIHByb3RvY29sKSB7XHJcbiAgICBsZXQgb3JpZ2luID0gaG9zdDtcclxuICAgIGlmIChwcm90b2NvbCA9PSBudWxsKSB7XHJcbiAgICAgICAgb3JpZ2luID0gYGh0dHBzOi8vJHtob3N0fWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7cHJvdG9jb2x9Oi8vJHtvcmlnaW59L3YwJHt1cmxQYXJ0fWA7XHJcbn1cclxuZnVuY3Rpb24gbWFrZVF1ZXJ5U3RyaW5nKHBhcmFtcykge1xyXG4gICAgY29uc3QgZW5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50O1xyXG4gICAgbGV0IHF1ZXJ5UGFydCA9ICc/JztcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0UGFydCA9IGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHBhcmFtc1trZXldKTtcclxuICAgICAgICAgICAgcXVlcnlQYXJ0ID0gcXVlcnlQYXJ0ICsgbmV4dFBhcnQgKyAnJic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2hvcCBvZmYgdGhlIGV4dHJhICcmJyBvciAnPycgb24gdGhlIGVuZFxyXG4gICAgcXVlcnlQYXJ0ID0gcXVlcnlQYXJ0LnNsaWNlKDAsIC0xKTtcclxuICAgIHJldHVybiBxdWVyeVBhcnQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEVycm9yIGNvZGVzIGZvciByZXF1ZXN0cyBtYWRlIGJ5IHRoZSB0aGUgWGhySW8gd3JhcHBlci5cclxuICovXHJcbnZhciBFcnJvckNvZGU7XHJcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XHJcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTk9fRVJST1JcIl0gPSAwXSA9IFwiTk9fRVJST1JcIjtcclxuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJORVRXT1JLX0VSUk9SXCJdID0gMV0gPSBcIk5FVFdPUktfRVJST1JcIjtcclxuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJBQk9SVFwiXSA9IDJdID0gXCJBQk9SVFwiO1xyXG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVja3MgdGhlIHN0YXR1cyBjb2RlIHRvIHNlZSBpZiB0aGUgYWN0aW9uIHNob3VsZCBiZSByZXRyaWVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RhdHVzIEN1cnJlbnQgSFRUUCBzdGF0dXMgY29kZSByZXR1cm5lZCBieSBzZXJ2ZXIuXHJcbiAqIEBwYXJhbSBhZGRpdGlvbmFsUmV0cnlDb2RlcyBhZGRpdGlvbmFsIHJldHJ5IGNvZGVzIHRvIGNoZWNrIGFnYWluc3RcclxuICovXHJcbmZ1bmN0aW9uIGlzUmV0cnlTdGF0dXNDb2RlKHN0YXR1cywgYWRkaXRpb25hbFJldHJ5Q29kZXMpIHtcclxuICAgIC8vIFRoZSBjb2RlcyBmb3Igd2hpY2ggdG8gcmV0cnkgY2FtZSBmcm9tIHRoaXMgcGFnZTpcclxuICAgIC8vIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvZXhwb25lbnRpYWwtYmFja29mZlxyXG4gICAgY29uc3QgaXNGaXZlSHVuZHJlZENvZGUgPSBzdGF0dXMgPj0gNTAwICYmIHN0YXR1cyA8IDYwMDtcclxuICAgIGNvbnN0IGV4dHJhUmV0cnlDb2RlcyA9IFtcclxuICAgICAgICAvLyBSZXF1ZXN0IFRpbWVvdXQ6IHdlYiBzZXJ2ZXIgZGlkbid0IHJlY2VpdmUgZnVsbCByZXF1ZXN0IGluIHRpbWUuXHJcbiAgICAgICAgNDA4LFxyXG4gICAgICAgIC8vIFRvbyBNYW55IFJlcXVlc3RzOiB5b3UncmUgZ2V0dGluZyByYXRlLWxpbWl0ZWQsIGJhc2ljYWxseS5cclxuICAgICAgICA0MjlcclxuICAgIF07XHJcbiAgICBjb25zdCBpc0V4dHJhUmV0cnlDb2RlID0gZXh0cmFSZXRyeUNvZGVzLmluZGV4T2Yoc3RhdHVzKSAhPT0gLTE7XHJcbiAgICBjb25zdCBpc0FkZGl0aW9uYWxSZXRyeUNvZGUgPSBhZGRpdGlvbmFsUmV0cnlDb2Rlcy5pbmRleE9mKHN0YXR1cykgIT09IC0xO1xyXG4gICAgcmV0dXJuIGlzRml2ZUh1bmRyZWRDb2RlIHx8IGlzRXh0cmFSZXRyeUNvZGUgfHwgaXNBZGRpdGlvbmFsUmV0cnlDb2RlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBIYW5kbGVzIG5ldHdvcmsgbG9naWMgZm9yIGFsbCBTdG9yYWdlIFJlcXVlc3RzLCBpbmNsdWRpbmcgZXJyb3IgcmVwb3J0aW5nIGFuZFxyXG4gKiByZXRyaWVzIHdpdGggYmFja29mZi5cclxuICpcclxuICogQHBhcmFtIEkgLSB0aGUgdHlwZSBvZiB0aGUgYmFja2VuZCdzIG5ldHdvcmsgcmVzcG9uc2UuXHJcbiAqIEBwYXJhbSAtIE8gdGhlIG91dHB1dCB0eXBlIHVzZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIFNESy4gVGhlIGNvbnZlcnNpb25cclxuICogaGFwcGVucyBpbiB0aGUgc3BlY2lmaWVkIGBjYWxsYmFja19gLlxyXG4gKi9cclxuY2xhc3MgTmV0d29ya1JlcXVlc3Qge1xyXG4gICAgY29uc3RydWN0b3IodXJsXywgbWV0aG9kXywgaGVhZGVyc18sIGJvZHlfLCBzdWNjZXNzQ29kZXNfLCBhZGRpdGlvbmFsUmV0cnlDb2Rlc18sIGNhbGxiYWNrXywgZXJyb3JDYWxsYmFja18sIHRpbWVvdXRfLCBwcm9ncmVzc0NhbGxiYWNrXywgY29ubmVjdGlvbkZhY3RvcnlfLCByZXRyeSA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnVybF8gPSB1cmxfO1xyXG4gICAgICAgIHRoaXMubWV0aG9kXyA9IG1ldGhvZF87XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzXyA9IGhlYWRlcnNfO1xyXG4gICAgICAgIHRoaXMuYm9keV8gPSBib2R5XztcclxuICAgICAgICB0aGlzLnN1Y2Nlc3NDb2Rlc18gPSBzdWNjZXNzQ29kZXNfO1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbFJldHJ5Q29kZXNfID0gYWRkaXRpb25hbFJldHJ5Q29kZXNfO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuZXJyb3JDYWxsYmFja18gPSBlcnJvckNhbGxiYWNrXztcclxuICAgICAgICB0aGlzLnRpbWVvdXRfID0gdGltZW91dF87XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0NhbGxiYWNrXyA9IHByb2dyZXNzQ2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbkZhY3RvcnlfID0gY29ubmVjdGlvbkZhY3RvcnlfO1xyXG4gICAgICAgIHRoaXMucmV0cnkgPSByZXRyeTtcclxuICAgICAgICB0aGlzLnBlbmRpbmdDb25uZWN0aW9uXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYWNrb2ZmSWRfID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNhbmNlbGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXBwRGVsZXRlXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucHJvbWlzZV8gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZV8gPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB0aGlzLnJlamVjdF8gPSByZWplY3Q7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjdHVhbGx5IHN0YXJ0cyB0aGUgcmV0cnkgbG9vcC5cclxuICAgICAqL1xyXG4gICAgc3RhcnRfKCkge1xyXG4gICAgICAgIGNvbnN0IGRvVGhlUmVxdWVzdCA9IChiYWNrb2ZmQ2FsbGJhY2ssIGNhbmNlbGVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjYW5jZWxlZCkge1xyXG4gICAgICAgICAgICAgICAgYmFja29mZkNhbGxiYWNrKGZhbHNlLCBuZXcgUmVxdWVzdEVuZFN0YXR1cyhmYWxzZSwgbnVsbCwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb25GYWN0b3J5XygpO1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdDb25uZWN0aW9uXyA9IGNvbm5lY3Rpb247XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzTGlzdGVuZXIgPSBwcm9ncmVzc0V2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHByb2dyZXNzRXZlbnQubG9hZGVkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG90YWwgPSBwcm9ncmVzc0V2ZW50Lmxlbmd0aENvbXB1dGFibGUgPyBwcm9ncmVzc0V2ZW50LnRvdGFsIDogLTE7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9ncmVzc0NhbGxiYWNrXyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NDYWxsYmFja18obG9hZGVkLCB0b3RhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2dyZXNzQ2FsbGJhY2tfICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmFkZFVwbG9hZFByb2dyZXNzTGlzdGVuZXIocHJvZ3Jlc3NMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29ubmVjdGlvbi5zZW5kKCkgbmV2ZXIgcmVqZWN0cywgc28gd2UgZG9uJ3QgbmVlZCB0byBoYXZlIGEgZXJyb3IgaGFuZGxlciBvciB1c2UgY2F0Y2ggb24gdGhlIHJldHVybmVkIHByb21pc2UuXHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgY29ubmVjdGlvblxyXG4gICAgICAgICAgICAgICAgLnNlbmQodGhpcy51cmxfLCB0aGlzLm1ldGhvZF8sIHRoaXMuYm9keV8sIHRoaXMuaGVhZGVyc18pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9ncmVzc0NhbGxiYWNrXyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVtb3ZlVXBsb2FkUHJvZ3Jlc3NMaXN0ZW5lcihwcm9ncmVzc0xpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0Nvbm5lY3Rpb25fID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhpdFNlcnZlciA9IGNvbm5lY3Rpb24uZ2V0RXJyb3JDb2RlKCkgPT09IEVycm9yQ29kZS5OT19FUlJPUjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGNvbm5lY3Rpb24uZ2V0U3RhdHVzKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKCFoaXRTZXJ2ZXIgfHxcclxuICAgICAgICAgICAgICAgICAgICBpc1JldHJ5U3RhdHVzQ29kZShzdGF0dXMsIHRoaXMuYWRkaXRpb25hbFJldHJ5Q29kZXNfKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJldHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FzQ2FuY2VsZWQgPSBjb25uZWN0aW9uLmdldEVycm9yQ29kZSgpID09PSBFcnJvckNvZGUuQUJPUlQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja29mZkNhbGxiYWNrKGZhbHNlLCBuZXcgUmVxdWVzdEVuZFN0YXR1cyhmYWxzZSwgbnVsbCwgd2FzQ2FuY2VsZWQpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzQ29kZSA9IHRoaXMuc3VjY2Vzc0NvZGVzXy5pbmRleE9mKHN0YXR1cykgIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgYmFja29mZkNhbGxiYWNrKHRydWUsIG5ldyBSZXF1ZXN0RW5kU3RhdHVzKHN1Y2Nlc3NDb2RlLCBjb25uZWN0aW9uKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHJlcXVlc3RXZW50VGhyb3VnaCAtIFRydWUgaWYgdGhlIHJlcXVlc3QgZXZlbnR1YWxseSB3ZW50XHJcbiAgICAgICAgICogICAgIHRocm91Z2gsIGZhbHNlIGlmIGl0IGhpdCB0aGUgcmV0cnkgbGltaXQgb3Igd2FzIGNhbmNlbGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGJhY2tvZmZEb25lID0gKHJlcXVlc3RXZW50VGhyb3VnaCwgc3RhdHVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSB0aGlzLnJlc29sdmVfO1xyXG4gICAgICAgICAgICBjb25zdCByZWplY3QgPSB0aGlzLnJlamVjdF87XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBzdGF0dXMuY29ubmVjdGlvbjtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cy53YXNTdWNjZXNzQ29kZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNhbGxiYWNrXyhjb25uZWN0aW9uLCBjb25uZWN0aW9uLmdldFJlc3BvbnNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0p1c3REZWYocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IHVua25vd24oKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnIuc2VydmVyUmVzcG9uc2UgPSBjb25uZWN0aW9uLmdldEVycm9yVGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVycm9yQ2FsbGJhY2tfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh0aGlzLmVycm9yQ2FsbGJhY2tfKGNvbm5lY3Rpb24sIGVycikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5jYW5jZWxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSB0aGlzLmFwcERlbGV0ZV8gPyBhcHBEZWxldGVkKCkgOiBjYW5jZWxlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IHJldHJ5TGltaXRFeGNlZWRlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLmNhbmNlbGVkXykge1xyXG4gICAgICAgICAgICBiYWNrb2ZmRG9uZShmYWxzZSwgbmV3IFJlcXVlc3RFbmRTdGF0dXMoZmFsc2UsIG51bGwsIHRydWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja29mZklkXyA9IHN0YXJ0KGRvVGhlUmVxdWVzdCwgYmFja29mZkRvbmUsIHRoaXMudGltZW91dF8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgZ2V0UHJvbWlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlXztcclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgY2FuY2VsKGFwcERlbGV0ZSkge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsZWRfID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmFwcERlbGV0ZV8gPSBhcHBEZWxldGUgfHwgZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuYmFja29mZklkXyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdG9wKHRoaXMuYmFja29mZklkXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdDb25uZWN0aW9uXyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdDb25uZWN0aW9uXy5hYm9ydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXN1bHQgb2YgYSBuZXR3b3JrIHJlcXVlc3QuXHJcbiAqIEBwYXJhbSBvcHRfY2FuY2VsZWQgLSBEZWZhdWx0cyB0byBmYWxzZS5cclxuICovXHJcbmNsYXNzIFJlcXVlc3RFbmRTdGF0dXMge1xyXG4gICAgY29uc3RydWN0b3Iod2FzU3VjY2Vzc0NvZGUsIGNvbm5lY3Rpb24sIGNhbmNlbGVkKSB7XHJcbiAgICAgICAgdGhpcy53YXNTdWNjZXNzQ29kZSA9IHdhc1N1Y2Nlc3NDb2RlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5jYW5jZWxlZCA9ICEhY2FuY2VsZWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYWRkQXV0aEhlYWRlcl8oaGVhZGVycywgYXV0aFRva2VuKSB7XHJcbiAgICBpZiAoYXV0aFRva2VuICE9PSBudWxsICYmIGF1dGhUb2tlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gJ0ZpcmViYXNlICcgKyBhdXRoVG9rZW47XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYWRkVmVyc2lvbkhlYWRlcl8oaGVhZGVycywgZmlyZWJhc2VWZXJzaW9uKSB7XHJcbiAgICBoZWFkZXJzWydYLUZpcmViYXNlLVN0b3JhZ2UtVmVyc2lvbiddID1cclxuICAgICAgICAnd2VianMvJyArIChmaXJlYmFzZVZlcnNpb24gIT09IG51bGwgJiYgZmlyZWJhc2VWZXJzaW9uICE9PSB2b2lkIDAgPyBmaXJlYmFzZVZlcnNpb24gOiAnQXBwTWFuYWdlcicpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZEdtcGlkSGVhZGVyXyhoZWFkZXJzLCBhcHBJZCkge1xyXG4gICAgaWYgKGFwcElkKSB7XHJcbiAgICAgICAgaGVhZGVyc1snWC1GaXJlYmFzZS1HTVBJRCddID0gYXBwSWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYWRkQXBwQ2hlY2tIZWFkZXJfKGhlYWRlcnMsIGFwcENoZWNrVG9rZW4pIHtcclxuICAgIGlmIChhcHBDaGVja1Rva2VuICE9PSBudWxsKSB7XHJcbiAgICAgICAgaGVhZGVyc1snWC1GaXJlYmFzZS1BcHBDaGVjayddID0gYXBwQ2hlY2tUb2tlbjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBtYWtlUmVxdWVzdChyZXF1ZXN0SW5mbywgYXBwSWQsIGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbiwgcmVxdWVzdEZhY3RvcnksIGZpcmViYXNlVmVyc2lvbiwgcmV0cnkgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBxdWVyeVBhcnQgPSBtYWtlUXVlcnlTdHJpbmcocmVxdWVzdEluZm8udXJsUGFyYW1zKTtcclxuICAgIGNvbnN0IHVybCA9IHJlcXVlc3RJbmZvLnVybCArIHF1ZXJ5UGFydDtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0SW5mby5oZWFkZXJzKTtcclxuICAgIGFkZEdtcGlkSGVhZGVyXyhoZWFkZXJzLCBhcHBJZCk7XHJcbiAgICBhZGRBdXRoSGVhZGVyXyhoZWFkZXJzLCBhdXRoVG9rZW4pO1xyXG4gICAgYWRkVmVyc2lvbkhlYWRlcl8oaGVhZGVycywgZmlyZWJhc2VWZXJzaW9uKTtcclxuICAgIGFkZEFwcENoZWNrSGVhZGVyXyhoZWFkZXJzLCBhcHBDaGVja1Rva2VuKTtcclxuICAgIHJldHVybiBuZXcgTmV0d29ya1JlcXVlc3QodXJsLCByZXF1ZXN0SW5mby5tZXRob2QsIGhlYWRlcnMsIHJlcXVlc3RJbmZvLmJvZHksIHJlcXVlc3RJbmZvLnN1Y2Nlc3NDb2RlcywgcmVxdWVzdEluZm8uYWRkaXRpb25hbFJldHJ5Q29kZXMsIHJlcXVlc3RJbmZvLmhhbmRsZXIsIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciwgcmVxdWVzdEluZm8udGltZW91dCwgcmVxdWVzdEluZm8ucHJvZ3Jlc3NDYWxsYmFjaywgcmVxdWVzdEZhY3RvcnksIHJldHJ5KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCbG9iQnVpbGRlcigpIHtcclxuICAgIGlmICh0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIEJsb2JCdWlsZGVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIFdlYktpdEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBXZWJLaXRCbG9iQnVpbGRlcjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENvbmNhdGVuYXRlcyBvbmUgb3IgbW9yZSB2YWx1ZXMgdG9nZXRoZXIgYW5kIGNvbnZlcnRzIHRoZW0gdG8gYSBCbG9iLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJncyBUaGUgdmFsdWVzIHRoYXQgd2lsbCBtYWtlIHVwIHRoZSByZXN1bHRpbmcgYmxvYi5cclxuICogQHJldHVybiBUaGUgYmxvYi5cclxuICovXHJcbmZ1bmN0aW9uIGdldEJsb2IkMSguLi5hcmdzKSB7XHJcbiAgICBjb25zdCBCbG9iQnVpbGRlciA9IGdldEJsb2JCdWlsZGVyKCk7XHJcbiAgICBpZiAoQmxvYkJ1aWxkZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJiLmFwcGVuZChhcmdzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJiLmdldEJsb2IoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChpc05hdGl2ZUJsb2JEZWZpbmVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKGFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFN0b3JhZ2VFcnJvcihcInVuc3VwcG9ydGVkLWVudmlyb25tZW50XCIgLyogVU5TVVBQT1JURURfRU5WSVJPTk1FTlQgKi8sIFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IGNyZWF0aW5nIEJsb2JzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2xpY2VzIHRoZSBibG9iLiBUaGUgcmV0dXJuZWQgYmxvYiBjb250YWlucyBkYXRhIGZyb20gdGhlIHN0YXJ0IGJ5dGVcclxuICogKGluY2x1c2l2ZSkgdGlsbCB0aGUgZW5kIGJ5dGUgKGV4Y2x1c2l2ZSkuIE5lZ2F0aXZlIGluZGljZXMgY2Fubm90IGJlIHVzZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBibG9iIFRoZSBibG9iIHRvIGJlIHNsaWNlZC5cclxuICogQHBhcmFtIHN0YXJ0IEluZGV4IG9mIHRoZSBzdGFydGluZyBieXRlLlxyXG4gKiBAcGFyYW0gZW5kIEluZGV4IG9mIHRoZSBlbmRpbmcgYnl0ZS5cclxuICogQHJldHVybiBUaGUgYmxvYiBzbGljZSBvciBudWxsIGlmIG5vdCBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzbGljZUJsb2IoYmxvYiwgc3RhcnQsIGVuZCkge1xyXG4gICAgaWYgKGJsb2Iud2Via2l0U2xpY2UpIHtcclxuICAgICAgICByZXR1cm4gYmxvYi53ZWJraXRTbGljZShzdGFydCwgZW5kKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGJsb2IubW96U2xpY2UpIHtcclxuICAgICAgICByZXR1cm4gYmxvYi5tb3pTbGljZShzdGFydCwgZW5kKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGJsb2Iuc2xpY2UpIHtcclxuICAgICAgICByZXR1cm4gYmxvYi5zbGljZShzdGFydCwgZW5kKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBDb252ZXJ0cyBhIEJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBhIGJpbmFyeSBzdHJpbmcuICovXHJcbmZ1bmN0aW9uIGRlY29kZUJhc2U2NChlbmNvZGVkKSB7XHJcbiAgICByZXR1cm4gYXRvYihlbmNvZGVkKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gZW51bWVyYXRpb24gb2YgdGhlIHBvc3NpYmxlIHN0cmluZyBmb3JtYXRzIGZvciB1cGxvYWQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IFN0cmluZ0Zvcm1hdCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoZSBzdHJpbmcgc2hvdWxkIGJlIGludGVycHJldGVkIFwicmF3XCIsIHRoYXQgaXMsIGFzIG5vcm1hbCB0ZXh0LlxyXG4gICAgICogVGhlIHN0cmluZyB3aWxsIGJlIGludGVycHJldGVkIGFzIFVURi0xNiwgdGhlbiB1cGxvYWRlZCBhcyBhIFVURi04IGJ5dGVcclxuICAgICAqIHNlcXVlbmNlLlxyXG4gICAgICogRXhhbXBsZTogVGhlIHN0cmluZyAnSGVsbG8hIFxcXFx1ZDgzZFxcXFx1ZGUwYScgYmVjb21lcyB0aGUgYnl0ZSBzZXF1ZW5jZVxyXG4gICAgICogNDggNjUgNmMgNmMgNmYgMjEgMjAgZjAgOWYgOTggOGFcclxuICAgICAqL1xyXG4gICAgUkFXOiAncmF3JyxcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoZSBzdHJpbmcgc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2U2NC1lbmNvZGVkIGRhdGEuXHJcbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgKHRyYWlsaW5nICc9J3MpIGFyZSBvcHRpb25hbC5cclxuICAgICAqIEV4YW1wbGU6IFRoZSBzdHJpbmcgJ3JXbU8rK0U2dDcvcmx3PT0nIGJlY29tZXMgdGhlIGJ5dGUgc2VxdWVuY2VcclxuICAgICAqIGFkIDY5IDhlIGZiIGUxIDNhIGI3IGJmIGViIDk3XHJcbiAgICAgKi9cclxuICAgIEJBU0U2NDogJ2Jhc2U2NCcsXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyB0aGUgc3RyaW5nIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNlNjR1cmwtZW5jb2RlZCBkYXRhLlxyXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzICh0cmFpbGluZyAnPSdzKSBhcmUgb3B0aW9uYWwuXHJcbiAgICAgKiBFeGFtcGxlOiBUaGUgc3RyaW5nICdyV21PLS1FNnQ3X3Jsdz09JyBiZWNvbWVzIHRoZSBieXRlIHNlcXVlbmNlXHJcbiAgICAgKiBhZCA2OSA4ZSBmYiBlMSAzYSBiNyBiZiBlYiA5N1xyXG4gICAgICovXHJcbiAgICBCQVNFNjRVUkw6ICdiYXNlNjR1cmwnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIHN0cmluZyBpcyBhIGRhdGEgVVJMLCBzdWNoIGFzIG9uZSBvYnRhaW5lZCBmcm9tXHJcbiAgICAgKiBjYW52YXMudG9EYXRhVVJMKCkuXHJcbiAgICAgKiBFeGFtcGxlOiB0aGUgc3RyaW5nICdkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsYWFhYSdcclxuICAgICAqIGJlY29tZXMgdGhlIGJ5dGUgc2VxdWVuY2VcclxuICAgICAqIDY5IGE2IDlhXHJcbiAgICAgKiAodGhlIGNvbnRlbnQtdHlwZSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiIGlzIGFsc28gYXBwbGllZCwgYnV0IGNhblxyXG4gICAgICogYmUgb3ZlcnJpZGRlbiBpbiB0aGUgbWV0YWRhdGEgb2JqZWN0KS5cclxuICAgICAqL1xyXG4gICAgREFUQV9VUkw6ICdkYXRhX3VybCdcclxufTtcclxuY2xhc3MgU3RyaW5nRGF0YSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBjb250ZW50VHlwZSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlIHx8IG51bGw7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gZGF0YUZyb21TdHJpbmcoZm9ybWF0LCBzdHJpbmdEYXRhKSB7XHJcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xyXG4gICAgICAgIGNhc2UgU3RyaW5nRm9ybWF0LlJBVzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdEYXRhKHV0ZjhCeXRlc18oc3RyaW5nRGF0YSkpO1xyXG4gICAgICAgIGNhc2UgU3RyaW5nRm9ybWF0LkJBU0U2NDpcclxuICAgICAgICBjYXNlIFN0cmluZ0Zvcm1hdC5CQVNFNjRVUkw6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nRGF0YShiYXNlNjRCeXRlc18oZm9ybWF0LCBzdHJpbmdEYXRhKSk7XHJcbiAgICAgICAgY2FzZSBTdHJpbmdGb3JtYXQuREFUQV9VUkw6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nRGF0YShkYXRhVVJMQnl0ZXNfKHN0cmluZ0RhdGEpLCBkYXRhVVJMQ29udGVudFR5cGVfKHN0cmluZ0RhdGEpKTtcclxuICAgICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICB9XHJcbiAgICAvLyBhc3NlcnQoZmFsc2UpO1xyXG4gICAgdGhyb3cgdW5rbm93bigpO1xyXG59XHJcbmZ1bmN0aW9uIHV0ZjhCeXRlc18odmFsdWUpIHtcclxuICAgIGNvbnN0IGIgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPD0gMTI3KSB7XHJcbiAgICAgICAgICAgIGIucHVzaChjKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjIDw9IDIwNDcpIHtcclxuICAgICAgICAgICAgICAgIGIucHVzaCgxOTIgfCAoYyA+PiA2KSwgMTI4IHwgKGMgJiA2MykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKChjICYgNjQ1MTIpID09PSA1NTI5Nikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzdGFydCBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkID0gaSA8IHZhbHVlLmxlbmd0aCAtIDEgJiYgKHZhbHVlLmNoYXJDb2RlQXQoaSArIDEpICYgNjQ1MTIpID09PSA1NjMyMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzZWNvbmQgc3Vycm9nYXRlIHdhc24ndCB0aGVyZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKDIzOSwgMTkxLCAxODkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGkgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsbyA9IHZhbHVlLmNoYXJDb2RlQXQoKytpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IDY1NTM2IHwgKChoaSAmIDEwMjMpIDw8IDEwKSB8IChsbyAmIDEwMjMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiLnB1c2goMjQwIHwgKGMgPj4gMTgpLCAxMjggfCAoKGMgPj4gMTIpICYgNjMpLCAxMjggfCAoKGMgPj4gNikgJiA2MyksIDEyOCB8IChjICYgNjMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGMgJiA2NDUxMikgPT09IDU2MzIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgbG93IHN1cnJvZ2F0ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKDIzOSwgMTkxLCAxODkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKDIyNCB8IChjID4+IDEyKSwgMTI4IHwgKChjID4+IDYpICYgNjMpLCAxMjggfCAoYyAmIDYzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIpO1xyXG59XHJcbmZ1bmN0aW9uIHBlcmNlbnRFbmNvZGVkQnl0ZXNfKHZhbHVlKSB7XHJcbiAgICBsZXQgZGVjb2RlZDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZGVjb2RlZCA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGludmFsaWRGb3JtYXQoU3RyaW5nRm9ybWF0LkRBVEFfVVJMLCAnTWFsZm9ybWVkIGRhdGEgVVJMLicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHV0ZjhCeXRlc18oZGVjb2RlZCk7XHJcbn1cclxuZnVuY3Rpb24gYmFzZTY0Qnl0ZXNfKGZvcm1hdCwgdmFsdWUpIHtcclxuICAgIHN3aXRjaCAoZm9ybWF0KSB7XHJcbiAgICAgICAgY2FzZSBTdHJpbmdGb3JtYXQuQkFTRTY0OiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhc01pbnVzID0gdmFsdWUuaW5kZXhPZignLScpICE9PSAtMTtcclxuICAgICAgICAgICAgY29uc3QgaGFzVW5kZXIgPSB2YWx1ZS5pbmRleE9mKCdfJykgIT09IC0xO1xyXG4gICAgICAgICAgICBpZiAoaGFzTWludXMgfHwgaGFzVW5kZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRDaGFyID0gaGFzTWludXMgPyAnLScgOiAnXyc7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRm9ybWF0KGZvcm1hdCwgXCJJbnZhbGlkIGNoYXJhY3RlciAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRDaGFyICtcclxuICAgICAgICAgICAgICAgICAgICBcIicgZm91bmQ6IGlzIGl0IGJhc2U2NHVybCBlbmNvZGVkP1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBTdHJpbmdGb3JtYXQuQkFTRTY0VVJMOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhc1BsdXMgPSB2YWx1ZS5pbmRleE9mKCcrJykgIT09IC0xO1xyXG4gICAgICAgICAgICBjb25zdCBoYXNTbGFzaCA9IHZhbHVlLmluZGV4T2YoJy8nKSAhPT0gLTE7XHJcbiAgICAgICAgICAgIGlmIChoYXNQbHVzIHx8IGhhc1NsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkQ2hhciA9IGhhc1BsdXMgPyAnKycgOiAnLyc7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRm9ybWF0KGZvcm1hdCwgXCJJbnZhbGlkIGNoYXJhY3RlciAnXCIgKyBpbnZhbGlkQ2hhciArIFwiJyBmb3VuZDogaXMgaXQgYmFzZTY0IGVuY29kZWQ/XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRvIG5vdGhpbmdcclxuICAgIH1cclxuICAgIGxldCBieXRlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYnl0ZXMgPSBkZWNvZGVCYXNlNjQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBpbnZhbGlkRm9ybWF0KGZvcm1hdCwgJ0ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaV0gPSBieXRlcy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbmNsYXNzIERhdGFVUkxQYXJ0cyB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhVVJMKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlNjQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRUeXBlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBtYXRjaGVzID0gZGF0YVVSTC5tYXRjaCgvXmRhdGE6KFteLF0rKT8sLyk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgaW52YWxpZEZvcm1hdChTdHJpbmdGb3JtYXQuREFUQV9VUkwsIFwiTXVzdCBiZSBmb3JtYXR0ZWQgJ2RhdGE6WzxtZWRpYXR5cGU+XVs7YmFzZTY0XSw8ZGF0YT5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1pZGRsZSA9IG1hdGNoZXNbMV0gfHwgbnVsbDtcclxuICAgICAgICBpZiAobWlkZGxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlNjQgPSBlbmRzV2l0aChtaWRkbGUsICc7YmFzZTY0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFR5cGUgPSB0aGlzLmJhc2U2NFxyXG4gICAgICAgICAgICAgICAgPyBtaWRkbGUuc3Vic3RyaW5nKDAsIG1pZGRsZS5sZW5ndGggLSAnO2Jhc2U2NCcubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgOiBtaWRkbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzdCA9IGRhdGFVUkwuc3Vic3RyaW5nKGRhdGFVUkwuaW5kZXhPZignLCcpICsgMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGF0YVVSTEJ5dGVzXyhkYXRhVXJsKSB7XHJcbiAgICBjb25zdCBwYXJ0cyA9IG5ldyBEYXRhVVJMUGFydHMoZGF0YVVybCk7XHJcbiAgICBpZiAocGFydHMuYmFzZTY0KSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NEJ5dGVzXyhTdHJpbmdGb3JtYXQuQkFTRTY0LCBwYXJ0cy5yZXN0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBwZXJjZW50RW5jb2RlZEJ5dGVzXyhwYXJ0cy5yZXN0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkYXRhVVJMQ29udGVudFR5cGVfKGRhdGFVcmwpIHtcclxuICAgIGNvbnN0IHBhcnRzID0gbmV3IERhdGFVUkxQYXJ0cyhkYXRhVXJsKTtcclxuICAgIHJldHVybiBwYXJ0cy5jb250ZW50VHlwZTtcclxufVxyXG5mdW5jdGlvbiBlbmRzV2l0aChzLCBlbmQpIHtcclxuICAgIGNvbnN0IGxvbmdFbm91Z2ggPSBzLmxlbmd0aCA+PSBlbmQubGVuZ3RoO1xyXG4gICAgaWYgKCFsb25nRW5vdWdoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHMuc3Vic3RyaW5nKHMubGVuZ3RoIC0gZW5kLmxlbmd0aCkgPT09IGVuZDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIG9wdF9lbGlkZUNvcHkgLSBJZiB0cnVlLCBkb2Vzbid0IGNvcHkgbXV0YWJsZSBpbnB1dCBkYXRhXHJcbiAqICAgICAoZS5nLiBVaW50OEFycmF5cykuIFBhc3MgdHJ1ZSBvbmx5IGlmIHlvdSBrbm93IHRoZSBvYmplY3RzIHdpbGwgbm90IGJlXHJcbiAqICAgICBtb2RpZmllZCBhZnRlciB0aGlzIGJsb2IncyBjb25zdHJ1Y3Rpb24uXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY2xhc3MgRmJzQmxvYiB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBlbGlkZUNvcHkpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDA7XHJcbiAgICAgICAgbGV0IGJsb2JUeXBlID0gJyc7XHJcbiAgICAgICAgaWYgKGlzTmF0aXZlQmxvYihkYXRhKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gZGF0YTtcclxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcclxuICAgICAgICAgICAgYmxvYlR5cGUgPSBkYXRhLnR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICBpZiAoZWxpZGVDb3B5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaXplID0gdGhpcy5kYXRhXy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGlkZUNvcHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8gPSBkYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaXplXyA9IHNpemU7XHJcbiAgICAgICAgdGhpcy50eXBlXyA9IGJsb2JUeXBlO1xyXG4gICAgfVxyXG4gICAgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaXplXztcclxuICAgIH1cclxuICAgIHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZV87XHJcbiAgICB9XHJcbiAgICBzbGljZShzdGFydEJ5dGUsIGVuZEJ5dGUpIHtcclxuICAgICAgICBpZiAoaXNOYXRpdmVCbG9iKHRoaXMuZGF0YV8pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxCbG9iID0gdGhpcy5kYXRhXztcclxuICAgICAgICAgICAgY29uc3Qgc2xpY2VkID0gc2xpY2VCbG9iKHJlYWxCbG9iLCBzdGFydEJ5dGUsIGVuZEJ5dGUpO1xyXG4gICAgICAgICAgICBpZiAoc2xpY2VkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZic0Jsb2Ioc2xpY2VkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNsaWNlID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhXy5idWZmZXIsIHN0YXJ0Qnl0ZSwgZW5kQnl0ZSAtIHN0YXJ0Qnl0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmJzQmxvYihzbGljZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEJsb2IoLi4uYXJncykge1xyXG4gICAgICAgIGlmIChpc05hdGl2ZUJsb2JEZWZpbmVkKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgYmxvYmJ5ID0gYXJncy5tYXAoKHZhbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIEZic0Jsb2IpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLmRhdGFfO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmJzQmxvYihnZXRCbG9iJDEuYXBwbHkobnVsbCwgYmxvYmJ5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB1aW50OEFycmF5cyA9IGFyZ3MubWFwKCh2YWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1N0cmluZyh2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFGcm9tU3RyaW5nKFN0cmluZ0Zvcm1hdC5SQVcsIHZhbCkuZGF0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJsb2JzIGRvbid0IGV4aXN0LCBzbyB0aGlzIGhhcyB0byBiZSBhIFVpbnQ4QXJyYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5kYXRhXztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBmaW5hbExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHVpbnQ4QXJyYXlzLmZvckVhY2goKGFycmF5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmaW5hbExlbmd0aCArPSBhcnJheS5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbmV3IFVpbnQ4QXJyYXkoZmluYWxMZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICB1aW50OEFycmF5cy5mb3JFYWNoKChhcnJheSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlZFtpbmRleCsrXSA9IGFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGYnNCbG9iKG1lcmdlZCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdXBsb2FkRGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXztcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgT2JqZWN0IHJlc3VsdGluZyBmcm9tIHBhcnNpbmcgdGhlIGdpdmVuIEpTT04sIG9yIG51bGwgaWYgdGhlXHJcbiAqIGdpdmVuIHN0cmluZyBkb2VzIG5vdCByZXByZXNlbnQgYSBKU09OIG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGpzb25PYmplY3RPck51bGwocykge1xyXG4gICAgbGV0IG9iajtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgb2JqID0gSlNPTi5wYXJzZShzKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNOb25BcnJheU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnRhaW5zIGhlbHBlciBtZXRob2RzIGZvciBtYW5pcHVsYXRpbmcgcGF0aHMuXHJcbiAqL1xyXG4vKipcclxuICogQHJldHVybiBOdWxsIGlmIHRoZSBwYXRoIGlzIGFscmVhZHkgYXQgdGhlIHJvb3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJlbnQocGF0aCkge1xyXG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHBhdGgubGFzdEluZGV4T2YoJy8nKTtcclxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBuZXdQYXRoID0gcGF0aC5zbGljZSgwLCBpbmRleCk7XHJcbiAgICByZXR1cm4gbmV3UGF0aDtcclxufVxyXG5mdW5jdGlvbiBjaGlsZChwYXRoLCBjaGlsZFBhdGgpIHtcclxuICAgIGNvbnN0IGNhbm9uaWNhbENoaWxkUGF0aCA9IGNoaWxkUGF0aFxyXG4gICAgICAgIC5zcGxpdCgnLycpXHJcbiAgICAgICAgLmZpbHRlcihjb21wb25lbnQgPT4gY29tcG9uZW50Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgLmpvaW4oJy8nKTtcclxuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBjYW5vbmljYWxDaGlsZFBhdGg7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcGF0aCArICcvJyArIGNhbm9uaWNhbENoaWxkUGF0aDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbGFzdCBjb21wb25lbnQgb2YgYSBwYXRoLlxyXG4gKiAnL2Zvby9iYXInIC0+ICdiYXInXHJcbiAqICcvZm9vL2Jhci9iYXovJyAtPiAnYmF6LydcclxuICogJy9hJyAtPiAnYSdcclxuICovXHJcbmZ1bmN0aW9uIGxhc3RDb21wb25lbnQocGF0aCkge1xyXG4gICAgY29uc3QgaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCcvJywgcGF0aC5sZW5ndGggLSAyKTtcclxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKGluZGV4ICsgMSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gbm9YZm9ybV8obWV0YWRhdGEsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuY2xhc3MgTWFwcGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2ZXIsIGxvY2FsLCB3cml0YWJsZSwgeGZvcm0pIHtcclxuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcclxuICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWwgfHwgc2VydmVyO1xyXG4gICAgICAgIHRoaXMud3JpdGFibGUgPSAhIXdyaXRhYmxlO1xyXG4gICAgICAgIHRoaXMueGZvcm0gPSB4Zm9ybSB8fCBub1hmb3JtXztcclxuICAgIH1cclxufVxyXG5sZXQgbWFwcGluZ3NfID0gbnVsbDtcclxuZnVuY3Rpb24geGZvcm1QYXRoKGZ1bGxQYXRoKSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGZ1bGxQYXRoKSB8fCBmdWxsUGF0aC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bGxQYXRoO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGxhc3RDb21wb25lbnQoZnVsbFBhdGgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldE1hcHBpbmdzKCkge1xyXG4gICAgaWYgKG1hcHBpbmdzXykge1xyXG4gICAgICAgIHJldHVybiBtYXBwaW5nc187XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXBwaW5ncyA9IFtdO1xyXG4gICAgbWFwcGluZ3MucHVzaChuZXcgTWFwcGluZygnYnVja2V0JykpO1xyXG4gICAgbWFwcGluZ3MucHVzaChuZXcgTWFwcGluZygnZ2VuZXJhdGlvbicpKTtcclxuICAgIG1hcHBpbmdzLnB1c2gobmV3IE1hcHBpbmcoJ21ldGFnZW5lcmF0aW9uJykpO1xyXG4gICAgbWFwcGluZ3MucHVzaChuZXcgTWFwcGluZygnbmFtZScsICdmdWxsUGF0aCcsIHRydWUpKTtcclxuICAgIGZ1bmN0aW9uIG1hcHBpbmdzWGZvcm1QYXRoKF9tZXRhZGF0YSwgZnVsbFBhdGgpIHtcclxuICAgICAgICByZXR1cm4geGZvcm1QYXRoKGZ1bGxQYXRoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5hbWVNYXBwaW5nID0gbmV3IE1hcHBpbmcoJ25hbWUnKTtcclxuICAgIG5hbWVNYXBwaW5nLnhmb3JtID0gbWFwcGluZ3NYZm9ybVBhdGg7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5hbWVNYXBwaW5nKTtcclxuICAgIC8qKlxyXG4gICAgICogQ29lcmNlcyB0aGUgc2Vjb25kIHBhcmFtIHRvIGEgbnVtYmVyLCBpZiBpdCBpcyBkZWZpbmVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB4Zm9ybVNpemUoX21ldGFkYXRhLCBzaXplKSB7XHJcbiAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2l6ZU1hcHBpbmcgPSBuZXcgTWFwcGluZygnc2l6ZScpO1xyXG4gICAgc2l6ZU1hcHBpbmcueGZvcm0gPSB4Zm9ybVNpemU7XHJcbiAgICBtYXBwaW5ncy5wdXNoKHNpemVNYXBwaW5nKTtcclxuICAgIG1hcHBpbmdzLnB1c2gobmV3IE1hcHBpbmcoJ3RpbWVDcmVhdGVkJykpO1xyXG4gICAgbWFwcGluZ3MucHVzaChuZXcgTWFwcGluZygndXBkYXRlZCcpKTtcclxuICAgIG1hcHBpbmdzLnB1c2gobmV3IE1hcHBpbmcoJ21kNUhhc2gnLCBudWxsLCB0cnVlKSk7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5ldyBNYXBwaW5nKCdjYWNoZUNvbnRyb2wnLCBudWxsLCB0cnVlKSk7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5ldyBNYXBwaW5nKCdjb250ZW50RGlzcG9zaXRpb24nLCBudWxsLCB0cnVlKSk7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5ldyBNYXBwaW5nKCdjb250ZW50RW5jb2RpbmcnLCBudWxsLCB0cnVlKSk7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5ldyBNYXBwaW5nKCdjb250ZW50TGFuZ3VhZ2UnLCBudWxsLCB0cnVlKSk7XHJcbiAgICBtYXBwaW5ncy5wdXNoKG5ldyBNYXBwaW5nKCdjb250ZW50VHlwZScsIG51bGwsIHRydWUpKTtcclxuICAgIG1hcHBpbmdzLnB1c2gobmV3IE1hcHBpbmcoJ21ldGFkYXRhJywgJ2N1c3RvbU1ldGFkYXRhJywgdHJ1ZSkpO1xyXG4gICAgbWFwcGluZ3NfID0gbWFwcGluZ3M7XHJcbiAgICByZXR1cm4gbWFwcGluZ3NfO1xyXG59XHJcbmZ1bmN0aW9uIGFkZFJlZihtZXRhZGF0YSwgc2VydmljZSkge1xyXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVSZWYoKSB7XHJcbiAgICAgICAgY29uc3QgYnVja2V0ID0gbWV0YWRhdGFbJ2J1Y2tldCddO1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSBtZXRhZGF0YVsnZnVsbFBhdGgnXTtcclxuICAgICAgICBjb25zdCBsb2MgPSBuZXcgTG9jYXRpb24oYnVja2V0LCBwYXRoKTtcclxuICAgICAgICByZXR1cm4gc2VydmljZS5fbWFrZVN0b3JhZ2VSZWZlcmVuY2UobG9jKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZXRhZGF0YSwgJ3JlZicsIHsgZ2V0OiBnZW5lcmF0ZVJlZiB9KTtcclxufVxyXG5mdW5jdGlvbiBmcm9tUmVzb3VyY2Uoc2VydmljZSwgcmVzb3VyY2UsIG1hcHBpbmdzKSB7XHJcbiAgICBjb25zdCBtZXRhZGF0YSA9IHt9O1xyXG4gICAgbWV0YWRhdGFbJ3R5cGUnXSA9ICdmaWxlJztcclxuICAgIGNvbnN0IGxlbiA9IG1hcHBpbmdzLmxlbmd0aDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBjb25zdCBtYXBwaW5nID0gbWFwcGluZ3NbaV07XHJcbiAgICAgICAgbWV0YWRhdGFbbWFwcGluZy5sb2NhbF0gPSBtYXBwaW5nLnhmb3JtKG1ldGFkYXRhLCByZXNvdXJjZVttYXBwaW5nLnNlcnZlcl0pO1xyXG4gICAgfVxyXG4gICAgYWRkUmVmKG1ldGFkYXRhLCBzZXJ2aWNlKTtcclxuICAgIHJldHVybiBtZXRhZGF0YTtcclxufVxyXG5mdW5jdGlvbiBmcm9tUmVzb3VyY2VTdHJpbmcoc2VydmljZSwgcmVzb3VyY2VTdHJpbmcsIG1hcHBpbmdzKSB7XHJcbiAgICBjb25zdCBvYmogPSBqc29uT2JqZWN0T3JOdWxsKHJlc291cmNlU3RyaW5nKTtcclxuICAgIGlmIChvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc291cmNlID0gb2JqO1xyXG4gICAgcmV0dXJuIGZyb21SZXNvdXJjZShzZXJ2aWNlLCByZXNvdXJjZSwgbWFwcGluZ3MpO1xyXG59XHJcbmZ1bmN0aW9uIGRvd25sb2FkVXJsRnJvbVJlc291cmNlU3RyaW5nKG1ldGFkYXRhLCByZXNvdXJjZVN0cmluZywgaG9zdCwgcHJvdG9jb2wpIHtcclxuICAgIGNvbnN0IG9iaiA9IGpzb25PYmplY3RPck51bGwocmVzb3VyY2VTdHJpbmcpO1xyXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc1N0cmluZyhvYmpbJ2Rvd25sb2FkVG9rZW5zJ10pKSB7XHJcbiAgICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIG9iamVjdHMgYXJlIHVwbG9hZGVkIHRocm91Z2ggR0NTIGFuZCByZXRyaWV2ZWRcclxuICAgICAgICAvLyB0aHJvdWdoIGxpc3QsIHNvIHdlIGRvbid0IHdhbnQgdG8gdGhyb3cgYW4gRXJyb3IuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0b2tlbnMgPSBvYmpbJ2Rvd25sb2FkVG9rZW5zJ107XHJcbiAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50O1xyXG4gICAgY29uc3QgdG9rZW5zTGlzdCA9IHRva2Vucy5zcGxpdCgnLCcpO1xyXG4gICAgY29uc3QgdXJscyA9IHRva2Vuc0xpc3QubWFwKCh0b2tlbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJ1Y2tldCA9IG1ldGFkYXRhWydidWNrZXQnXTtcclxuICAgICAgICBjb25zdCBwYXRoID0gbWV0YWRhdGFbJ2Z1bGxQYXRoJ107XHJcbiAgICAgICAgY29uc3QgdXJsUGFydCA9ICcvYi8nICsgZW5jb2RlKGJ1Y2tldCkgKyAnL28vJyArIGVuY29kZShwYXRoKTtcclxuICAgICAgICBjb25zdCBiYXNlID0gbWFrZVVybCh1cmxQYXJ0LCBob3N0LCBwcm90b2NvbCk7XHJcbiAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBtYWtlUXVlcnlTdHJpbmcoe1xyXG4gICAgICAgICAgICBhbHQ6ICdtZWRpYScsXHJcbiAgICAgICAgICAgIHRva2VuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBxdWVyeVN0cmluZztcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHVybHNbMF07XHJcbn1cclxuZnVuY3Rpb24gdG9SZXNvdXJjZVN0cmluZyhtZXRhZGF0YSwgbWFwcGluZ3MpIHtcclxuICAgIGNvbnN0IHJlc291cmNlID0ge307XHJcbiAgICBjb25zdCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xyXG4gICAgICAgIGlmIChtYXBwaW5nLndyaXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlW21hcHBpbmcuc2VydmVyXSA9IG1ldGFkYXRhW21hcHBpbmcubG9jYWxdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXNvdXJjZSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgUFJFRklYRVNfS0VZID0gJ3ByZWZpeGVzJztcclxuY29uc3QgSVRFTVNfS0VZID0gJ2l0ZW1zJztcclxuZnVuY3Rpb24gZnJvbUJhY2tlbmRSZXNwb25zZShzZXJ2aWNlLCBidWNrZXQsIHJlc291cmNlKSB7XHJcbiAgICBjb25zdCBsaXN0UmVzdWx0ID0ge1xyXG4gICAgICAgIHByZWZpeGVzOiBbXSxcclxuICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgbmV4dFBhZ2VUb2tlbjogcmVzb3VyY2VbJ25leHRQYWdlVG9rZW4nXVxyXG4gICAgfTtcclxuICAgIGlmIChyZXNvdXJjZVtQUkVGSVhFU19LRVldKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHJlc291cmNlW1BSRUZJWEVTX0tFWV0pIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aFdpdGhvdXRUcmFpbGluZ1NsYXNoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpO1xyXG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2UgPSBzZXJ2aWNlLl9tYWtlU3RvcmFnZVJlZmVyZW5jZShuZXcgTG9jYXRpb24oYnVja2V0LCBwYXRoV2l0aG91dFRyYWlsaW5nU2xhc2gpKTtcclxuICAgICAgICAgICAgbGlzdFJlc3VsdC5wcmVmaXhlcy5wdXNoKHJlZmVyZW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHJlc291cmNlW0lURU1TX0tFWV0pIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcmVzb3VyY2VbSVRFTVNfS0VZXSkge1xyXG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2UgPSBzZXJ2aWNlLl9tYWtlU3RvcmFnZVJlZmVyZW5jZShuZXcgTG9jYXRpb24oYnVja2V0LCBpdGVtWyduYW1lJ10pKTtcclxuICAgICAgICAgICAgbGlzdFJlc3VsdC5pdGVtcy5wdXNoKHJlZmVyZW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpc3RSZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gZnJvbVJlc3BvbnNlU3RyaW5nKHNlcnZpY2UsIGJ1Y2tldCwgcmVzb3VyY2VTdHJpbmcpIHtcclxuICAgIGNvbnN0IG9iaiA9IGpzb25PYmplY3RPck51bGwocmVzb3VyY2VTdHJpbmcpO1xyXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzb3VyY2UgPSBvYmo7XHJcbiAgICByZXR1cm4gZnJvbUJhY2tlbmRSZXNwb25zZShzZXJ2aWNlLCBidWNrZXQsIHJlc291cmNlKTtcclxufVxuXG4vKipcclxuICogQ29udGFpbnMgYSBmdWxseSBzcGVjaWZpZWQgcmVxdWVzdC5cclxuICpcclxuICogQHBhcmFtIEkgLSB0aGUgdHlwZSBvZiB0aGUgYmFja2VuZCdzIG5ldHdvcmsgcmVzcG9uc2UuXHJcbiAqIEBwYXJhbSBPIC0gdGhlIG91dHB1dCByZXNwb25zZSB0eXBlIHVzZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIFNESy5cclxuICovXHJcbmNsYXNzIFJlcXVlc3RJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKHVybCwgbWV0aG9kLCBcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgd2l0aCB3aGljaCB0byByZXNvbHZlIHRoZSByZXF1ZXN0J3MgcHJvbWlzZS4gT25seSBjYWxsZWRcclxuICAgICAqIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwuIFRocm93IGZyb20gdGhpcyBmdW5jdGlvbiB0byByZWplY3QgdGhlXHJcbiAgICAgKiByZXR1cm5lZCBSZXF1ZXN0J3MgcHJvbWlzZSB3aXRoIHRoZSB0aHJvd24gZXJyb3IuXHJcbiAgICAgKiBOb3RlOiBUaGUgWGhySW8gcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gbWF5IGJlIHJldXNlZCBhZnRlciB0aGlzIGNhbGxiYWNrXHJcbiAgICAgKiByZXR1cm5zLiBEbyBub3Qga2VlcCBhIHJlZmVyZW5jZSB0byBpdCBpbiBhbnkgd2F5LlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVyLCB0aW1lb3V0KSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xyXG4gICAgICAgIHRoaXMudXJsUGFyYW1zID0ge307XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGJ5dGVzIHVwbG9hZGVkIGFuZCB0b3RhbCBzaXplICgtMSBpZiBub3RcclxuICAgICAgICAgKiBjb21wdXRhYmxlKSBvZiB0aGUgcmVxdWVzdCBib2R5IChpLmUuIHVzZWQgdG8gcmVwb3J0IHVwbG9hZCBwcm9ncmVzcykuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0NhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1Y2Nlc3NDb2RlcyA9IFsyMDBdO1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbFJldHJ5Q29kZXMgPSBbXTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhyb3dzIHRoZSBVTktOT1dOIFN0b3JhZ2VFcnJvciBpZiBjbmRuIGlzIGZhbHNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaGFuZGxlckNoZWNrKGNuZG4pIHtcclxuICAgIGlmICghY25kbikge1xyXG4gICAgICAgIHRocm93IHVua25vd24oKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBtZXRhZGF0YUhhbmRsZXIoc2VydmljZSwgbWFwcGluZ3MpIHtcclxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoeGhyLCB0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBmcm9tUmVzb3VyY2VTdHJpbmcoc2VydmljZSwgdGV4dCwgbWFwcGluZ3MpO1xyXG4gICAgICAgIGhhbmRsZXJDaGVjayhtZXRhZGF0YSAhPT0gbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhbmRsZXI7XHJcbn1cclxuZnVuY3Rpb24gbGlzdEhhbmRsZXIoc2VydmljZSwgYnVja2V0KSB7XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyKHhociwgdGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RSZXN1bHQgPSBmcm9tUmVzcG9uc2VTdHJpbmcoc2VydmljZSwgYnVja2V0LCB0ZXh0KTtcclxuICAgICAgICBoYW5kbGVyQ2hlY2sobGlzdFJlc3VsdCAhPT0gbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RSZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcjtcclxufVxyXG5mdW5jdGlvbiBkb3dubG9hZFVybEhhbmRsZXIoc2VydmljZSwgbWFwcGluZ3MpIHtcclxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoeGhyLCB0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBmcm9tUmVzb3VyY2VTdHJpbmcoc2VydmljZSwgdGV4dCwgbWFwcGluZ3MpO1xyXG4gICAgICAgIGhhbmRsZXJDaGVjayhtZXRhZGF0YSAhPT0gbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkVXJsRnJvbVJlc291cmNlU3RyaW5nKG1ldGFkYXRhLCB0ZXh0LCBzZXJ2aWNlLmhvc3QsIHNlcnZpY2UuX3Byb3RvY29sKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoYW5kbGVyO1xyXG59XHJcbmZ1bmN0aW9uIHNoYXJlZEVycm9ySGFuZGxlcihsb2NhdGlvbikge1xyXG4gICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKHhociwgZXJyKSB7XHJcbiAgICAgICAgbGV0IG5ld0VycjtcclxuICAgICAgICBpZiAoeGhyLmdldFN0YXR1cygpID09PSA0MDEpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAvLyBUaGlzIGV4YWN0IG1lc3NhZ2Ugc3RyaW5nIGlzIHRoZSBvbmx5IGNvbnNpc3RlbnQgcGFydCBvZiB0aGVcclxuICAgICAgICAgICAgLy8gc2VydmVyJ3MgZXJyb3IgcmVzcG9uc2UgdGhhdCBpZGVudGlmaWVzIGl0IGFzIGFuIEFwcCBDaGVjayBlcnJvci5cclxuICAgICAgICAgICAgeGhyLmdldEVycm9yVGV4dCgpLmluY2x1ZGVzKCdGaXJlYmFzZSBBcHAgQ2hlY2sgdG9rZW4gaXMgaW52YWxpZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdFcnIgPSB1bmF1dGhvcml6ZWRBcHAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld0VyciA9IHVuYXV0aGVudGljYXRlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoeGhyLmdldFN0YXR1cygpID09PSA0MDIpIHtcclxuICAgICAgICAgICAgICAgIG5ld0VyciA9IHF1b3RhRXhjZWVkZWQobG9jYXRpb24uYnVja2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuZ2V0U3RhdHVzKCkgPT09IDQwMykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VyciA9IHVuYXV0aG9yaXplZChsb2NhdGlvbi5wYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VyciA9IGVycjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdFcnIuc3RhdHVzID0geGhyLmdldFN0YXR1cygpO1xyXG4gICAgICAgIG5ld0Vyci5zZXJ2ZXJSZXNwb25zZSA9IGVyci5zZXJ2ZXJSZXNwb25zZTtcclxuICAgICAgICByZXR1cm4gbmV3RXJyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVycm9ySGFuZGxlcjtcclxufVxyXG5mdW5jdGlvbiBvYmplY3RFcnJvckhhbmRsZXIobG9jYXRpb24pIHtcclxuICAgIGNvbnN0IHNoYXJlZCA9IHNoYXJlZEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIoeGhyLCBlcnIpIHtcclxuICAgICAgICBsZXQgbmV3RXJyID0gc2hhcmVkKHhociwgZXJyKTtcclxuICAgICAgICBpZiAoeGhyLmdldFN0YXR1cygpID09PSA0MDQpIHtcclxuICAgICAgICAgICAgbmV3RXJyID0gb2JqZWN0Tm90Rm91bmQobG9jYXRpb24ucGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld0Vyci5zZXJ2ZXJSZXNwb25zZSA9IGVyci5zZXJ2ZXJSZXNwb25zZTtcclxuICAgICAgICByZXR1cm4gbmV3RXJyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVycm9ySGFuZGxlcjtcclxufVxyXG5mdW5jdGlvbiBnZXRNZXRhZGF0YSQyKHNlcnZpY2UsIGxvY2F0aW9uLCBtYXBwaW5ncykge1xyXG4gICAgY29uc3QgdXJsUGFydCA9IGxvY2F0aW9uLmZ1bGxTZXJ2ZXJVcmwoKTtcclxuICAgIGNvbnN0IHVybCA9IG1ha2VVcmwodXJsUGFydCwgc2VydmljZS5ob3N0LCBzZXJ2aWNlLl9wcm90b2NvbCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXJ2aWNlLm1heE9wZXJhdGlvblJldHJ5VGltZTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBtZXRhZGF0YUhhbmRsZXIoc2VydmljZSwgbWFwcGluZ3MpLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciA9IG9iamVjdEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICByZXR1cm4gcmVxdWVzdEluZm87XHJcbn1cclxuZnVuY3Rpb24gbGlzdCQyKHNlcnZpY2UsIGxvY2F0aW9uLCBkZWxpbWl0ZXIsIHBhZ2VUb2tlbiwgbWF4UmVzdWx0cykge1xyXG4gICAgY29uc3QgdXJsUGFyYW1zID0ge307XHJcbiAgICBpZiAobG9jYXRpb24uaXNSb290KSB7XHJcbiAgICAgICAgdXJsUGFyYW1zWydwcmVmaXgnXSA9ICcnO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdXJsUGFyYW1zWydwcmVmaXgnXSA9IGxvY2F0aW9uLnBhdGggKyAnLyc7XHJcbiAgICB9XHJcbiAgICBpZiAoZGVsaW1pdGVyICYmIGRlbGltaXRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdXJsUGFyYW1zWydkZWxpbWl0ZXInXSA9IGRlbGltaXRlcjtcclxuICAgIH1cclxuICAgIGlmIChwYWdlVG9rZW4pIHtcclxuICAgICAgICB1cmxQYXJhbXNbJ3BhZ2VUb2tlbiddID0gcGFnZVRva2VuO1xyXG4gICAgfVxyXG4gICAgaWYgKG1heFJlc3VsdHMpIHtcclxuICAgICAgICB1cmxQYXJhbXNbJ21heFJlc3VsdHMnXSA9IG1heFJlc3VsdHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1cmxQYXJ0ID0gbG9jYXRpb24uYnVja2V0T25seVNlcnZlclVybCgpO1xyXG4gICAgY29uc3QgdXJsID0gbWFrZVVybCh1cmxQYXJ0LCBzZXJ2aWNlLmhvc3QsIHNlcnZpY2UuX3Byb3RvY29sKTtcclxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xyXG4gICAgY29uc3QgdGltZW91dCA9IHNlcnZpY2UubWF4T3BlcmF0aW9uUmV0cnlUaW1lO1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSBuZXcgUmVxdWVzdEluZm8odXJsLCBtZXRob2QsIGxpc3RIYW5kbGVyKHNlcnZpY2UsIGxvY2F0aW9uLmJ1Y2tldCksIHRpbWVvdXQpO1xyXG4gICAgcmVxdWVzdEluZm8udXJsUGFyYW1zID0gdXJsUGFyYW1zO1xyXG4gICAgcmVxdWVzdEluZm8uZXJyb3JIYW5kbGVyID0gc2hhcmVkRXJyb3JIYW5kbGVyKGxvY2F0aW9uKTtcclxuICAgIHJldHVybiByZXF1ZXN0SW5mbztcclxufVxyXG5mdW5jdGlvbiBnZXRCeXRlcyQxKHNlcnZpY2UsIGxvY2F0aW9uLCBtYXhEb3dubG9hZFNpemVCeXRlcykge1xyXG4gICAgY29uc3QgdXJsUGFydCA9IGxvY2F0aW9uLmZ1bGxTZXJ2ZXJVcmwoKTtcclxuICAgIGNvbnN0IHVybCA9IG1ha2VVcmwodXJsUGFydCwgc2VydmljZS5ob3N0LCBzZXJ2aWNlLl9wcm90b2NvbCkgKyAnP2FsdD1tZWRpYSc7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXJ2aWNlLm1heE9wZXJhdGlvblJldHJ5VGltZTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCAoXywgZGF0YSkgPT4gZGF0YSwgdGltZW91dCk7XHJcbiAgICByZXF1ZXN0SW5mby5lcnJvckhhbmRsZXIgPSBvYmplY3RFcnJvckhhbmRsZXIobG9jYXRpb24pO1xyXG4gICAgaWYgKG1heERvd25sb2FkU2l6ZUJ5dGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXF1ZXN0SW5mby5oZWFkZXJzWydSYW5nZSddID0gYGJ5dGVzPTAtJHttYXhEb3dubG9hZFNpemVCeXRlc31gO1xyXG4gICAgICAgIHJlcXVlc3RJbmZvLnN1Y2Nlc3NDb2RlcyA9IFsyMDAgLyogT0sgKi8sIDIwNiAvKiBQYXJ0aWFsIENvbnRlbnQgKi9dO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcXVlc3RJbmZvO1xyXG59XHJcbmZ1bmN0aW9uIGdldERvd25sb2FkVXJsKHNlcnZpY2UsIGxvY2F0aW9uLCBtYXBwaW5ncykge1xyXG4gICAgY29uc3QgdXJsUGFydCA9IGxvY2F0aW9uLmZ1bGxTZXJ2ZXJVcmwoKTtcclxuICAgIGNvbnN0IHVybCA9IG1ha2VVcmwodXJsUGFydCwgc2VydmljZS5ob3N0LCBzZXJ2aWNlLl9wcm90b2NvbCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXJ2aWNlLm1heE9wZXJhdGlvblJldHJ5VGltZTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBkb3dubG9hZFVybEhhbmRsZXIoc2VydmljZSwgbWFwcGluZ3MpLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciA9IG9iamVjdEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICByZXR1cm4gcmVxdWVzdEluZm87XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlTWV0YWRhdGEkMihzZXJ2aWNlLCBsb2NhdGlvbiwgbWV0YWRhdGEsIG1hcHBpbmdzKSB7XHJcbiAgICBjb25zdCB1cmxQYXJ0ID0gbG9jYXRpb24uZnVsbFNlcnZlclVybCgpO1xyXG4gICAgY29uc3QgdXJsID0gbWFrZVVybCh1cmxQYXJ0LCBzZXJ2aWNlLmhvc3QsIHNlcnZpY2UuX3Byb3RvY29sKTtcclxuICAgIGNvbnN0IG1ldGhvZCA9ICdQQVRDSCc7XHJcbiAgICBjb25zdCBib2R5ID0gdG9SZXNvdXJjZVN0cmluZyhtZXRhZGF0YSwgbWFwcGluZ3MpO1xyXG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyB9O1xyXG4gICAgY29uc3QgdGltZW91dCA9IHNlcnZpY2UubWF4T3BlcmF0aW9uUmV0cnlUaW1lO1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSBuZXcgUmVxdWVzdEluZm8odXJsLCBtZXRob2QsIG1ldGFkYXRhSGFuZGxlcihzZXJ2aWNlLCBtYXBwaW5ncyksIHRpbWVvdXQpO1xyXG4gICAgcmVxdWVzdEluZm8uaGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICByZXF1ZXN0SW5mby5ib2R5ID0gYm9keTtcclxuICAgIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciA9IG9iamVjdEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICByZXR1cm4gcmVxdWVzdEluZm87XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlT2JqZWN0JDIoc2VydmljZSwgbG9jYXRpb24pIHtcclxuICAgIGNvbnN0IHVybFBhcnQgPSBsb2NhdGlvbi5mdWxsU2VydmVyVXJsKCk7XHJcbiAgICBjb25zdCB1cmwgPSBtYWtlVXJsKHVybFBhcnQsIHNlcnZpY2UuaG9zdCwgc2VydmljZS5fcHJvdG9jb2wpO1xyXG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gc2VydmljZS5tYXhPcGVyYXRpb25SZXRyeVRpbWU7XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyKF94aHIsIF90ZXh0KSB7IH1cclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBoYW5kbGVyLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLnN1Y2Nlc3NDb2RlcyA9IFsyMDAsIDIwNF07XHJcbiAgICByZXF1ZXN0SW5mby5lcnJvckhhbmRsZXIgPSBvYmplY3RFcnJvckhhbmRsZXIobG9jYXRpb24pO1xyXG4gICAgcmV0dXJuIHJlcXVlc3RJbmZvO1xyXG59XHJcbmZ1bmN0aW9uIGRldGVybWluZUNvbnRlbnRUeXBlXyhtZXRhZGF0YSwgYmxvYikge1xyXG4gICAgcmV0dXJuICgobWV0YWRhdGEgJiYgbWV0YWRhdGFbJ2NvbnRlbnRUeXBlJ10pIHx8XHJcbiAgICAgICAgKGJsb2IgJiYgYmxvYi50eXBlKCkpIHx8XHJcbiAgICAgICAgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xyXG59XHJcbmZ1bmN0aW9uIG1ldGFkYXRhRm9yVXBsb2FkXyhsb2NhdGlvbiwgYmxvYiwgbWV0YWRhdGEpIHtcclxuICAgIGNvbnN0IG1ldGFkYXRhQ2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBtZXRhZGF0YSk7XHJcbiAgICBtZXRhZGF0YUNsb25lWydmdWxsUGF0aCddID0gbG9jYXRpb24ucGF0aDtcclxuICAgIG1ldGFkYXRhQ2xvbmVbJ3NpemUnXSA9IGJsb2Iuc2l6ZSgpO1xyXG4gICAgaWYgKCFtZXRhZGF0YUNsb25lWydjb250ZW50VHlwZSddKSB7XHJcbiAgICAgICAgbWV0YWRhdGFDbG9uZVsnY29udGVudFR5cGUnXSA9IGRldGVybWluZUNvbnRlbnRUeXBlXyhudWxsLCBibG9iKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtZXRhZGF0YUNsb25lO1xyXG59XHJcbi8qKlxyXG4gKiBQcmVwYXJlIFJlcXVlc3RJbmZvIGZvciB1cGxvYWRzIGFzIENvbnRlbnQtVHlwZTogbXVsdGlwYXJ0LlxyXG4gKi9cclxuZnVuY3Rpb24gbXVsdGlwYXJ0VXBsb2FkKHNlcnZpY2UsIGxvY2F0aW9uLCBtYXBwaW5ncywgYmxvYiwgbWV0YWRhdGEpIHtcclxuICAgIGNvbnN0IHVybFBhcnQgPSBsb2NhdGlvbi5idWNrZXRPbmx5U2VydmVyVXJsKCk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0ge1xyXG4gICAgICAgICdYLUdvb2ctVXBsb2FkLVByb3RvY29sJzogJ211bHRpcGFydCdcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBnZW5Cb3VuZGFyeSgpIHtcclxuICAgICAgICBsZXQgc3RyID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcclxuICAgICAgICAgICAgc3RyID0gc3RyICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnNsaWNlKDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYm91bmRhcnkgPSBnZW5Cb3VuZGFyeSgpO1xyXG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnbXVsdGlwYXJ0L3JlbGF0ZWQ7IGJvdW5kYXJ5PScgKyBib3VuZGFyeTtcclxuICAgIGNvbnN0IG1ldGFkYXRhXyA9IG1ldGFkYXRhRm9yVXBsb2FkXyhsb2NhdGlvbiwgYmxvYiwgbWV0YWRhdGEpO1xyXG4gICAgY29uc3QgbWV0YWRhdGFTdHJpbmcgPSB0b1Jlc291cmNlU3RyaW5nKG1ldGFkYXRhXywgbWFwcGluZ3MpO1xyXG4gICAgY29uc3QgcHJlQmxvYlBhcnQgPSAnLS0nICtcclxuICAgICAgICBib3VuZGFyeSArXHJcbiAgICAgICAgJ1xcclxcbicgK1xyXG4gICAgICAgICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcXHJcXG5cXHJcXG4nICtcclxuICAgICAgICBtZXRhZGF0YVN0cmluZyArXHJcbiAgICAgICAgJ1xcclxcbi0tJyArXHJcbiAgICAgICAgYm91bmRhcnkgK1xyXG4gICAgICAgICdcXHJcXG4nICtcclxuICAgICAgICAnQ29udGVudC1UeXBlOiAnICtcclxuICAgICAgICBtZXRhZGF0YV9bJ2NvbnRlbnRUeXBlJ10gK1xyXG4gICAgICAgICdcXHJcXG5cXHJcXG4nO1xyXG4gICAgY29uc3QgcG9zdEJsb2JQYXJ0ID0gJ1xcclxcbi0tJyArIGJvdW5kYXJ5ICsgJy0tJztcclxuICAgIGNvbnN0IGJvZHkgPSBGYnNCbG9iLmdldEJsb2IocHJlQmxvYlBhcnQsIGJsb2IsIHBvc3RCbG9iUGFydCk7XHJcbiAgICBpZiAoYm9keSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRocm93IGNhbm5vdFNsaWNlQmxvYigpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdXJsUGFyYW1zID0geyBuYW1lOiBtZXRhZGF0YV9bJ2Z1bGxQYXRoJ10gfTtcclxuICAgIGNvbnN0IHVybCA9IG1ha2VVcmwodXJsUGFydCwgc2VydmljZS5ob3N0LCBzZXJ2aWNlLl9wcm90b2NvbCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gc2VydmljZS5tYXhVcGxvYWRSZXRyeVRpbWU7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IG5ldyBSZXF1ZXN0SW5mbyh1cmwsIG1ldGhvZCwgbWV0YWRhdGFIYW5kbGVyKHNlcnZpY2UsIG1hcHBpbmdzKSwgdGltZW91dCk7XHJcbiAgICByZXF1ZXN0SW5mby51cmxQYXJhbXMgPSB1cmxQYXJhbXM7XHJcbiAgICByZXF1ZXN0SW5mby5oZWFkZXJzID0gaGVhZGVycztcclxuICAgIHJlcXVlc3RJbmZvLmJvZHkgPSBib2R5LnVwbG9hZERhdGEoKTtcclxuICAgIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciA9IHNoYXJlZEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICByZXR1cm4gcmVxdWVzdEluZm87XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBjdXJyZW50IFRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBoYXZlIGJlZW4gdXBsb2FkZWQgc28gZmFyLlxyXG4gKiBAcGFyYW0gdG90YWwgVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyBpbiB0aGUgdXBsb2FkLlxyXG4gKiBAcGFyYW0gb3B0X2ZpbmFsaXplZCBUcnVlIGlmIHRoZSBzZXJ2ZXIgaGFzIGZpbmlzaGVkIHRoZSB1cGxvYWQuXHJcbiAqIEBwYXJhbSBvcHRfbWV0YWRhdGEgVGhlIHVwbG9hZCBtZXRhZGF0YSwgc2hvdWxkXHJcbiAqICAgICBvbmx5IGJlIHBhc3NlZCBpZiBvcHRfZmluYWxpemVkIGlzIHRydWUuXHJcbiAqL1xyXG5jbGFzcyBSZXN1bWFibGVVcGxvYWRTdGF0dXMge1xyXG4gICAgY29uc3RydWN0b3IoY3VycmVudCwgdG90YWwsIGZpbmFsaXplZCwgbWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBjdXJyZW50O1xyXG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9ICEhZmluYWxpemVkO1xyXG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YSB8fCBudWxsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoZWNrUmVzdW1lSGVhZGVyXyh4aHIsIGFsbG93ZWQpIHtcclxuICAgIGxldCBzdGF0dXMgPSBudWxsO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBzdGF0dXMgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtR29vZy1VcGxvYWQtU3RhdHVzJyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGhhbmRsZXJDaGVjayhmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhbGxvd2VkU3RhdHVzID0gYWxsb3dlZCB8fCBbJ2FjdGl2ZSddO1xyXG4gICAgaGFuZGxlckNoZWNrKCEhc3RhdHVzICYmIGFsbG93ZWRTdGF0dXMuaW5kZXhPZihzdGF0dXMpICE9PSAtMSk7XHJcbiAgICByZXR1cm4gc3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc3VtYWJsZVVwbG9hZChzZXJ2aWNlLCBsb2NhdGlvbiwgbWFwcGluZ3MsIGJsb2IsIG1ldGFkYXRhKSB7XHJcbiAgICBjb25zdCB1cmxQYXJ0ID0gbG9jYXRpb24uYnVja2V0T25seVNlcnZlclVybCgpO1xyXG4gICAgY29uc3QgbWV0YWRhdGFGb3JVcGxvYWQgPSBtZXRhZGF0YUZvclVwbG9hZF8obG9jYXRpb24sIGJsb2IsIG1ldGFkYXRhKTtcclxuICAgIGNvbnN0IHVybFBhcmFtcyA9IHsgbmFtZTogbWV0YWRhdGFGb3JVcGxvYWRbJ2Z1bGxQYXRoJ10gfTtcclxuICAgIGNvbnN0IHVybCA9IG1ha2VVcmwodXJsUGFydCwgc2VydmljZS5ob3N0LCBzZXJ2aWNlLl9wcm90b2NvbCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XHJcbiAgICBjb25zdCBoZWFkZXJzID0ge1xyXG4gICAgICAgICdYLUdvb2ctVXBsb2FkLVByb3RvY29sJzogJ3Jlc3VtYWJsZScsXHJcbiAgICAgICAgJ1gtR29vZy1VcGxvYWQtQ29tbWFuZCc6ICdzdGFydCcsXHJcbiAgICAgICAgJ1gtR29vZy1VcGxvYWQtSGVhZGVyLUNvbnRlbnQtTGVuZ3RoJzogYCR7YmxvYi5zaXplKCl9YCxcclxuICAgICAgICAnWC1Hb29nLVVwbG9hZC1IZWFkZXItQ29udGVudC1UeXBlJzogbWV0YWRhdGFGb3JVcGxvYWRbJ2NvbnRlbnRUeXBlJ10sXHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04J1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGJvZHkgPSB0b1Jlc291cmNlU3RyaW5nKG1ldGFkYXRhRm9yVXBsb2FkLCBtYXBwaW5ncyk7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gc2VydmljZS5tYXhVcGxvYWRSZXRyeVRpbWU7XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyKHhocikge1xyXG4gICAgICAgIGNoZWNrUmVzdW1lSGVhZGVyXyh4aHIpO1xyXG4gICAgICAgIGxldCB1cmw7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdXJsID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLUdvb2ctVXBsb2FkLVVSTCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBoYW5kbGVyQ2hlY2soZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoYW5kbGVyQ2hlY2soaXNTdHJpbmcodXJsKSk7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBoYW5kbGVyLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLnVybFBhcmFtcyA9IHVybFBhcmFtcztcclxuICAgIHJlcXVlc3RJbmZvLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgcmVxdWVzdEluZm8uYm9keSA9IGJvZHk7XHJcbiAgICByZXF1ZXN0SW5mby5lcnJvckhhbmRsZXIgPSBzaGFyZWRFcnJvckhhbmRsZXIobG9jYXRpb24pO1xyXG4gICAgcmV0dXJuIHJlcXVlc3RJbmZvO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gdXJsIEZyb20gYSBjYWxsIHRvIGZicy5yZXF1ZXN0cy5jcmVhdGVSZXN1bWFibGVVcGxvYWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSZXN1bWFibGVVcGxvYWRTdGF0dXMoc2VydmljZSwgbG9jYXRpb24sIHVybCwgYmxvYikge1xyXG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ1gtR29vZy1VcGxvYWQtQ29tbWFuZCc6ICdxdWVyeScgfTtcclxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoeGhyKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gY2hlY2tSZXN1bWVIZWFkZXJfKHhociwgWydhY3RpdmUnLCAnZmluYWwnXSk7XHJcbiAgICAgICAgbGV0IHNpemVTdHJpbmcgPSBudWxsO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHNpemVTdHJpbmcgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtR29vZy1VcGxvYWQtU2l6ZS1SZWNlaXZlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBoYW5kbGVyQ2hlY2soZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXNpemVTdHJpbmcpIHtcclxuICAgICAgICAgICAgLy8gbnVsbCBvciBlbXB0eSBzdHJpbmdcclxuICAgICAgICAgICAgaGFuZGxlckNoZWNrKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IE51bWJlcihzaXplU3RyaW5nKTtcclxuICAgICAgICBoYW5kbGVyQ2hlY2soIWlzTmFOKHNpemUpKTtcclxuICAgICAgICByZXR1cm4gbmV3IFJlc3VtYWJsZVVwbG9hZFN0YXR1cyhzaXplLCBibG9iLnNpemUoKSwgc3RhdHVzID09PSAnZmluYWwnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXJ2aWNlLm1heFVwbG9hZFJldHJ5VGltZTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBoYW5kbGVyLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgcmVxdWVzdEluZm8uZXJyb3JIYW5kbGVyID0gc2hhcmVkRXJyb3JIYW5kbGVyKGxvY2F0aW9uKTtcclxuICAgIHJldHVybiByZXF1ZXN0SW5mbztcclxufVxyXG4vKipcclxuICogQW55IHVwbG9hZHMgdmlhIHRoZSByZXN1bWFibGUgdXBsb2FkIEFQSSBtdXN0IHRyYW5zZmVyIGEgbnVtYmVyIG9mIGJ5dGVzXHJcbiAqIHRoYXQgaXMgYSBtdWx0aXBsZSBvZiB0aGlzIG51bWJlci5cclxuICovXHJcbmNvbnN0IFJFU1VNQUJMRV9VUExPQURfQ0hVTktfU0laRSA9IDI1NiAqIDEwMjQ7XHJcbi8qKlxyXG4gKiBAcGFyYW0gdXJsIEZyb20gYSBjYWxsIHRvIGZicy5yZXF1ZXN0cy5jcmVhdGVSZXN1bWFibGVVcGxvYWQuXHJcbiAqIEBwYXJhbSBjaHVua1NpemUgTnVtYmVyIG9mIGJ5dGVzIHRvIHVwbG9hZC5cclxuICogQHBhcmFtIHN0YXR1cyBUaGUgcHJldmlvdXMgc3RhdHVzLlxyXG4gKiAgICAgSWYgbm90IHBhc3NlZCBvciBudWxsLCB3ZSBzdGFydCBmcm9tIHRoZSBiZWdpbm5pbmcuXHJcbiAqIEB0aHJvd3MgZmJzLkVycm9yIElmIHRoZSB1cGxvYWQgaXMgYWxyZWFkeSBjb21wbGV0ZSwgdGhlIHBhc3NlZCBpbiBzdGF0dXNcclxuICogICAgIGhhcyBhIGZpbmFsIHNpemUgaW5jb25zaXN0ZW50IHdpdGggdGhlIGJsb2IsIG9yIHRoZSBibG9iIGNhbm5vdCBiZSBzbGljZWRcclxuICogICAgIGZvciB1cGxvYWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb250aW51ZVJlc3VtYWJsZVVwbG9hZChsb2NhdGlvbiwgc2VydmljZSwgdXJsLCBibG9iLCBjaHVua1NpemUsIG1hcHBpbmdzLCBzdGF0dXMsIHByb2dyZXNzQ2FsbGJhY2spIHtcclxuICAgIC8vIFRPRE8oYW5keXNvdG8pOiBzdGFuZGFyZGl6ZSBvbiBpbnRlcm5hbCBhc3NlcnRzXHJcbiAgICAvLyBhc3NlcnQoIShvcHRfc3RhdHVzICYmIG9wdF9zdGF0dXMuZmluYWxpemVkKSk7XHJcbiAgICBjb25zdCBzdGF0dXNfID0gbmV3IFJlc3VtYWJsZVVwbG9hZFN0YXR1cygwLCAwKTtcclxuICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgICBzdGF0dXNfLmN1cnJlbnQgPSBzdGF0dXMuY3VycmVudDtcclxuICAgICAgICBzdGF0dXNfLnRvdGFsID0gc3RhdHVzLnRvdGFsO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3RhdHVzXy5jdXJyZW50ID0gMDtcclxuICAgICAgICBzdGF0dXNfLnRvdGFsID0gYmxvYi5zaXplKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmxvYi5zaXplKCkgIT09IHN0YXR1c18udG90YWwpIHtcclxuICAgICAgICB0aHJvdyBzZXJ2ZXJGaWxlV3JvbmdTaXplKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBieXRlc0xlZnQgPSBzdGF0dXNfLnRvdGFsIC0gc3RhdHVzXy5jdXJyZW50O1xyXG4gICAgbGV0IGJ5dGVzVG9VcGxvYWQgPSBieXRlc0xlZnQ7XHJcbiAgICBpZiAoY2h1bmtTaXplID4gMCkge1xyXG4gICAgICAgIGJ5dGVzVG9VcGxvYWQgPSBNYXRoLm1pbihieXRlc1RvVXBsb2FkLCBjaHVua1NpemUpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhcnRCeXRlID0gc3RhdHVzXy5jdXJyZW50O1xyXG4gICAgY29uc3QgZW5kQnl0ZSA9IHN0YXJ0Qnl0ZSArIGJ5dGVzVG9VcGxvYWQ7XHJcbiAgICBsZXQgdXBsb2FkQ29tbWFuZCA9ICcnO1xyXG4gICAgaWYgKGJ5dGVzVG9VcGxvYWQgPT09IDApIHtcclxuICAgICAgICB1cGxvYWRDb21tYW5kID0gJ2ZpbmFsaXplJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGJ5dGVzTGVmdCA9PT0gYnl0ZXNUb1VwbG9hZCkge1xyXG4gICAgICAgIHVwbG9hZENvbW1hbmQgPSAndXBsb2FkLCBmaW5hbGl6ZSc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB1cGxvYWRDb21tYW5kID0gJ3VwbG9hZCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoZWFkZXJzID0ge1xyXG4gICAgICAgICdYLUdvb2ctVXBsb2FkLUNvbW1hbmQnOiB1cGxvYWRDb21tYW5kLFxyXG4gICAgICAgICdYLUdvb2ctVXBsb2FkLU9mZnNldCc6IGAke3N0YXR1c18uY3VycmVudH1gXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYm9keSA9IGJsb2Iuc2xpY2Uoc3RhcnRCeXRlLCBlbmRCeXRlKTtcclxuICAgIGlmIChib2R5ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgY2Fubm90U2xpY2VCbG9iKCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyKHhociwgdGV4dCkge1xyXG4gICAgICAgIC8vIFRPRE8oYW5keXNvdG8pOiBWZXJpZnkgdGhlIE1ENSBvZiBlYWNoIHVwbG9hZGVkIHJhbmdlOlxyXG4gICAgICAgIC8vIHRoZSAneC1yYW5nZS1tZDUnIGhlYWRlciBjb21lcyBiYWNrIHdpdGggc3RhdHVzIGNvZGUgMzA4IHJlc3BvbnNlcy5cclxuICAgICAgICAvLyBXZSdsbCBvbmx5IGJlIGFibGUgdG8gYmFpbCBvdXQgdGhvdWdoLCBiZWNhdXNlIHlvdSBjYW4ndCByZS11cGxvYWQgYVxyXG4gICAgICAgIC8vIHJhbmdlIHRoYXQgeW91IHByZXZpb3VzbHkgdXBsb2FkZWQuXHJcbiAgICAgICAgY29uc3QgdXBsb2FkU3RhdHVzID0gY2hlY2tSZXN1bWVIZWFkZXJfKHhociwgWydhY3RpdmUnLCAnZmluYWwnXSk7XHJcbiAgICAgICAgY29uc3QgbmV3Q3VycmVudCA9IHN0YXR1c18uY3VycmVudCArIGJ5dGVzVG9VcGxvYWQ7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGJsb2Iuc2l6ZSgpO1xyXG4gICAgICAgIGxldCBtZXRhZGF0YTtcclxuICAgICAgICBpZiAodXBsb2FkU3RhdHVzID09PSAnZmluYWwnKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhID0gbWV0YWRhdGFIYW5kbGVyKHNlcnZpY2UsIG1hcHBpbmdzKSh4aHIsIHRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWV0YWRhdGEgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFJlc3VtYWJsZVVwbG9hZFN0YXR1cyhuZXdDdXJyZW50LCBzaXplLCB1cGxvYWRTdGF0dXMgPT09ICdmaW5hbCcsIG1ldGFkYXRhKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXJ2aWNlLm1heFVwbG9hZFJldHJ5VGltZTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbmV3IFJlcXVlc3RJbmZvKHVybCwgbWV0aG9kLCBoYW5kbGVyLCB0aW1lb3V0KTtcclxuICAgIHJlcXVlc3RJbmZvLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgcmVxdWVzdEluZm8uYm9keSA9IGJvZHkudXBsb2FkRGF0YSgpO1xyXG4gICAgcmVxdWVzdEluZm8ucHJvZ3Jlc3NDYWxsYmFjayA9IHByb2dyZXNzQ2FsbGJhY2sgfHwgbnVsbDtcclxuICAgIHJlcXVlc3RJbmZvLmVycm9ySGFuZGxlciA9IHNoYXJlZEVycm9ySGFuZGxlcihsb2NhdGlvbik7XHJcbiAgICByZXR1cm4gcmVxdWVzdEluZm87XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmVkIG9uIGEgdGFzay5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBUYXNrRXZlbnQgPSB7XHJcbiAgICAvKipcclxuICAgICAqIEZvciB0aGlzIGV2ZW50LFxyXG4gICAgICogPHVsPlxyXG4gICAgICogICA8bGk+VGhlIGBuZXh0YCBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgb24gcHJvZ3Jlc3MgdXBkYXRlcyBhbmQgd2hlbiB0aGVcclxuICAgICAqICAgICAgIHRhc2sgaXMgcGF1c2VkL3Jlc3VtZWQgd2l0aCBhbiBgVXBsb2FkVGFza1NuYXBzaG90YCBhcyB0aGUgZmlyc3RcclxuICAgICAqICAgICAgIGFyZ3VtZW50LjwvbGk+XHJcbiAgICAgKiAgIDxsaT5UaGUgYGVycm9yYCBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgaWYgdGhlIHVwbG9hZCBpcyBjYW5jZWxlZCBvciBmYWlsc1xyXG4gICAgICogICAgICAgZm9yIGFub3RoZXIgcmVhc29uLjwvbGk+XHJcbiAgICAgKiAgIDxsaT5UaGUgYGNvbXBsZXRlYCBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgaWYgdGhlIHVwbG9hZCBjb21wbGV0ZXNcclxuICAgICAqICAgICAgIHN1Y2Nlc3NmdWxseS48L2xpPlxyXG4gICAgICogPC91bD5cclxuICAgICAqL1xyXG4gICAgU1RBVEVfQ0hBTkdFRDogJ3N0YXRlX2NoYW5nZWQnXHJcbn07XHJcbi8vIHR5cGUga2V5cyA9IGtleW9mIFRhc2tTdGF0ZVxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIHJ1bm5pbmcgdXBsb2FkLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IFRhc2tTdGF0ZSA9IHtcclxuICAgIC8qKiBUaGUgdGFzayBpcyBjdXJyZW50bHkgdHJhbnNmZXJyaW5nIGRhdGEuICovXHJcbiAgICBSVU5OSU5HOiAncnVubmluZycsXHJcbiAgICAvKiogVGhlIHRhc2sgd2FzIHBhdXNlZCBieSB0aGUgdXNlci4gKi9cclxuICAgIFBBVVNFRDogJ3BhdXNlZCcsXHJcbiAgICAvKiogVGhlIHRhc2sgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gKi9cclxuICAgIFNVQ0NFU1M6ICdzdWNjZXNzJyxcclxuICAgIC8qKiBUaGUgdGFzayB3YXMgY2FuY2VsZWQuICovXHJcbiAgICBDQU5DRUxFRDogJ2NhbmNlbGVkJyxcclxuICAgIC8qKiBUaGUgdGFzayBmYWlsZWQgd2l0aCBhbiBlcnJvci4gKi9cclxuICAgIEVSUk9SOiAnZXJyb3InXHJcbn07XHJcbmZ1bmN0aW9uIHRhc2tTdGF0ZUZyb21JbnRlcm5hbFRhc2tTdGF0ZShzdGF0ZSkge1xyXG4gICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgIGNhc2UgXCJydW5uaW5nXCIgLyogUlVOTklORyAqLzpcclxuICAgICAgICBjYXNlIFwicGF1c2luZ1wiIC8qIFBBVVNJTkcgKi86XHJcbiAgICAgICAgY2FzZSBcImNhbmNlbGluZ1wiIC8qIENBTkNFTElORyAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIFRhc2tTdGF0ZS5SVU5OSU5HO1xyXG4gICAgICAgIGNhc2UgXCJwYXVzZWRcIiAvKiBQQVVTRUQgKi86XHJcbiAgICAgICAgICAgIHJldHVybiBUYXNrU3RhdGUuUEFVU0VEO1xyXG4gICAgICAgIGNhc2UgXCJzdWNjZXNzXCIgLyogU1VDQ0VTUyAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIFRhc2tTdGF0ZS5TVUNDRVNTO1xyXG4gICAgICAgIGNhc2UgXCJjYW5jZWxlZFwiIC8qIENBTkNFTEVEICovOlxyXG4gICAgICAgICAgICByZXR1cm4gVGFza1N0YXRlLkNBTkNFTEVEO1xyXG4gICAgICAgIGNhc2UgXCJlcnJvclwiIC8qIEVSUk9SICovOlxyXG4gICAgICAgICAgICByZXR1cm4gVGFza1N0YXRlLkVSUk9SO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIC8vIFRPRE8oYW5keXNvdG8pOiBhc3NlcnQoZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gVGFza1N0YXRlLkVSUk9SO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICBjb25zdCBhc0Z1bmN0aW9ucyA9IGlzRnVuY3Rpb24obmV4dE9yT2JzZXJ2ZXIpIHx8IGVycm9yICE9IG51bGwgfHwgY29tcGxldGUgIT0gbnVsbDtcclxuICAgICAgICBpZiAoYXNGdW5jdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0ID0gbmV4dE9yT2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUgPSBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgICAgICB0aGlzLm5leHQgPSBvYnNlcnZlci5uZXh0O1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gb2JzZXJ2ZXIuZXJyb3I7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUgPSBvYnNlcnZlci5jb21wbGV0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgZiB3aXRoIGl0cyBhcmd1bWVudHMgYXN5bmNocm9ub3VzbHkgYXMgYVxyXG4gKiBtaWNyb3Rhc2ssIGkuZS4gYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGUgY3VycmVudCBzY3JpcHQgcmV0dXJucyBiYWNrXHJcbiAqIGludG8gYnJvd3NlciBjb2RlLlxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZnVuY3Rpb24gYXN5bmMoZikge1xyXG4gICAgcmV0dXJuICguLi5hcmdzVG9Gb3J3YXJkKSA9PiB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gZiguLi5hcmdzVG9Gb3J3YXJkKSk7XHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBBbiBvdmVycmlkZSBmb3IgdGhlIHRleHQtYmFzZWQgQ29ubmVjdGlvbi4gVXNlZCBpbiB0ZXN0cy4gKi9cclxubGV0IHRleHRGYWN0b3J5T3ZlcnJpZGUgPSBudWxsO1xyXG4vKipcclxuICogTmV0d29yayBsYXllciBmb3IgYnJvd3NlcnMuIFdlIHVzZSB0aGlzIGluc3RlYWQgb2YgZ29vZy5uZXQuWGhySW8gYmVjYXVzZVxyXG4gKiBnb29nLm5ldC5YaHJJbyBpcyBoeXV1dXVnZSBhbmQgZG9lc24ndCB3b3JrIGluIFJlYWN0IE5hdGl2ZSBvbiBBbmRyb2lkLlxyXG4gKi9cclxuY2xhc3MgWGhyQ29ubmVjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnNlbnRfID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy54aHJfID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgdGhpcy5pbml0WGhyKCk7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvZGVfID0gRXJyb3JDb2RlLk5PX0VSUk9SO1xyXG4gICAgICAgIHRoaXMuc2VuZFByb21pc2VfID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMueGhyXy5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JDb2RlXyA9IEVycm9yQ29kZS5BQk9SVDtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMueGhyXy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JDb2RlXyA9IEVycm9yQ29kZS5ORVRXT1JLX0VSUk9SO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy54aHJfLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2VuZCh1cmwsIG1ldGhvZCwgYm9keSwgaGVhZGVycykge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbnRfKSB7XHJcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ2Nhbm5vdCAuc2VuZCgpIG1vcmUgdGhhbiBvbmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VudF8gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMueGhyXy5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcclxuICAgICAgICBpZiAoaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnhocl8uc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYm9keSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMueGhyXy5zZW5kKGJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54aHJfLnNlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFByb21pc2VfO1xyXG4gICAgfVxyXG4gICAgZ2V0RXJyb3JDb2RlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zZW50Xykge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdjYW5ub3QgLmdldEVycm9yQ29kZSgpIGJlZm9yZSBzZW5kaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yQ29kZV87XHJcbiAgICB9XHJcbiAgICBnZXRTdGF0dXMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbnRfKSB7XHJcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ2Nhbm5vdCAuZ2V0U3RhdHVzKCkgYmVmb3JlIHNlbmRpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueGhyXy5zdGF0dXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRSZXNwb25zZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2VudF8pIHtcclxuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignY2Fubm90IC5nZXRSZXNwb25zZSgpIGJlZm9yZSBzZW5kaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnhocl8ucmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBnZXRFcnJvclRleHQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbnRfKSB7XHJcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ2Nhbm5vdCAuZ2V0RXJyb3JUZXh0KCkgYmVmb3JlIHNlbmRpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueGhyXy5zdGF0dXNUZXh0O1xyXG4gICAgfVxyXG4gICAgLyoqIEFib3J0cyB0aGUgcmVxdWVzdC4gKi9cclxuICAgIGFib3J0KCkge1xyXG4gICAgICAgIHRoaXMueGhyXy5hYm9ydCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueGhyXy5nZXRSZXNwb25zZUhlYWRlcihoZWFkZXIpO1xyXG4gICAgfVxyXG4gICAgYWRkVXBsb2FkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLnhocl8udXBsb2FkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy54aHJfLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZW1vdmVVcGxvYWRQcm9ncmVzc0xpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMueGhyXy51cGxvYWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnhocl8udXBsb2FkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jbGFzcyBYaHJUZXh0Q29ubmVjdGlvbiBleHRlbmRzIFhockNvbm5lY3Rpb24ge1xyXG4gICAgaW5pdFhocigpIHtcclxuICAgICAgICB0aGlzLnhocl8ucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5ld1RleHRDb25uZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRleHRGYWN0b3J5T3ZlcnJpZGUgPyB0ZXh0RmFjdG9yeU92ZXJyaWRlKCkgOiBuZXcgWGhyVGV4dENvbm5lY3Rpb24oKTtcclxufVxyXG5jbGFzcyBYaHJCeXRlc0Nvbm5lY3Rpb24gZXh0ZW5kcyBYaHJDb25uZWN0aW9uIHtcclxuICAgIGluaXRYaHIoKSB7XHJcbiAgICAgICAgdGhpcy54aHJfLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbmV3Qnl0ZXNDb25uZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBYaHJCeXRlc0Nvbm5lY3Rpb24oKTtcclxufVxyXG5jbGFzcyBYaHJCbG9iQ29ubmVjdGlvbiBleHRlbmRzIFhockNvbm5lY3Rpb24ge1xyXG4gICAgaW5pdFhocigpIHtcclxuICAgICAgICB0aGlzLnhocl8ucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5ld0Jsb2JDb25uZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBYaHJCbG9iQ29ubmVjdGlvbigpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgYmxvYiBiZWluZyB1cGxvYWRlZC4gQ2FuIGJlIHVzZWQgdG8gcGF1c2UvcmVzdW1lL2NhbmNlbCB0aGVcclxuICogdXBsb2FkIGFuZCBtYW5hZ2UgY2FsbGJhY2tzIGZvciB2YXJpb3VzIGV2ZW50cy5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jbGFzcyBVcGxvYWRUYXNrIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHJlZiAtIFRoZSBmaXJlYmFzZVN0b3JhZ2UuUmVmZXJlbmNlIG9iamVjdCB0aGlzIHRhc2sgY2FtZVxyXG4gICAgICogICAgIGZyb20sIHVudHlwZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY2llcy5cclxuICAgICAqIEBwYXJhbSBibG9iIC0gVGhlIGJsb2IgdG8gdXBsb2FkLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyZWYsIGJsb2IsIG1ldGFkYXRhID0gbnVsbCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCBzbyBmYXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdHJhbnNmZXJyZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuX25lZWRUb0ZldGNoU3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbmVlZFRvRmV0Y2hNZXRhZGF0YSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2Vycm9yID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3VwbG9hZFVybCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2NodW5rTXVsdGlwbGllciA9IDE7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9yZWplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fcmVmID0gcmVmO1xyXG4gICAgICAgIHRoaXMuX2Jsb2IgPSBibG9iO1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAgICAgdGhpcy5fbWFwcGluZ3MgPSBnZXRNYXBwaW5ncygpO1xyXG4gICAgICAgIHRoaXMuX3Jlc3VtYWJsZSA9IHRoaXMuX3Nob3VsZERvUmVzdW1hYmxlKHRoaXMuX2Jsb2IpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gXCJydW5uaW5nXCIgLyogUlVOTklORyAqLztcclxuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2NodW5rTXVsdGlwbGllciA9IDE7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5fY29kZUVxdWFscyhcImNhbmNlbGVkXCIgLyogQ0FOQ0VMRUQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZWVkVG9GZXRjaFN0YXR1cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlVHJhbnNpdGlvbnNfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYWNrb2ZmRXhwaXJlZCA9IHRoaXMuaXNFeHBvbmVudGlhbEJhY2tvZmZFeHBpcmVkKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXRyeVN0YXR1c0NvZGUoZXJyb3Iuc3RhdHVzLCBbXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFja29mZkV4cGlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSByZXRyeUxpbWl0RXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xlZXBUaW1lID0gTWF0aC5tYXgodGhpcy5zbGVlcFRpbWUgKiAyLCBERUZBVUxUX01JTl9TTEVFUF9USU1FX01JTExJUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25lZWRUb0ZldGNoU3RhdHVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVRyYW5zaXRpb25zXygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb24oXCJlcnJvclwiIC8qIEVSUk9SICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFFcnJvckhhbmRsZXIgPSBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5fY29kZUVxdWFscyhcImNhbmNlbGVkXCIgLyogQ0FOQ0VMRUQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlVHJhbnNpdGlvbnNfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbihcImVycm9yXCIgLyogRVJST1IgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNsZWVwVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhTbGVlcFRpbWUgPSB0aGlzLl9yZWYuc3RvcmFnZS5tYXhVcGxvYWRSZXRyeVRpbWU7XHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBQcmV2ZW50IHVuY2F1Z2h0IHJlamVjdGlvbnMgb24gdGhlIGludGVybmFsIHByb21pc2UgZnJvbSBidWJibGluZyBvdXRcclxuICAgICAgICAvLyB0byB0aGUgdG9wIGxldmVsIHdpdGggYSBkdW1teSBoYW5kbGVyLlxyXG4gICAgICAgIHRoaXMuX3Byb21pc2UudGhlbihudWxsLCAoKSA9PiB7IH0pO1xyXG4gICAgfVxyXG4gICAgaXNFeHBvbmVudGlhbEJhY2tvZmZFeHBpcmVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNsZWVwVGltZSA+IHRoaXMubWF4U2xlZXBUaW1lO1xyXG4gICAgfVxyXG4gICAgX21ha2VQcm9ncmVzc0NhbGxiYWNrKCkge1xyXG4gICAgICAgIGNvbnN0IHNpemVCZWZvcmUgPSB0aGlzLl90cmFuc2ZlcnJlZDtcclxuICAgICAgICByZXR1cm4gbG9hZGVkID0+IHRoaXMuX3VwZGF0ZVByb2dyZXNzKHNpemVCZWZvcmUgKyBsb2FkZWQpO1xyXG4gICAgfVxyXG4gICAgX3Nob3VsZERvUmVzdW1hYmxlKGJsb2IpIHtcclxuICAgICAgICByZXR1cm4gYmxvYi5zaXplKCkgPiAyNTYgKiAxMDI0O1xyXG4gICAgfVxyXG4gICAgX3N0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gXCJydW5uaW5nXCIgLyogUlVOTklORyAqLykge1xyXG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgc29tZW9uZSBwYXVzZXMgdXMgaW4gYSByZXN1bWUgY2FsbGJhY2ssIGZvciBleGFtcGxlLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fcmVzdW1hYmxlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl91cGxvYWRVcmwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUmVzdW1hYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmVlZFRvRmV0Y2hTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mZXRjaFN0YXR1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX25lZWRUb0ZldGNoTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFwcGVucyBpZiB3ZSBtaXNzIHRoZSBtZXRhZGF0YSBvbiB1cGxvYWQgY29tcGxldGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmV0Y2hNZXRhZGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nVGltZW91dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRpbnVlVXBsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuc2xlZXBUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uZVNob3RVcGxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfcmVzb2x2ZVRva2VuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgdGhpcy5fcmVmLnN0b3JhZ2UuX2dldEF1dGhUb2tlbigpLFxyXG4gICAgICAgICAgICB0aGlzLl9yZWYuc3RvcmFnZS5fZ2V0QXBwQ2hlY2tUb2tlbigpXHJcbiAgICAgICAgXSkudGhlbigoW2F1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbl0pID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJ1bm5pbmdcIiAvKiBSVU5OSU5HICovOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2FuY2VsaW5nXCIgLyogQ0FOQ0VMSU5HICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb24oXCJjYW5jZWxlZFwiIC8qIENBTkNFTEVEICovKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJwYXVzaW5nXCIgLyogUEFVU0lORyAqLzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uKFwicGF1c2VkXCIgLyogUEFVU0VEICovKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETyhhbmR5c290byk6IGFzc2VydCBmYWxzZVxyXG4gICAgX2NyZWF0ZVJlc3VtYWJsZSgpIHtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlVG9rZW4oKGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0SW5mbyA9IGNyZWF0ZVJlc3VtYWJsZVVwbG9hZCh0aGlzLl9yZWYuc3RvcmFnZSwgdGhpcy5fcmVmLl9sb2NhdGlvbiwgdGhpcy5fbWFwcGluZ3MsIHRoaXMuX2Jsb2IsIHRoaXMuX21ldGFkYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgY3JlYXRlUmVxdWVzdCA9IHRoaXMuX3JlZi5zdG9yYWdlLl9tYWtlUmVxdWVzdChyZXF1ZXN0SW5mbywgbmV3VGV4dENvbm5lY3Rpb24sIGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbik7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0O1xyXG4gICAgICAgICAgICBjcmVhdGVSZXF1ZXN0LmdldFByb21pc2UoKS50aGVuKCh1cmwpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGxvYWRVcmwgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZWVkVG9GZXRjaFN0YXR1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVRyYW5zaXRpb25zXygpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLl9lcnJvckhhbmRsZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX2ZldGNoU3RhdHVzKCkge1xyXG4gICAgICAgIC8vIFRPRE8oYW5keXNvdG8pOiBhc3NlcnQodGhpcy51cGxvYWRVcmxfICE9PSBudWxsKTtcclxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLl91cGxvYWRVcmw7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZVRva2VuKChhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEluZm8gPSBnZXRSZXN1bWFibGVVcGxvYWRTdGF0dXModGhpcy5fcmVmLnN0b3JhZ2UsIHRoaXMuX3JlZi5fbG9jYXRpb24sIHVybCwgdGhpcy5fYmxvYik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c1JlcXVlc3QgPSB0aGlzLl9yZWYuc3RvcmFnZS5fbWFrZVJlcXVlc3QocmVxdWVzdEluZm8sIG5ld1RleHRDb25uZWN0aW9uLCBhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4pO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gc3RhdHVzUmVxdWVzdDtcclxuICAgICAgICAgICAgc3RhdHVzUmVxdWVzdC5nZXRQcm9taXNlKCkudGhlbihzdGF0dXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb2dyZXNzKHN0YXR1cy5jdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25lZWRUb0ZldGNoU3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25lZWRUb0ZldGNoTWV0YWRhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVRyYW5zaXRpb25zXygpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLl9lcnJvckhhbmRsZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX2NvbnRpbnVlVXBsb2FkKCkge1xyXG4gICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IFJFU1VNQUJMRV9VUExPQURfQ0hVTktfU0laRSAqIHRoaXMuX2NodW5rTXVsdGlwbGllcjtcclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUmVzdW1hYmxlVXBsb2FkU3RhdHVzKHRoaXMuX3RyYW5zZmVycmVkLCB0aGlzLl9ibG9iLnNpemUoKSk7XHJcbiAgICAgICAgLy8gVE9ETyhhbmR5c290byk6IGFzc2VydCh0aGlzLnVwbG9hZFVybF8gIT09IG51bGwpO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuX3VwbG9hZFVybDtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlVG9rZW4oKGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVxdWVzdEluZm87XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SW5mbyA9IGNvbnRpbnVlUmVzdW1hYmxlVXBsb2FkKHRoaXMuX3JlZi5fbG9jYXRpb24sIHRoaXMuX3JlZi5zdG9yYWdlLCB1cmwsIHRoaXMuX2Jsb2IsIGNodW5rU2l6ZSwgdGhpcy5fbWFwcGluZ3MsIHN0YXR1cywgdGhpcy5fbWFrZVByb2dyZXNzQ2FsbGJhY2soKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb24oXCJlcnJvclwiIC8qIEVSUk9SICovKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB1cGxvYWRSZXF1ZXN0ID0gdGhpcy5fcmVmLnN0b3JhZ2UuX21ha2VSZXF1ZXN0KHJlcXVlc3RJbmZvLCBuZXdUZXh0Q29ubmVjdGlvbiwgYXV0aFRva2VuLCBhcHBDaGVja1Rva2VuLCBcclxuICAgICAgICAgICAgLypyZXRyeT0qLyBmYWxzZSAvLyBVcGxvYWQgcmVxdWVzdHMgc2hvdWxkIG5vdCBiZSByZXRyaWVkIGFzIGVhY2ggcmV0cnkgc2hvdWxkIGJlIHByZWNlZGVkIGJ5IGFub3RoZXIgcXVlcnkgcmVxdWVzdC4gV2hpY2ggaXMgaGFuZGxlZCBpbiB0aGlzIGZpbGUuXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSB1cGxvYWRSZXF1ZXN0O1xyXG4gICAgICAgICAgICB1cGxvYWRSZXF1ZXN0LmdldFByb21pc2UoKS50aGVuKChuZXdTdGF0dXMpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luY3JlYXNlTXVsdGlwbGllcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb2dyZXNzKG5ld1N0YXR1cy5jdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdTdGF0dXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSBuZXdTdGF0dXMubWV0YWRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbihcInN1Y2Nlc3NcIiAvKiBTVUNDRVNTICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVUcmFuc2l0aW9uc18oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcy5fZXJyb3JIYW5kbGVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9pbmNyZWFzZU11bHRpcGxpZXIoKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFNpemUgPSBSRVNVTUFCTEVfVVBMT0FEX0NIVU5LX1NJWkUgKiB0aGlzLl9jaHVua011bHRpcGxpZXI7XHJcbiAgICAgICAgLy8gTWF4IGNodW5rIHNpemUgaXMgMzJNLlxyXG4gICAgICAgIGlmIChjdXJyZW50U2l6ZSAqIDIgPCAzMiAqIDEwMjQgKiAxMDI0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NodW5rTXVsdGlwbGllciAqPSAyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9mZXRjaE1ldGFkYXRhKCkge1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmVUb2tlbigoYXV0aFRva2VuLCBhcHBDaGVja1Rva2VuKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gZ2V0TWV0YWRhdGEkMih0aGlzLl9yZWYuc3RvcmFnZSwgdGhpcy5fcmVmLl9sb2NhdGlvbiwgdGhpcy5fbWFwcGluZ3MpO1xyXG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YVJlcXVlc3QgPSB0aGlzLl9yZWYuc3RvcmFnZS5fbWFrZVJlcXVlc3QocmVxdWVzdEluZm8sIG5ld1RleHRDb25uZWN0aW9uLCBhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4pO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbWV0YWRhdGFSZXF1ZXN0O1xyXG4gICAgICAgICAgICBtZXRhZGF0YVJlcXVlc3QuZ2V0UHJvbWlzZSgpLnRoZW4obWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uKFwic3VjY2Vzc1wiIC8qIFNVQ0NFU1MgKi8pO1xyXG4gICAgICAgICAgICB9LCB0aGlzLl9tZXRhZGF0YUVycm9ySGFuZGxlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfb25lU2hvdFVwbG9hZCgpIHtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlVG9rZW4oKGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0SW5mbyA9IG11bHRpcGFydFVwbG9hZCh0aGlzLl9yZWYuc3RvcmFnZSwgdGhpcy5fcmVmLl9sb2NhdGlvbiwgdGhpcy5fbWFwcGluZ3MsIHRoaXMuX2Jsb2IsIHRoaXMuX21ldGFkYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgbXVsdGlwYXJ0UmVxdWVzdCA9IHRoaXMuX3JlZi5zdG9yYWdlLl9tYWtlUmVxdWVzdChyZXF1ZXN0SW5mbywgbmV3VGV4dENvbm5lY3Rpb24sIGF1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbik7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBtdWx0aXBhcnRSZXF1ZXN0O1xyXG4gICAgICAgICAgICBtdWx0aXBhcnRSZXF1ZXN0LmdldFByb21pc2UoKS50aGVuKG1ldGFkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IG1ldGFkYXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUHJvZ3Jlc3ModGhpcy5fYmxvYi5zaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbihcInN1Y2Nlc3NcIiAvKiBTVUNDRVNTICovKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5fZXJyb3JIYW5kbGVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF91cGRhdGVQcm9ncmVzcyh0cmFuc2ZlcnJlZCkge1xyXG4gICAgICAgIGNvbnN0IG9sZCA9IHRoaXMuX3RyYW5zZmVycmVkO1xyXG4gICAgICAgIHRoaXMuX3RyYW5zZmVycmVkID0gdHJhbnNmZXJyZWQ7XHJcbiAgICAgICAgLy8gQSBwcm9ncmVzcyB1cGRhdGUgY2FuIG1ha2UgdGhlIFwidHJhbnNmZXJyZWRcIiB2YWx1ZSBzbWFsbGVyIChlLmcuIGFcclxuICAgICAgICAvLyBwYXJ0aWFsIHVwbG9hZCBub3QgY29tcGxldGVkIGJ5IHNlcnZlciwgYWZ0ZXIgd2hpY2ggdGhlIFwidHJhbnNmZXJyZWRcIlxyXG4gICAgICAgIC8vIHZhbHVlIG1heSByZXNldCB0byB0aGUgdmFsdWUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcmVxdWVzdCkuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zZmVycmVkICE9PSBvbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5T2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX3RyYW5zaXRpb24oc3RhdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiY2FuY2VsaW5nXCIgLyogQ0FOQ0VMSU5HICovOlxyXG4gICAgICAgICAgICBjYXNlIFwicGF1c2luZ1wiIC8qIFBBVVNJTkcgKi86XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKGFuZHlzb3RvKTpcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCh0aGlzLnN0YXRlXyA9PT0gSW50ZXJuYWxUYXNrU3RhdGUuUlVOTklORyB8fFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHRoaXMuc3RhdGVfID09PSBJbnRlcm5hbFRhc2tTdGF0ZS5QQVVTSU5HKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZ1RpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wZW5kaW5nVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nVGltZW91dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlVHJhbnNpdGlvbnNfKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInJ1bm5pbmdcIiAvKiBSVU5OSU5HICovOlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhhbmR5c290byk6XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5zdGF0ZV8gPT09IEludGVybmFsVGFza1N0YXRlLlBBVVNFRCB8fFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHRoaXMuc3RhdGVfID09PSBJbnRlcm5hbFRhc2tTdGF0ZS5QQVVTSU5HKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdhc1BhdXNlZCA9IHRoaXMuX3N0YXRlID09PSBcInBhdXNlZFwiIC8qIFBBVVNFRCAqLztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAod2FzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5T2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGF1c2VkXCIgLyogUEFVU0VEICovOlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhhbmR5c290byk6XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5zdGF0ZV8gPT09IEludGVybmFsVGFza1N0YXRlLlBBVVNJTkcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeU9ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjYW5jZWxlZFwiIC8qIENBTkNFTEVEICovOlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhhbmR5c290byk6XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5zdGF0ZV8gPT09IEludGVybmFsVGFza1N0YXRlLlBBVVNFRCB8fFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHRoaXMuc3RhdGVfID09PSBJbnRlcm5hbFRhc2tTdGF0ZS5DQU5DRUxJTkcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBjYW5jZWxlZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeU9ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiIC8qIEVSUk9SICovOlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhhbmR5c290byk6XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5zdGF0ZV8gPT09IEludGVybmFsVGFza1N0YXRlLlJVTk5JTkcgfHxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICB0aGlzLnN0YXRlXyA9PT0gSW50ZXJuYWxUYXNrU3RhdGUuUEFVU0lORyB8fFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHRoaXMuc3RhdGVfID09PSBJbnRlcm5hbFRhc2tTdGF0ZS5DQU5DRUxJTkcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeU9ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdWNjZXNzXCIgLyogU1VDQ0VTUyAqLzpcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8oYW5keXNvdG8pOlxyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXJ0KHRoaXMuc3RhdGVfID09PSBJbnRlcm5hbFRhc2tTdGF0ZS5SVU5OSU5HIHx8XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgdGhpcy5zdGF0ZV8gPT09IEludGVybmFsVGFza1N0YXRlLlBBVVNJTkcgfHxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICB0aGlzLnN0YXRlXyA9PT0gSW50ZXJuYWxUYXNrU3RhdGUuQ0FOQ0VMSU5HKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnlPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbXBsZXRlVHJhbnNpdGlvbnNfKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInBhdXNpbmdcIiAvKiBQQVVTSU5HICovOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbihcInBhdXNlZFwiIC8qIFBBVVNFRCAqLyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNhbmNlbGluZ1wiIC8qIENBTkNFTElORyAqLzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb24oXCJjYW5jZWxlZFwiIC8qIENBTkNFTEVEICovKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicnVubmluZ1wiIC8qIFJVTk5JTkcgKi86XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHRhc2sgc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIGdldCBzbmFwc2hvdCgpIHtcclxuICAgICAgICBjb25zdCBleHRlcm5hbFN0YXRlID0gdGFza1N0YXRlRnJvbUludGVybmFsVGFza1N0YXRlKHRoaXMuX3N0YXRlKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBieXRlc1RyYW5zZmVycmVkOiB0aGlzLl90cmFuc2ZlcnJlZCxcclxuICAgICAgICAgICAgdG90YWxCeXRlczogdGhpcy5fYmxvYi5zaXplKCksXHJcbiAgICAgICAgICAgIHN0YXRlOiBleHRlcm5hbFN0YXRlLFxyXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5fbWV0YWRhdGEsXHJcbiAgICAgICAgICAgIHRhc2s6IHRoaXMsXHJcbiAgICAgICAgICAgIHJlZjogdGhpcy5fcmVmXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGNhbGxiYWNrIGZvciBhbiBldmVudC5cclxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIGZvci5cclxuICAgICAqIEBwYXJhbSBuZXh0T3JPYnNlcnZlciAtXHJcbiAgICAgKiAgICAgVGhlIGBuZXh0YCBmdW5jdGlvbiwgd2hpY2ggZ2V0cyBjYWxsZWQgZm9yIGVhY2ggaXRlbSBpblxyXG4gICAgICogICAgIHRoZSBldmVudCBzdHJlYW0sIG9yIGFuIG9ic2VydmVyIG9iamVjdCB3aXRoIHNvbWUgb3IgYWxsIG9mIHRoZXNlIHRocmVlXHJcbiAgICAgKiAgICAgcHJvcGVydGllcyAoYG5leHRgLCBgZXJyb3JgLCBgY29tcGxldGVgKS5cclxuICAgICAqIEBwYXJhbSBlcnJvciAtIEEgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCB3aXRoIGEgYFN0b3JhZ2VFcnJvcmBcclxuICAgICAqICAgICBpZiB0aGUgZXZlbnQgc3RyZWFtIGVuZHMgZHVlIHRvIGFuIGVycm9yLlxyXG4gICAgICogQHBhcmFtIGNvbXBsZXRlZCAtIEEgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBpZiB0aGVcclxuICAgICAqICAgICBldmVudCBzdHJlYW0gZW5kcyBub3JtYWxseS5cclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiAgICAgSWYgb25seSB0aGUgZXZlbnQgYXJndW1lbnQgaXMgcGFzc2VkLCByZXR1cm5zIGEgZnVuY3Rpb24geW91IGNhbiB1c2UgdG9cclxuICAgICAqICAgICBhZGQgY2FsbGJhY2tzIChzZWUgdGhlIGV4YW1wbGVzIGFib3ZlKS4gSWYgbW9yZSB0aGFuIGp1c3QgdGhlIGV2ZW50XHJcbiAgICAgKiAgICAgYXJndW1lbnQgaXMgcGFzc2VkLCByZXR1cm5zIGEgZnVuY3Rpb24geW91IGNhbiBjYWxsIHRvIHVucmVnaXN0ZXIgdGhlXHJcbiAgICAgKiAgICAgY2FsbGJhY2tzLlxyXG4gICAgICovXHJcbiAgICBvbih0eXBlLCBuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlZCkge1xyXG4gICAgICAgIC8vIE5vdGU6IGB0eXBlYCBpc24ndCBiZWluZyB1c2VkLiBJdHMgdHlwZSBpcyBhbHNvIGluY29ycmVjdC4gVGFza0V2ZW50IHNob3VsZCBub3QgYmUgYSBzdHJpbmcuXHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXIobmV4dE9yT2JzZXJ2ZXIgfHwgdW5kZWZpbmVkLCBlcnJvciB8fCB1bmRlZmluZWQsIGNvbXBsZXRlZCB8fCB1bmRlZmluZWQpO1xyXG4gICAgICAgIHRoaXMuX2FkZE9ic2VydmVyKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVPYnNlcnZlcihvYnNlcnZlcik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBvYmplY3QgYmVoYXZlcyBsaWtlIGEgUHJvbWlzZSwgYW5kIHJlc29sdmVzIHdpdGggaXRzIHNuYXBzaG90IGRhdGFcclxuICAgICAqIHdoZW4gdGhlIHVwbG9hZCBjb21wbGV0ZXMuXHJcbiAgICAgKiBAcGFyYW0gb25GdWxmaWxsZWQgLSBUaGUgZnVsZmlsbG1lbnQgY2FsbGJhY2suIFByb21pc2UgY2hhaW5pbmcgd29ya3MgYXMgbm9ybWFsLlxyXG4gICAgICogQHBhcmFtIG9uUmVqZWN0ZWQgLSBUaGUgcmVqZWN0aW9uIGNhbGxiYWNrLlxyXG4gICAgICovXHJcbiAgICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XHJcbiAgICAgICAgLy8gVGhlc2UgY2FzdHMgYXJlIG5lZWRlZCBzbyB0aGF0IFR5cGVTY3JpcHQgY2FuIGluZmVyIHRoZSB0eXBlcyBvZiB0aGVcclxuICAgICAgICAvLyByZXN1bHRpbmcgUHJvbWlzZS5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXF1aXZhbGVudCB0byBjYWxsaW5nIGB0aGVuKG51bGwsIG9uUmVqZWN0ZWQpYC5cclxuICAgICAqL1xyXG4gICAgY2F0Y2gob25SZWplY3RlZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGdpdmVuIG9ic2VydmVyLlxyXG4gICAgICovXHJcbiAgICBfYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5fbm90aWZ5T2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBvYnNlcnZlci5cclxuICAgICAqL1xyXG4gICAgX3JlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XHJcbiAgICAgICAgY29uc3QgaSA9IHRoaXMuX29ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKTtcclxuICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfbm90aWZ5T2JzZXJ2ZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2ZpbmlzaFByb21pc2UoKTtcclxuICAgICAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnMuc2xpY2UoKTtcclxuICAgICAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeU9ic2VydmVyKG9ic2VydmVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9maW5pc2hQcm9taXNlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGV0IHRyaWdnZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFza1N0YXRlRnJvbUludGVybmFsVGFza1N0YXRlKHRoaXMuX3N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUYXNrU3RhdGUuU1VDQ0VTUzpcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyh0aGlzLl9yZXNvbHZlLmJpbmQobnVsbCwgdGhpcy5zbmFwc2hvdCkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRhc2tTdGF0ZS5DQU5DRUxFRDpcclxuICAgICAgICAgICAgICAgIGNhc2UgVGFza1N0YXRlLkVSUk9SOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvQ2FsbCA9IHRoaXMuX3JlamVjdDtcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyh0b0NhbGwuYmluZChudWxsLCB0aGlzLl9lcnJvcikpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfbm90aWZ5T2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcclxuICAgICAgICBjb25zdCBleHRlcm5hbFN0YXRlID0gdGFza1N0YXRlRnJvbUludGVybmFsVGFza1N0YXRlKHRoaXMuX3N0YXRlKTtcclxuICAgICAgICBzd2l0Y2ggKGV4dGVybmFsU3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUYXNrU3RhdGUuUlVOTklORzpcclxuICAgICAgICAgICAgY2FzZSBUYXNrU3RhdGUuUEFVU0VEOlxyXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyhvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIsIHRoaXMuc25hcHNob3QpKSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGFza1N0YXRlLlNVQ0NFU1M6XHJcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyhvYnNlcnZlci5jb21wbGV0ZS5iaW5kKG9ic2VydmVyKSkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRhc2tTdGF0ZS5DQU5DRUxFRDpcclxuICAgICAgICAgICAgY2FzZSBUYXNrU3RhdGUuRVJST1I6XHJcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyhvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyLCB0aGlzLl9lcnJvcikpKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8oYW5keXNvdG8pOiBhc3NlcnQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMob2JzZXJ2ZXIuZXJyb3IuYmluZChvYnNlcnZlciwgdGhpcy5fZXJyb3IpKSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVzdW1lcyBhIHBhdXNlZCB0YXNrLiBIYXMgbm8gZWZmZWN0IG9uIGEgY3VycmVudGx5IHJ1bm5pbmcgb3IgZmFpbGVkIHRhc2suXHJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBvcGVyYXRpb24gdG9vayBlZmZlY3QsIGZhbHNlIGlmIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIHJlc3VtZSgpIHtcclxuICAgICAgICBjb25zdCB2YWxpZCA9IHRoaXMuX3N0YXRlID09PSBcInBhdXNlZFwiIC8qIFBBVVNFRCAqLyB8fFxyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gXCJwYXVzaW5nXCIgLyogUEFVU0lORyAqLztcclxuICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbihcInJ1bm5pbmdcIiAvKiBSVU5OSU5HICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXVzZXMgYSBjdXJyZW50bHkgcnVubmluZyB0YXNrLiBIYXMgbm8gZWZmZWN0IG9uIGEgcGF1c2VkIG9yIGZhaWxlZCB0YXNrLlxyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHRvb2sgZWZmZWN0LCBmYWxzZSBpZiBpZ25vcmVkLlxyXG4gICAgICovXHJcbiAgICBwYXVzZSgpIHtcclxuICAgICAgICBjb25zdCB2YWxpZCA9IHRoaXMuX3N0YXRlID09PSBcInJ1bm5pbmdcIiAvKiBSVU5OSU5HICovO1xyXG4gICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uKFwicGF1c2luZ1wiIC8qIFBBVVNJTkcgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsaWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbmNlbHMgYSBjdXJyZW50bHkgcnVubmluZyBvciBwYXVzZWQgdGFzay4gSGFzIG5vIGVmZmVjdCBvbiBhIGNvbXBsZXRlIG9yXHJcbiAgICAgKiBmYWlsZWQgdGFzay5cclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB0b29rIGVmZmVjdCwgZmFsc2UgaWYgaWdub3JlZC5cclxuICAgICAqL1xyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbGlkID0gdGhpcy5fc3RhdGUgPT09IFwicnVubmluZ1wiIC8qIFJVTk5JTkcgKi8gfHxcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IFwicGF1c2luZ1wiIC8qIFBBVVNJTkcgKi87XHJcbiAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb24oXCJjYW5jZWxpbmdcIiAvKiBDQU5DRUxJTkcgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsaWQ7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVzIG1ldGhvZHMgdG8gaW50ZXJhY3Qgd2l0aCBhIGJ1Y2tldCBpbiB0aGUgRmlyZWJhc2UgU3RvcmFnZSBzZXJ2aWNlLlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIF9sb2NhdGlvbiAtIEFuIGZicy5sb2NhdGlvbiwgb3IgdGhlIFVSTCBhdFxyXG4gKiAgICAgd2hpY2ggdG8gYmFzZSB0aGlzIG9iamVjdCwgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XHJcbiAqICAgICAgICAgZ3M6Ly88YnVja2V0Pi88b2JqZWN0LXBhdGg+XHJcbiAqICAgICAgICAgaHR0cFtzXTovL2ZpcmViYXNlc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9cclxuICogICAgICAgICAgICAgICAgICAgICA8YXBpLXZlcnNpb24+L2IvPGJ1Y2tldD4vby88b2JqZWN0LXBhdGg+XHJcbiAqICAgICBBbnkgcXVlcnkgb3IgZnJhZ21lbnQgc3RyaW5ncyB3aWxsIGJlIGlnbm9yZWQgaW4gdGhlIGh0dHBbc11cclxuICogICAgIGZvcm1hdC4gSWYgbm8gdmFsdWUgaXMgcGFzc2VkLCB0aGUgc3RvcmFnZSBvYmplY3Qgd2lsbCB1c2UgYSBVUkwgYmFzZWQgb25cclxuICogICAgIHRoZSBwcm9qZWN0IElEIG9mIHRoZSBiYXNlIGZpcmViYXNlLkFwcCBpbnN0YW5jZS5cclxuICovXHJcbmNsYXNzIFJlZmVyZW5jZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2VydmljZSwgbG9jYXRpb24pIHtcclxuICAgICAgICB0aGlzLl9zZXJ2aWNlID0gX3NlcnZpY2U7XHJcbiAgICAgICAgaWYgKGxvY2F0aW9uIGluc3RhbmNlb2YgTG9jYXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fbG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvY2F0aW9uID0gTG9jYXRpb24ubWFrZUZyb21VcmwobG9jYXRpb24sIF9zZXJ2aWNlLmhvc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgVVJMIGZvciB0aGUgYnVja2V0IGFuZCBwYXRoIHRoaXMgb2JqZWN0IHJlZmVyZW5jZXMsXHJcbiAgICAgKiAgICAgaW4gdGhlIGZvcm0gZ3M6Ly88YnVja2V0Pi88b2JqZWN0LXBhdGg+XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICdnczovLycgKyB0aGlzLl9sb2NhdGlvbi5idWNrZXQgKyAnLycgKyB0aGlzLl9sb2NhdGlvbi5wYXRoO1xyXG4gICAgfVxyXG4gICAgX25ld1JlZihzZXJ2aWNlLCBsb2NhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlKHNlcnZpY2UsIGxvY2F0aW9uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHJvb3Qgb2YgdGhpcyBvYmplY3QncyBidWNrZXQuXHJcbiAgICAgKi9cclxuICAgIGdldCByb290KCkge1xyXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gbmV3IExvY2F0aW9uKHRoaXMuX2xvY2F0aW9uLmJ1Y2tldCwgJycpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9uZXdSZWYodGhpcy5fc2VydmljZSwgbG9jYXRpb24pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYnVja2V0IGNvbnRhaW5pbmcgdGhpcyByZWZlcmVuY2UncyBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGdldCBidWNrZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uLmJ1Y2tldDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZ1bGwgcGF0aCBvZiB0aGlzIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGZ1bGxQYXRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbi5wYXRoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2hvcnQgbmFtZSBvZiB0aGlzIG9iamVjdCwgd2hpY2ggaXMgdGhlIGxhc3QgY29tcG9uZW50IG9mIHRoZSBmdWxsIHBhdGguXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgaWYgZnVsbFBhdGggaXMgJ2Z1bGwvcGF0aC9pbWFnZS5wbmcnLCBuYW1lIGlzICdpbWFnZS5wbmcnLlxyXG4gICAgICovXHJcbiAgICBnZXQgbmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gbGFzdENvbXBvbmVudCh0aGlzLl9sb2NhdGlvbi5wYXRoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGBTdG9yYWdlU2VydmljZWAgaW5zdGFuY2UgdGhpcyBgU3RvcmFnZVJlZmVyZW5jZWAgaXMgYXNzb2NpYXRlZCB3aXRoLlxyXG4gICAgICovXHJcbiAgICBnZXQgc3RvcmFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSBgU3RvcmFnZVJlZmVyZW5jZWAgcG9pbnRpbmcgdG8gdGhlIHBhcmVudCBsb2NhdGlvbiBvZiB0aGlzIGBTdG9yYWdlUmVmZXJlbmNlYCwgb3IgbnVsbCBpZlxyXG4gICAgICogdGhpcyByZWZlcmVuY2UgaXMgdGhlIHJvb3QuXHJcbiAgICAgKi9cclxuICAgIGdldCBwYXJlbnQoKSB7XHJcbiAgICAgICAgY29uc3QgbmV3UGF0aCA9IHBhcmVudCh0aGlzLl9sb2NhdGlvbi5wYXRoKTtcclxuICAgICAgICBpZiAobmV3UGF0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBuZXcgTG9jYXRpb24odGhpcy5fbG9jYXRpb24uYnVja2V0LCBuZXdQYXRoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFJlZmVyZW5jZSh0aGlzLl9zZXJ2aWNlLCBsb2NhdGlvbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gdGhyb3cgYW4gZXJyb3IgaW4gbWV0aG9kcyB0aGF0IGRvIG5vdCBhY2NlcHQgYSByb290IHJlZmVyZW5jZS5cclxuICAgICAqL1xyXG4gICAgX3Rocm93SWZSb290KG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5fbG9jYXRpb24ucGF0aCA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhyb3cgaW52YWxpZFJvb3RPcGVyYXRpb24obmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEb3dubG9hZCB0aGUgYnl0ZXMgYXQgdGhlIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgY29udGFpbmluZyB0aGUgZG93bmxvYWRlZCBieXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIGdldEJ5dGVzSW50ZXJuYWwocmVmLCBtYXhEb3dubG9hZFNpemVCeXRlcykge1xyXG4gICAgcmVmLl90aHJvd0lmUm9vdCgnZ2V0Qnl0ZXMnKTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gZ2V0Qnl0ZXMkMShyZWYuc3RvcmFnZSwgcmVmLl9sb2NhdGlvbiwgbWF4RG93bmxvYWRTaXplQnl0ZXMpO1xyXG4gICAgcmV0dXJuIHJlZi5zdG9yYWdlXHJcbiAgICAgICAgLm1ha2VSZXF1ZXN0V2l0aFRva2VucyhyZXF1ZXN0SW5mbywgbmV3Qnl0ZXNDb25uZWN0aW9uKVxyXG4gICAgICAgIC50aGVuKGJ5dGVzID0+IG1heERvd25sb2FkU2l6ZUJ5dGVzICE9PSB1bmRlZmluZWRcclxuICAgICAgICA/IC8vIEdDUyBtYXkgbm90IGhvbm9yIHRoZSBSYW5nZSBoZWFkZXIgZm9yIHNtYWxsIGZpbGVzXHJcbiAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDAsIG1heERvd25sb2FkU2l6ZUJ5dGVzKVxyXG4gICAgICAgIDogYnl0ZXMpO1xyXG59XHJcbi8qKlxyXG4gKiBEb3dubG9hZCB0aGUgYnl0ZXMgYXQgdGhlIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgY29udGFpbmluZyB0aGUgZG93bmxvYWRlZCBibG9iLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QmxvYkludGVybmFsKHJlZiwgbWF4RG93bmxvYWRTaXplQnl0ZXMpIHtcclxuICAgIHJlZi5fdGhyb3dJZlJvb3QoJ2dldEJsb2InKTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gZ2V0Qnl0ZXMkMShyZWYuc3RvcmFnZSwgcmVmLl9sb2NhdGlvbiwgbWF4RG93bmxvYWRTaXplQnl0ZXMpO1xyXG4gICAgcmV0dXJuIHJlZi5zdG9yYWdlXHJcbiAgICAgICAgLm1ha2VSZXF1ZXN0V2l0aFRva2VucyhyZXF1ZXN0SW5mbywgbmV3QmxvYkNvbm5lY3Rpb24pXHJcbiAgICAgICAgLnRoZW4oYmxvYiA9PiBtYXhEb3dubG9hZFNpemVCeXRlcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyAvLyBHQ1MgbWF5IG5vdCBob25vciB0aGUgUmFuZ2UgaGVhZGVyIGZvciBzbWFsbCBmaWxlc1xyXG4gICAgICAgICAgICBibG9iLnNsaWNlKDAsIG1heERvd25sb2FkU2l6ZUJ5dGVzKVxyXG4gICAgICAgIDogYmxvYik7XHJcbn1cclxuLyoqXHJcbiAqIFVwbG9hZHMgZGF0YSB0byB0aGlzIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBUaGUgdXBsb2FkIGlzIG5vdCByZXN1bWFibGUuXHJcbiAqXHJcbiAqIEBwYXJhbSByZWYgLSBTdG9yYWdlUmVmZXJlbmNlIHdoZXJlIGRhdGEgc2hvdWxkIGJlIHVwbG9hZGVkLlxyXG4gKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIHVwbG9hZC5cclxuICogQHBhcmFtIG1ldGFkYXRhIC0gTWV0YWRhdGEgZm9yIHRoZSBuZXdseSB1cGxvYWRlZCBkYXRhLlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgY29udGFpbmluZyBhbiBVcGxvYWRSZXN1bHRcclxuICovXHJcbmZ1bmN0aW9uIHVwbG9hZEJ5dGVzJDEocmVmLCBkYXRhLCBtZXRhZGF0YSkge1xyXG4gICAgcmVmLl90aHJvd0lmUm9vdCgndXBsb2FkQnl0ZXMnKTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gbXVsdGlwYXJ0VXBsb2FkKHJlZi5zdG9yYWdlLCByZWYuX2xvY2F0aW9uLCBnZXRNYXBwaW5ncygpLCBuZXcgRmJzQmxvYihkYXRhLCB0cnVlKSwgbWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIHJlZi5zdG9yYWdlXHJcbiAgICAgICAgLm1ha2VSZXF1ZXN0V2l0aFRva2VucyhyZXF1ZXN0SW5mbywgbmV3VGV4dENvbm5lY3Rpb24pXHJcbiAgICAgICAgLnRoZW4oZmluYWxNZXRhZGF0YSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWRhdGE6IGZpbmFsTWV0YWRhdGEsXHJcbiAgICAgICAgICAgIHJlZlxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogVXBsb2FkcyBkYXRhIHRvIHRoaXMgb2JqZWN0J3MgbG9jYXRpb24uXHJcbiAqIFRoZSB1cGxvYWQgY2FuIGJlIHBhdXNlZCBhbmQgcmVzdW1lZCwgYW5kIGV4cG9zZXMgcHJvZ3Jlc3MgdXBkYXRlcy5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gcmVmIC0gU3RvcmFnZVJlZmVyZW5jZSB3aGVyZSBkYXRhIHNob3VsZCBiZSB1cGxvYWRlZC5cclxuICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byB1cGxvYWQuXHJcbiAqIEBwYXJhbSBtZXRhZGF0YSAtIE1ldGFkYXRhIGZvciB0aGUgbmV3bHkgdXBsb2FkZWQgZGF0YS5cclxuICogQHJldHVybnMgQW4gVXBsb2FkVGFza1xyXG4gKi9cclxuZnVuY3Rpb24gdXBsb2FkQnl0ZXNSZXN1bWFibGUkMShyZWYsIGRhdGEsIG1ldGFkYXRhKSB7XHJcbiAgICByZWYuX3Rocm93SWZSb290KCd1cGxvYWRCeXRlc1Jlc3VtYWJsZScpO1xyXG4gICAgcmV0dXJuIG5ldyBVcGxvYWRUYXNrKHJlZiwgbmV3IEZic0Jsb2IoZGF0YSksIG1ldGFkYXRhKTtcclxufVxyXG4vKipcclxuICogVXBsb2FkcyBhIHN0cmluZyB0byB0aGlzIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBUaGUgdXBsb2FkIGlzIG5vdCByZXN1bWFibGUuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIFN0b3JhZ2VSZWZlcmVuY2Ugd2hlcmUgc3RyaW5nIHNob3VsZCBiZSB1cGxvYWRlZC5cclxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHN0cmluZyB0byB1cGxvYWQuXHJcbiAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZm9ybWF0IG9mIHRoZSBzdHJpbmcgdG8gdXBsb2FkLlxyXG4gKiBAcGFyYW0gbWV0YWRhdGEgLSBNZXRhZGF0YSBmb3IgdGhlIG5ld2x5IHVwbG9hZGVkIHN0cmluZy5cclxuICogQHJldHVybnMgQSBQcm9taXNlIGNvbnRhaW5pbmcgYW4gVXBsb2FkUmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiB1cGxvYWRTdHJpbmckMShyZWYsIHZhbHVlLCBmb3JtYXQgPSBTdHJpbmdGb3JtYXQuUkFXLCBtZXRhZGF0YSkge1xyXG4gICAgcmVmLl90aHJvd0lmUm9vdCgndXBsb2FkU3RyaW5nJyk7XHJcbiAgICBjb25zdCBkYXRhID0gZGF0YUZyb21TdHJpbmcoZm9ybWF0LCB2YWx1ZSk7XHJcbiAgICBjb25zdCBtZXRhZGF0YUNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgbWV0YWRhdGEpO1xyXG4gICAgaWYgKG1ldGFkYXRhQ2xvbmVbJ2NvbnRlbnRUeXBlJ10gPT0gbnVsbCAmJiBkYXRhLmNvbnRlbnRUeXBlICE9IG51bGwpIHtcclxuICAgICAgICBtZXRhZGF0YUNsb25lWydjb250ZW50VHlwZSddID0gZGF0YS5jb250ZW50VHlwZTtcclxuICAgIH1cclxuICAgIHJldHVybiB1cGxvYWRCeXRlcyQxKHJlZiwgZGF0YS5kYXRhLCBtZXRhZGF0YUNsb25lKTtcclxufVxyXG4vKipcclxuICogTGlzdCBhbGwgaXRlbXMgKGZpbGVzKSBhbmQgcHJlZml4ZXMgKGZvbGRlcnMpIHVuZGVyIHRoaXMgc3RvcmFnZSByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIFRoaXMgaXMgYSBoZWxwZXIgbWV0aG9kIGZvciBjYWxsaW5nIGxpc3QoKSByZXBlYXRlZGx5IHVudGlsIHRoZXJlIGFyZVxyXG4gKiBubyBtb3JlIHJlc3VsdHMuIFRoZSBkZWZhdWx0IHBhZ2luYXRpb24gc2l6ZSBpcyAxMDAwLlxyXG4gKlxyXG4gKiBOb3RlOiBUaGUgcmVzdWx0cyBtYXkgbm90IGJlIGNvbnNpc3RlbnQgaWYgb2JqZWN0cyBhcmUgY2hhbmdlZCB3aGlsZSB0aGlzXHJcbiAqIG9wZXJhdGlvbiBpcyBydW5uaW5nLlxyXG4gKlxyXG4gKiBXYXJuaW5nOiBsaXN0QWxsIG1heSBwb3RlbnRpYWxseSBjb25zdW1lIHRvbyBtYW55IHJlc291cmNlcyBpZiB0aGVyZSBhcmVcclxuICogdG9vIG1hbnkgcmVzdWx0cy5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gcmVmIC0gU3RvcmFnZVJlZmVyZW5jZSB0byBnZXQgbGlzdCBmcm9tLlxyXG4gKlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFsbCB0aGUgaXRlbXMgYW5kIHByZWZpeGVzIHVuZGVyXHJcbiAqICAgICAgdGhlIGN1cnJlbnQgc3RvcmFnZSByZWZlcmVuY2UuIGBwcmVmaXhlc2AgY29udGFpbnMgcmVmZXJlbmNlcyB0b1xyXG4gKiAgICAgIHN1Yi1kaXJlY3RvcmllcyBhbmQgYGl0ZW1zYCBjb250YWlucyByZWZlcmVuY2VzIHRvIG9iamVjdHMgaW4gdGhpc1xyXG4gKiAgICAgIGZvbGRlci4gYG5leHRQYWdlVG9rZW5gIGlzIG5ldmVyIHJldHVybmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gbGlzdEFsbCQxKHJlZikge1xyXG4gICAgY29uc3QgYWNjdW11bGF0b3IgPSB7XHJcbiAgICAgICAgcHJlZml4ZXM6IFtdLFxyXG4gICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgfTtcclxuICAgIHJldHVybiBsaXN0QWxsSGVscGVyKHJlZiwgYWNjdW11bGF0b3IpLnRoZW4oKCkgPT4gYWNjdW11bGF0b3IpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXBhcmF0ZWQgZnJvbSBsaXN0QWxsIGJlY2F1c2UgYXN5bmMgZnVuY3Rpb25zIGNhbid0IHVzZSBcImFyZ3VtZW50c1wiLlxyXG4gKiBAcGFyYW0gcmVmXHJcbiAqIEBwYXJhbSBhY2N1bXVsYXRvclxyXG4gKiBAcGFyYW0gcGFnZVRva2VuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBsaXN0QWxsSGVscGVyKHJlZiwgYWNjdW11bGF0b3IsIHBhZ2VUb2tlbikge1xyXG4gICAgY29uc3Qgb3B0ID0ge1xyXG4gICAgICAgIC8vIG1heFJlc3VsdHMgaXMgMTAwMCBieSBkZWZhdWx0LlxyXG4gICAgICAgIHBhZ2VUb2tlblxyXG4gICAgfTtcclxuICAgIGNvbnN0IG5leHRQYWdlID0gYXdhaXQgbGlzdCQxKHJlZiwgb3B0KTtcclxuICAgIGFjY3VtdWxhdG9yLnByZWZpeGVzLnB1c2goLi4ubmV4dFBhZ2UucHJlZml4ZXMpO1xyXG4gICAgYWNjdW11bGF0b3IuaXRlbXMucHVzaCguLi5uZXh0UGFnZS5pdGVtcyk7XHJcbiAgICBpZiAobmV4dFBhZ2UubmV4dFBhZ2VUb2tlbiAhPSBudWxsKSB7XHJcbiAgICAgICAgYXdhaXQgbGlzdEFsbEhlbHBlcihyZWYsIGFjY3VtdWxhdG9yLCBuZXh0UGFnZS5uZXh0UGFnZVRva2VuKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogTGlzdCBpdGVtcyAoZmlsZXMpIGFuZCBwcmVmaXhlcyAoZm9sZGVycykgdW5kZXIgdGhpcyBzdG9yYWdlIHJlZmVyZW5jZS5cclxuICpcclxuICogTGlzdCBBUEkgaXMgb25seSBhdmFpbGFibGUgZm9yIEZpcmViYXNlIFJ1bGVzIFZlcnNpb24gMi5cclxuICpcclxuICogR0NTIGlzIGEga2V5LWJsb2Igc3RvcmUuIEZpcmViYXNlIFN0b3JhZ2UgaW1wb3NlcyB0aGUgc2VtYW50aWMgb2YgJy8nXHJcbiAqIGRlbGltaXRlZCBmb2xkZXIgc3RydWN0dXJlLlxyXG4gKiBSZWZlciB0byBHQ1MncyBMaXN0IEFQSSBpZiB5b3Ugd2FudCB0byBsZWFybiBtb3JlLlxyXG4gKlxyXG4gKiBUbyBhZGhlcmUgdG8gRmlyZWJhc2UgUnVsZXMncyBTZW1hbnRpY3MsIEZpcmViYXNlIFN0b3JhZ2UgZG9lcyBub3RcclxuICogc3VwcG9ydCBvYmplY3RzIHdob3NlIHBhdGhzIGVuZCB3aXRoIFwiL1wiIG9yIGNvbnRhaW4gdHdvIGNvbnNlY3V0aXZlXHJcbiAqIFwiL1wicy4gRmlyZWJhc2UgU3RvcmFnZSBMaXN0IEFQSSB3aWxsIGZpbHRlciB0aGVzZSB1bnN1cHBvcnRlZCBvYmplY3RzLlxyXG4gKiBsaXN0KCkgbWF5IGZhaWwgaWYgdGhlcmUgYXJlIHRvbyBtYW55IHVuc3VwcG9ydGVkIG9iamVjdHMgaW4gdGhlIGJ1Y2tldC5cclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gcmVmIC0gU3RvcmFnZVJlZmVyZW5jZSB0byBnZXQgbGlzdCBmcm9tLlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFNlZSBMaXN0T3B0aW9ucyBmb3IgZGV0YWlscy5cclxuICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgaXRlbXMgYW5kIHByZWZpeGVzLlxyXG4gKiAgICAgIGBwcmVmaXhlc2AgY29udGFpbnMgcmVmZXJlbmNlcyB0byBzdWItZm9sZGVycyBhbmQgYGl0ZW1zYFxyXG4gKiAgICAgIGNvbnRhaW5zIHJlZmVyZW5jZXMgdG8gb2JqZWN0cyBpbiB0aGlzIGZvbGRlci4gYG5leHRQYWdlVG9rZW5gXHJcbiAqICAgICAgY2FuIGJlIHVzZWQgdG8gZ2V0IHRoZSByZXN0IG9mIHRoZSByZXN1bHRzLlxyXG4gKi9cclxuZnVuY3Rpb24gbGlzdCQxKHJlZiwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhSZXN1bHRzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZU51bWJlcignb3B0aW9ucy5tYXhSZXN1bHRzJywgXHJcbiAgICAgICAgICAgIC8qIG1pblZhbHVlPSAqLyAxLCBcclxuICAgICAgICAgICAgLyogbWF4VmFsdWU9ICovIDEwMDAsIG9wdGlvbnMubWF4UmVzdWx0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgb3AgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSBsaXN0JDIocmVmLnN0b3JhZ2UsIHJlZi5fbG9jYXRpb24sIFxyXG4gICAgLypkZWxpbWl0ZXI9ICovICcvJywgb3AucGFnZVRva2VuLCBvcC5tYXhSZXN1bHRzKTtcclxuICAgIHJldHVybiByZWYuc3RvcmFnZS5tYWtlUmVxdWVzdFdpdGhUb2tlbnMocmVxdWVzdEluZm8sIG5ld1RleHRDb25uZWN0aW9uKTtcclxufVxyXG4vKipcclxuICogQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBtZXRhZGF0YSBmb3IgdGhpcyBvYmplY3QuIElmIHRoaXNcclxuICogb2JqZWN0IGRvZXNuJ3QgZXhpc3Qgb3IgbWV0YWRhdGEgY2Fubm90IGJlIHJldHJlaXZlZCwgdGhlIHByb21pc2UgaXNcclxuICogcmVqZWN0ZWQuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIFN0b3JhZ2VSZWZlcmVuY2UgdG8gZ2V0IG1ldGFkYXRhIGZyb20uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNZXRhZGF0YSQxKHJlZikge1xyXG4gICAgcmVmLl90aHJvd0lmUm9vdCgnZ2V0TWV0YWRhdGEnKTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gZ2V0TWV0YWRhdGEkMihyZWYuc3RvcmFnZSwgcmVmLl9sb2NhdGlvbiwgZ2V0TWFwcGluZ3MoKSk7XHJcbiAgICByZXR1cm4gcmVmLnN0b3JhZ2UubWFrZVJlcXVlc3RXaXRoVG9rZW5zKHJlcXVlc3RJbmZvLCBuZXdUZXh0Q29ubmVjdGlvbik7XHJcbn1cclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIG1ldGFkYXRhIGZvciB0aGlzIG9iamVjdC5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gcmVmIC0gU3RvcmFnZVJlZmVyZW5jZSB0byB1cGRhdGUgbWV0YWRhdGEgZm9yLlxyXG4gKiBAcGFyYW0gbWV0YWRhdGEgLSBUaGUgbmV3IG1ldGFkYXRhIGZvciB0aGUgb2JqZWN0LlxyXG4gKiAgICAgT25seSB2YWx1ZXMgdGhhdCBoYXZlIGJlZW4gZXhwbGljaXRseSBzZXQgd2lsbCBiZSBjaGFuZ2VkLiBFeHBsaWNpdGx5XHJcbiAqICAgICBzZXR0aW5nIGEgdmFsdWUgdG8gbnVsbCB3aWxsIHJlbW92ZSB0aGUgbWV0YWRhdGEuXHJcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXNcclxuICogICAgIHdpdGggdGhlIG5ldyBtZXRhZGF0YSBmb3IgdGhpcyBvYmplY3QuXHJcbiAqICAgICBTZWUgYGZpcmViYXNlU3RvcmFnZS5SZWZlcmVuY2UucHJvdG90eXBlLmdldE1ldGFkYXRhYFxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlTWV0YWRhdGEkMShyZWYsIG1ldGFkYXRhKSB7XHJcbiAgICByZWYuX3Rocm93SWZSb290KCd1cGRhdGVNZXRhZGF0YScpO1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSB1cGRhdGVNZXRhZGF0YSQyKHJlZi5zdG9yYWdlLCByZWYuX2xvY2F0aW9uLCBtZXRhZGF0YSwgZ2V0TWFwcGluZ3MoKSk7XHJcbiAgICByZXR1cm4gcmVmLnN0b3JhZ2UubWFrZVJlcXVlc3RXaXRoVG9rZW5zKHJlcXVlc3RJbmZvLCBuZXdUZXh0Q29ubmVjdGlvbik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGRvd25sb2FkIFVSTCBmb3IgdGhlIGdpdmVuIFJlZmVyZW5jZS5cclxuICogQHB1YmxpY1xyXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRvd25sb2FkXHJcbiAqICAgICBVUkwgZm9yIHRoaXMgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RG93bmxvYWRVUkwkMShyZWYpIHtcclxuICAgIHJlZi5fdGhyb3dJZlJvb3QoJ2dldERvd25sb2FkVVJMJyk7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IGdldERvd25sb2FkVXJsKHJlZi5zdG9yYWdlLCByZWYuX2xvY2F0aW9uLCBnZXRNYXBwaW5ncygpKTtcclxuICAgIHJldHVybiByZWYuc3RvcmFnZVxyXG4gICAgICAgIC5tYWtlUmVxdWVzdFdpdGhUb2tlbnMocmVxdWVzdEluZm8sIG5ld1RleHRDb25uZWN0aW9uKVxyXG4gICAgICAgIC50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBub0Rvd25sb2FkVVJMKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogRGVsZXRlcyB0aGUgb2JqZWN0IGF0IHRoaXMgbG9jYXRpb24uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIFN0b3JhZ2VSZWZlcmVuY2UgZm9yIG9iamVjdCB0byBkZWxldGUuXHJcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRlbGV0aW9uIHN1Y2NlZWRzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVsZXRlT2JqZWN0JDEocmVmKSB7XHJcbiAgICByZWYuX3Rocm93SWZSb290KCdkZWxldGVPYmplY3QnKTtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gZGVsZXRlT2JqZWN0JDIocmVmLnN0b3JhZ2UsIHJlZi5fbG9jYXRpb24pO1xyXG4gICAgcmV0dXJuIHJlZi5zdG9yYWdlLm1ha2VSZXF1ZXN0V2l0aFRva2VucyhyZXF1ZXN0SW5mbywgbmV3VGV4dENvbm5lY3Rpb24pO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHJlZmVyZW5jZSBmb3Igb2JqZWN0IG9idGFpbmVkIGJ5IGFwcGVuZGluZyBgY2hpbGRQYXRoYCB0byBgcmVmYC5cclxuICpcclxuICogQHBhcmFtIHJlZiAtIFN0b3JhZ2VSZWZlcmVuY2UgdG8gZ2V0IGNoaWxkIG9mLlxyXG4gKiBAcGFyYW0gY2hpbGRQYXRoIC0gQ2hpbGQgcGF0aCBmcm9tIHByb3ZpZGVkIHJlZi5cclxuICogQHJldHVybnMgQSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCBvYnRhaW5lZCBieVxyXG4gKiBhcHBlbmRpbmcgY2hpbGRQYXRoLCByZW1vdmluZyBhbnkgZHVwbGljYXRlLCBiZWdpbm5pbmcsIG9yIHRyYWlsaW5nXHJcbiAqIHNsYXNoZXMuXHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0Q2hpbGQkMShyZWYsIGNoaWxkUGF0aCkge1xyXG4gICAgY29uc3QgbmV3UGF0aCA9IGNoaWxkKHJlZi5fbG9jYXRpb24ucGF0aCwgY2hpbGRQYXRoKTtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0gbmV3IExvY2F0aW9uKHJlZi5fbG9jYXRpb24uYnVja2V0LCBuZXdQYXRoKTtcclxuICAgIHJldHVybiBuZXcgUmVmZXJlbmNlKHJlZi5zdG9yYWdlLCBsb2NhdGlvbik7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNVcmwocGF0aCkge1xyXG4gICAgcmV0dXJuIC9eW0EtWmEtel0rOlxcL1xcLy8udGVzdChwYXRoKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhIGZpcmViYXNlU3RvcmFnZS5SZWZlcmVuY2UgZm9yIHRoZSBnaXZlbiB1cmwuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWZGcm9tVVJMKHNlcnZpY2UsIHVybCkge1xyXG4gICAgcmV0dXJuIG5ldyBSZWZlcmVuY2Uoc2VydmljZSwgdXJsKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhIGZpcmViYXNlU3RvcmFnZS5SZWZlcmVuY2UgZm9yIHRoZSBnaXZlbiBwYXRoIGluIHRoZSBkZWZhdWx0XHJcbiAqIGJ1Y2tldC5cclxuICovXHJcbmZ1bmN0aW9uIHJlZkZyb21QYXRoKHJlZiwgcGF0aCkge1xyXG4gICAgaWYgKHJlZiBpbnN0YW5jZW9mIEZpcmViYXNlU3RvcmFnZUltcGwpIHtcclxuICAgICAgICBjb25zdCBzZXJ2aWNlID0gcmVmO1xyXG4gICAgICAgIGlmIChzZXJ2aWNlLl9idWNrZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBub0RlZmF1bHRCdWNrZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gbmV3IFJlZmVyZW5jZShzZXJ2aWNlLCBzZXJ2aWNlLl9idWNrZXQpO1xyXG4gICAgICAgIGlmIChwYXRoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZkZyb21QYXRoKHJlZmVyZW5jZSwgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVmZXJlbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHJlZiBpcyBhIFJlZmVyZW5jZVxyXG4gICAgICAgIGlmIChwYXRoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9nZXRDaGlsZCQxKHJlZiwgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVmO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZWYkMShzZXJ2aWNlT3JSZWYsIHBhdGhPclVybCkge1xyXG4gICAgaWYgKHBhdGhPclVybCAmJiBpc1VybChwYXRoT3JVcmwpKSB7XHJcbiAgICAgICAgaWYgKHNlcnZpY2VPclJlZiBpbnN0YW5jZW9mIEZpcmViYXNlU3RvcmFnZUltcGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZkZyb21VUkwoc2VydmljZU9yUmVmLCBwYXRoT3JVcmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgaW52YWxpZEFyZ3VtZW50KCdUbyB1c2UgcmVmKHNlcnZpY2UsIHVybCksIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RvcmFnZSBpbnN0YW5jZS4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcmVmRnJvbVBhdGgoc2VydmljZU9yUmVmLCBwYXRoT3JVcmwpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RCdWNrZXQoaG9zdCwgY29uZmlnKSB7XHJcbiAgICBjb25zdCBidWNrZXRTdHJpbmcgPSBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWdbQ09ORklHX1NUT1JBR0VfQlVDS0VUX0tFWV07XHJcbiAgICBpZiAoYnVja2V0U3RyaW5nID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBMb2NhdGlvbi5tYWtlRnJvbUJ1Y2tldFNwZWMoYnVja2V0U3RyaW5nLCBob3N0KTtcclxufVxyXG5mdW5jdGlvbiBjb25uZWN0U3RvcmFnZUVtdWxhdG9yJDEoc3RvcmFnZSwgaG9zdCwgcG9ydCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdG9yYWdlLmhvc3QgPSBgJHtob3N0fToke3BvcnR9YDtcclxuICAgIHN0b3JhZ2UuX3Byb3RvY29sID0gJ2h0dHAnO1xyXG4gICAgY29uc3QgeyBtb2NrVXNlclRva2VuIH0gPSBvcHRpb25zO1xyXG4gICAgaWYgKG1vY2tVc2VyVG9rZW4pIHtcclxuICAgICAgICBzdG9yYWdlLl9vdmVycmlkZUF1dGhUb2tlbiA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBtb2NrVXNlclRva2VuID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgPyBtb2NrVXNlclRva2VuXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZU1vY2tVc2VyVG9rZW4obW9ja1VzZXJUb2tlbiwgc3RvcmFnZS5hcHAub3B0aW9ucy5wcm9qZWN0SWQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBGaXJlYmFzZSBTdG9yYWdlIFJlZmVyZW5jZSBpbnN0YW5jZXMuXHJcbiAqIEBwYXJhbSBvcHRfdXJsIC0gZ3M6Ly8gdXJsIHRvIGEgY3VzdG9tIFN0b3JhZ2UgQnVja2V0XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY2xhc3MgRmlyZWJhc2VTdG9yYWdlSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKlxyXG4gICAgICogRmlyZWJhc2VBcHAgYXNzb2NpYXRlZCB3aXRoIHRoaXMgU3RvcmFnZVNlcnZpY2UgaW5zdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIGFwcCwgX2F1dGhQcm92aWRlciwgXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBfYXBwQ2hlY2tQcm92aWRlciwgXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBfdXJsLCBfZmlyZWJhc2VWZXJzaW9uKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5fYXV0aFByb3ZpZGVyID0gX2F1dGhQcm92aWRlcjtcclxuICAgICAgICB0aGlzLl9hcHBDaGVja1Byb3ZpZGVyID0gX2FwcENoZWNrUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5fdXJsID0gX3VybDtcclxuICAgICAgICB0aGlzLl9maXJlYmFzZVZlcnNpb24gPSBfZmlyZWJhc2VWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMuX2J1Y2tldCA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhpcyBzdHJpbmcgY2FuIGJlIGluIHRoZSBmb3JtYXRzOlxyXG4gICAgICAgICAqIC0gaG9zdFxyXG4gICAgICAgICAqIC0gaG9zdDpwb3J0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faG9zdCA9IERFRkFVTFRfSE9TVDtcclxuICAgICAgICB0aGlzLl9wcm90b2NvbCA9ICdodHRwcyc7XHJcbiAgICAgICAgdGhpcy5fYXBwSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2RlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9tYXhPcGVyYXRpb25SZXRyeVRpbWUgPSBERUZBVUxUX01BWF9PUEVSQVRJT05fUkVUUllfVElNRTtcclxuICAgICAgICB0aGlzLl9tYXhVcGxvYWRSZXRyeVRpbWUgPSBERUZBVUxUX01BWF9VUExPQURfUkVUUllfVElNRTtcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBpZiAoX3VybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1Y2tldCA9IExvY2F0aW9uLm1ha2VGcm9tQnVja2V0U3BlYyhfdXJsLCB0aGlzLl9ob3N0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1Y2tldCA9IGV4dHJhY3RCdWNrZXQodGhpcy5faG9zdCwgdGhpcy5hcHAub3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaG9zdCBzdHJpbmcgZm9yIHRoaXMgc2VydmljZSwgaW4gdGhlIGZvcm0gb2YgYGhvc3RgIG9yXHJcbiAgICAgKiBgaG9zdDpwb3J0YC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGhvc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3Q7XHJcbiAgICB9XHJcbiAgICBzZXQgaG9zdChob3N0KSB7XHJcbiAgICAgICAgdGhpcy5faG9zdCA9IGhvc3Q7XHJcbiAgICAgICAgaWYgKHRoaXMuX3VybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1Y2tldCA9IExvY2F0aW9uLm1ha2VGcm9tQnVja2V0U3BlYyh0aGlzLl91cmwsIGhvc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVja2V0ID0gZXh0cmFjdEJ1Y2tldChob3N0LCB0aGlzLmFwcC5vcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIHRpbWUgdG8gcmV0cnkgdXBsb2FkcyBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXhVcGxvYWRSZXRyeVRpbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heFVwbG9hZFJldHJ5VGltZTtcclxuICAgIH1cclxuICAgIHNldCBtYXhVcGxvYWRSZXRyeVRpbWUodGltZSkge1xyXG4gICAgICAgIHZhbGlkYXRlTnVtYmVyKCd0aW1lJywgXHJcbiAgICAgICAgLyogbWluVmFsdWU9Ki8gMCwgXHJcbiAgICAgICAgLyogbWF4VmFsdWU9ICovIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgdGltZSk7XHJcbiAgICAgICAgdGhpcy5fbWF4VXBsb2FkUmV0cnlUaW1lID0gdGltZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gdGltZSB0byByZXRyeSBvcGVyYXRpb25zIG90aGVyIHRoYW4gdXBsb2FkcyBvciBkb3dubG9hZHMgaW5cclxuICAgICAqIG1pbGxpc2Vjb25kcy5cclxuICAgICAqL1xyXG4gICAgZ2V0IG1heE9wZXJhdGlvblJldHJ5VGltZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWF4T3BlcmF0aW9uUmV0cnlUaW1lO1xyXG4gICAgfVxyXG4gICAgc2V0IG1heE9wZXJhdGlvblJldHJ5VGltZSh0aW1lKSB7XHJcbiAgICAgICAgdmFsaWRhdGVOdW1iZXIoJ3RpbWUnLCBcclxuICAgICAgICAvKiBtaW5WYWx1ZT0qLyAwLCBcclxuICAgICAgICAvKiBtYXhWYWx1ZT0gKi8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCB0aW1lKTtcclxuICAgICAgICB0aGlzLl9tYXhPcGVyYXRpb25SZXRyeVRpbWUgPSB0aW1lO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgX2dldEF1dGhUb2tlbigpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3ZlcnJpZGVBdXRoVG9rZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX292ZXJyaWRlQXV0aFRva2VuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdXRoID0gdGhpcy5fYXV0aFByb3ZpZGVyLmdldEltbWVkaWF0ZSh7IG9wdGlvbmFsOiB0cnVlIH0pO1xyXG4gICAgICAgIGlmIChhdXRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuRGF0YSA9IGF3YWl0IGF1dGguZ2V0VG9rZW4oKTtcclxuICAgICAgICAgICAgaWYgKHRva2VuRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuRGF0YS5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGFzeW5jIF9nZXRBcHBDaGVja1Rva2VuKCkge1xyXG4gICAgICAgIGNvbnN0IGFwcENoZWNrID0gdGhpcy5fYXBwQ2hlY2tQcm92aWRlci5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICAgICAgICBpZiAoYXBwQ2hlY2spIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBwQ2hlY2suZ2V0VG9rZW4oKTtcclxuICAgICAgICAgICAgLy8gVE9ETzogV2hhdCBkbyB3ZSB3YW50IHRvIGRvIGlmIHRoZXJlIGlzIGFuIGVycm9yIGdldHRpbmcgdGhlIHRva2VuP1xyXG4gICAgICAgICAgICAvLyBDb250ZXh0OiBhcHBDaGVjay5nZXRUb2tlbigpIHdpbGwgbmV2ZXIgdGhyb3cgZXZlbiBpZiBhbiBlcnJvciBoYXBwZW5lZC4gSW4gdGhlIGVycm9yIGNhc2UsIGEgZHVtbXkgdG9rZW4gd2lsbCBiZVxyXG4gICAgICAgICAgICAvLyByZXR1cm5lZCBhbG9uZyB3aXRoIGFuIGVycm9yIGZpZWxkIGRlc2NyaWJpbmcgdGhlIGVycm9yLiBJbiBnZW5lcmFsLCB3ZSBzaG91bGRuJ3QgY2FyZSBhYm91dCB0aGUgZXJyb3IgY29uZGl0aW9uIGFuZCBqdXN0IHVzZVxyXG4gICAgICAgICAgICAvLyB0aGUgdG9rZW4gKGFjdHVhbCBvciBkdW1teSkgdG8gc2VuZCByZXF1ZXN0cy5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50b2tlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0b3AgcnVubmluZyByZXF1ZXN0cyBhbmQgcHJldmVudCBtb3JlIGZyb20gYmVpbmcgY3JlYXRlZC5cclxuICAgICAqL1xyXG4gICAgX2RlbGV0ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2gocmVxdWVzdCA9PiByZXF1ZXN0LmNhbmNlbCgpKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbmV3IGZpcmViYXNlU3RvcmFnZS5SZWZlcmVuY2Ugb2JqZWN0IHJlZmVyZW5jaW5nIHRoaXMgU3RvcmFnZVNlcnZpY2VcclxuICAgICAqIGF0IHRoZSBnaXZlbiBMb2NhdGlvbi5cclxuICAgICAqL1xyXG4gICAgX21ha2VTdG9yYWdlUmVmZXJlbmNlKGxvYykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlKHRoaXMsIGxvYyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0SW5mbyAtIEhUVFAgUmVxdWVzdEluZm8gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gYXV0aFRva2VuIC0gRmlyZWJhc2UgYXV0aCB0b2tlblxyXG4gICAgICovXHJcbiAgICBfbWFrZVJlcXVlc3QocmVxdWVzdEluZm8sIHJlcXVlc3RGYWN0b3J5LCBhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4sIHJldHJ5ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZGVsZXRlZCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbWFrZVJlcXVlc3QocmVxdWVzdEluZm8sIHRoaXMuX2FwcElkLCBhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4sIHJlcXVlc3RGYWN0b3J5LCB0aGlzLl9maXJlYmFzZVZlcnNpb24sIHJldHJ5KTtcclxuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMuYWRkKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICAvLyBSZXF1ZXN0IHJlbW92ZXMgaXRzZWxmIGZyb20gc2V0IHdoZW4gY29tcGxldGUuXHJcbiAgICAgICAgICAgIHJlcXVlc3QuZ2V0UHJvbWlzZSgpLnRoZW4oKCkgPT4gdGhpcy5fcmVxdWVzdHMuZGVsZXRlKHJlcXVlc3QpLCAoKSA9PiB0aGlzLl9yZXF1ZXN0cy5kZWxldGUocmVxdWVzdCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmFpbFJlcXVlc3QoYXBwRGVsZXRlZCgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3luYyBtYWtlUmVxdWVzdFdpdGhUb2tlbnMocmVxdWVzdEluZm8sIHJlcXVlc3RGYWN0b3J5KSB7XHJcbiAgICAgICAgY29uc3QgW2F1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIHRoaXMuX2dldEF1dGhUb2tlbigpLFxyXG4gICAgICAgICAgICB0aGlzLl9nZXRBcHBDaGVja1Rva2VuKClcclxuICAgICAgICBdKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QocmVxdWVzdEluZm8sIHJlcXVlc3RGYWN0b3J5LCBhdXRoVG9rZW4sIGFwcENoZWNrVG9rZW4pLmdldFByb21pc2UoKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBuYW1lID0gXCJAZmlyZWJhc2Uvc3RvcmFnZVwiO1xuY29uc3QgdmVyc2lvbiA9IFwiMC45LjEyXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUeXBlIGNvbnN0YW50IGZvciBGaXJlYmFzZSBTdG9yYWdlLlxyXG4gKi9cclxuY29uc3QgU1RPUkFHRV9UWVBFID0gJ3N0b3JhZ2UnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRG93bmxvYWRzIHRoZSBkYXRhIGF0IHRoZSBvYmplY3QncyBsb2NhdGlvbi4gUmV0dXJucyBhbiBlcnJvciBpZiB0aGUgb2JqZWN0XHJcbiAqIGlzIG5vdCBmb3VuZC5cclxuICpcclxuICogVG8gdXNlIHRoaXMgZnVuY3Rpb25hbGl0eSwgeW91IGhhdmUgdG8gd2hpdGVsaXN0IHlvdXIgYXBwJ3Mgb3JpZ2luIGluIHlvdXJcclxuICogQ2xvdWQgU3RvcmFnZSBidWNrZXQuIFNlZSBhbHNvXHJcbiAqIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvY29uZmlndXJpbmctY29yc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSBTdG9yYWdlUmVmZXJlbmNlIHdoZXJlIGRhdGEgc2hvdWxkIGJlIGRvd25sb2FkZWQuXHJcbiAqIEBwYXJhbSBtYXhEb3dubG9hZFNpemVCeXRlcyAtIElmIHNldCwgdGhlIG1heGltdW0gYWxsb3dlZCBzaXplIGluIGJ5dGVzIHRvXHJcbiAqIHJldHJpZXZlLlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgY29udGFpbmluZyB0aGUgb2JqZWN0J3MgYnl0ZXNcclxuICovXHJcbmZ1bmN0aW9uIGdldEJ5dGVzKHJlZiwgbWF4RG93bmxvYWRTaXplQnl0ZXMpIHtcclxuICAgIHJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShyZWYpO1xyXG4gICAgcmV0dXJuIGdldEJ5dGVzSW50ZXJuYWwocmVmLCBtYXhEb3dubG9hZFNpemVCeXRlcyk7XHJcbn1cclxuLyoqXHJcbiAqIFVwbG9hZHMgZGF0YSB0byB0aGlzIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBUaGUgdXBsb2FkIGlzIG5vdCByZXN1bWFibGUuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIHtAbGluayBTdG9yYWdlUmVmZXJlbmNlfSB3aGVyZSBkYXRhIHNob3VsZCBiZSB1cGxvYWRlZC5cclxuICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byB1cGxvYWQuXHJcbiAqIEBwYXJhbSBtZXRhZGF0YSAtIE1ldGFkYXRhIGZvciB0aGUgZGF0YSB0byB1cGxvYWQuXHJcbiAqIEByZXR1cm5zIEEgUHJvbWlzZSBjb250YWluaW5nIGFuIFVwbG9hZFJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gdXBsb2FkQnl0ZXMocmVmLCBkYXRhLCBtZXRhZGF0YSkge1xyXG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XHJcbiAgICByZXR1cm4gdXBsb2FkQnl0ZXMkMShyZWYsIGRhdGEsIG1ldGFkYXRhKTtcclxufVxyXG4vKipcclxuICogVXBsb2FkcyBhIHN0cmluZyB0byB0aGlzIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBUaGUgdXBsb2FkIGlzIG5vdCByZXN1bWFibGUuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIHtAbGluayBTdG9yYWdlUmVmZXJlbmNlfSB3aGVyZSBzdHJpbmcgc2hvdWxkIGJlIHVwbG9hZGVkLlxyXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgc3RyaW5nIHRvIHVwbG9hZC5cclxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBmb3JtYXQgb2YgdGhlIHN0cmluZyB0byB1cGxvYWQuXHJcbiAqIEBwYXJhbSBtZXRhZGF0YSAtIE1ldGFkYXRhIGZvciB0aGUgc3RyaW5nIHRvIHVwbG9hZC5cclxuICogQHJldHVybnMgQSBQcm9taXNlIGNvbnRhaW5pbmcgYW4gVXBsb2FkUmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiB1cGxvYWRTdHJpbmcocmVmLCB2YWx1ZSwgZm9ybWF0LCBtZXRhZGF0YSkge1xyXG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XHJcbiAgICByZXR1cm4gdXBsb2FkU3RyaW5nJDEocmVmLCB2YWx1ZSwgZm9ybWF0LCBtZXRhZGF0YSk7XHJcbn1cclxuLyoqXHJcbiAqIFVwbG9hZHMgZGF0YSB0byB0aGlzIG9iamVjdCdzIGxvY2F0aW9uLlxyXG4gKiBUaGUgdXBsb2FkIGNhbiBiZSBwYXVzZWQgYW5kIHJlc3VtZWQsIGFuZCBleHBvc2VzIHByb2dyZXNzIHVwZGF0ZXMuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHJlZiAtIHtAbGluayBTdG9yYWdlUmVmZXJlbmNlfSB3aGVyZSBkYXRhIHNob3VsZCBiZSB1cGxvYWRlZC5cclxuICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byB1cGxvYWQuXHJcbiAqIEBwYXJhbSBtZXRhZGF0YSAtIE1ldGFkYXRhIGZvciB0aGUgZGF0YSB0byB1cGxvYWQuXHJcbiAqIEByZXR1cm5zIEFuIFVwbG9hZFRhc2tcclxuICovXHJcbmZ1bmN0aW9uIHVwbG9hZEJ5dGVzUmVzdW1hYmxlKHJlZiwgZGF0YSwgbWV0YWRhdGEpIHtcclxuICAgIHJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShyZWYpO1xyXG4gICAgcmV0dXJuIHVwbG9hZEJ5dGVzUmVzdW1hYmxlJDEocmVmLCBkYXRhLCBtZXRhZGF0YSk7XHJcbn1cclxuLyoqXHJcbiAqIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbWV0YWRhdGEgZm9yIHRoaXMgb2JqZWN0LiBJZiB0aGlzXHJcbiAqIG9iamVjdCBkb2Vzbid0IGV4aXN0IG9yIG1ldGFkYXRhIGNhbm5vdCBiZSByZXRyZWl2ZWQsIHRoZSBwcm9taXNlIGlzXHJcbiAqIHJlamVjdGVkLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSB7QGxpbmsgU3RvcmFnZVJlZmVyZW5jZX0gdG8gZ2V0IG1ldGFkYXRhIGZyb20uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNZXRhZGF0YShyZWYpIHtcclxuICAgIHJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShyZWYpO1xyXG4gICAgcmV0dXJuIGdldE1ldGFkYXRhJDEocmVmKTtcclxufVxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgbWV0YWRhdGEgZm9yIHRoaXMgb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSB7QGxpbmsgU3RvcmFnZVJlZmVyZW5jZX0gdG8gdXBkYXRlIG1ldGFkYXRhIGZvci5cclxuICogQHBhcmFtIG1ldGFkYXRhIC0gVGhlIG5ldyBtZXRhZGF0YSBmb3IgdGhlIG9iamVjdC5cclxuICogICAgIE9ubHkgdmFsdWVzIHRoYXQgaGF2ZSBiZWVuIGV4cGxpY2l0bHkgc2V0IHdpbGwgYmUgY2hhbmdlZC4gRXhwbGljaXRseVxyXG4gKiAgICAgc2V0dGluZyBhIHZhbHVlIHRvIG51bGwgd2lsbCByZW1vdmUgdGhlIG1ldGFkYXRhLlxyXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggdGhlIG5ldyBtZXRhZGF0YSBmb3IgdGhpcyBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVNZXRhZGF0YShyZWYsIG1ldGFkYXRhKSB7XHJcbiAgICByZWYgPSBnZXRNb2R1bGFySW5zdGFuY2UocmVmKTtcclxuICAgIHJldHVybiB1cGRhdGVNZXRhZGF0YSQxKHJlZiwgbWV0YWRhdGEpO1xyXG59XHJcbi8qKlxyXG4gKiBMaXN0IGl0ZW1zIChmaWxlcykgYW5kIHByZWZpeGVzIChmb2xkZXJzKSB1bmRlciB0aGlzIHN0b3JhZ2UgcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBMaXN0IEFQSSBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgRmlyZWJhc2UgUnVsZXMgVmVyc2lvbiAyLlxyXG4gKlxyXG4gKiBHQ1MgaXMgYSBrZXktYmxvYiBzdG9yZS4gRmlyZWJhc2UgU3RvcmFnZSBpbXBvc2VzIHRoZSBzZW1hbnRpYyBvZiAnLydcclxuICogZGVsaW1pdGVkIGZvbGRlciBzdHJ1Y3R1cmUuXHJcbiAqIFJlZmVyIHRvIEdDUydzIExpc3QgQVBJIGlmIHlvdSB3YW50IHRvIGxlYXJuIG1vcmUuXHJcbiAqXHJcbiAqIFRvIGFkaGVyZSB0byBGaXJlYmFzZSBSdWxlcydzIFNlbWFudGljcywgRmlyZWJhc2UgU3RvcmFnZSBkb2VzIG5vdFxyXG4gKiBzdXBwb3J0IG9iamVjdHMgd2hvc2UgcGF0aHMgZW5kIHdpdGggXCIvXCIgb3IgY29udGFpbiB0d28gY29uc2VjdXRpdmVcclxuICogXCIvXCJzLiBGaXJlYmFzZSBTdG9yYWdlIExpc3QgQVBJIHdpbGwgZmlsdGVyIHRoZXNlIHVuc3VwcG9ydGVkIG9iamVjdHMuXHJcbiAqIGxpc3QoKSBtYXkgZmFpbCBpZiB0aGVyZSBhcmUgdG9vIG1hbnkgdW5zdXBwb3J0ZWQgb2JqZWN0cyBpbiB0aGUgYnVja2V0LlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSByZWYgLSB7QGxpbmsgU3RvcmFnZVJlZmVyZW5jZX0gdG8gZ2V0IGxpc3QgZnJvbS5cclxuICogQHBhcmFtIG9wdGlvbnMgLSBTZWUge0BsaW5rIExpc3RPcHRpb25zfSBmb3IgZGV0YWlscy5cclxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBpdGVtcyBhbmQgcHJlZml4ZXMuXHJcbiAqICAgICAgYHByZWZpeGVzYCBjb250YWlucyByZWZlcmVuY2VzIHRvIHN1Yi1mb2xkZXJzIGFuZCBgaXRlbXNgXHJcbiAqICAgICAgY29udGFpbnMgcmVmZXJlbmNlcyB0byBvYmplY3RzIGluIHRoaXMgZm9sZGVyLiBgbmV4dFBhZ2VUb2tlbmBcclxuICogICAgICBjYW4gYmUgdXNlZCB0byBnZXQgdGhlIHJlc3Qgb2YgdGhlIHJlc3VsdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0KHJlZiwgb3B0aW9ucykge1xyXG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XHJcbiAgICByZXR1cm4gbGlzdCQxKHJlZiwgb3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIExpc3QgYWxsIGl0ZW1zIChmaWxlcykgYW5kIHByZWZpeGVzIChmb2xkZXJzKSB1bmRlciB0aGlzIHN0b3JhZ2UgcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGEgaGVscGVyIG1ldGhvZCBmb3IgY2FsbGluZyBsaXN0KCkgcmVwZWF0ZWRseSB1bnRpbCB0aGVyZSBhcmVcclxuICogbm8gbW9yZSByZXN1bHRzLiBUaGUgZGVmYXVsdCBwYWdpbmF0aW9uIHNpemUgaXMgMTAwMC5cclxuICpcclxuICogTm90ZTogVGhlIHJlc3VsdHMgbWF5IG5vdCBiZSBjb25zaXN0ZW50IGlmIG9iamVjdHMgYXJlIGNoYW5nZWQgd2hpbGUgdGhpc1xyXG4gKiBvcGVyYXRpb24gaXMgcnVubmluZy5cclxuICpcclxuICogV2FybmluZzogYGxpc3RBbGxgIG1heSBwb3RlbnRpYWxseSBjb25zdW1lIHRvbyBtYW55IHJlc291cmNlcyBpZiB0aGVyZSBhcmVcclxuICogdG9vIG1hbnkgcmVzdWx0cy5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gcmVmIC0ge0BsaW5rIFN0b3JhZ2VSZWZlcmVuY2V9IHRvIGdldCBsaXN0IGZyb20uXHJcbiAqXHJcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbGwgdGhlIGl0ZW1zIGFuZCBwcmVmaXhlcyB1bmRlclxyXG4gKiAgICAgIHRoZSBjdXJyZW50IHN0b3JhZ2UgcmVmZXJlbmNlLiBgcHJlZml4ZXNgIGNvbnRhaW5zIHJlZmVyZW5jZXMgdG9cclxuICogICAgICBzdWItZGlyZWN0b3JpZXMgYW5kIGBpdGVtc2AgY29udGFpbnMgcmVmZXJlbmNlcyB0byBvYmplY3RzIGluIHRoaXNcclxuICogICAgICBmb2xkZXIuIGBuZXh0UGFnZVRva2VuYCBpcyBuZXZlciByZXR1cm5lZC5cclxuICovXHJcbmZ1bmN0aW9uIGxpc3RBbGwocmVmKSB7XHJcbiAgICByZWYgPSBnZXRNb2R1bGFySW5zdGFuY2UocmVmKTtcclxuICAgIHJldHVybiBsaXN0QWxsJDEocmVmKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgZG93bmxvYWQgVVJMIGZvciB0aGUgZ2l2ZW4ge0BsaW5rIFN0b3JhZ2VSZWZlcmVuY2V9LlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSB7QGxpbmsgU3RvcmFnZVJlZmVyZW5jZX0gdG8gZ2V0IHRoZSBkb3dubG9hZCBVUkwgZm9yLlxyXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRvd25sb2FkXHJcbiAqICAgICBVUkwgZm9yIHRoaXMgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RG93bmxvYWRVUkwocmVmKSB7XHJcbiAgICByZWYgPSBnZXRNb2R1bGFySW5zdGFuY2UocmVmKTtcclxuICAgIHJldHVybiBnZXREb3dubG9hZFVSTCQxKHJlZik7XHJcbn1cclxuLyoqXHJcbiAqIERlbGV0ZXMgdGhlIG9iamVjdCBhdCB0aGlzIGxvY2F0aW9uLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSB7QGxpbmsgU3RvcmFnZVJlZmVyZW5jZX0gZm9yIG9iamVjdCB0byBkZWxldGUuXHJcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRlbGV0aW9uIHN1Y2NlZWRzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVsZXRlT2JqZWN0KHJlZikge1xyXG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XHJcbiAgICByZXR1cm4gZGVsZXRlT2JqZWN0JDEocmVmKTtcclxufVxyXG5mdW5jdGlvbiByZWYoc2VydmljZU9yUmVmLCBwYXRoT3JVcmwpIHtcclxuICAgIHNlcnZpY2VPclJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShzZXJ2aWNlT3JSZWYpO1xyXG4gICAgcmV0dXJuIHJlZiQxKHNlcnZpY2VPclJlZiwgcGF0aE9yVXJsKTtcclxufVxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0Q2hpbGQocmVmLCBjaGlsZFBhdGgpIHtcclxuICAgIHJldHVybiBfZ2V0Q2hpbGQkMShyZWYsIGNoaWxkUGF0aCk7XHJcbn1cclxuLyoqXHJcbiAqIEdldHMgYSB7QGxpbmsgRmlyZWJhc2VTdG9yYWdlfSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIEZpcmViYXNlIGFwcC5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gYXBwIC0gRmlyZWJhc2UgYXBwIHRvIGdldCB7QGxpbmsgRmlyZWJhc2VTdG9yYWdlfSBpbnN0YW5jZSBmb3IuXHJcbiAqIEBwYXJhbSBidWNrZXRVcmwgLSBUaGUgZ3M6Ly8gdXJsIHRvIHlvdXIgRmlyZWJhc2UgU3RvcmFnZSBCdWNrZXQuXHJcbiAqIElmIG5vdCBwYXNzZWQsIHVzZXMgdGhlIGFwcCdzIGRlZmF1bHQgU3RvcmFnZSBCdWNrZXQuXHJcbiAqIEByZXR1cm5zIEEge0BsaW5rIEZpcmViYXNlU3RvcmFnZX0gaW5zdGFuY2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRTdG9yYWdlKGFwcCA9IGdldEFwcCgpLCBidWNrZXRVcmwpIHtcclxuICAgIGFwcCA9IGdldE1vZHVsYXJJbnN0YW5jZShhcHApO1xyXG4gICAgY29uc3Qgc3RvcmFnZVByb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgU1RPUkFHRV9UWVBFKTtcclxuICAgIGNvbnN0IHN0b3JhZ2VJbnN0YW5jZSA9IHN0b3JhZ2VQcm92aWRlci5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgIGlkZW50aWZpZXI6IGJ1Y2tldFVybFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBlbXVsYXRvciA9IGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCgnc3RvcmFnZScpO1xyXG4gICAgaWYgKGVtdWxhdG9yKSB7XHJcbiAgICAgICAgY29ubmVjdFN0b3JhZ2VFbXVsYXRvcihzdG9yYWdlSW5zdGFuY2UsIC4uLmVtdWxhdG9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdG9yYWdlSW5zdGFuY2U7XHJcbn1cclxuLyoqXHJcbiAqIE1vZGlmeSB0aGlzIHtAbGluayBGaXJlYmFzZVN0b3JhZ2V9IGluc3RhbmNlIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIENsb3VkIFN0b3JhZ2UgZW11bGF0b3IuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdG9yYWdlIC0gVGhlIHtAbGluayBGaXJlYmFzZVN0b3JhZ2V9IGluc3RhbmNlXHJcbiAqIEBwYXJhbSBob3N0IC0gVGhlIGVtdWxhdG9yIGhvc3QgKGV4OiBsb2NhbGhvc3QpXHJcbiAqIEBwYXJhbSBwb3J0IC0gVGhlIGVtdWxhdG9yIHBvcnQgKGV4OiA1MDAxKVxyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEVtdWxhdG9yIG9wdGlvbnMuIGBvcHRpb25zLm1vY2tVc2VyVG9rZW5gIGlzIHRoZSBtb2NrIGF1dGhcclxuICogdG9rZW4gdG8gdXNlIGZvciB1bml0IHRlc3RpbmcgU2VjdXJpdHkgUnVsZXMuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGNvbm5lY3RTdG9yYWdlRW11bGF0b3Ioc3RvcmFnZSwgaG9zdCwgcG9ydCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICBjb25uZWN0U3RvcmFnZUVtdWxhdG9yJDEoc3RvcmFnZSwgaG9zdCwgcG9ydCwgb3B0aW9ucyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvd25sb2FkcyB0aGUgZGF0YSBhdCB0aGUgb2JqZWN0J3MgbG9jYXRpb24uIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIG9iamVjdFxyXG4gKiBpcyBub3QgZm91bmQuXHJcbiAqXHJcbiAqIFRvIHVzZSB0aGlzIGZ1bmN0aW9uYWxpdHksIHlvdSBoYXZlIHRvIHdoaXRlbGlzdCB5b3VyIGFwcCdzIG9yaWdpbiBpbiB5b3VyXHJcbiAqIENsb3VkIFN0b3JhZ2UgYnVja2V0LiBTZWUgYWxzb1xyXG4gKiBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2NvbmZpZ3VyaW5nLWNvcnNcclxuICpcclxuICogVGhpcyBBUEkgaXMgbm90IGF2YWlsYWJsZSBpbiBOb2RlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSByZWYgLSBTdG9yYWdlUmVmZXJlbmNlIHdoZXJlIGRhdGEgc2hvdWxkIGJlIGRvd25sb2FkZWQuXHJcbiAqIEBwYXJhbSBtYXhEb3dubG9hZFNpemVCeXRlcyAtIElmIHNldCwgdGhlIG1heGltdW0gYWxsb3dlZCBzaXplIGluIGJ5dGVzIHRvXHJcbiAqIHJldHJpZXZlLlxyXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmxvYiBjb250YWluaW5nIHRoZSBvYmplY3QncyBieXRlc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QmxvYihyZWYsIG1heERvd25sb2FkU2l6ZUJ5dGVzKSB7XHJcbiAgICByZWYgPSBnZXRNb2R1bGFySW5zdGFuY2UocmVmKTtcclxuICAgIHJldHVybiBnZXRCbG9iSW50ZXJuYWwocmVmLCBtYXhEb3dubG9hZFNpemVCeXRlcyk7XHJcbn1cclxuLyoqXHJcbiAqIERvd25sb2FkcyB0aGUgZGF0YSBhdCB0aGUgb2JqZWN0J3MgbG9jYXRpb24uIFJhaXNlcyBhbiBlcnJvciBldmVudCBpZiB0aGVcclxuICogb2JqZWN0IGlzIG5vdCBmb3VuZC5cclxuICpcclxuICogVGhpcyBBUEkgaXMgb25seSBhdmFpbGFibGUgaW4gTm9kZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gcmVmIC0gU3RvcmFnZVJlZmVyZW5jZSB3aGVyZSBkYXRhIHNob3VsZCBiZSBkb3dubG9hZGVkLlxyXG4gKiBAcGFyYW0gbWF4RG93bmxvYWRTaXplQnl0ZXMgLSBJZiBzZXQsIHRoZSBtYXhpbXVtIGFsbG93ZWQgc2l6ZSBpbiBieXRlcyB0b1xyXG4gKiByZXRyaWV2ZS5cclxuICogQHJldHVybnMgQSBzdHJlYW0gd2l0aCB0aGUgb2JqZWN0J3MgZGF0YSBhcyBieXRlc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3RyZWFtKHJlZiwgbWF4RG93bmxvYWRTaXplQnl0ZXMpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignZ2V0U3RyZWFtKCkgaXMgb25seSBzdXBwb3J0ZWQgYnkgTm9kZUpTIGJ1aWxkcycpO1xyXG59XG5cbi8qKlxyXG4gKiBDbG91ZCBTdG9yYWdlIGZvciBGaXJlYmFzZVxyXG4gKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGZhY3RvcnkoY29udGFpbmVyLCB7IGluc3RhbmNlSWRlbnRpZmllcjogdXJsIH0pIHtcclxuICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ2F1dGgtaW50ZXJuYWwnKTtcclxuICAgIGNvbnN0IGFwcENoZWNrUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcC1jaGVjay1pbnRlcm5hbCcpO1xyXG4gICAgcmV0dXJuIG5ldyBGaXJlYmFzZVN0b3JhZ2VJbXBsKGFwcCwgYXV0aFByb3ZpZGVyLCBhcHBDaGVja1Byb3ZpZGVyLCB1cmwsIFNES19WRVJTSU9OKTtcclxufVxyXG5mdW5jdGlvbiByZWdpc3RlclN0b3JhZ2UoKSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChTVE9SQUdFX1RZUEUsIGZhY3RvcnksIFwiUFVCTElDXCIgLyogUFVCTElDICovKS5zZXRNdWx0aXBsZUluc3RhbmNlcyh0cnVlKSk7XHJcbiAgICAvL1JVTlRJTUVfRU5WIHdpbGwgYmUgcmVwbGFjZWQgZHVyaW5nIHRoZSBjb21waWxhdGlvbiB0byBcIm5vZGVcIiBmb3Igbm9kZWpzIGFuZCBhbiBlbXB0eSBzdHJpbmcgZm9yIGJyb3dzZXJcclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnJyk7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XHJcbn1cclxucmVnaXN0ZXJTdG9yYWdlKCk7XG5cbmV4cG9ydCB7IFN0cmluZ0Zvcm1hdCwgRmJzQmxvYiBhcyBfRmJzQmxvYiwgTG9jYXRpb24gYXMgX0xvY2F0aW9uLCBUYXNrRXZlbnQgYXMgX1Rhc2tFdmVudCwgVGFza1N0YXRlIGFzIF9UYXNrU3RhdGUsIFVwbG9hZFRhc2sgYXMgX1VwbG9hZFRhc2ssIGRhdGFGcm9tU3RyaW5nIGFzIF9kYXRhRnJvbVN0cmluZywgX2dldENoaWxkLCBpbnZhbGlkQXJndW1lbnQgYXMgX2ludmFsaWRBcmd1bWVudCwgaW52YWxpZFJvb3RPcGVyYXRpb24gYXMgX2ludmFsaWRSb290T3BlcmF0aW9uLCBjb25uZWN0U3RvcmFnZUVtdWxhdG9yLCBkZWxldGVPYmplY3QsIGdldEJsb2IsIGdldEJ5dGVzLCBnZXREb3dubG9hZFVSTCwgZ2V0TWV0YWRhdGEsIGdldFN0b3JhZ2UsIGdldFN0cmVhbSwgbGlzdCwgbGlzdEFsbCwgcmVmLCB1cGRhdGVNZXRhZGF0YSwgdXBsb2FkQnl0ZXMsIHVwbG9hZEJ5dGVzUmVzdW1hYmxlLCB1cGxvYWRTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSBcImZpcmViYXNlL2FwcFwiO1xyXG5pbXBvcnQge1xyXG4gIGdldEF1dGgsXHJcbiAgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkLFxyXG4gIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkLFxyXG4gIG9uQXV0aFN0YXRlQ2hhbmdlZCxcclxuICBjb25uZWN0QXV0aEVtdWxhdG9yLFxyXG59IGZyb20gXCJmaXJlYmFzZS9hdXRoXCI7XHJcbmltcG9ydCB7XHJcbiAgZ2V0RmlyZXN0b3JlLFxyXG4gIGNvbGxlY3Rpb24sXHJcbiAgZ2V0RG9jcyxcclxuICB1cGRhdGVEb2MsXHJcbiAgc2V0RG9jLFxyXG4gIGRvYyxcclxuICBxdWVyeSxcclxuICBsaW1pdCxcclxuICBzdGFydEFmdGVyLFxyXG4gIGVuZEJlZm9yZSxcclxuICBsaW1pdFRvTGFzdCxcclxuICBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IsXHJcbn0gZnJvbSBcImZpcmViYXNlL2ZpcmVzdG9yZVwiO1xyXG5pbXBvcnQgeyBnZXRTdG9yYWdlLCBjb25uZWN0U3RvcmFnZUVtdWxhdG9yIH0gZnJvbSBcImZpcmViYXNlL3N0b3JhZ2VcIjtcclxuXHJcbmNvbnN0IHBhZ2VTaXplID0gMTA7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VJbml0IHtcclxuICAvLyBUT0RPOiBSZXBsYWNlIHRoZSBmb2xsb3dpbmcgd2l0aCB5b3VyIGFwcCdzIEZpcmViYXNlIHByb2plY3QgY29uZmlndXJhdGlvblxyXG4gIGZpcmViYXNlQ29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUNEa0VvdHlBTHl5UzNCOFVVN0tQclNLY1FYamJkc1RLUVwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJqdXBpdG9yMi13ZWJwYWNrLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgcHJvamVjdElkOiBcImp1cGl0b3IyLXdlYnBhY2tcIixcclxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwianVwaXRvcjItd2VicGFjay5hcHBzcG90LmNvbVwiLFxyXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiOTExNjcwNDIzODAwXCIsXHJcbiAgICBhcHBJZDogXCIxOjkxMTY3MDQyMzgwMDp3ZWI6ZWY0MGYzN2I0ZjMzMTMwMDE1Y2IwZFwiLFxyXG4gICAgbWVhc3VyZW1lbnRJZDogXCJHLVY0WkZCUTU1SEZcIixcclxuICB9O1xyXG4gICNhcHAgPSBudWxsO1xyXG4gICNhdXRoID0gbnVsbDtcclxuICAjc3RvcmFnZSA9IG51bGw7XHJcbiAgI2RiID0gbnVsbDtcclxuICAjY3VycmVudFVzZXIgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuI2FwcCA9IGluaXRpYWxpemVBcHAodGhpcy5maXJlYmFzZUNvbmZpZyk7XHJcbiAgICB0aGlzLiNhdXRoID0gZ2V0QXV0aCh0aGlzLiNhcHApO1xyXG4gICAgdGhpcy4jZGIgPSBnZXRGaXJlc3RvcmUodGhpcy4jYXBwKTtcclxuICAgIHRoaXMuI3N0b3JhZ2UgPSBnZXRTdG9yYWdlKHRoaXMuI2FwcCk7XHJcblxyXG4gICAgLy8gaWYgKGxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiKSB7XHJcbiAgICAvLyAgIGNvbm5lY3RBdXRoRW11bGF0b3IodGhpcy4jYXV0aCwgXCJodHRwOi8vbG9jYWxob3N0OjkwOTlcIik7XHJcbiAgICAvLyAgIGNvbm5lY3RGaXJlc3RvcmVFbXVsYXRvcih0aGlzLiNkYiwgXCJsb2NhbGhvc3RcIiwgODA4MCk7XHJcbiAgICAvLyAgIGNvbm5lY3RTdG9yYWdlRW11bGF0b3IodGhpcy4jc3RvcmFnZSwgXCJsb2NhbGhvc3RcIiwgOTE5OSk7XHJcbiAgICAvLyB9XHJcbiAgfVxyXG5cclxuICBnZXQgZ2V0Q3VycmVudHVzZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4jY3VycmVudFVzZXI7XHJcbiAgfVxyXG4gIGdldCBnZXREYigpIHtcclxuICAgIHJldHVybiB0aGlzLiNkYjtcclxuICB9XHJcblxyXG4gIGdldCBnZXRTdG9yYWdlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI3N0b3JhZ2U7XHJcbiAgfVxyXG5cclxuICBnZXQgb3BlcmF0b3JzKCkge1xyXG4gICAgcmV0dXJuIFtcIj09XCJdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2lnblVwKGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCh0aGlzLiNhdXRoLCBlbWFpbCwgcGFzc3dvcmQpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50VXNlciA9IHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudFVzZXI7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaWduSW4oZW1haWwsIHBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQodGhpcy4jYXV0aCwgZW1haWwsIHBhc3N3b3JkKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFVzZXIgPSByZXN1bHQudXNlcjtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudFVzZXI7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBzaWduT3V0KCkge1xyXG4gICAgdGhpcy4jYXV0aC5zaWduT3V0KCk7XHJcbiAgfVxyXG5cclxuICBvbkZpcnN0RGF0YShjb2xsZWN0aW9uTmFtZSwgZmlsdGVycyA9IFtdKSB7XHJcbiAgICBsZXQgcXVvdGVDb2xsZWN0aW9uID0gY29sbGVjdGlvbih0aGlzLiNkYiwgY29sbGVjdGlvbk5hbWUpO1xyXG4gICAgbGV0IGJhc2VGaWx0ZXIgPSBbbGltaXQocGFnZVNpemUpXTtcclxuICAgIGJhc2VGaWx0ZXIgPSBbLi4uZmlsdGVycywgLi4uYmFzZUZpbHRlcl07XHJcbiAgICBsZXQgbXlRdWVyeSA9IHF1ZXJ5KHF1b3RlQ29sbGVjdGlvbiwgLi4uYmFzZUZpbHRlcik7XHJcbiAgICByZXR1cm4gZ2V0RG9jcyhteVF1ZXJ5KTtcclxuICB9XHJcblxyXG4gIG9uTmV4dERhdGEoY29sbGVjdGlvbk5hbWUsIGZpcnN0RG9jLCBsYXN0RG9jLCBmaWx0ZXJzID0gW10pIHtcclxuICAgIGlmICghZmlyc3REb2MgfHwgIWxhc3REb2MpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBuYXZpZ2F0ZSB5ZXRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgcXVvdGVDb2xsZWN0aW9uID0gY29sbGVjdGlvbih0aGlzLiNkYiwgY29sbGVjdGlvbk5hbWUpO1xyXG4gICAgICBsZXQgYmFzZUZpbHRlciA9IFtzdGFydEFmdGVyKGxhc3REb2MpLCBsaW1pdChwYWdlU2l6ZSldO1xyXG4gICAgICBiYXNlRmlsdGVyID0gWy4uLmZpbHRlcnMsIC4uLmJhc2VGaWx0ZXJdO1xyXG5cclxuICAgICAgbGV0IG15UXVlcnkgPSBxdWVyeShxdW90ZUNvbGxlY3Rpb24sIC4uLmJhc2VGaWx0ZXIpO1xyXG4gICAgICByZXR1cm4gZ2V0RG9jcyhteVF1ZXJ5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUHJldkRhdGEoY29sbGVjdGlvbk5hbWUsIGZpcnN0RG9jLCBsYXN0RG9jLCBmaWx0ZXJzID0gW10pIHtcclxuICAgIGlmICghZmlyc3REb2MgfHwgIWxhc3REb2MpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBuYXZpZ2F0ZSB5ZXRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgcXVvdGVDb2xsZWN0aW9uID0gY29sbGVjdGlvbih0aGlzLiNkYiwgY29sbGVjdGlvbk5hbWUpO1xyXG4gICAgICBsZXQgYmFzZUZpbHRlciA9IFtlbmRCZWZvcmUoZmlyc3REb2MpXTtcclxuICAgICAgYmFzZUZpbHRlciA9IFsuLi5maWx0ZXJzLCAuLi5iYXNlRmlsdGVyXTtcclxuICAgICAgbGV0IG15UXVlcnkgPSBxdWVyeShcclxuICAgICAgICBxdW90ZUNvbGxlY3Rpb24sXHJcbiAgICAgICAgLi4uYmFzZUZpbHRlcixcclxuICAgICAgICBsaW1pdFRvTGFzdChwYWdlU2l6ZSlcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIGdldERvY3MobXlRdWVyeSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblVwZGF0ZShjb2xsZWN0aW9uTmFtZSwgZG9jSWQsIHVwZGF0ZU9iaikge1xyXG4gICAgbGV0IGRvY1JlZiA9IGRvYyh0aGlzLiNkYiwgY29sbGVjdGlvbk5hbWUsIGRvY0lkKTtcclxuICAgIHJldHVybiB1cGRhdGVEb2MoZG9jUmVmLCB1cGRhdGVPYmopO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0RG9jdW1lbnQoY29sbGVjdGlvbk5hbWUsdmFsdWUpIHtcclxuICAgIGNvbnN0IHJlZiA9IGNvbGxlY3Rpb24odGhpcy4jZGIsIGNvbGxlY3Rpb25OYW1lKTtcclxuICAgIHJldHVybiBzZXREb2MoZG9jKHJlZiksIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHdhdGNoVXNlcihjYWxsYmFjaykge1xyXG4gICAgb25BdXRoU3RhdGVDaGFuZ2VkKHRoaXMuI2F1dGgsICh1c2VyKSA9PiB7XHJcbiAgICAgIHRoaXMuI2N1cnJlbnRVc2VyID0gdXNlciA/IHVzZXIgOiBudWxsO1xyXG4gICAgICBjYWxsYmFjayh1c2VyID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5jbGFzcyBIdHRwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgY29uc3RydWN0b3IoZXJyb3IpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmNvZGUgPSBlcnJvci5jb2RlO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFwiLi4vYXV0aC9sb2dpbi5zY3NzXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW5pdCB9IGZyb20gXCIuLi91dGlsaXR5L2ZpcmViYXNlXCI7XHJcbiAgY29uc29sZS5sb2coXCJpbml0IGxvZ2luXCIpO1xyXG5cclxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICAkKFwiaW5wdXRbbmFtZT1uYW1lXVwiKS52YWwoXCJraGluZW15YWV6aW5cIik7XHJcbiAgJChcImlucHV0W25hbWU9ZW1haWxdXCIpLnZhbChcImFkbWluQGNzLmNvbVwiKTtcclxuICAkKFwiaW5wdXRbbmFtZT1wYXNzd29yZF1cIikudmFsKFwiYWRtaW5AMTIzXCIpO1xyXG5cclxuICAkKFwiI3NpZ251cF9mb3JtXCIpLm9uKFwic3VibWl0XCIsIHNpZ25pbik7XHJcbn07XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzaWduaW4oZXZlbnQpIHtcclxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGNvbnN0IGZpcmViYXNlID0gbmV3IEZpcmViYXNlSW5pdCgpO1xyXG4gIGNvbnN0IGVtYWlsID0gJChcIiNzaWdudXBfZm9ybSBpbnB1dFtuYW1lPWVtYWlsXVwiKS52YWwoKTtcclxuICBjb25zdCBwYXNzd29yZCA9ICQoXCIjc2lnbnVwX2Zvcm0gaW5wdXRbbmFtZT1wYXNzd29yZF1cIikudmFsKCk7XHJcblxyXG4gIGZpcmViYXNlXHJcbiAgICAuc2lnbkluKGVtYWlsLCBwYXNzd29yZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoXCJxdW90ZS5odG1sXCIpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgYWxlcnQoZXJyb3IpO1xyXG4gICAgfSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJmbGF0IiwiYXJyYXkiLCJjYWxsIiwiY29uY2F0IiwiYXBwbHkiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsIml0ZW0iLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJpc0FycmF5TGlrZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsIm5hbWUiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsInJjdXN0b21Qcm9wIiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJydHJpbUNTUyIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiaXNDdXN0b21Qcm9wIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInN0cmluZ1RvQnl0ZUFycmF5JDEiLCJzdHIiLCJvdXQiLCJjIiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5Iiwid2ViU2FmZSIsImluaXRfIiwiYnl0ZVRvQ2hhck1hcCIsIm91dHB1dCIsImJ5dGUxIiwiaGF2ZUJ5dGUyIiwiYnl0ZTIiLCJoYXZlQnl0ZTMiLCJieXRlMyIsIm91dEJ5dGUxIiwib3V0Qnl0ZTIiLCJvdXRCeXRlMyIsIm91dEJ5dGU0IiwiZW5jb2RlU3RyaW5nIiwiYnRvYSIsImRlY29kZVN0cmluZyIsImJ5dGVzIiwiYzEiLCJjMiIsInUiLCJjMyIsImJ5dGVBcnJheVRvU3RyaW5nIiwiZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkiLCJjaGFyVG9CeXRlTWFwIiwiY2hhckF0IiwiYnl0ZTQiLCJiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyIsInV0ZjhCeXRlcyIsImJhc2U2NEVuY29kZSIsImJhc2U2NERlY29kZSIsIm5hdmlnYXRvciIsImdldERlZmF1bHRzIiwiZ2V0R2xvYmFsIiwiX19GSVJFQkFTRV9ERUZBVUxUU19fIiwiZW52IiwiZGVmYXVsdHNKc29uU3RyaW5nIiwiZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUiLCJjb29raWUiLCJkZWNvZGVkIiwiZ2V0RGVmYXVsdHNGcm9tQ29va2llIiwiaW5mbyIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJwcm9kdWN0TmFtZSIsIl9hIiwiX2IiLCJlbXVsYXRvckhvc3RzIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0Iiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInBvcnQiLCJzdWJzdHJpbmciLCJnZXRFeHBlcmltZW50YWxTZXR0aW5nIiwiUHJvbWlzZSIsIndyYXBDYWxsYmFjayIsImNyZWF0ZU1vY2tVc2VyVG9rZW4iLCJwcm9qZWN0SWQiLCJwcm9qZWN0IiwiaWF0Iiwic3ViIiwidXNlcl9pZCIsInBheWxvYWQiLCJhc3NpZ24iLCJpc3MiLCJhdWQiLCJleHAiLCJhdXRoX3RpbWUiLCJmaXJlYmFzZSIsInNpZ25faW5fcHJvdmlkZXIiLCJpZGVudGl0aWVzIiwic3RyaW5naWZ5IiwiYWxnIiwiRmlyZWJhc2VFcnJvciIsImN1c3RvbURhdGEiLCJzdXBlciIsInNldFByb3RvdHlwZU9mIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJFcnJvckZhY3RvcnkiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJlcnJvcnMiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwiUEFUVEVSTiIsInJlcGxhY2VUZW1wbGF0ZSIsImZ1bGxNZXNzYWdlIiwiYUtleXMiLCJiS2V5cyIsImsiLCJpbmNsdWRlcyIsImFQcm9wIiwiYlByb3AiLCJpc09iamVjdCIsInRoaW5nIiwicXVlcnlzdHJpbmdQYXJhbXMiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImFycmF5VmFsIiwicXVlcnlzdHJpbmdEZWNvZGUiLCJxdWVyeXN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImV4dHJhY3RRdWVyeXN0cmluZyIsInF1ZXJ5U3RhcnQiLCJmcmFnbWVudFN0YXJ0IiwiT2JzZXJ2ZXJQcm94eSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsIm9ic2VydmVycyIsInVuc3Vic2NyaWJlcyIsIm9ic2VydmVyQ291bnQiLCJ0YXNrIiwiZmluYWxpemVkIiwiZm9yRWFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjbG9zZSIsInN1YnNjcmliZSIsIm5leHRPck9ic2VydmVyIiwibWV0aG9kcyIsImltcGxlbWVudHNBbnlNZXRob2RzIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJzZW5kT25lIiwiX2RlbGVnYXRlIiwiQ29tcG9uZW50IiwiaW5zdGFuY2VGYWN0b3J5IiwibXVsdGlwbGVJbnN0YW5jZXMiLCJzZXJ2aWNlUHJvcHMiLCJpbnN0YW50aWF0aW9uTW9kZSIsIm9uSW5zdGFuY2VDcmVhdGVkIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJtb2RlIiwic2V0TXVsdGlwbGVJbnN0YW5jZXMiLCJzZXRTZXJ2aWNlUHJvcHMiLCJzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayIsIkRFRkFVTFRfRU5UUllfTkFNRSIsIlByb3ZpZGVyIiwiY29tcG9uZW50IiwiaW5zdGFuY2VzIiwiTWFwIiwiaW5zdGFuY2VzRGVmZXJyZWQiLCJpbnN0YW5jZXNPcHRpb25zIiwib25Jbml0Q2FsbGJhY2tzIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJpc0luaXRpYWxpemVkIiwic2hvdWxkQXV0b0luaXRpYWxpemUiLCJpbnN0YW5jZSIsImdldE9ySW5pdGlhbGl6ZVNlcnZpY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJnZXRJbW1lZGlhdGUiLCJvcHRpb25hbCIsImdldENvbXBvbmVudCIsInNldENvbXBvbmVudCIsImlzQ29tcG9uZW50RWFnZXIiLCJpbnN0YW5jZURlZmVycmVkIiwiY2xlYXJJbnN0YW5jZSIsImRlbGV0ZSIsInNlcnZpY2VzIiwiZnJvbSIsImFsbCIsIklOVEVSTkFMIiwiX2RlbGV0ZSIsImlzQ29tcG9uZW50U2V0IiwiZ2V0T3B0aW9ucyIsImluaXRpYWxpemUiLCJvbkluaXQiLCJleGlzdGluZ0NhbGxiYWNrcyIsIlNldCIsImV4aXN0aW5nSW5zdGFuY2UiLCJpbnZva2VPbkluaXRDYWxsYmFja3MiLCJjYWxsYmFja3MiLCJDb21wb25lbnRDb250YWluZXIiLCJwcm92aWRlcnMiLCJhZGRDb21wb25lbnQiLCJwcm92aWRlciIsImdldFByb3ZpZGVyIiwiYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJnZXRQcm92aWRlcnMiLCJMb2dMZXZlbCIsImxldmVsU3RyaW5nVG9FbnVtIiwiREVCVUciLCJWRVJCT1NFIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIlNJTEVOVCIsImRlZmF1bHRMb2dMZXZlbCIsIkNvbnNvbGVNZXRob2QiLCJkZWZhdWx0TG9nSGFuZGxlciIsImxvZ1R5cGUiLCJsb2dMZXZlbCIsInRvSVNPU3RyaW5nIiwiTG9nZ2VyIiwiX2xvZ0xldmVsIiwiX2xvZ0hhbmRsZXIiLCJfdXNlckxvZ0hhbmRsZXIiLCJzZXRMb2dMZXZlbCIsImxvZ0hhbmRsZXIiLCJ1c2VyTG9nSGFuZGxlciIsImRlYnVnIiwibG9nIiwiaWRiUHJveHlhYmxlVHlwZXMiLCJjdXJzb3JBZHZhbmNlTWV0aG9kcyIsImN1cnNvclJlcXVlc3RNYXAiLCJXZWFrTWFwIiwidHJhbnNhY3Rpb25Eb25lTWFwIiwidHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwIiwidHJhbnNmb3JtQ2FjaGUiLCJyZXZlcnNlVHJhbnNmb3JtQ2FjaGUiLCJpZGJQcm94eVRyYXBzIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJvYmplY3RTdG9yZSIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJJREJEYXRhYmFzZSIsInRyYW5zYWN0aW9uIiwiSURCQ3Vyc29yIiwiYWR2YW5jZSIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5Iiwic3RvcmVOYW1lcyIsInR4IiwidW5saXN0ZW4iLCJET01FeGNlcHRpb24iLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJPYmplY3RTdG9yZSIsIklEQkluZGV4Iiwic29tZSIsIlByb3h5IiwiSURCUmVxdWVzdCIsInJlcXVlc3QiLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInVzZUluZGV4IiwiaXNXcml0ZSIsInN0b3JlTmFtZSIsInN0b3JlIiwib2xkVHJhcHMiLCJQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsIiwiZ2V0UGxhdGZvcm1JbmZvU3RyaW5nIiwiaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyIiwibGlicmFyeSIsImxvZ1N0cmluZyIsIm5hbWUkbyIsInZlcnNpb24kMSIsImxvZ2dlciIsIlBMQVRGT1JNX0xPR19TVFJJTkciLCJfYXBwcyIsIl9jb21wb25lbnRzIiwiX2FkZENvbXBvbmVudCIsImFwcCIsIl9yZWdpc3RlckNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJoZWFydGJlYXRDb250cm9sbGVyIiwidHJpZ2dlckhlYXJ0YmVhdCIsIkVSUk9SX0ZBQ1RPUlkiLCJGaXJlYmFzZUFwcEltcGwiLCJjb25maWciLCJfaXNEZWxldGVkIiwiX29wdGlvbnMiLCJfY29uZmlnIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIl9jb250YWluZXIiLCJjaGVja0Rlc3Ryb3llZCIsImlzRGVsZXRlZCIsImFwcE5hbWUiLCJTREtfVkVSU0lPTiIsImluaXRpYWxpemVBcHAiLCJyYXdDb25maWciLCJnZXREZWZhdWx0QXBwQ29uZmlnIiwiZXhpc3RpbmdBcHAiLCJuZXdBcHAiLCJnZXRBcHAiLCJyZWdpc3RlclZlcnNpb24iLCJsaWJyYXJ5S2V5T3JOYW1lIiwidmFyaWFudCIsImxpYnJhcnlNaXNtYXRjaCIsInZlcnNpb25NaXNtYXRjaCIsIndhcm5pbmciLCJTVE9SRV9OQU1FIiwiZGJQcm9taXNlIiwiZ2V0RGJQcm9taXNlIiwiYmxvY2tlZCIsInVwZ3JhZGUiLCJibG9ja2luZyIsInRlcm1pbmF0ZWQiLCJpbmRleGVkREIiLCJvcGVuUHJvbWlzZSIsIm9sZFZlcnNpb24iLCJuZXdWZXJzaW9uIiwiZGIiLCJvcGVuREIiLCJjcmVhdGVPYmplY3RTdG9yZSIsIm9yaWdpbmFsRXJyb3JNZXNzYWdlIiwid3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIiLCJoZWFydGJlYXRPYmplY3QiLCJwdXQiLCJjb21wdXRlS2V5IiwiaWRiR2V0RXJyb3IiLCJhcHBJZCIsIkhlYXJ0YmVhdFNlcnZpY2VJbXBsIiwiX2hlYXJ0YmVhdHNDYWNoZSIsIl9zdG9yYWdlIiwiSGVhcnRiZWF0U3RvcmFnZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlUHJvbWlzZSIsInJlYWQiLCJhZ2VudCIsImRhdGUiLCJnZXRVVENEYXRlU3RyaW5nIiwibGFzdFNlbnRIZWFydGJlYXREYXRlIiwiaGVhcnRiZWF0cyIsInNpbmdsZURhdGVIZWFydGJlYXQiLCJoYlRpbWVzdGFtcCIsInZhbHVlT2YiLCJvdmVyd3JpdGUiLCJoZWFydGJlYXRzVG9TZW5kIiwidW5zZW50RW50cmllcyIsImhlYXJ0YmVhdHNDYWNoZSIsIm1heFNpemUiLCJoZWFydGJlYXRFbnRyeSIsImhiIiwiZGF0ZXMiLCJjb3VudEJ5dGVzIiwiZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIiLCJoZWFkZXJTdHJpbmciLCJfY2FuVXNlSW5kZXhlZERCUHJvbWlzZSIsInJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2siLCJwcmVFeGlzdCIsIkRCX0NIRUNLX05BTUUiLCJvbnN1Y2Nlc3MiLCJkZWxldGVEYXRhYmFzZSIsIm9udXBncmFkZW5lZWRlZCIsImlkYkhlYXJ0YmVhdE9iamVjdCIsInJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQiIsImhlYXJ0YmVhdHNPYmplY3QiLCJleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QiLCJfX3Jlc3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInByb2RFcnJvck1hcCIsIl9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWSIsImxvZ0NsaWVudCIsIl9sb2dFcnJvciIsIl9mYWlsIiwiYXV0aE9yQ29kZSIsInJlc3QiLCJjcmVhdGVFcnJvckludGVybmFsIiwiX2NyZWF0ZUVycm9yIiwiZnVsbFBhcmFtcyIsIl9lcnJvckZhY3RvcnkiLCJfYXNzZXJ0IiwiYXNzZXJ0aW9uIiwiZGVidWdGYWlsIiwiZmFpbHVyZSIsImRlYnVnQXNzZXJ0IiwiaW5zdGFuY2VDYWNoZSIsIl9nZXRJbnN0YW5jZSIsImNscyIsIl9nZXRDdXJyZW50VXJsIiwiX2dldEN1cnJlbnRTY2hlbWUiLCJfaXNPbmxpbmUiLCJvbkxpbmUiLCJydW50aW1lIiwiY2hyb21lIiwiYnJvd3NlciIsImlzQnJvd3NlckV4dGVuc2lvbiIsIkRlbGF5Iiwic2hvcnREZWxheSIsImxvbmdEZWxheSIsImlzTW9iaWxlIiwibWluIiwiX2VtdWxhdG9yVXJsIiwicGF0aCIsImVtdWxhdG9yIiwic3RhcnRzV2l0aCIsIkZldGNoUHJvdmlkZXIiLCJzdGF0aWMiLCJmZXRjaEltcGwiLCJoZWFkZXJzSW1wbCIsInJlc3BvbnNlSW1wbCIsImZldGNoIiwiSGVhZGVycyIsIlJlc3BvbnNlIiwiU0VSVkVSX0VSUk9SX01BUCIsIkRFRkFVTFRfQVBJX1RJTUVPVVRfTVMiLCJfYWRkVGlkSWZOZWNlc3NhcnkiLCJhdXRoIiwidGVuYW50SWQiLCJfcGVyZm9ybUFwaVJlcXVlc3QiLCJjdXN0b21FcnJvck1hcCIsIl9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZyIsInF1ZXJ5IiwiYXBpS2V5IiwiX2dldEFkZGl0aW9uYWxIZWFkZXJzIiwibGFuZ3VhZ2VDb2RlIiwiX2dldEZpbmFsVGFyZ2V0IiwiYXBpSG9zdCIsInJlZmVycmVyUG9saWN5IiwiZmV0Y2hGbiIsIl9jYW5Jbml0RW11bGF0b3IiLCJlcnJvck1hcCIsIm5ldHdvcmtUaW1lb3V0IiwiTmV0d29ya1RpbWVvdXQiLCJyYWNlIiwiY2xlYXJOZXR3b3JrVGltZW91dCIsIl9tYWtlVGFnZ2VkRXJyb3IiLCJvayIsImVycm9yTWVzc2FnZSIsInNlcnZlckVycm9yQ29kZSIsInNlcnZlckVycm9yTWVzc2FnZSIsImF1dGhFcnJvciIsIl9lcnJvcldpdGhDdXN0b21NZXNzYWdlIiwiX3BlcmZvcm1TaWduSW5SZXF1ZXN0Iiwic2VydmVyUmVzcG9uc2UiLCJfc2VydmVyUmVzcG9uc2UiLCJhcGlTY2hlbWUiLCJlcnJvclBhcmFtcyIsImVtYWlsIiwicGhvbmVOdW1iZXIiLCJfdG9rZW5SZXNwb25zZSIsInV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyIsInV0Y1RpbWVzdGFtcCIsIk51bWJlciIsImdldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInNlY29uZHNTdHJpbmdUb01pbGxpc2Vjb25kcyIsInNlY29uZHMiLCJfcGFyc2VUb2tlbiIsImFsZ29yaXRobSIsInNpZ25hdHVyZSIsIl9sb2dvdXRJZkludmFsaWRhdGVkIiwidXNlciIsImJ5cGFzc0F1dGhTdGF0ZSIsImlzVXNlckludmFsaWRhdGVkIiwiY3VycmVudFVzZXIiLCJzaWduT3V0IiwiUHJvYWN0aXZlUmVmcmVzaCIsImlzUnVubmluZyIsInRpbWVySWQiLCJlcnJvckJhY2tvZmYiLCJfc3RhcnQiLCJfc3RvcCIsImdldEludGVydmFsIiwid2FzRXJyb3IiLCJzdHNUb2tlbk1hbmFnZXIiLCJleHBpcmF0aW9uVGltZSIsIml0ZXJhdGlvbiIsImdldElkVG9rZW4iLCJVc2VyTWV0YWRhdGEiLCJjcmVhdGVkQXQiLCJsYXN0TG9naW5BdCIsIl9pbml0aWFsaXplVGltZSIsImxhc3RTaWduSW5UaW1lIiwiY3JlYXRpb25UaW1lIiwiX2NvcHkiLCJtZXRhZGF0YSIsInRvSlNPTiIsIl9yZWxvYWRXaXRob3V0U2F2aW5nIiwiaWRUb2tlbiIsImdldEFjY291bnRJbmZvIiwidXNlcnMiLCJjb3JlQWNjb3VudCIsIl9ub3RpZnlSZWxvYWRMaXN0ZW5lciIsIm5ld1Byb3ZpZGVyRGF0YSIsInByb3ZpZGVyVXNlckluZm8iLCJwcm92aWRlcklkIiwicmF3SWQiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwicGhvdG9VcmwiLCJwcm92aWRlckRhdGEiLCJuZXdEYXRhIiwibyIsIm9sZElzQW5vbnltb3VzIiwiaXNBbm9ueW1vdXMiLCJuZXdJc0Fub255bW91cyIsInBhc3N3b3JkSGFzaCIsInVwZGF0ZXMiLCJsb2NhbElkIiwiZW1haWxWZXJpZmllZCIsIlN0c1Rva2VuTWFuYWdlciIsInJlZnJlc2hUb2tlbiIsImFjY2Vzc1Rva2VuIiwiaXNFeHBpcmVkIiwidXBkYXRlRnJvbVNlcnZlclJlc3BvbnNlIiwiZXhwaXJlc0luIiwicGFyc2VkVG9rZW4iLCJfdG9rZW5FeHBpcmVzSW4iLCJ1cGRhdGVUb2tlbnNBbmRFeHBpcmF0aW9uIiwiZm9yY2VSZWZyZXNoIiwicmVmcmVzaCIsImNsZWFyUmVmcmVzaFRva2VuIiwib2xkVG9rZW4iLCJ0b2tlbkFwaUhvc3QiLCJhY2Nlc3NfdG9rZW4iLCJleHBpcmVzX2luIiwicmVmcmVzaF90b2tlbiIsInJlcXVlc3RTdHNUb2tlbiIsImV4cGlyZXNJblNlYyIsIm1hbmFnZXIiLCJfYXNzaWduIiwiX2Nsb25lIiwiX3BlcmZvcm1SZWZyZXNoIiwiYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQiLCJVc2VySW1wbCIsInByb2FjdGl2ZVJlZnJlc2giLCJyZWxvYWRVc2VySW5mbyIsInJlbG9hZExpc3RlbmVyIiwiZ2V0VG9rZW4iLCJfcGVyc2lzdFVzZXJJZkN1cnJlbnQiLCJfbm90aWZ5TGlzdGVuZXJzSWZDdXJyZW50IiwiZ2V0SWRUb2tlblJlc3VsdCIsInVzZXJJbnRlcm5hbCIsImNsYWltcyIsInNpZ25JblByb3ZpZGVyIiwiYXV0aFRpbWUiLCJpc3N1ZWRBdFRpbWUiLCJzaWduSW5TZWNvbmRGYWN0b3IiLCJyZWxvYWQiLCJ1c2VySW5mbyIsIl9vblJlbG9hZCIsIl9zdGFydFByb2FjdGl2ZVJlZnJlc2giLCJfc3RvcFByb2FjdGl2ZVJlZnJlc2giLCJ0b2tlbnNSZWZyZXNoZWQiLCJkZWxldGVBY2NvdW50IiwiX3JlZGlyZWN0RXZlbnRJZCIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsInBsYWluT2JqZWN0VG9rZW5NYW5hZ2VyIiwiZnJvbUpTT04iLCJpZFRva2VuUmVzcG9uc2UiLCJJbk1lbW9yeVBlcnNpc3RlbmNlIiwic3RvcmFnZSIsIl9hZGRMaXN0ZW5lciIsIl9saXN0ZW5lciIsIl9yZW1vdmVMaXN0ZW5lciIsImluTWVtb3J5UGVyc2lzdGVuY2UiLCJfcGVyc2lzdGVuY2VLZXlOYW1lIiwiUGVyc2lzdGVuY2VVc2VyTWFuYWdlciIsInBlcnNpc3RlbmNlIiwidXNlcktleSIsImZ1bGxVc2VyS2V5IiwiZnVsbFBlcnNpc3RlbmNlS2V5IiwiYm91bmRFdmVudEhhbmRsZXIiLCJfb25TdG9yYWdlRXZlbnQiLCJzZXRDdXJyZW50VXNlciIsIl9zZXQiLCJibG9iIiwiX2dldCIsIl9mcm9tSlNPTiIsInJlbW92ZUN1cnJlbnRVc2VyIiwiX3JlbW92ZSIsInNhdmVQZXJzaXN0ZW5jZUZvclJlZGlyZWN0IiwibmV3UGVyc2lzdGVuY2UiLCJnZXRDdXJyZW50VXNlciIsInBlcnNpc3RlbmNlSGllcmFyY2h5IiwiYXZhaWxhYmxlUGVyc2lzdGVuY2VzIiwiX2lzQXZhaWxhYmxlIiwic2VsZWN0ZWRQZXJzaXN0ZW5jZSIsInVzZXJUb01pZ3JhdGUiLCJtaWdyYXRpb25IaWVyYXJjaHkiLCJfc2hvdWxkQWxsb3dNaWdyYXRpb24iLCJfZ2V0QnJvd3Nlck5hbWUiLCJ1c2VyQWdlbnQiLCJ1YSIsIl9pc0lFTW9iaWxlIiwiX2lzRmlyZWZveCIsIl9pc0JsYWNrQmVycnkiLCJfaXNXZWJPUyIsIl9pc1NhZmFyaSIsIl9pc0Nocm9tZUlPUyIsIl9pc0FuZHJvaWQiLCJyZSIsIl9pc0lPUyIsIl9pc01vYmlsZUJyb3dzZXIiLCJfZ2V0Q2xpZW50VmVyc2lvbiIsImNsaWVudFBsYXRmb3JtIiwiZnJhbWV3b3JrcyIsInJlcG9ydGVkUGxhdGZvcm0iLCJBdXRoTWlkZGxld2FyZVF1ZXVlIiwicHVzaENhbGxiYWNrIiwib25BYm9ydCIsIndyYXBwZWRDYWxsYmFjayIsIm5leHRVc2VyIiwib25BYm9ydFN0YWNrIiwiYmVmb3JlU3RhdGVDYWxsYmFjayIsIm9yaWdpbmFsTWVzc2FnZSIsIkF1dGhJbXBsIiwiaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIiwiZW11bGF0b3JDb25maWciLCJvcGVyYXRpb25zIiwiYXV0aFN0YXRlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwiaWRUb2tlblN1YnNjcmlwdGlvbiIsImJlZm9yZVN0YXRlUXVldWUiLCJyZWRpcmVjdFVzZXIiLCJpc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkIiwiX2lzSW5pdGlhbGl6ZWQiLCJfZGVsZXRlZCIsIl9pbml0aWFsaXphdGlvblByb21pc2UiLCJfcG9wdXBSZWRpcmVjdFJlc29sdmVyIiwibGFzdE5vdGlmaWVkVWlkIiwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nIiwiY2xpZW50VmVyc2lvbiIsInNka0NsaWVudFZlcnNpb24iLCJfaW5pdGlhbGl6ZVdpdGhQZXJzaXN0ZW5jZSIsInBvcHVwUmVkaXJlY3RSZXNvbHZlciIsInBlcnNpc3RlbmNlTWFuYWdlciIsIl9zaG91bGRJbml0UHJvYWN0aXZlbHkiLCJfaW5pdGlhbGl6ZSIsImluaXRpYWxpemVDdXJyZW50VXNlciIsImFzc2VydGVkUGVyc2lzdGVuY2UiLCJfY3VycmVudFVzZXIiLCJfdXBkYXRlQ3VycmVudFVzZXIiLCJwcmV2aW91c2x5U3RvcmVkVXNlciIsImZ1dHVyZUN1cnJlbnRVc2VyIiwibmVlZHNUb2NoZWNrTWlkZGxld2FyZSIsImF1dGhEb21haW4iLCJnZXRPckluaXRSZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlciIsInJlZGlyZWN0VXNlckV2ZW50SWQiLCJzdG9yZWRVc2VyRXZlbnRJZCIsInRyeVJlZGlyZWN0U2lnbkluIiwiZGlyZWN0bHlTZXRDdXJyZW50VXNlciIsInJ1bk1pZGRsZXdhcmUiLCJfb3ZlcnJpZGVSZWRpcmVjdFJlc3VsdCIsInJlbG9hZEFuZFNldEN1cnJlbnRVc2VyT3JDbGVhciIsInJlZGlyZWN0UmVzb2x2ZXIiLCJfY29tcGxldGVSZWRpcmVjdEZuIiwiX3NldFJlZGlyZWN0VXNlciIsInVzZURldmljZUxhbmd1YWdlIiwibmF2aWdhdG9yTGFuZ3VhZ2UiLCJsYW5ndWFnZXMiLCJsYW5ndWFnZSIsIl9nZXRVc2VyTGFuZ3VhZ2UiLCJ1c2VyRXh0ZXJuIiwic2tpcEJlZm9yZVN0YXRlQ2FsbGJhY2tzIiwibm90aWZ5QXV0aExpc3RlbmVycyIsInJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyIiwic2V0UGVyc2lzdGVuY2UiLCJfZ2V0UGVyc2lzdGVuY2UiLCJfdXBkYXRlRXJyb3JNYXAiLCJvbkF1dGhTdGF0ZUNoYW5nZWQiLCJyZWdpc3RlclN0YXRlTGlzdGVuZXIiLCJiZWZvcmVBdXRoU3RhdGVDaGFuZ2VkIiwib25JZFRva2VuQ2hhbmdlZCIsInJlZGlyZWN0TWFuYWdlciIsInJlc29sdmVyIiwiX3JlZGlyZWN0UGVyc2lzdGVuY2UiLCJjdXJyZW50VWlkIiwic3Vic2NyaXB0aW9uIiwiY2IiLCJhZGRPYnNlcnZlciIsImFjdGlvbiIsIl9sb2dGcmFtZXdvcmsiLCJmcmFtZXdvcmsiLCJfZ2V0RnJhbWV3b3JrcyIsImhlYXJ0YmVhdHNIZWFkZXIiLCJnZXRIZWFydGJlYXRzSGVhZGVyIiwiX2Nhc3RBdXRoIiwiY3JlYXRlU3Vic2NyaWJlIiwiZXh0cmFjdFByb3RvY29sIiwicHJvdG9jb2xFbmQiLCJzdWJzdHIiLCJwYXJzZVBvcnQiLCJwb3J0U3RyIiwiQXV0aENyZWRlbnRpYWwiLCJzaWduSW5NZXRob2QiLCJfZ2V0SWRUb2tlblJlc3BvbnNlIiwiX2F1dGgiLCJfbGlua1RvSWRUb2tlbiIsIl9pZFRva2VuIiwiX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlciIsIkVtYWlsQXV0aENyZWRlbnRpYWwiLCJfZW1haWwiLCJfcGFzc3dvcmQiLCJfdGVuYW50SWQiLCJvb2JDb2RlIiwiX2Zyb21FbWFpbEFuZFBhc3N3b3JkIiwiX2Zyb21FbWFpbEFuZENvZGUiLCJzaWduSW5XaXRoUGFzc3dvcmQiLCJyZXR1cm5TZWN1cmVUb2tlbiIsInNpZ25JbldpdGhFbWFpbExpbmskMSIsInVwZGF0ZUVtYWlsUGFzc3dvcmQiLCJzaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZyIsInNpZ25JbldpdGhJZHAiLCJPQXV0aENyZWRlbnRpYWwiLCJwZW5kaW5nVG9rZW4iLCJjcmVkIiwib2F1dGhUb2tlbiIsIm9hdXRoVG9rZW5TZWNyZXQiLCJzZWNyZXQiLCJidWlsZFJlcXVlc3QiLCJhdXRvQ3JlYXRlIiwicmVxdWVzdFVyaSIsInBvc3RCb2R5IiwiVkVSSUZZX1BIT05FX05VTUJFUl9GT1JfRVhJU1RJTkdfRVJST1JfTUFQXyIsIlBob25lQXV0aENyZWRlbnRpYWwiLCJ2ZXJpZmljYXRpb25JZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJ0ZW1wb3JhcnlQcm9vZiIsInNpZ25JbldpdGhQaG9uZU51bWJlciQxIiwiX21ha2VWZXJpZmljYXRpb25SZXF1ZXN0IiwibGlua1dpdGhQaG9uZU51bWJlciQxIiwib3BlcmF0aW9uIiwidmVyaWZ5UGhvbmVOdW1iZXJGb3JFeGlzdGluZyIsInNlc3Npb25JbmZvIiwiQWN0aW9uQ29kZVVSTCIsImFjdGlvbkxpbmsiLCJzZWFyY2hQYXJhbXMiLCJwYXJzZU1vZGUiLCJjb250aW51ZVVybCIsImxpbmsiLCJkb3VibGVEZWVwTGluayIsImlPU0RlZXBMaW5rIiwicGFyc2VEZWVwTGluayIsIkVtYWlsQXV0aFByb3ZpZGVyIiwiUFJPVklERVJfSUQiLCJlbWFpbExpbmsiLCJhY3Rpb25Db2RlVXJsIiwicGFyc2VMaW5rIiwiRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0QiLCJFTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EIiwiRmVkZXJhdGVkQXV0aFByb3ZpZGVyIiwiZGVmYXVsdExhbmd1YWdlQ29kZSIsImN1c3RvbVBhcmFtZXRlcnMiLCJzZXREZWZhdWx0TGFuZ3VhZ2UiLCJzZXRDdXN0b21QYXJhbWV0ZXJzIiwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzIiwiZ2V0Q3VzdG9tUGFyYW1ldGVycyIsIkJhc2VPQXV0aFByb3ZpZGVyIiwic2NvcGVzIiwiYWRkU2NvcGUiLCJnZXRTY29wZXMiLCJGYWNlYm9va0F1dGhQcm92aWRlciIsIl9mcm9tUGFyYW1zIiwiRkFDRUJPT0tfU0lHTl9JTl9NRVRIT0QiLCJ1c2VyQ3JlZGVudGlhbCIsImNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0IiwidG9rZW5SZXNwb25zZSIsIm9hdXRoQWNjZXNzVG9rZW4iLCJjcmVkZW50aWFsIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwiR09PR0xFX1NJR05fSU5fTUVUSE9EIiwib2F1dGhJZFRva2VuIiwiR2l0aHViQXV0aFByb3ZpZGVyIiwiR0lUSFVCX1NJR05fSU5fTUVUSE9EIiwiVHdpdHRlckF1dGhQcm92aWRlciIsIlRXSVRURVJfU0lHTl9JTl9NRVRIT0QiLCJVc2VyQ3JlZGVudGlhbEltcGwiLCJvcGVyYXRpb25UeXBlIiwiX2Zyb21JZFRva2VuUmVzcG9uc2UiLCJwcm92aWRlcklkRm9yUmVzcG9uc2UiLCJfdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkiLCJNdWx0aUZhY3RvckVycm9yIiwiX3Byb2Nlc3NDcmVkZW50aWFsU2F2aW5nTWZhQ29udGV4dElmTmVjZXNzYXJ5IiwiX2Zyb21FcnJvckFuZE9wZXJhdGlvbiIsIl9zaWduSW5XaXRoQ3JlZGVudGlhbCIsIlNUT1JBR0VfQVZBSUxBQkxFX0tFWSIsIkJyb3dzZXJQZXJzaXN0ZW5jZUNsYXNzIiwic3RvcmFnZVJldHJpZXZlciIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsIkJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlIiwibG9jYWxTdG9yYWdlIiwicG9sbCIsIm9uU3RvcmFnZUV2ZW50IiwibGlzdGVuZXJzIiwibG9jYWxDYWNoZSIsInBvbGxUaW1lciIsInNhZmFyaUxvY2FsU3RvcmFnZU5vdFN5bmNlZCIsIl9pZnJhbWVDYW5ub3RTeW5jV2ViU3RvcmFnZSIsIl9pc0lmcmFtZSIsImZhbGxiYWNrVG9Qb2xsaW5nIiwiZm9yQWxsQ2hhbmdlZEtleXMiLCJvbGRWYWx1ZSIsIl9vbGRWYWx1ZSIsIm5vdGlmeUxpc3RlbmVycyIsImRldGFjaExpc3RlbmVyIiwic3RvcFBvbGxpbmciLCJzdG9yZWRWYWx1ZSIsInRyaWdnZXJMaXN0ZW5lcnMiLCJpc0lFIiwiZG9jdW1lbnRNb2RlIiwibGlzdGVuZXIiLCJzdGFydFBvbGxpbmciLCJzZXRJbnRlcnZhbCIsIlN0b3JhZ2VFdmVudCIsImNsZWFySW50ZXJ2YWwiLCJhdHRhY2hMaXN0ZW5lciIsInNpemUiLCJicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSIsIkJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UiLCJzZXNzaW9uU3RvcmFnZSIsImJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UiLCJSZWNlaXZlciIsImV2ZW50VGFyZ2V0IiwiaGFuZGxlcnNNYXAiLCJoYW5kbGVFdmVudCIsInJlY2VpdmVycyIsImlzTGlzdGVuaW5ndG8iLCJuZXdJbnN0YW5jZSIsIm1lc3NhZ2VFdmVudCIsImV2ZW50SWQiLCJldmVudFR5cGUiLCJwb3J0cyIsInBvc3RNZXNzYWdlIiwicHJvbWlzZXMiLCJvcmlnaW4iLCJmdWxmaWxsZWQiLCJyZWFzb24iLCJfYWxsU2V0dGxlZCIsIl9zdWJzY3JpYmUiLCJldmVudEhhbmRsZXIiLCJfdW5zdWJzY3JpYmUiLCJfZ2VuZXJhdGVFdmVudElkIiwiZGlnaXRzIiwiZmxvb3IiLCJTZW5kZXIiLCJyZW1vdmVNZXNzYWdlSGFuZGxlciIsIm1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbk1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsImNvbXBsZXRpb25UaW1lciIsImFja1RpbWVyIiwicG9ydDIiLCJmaW5hbGx5IiwiX3dpbmRvdyIsIl9pc1dvcmtlciIsIkRCX09CSkVDVFNUT1JFX05BTUUiLCJEQl9EQVRBX0tFWVBBVEgiLCJEQlByb21pc2UiLCJ0b1Byb21pc2UiLCJnZXRPYmplY3RTdG9yZSIsImlzUmVhZFdyaXRlIiwiX29wZW5EYXRhYmFzZSIsImtleVBhdGgiLCJfZGVsZXRlRGF0YWJhc2UiLCJfcHV0T2JqZWN0IiwiX2RlbGV0ZU9iamVjdCIsIkluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UiLCJwZW5kaW5nV3JpdGVzIiwic2VuZGVyIiwic2VydmljZVdvcmtlclJlY2VpdmVyQXZhaWxhYmxlIiwiYWN0aXZlU2VydmljZVdvcmtlciIsIl93b3JrZXJJbml0aWFsaXphdGlvblByb21pc2UiLCJpbml0aWFsaXplU2VydmljZVdvcmtlck1lc3NhZ2luZyIsIm9wIiwibnVtQXR0ZW1wdHMiLCJfb3BlbkRiIiwiaW5pdGlhbGl6ZVJlY2VpdmVyIiwiaW5pdGlhbGl6ZVNlbmRlciIsIl9vcmlnaW4iLCJrZXlQcm9jZXNzZWQiLCJfcG9sbCIsInNlcnZpY2VXb3JrZXIiLCJfZ2V0QWN0aXZlU2VydmljZVdvcmtlciIsIl9zZW5kIiwiY29udHJvbGxlciIsIl9nZXRTZXJ2aWNlV29ya2VyQ29udHJvbGxlciIsIndyaXRlIiwiX3dpdGhQZW5kaW5nV3JpdGUiLCJfd2l0aFJldHJpZXMiLCJub3RpZnlTZXJ2aWNlV29ya2VyIiwiZ2V0T2JqZWN0IiwiZ2V0QWxsUmVxdWVzdCIsImtleXNJblJlc3VsdCIsImZiYXNlX2tleSIsImxvY2FsS2V5IiwiaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSIsIl9nZW5lcmF0ZUNhbGxiYWNrTmFtZSIsIlBob25lQXV0aFByb3ZpZGVyIiwidmVyaWZ5UGhvbmVOdW1iZXIiLCJwaG9uZU9wdGlvbnMiLCJhcHBsaWNhdGlvblZlcmlmaWVyIiwidmVyaWZpZXIiLCJyZWNhcHRjaGFUb2tlbiIsInZlcmlmeSIsInBob25lSW5mb09wdGlvbnMiLCJzZXNzaW9uIiwic3RhcnRFbnJvbGxQaG9uZU1mYSIsInBob25lRW5yb2xsbWVudEluZm8iLCJwaG9uZVNlc3Npb25JbmZvIiwibWZhRW5yb2xsbWVudElkIiwibXVsdGlGYWN0b3JIaW50IiwibXVsdGlGYWN0b3JVaWQiLCJzdGFydFNpZ25JblBob25lTWZhIiwibWZhUGVuZGluZ0NyZWRlbnRpYWwiLCJwaG9uZVNpZ25JbkluZm8iLCJwaG9uZVJlc3BvbnNlSW5mbyIsInNlbmRQaG9uZVZlcmlmaWNhdGlvbkNvZGUiLCJfcmVzZXQiLCJfdmVyaWZ5UGhvbmVOdW1iZXIiLCJfZnJvbVZlcmlmaWNhdGlvbiIsIl9mcm9tVG9rZW5SZXNwb25zZSIsIlBIT05FX1NJR05fSU5fTUVUSE9EIiwiSWRwQ3JlZGVudGlhbCIsIl9idWlsZElkcFJlcXVlc3QiLCJzZXNzaW9uSWQiLCJyZXR1cm5JZHBDcmVkZW50aWFsIiwiX3NpZ25JbiIsIl9yZWF1dGgiLCJfZm9yT3BlcmF0aW9uIiwiX3JlYXV0aGVudGljYXRlIiwiX2xpbmsiLCJfbGluayQxIiwiQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIiwicGVuZGluZ1Byb21pc2UiLCJldmVudE1hbmFnZXIiLCJleGVjdXRlIiwib25FeGVjdXRpb24iLCJyZWdpc3RlckNvbnN1bWVyIiwidXJsUmVzcG9uc2UiLCJnZXRJZHBUYXNrIiwib25FcnJvciIsInVucmVnaXN0ZXJBbmRDbGVhblVwIiwidW5yZWdpc3RlckNvbnN1bWVyIiwiY2xlYW5VcCIsIl9QT0xMX1dJTkRPV19DTE9TRV9USU1FT1VUIiwiUG9wdXBPcGVyYXRpb24iLCJhdXRoV2luZG93IiwicG9sbElkIiwiY3VycmVudFBvcHVwQWN0aW9uIiwiY2FuY2VsIiwiX29wZW5Qb3B1cCIsImFzc29jaWF0ZWRFdmVudCIsIl9vcmlnaW5WYWxpZGF0aW9uIiwiX2lzSWZyYW1lV2ViU3RvcmFnZVN1cHBvcnRlZCIsImlzU3VwcG9ydGVkIiwicG9sbFVzZXJDYW5jZWxsYXRpb24iLCJjbG9zZWQiLCJyZWRpcmVjdE91dGNvbWVNYXAiLCJSZWRpcmVjdEFjdGlvbiIsInJlYWR5T3V0Y29tZSIsInBlbmRpbmdSZWRpcmVjdEtleSIsInJlc29sdmVyUGVyc2lzdGVuY2UiLCJoYXNQZW5kaW5nUmVkaXJlY3QiLCJfZ2V0QW5kQ2xlYXJQZW5kaW5nUmVkaXJlY3RTdGF0dXMiLCJvbkF1dGhFdmVudCIsIl9yZWRpcmVjdFVzZXJGb3JJZCIsIl9nZXRSZWRpcmVjdFJlc3VsdCIsInJlc29sdmVyRXh0ZXJuIiwiYXV0aEludGVybmFsIiwicmVzb2x2ZXJPdmVycmlkZSIsIl93aXRoRGVmYXVsdFJlc29sdmVyIiwiQXV0aEV2ZW50TWFuYWdlciIsImNhY2hlZEV2ZW50VWlkcyIsImNvbnN1bWVycyIsInF1ZXVlZFJlZGlyZWN0RXZlbnQiLCJoYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QiLCJsYXN0UHJvY2Vzc2VkRXZlbnRUaW1lIiwiYXV0aEV2ZW50Q29uc3VtZXIiLCJpc0V2ZW50Rm9yQ29uc3VtZXIiLCJzZW5kVG9Db25zdW1lciIsInNhdmVFdmVudFRvQ2FjaGUiLCJvbkV2ZW50IiwiaGFzRXZlbnRCZWVuSGFuZGxlZCIsImhhbmRsZWQiLCJjb25zdW1lciIsImlzTnVsbFJlZGlyZWN0RXZlbnQiLCJpc1JlZGlyZWN0RXZlbnQiLCJldmVudElkTWF0Y2hlcyIsImNsZWFyIiwiZXZlbnRVaWQiLCJJUF9BRERSRVNTX1JFR0VYIiwiSFRUUF9SRUdFWCIsIm1hdGNoRG9tYWluIiwiZXhwZWN0ZWQiLCJjdXJyZW50VXJsIiwiaG9zdG5hbWUiLCJVUkwiLCJjZVVybCIsImVzY2FwZWREb21haW5QYXR0ZXJuIiwiTkVUV09SS19USU1FT1VUIiwicmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzIiwiYmVhY29uIiwiX19fanNsIiwiSCIsImhpbnQiLCJyIiwiTCIsIkNQIiwiY2FjaGVkR0FwaUxvYWRlciIsIl9sb2FkR2FwaSIsImxvYWRHYXBpSWZyYW1lIiwiZ2FwaSIsImlmcmFtZXMiLCJnZXRDb250ZXh0IiwiSWZyYW1lIiwiY2JOYW1lIiwiZ2V0U2NyaXB0UGFyZW50RWxlbWVudCIsImxvYWRHYXBpIiwiUElOR19USU1FT1VUIiwiSUZSQU1FX0FUVFJJQlVURVMiLCJFSURfRlJPTV9BUElIT1NUIiwiZ2V0SWZyYW1lVXJsIiwiZWlkIiwiZnciLCJCQVNFX1BPUFVQX09QVElPTlMiLCJyZXNpemFibGUiLCJzdGF0dXNiYXIiLCJ0b29sYmFyIiwiQXV0aFBvcHVwIiwiX2dldFJlZGlyZWN0VXJsIiwiYXV0aFR5cGUiLCJyZWRpcmVjdFVybCIsImFkZGl0aW9uYWxQYXJhbXMiLCJpc0VtcHR5IiwidGlkIiwicGFyYW1zRGljdCIsImdldEhhbmRsZXJCYXNlIiwiV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVkiLCJicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyIiwiZXZlbnRNYW5hZ2VycyIsIm9yaWdpblZhbGlkYXRpb25Qcm9taXNlcyIsInNjcmVlbiIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInNjcm9sbGJhcnMiLCJvcHRpb25zU3RyaW5nIiwicmVkdWNlIiwiYWNjdW0iLCJzdGFuZGFsb25lIiwiX2lzSU9TU3RhbmRhbG9uZSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50Iiwib3BlbkFzTmV3V2luZG93SU9TIiwibmV3V2luIiwiX29wZW4iLCJpbml0QW5kR2V0TWFuYWdlciIsImlmcmFtZSIsIndoZXJlIiwibWVzc2FnZUhhbmRsZXJzRmlsdGVyIiwiQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSIiwiZG9udGNsZWFyIiwicmVzdHlsZSIsInNldEhpZGVPbkxlYXZlIiwibmV0d29ya0Vycm9yIiwibmV0d29ya0Vycm9yVGltZXIiLCJjbGVhclRpbWVyQW5kUmVzb2x2ZSIsInBpbmciLCJfb3BlbklmcmFtZSIsInJlZ2lzdGVyIiwiaWZyYW1lRXZlbnQiLCJhdXRoRXZlbnQiLCJhdXRob3JpemVkRG9tYWlucyIsIl9nZXRQcm9qZWN0Q29uZmlnIiwiZG9tYWluIiwiX3ZhbGlkYXRlT3JpZ2luIiwiQXV0aEludGVyb3AiLCJpbnRlcm5hbExpc3RlbmVycyIsImdldFVpZCIsImFzc2VydEF1dGhDb25maWd1cmVkIiwiYWRkQXV0aFRva2VuTGlzdGVuZXIiLCJ1bnN1YnNjcmliZSIsInVwZGF0ZVByb2FjdGl2ZVJlZnJlc2giLCJyZW1vdmVBdXRoVG9rZW5MaXN0ZW5lciIsImF1dGhJZFRva2VuTWF4QWdlIiwibGFzdFBvc3RlZElkVG9rZW4iLCJnZXRBdXRoIiwiZGVwcyIsImluaXRpYWxpemVBdXRoIiwiYXV0aFRva2VuU3luY1VybCIsIm1pbnRDb29raWUiLCJpZFRva2VuUmVzdWx0IiwiaWRUb2tlbkFnZSIsImF1dGhFbXVsYXRvckhvc3QiLCJkaXNhYmxlV2FybmluZ3MiLCJhdXRob3JpdHkiLCJob3N0QW5kUG9ydCIsImJyYWNrZXRlZElQdjYiLCJleHRyYWN0SG9zdEFuZFBvcnQiLCJmcmVlemUiLCJhdHRhY2hCYW5uZXIiLCJzdHkiLCJpbm5lclRleHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsImJvdHRvbSIsInpJbmRleCIsInRleHRBbGlnbiIsImNsYXNzTGlzdCIsImVtaXRFbXVsYXRvcldhcm5pbmciLCJjb25uZWN0QXV0aEVtdWxhdG9yIiwiYXV0aEluc3RhbmNlIiwiaGllcmFyY2h5IiwiX2luaXRpYWxpemVBdXRoSW5zdGFuY2UiLCJfaW5zdGFuY2VJZGVudGlmaWVyIiwiX2luc3RhbmNlIiwiZ2V0VmVyc2lvbkZvclBsYXRmb3JtIiwiY29tbW9uanNHbG9iYWwiLCJlc20iLCJnb29nIiwiYWEiLCJiYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiZCIsInEiLCJpYSIsIlgiLCJXYiIsImYiLCJoIiwia2EiLCJuYSIsIk0iLCJjYSIsImxhIiwibWEiLCJvYSIsInBhIiwicWEiLCJyYSIsInNhIiwieCIsInRhIiwiRWEiLCJ3YSIsInkiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiRmEiLCJHYSIsIkhhIiwiSmEiLCJ2YSIsIklhIiwiTGEiLCJ6Iiwic3JjRWxlbWVudCIsImZyb21FbGVtZW50IiwiTWEiLCJBIiwiTmEiLCJPYSIsImNhcHR1cmUiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiVWEiLCJXYSIsIlZhIiwiWGEiLCJZYSIsIiRhIiwiYWIiLCJiYiIsIk4iLCJnYiIsImViIiwiZmIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiTyIsImliIiwiZGV0YWNoRXZlbnQiLCJqYiIsIkIiLCJQIiwiSSIsIkMiLCJrYiIsImxiIiwibWIiLCJuYiIsInViIiwicGIiLCJxYiIsInJiIiwic2IiLCJ4YiIsInZiIiwid2IiLCJ5YiIsInpiIiwiUiIsIkFiIiwiQmIiLCJDYiIsIkQiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkUiLCJKYiIsIkciLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlNUQVRfRVZFTlQiLCJzdGF0IiwiUGIiLCJKIiwiUWIiLCJOT19FUlJPUiIsInRiIiwiVElNRU9VVCIsIlJiIiwiVmIiLCJTYiIsIlRiIiwiVWIiLCJYYiIsIksiLCJPUEVOIiwiWWIiLCJVIiwiUyIsIlpiIiwiVCIsIkYiLCJWIiwiWSIsIloiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiSGIiLCJqYyIsIkRhIiwibGMiLCJuYyIsImtjIiwib2MiLCJRIiwicGMiLCJpYyIsIm1jIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsImphIiwiQ2EiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJEYyIsIlciLCJDYyIsIkJjIiwiaGMiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsInN0cmVhbSIsIkliIiwiS2IiLCJFYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJUYyIsIlFjIiwiTGMiLCJSYyIsImFicyIsImRlY29kZVVSSSIsImVuY29kZVVSSSIsIlNjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJGYyIsIlVjIiwiV2MiLCJYYyIsIlBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyIsInBlcmZvcm1hbmNlIiwiZ2V0RW50cmllc0J5VHlwZSIsIm5leHRIb3BQcm90b2NvbCIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJkZCIsImVkIiwiZmQiLCJnZCIsImpkIiwiZ2EiLCJoZCIsImNyZWRlbnRpYWxzIiwiUmVxdWVzdCIsImFycmF5QnVmZmVyIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJVaW50OEFycmF5Iiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInJkIiwic2QiLCJwZCIsIm1velJlc3BvbnNlQXJyYXlCdWZmZXIiLCJ1ZCIsInZkIiwid2QiLCJpbnRlcm5hbENoYW5uZWxQYXJhbXMiLCJ4ZCIsIlphIiwieG1sSHR0cEZhY3RvcnkiLCJzdXBwb3J0c0Nyb3NzRG9tYWluWGhyIiwiY29uY3VycmVudFJlcXVlc3RMaW1pdCIsImZhc3RIYW5kc2hha2UiLCJlbmNvZGVJbml0TWVzc2FnZUhlYWRlcnMiLCJmb3JjZUxvbmdQb2xsaW5nIiwiZGV0ZWN0QnVmZmVyaW5nUHJveHkiLCJ5ZCIsInpkIiwic2VuZEJlYWNvbiIsIkltYWdlIiwiQWQiLCJFZCIsIkRkIiwiQ2QiLCJGZCIsIkJkIiwiY2QiLCJLYSIsIkdkIiwiSGQiLCJtZXNzYWdlVXJsUGFyYW1zIiwibWVzc2FnZUhlYWRlcnMiLCJjbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkIiwiaW5pdE1lc3NhZ2VIZWFkZXJzIiwibWVzc2FnZUNvbnRlbnRUeXBlIiwic2VuZFJhd0pzb24iLCJodHRwU2Vzc2lvbklkUGFyYW0iLCJJZCIsIl9fc21fXyIsIkpkIiwiRm9ybURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJxZCIsIl9fZGF0YV9fIiwiY3JlYXRlV2ViQ2hhbm5lbCIsIkhUVFBfRVJST1IiLCJDT01QTEVURSIsIkV2ZW50VHlwZSIsIkNMT1NFIiwiTUVTU0FHRSIsImxpc3RlbiIsImxpc3Rlbk9uY2UiLCJnZXRMYXN0RXJyb3IiLCJnZXRMYXN0RXJyb3JDb2RlIiwiZ2V0U3RhdHVzIiwiZ2V0UmVzcG9uc2VKc29uIiwiZ2V0UmVzcG9uc2VUZXh0Iiwic2V0V2l0aENyZWRlbnRpYWxzIiwiY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCIsImdldFN0YXRFdmVudFRhcmdldCIsIkVycm9yQ29kZSIsIlN0YXQiLCJQUk9YWSIsIk5PUFJPWFkiLCJvYiIsIkZldGNoWG1sSHR0cEZhY3RvcnkiLCJXZWJDaGFubmVsIiwiWGhySW8iLCJpc0F1dGhlbnRpY2F0ZWQiLCJ0b0tleSIsImlzRXF1YWwiLCJVTkFVVEhFTlRJQ0FURUQiLCJHT09HTEVfQ1JFREVOVElBTFMiLCJGSVJTVF9QQVJUWSIsIk1PQ0tfVVNFUiIsIk9LIiwiQ0FOQ0VMTEVEIiwiVU5LTk9XTiIsIklOVkFMSURfQVJHVU1FTlQiLCJERUFETElORV9FWENFRURFRCIsIk5PVF9GT1VORCIsIkFMUkVBRFlfRVhJU1RTIiwiUEVSTUlTU0lPTl9ERU5JRUQiLCJSRVNPVVJDRV9FWEhBVVNURUQiLCJGQUlMRURfUFJFQ09ORElUSU9OIiwiQUJPUlRFRCIsIk9VVF9PRl9SQU5HRSIsIlVOSU1QTEVNRU5URUQiLCJVTkFWQUlMQUJMRSIsIkRBVEFfTE9TUyIsImludmFsaWRhdGVUb2tlbiIsImVucXVldWVSZXRyeWFibGUiLCJzaHV0ZG93biIsImNoYW5nZUxpc3RlbmVyIiwiZ2V0QXV0aEhlYWRlclZhbHVlRm9yRmlyc3RQYXJ0eSIsImFwcENoZWNrIiwiYWRkVG9rZW5MaXN0ZW5lciIsInJlbW92ZVRva2VuTGlzdGVuZXIiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInR0IiwiZXZlcnkiLCJudCIsIm5hbm9zZWNvbmRzIiwiZnJvbU1pbGxpcyIsInRvRGF0ZSIsInRvTWlsbGlzIiwiX2NvbXBhcmVUbyIsInBhZFN0YXJ0Iiwic3QiLCJ0aW1lc3RhbXAiLCJjb21wYXJlVG8iLCJ0b01pY3Jvc2Vjb25kcyIsInRvVGltZXN0YW1wIiwiaXQiLCJzZWdtZW50cyIsImNvbXBhcmF0b3IiLCJjaGlsZCIsImxpbWl0IiwiY29uc3RydWN0IiwicG9wRmlyc3QiLCJwb3BMYXN0IiwiZmlyc3RTZWdtZW50IiwibGFzdFNlZ21lbnQiLCJpc1ByZWZpeE9mIiwiaXNJbW1lZGlhdGVQYXJlbnRPZiIsInJ0IiwiY2Fub25pY2FsU3RyaW5nIiwib3QiLCJ1dCIsImlzVmFsaWRJZGVudGlmaWVyIiwiaXNLZXlGaWVsZCIsImZyb21TdHJpbmciLCJlbXB0eVBhdGgiLCJjb2xsZWN0aW9uR3JvdXAiLCJoYXNDb2xsZWN0aW9uSWQiLCJnZXRDb2xsZWN0aW9uR3JvdXAiLCJnZXRDb2xsZWN0aW9uUGF0aCIsImd0IiwieXQiLCJyZWFkVGltZSIsImRvY3VtZW50S2V5IiwibGFyZ2VzdEJhdGNoSWQiLCJwdCIsIlR0Iiwib25Db21taXR0ZWRMaXN0ZW5lcnMiLCJhZGRPbkNvbW1pdHRlZExpc3RlbmVyIiwicmFpc2VPbkNvbW1pdHRlZEV2ZW50IiwiRXQiLCJBdCIsIm5leHRDYWxsYmFjayIsImNhdGNoQ2FsbGJhY2siLCJpc0RvbmUiLCJjYWxsYmFja0F0dGFjaGVkIiwid3JhcEZhaWx1cmUiLCJ3cmFwU3VjY2VzcyIsIndyYXBVc2VyRnVuY3Rpb24iLCJ3YWl0Rm9yIiwiVnQiLCJPdCIsInByZXZpb3VzVmFsdWUiLCJzZXF1ZW5jZU51bWJlckhhbmRsZXIiLCJ3cml0ZVNlcXVlbmNlTnVtYmVyIiwiTXQiLCJGdCIsIiR0IiwiYXQiLCJCdCIsIlV0IiwiRU1QVFkiLCJCTEFDSyIsIm1pbktleSIsIm1heEtleSIsImlub3JkZXJUcmF2ZXJzYWwiLCJyZXZlcnNlVHJhdmVyc2FsIiwiZ2V0SXRlcmF0b3IiLCJMdCIsImdldEl0ZXJhdG9yRnJvbSIsImdldFJldmVyc2VJdGVyYXRvciIsImdldFJldmVyc2VJdGVyYXRvckZyb20iLCJpc1JldmVyc2UiLCJub2RlU3RhY2siLCJnZXROZXh0IiwiaGFzTmV4dCIsInBlZWsiLCJSRUQiLCJmaXhVcCIsInJlbW92ZU1pbiIsImlzUmVkIiwibW92ZVJlZExlZnQiLCJyb3RhdGVSaWdodCIsIm1vdmVSZWRSaWdodCIsInJvdGF0ZUxlZnQiLCJjb2xvckZsaXAiLCJjaGVja01heERlcHRoIiwicG93IiwicXQiLCJmb3JFYWNoSW5SYW5nZSIsImZvckVhY2hXaGlsZSIsImZpcnN0QWZ0ZXJPckVxdWFsIiwiS3QiLCJ1bmlvbldpdGgiLCJpdGVyIiwiUXQiLCJmaWVsZHMiLCJjb3ZlcnMiLCJXdCIsImJpbmFyeVN0cmluZyIsInRvQmFzZTY0IiwidG9VaW50OEFycmF5IiwiYXBwcm94aW1hdGVCeXRlU2l6ZSIsIkVNUFRZX0JZVEVfU1RSSU5HIiwienQiLCJIdCIsIm5hbm9zIiwiSnQiLCJZdCIsImZyb21CYXNlNjRTdHJpbmciLCJmcm9tVWludDhBcnJheSIsIlh0IiwibWFwVmFsdWUiLCJfX3R5cGVfXyIsInN0cmluZ1ZhbHVlIiwiWnQiLCJfX3ByZXZpb3VzX3ZhbHVlX18iLCJ0ZSIsIl9fbG9jYWxfd3JpdGVfdGltZV9fIiwidGltZXN0YW1wVmFsdWUiLCJlZSIsImRhdGFiYXNlSWQiLCJwZXJzaXN0ZW5jZUtleSIsInNzbCIsImF1dG9EZXRlY3RMb25nUG9sbGluZyIsInVzZUZldGNoU3RyZWFtcyIsIm5lIiwiZGF0YWJhc2UiLCJpc0RlZmF1bHREYXRhYmFzZSIsInNlIiwiaWUiLCJvZSIsImNlIiwiRWUiLCJhZSIsImJvb2xlYW5WYWx1ZSIsImJ5dGVzVmFsdWUiLCJyZWZlcmVuY2VWYWx1ZSIsImdlb1BvaW50VmFsdWUiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImludGVnZXJWYWx1ZSIsImRvdWJsZVZhbHVlIiwiYXJyYXlWYWx1ZSIsImhlIiwibGUiLCJmZSIsImRlIiwiZnJvbU5hbWUiLCJ3ZSIsIm1lIiwiZ2UiLCJ5ZSIsInBlIiwiSWUiLCJUZSIsInZlIiwiZmllbGQiLCJnZXRGaWVsZHNNYXAiLCJzZXRBbGwiLCJhcHBseUNoYW5nZXMiLCJWZSIsIlNlIiwiZG9jdW1lbnRUeXBlIiwiZG9jdW1lbnRTdGF0ZSIsImNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQiLCJjb252ZXJ0VG9Ob0RvY3VtZW50IiwiY29udmVydFRvVW5rbm93bkRvY3VtZW50Iiwic2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zIiwic2V0SGFzTG9jYWxNdXRhdGlvbnMiLCJzZXRSZWFkVGltZSIsImhhc0xvY2FsTXV0YXRpb25zIiwiaGFzQ29tbWl0dGVkTXV0YXRpb25zIiwiaGFzUGVuZGluZ1dyaXRlcyIsImlzVmFsaWREb2N1bWVudCIsImlzRm91bmREb2N1bWVudCIsImlzTm9Eb2N1bWVudCIsImlzVW5rbm93bkRvY3VtZW50IiwibXV0YWJsZUNvcHkiLCJEZSIsIm9yZGVyQnkiLCJzdGFydEF0IiwiZW5kQXQiLCJodCIsIkNlIiwieGUiLCJpbmNsdXNpdmUiLCJrZSIsIkplIiwiWGUiLCJPZSIsImlzRG9jdW1lbnRLZXkiLCJCZSIsImx0IiwiTGUiLCJHZSIsIlFlIiwiamUiLCJXZSIsIlVlIiwicWUiLCJmdCIsImR0IiwiS2UiLCJudWxsVmFsdWUiLCJ6ZSIsIkhlIiwiWWUiLCJaZSIsImV4cGxpY2l0T3JkZXJCeSIsImxpbWl0VHlwZSIsIl90Iiwid3QiLCJlbiIsIm5uIiwidW4iLCJybiIsInNuIiwia2V5RmllbGQiLCJjbiIsImFuIiwiaG4iLCJsbiIsIk5lIiwiZG4iLCJ3biIsIm1uIiwiZ24iLCJ5biIsInBuIiwiaXNJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJJbiIsIlRuIiwiUm4iLCJibiIsIlBuIiwidm4iLCJWbiIsIkFuIiwiRG4iLCJJdCIsIkVuIiwiU24iLCJDbiIsImtuIiwidHJhbnNmb3JtUmVzdWx0cyIsIk9uIiwidXBkYXRlVGltZSIsImV4aXN0cyIsImlzTm9uZSIsIk1uIiwiRm4iLCIkbiIsInpuIiwibm9uZSIsIktuIiwiR24iLCJCbiIsImpuIiwiZmllbGRUcmFuc2Zvcm1zIiwicHJlY29uZGl0aW9uIiwiUW4iLCJMbiIsIlduIiwiZmllbGRNYXNrIiwiVW4iLCJ0cmFuc2Zvcm0iLCJxbiIsIk5uIiwiZ2V0RmllbGRNYXNrIiwiSG4iLCJKbiIsIlluIiwiWG4iLCJ0cyIsImVzIiwibWFwS2V5Rm4iLCJlcXVhbHNGbiIsImlubmVyIiwiaW5uZXJTaXplIiwibnMiLCJzcyIsInJzIiwib3MiLCJvdmVybGF5ZWREb2N1bWVudCIsInVzIiwiYXMiLCJjcyIsImhzIiwibHMiLCJmcyIsImRzIiwiX3MiLCJ3cyIsInNuYXBzaG90VmVyc2lvbiIsInRhcmdldENoYW5nZXMiLCJ0YXJnZXRNaXNtYXRjaGVzIiwiZG9jdW1lbnRVcGRhdGVzIiwicmVzb2x2ZWRMaW1ib0RvY3VtZW50cyIsIm1zIiwiY3JlYXRlU3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2VGb3JDdXJyZW50Q2hhbmdlIiwicmVzdW1lVG9rZW4iLCJhZGRlZERvY3VtZW50cyIsIm1vZGlmaWVkRG9jdW1lbnRzIiwicmVtb3ZlZERvY3VtZW50cyIsImdzIiwicmVtb3ZlZFRhcmdldElkcyIsInlzIiwidGFyZ2V0SWQiLCJwcyIsInRhcmdldElkcyIsImNhdXNlIiwiSXMiLCJSdCIsImJ0IiwiQXMiLCJQdCIsInZ0IiwiU3QiLCJEdCIsIkN0IiwieHQiLCJOdCIsImt0IiwiVHMiLCJFcyIsIkd0IiwianQiLCJmb3JFYWNoVGFyZ2V0IiwicmVtb3ZlVGFyZ2V0IiwibmV3Tm9Eb2N1bWVudCIsInB1cnBvc2UiLCJnZXRSZW1vdGVLZXlzRm9yVGFyZ2V0IiwiUnMiLCJhc2MiLCJkZXNjIiwiYnMiLCJpbiIsIlBzIiwidnMiLCJWcyIsIlNzIiwiRHMiLCJmcm9tVGltZXN0YW1wIiwiQ3MiLCJ4cyIsImlpIiwiTnMiLCJrcyIsIiRzIiwiT3MiLCJGcyIsIkJzIiwianMiLCJkb2N1bWVudHMiLCJXcyIsInN0cnVjdHVyZWRRdWVyeSIsImNvbGxlY3Rpb25JZCIsImFsbERlc2NlbmRhbnRzIiwidW5hcnlGaWx0ZXIiLCJacyIsImZpZWxkRmlsdGVyIiwiWHMiLCJjb21wb3NpdGVGaWx0ZXIiLCJkaXJlY3Rpb24iLCJZcyIsInpzIiwiTXMiLCJKcyIsInRpIiwidG4iLCJuaSIsImVpIiwiZmllbGRQYXRoIiwiZnJvbVNlcnZlckZvcm1hdCIsIk5hTiIsInNpIiwiZmllbGRQYXRocyIsImtpIiwiYmF0Y2hJZCIsImxvY2FsV3JpdGVUaW1lIiwiYmFzZU11dGF0aW9ucyIsIm11dGF0aW9ucyIsImFwcGx5VG9SZW1vdGVEb2N1bWVudCIsIm11dGF0aW9uUmVzdWx0cyIsImFwcGx5VG9Mb2NhbFZpZXciLCJhcHBseVRvTG9jYWxEb2N1bWVudFNldCIsIm11dGF0ZWRGaWVsZHMiLCJPaSIsImJhdGNoIiwiY29tbWl0VmVyc2lvbiIsImRvY1ZlcnNpb25zIiwiTWkiLCJtdXRhdGlvbiIsImdldEtleSIsIkZpIiwic2VxdWVuY2VOdW1iZXIiLCJsYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uIiwid2l0aFNlcXVlbmNlTnVtYmVyIiwid2l0aFJlc3VtZVRva2VuIiwid2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24iLCIkaSIsIldpIiwibnIiLCJkciIsIl9yIiwiYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgiLCJnZXRDb2xsZWN0aW9uUGFyZW50cyIsImdldEVudHJpZXMiLCJhZGRGaWVsZEluZGV4IiwiZGVsZXRlRmllbGRJbmRleCIsImdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0IiwiZ2V0SW5kZXhUeXBlIiwiZ2V0RmllbGRJbmRleGVzIiwiZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlIiwiZ2V0TWluT2Zmc2V0IiwiZ2V0TWluT2Zmc2V0RnJvbUNvbGxlY3Rpb25Hcm91cCIsInVwZGF0ZUNvbGxlY3Rpb25Hcm91cCIsInVwZGF0ZUluZGV4RW50cmllcyIsIkFyIiwiY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCIsInBlcmNlbnRpbGVUb0NvbGxlY3QiLCJtYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0IiwiREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUiLCJERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QiLCJERUZBVUxUIiwiRElTQUJMRUQiLCJDciIsInFyIiwiY2hhbmdlcyIsImNoYW5nZXNBcHBsaWVkIiwiYWRkRW50cnkiLCJhc3NlcnROb3RBcHBsaWVkIiwicmVtb3ZlRW50cnkiLCJuZXdJbnZhbGlkRG9jdW1lbnQiLCJnZXRFbnRyeSIsImdldEZyb21DYWNoZSIsImdldEFsbEZyb21DYWNoZSIsIllyIiwiWHIiLCJyZW1vdGVEb2N1bWVudENhY2hlIiwibXV0YXRpb25RdWV1ZSIsImRvY3VtZW50T3ZlcmxheUNhY2hlIiwiaW5kZXhNYW5hZ2VyIiwiZ2V0RG9jdW1lbnQiLCJnZXRPdmVybGF5IiwiZ2V0QmFzZURvY3VtZW50IiwiZ2V0RG9jdW1lbnRzIiwiZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHMiLCJwb3B1bGF0ZU92ZXJsYXlzIiwiY29tcHV0ZVZpZXdzIiwiZ2V0T3ZlcmxheWVkRG9jdW1lbnRzIiwiZ2V0T3ZlcmxheXMiLCJyZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5cyIsImdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyIsInNhdmVPdmVybGF5cyIsInJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzRm9yRG9jdW1lbnRLZXlzIiwiZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSIsImdldERvY3VtZW50c01hdGNoaW5nRG9jdW1lbnRRdWVyeSIsImdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvbkdyb3VwUXVlcnkiLCJnZXREb2N1bWVudHNNYXRjaGluZ0NvbGxlY3Rpb25RdWVyeSIsImdldE5leHREb2N1bWVudHMiLCJnZXRBbGxGcm9tQ29sbGVjdGlvbkdyb3VwIiwiZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uR3JvdXAiLCJnZXRBbGxGcm9tQ29sbGVjdGlvbiIsImdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbiIsIlpyIiwiWm4iLCJnZXRCdW5kbGVNZXRhZGF0YSIsInNhdmVCdW5kbGVNZXRhZGF0YSIsImNyZWF0ZVRpbWUiLCJnZXROYW1lZFF1ZXJ5Iiwic2F2ZU5hbWVkUXVlcnkiLCJidW5kbGVkUXVlcnkiLCJvdmVybGF5cyIsInVlIiwicmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkIiwiZW8iLCJubyIsImFkZFJlZmVyZW5jZSIsInJlbW92ZVJlZmVyZW5jZSIsImNvbnRhaW5zS2V5Iiwic28iLCJyZWZlcmVuY2VEZWxlZ2F0ZSIsImNoZWNrRW1wdHkiLCJhZGRNdXRhdGlvbkJhdGNoIiwibG9va3VwTXV0YXRpb25CYXRjaCIsImdldE5leHRNdXRhdGlvbkJhdGNoQWZ0ZXJCYXRjaElkIiwiZ2V0SGlnaGVzdFVuYWNrbm93bGVkZ2VkQmF0Y2hJZCIsImdldEFsbE11dGF0aW9uQmF0Y2hlcyIsImdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5IiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdRdWVyeSIsInJlbW92ZU11dGF0aW9uQmF0Y2giLCJtYXJrUG90ZW50aWFsbHlPcnBoYW5lZCIsInBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrIiwiaW8iLCJkb2NzIiwic2V0SW5kZXhNYW5hZ2VyIiwibmV3Q2hhbmdlQnVmZmVyIiwicm8iLCJnZXRTaXplIiwib28iLCJsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uIiwiaGlnaGVzdFRhcmdldElkIiwidGFyZ2V0Q291bnQiLCJnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uIiwiZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyIiwiYWxsb2NhdGVUYXJnZXRJZCIsInNldFRhcmdldHNNZXRhZGF0YSIsImFkZFRhcmdldERhdGEiLCJ1cGRhdGVUYXJnZXREYXRhIiwicmVtb3ZlVGFyZ2V0RGF0YSIsInJlbW92ZVRhcmdldHMiLCJyZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCIsImdldFRhcmdldENvdW50IiwiZ2V0VGFyZ2V0RGF0YSIsImFkZE1hdGNoaW5nS2V5cyIsInJlbW92ZU1hdGNoaW5nS2V5cyIsImdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkIiwidW8iLCJzdGFydGVkIiwic2V0RGF0YWJhc2VEZWxldGVkTGlzdGVuZXIiLCJzZXROZXR3b3JrRW5hYmxlZCIsImdldEluZGV4TWFuYWdlciIsImdldERvY3VtZW50T3ZlcmxheUNhY2hlIiwiZ2V0TXV0YXRpb25RdWV1ZSIsImdldFRhcmdldENhY2hlIiwiZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSIsImdldEJ1bmRsZUNhY2hlIiwicnVuVHJhbnNhY3Rpb24iLCJjbyIsIm9yIiwiY3VycmVudFNlcXVlbmNlTnVtYmVyIiwiYW8iLCJMcyIsImZyb21QYXRoIiwiVXMiLCJ1cGRhdGVMaW1ib0RvY3VtZW50IiwieW8iLCJmcm9tQ2FjaGUiLCJTaSIsIkRpIiwiZG9jQ2hhbmdlcyIsInBvIiwieGkiLCJOaSIsIkJpIiwibXQiLCJJbyIsIkxpIiwiVWkiLCJxaSIsIktpIiwiR2kiLCJRaSIsImxvY2FsRG9jdW1lbnRzIiwiY29sbGVjdEdhcmJhZ2UiLCJjb2xsZWN0IiwiRW8iLCJqaSIsInJlbW92ZWRCYXRjaElkcyIsImFkZGVkQmF0Y2hJZHMiLCJSbyIsInZvIiwiU28iLCJEbyIsIk5vIiwiX24iLCJIaSIsIktvIiwiYWN0aXZlVGFyZ2V0SWRzIiwiZXIiLCJ1cGRhdGVUaW1lTXMiLCJRbyIsIkxyIiwiVXIiLCJvbmxpbmVTdGF0ZUhhbmRsZXIiLCJhZGRQZW5kaW5nTXV0YXRpb24iLCJ1cGRhdGVNdXRhdGlvblN0YXRlIiwiYWRkTG9jYWxRdWVyeVRhcmdldCIsInVwZGF0ZVF1ZXJ5U3RhdGUiLCJyZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0IiwiaXNMb2NhbFF1ZXJ5VGFyZ2V0IiwiY2xlYXJRdWVyeVN0YXRlIiwiZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzIiwiaXNBY3RpdmVRdWVyeVRhcmdldCIsImhhbmRsZVVzZXJDaGFuZ2UiLCJzZXRPbmxpbmVTdGF0ZSIsIm5vdGlmeUJ1bmRsZUxvYWRlZCIsImpvIiwiV28iLCJLciIsIkdyIiwiUXIiLCJqciIsIldyIiwienIiLCJ6byIsIkJhdGNoR2V0RG9jdW1lbnRzIiwiQ29tbWl0IiwiUnVuUXVlcnkiLCJSdW5BZ2dyZWdhdGlvblF1ZXJ5IiwiSG8iLCJIciIsIkpyIiwiSm8iLCJkYXRhYmFzZUluZm8iLCJobyIsImxvIiwiZm8iLCJfbyIsIndvIiwiZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zIiwiWG8iLCJabyIsInR1IiwiSHMiLCJtbyIsIlRvIiwiQW8iLCJibyIsImVucXVldWVBZnRlckRlbGF5IiwiUG8iLCJza2lwRGVsYXkiLCJldSIsIlZvIiwiYXV0aENyZWRlbnRpYWxzUHJvdmlkZXIiLCJhcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIiLCJDbyIsInhvIiwia28iLCJPbyIsIk1vIiwiRm8iLCIkbyIsIkJvIiwiTG8iLCJVbyIsInFvIiwiR28iLCJlbnF1ZXVlQW5kRm9yZ2V0IiwibnUiLCJ0YXJnZXRDaGFuZ2UiLCJ0YXJnZXRDaGFuZ2VUeXBlIiwiZG9jdW1lbnRDaGFuZ2UiLCJuZXdGb3VuZERvY3VtZW50IiwiZG9jdW1lbnREZWxldGUiLCJkb2N1bWVudFJlbW92ZSIsInFzIiwiYWRkVGFyZ2V0IiwibGFiZWxzIiwic3UiLCJZbyIsImxhc3RTdHJlYW1Ub2tlbiIsInN0cmVhbVRva2VuIiwiUXMiLCJ3cml0ZVJlc3VsdHMiLCJjb21taXRUaW1lIiwid3JpdGVzIiwidXBkYXRlIiwidXBkYXRlTWFzayIsInVwZGF0ZVRyYW5zZm9ybXMiLCJzZXRUb1NlcnZlclZhbHVlIiwiYXBwZW5kTWlzc2luZ0VsZW1lbnRzIiwicmVtb3ZlQWxsRnJvbUFycmF5IiwiaW5jcmVtZW50IiwiY3VycmVudERvY3VtZW50IiwiS3MiLCJpdSIsImF1dGhDcmVkZW50aWFscyIsImFwcENoZWNrQ3JlZGVudGlhbHMiLCJ0ZXJtaW5hdGUiLCJvdSIsImFzeW5jUXVldWUiLCJydSIsInV1IiwiY3UiLCJhdSIsImh1IiwibHUiLCJmdSIsImxvY2FsU3RvcmUiLCJkYXRhc3RvcmUiLCJyZW1vdGVTeW5jZXIiLCJkdSIsIl91Iiwid3UiLCJtdSIsImd1IiwieXUiLCJrdSIsInB1IiwiSXUiLCJyZWplY3RMaXN0ZW4iLCJUdSIsImFwcGx5UmVtb3RlRXZlbnQiLCJFdSIsIkF1IiwiT3UiLCJSdSIsImJ1IiwiUHUiLCJ2dSIsIlZ1IiwiU3UiLCJEdSIsImFwcGx5U3VjY2Vzc2Z1bFdyaXRlIiwiQ3UiLCJyZWplY3RGYWlsZWRXcml0ZSIsInh1IiwidmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcyIsImhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UiLCJNdSIsInRhcmdldFRpbWVNcyIsInJlbW92YWxDYWxsYmFjayIsInRpbWVySGFuZGxlIiwiaGFuZGxlRGVsYXlFbGFwc2VkIiwiRnUiLCIkdSIsImtleWVkTWFwIiwic29ydGVkU2V0IiwiQnUiLCJ0cmFjayIsIkx1Iiwib2xkRG9jcyIsIm11dGF0ZWRLZXlzIiwic3luY1N0YXRlQ2hhbmdlZCIsImV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzIiwiaGFzQ2FjaGVkUmVzdWx0cyIsImVtcHR5U2V0IiwiVXUiLCJxdSIsInF1ZXJpZXMiLCJvbmxpbmVTdGF0ZSIsIlF1IiwiV3UiLCJqdSIsInp1IiwiaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyIsIk51IiwiZnJvbUluaXRpYWxEb2N1bWVudHMiLCJadSIsIkt1IiwiR3UiLCJIdSIsIkp1IiwiWXUiLCJzbmFwc2hvdCIsIlh1IiwicmVtb3RlU3RvcmUiLCJzaGFyZWRDbGllbnRTdGF0ZSIsIm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zIiwiaXNQcmltYXJ5Q2xpZW50IiwidHJhY2tSZW1vdmFscyIsInppIiwiQ2kiLCJzeW5jaHJvbml6ZVRhYnMiLCJnY1NjaGVkdWxlciIsImluZGV4QmFja2ZpbGxlclNjaGVkdWxlciIsImluaXRpYWxVc2VyIiwiY3JlYXRlRGF0YXN0b3JlIiwiY3JlYXRlUmVtb3RlU3RvcmUiLCJjcmVhdGVFdmVudE1hbmFnZXIiLCJzeW5jRW5naW5lIiwiY3JlYXRlU3luY0VuZ2luZSIsImlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMiLCJjYWNoZVNpemVCeXRlcyIsImV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmciLCJleHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmciLCJfYXV0aENyZWRlbnRpYWxzIiwiX2FwcENoZWNrQ3JlZGVudGlhbHMiLCJfZGF0YWJhc2VJZCIsIl9hcHAiLCJfcGVyc2lzdGVuY2VLZXkiLCJfc2V0dGluZ3MiLCJfc2V0dGluZ3NGcm96ZW4iLCJfaW5pdGlhbGl6ZWQiLCJfdGVybWluYXRlZCIsIl90ZXJtaW5hdGVUYXNrIiwiX3NldFNldHRpbmdzIiwiY2xpZW50Iiwic2Vzc2lvbkluZGV4IiwiaWFtVG9rZW4iLCJhdXRoVG9rZW5GYWN0b3J5IiwiX2dldFNldHRpbmdzIiwiX2ZyZWV6ZVNldHRpbmdzIiwiX3Rlcm1pbmF0ZSIsImNvbnZlcnRlciIsImZpcmVzdG9yZSIsIl9wYXRoIiwid2l0aENvbnZlcnRlciIsIl9xdWVyeSIsIm11dGVkIiwiY2xpZW50SWQiLCJhdXRoQ3JlZGVudGlhbExpc3RlbmVyIiwiYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIiLCJzZXRDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIiLCJzZXRBcHBDaGVja1Rva2VuQ2hhbmdlTGlzdGVuZXIiLCJ2ZXJpZnlOb3RUZXJtaW5hdGVkIiwiaXNTaHV0dGluZ0Rvd24iLCJlbnRlclJlc3RyaWN0ZWRNb2RlIiwiZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQiLCJvbmxpbmVDb21wb25lbnRzIiwib2ZmbGluZUNvbXBvbmVudHMiLCJnZXRDb25maWd1cmF0aW9uIiwib25MaXN0ZW4iLCJvblVubGlzdGVuIiwidmlzaWJpbGl0eVN0YXRlIiwiZW5xdWV1ZSIsImNyZWF0ZUFuZFNjaGVkdWxlIiwiX3F1ZXVlIiwiX2ZpcmVzdG9yZUNsaWVudCIsIl9ieXRlU3RyaW5nIiwiZWgiLCJfaW50ZXJuYWxQYXRoIiwic2giLCJfbWV0aG9kTmFtZSIsImloIiwiX2xhdCIsIl9sb25nIiwicmgiLCJvaCIsInRvTXV0YXRpb24iLCJ1aCIsImFoIiwiU2giLCJtZXRob2ROYW1lIiwiaGgiLCJsaCIsImZoIiwibWVyZ2VGaWVsZHMiLCJiaCIsIkFoIiwiUGgiLCJEaCIsImRoIiwiX3RvRmllbGRUcmFuc2Zvcm0iLCJUaCIsIkVoIiwiUmgiLCJmcm9tRGF0ZSIsIlZoIiwidmgiLCJzZWFyY2giLCJDaCIsIl9maXJlc3RvcmUiLCJfdXNlckRhdGFXcml0ZXIiLCJfZG9jdW1lbnQiLCJfY29udmVydGVyIiwicmVmIiwieGgiLCJmcm9tRmlyZXN0b3JlIiwiY29udmVydFZhbHVlIiwiTmgiLCJPaCIsIk1oIiwiX2FwcGx5IiwiVWgiLCJxaCIsIkdoIiwiSmgiLCJqaCIsIldoIiwiemgiLCJ0bCIsImNvbnZlcnRUaW1lc3RhbXAiLCJjb252ZXJ0U2VydmVyVGltZXN0YW1wIiwiY29udmVydEJ5dGVzIiwiY29udmVydFJlZmVyZW5jZSIsImNvbnZlcnRHZW9Qb2ludCIsImNvbnZlcnRBcnJheSIsImNvbnZlcnRPYmplY3QiLCJjb252ZXJ0RG9jdW1lbnRLZXkiLCJzbCIsImlsIiwiX2ZpcmVzdG9yZUltcGwiLCJybCIsInNlcnZlclRpbWVzdGFtcHMiLCJvbCIsIl9zbmFwc2hvdCIsIl9jYWNoZWRDaGFuZ2VzIiwiX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsInVsIiwiaGwiLCJkbCIsImtoIiwiRWwiLCJERUZBVUxUX0hPU1QiLCJTdG9yYWdlRXJyb3IiLCJzdGF0dXNfIiwicHJlcGVuZENvZGUiLCJfYmFzZU1lc3NhZ2UiLCJfY29kZUVxdWFscyIsImludmFsaWRBcmd1bWVudCIsImFwcERlbGV0ZWQiLCJMb2NhdGlvbiIsImJ1Y2tldCIsInBhdGhfIiwiaXNSb290IiwiZnVsbFNlcnZlclVybCIsImVuY29kZSIsImJ1Y2tldE9ubHlTZXJ2ZXJVcmwiLCJidWNrZXRTdHJpbmciLCJidWNrZXRMb2NhdGlvbiIsIm1ha2VGcm9tVXJsIiwiYnVja2V0RG9tYWluIiwiZ3NSZWdleCIsImh0dHBNb2RpZnkiLCJsb2MiLCJmaXJlYmFzZVN0b3JhZ2VIb3N0IiwicmVnZXgiLCJpbmRpY2VzIiwicG9zdE1vZGlmeSIsImdyb3VwIiwiY2FwdHVyZXMiLCJidWNrZXRWYWx1ZSIsInBhdGhWYWx1ZSIsImludmFsaWRVcmwiLCJGYWlsUmVxdWVzdCIsInByb21pc2VfIiwiZ2V0UHJvbWlzZSIsIl9hcHBEZWxldGUiLCJ2YWxpZGF0ZU51bWJlciIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJOZXR3b3JrUmVxdWVzdCIsInVybF8iLCJtZXRob2RfIiwiaGVhZGVyc18iLCJib2R5XyIsInN1Y2Nlc3NDb2Rlc18iLCJhZGRpdGlvbmFsUmV0cnlDb2Rlc18iLCJjYWxsYmFja18iLCJlcnJvckNhbGxiYWNrXyIsInRpbWVvdXRfIiwicHJvZ3Jlc3NDYWxsYmFja18iLCJjb25uZWN0aW9uRmFjdG9yeV8iLCJyZXRyeSIsInBlbmRpbmdDb25uZWN0aW9uXyIsImJhY2tvZmZJZF8iLCJjYW5jZWxlZF8iLCJhcHBEZWxldGVfIiwicmVzb2x2ZV8iLCJyZWplY3RfIiwic3RhcnRfIiwiYmFja29mZkRvbmUiLCJyZXF1ZXN0V2VudFRocm91Z2giLCJjb25uZWN0aW9uIiwid2FzU3VjY2Vzc0NvZGUiLCJnZXRSZXNwb25zZSIsImlzSnVzdERlZiIsImdldEVycm9yVGV4dCIsImNhbmNlbGVkIiwiUmVxdWVzdEVuZFN0YXR1cyIsImRvUmVxdWVzdCIsImJhY2tvZmZDb21wbGV0ZUNiIiwid2FpdFNlY29uZHMiLCJyZXRyeVRpbWVvdXRJZCIsImdsb2JhbFRpbWVvdXRJZCIsImhpdFRpbWVvdXQiLCJjYW5jZWxTdGF0ZSIsInRyaWdnZXJlZENhbGxiYWNrIiwidHJpZ2dlckNhbGxiYWNrIiwiY2FsbFdpdGhEZWxheSIsIm1pbGxpcyIsInJlc3BvbnNlSGFuZGxlciIsImNsZWFyR2xvYmFsVGltZW91dCIsIndhaXRNaWxsaXMiLCJ3YXNUaW1lb3V0IiwiYmFja29mZkNhbGxiYWNrIiwicHJvZ3Jlc3NMaXN0ZW5lciIsInByb2dyZXNzRXZlbnQiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJhZGRVcGxvYWRQcm9ncmVzc0xpc3RlbmVyIiwicmVtb3ZlVXBsb2FkUHJvZ3Jlc3NMaXN0ZW5lciIsImhpdFNlcnZlciIsImdldEVycm9yQ29kZSIsImFkZGl0aW9uYWxSZXRyeUNvZGVzIiwiaXNGaXZlSHVuZHJlZENvZGUiLCJpc0V4dHJhUmV0cnlDb2RlIiwiaXNBZGRpdGlvbmFsUmV0cnlDb2RlIiwiaXNSZXRyeVN0YXR1c0NvZGUiLCJ3YXNDYW5jZWxlZCIsIkFCT1JUIiwic3VjY2Vzc0NvZGUiLCJhcHBEZWxldGUiLCJSZWZlcmVuY2UiLCJfc2VydmljZSIsIl9sb2NhdGlvbiIsIl9uZXdSZWYiLCJmdWxsUGF0aCIsImxhc3RDb21wb25lbnQiLCJuZXdQYXRoIiwiX3Rocm93SWZSb290IiwiaW52YWxpZFJvb3RPcGVyYXRpb24iLCJleHRyYWN0QnVja2V0IiwibWFrZUZyb21CdWNrZXRTcGVjIiwiRmlyZWJhc2VTdG9yYWdlSW1wbCIsIl9hdXRoUHJvdmlkZXIiLCJfYXBwQ2hlY2tQcm92aWRlciIsIl91cmwiLCJfZmlyZWJhc2VWZXJzaW9uIiwiX2J1Y2tldCIsIl9ob3N0IiwiX3Byb3RvY29sIiwiX2FwcElkIiwiX21heE9wZXJhdGlvblJldHJ5VGltZSIsIl9tYXhVcGxvYWRSZXRyeVRpbWUiLCJfcmVxdWVzdHMiLCJtYXhVcGxvYWRSZXRyeVRpbWUiLCJtYXhPcGVyYXRpb25SZXRyeVRpbWUiLCJfb3ZlcnJpZGVBdXRoVG9rZW4iLCJ0b2tlbkRhdGEiLCJfbWFrZVN0b3JhZ2VSZWZlcmVuY2UiLCJfbWFrZVJlcXVlc3QiLCJyZXF1ZXN0SW5mbyIsInJlcXVlc3RGYWN0b3J5IiwiYXV0aFRva2VuIiwiYXBwQ2hlY2tUb2tlbiIsImZpcmViYXNlVmVyc2lvbiIsInF1ZXJ5UGFydCIsIm1ha2VRdWVyeVN0cmluZyIsInVybFBhcmFtcyIsImFkZEdtcGlkSGVhZGVyXyIsImFkZEF1dGhIZWFkZXJfIiwiYWRkVmVyc2lvbkhlYWRlcl8iLCJhZGRBcHBDaGVja0hlYWRlcl8iLCJzdWNjZXNzQ29kZXMiLCJlcnJvckhhbmRsZXIiLCJwcm9ncmVzc0NhbGxiYWNrIiwibWFrZVJlcXVlc3QiLCJfZ2V0QXV0aFRva2VuIiwiX2dldEFwcENoZWNrVG9rZW4iLCJTVE9SQUdFX1RZUEUiLCJhdXRoUHJvdmlkZXIiLCJhcHBDaGVja1Byb3ZpZGVyIiwiRmlyZWJhc2VJbml0Iiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwibWVhc3VyZW1lbnRJZCIsImZpcmViYXNlQ29uZmlnIiwibW9ja1VzZXJUb2tlbiIsImdldEZpcmVzdG9yZSIsImJ1Y2tldFVybCIsInN0b3JhZ2VJbnN0YW5jZSIsImNvbm5lY3RTdG9yYWdlRW11bGF0b3IkMSIsImNvbm5lY3RTdG9yYWdlRW11bGF0b3IiLCJnZXRTdG9yYWdlIiwiZ2V0Q3VycmVudHVzZXIiLCJnZXREYiIsIm9wZXJhdG9ycyIsInNpZ25VcCIsImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsIkh0dHBFcnJvciIsInNpZ25JbldpdGhDcmVkZW50aWFsIiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJvbkZpcnN0RGF0YSIsImNvbGxlY3Rpb25OYW1lIiwicXVvdGVDb2xsZWN0aW9uIiwiYmFzZUZpbHRlciIsImdldERvY3MiLCJvbk5leHREYXRhIiwiZmlyc3REb2MiLCJsYXN0RG9jIiwic3RhcnRBZnRlciIsIm9uUHJldkRhdGEiLCJlbmRCZWZvcmUiLCJvblVwZGF0ZSIsImRvY0lkIiwidXBkYXRlT2JqIiwiSWgiLCJwaCIsInVwZGF0ZURvYyIsInRvRmlyZXN0b3JlIiwic2V0RG9jIiwic2lnbmluIiwic2lnbkluIiwiYWxlcnQiXSwic291cmNlUm9vdCI6IiJ9